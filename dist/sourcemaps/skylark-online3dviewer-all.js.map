{"version":3,"sources":["skylark-online3dviewer-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","class2type","toString","type","forEach","toLowerCase","String","call","isEmptyObject","isFunction","value","isHtmlNode","nodeType","isNumber","isObject","isString","isWindow","window","isArray","object","constructor","Array","isArrayLike","isBoolean","isDefined","isDocument","DOCUMENT_NODE","isEmpty","isNull","isNumeric","isPlainObject","Object","getPrototypeOf","prototype","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith","isSymbol","isObjectLike","objectToString","symbolTag","isUndefined","undefined","types","INFINITY","MAX_INTEGER","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toFinite","toNumber","sign","other","valueOf","replace","isBinary","test","slice","toInteger","result","remainder","numbers","eq","deepEq","hasOwnProperty","keysFunc","defaults","SymbolProto","Symbol","allKeys","keys","key","push","has","_mixin","target","source","deep","safe","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","values","a","b","aStack","bStack","className","areArrays","aCtor","bCtor","clone","src","checkCloneMethod","copy","index","l","each","callback","undef","extend","arg","isEqual","includes","collection","fromIndex","guard","nativeMax","indexOf","baseIndexOf","isMatch","attrs","omit","prop1","prop2","pn","pick","removeItem","items","item","idx","splice","fallback","prop","safeMixin","objects","filter","baseFindIndex","array","predicate","fromRight","baseIsNaN","flatten","j","compact","first","n","func","grep","out","inArray","makeArray","offset","startWith","concat","merge","second","arr","fn","map","elements","reduce","initialValue","uniq","arrays","createClass","_constructor","_construct","init","props","parent","mixins","options","innerParent","ctor","Error","clss","unshift","superclass","cls","clsMixines","serialMixins","newCtor","xtor","Function","create","__proto__","__mixin__","mergeMixins","klassName","__mixins__","partial","proto","_super","noOverrided","overrides","superFn","tmp","overrided","ret","defineProperty","extendClass","inherit","f1","klass","QueryResults","results","isPromise","then","addIterativeMethod","method","Deferred","when","delegate","total","ArrayStore","queryEngine","query","queryObject","required","execute","thisObject","cache","buildFn","sortSet","sort","aValue","attribute","bValue","descending","start","count","Infinity","matches","idProperty","get","id","data","getIdentity","put","Math","random","overwrite","add","remove","setData","identifier","nextId","aspect","methodName","advice","receiveArguments","dispatcher","existing","executionId","before","next","around","after","newResults","signal","previous","advised","advise","TMP","templateSettings","evaluate","interpolate","escape","debounce","wait","timeout","context","clearTimeout","setTimeout","defer","requestAnimationFrame","setTimeoutout","noop","proxy","TypeError","returnTrue","returnFalse","template","text","settings","oldSettings","render","matcher","RegExp","noMatch","join","match","escapeRegExp","escapeChar","variable","e","_","argument","funcs","PGLISTENERS","PGNOTIFIES","Promise","always","handler","done","fail","catch","self","p","promise","resolve","reject","_resolve","_reject","wrapPromise","d","added","state","isResolved","isRejected","onResolved","onRejected","onProgress","progress","__ctx__","pipe","resolveWith","_resolved","notify","listener","error","reason","rejectWith","_rejected","errback","progback","all","bind","race","valueOrPromise","receivedPromise","nativePromise","deferred","cancel","err","immediate","async","parallel","ctx","rets","series","waterful","parseMilliSeconds","str","strs","number","isNaN","trim","datetimes","parse","event","segs","Emitter","on","events","selector","one","_hub","parsed","emit","CustomEvent","eventName","listeners","len","reCompact","listened","evtArr","_events","listenTo","listening","listeningTo","_listeningTo","listeningEvents","listeningEvent","listenToOnce","off","evts","liveEvents","unlistenTo","trigger","createEvent","Evented","hoster","isBrowser","isNode","global","browser","node","process","versions","v8","_document","w","require","document","matched","ua","exec","version","uaMatch","navigator","userAgent","chrome","webkit","safari","escapeCharMap","freeze","&","<",">","\"","'","`","=","replaceChar","c","escapeChars","idCounter","string","line","body","escapeHTML","me","callee","stash","getElementById","innerHTML","camelCase","toUpperCase","dasherize","deserializeValue","JSON","generateUUID","r","v","lowerFirst","charAt","rtrim","serializeValue","stringify","substitute","transform","getObject","retVal","getValue","_k","reverse","format","slugify","from","uniqueId","prefix","upperFirst","strings","Stateful","attributes","cid","cidPrefix","set","changed","validationError","idAttribute","toJSON","attr","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","_pending","clear","hasChanged","changedAttributes","diff","old","previousAttributes","isNew","isValid","validate","hub","publish","arg1","argn","subscribe","topic","_uid","langx","funcArg","payload","getQueryParams","url","queryParam","nv","toPixel","parseFloat","uid","URL","webkitURL","vendorPrefix","vendorPrefixRE","transEndEventNames","WebkitTransition","MozTransition","OTransition","transition","transEndEventName","css3PropPrefix","css3EventPrefix","cssStyles","cssProps","vendorPrefixesRE","testEl","createElement","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","requestFullScreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","testStyle","exitFullscreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","style","cssPropName","isIE","normalizeStyleProperty","normalizeCssProperty","normalizeCssEvent","support","end","fragmentRE","singleTagRE","div","table","tableBody","tableRow","containers","tr","tbody","thead","tfoot","td","th","*","rootNodeRE","ensureNodes","nodes","copyByClone","cloneNode","nodeName","elm","chkName","enhancePlaceContent","placing","neddsFlattern","append","parentNode","appendChild","tag","setAttribute","rxhtmlTag","isChildOf","directly","documentElement","contains","ownerDoc","ownerDocument","noder","active","doc","el","activeElement","blur","getAttribs","setAttrib","getAttrib","contents","contentDocument","childNodes","createFragment","html","$1","container","dom","removeChild","child","createTextNode","empty","hasChildNodes","firstChild","fullScreen","exitFullScreen","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","focusable","element","hasTabindex","mapName","img","focusableIfVisible","fieldset","$","is","disabled","closest","visible","isInDocument","offsetParent","defaultView","getComputedStyle","position","ownerWindow","parentWindow","refNode","nextSibling","insertBefore","prepend","reflow","offsetHeight","console","warn","children","oldNode","replaceChild","traverse","wrapper","wrapperNode","wrapperInner","unwrap","isDoc","local","nativeMatchesSelector","separatorIndex","combinatorIndex","reversed","reverseCache","reUnescape","expression","isReversed","Slick","currentCache","expressions","raw","regexp","parser","reverseCombinator","combinator","exp","last","parts","cexp","rawMatch","separator","combinatorChildren","tagName","attributeKey","attributeOperator","attributeQuote","attributeValue","pseudoMarker","pseudoClass","pseudoQuote","pseudoClassQuotedValue","pseudoClassValue","currentSeparator","currentParsed","classList","classes","pseudos","operator","rinputs","rheader","parseSelector","button","elem","checked","enabled","even","focus","tabindex","gt","sel","find","header","hidden","input","lt","not","odd","selected","tabbable","tabIndex","offsetWidth","createInputPseudo","createButtonPseudo","isArrayFilter","radio","checkbox","file","password","image","submit","reset","ancestors","root","rootIsSelector","descendants","querySelectorAll","matchError","descendant","querySelector","lastChild","previousSibling","check","adjacent","nextSiblings","previousSiblings","siblings","divide","cond","nativeSelector","customPseudos","part","arrayFilte","pseudo","getAttribute","hasAttribute","currentExpression","simpleExpCounter","filterSingle","matchs","combine","bit","node1","op","divided","single","currentBit","founds","found","currentItems","finder","ancestor","byId","findAll","capitalRE","propMap","readonly","for","class","maxlength","cellspacing","cellpadding","rowspan","colspan","usemap","frameborder","contenteditable","valHooks","option","select","selectedIndex","max","optionSet","attrName","_store","confirm","store","_attributeData","_setData","dataAttrName","camelName","_getData","cleanData","txt","textContent","hooks","value1","datax","dataName","aria","pluck","property","removeAttr","removeAttribute","removeData","names","removeProp","isQ","some","every","rquickExpr","wrapper_node_operation","oldValueFunc","argType","wrapper_map","wrapper_selector","wrapper_selector_until","util","wrapper_every_act","wrapper_value","newValue","NodeList","ready","toArray","size","excludes","parents","parentsUntil","pushStack","elms","prevObject","replaceWith","newContent","wrap","htmlIsFunction","wrapAll","firstElementChild","wrapInner","toggle","setting","css","show","hide","prevAll","nextAll","detach","hover","fnOver","fnOut","mouseenter","mouseleave","appendTo","prependTo","insertAfter","replaceAll","original","elems","insert","scrollParent","includeHidden","excludeStaticParent","overflowRegex","andSelf","addBack","eventType","place","addContent","content","disableSelection","preventDefault","enableSelection","flow","isBlockNode","plugin","returnValue","plugins","instantiate","wraps","wrapper_some_chk","wrapper_every_act_firstArgFunc","wrapper_name_value","VisualElement","_elm","velm","batch","action","HTMLElement","_delegator","ignoreProperties","eventMethods","stopImmediatePropagation","stopPropagation","readyRE","compatible","isDefaultPrevented","sourceMethod","NativeEventCtors","NativeEvents","compositionstart","compositionend","compositionupdate","beforecopy","beforecut","beforepaste","cut","paste","drag","dragend","dragenter","dragexit","dragleave","dragover","dragstart","drop","abort","change","selectionchange","focusin","focusout","keydown","keypress","keyup","message","click","contextmenu","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","textInput","touchstart","touchmove","touchend","load","resize","scroll","unload","wheel","bubbles","cancelable","namespace","getEventCtor","createProxy","originalEvent","specialEvents","focusinSupported","realEvent","handlers","EventBindings","_target","_event","_bindings","bindings","binding","_listener","domEvt","_args","isImmediatePropagationStopped","currentTarget","liveFired","related","relatedTarget","addEventListener","removing","removeEventListener","EventsHandler","_handler","register","specialEvent","bindingEvent","bindType","bindEventName","unregister","findHandler","readyState","keyCodeLookup","backspace","comma","delete","down","enter","home","left","page_down","page_up","period","right","space","tab","up","eventer","transitionEnd","delegateType","shortcuts","registry","run","shortcut","metaKey","ctrlKey","ctrl","alt","altKey","shiftKey","keyCode","charCode","pattern","shortcutKey","charCodeAt","regKey","special","stop","evented","Event","dispatchEvent","delegateMethodNames","forms","updateKeyValueArray","updateTypes","update","elementIndex","valueIndex","getElementType","elementProperty","getPropertyToUpdate","fields","multiple","field","defaultOptions","complete","deserialize","formElm","normalized","rPlus","decodeURIComponent","normalizeData","elementsByName","getFieldsByName","serializeArray","serializeObject","o","serialize","encodeURIComponent","maybeAddPx","cssNumber","column-count","columns","font-weight","line-height","opacity","z-index","zoom","classReCache","classRE","svg","baseVal","elementDisplay","getStyles","view","opener","styler","autocssfix","cssHooks","addClass","re","computedStyle","getPropertyValue","removeProperty","cssText","hasClass","isInvisible","removeClass","display","defaultDisplay","toggleClass","replaceClass","newClass","oldClass","cachedScrollbarWidth","px","scrollbarWidth","w1","w2","innerDiv","clientWidth","borderExtents","top","bottom","s","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","getBoundingClientRect","parentOffset","mex","marginExtents","pbex","relativePosition","boundingRect","clientSize","dimension","width","height","clientHeight","isBorderBox","bex","pex","paddingExtents","getDocumentSize","scrollWidth","scrollHeight","marginLeft","marginTop","marginRight","marginBottom","marginSize","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","pageXOffset","pageYOffset","relativeRect","scrollLeft","hasScrollLeft","scrollTo","scrollY","scrollTop","hasScrollTop","scrollX","innerWidth","innerHeight","geom","contentRect","cs","marginRect","pageRect","round","scrollIntoView","align","x","y","parentWidth","parentHeight","parentElm","pos","rootElm","offsetLeft","offsetTop","getOffset","abs","rhorizontal","rvertical","roffset","rposition","rpercent","getOffsets","offsets","parseCss","positions","fit","newOverRight","within","withinOffset","outerWidth","collisionPosLeft","collisionPosition","overLeft","overRight","collisionWidth","newOverBottom","outerHeight","collisionPosTop","overTop","overBottom","collisionHeight","flip","newOverLeft","myOffset","my","elemWidth","atOffset","at","targetWidth","newOverTop","elemHeight","targetHeight","flipfit","posit","targetOffset","basePosition","dimensions","of","withinElement","hasOffset","msize","scrollInfo","overflowX","overflowY","hasOverflowX","getScrollInfo","collision","pageY","pageX","horizontalOffset","verticalOffset","using","dir","feedback","horizontal","vertical","important","Dimension","m","margin","cb","mb","animationName","animationDuration","animationTiming","transitionProperty","transitionDuration","transitionTiming","transitionDelay","animationEnd","supportedTransforms","cssReset","animate","properties","duration","ease","delay","endEvent","wrappedCallback","cssValues","cssProperties","transforms","that","fired","easing","fx","speeds","normal","eace","clientLeft","scrollToTop","speed","scale","scrollFrom","freq","interval","setInterval","clearInterval","fadeTo","fadeIn","fadeOut","slideDown","visibility","overflow","slideUp","queue","fast","slow","emulateTransitionEnd","called","fadeToggle","ceasing","allback","slideToggle","throb","timer","time","throbber","overlayDiv","zIndex","overlay","textNode","nodeValue","toogle","jquery","parseJSON","triggerHandler","undelegate","live","die","unbind","moveto","uuid","expr","filters","createPseudo","step","opt","_default","dequeue","setOffset","curTop","curLeft","curElem","curOffset","curCSSTop","curCSSLeft","calculatePosition","curPosition","_data","propName","t","parseHTML","uniqueSort","unique","jQuery","http","getAbsoluteUrl","Xhr","jsonpID","rscript","scriptTypeRE","xmlTypeRE","jsonType","htmlType","blankRE","XhrDefaultOptions","beforeSend","success","accepts","script","json","xml","crossDomain","processData","xhrFields","withCredentials","mimeToDataType","mime","appendQuery","serializeData","param","traditional","scope","hash","_request","xhr","XMLHttpRequest","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","contentType","overrideMimeType","finish","onloadend","onabort","onprogress","ontimeout","status","getResponseHeader","responseText","eval","responseXML","Blob","xhrObj","response","reponse","statusText","evt","open","setRequestHeader","send","request","post","patch","del","parseArguments","ajaxJSONP","responseData","abortTimeout","_callbackName","jsonpCallback","callbackName","originalCallback","errorType","head","ajaxSettings","ajax","hasPlaceholder","jsonp","getJSON","originalLoad","addToPrefiltersOrTransports","structure","dataTypeExpression","dataTypes","rnotwhite","ajaxPrefilter","ajaxTransport","ajaxSetup","getScript","Callbacks","memory","firing","firingStart","firingLength","firingIndex","list","stack","once","fire","stopOnFalse","disable","lock","locked","fireWith","ret2","originThen","expando","core_rnotwhite","core_push","Data","owner","descriptor","unlock","defineProperties","access","stored","camel","hasData","discard","data_priv","startLength","_queueHooks","isArraylike","setter","clearQueue","elmx","pluginKlasses","pluginName","pair","instanceDataName","pluginInstance","destroy","pluginKlass","Plugin","_initOptions","ctors","_destroy","_delay","instance","curOption","_setOptions","_setOption","getUID","domNode","shortcutName","extfn","shortcutter","args2","pluginUuid","JqPlugin","pluginEventPrefix","eventNamespace","defaultElement","classesElementLookup","hoverable","_on","_create","_trigger","_getCreateEventData","_init","_getCreateOptions","_superApply","_classes","full","processClassString","checkOption","isTracked","extra","_untrackClassesElement","_off","_removeClass","_toggleClass","_addClass","suppressDisabledCheck","delegateElement","widget","handlerProxy","guid","orig","widgetEventPrefix","splugins","widgetHasOwnProperty","widgetSlice","base","existingConstructor","fullName","Widget","basePrototype","newPrototype","_proto","widgetName","widgetFullName","_childConstructors","childPrototype","inputIndex","inputLength","_setOptionClasses","_setOptionDisabled","classKey","currentElements","enable","_hoverable","_focusable","defaultEffect","hasOptions","effect","effectName","effects","JSM","mainVersion","subVersion","RandomNumber","to","RandomInt","floor","RandomBoolean","SeededRandomInt","seed","ValueOrDefault","def","PrevIndex","NextIndex","CopyObjectProperties","GetObjectProperty","propertyName","defaultValue","propertyValue","Message","log","Timer","Start","date","Date","getTime","Stop","Result","FPSCounter","frames","Get","elapsed","SwapArrayValues","temp","BubbleSort","onCompare","onSwap","compareFunction","swapFunction","ShiftArray","AsyncRunTask","taskFunction","callbacks","runCount","userData","onStart","OnStart","RunTask","currentCount","needContinue","OnProgress","onFinish","OnFinished","IsWebGLEnabled","WebGLRenderingContext","canvas","getContext","exception","IsFileApiEnabled","File","FileReader","FileList","LoadJsonFile","fileName","onReady","onreadystatechange","jsonData","Eps","Inf","RadDeg","DegRad","IsZero","IsPositive","IsNegative","IsLower","IsGreater","IsEqual","IsEqualWithEps","eps","IsLowerOrEqual","IsGreaterOrEqual","Minimum","Maximum","ArcSin","PI","asin","ArcCos","acos","Coord2D","Set","coord","DistanceTo","sqrt","AngleTo","aDirection","Clone","Normalize","bDirection","product","VectorDot2D","Length","MultiplyScalar","scalar","SetLength","thisLength","Offset","direction","distance","Rotate","angle","origo","co","cos","si","sin","ToString","Vector2D","CoordFromArray2D","CoordToArray2D","CoordAdd2D","CoordSub2D","Coord","z","VectorDot","IsCollinearWith","IsPerpendicularWith","Add","Sub","axis","u","ToCoord2D","zNormal","Vector","VectorCross","rotated","CoordFromArray","CoordToArray","CoordAdd","CoordSub","MatrixDeterminant2x2","m00","m01","m10","m11","MatrixDeterminant3x3","m02","m12","m20","m21","m22","subDet1","subDet2","subDet3","MatrixDeterminant4x4","m03","m13","m23","m30","m31","m32","m33","subDet4","Orientation","Invalid","CounterClockwise","Clockwise","MidCoord2D","CoordOrientation2D","determinant","CoordSignedDistance2D","abDirection","PolarToCartesian","radius","theta","GetArcLengthFromAngle","GetAngleFromArcLength","arcLength","MidCoord","CoordSignedDistance","GetVectorsFullAngle","CoordOrientation","a2","b2","c2","orientation","SphericalToCartesian","phi","CylindricalToCartesian","GetArcLength","GetFullArcLength","CalculateCentroid","centroid","CalculateTriangleNormal","v0","v1","v2","CalculateNormal","nextIndex","BarycentricInterpolation","vertex0","vertex1","vertex2","value0","value2","GetTriangleArea","areaSquare","edge0","edge1","edge2","distance0","distance1","distance2","area","area0","area1","area2","interpolated0","interpolated1","interpolated2","interpolated","MatrixIdentity","MatrixClone","matrix","MatrixTranspose","MatrixVectorMultiply","vector","a00","a01","a02","a03","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","MatrixMultiply","matrix1","matrix2","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","MatrixDeterminant","b04","b05","b06","b07","b08","b09","MatrixInvert","MatrixTranslation","MatrixRotation","u2","MatrixRotationQuaternion","quaternion","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","MatrixRotationX","MatrixRotationY","MatrixRotationZ","ApplyTransformation","resultVector","ApplyRotation","CoordSystem","e1","e2","e3","ToDirectionVectors","ToAbsoluteCoords","CoordSectorPosition2D","CoordInsideOfSector","CoordOnSectorEndCoord","CoordOutsideOfSector","SectorSectorPosition2D","SectorsDontIntersect","SectorsIntersectCoincident","SectorsIntersectEndPoint","SectorsIntersectOnePoint","CoordSectorPosition","Sector2D","beg","GetLength","CoordPosition","x1","y1","ux","uy","SectorPosition","sector","intersection","IsOnSegment","min","calcIntersection","aBeg","aEnd","bBeg","bEnd","equalBeg","equalEnd","x3","y3","x4","y4","numeratorA","numeratorB","denominator","distA","distB","ProjectCoord","denom","Sector","z1","bu","GetSectorSegmentation2D","segmentation","offseted","GetSectorSegmentation","CoordLinePosition2D","CoordOnLine","CoordAtLineLeft","CoordAtLineRight","LineLinePosition2D","LinesDontIntersect","LinesIntersectsOnePoint","LinesIntersectsCoincident","CoordLinePosition","CoordOutsideOfLine","LineLinePosition","Line2D","LinePosition","Line","projected","ClosestPoint","thisClosestPoint","lineClosestPoint","Dmnop","aDir","aStart","bDir","bStart","d1010","d0210","d0232","d3210","d3232","nom","mua","mub","aClosest","bClosest","Box2D","GetCenter","Box","GetSize","IsCoordInside","BoxUnion","aBox","bBox","Sphere","center","GetRadius","Transformation","GetMatrix","SetMatrix","Append","Apply","IdentityTransformation","transformation","TranslationTransformation","translation","OffsetTransformation","RotationTransformation","RotationXTransformation","RotationYTransformation","RotationZTransformation","RotationXYZTransformation","xAngle","yAngle","zAngle","CoordPlanePosition","CoordOnPlane","CoordInFrontOfPlane","CoordAtBackOfPlane","LinePlanePosition","LineParallelToPlane","LineIntersectsPlane","Plane","GetNormal","CoordDistance","signed","side","LineIntersection","GetPlaneFromCoordAndDirection","plane","pa","pb","pc","pd","GetPlaneFromThreeCoords","CoordPlaneSignedDirectionalDistance","CoordPlaneDirectionalDistance","MatrixView","eye","MatrixPerspective","fieldOfView","aspectRatio","nearPlane","farPlane","f","tan","nf","Project","viewPort","viewMatrix","perspectiveMatrix","projectionMatrix","output","Unproject","inverseMatrix","ConvexHull2D","FindNextCoord","minValue","minIndex","FindLeftMostCoord","ConvexHull3D","AddVertex","vertex","vertices","AddEdge","triangleIndex","edgeIndex","edges","vert1","vert2","newEdge","tri1","tri2","edge","AddTriangle","triangles","edge3","triangle","valid","RemoveTriangleFromEdge","RemoveTriangle","CheckTetrahedronOrientation","aCoord","bCoord","cCoord","dCoord","adSub","bdSub","cdSub","GetTetrahedronVolume","AddCoordToHull","edge1Vis","edge2Vis","edge3Vis","visibleTriangles","newTriangle","newTriangles","AddInitialTetrahedron","Complexity","Convex","Concave","Complex","CoordPolygonPosition2D","OnVertex","OnEdge","Inside","Outside","SectorPolygonPosition2D","IntersectionOnePoint","IntersectionCoincident","IntersectionOnVertex","NoIntersection","Polygon2D","Clear","AddVertexCoord","ClearCache","GetVertex","RemoveVertex","VertexCount","EnumerateVertices","GetNextVertex","GetPrevVertex","ShiftVertices","ReverseVertices","GetVertexAngle","curr","prevDir","nextDir","GetSignedArea","signedArea","GetArea","GetOrientation","GetComplexity","complexity","polygonOrientain","IsConcaveVertex","GetVertexOrientation","vertexOrientations","IsConvexVertex","vertexOrientation","IntersectionCount","begYDist","endYDist","begBelow","begAbove","endBelow","endAbove","begOnLine","endOnLine","yMoveRatio","GetIntersection","upwardEdge","edgeFrom","edgeTo","vertexCount","intersections","begIndex","endIndex","edgeBegIndex","edgeEndIndex","edgeBeg","edgeEnd","currentSector","IsDiagonal","fromVertex","toVertex","polygon","DiagonalIntersectsAnyEdges","midCoord","DiagonalInsideOfPolygon","ToArray","FromArray","GetBoundingBox","boundingBox","ContourPolygon2D","contours","lastContour","AddContourVertex","contourIndex","AddContourVertexCoord","ContourVertexCount","AddContour","contour","GetLastContour","GetContourVertex","vertexIndex","GetContour","ContourCount","contourOrientation","Polygon","ToPolygon2D","ContourPolygon","ToContourPolygon2D","OffsetPolygonContour","prevVertex","currVertex","nextVertex","offsetedCoord","CutVertexType","Left","Right","Cut","PolygonCutter","geometryInterface","Reset","aSidePolygons","bSidePolygons","cutPolygons","allVertexType","CalculateOriginalPolygonData","cloned","CalculateCutPolygonData","CalculateEntryVertices","CalculateCuttedPolygons","originalPolygon","originalPolygonVertexTypes","cutPolygon","cutPolygonVertexTypes","cutPolygonVertexDistances","cutVertexIndices","entryVertices","entryVertexTypes","aSideFound","bSideFound","getVertexSide","IsIntersectionVertex","originalType","prevType","AddCutVertexToPolygon","polygonCutter","AddIntersectionVertex","originalIndex","prevIndex","getIntersectionVertex","AddOriginalVertex","nextType","createPolygon","lastVertex","getVertexDistances","aDist","bDist","SortCutVertices","GetEntryVertexType","currIndex","currSideType","prevSideType","nextSideType","currVertexDistance","prevVertexDistance","nextVertexDistance","vertexType","AddOneSideCuttedPolygons","AddEntryPairToArray","entryPairs","toIndex","currVertexIndex","RemoveEntryPairFromArray","AddCutPolygon","currEntryVertex","AddVertexIfNotDuplicated","startVertexIndex","currPolygon","polygonSide","FindPairIndex","startIndex","pairIndex","CreateEntryPairsArray","CutPolygon2DWithLine","leftPolygons","rightPolygons","edgeLine","lineLinePosition","refLineStart","refLineDir","refLine","distances","cutter","CutPolygonWithPlane","frontPolygons","backPolygons","linePlanePosition","polygonNormal","planeNormal","refPlaneNormal","refPlaneOrigin","refPlane","SegmentPolygon2D","xSegments","ySegments","CutPolygonsOneDirection","inputPolygons","resultPolygons","segmentCount","segmentSize","startCoordinate","segmentDir","cutDir","CutPolygon","newPolygonsToProcess","polygonsToProcess","startCoord","xSize","ySize","xSegmentSize","ySegmentSize","originalPolygons","bottomLeft","topLeft","xCuttedPolygons","yCuttedPolygons","ConvertContourPolygonToPolygon2D","inputPolygon","vertexMap","AddResultVertex","resultPolygon","originalContour","originalVertex","holeIndex","conversionData","entryPoint","IsEntryPoint","resultVertex","holeVertex","SegmentIntersectsPolygon","segmentBeg","segmentEnd","addedHoles","IsExistingEntryPosition","entryPositions","resultVertexIndex","holeVertexIndex","holePolygon","GetEntryPoint","mainContourBeg","mainEntryVertex","mainEntryContourIndex","mainEntryVertexIndex","contourBeg","contourEnd","AddHole","contourCount","mainContour","holeQueue","holeTryouts","TriangulateConvexPolygon","TriangulateConcavePolygon2D","FindSplitDiagonal","SplitPolygon","polygonData","diagonal","resultData","resultData1","resultData2","polygonStack","inputMap","GetInitialVertexMap","TriangulatePolygon2D","TriangulatePolygon","polygon2D","TraverseOctreeNodes","octree","nodeFound","TraverseNode","CreateOctreeChildNodes","originalBox","createNodeCallback","CreateNode","dirX","dirY","dirZ","box","Octree","maxCoordNumInNodes","CreateNewNode","AddCoord","AddCoordToNode","FindCoord","FindNodeForCoord","FindCoordInNode","SplitNode","xGreater","yGreater","zGreater","myThis","nodeBox","nodeCoords","newNode","TriangleOctree","AddTriangleToNode","IsTriangleInNode","BSPTree","AddPolygon","AddPolygonToNode","Traverse","inside","outside","GetNodes","NodeCount","planePolygons","cutSucceeded","AddInsidePolygonsToNode","AddOutsidePolygonsToNode","polygons","ClipPolygonWithBSPTree","bspTree","planarFrontPolygons","planarBackPolygons","CutPolygonWithNode","isPlanar","cutBackPolygons","cutFrontPolygons","cutPlanarPolygons","AddInsidePolygons","AddOutsidePolygons","CutPolygonsWithNode","AddPolygonsToArray","polygonArray","TraverseBSPTreeForEyePosition","eyePosition","coordPlanePosition","GenerateCubicBezierCurve","p0","p1","p2","p3","GetCubicBezierPoint","t2","t3","invT","invT2","invT3","BernsteinPolynomial","k","coefficient","BinomialCoefficient","pow","GenerateBezierCurve","points","point","bernstein","GetGaussianCParameter","epsilon","GetGaussianValue","GenerateCirclePoints","segments","GetRuledMesh","aCoords","bCoords","lineSegmentation","meshSegmentation","directions","lengths","Ray","GetOrigin","GetDirection","IsLengthReached","Path2D","positionAdded","currentPolygon","MoveTo","Close","LineTo","AddPolygonPoint","CubicBezierTo","cp1x","cp1y","cp2x","cp2y","bezierPoints","CheckAndCorrectPolygon","basePolygon","IsBasePolygon","baseOrientation","baseContour","polygonOrientation","firstVertex","firstVertexPosition","FindBasePolygon","contourPolygon","PolygonCount","GetPolygon","GetPolygons","GetCurrentPolygon","polygonX","polygonY","HexColorToRGBComponents","hexColor","hexString","substr","g","HexColorToNormalizedRGBComponents","rgb","HexColorToRGBColor","RGBComponentsToHexColor","red","green","blue","IntegerToHex","intString","Material","parameters","ambient","diffuse","specular","shininess","reflection","singleSided","pointSize","texture","textureWidth","textureHeight","MaterialSet","materials","defaultMaterial","AddMaterial","material","GetMaterial","GetDefaultMaterial","Count","BodyVertex","GetPosition","SetPosition","BodyPoint","GetVertexIndex","SetVertexIndex","HasMaterialIndex","GetMaterialIndex","SetMaterialIndex","InheritAttributes","BodyLine","GetBegVertexIndex","SetBegVertexIndex","GetEndVertexIndex","SetEndVertexIndex","BodyPolygon","curved","AddVertexIndex","InsertVertexIndex","polygonIndex","vertIndex","GetVertexIndices","SetVertexIndices","VertexIndexCount","HasCurveGroup","GetCurveGroup","SetCurveGroup","group","ReverseVertexIndices","TextureProjectionType","Planar","Cubic","Cylindrical","BodyTextureProjection","SetCubic","GetType","GetCoords","SetType","SetCoords","SetPlanar","xDirection","yDirection","zDirection","SetCylindrical","Transform","Body","AddPoint","AddLine","lines","GetVertexPosition","SetVertexPosition","GetPoint","GetLine","SetPointsMaterialIndex","SetLinesMaterialIndex","SetPolygonsMaterialIndex","SetPolygonsCurveGroup","bodyVertIndex","pointsToDelete","linesToDelete","polygonsToDelete","RemovePoint","RemoveLine","RemovePolygon","PointCount","LineCount","GetTextureProjection","projection","SetTextureProjection","SetPlanarTextureProjection","SetCubicTextureProjection","SetCylindricalTextureProjection","GetBoundingSphere","OffsetToOrigo","Merge","newPoint","newLine","newPolygon","oldVertexCount","Model","bodies","AddBody","AddBodies","GetBody","BodyCount","GetMaterialSet","MaterialCount","VertInfo","pgons","EdgeInfo","pgon1","pgon2","PolyEdgeInfo","PgonInfo","verts","pedges","AdjacencyInfo","Calculate","adjacencyInfo","pgonInfo","fromVertexIndex","toVertexIndex","pedge","currEdge","ConnectPgonAndEdgeToVert","vert","pgonIndex","ConnectEdge","pgon","IsContourVertex","IsContourEdge","pgonCount","GetEdgePolygonCount","GetAnotherPgonOfEdge","GetPolyEdgeStartVertex","polyEdge","GetPolyEdgeEndVertex","CalculateBodyVertexToPolygon","IsSolidBody","CheckSolidBody","pgon1Reverse","pgon2Reverse","TraversePgonsAlongEdges","onPgonFound","AddNeighboursToStack","pgonStack","anotherPgon","currentPgonIndex","pgonIsProcessed","AddVertexToBody","AddPointToBody","AddLineToBody","AddPolygonToBody","CheckBody","CalculateBodyPolygonNormal","currentIndex","CalculateBodyPolygonNormals","CalculateBodyVertexNormals","average","neighbourPolygons","polygonNormals","vertexToPolygon","CalculatePolygonCurveGroups","curveAngle","curveGroups","firstGroup","lastGroup","CalculatePolygonCentroid","MakeBodyInsideOut","SoftMoveBodyVertex","currentDistance","newDistance","referenceCoord","GenerateWireBody","TriangulateWithCentroids","centroidCoord","centroidIndex","oldPolygon","oldPolygonCount","TriangulatePolygons","triangleIndices","bodyTriangle","GenerateRandomMaterials","seeded","GetRandomInt","color","AddBodyToBSPTree","ConvertBodyPolygonToPolygon","CalculatePlanarTextureCoord","system","xyPlane","xzPlane","yzPlane","CalculateCubicTextureCoord","currentDirection","correctPlane","maxProduct","planeSystem","CalculateCylindricalTextureCoord","e3Direction","baseLine","projectedCoord","projectedDistance","e1Direction","coordDirection","CalculatePolygonPlanarTextureCoords","CalculatePolygonCubicTextureCoords","CalculatePolygonCylindricalTextureCoords","textureValues","angles","needRepair","CalculateBodyPlanarTextureCoords","CalculateBodyCubicTextureCoords","CalculateBodyCylindricalTextureCoords","CalculateBodyTextureCoords","CutBodyByPlane","CutBodyPolygonByPlane","indexTable","rawResult","rawIndexTable","hasIndexTable","front","needCut","currentVertex","lastIndex","GetInsertedVertexIndex","originalVertexCount","polygon3D","vertexPosition","cuttedPolygon","cuttedPolygons","cuttedIndexTables","remainsVertex","originalOldToNewIndex","newPolygonVertices","GenerateRectangle","GenerateCuboid","zSize","GenerateCuboidSides","sides","GenerateSegmentedRectangle","xSegmentation","ySegmentation","xStart","yStart","xSegment","ySegment","AddVertices","ntop","AddPolygons","GenerateSegmentedCuboid","GetLevelOffset","level","GetLevelSideVertices","zCoord","zSegment","zStart","prevSideVertices","levelSideVertices","currSideVertices","GenerateCircle","circlePoints","topPolygon","GenerateSphere","isCurved","circle","topIndex","bottomIndex","GenerateTriangulatedSphere","iterations","iteration","oldVertexCoord","oldBody","currentEdge","edgeVertexIndices","currentPgon","polygonVertexIndices","edgeCoord","currentPolyEdge","GenerateIcosahedron","currentRadius","GenerateCylinder","withTopAndBottom","bottomPolygon","GeneratePie","GenerateCone","topRadius","bottomRadius","topDegenerated","bottomDegenerated","avgRadius","GeneratePrismGeometry","bottomVertices","topVertices","bodyPolygon","GeneratePrismFromPolygon","firtVertex","firstDirection","GeneratePrism","GeneratePrismWithHole","contourOffsets","AddContours","contourPolygon2D","simplePolygon","mapValue","topTriangle","bottomTriangle","AddTopBottomPolygons","GeneratePrismsFromPath2D","GetPrismPolygon","GeneratePrismShell","offsetedPolygon","innerBasePolygon","GenerateCylinderShell","cartesian","GenerateLineShell","basePolyLine","withStartAndEnd","innerCoord","offsetDirection","innerBasePolyLine","GenerateTorus","outerRadius","innerRadius","outerSegmentation","innerSegmentation","coord2D","axisDir","GeneratePolyTorus","GenerateRuledFromSectors","aSector","bSector","GenerateGrid","xSector","ySector","GenerateSquareGrid","GenerateRuledFromSectorsWithHeight","newVertex","newpolygonVertexIndices","topVertexCount","GenerateRuledFromCoords","GenerateRevolved","polyLine","curveMode","circular","curveModeFlag","axisNormalDir","axisLine","projectedToBaseLine","GenerateTube","basePolygons","GenerateFunctionSurface","function3D","intervalMin","intervalMax","GenerateFunctionSurfaceSolid","bottomZ","Camera","nearClippingPlane","farClippingPlane","ExplodeBody","explodeData","SeparateByMaterial","itemsByMaterial","itemsWithNoMaterial","itemCount","getMaterial","ExplodePointsByMaterial","pointIndices","materialIndex","onPointGeometryStart","onPoint","onPointGeometryEnd","pointsByMaterial","pointsWithNoMaterial","ExplodePoints","ExplodeLinesByMaterial","lineIndices","onLineGeometryStart","onLine","onLineGeometryEnd","linesByMaterial","linesWithNoMaterial","ExplodeLines","ExplodePolygonsByMaterial","polygonIndices","derivedData","ExplodePolygon","CreateTriangle","vertex3","normal1","normal2","normal3","uv1","uv2","uv3","onTriangle","convexPolygon","hasConvexPolygons","vertexNormals","textureCoords","onGeometryStart","onGeometryEnd","polygonsByMaterial","polygonsWithNoMaterial","hasTextureCoords","CalculatePolygonsDerivedData","ExplodePolygons","ExportBodyContentToStl","AddLineToContent","stlContent","AddTriangleToContent","useTriangulation","ExportBodyToStl","ExportModelToStl","model","ExportBodyContentToObj","vertexOffset","normalOffset","AddToContent","objContent","AddNormal","normalVector","vertCoord","ExportBodyToObj","ExportModelToObj","ExportMaterialsToGdl","rgbString","gdlContent","writeMaterials","ExportBodyGeometryToGdl","character","lastMaterialIndex","pedgeList","ExportBodyToGdl","ExportModelToGdl","TriangleBody","normals","uvs","defaultUVIndex","SetName","GetName","SetVertex","GetTriangleNormal","normalPosition","curve","n0","n1","n2","NormalCount","AddUV","AddDefaultUV","GetUV","UVCount","u0","u1","mat","GetTriangle","TriangleCount","Finalize","FinalizeTriangle","triangleNormals","vertexToTriangles","AddAverageNormal","neighbourTriangleIndex","neighbourTriangle","averageNormal","averageCount","neighbourTriangles","normalIndex","GetDefaultMaterialIndex","ConvertTriangleBodyToOctree","TriangleModel","AddDefaultMaterial","AddBodyToIndex","FinalizeMaterials","defaultMaterialData","rotation","FinalizeBodies","ConvertBodyToTriangleBody","ConvertModelToTriangleModel","triangleBody","ConvertTriangleModelToJsonData","ConvertBody","mesh","trianglesByMaterial","materialCount","jsonTriangles","meshes","jsonMaterial","ConvertMaterials","MergeJsonDataMeshes","MergeMesh","currentMesh","materialToTriangles","MergeTriangles","currentTriangles","uvOffset","trianglesIndex","triangleParameters","MergeAttributes","RayTriangleIntersection","ray","rayOrigin","rayDirection","edgeDir1","edgeDir2","pVector","isFrontFacing","invDeterminant","tVector","qVector","scaledDirection","RayBoxIntersection","rayOriginVec","rayDirectionVec","minB","maxB","quadrant","candidatePlane","originInBox","maxT","whichPlane","xCoord","intersectionCoord","RayOctreeIntersection","minIntersection","foundIntersection","calcMinIntersection","currentIntersection","RayTriangleBodyIntersection","RayTriangleModelIntersection","bodyIndex","RayTriangleModelIntersectionWithOctree","hasIntersection","BinaryReader","arrayBuffer","isLittleEndian","dataView","DataView","GetByteLength","byteLength","Skip","bytes","End","ReadBoolean","getInt8","ReadCharacter","ReadUnsignedCharacter","getUint8","ReadInteger16","getInt16","ReadUnsignedInteger16","getUint16","ReadInteger32","getInt32","ReadUnsignedInteger32","getUint32","ReadFloat32","getFloat32","ReadDouble64","getFloat64","GetArrayBufferFromURL","responseType","onload","onerror","onError","GetArrayBufferFromFile","reader","DONE","readAsArrayBuffer","GetStringBufferFromURL","stringBuffer","GetStringBufferFromFile","readAsText","LoadMultipleBuffers","inputList","LoadMultipleBuffersInternal","currentInput","loaderFunction","isFile","isArrayBuffer","originalObject","resultBuffer","Read3dsFile","OnLog","logText","logLevel","onLog","onVertex","OnTextureVertex","onTextureVertex","OnFace","flags","onFace","OnFaceMaterial","faceIndex","materialName","onFaceMaterial","OnFaceSmoothingGroup","smoothingGroup","onFaceSmoothingGroup","ReadChunk","chunkId","chunkLength","SkipChunk","GetChunkEnd","ReadName","letter","fromCharCode","ReadVector","ReadChunks","endByte","chunks","ReadColorChunk","hasLinColor","MAT_COLOR","MAT_LIN_COLOR","MAT_COLOR_F","MAT_LIN_COLOR_F","ReadPercentageChunk","percentage","PERCENTAGE","PERCENTAGE_F","ReadMaterialChunk","MAT_NAME","MAT_AMBIENT","MAT_DIFFUSE","MAT_SPECULAR","MAT_SHININESS","MAT_SHININESS_STRENGTH","shininessStrength","MAT_TRANSPARENCY","transparency","MAT_TEXMAP","MAT_TEXMAP_NAME","MAT_TEXMAP_UOFFSET","MAT_TEXMAP_VOFFSET","MAT_TEXMAP_USCALE","MAT_TEXMAP_VSCALE","MAT_TEXMAP_ROTATION","ReadTextureMapChunk","onMaterial","OnMaterial","ReadFacesChunk","faceCount","TRI_MATERIAL","ReadFaceMaterialsChunk","TRI_SMOOTH","ReadFaceSmoothingGroupsChunk","ReadTransformationChunk","onTransformation","OnTransformation","ReadMeshChunk","objectName","onMesh","OnMesh","TRI_VERTEX","ReadVerticesChunk","TRI_TEXVERTEX","texVertexCount","ReadTextureVerticesChunk","TRI_FACE","TRI_TRANSFORMATION","ReadObjectChunk","OBJ_TRIMESH","OBJ_LIGHT","ReadLightChunk","OBJ_CAMERA","ReadCameraChunk","ReadObjectNodeChunk","ReadTrackVector","keyNum","OBJECT_ROTATION","objectNode","nodeId","userId","pivot","rotations","scales","OBJECT_HIERARCHY","OBJECT_PIVOT","OBJECT_POSITION","OBJECT_SCALE","OBJECT_ID","onObjectNode","OnObjectNode","ReadMainChunk","EDIT3DS","EDIT_MATERIAL","EDIT_OBJECT","ReadEditorChunk","KF3DS","OBJECT_NODE","ReadKeyFrameChunk","MAIN3DS","ReadFile","Convert3dsToJsonData","OnFileRequested","onFileRequested","triangleModel","currentBody","materialNameToIndex","bodyNameToIndex","nodeHierarcy","nodeIdToIndex","GetShininess","GetOpacity","currentMaterial","textureBuffer","blob","blobURL","createObjectURL","meshName","meshData","faceToMaterial","faceToSmoothingGroup","objectNodes","nodeIndex","MatrixScale","MatrixTranslate","TransformBodyVertices","transformedVertex","currentMeshData","meshTransformation","GetMeshTransformation","nodeTransformation","GetNodeTransformation","GetNodePosition","quat","omega","GetQuatFromAxisAndAngle","GetNodeRotation","GetNodeScale","parentIndex","parentTransformation","meshMatrix","invMeshMatrix","invMatrix","flippedMatrix","finalMatrix","FlipByXCoordinates","nodePivotPoint","GetNodePivotPoint","FinalizeMesh","hasTextureCoordinates","DuplicateBody","instanceIndex","clonedBody","currentNode","firstNode","addedBody","FinalizeMeshes","ReadObjFile","ProcessLine","objectCounter","GetIndex","GetFileName","keyword","fileNameIndex","textureName","lineParts","normalCount","onNormal","OnNormal","uvCount","onTexCoord","OnTexCoord","partSplitted","onUseMaterial","onNewMaterial","OnNewMaterial","onMaterialComponent","OnMaterialComponent","onMaterialParameter","OnMaterialParameter","onMaterialTexture","fileStringBuffer","ProcessFile","ConvertObjToJsonData","currentMaterialIndex","globalVertices","globalNormals","globalUVs","globalToLocalVertices","globalToLocalNormals","globalToLocalUVs","log2","GetLocalIndex","globalValueArray","globalToLocalIndices","globalIndex","valueAdderFunc","globalValue","GetLocalVertexIndex","GetLocalNormalIndex","GetLocalUVIndex","hasNormals","hasUVs","ReadBinaryStlFile","triangleCount","ReadAsciiStlFile","lineIndex","nextLineIndex","currentLineIndex","currentLine","GetVertices","IsBinaryStlFile","ConvertStlToJsonData","v0Index","v1Index","v2Index","triangleNormal","ReadOffFile","readState","offHeaderFound","infoFound","readVertices","readFaces","ConvertOffToJsonData","ImportFileList","descriptors","InitFromFiles","fileList","originalFileName","extension","GetFileExtension","InitFromURLs","urlList","GetInputList","IsArrayBuffer","inputListElem","fullFileName","splitted","decodeURI","GetFileDescriptor","GetMainFileIndex","IsSupportedExtension","GetFileIndexByName","currentFileName","lastPoint","lastIndexOf","ConvertImportFileListToJsonData","importFileList","OnError","OnReady","fileNames","FileRequested","resultBuffers","requestedFileIndex","missing","requested","mainFileIndex","mainFile","mainFileBuffer","ConvertFileListToJsonData","ConvertURLListToJsonData","IsPowerOfTwo","NextPowerOfTwo","ResizeImageToPowerOfTwoSides","drawImage","getImageData","WebGLInitContext","viewport","clearColor","WebGLInitShaderProgram","vertexShader","fragmentShader","CompileShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShaderScript","vertexShaderScript","FRAGMENT_SHADER","VERTEX_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","CreateShader","useProgram","WebGLGetFloatTextureBufferSize","ceil","WebGLCreateFloatTextureBuffer","floatArray","Float32Array","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","RGBA","FLOAT","RenderAmbientLight","RenderDirectionalLight","RenderMaterialFlags","Point","Triangle","Textured","Transparent","RenderMaterial","SetBuffers","textureImage","RenderMesh","vertexArray","normalArray","uvArray","vertexBuffer","normalBuffer","uvBuffer","SetMaterial","SetVertexArray","SetNormalArray","SetUVArray","HasVertexArray","HasNormalArray","HasUVArray","GetVertexArray","GetNormalArray","GetUVArray","GetVertexBuffer","GetNormalBuffer","GetUVBuffer","GetTransformedVertex","RenderBody","AddMesh","EnumerateMeshes","onMeshFound","meshType","EnumerateTypedMeshes","HasTypedMeshes","typedMesh","typedMeshes","EnumerateMeshesWithFlag","flag","GetTransformation","GetTransformationMatrix","SetTransformation","AppendTransformation","ShaderType","TexturedTriangle","ShaderProgram","globalParams","shaders","currentShader","currentType","cullEnabled","Init","InitGlobalParams","InitShaders","GetMaxLightCount","maxLightCount","noDirectionalLight","InitShader","shaderType","GetVertexShaderScript","GetFragmentShaderScript","vertexPositionAttribute","getAttribLocation","vertexNormalAttribute","ambientLightColorUniform","getUniformLocation","lightUniforms","diffuseColor","specularColor","materialUniforms","ambientColor","vMatrixUniform","pMatrixUniform","tMatrixUniform","vertexUVAttribute","samplerUniform","pointSizeUniform","InitShaderParameters","DEPTH_TEST","depthFunc","LEQUAL","BLEND","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","CULL_FACE","CompileMaterial","textureLoaded","Image","resizedImage","LINEAR","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","generateMipmap","CompileMesh","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","itemSize","numItems","GetShader","UseShader","SetParameters","ambientLight","directionalLights","GetLight","light","lightDirection","uniform3f","uniformMatrix4fv","SetCullEnabled","DrawArrays","uniform1f","enableVertexAttribArray","vertexAttribPointer","activeTexture","TEXTURE0","uniform1i","drawArrays","TRIANGLES","POINTS","LINES","Renderer","InitContext","InitView","InitLights","InitBodies","SetClearColor","SetAmbientLight","AddLight","RemoveLight","RemoveLights","renderBody","renderBodies","EnumerateBodies","onBodyFound","RemoveBody","RemoveBodies","Resize","FindObjects","camera","screenX","screenY","screenCoord","unprojected","renderMesh","Render","DrawMeshes","renderer","materialType","HasFlag","MaterialTypeToShaderType","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","PointCloudRenderer","InitBuffers","CreateShaderFromScript","vertexColorAttribute","SetPointSize","AddPoints","colors","pointBuffer","pointArray","colorBuffer","colorArray","RemovePoints","ConvertBodyToRenderBody","MaterialToRenderMaterial","renderAmbient","renderDiffuse","renderSpecular","renderMaterial","begVertex","endVertex","ConvertModelToRenderBodies","ConvertJSONDataToRenderBodies","asyncCallbacks","meshIndex","resultBodies","ConvertTrianglesToRenderMesh","GetTextureCoordinate","AppendTriangleCoords","targetArray","sourceArray","indexArray","componentCount","sourceVertexIndex","componentIndex","hasTexture","transformedUV","ConvertMeshToRenderBody","Mouse","Down","eventParameters","which","SetCurrent","Move","Up","Out","currX","clientX","currY","clientY","clientRect","Touch","fingers","touches","GetEventCoord","touch","OrderPolygons","GetPolygonCenter","HasLowerDistance","maxViewDistances","polygonCenterDistances","NeedToChangeOrder","needToChangeOrderCache","minViewDistances","PolygonViewOverlap","sPlane","polygonPlanes","pPlane","isSBehindP","sPolygon","isPFrontOfS","pPolygon","PolygonIsFrontOfPlane","polygonCenters","ordered","minDistance","maxDistance","polygonCenter","polygonCenterDistance","polygonViewVector","polygonDirection","polygonPlane","viewDirection","cameraPlane","CalculatePolygonValues","OrderPolygonsByMaxViewDistance","ReorderPolygons","CanvasDrawer","GetWidth","GetHeight","clearRect","fillStyle","fillRect","DrawLine","beginPath","moveTo","lineTo","stroke","DrawPolygon","closePath","fill","SVGDrawer","svgObject","svgNameSpace","svgLine","createElementNS","setAttributeNS","pointsString","svgPolyon","DrawProjectedBody","drawMode","needClear","drawer","AddProjectedCoord","projectedPolygon","GetProjectedPolygonFromBody","orderedPolygons","GetProjectedPolygonFromPolygon","currentCoord","drawedLines","Navigation","drawCallback","resizeCallback","mouse","cameraFixUp","cameraEnableOrbit","cameraEnablePan","cameraEnableZoom","cameraNearDistanceLimit","cameraFarDistanceLimit","orbitCenter","fullscreen","OnMouseMove","OnMouseUp","OnMouseDown","OnMouseWheel","OnTouchStart","OnTouchMove","OnTouchEnd","OnContextMenu","OnResize","SetCamera","EnableFixUp","EnableOrbit","EnablePan","EnableZoom","SetNearDistanceLimit","limit","SetFarDistanceLimit","SetOrbitCenter","FitInWindow","offsetToOrigo","centerEyeDirection","SetFullscreen","ResizeCallback","Orbit","angleX","angleY","radAngleX","radAngleY","horizontalDirection","differentCenter","originalAngle","newAngle","verticalDirection","Pan","moveX","moveY","Zoom","ratio","zoomIn","move","DrawCallback","eyeCenterDistance","OnMouseOut","delta","detail","wheelDelta","SoftwareViewer","navigation","InitCanvas","InitCamera","Draw","sphere","bodyAndMaterials","SpriteViewer","InitCallbacks","onPointDraw","onDrawStart","onDrawEnd","NearestPointUnderPosition","NearestPointUnderMouse","NearestPointUnderTouch","Viewer","cameraLight","InitRenderer","InitNavigation","EnableCameraLight","DisableCameraLight","GetCameraLight","PointCloudViewer","GenerateSolidWithRadius","solidName","equalRadius","GenerateTetrahedron","GenerateHexahedron","GenerateOctahedron","GenerateDodecahedron","GenerateTruncatedTetrahedron","GenerateCuboctahedron","GenerateTruncatedCube","GenerateTruncatedOctahedron","GenerateRhombicuboctahedron","GenerateTruncatedCuboctahedron","GenerateSnubCube","GenerateIcosidodecahedron","GenerateTruncatedDodecahedron","GenerateTruncatedIcosahedron","GenerateRhombicosidodecahedron","GenerateTruncatedIcosidodecahedron","GenerateSnubDodecahedron","GenerateTetrakisHexahedron","GenerateRhombicDodecahedron","GeneratePentakisDodecahedron","GenerateSmallStellatedDodecahedron","GenerateGreatDodecahedron","GenerateSmallTriambicIcosahedron","GenerateGreatStellatedDodecahedron","GenerateSmallTriakisOctahedron","GenerateStellaOctangula","GenerateTriakisTetrahedron","maxRadius","h","q","AddCumulatedPolygonToBody","vertexCoords","CalculatePolygonCentroidAndNormal","GenerateCumulatedTetrahedron","pyramidUnitHeight","edgeLength","GenerateCumulatedHexahedron","GenerateCumulatedOctahedron","GenerateCumulatedDodecahedron","GenerateCumulatedIcosahedron","LegoDimensions","legoWidth","legoSmallHeight","legoLargeHeight","legoWallWidth","legoCylinderWidth","legoCylinderHeight","legoBottomSmallCylinderWidth","legoBottomLargeCylinderWidth","legoBottomLargeCylinderWallWidth","GenerateLegoBrick","rows","isLarge","hasTopCylinders","hasBottomCylinders","OffsetBody","legoDimensions","unitWidth","unitHeight","wallWidth","topCylinderWidth","topCylinderHeight","bottomSmallCylinderWidth","bottomLargeCylinderWidth","bottomLargeCylinderWallWidth","walls","cylinderCenter","cylinder","bigger","columnWise","GenerateConvexHullBody","convexHull","oldToNewIndexTable","GenerateSuperShape","aLon","bLon","mLon","n1Lon","n2Lon","n3Lon","aLat","bLat","mLat","n1Lat","n2Lat","n3Lat","CartesianToSpherical","atan2","CalculateSuperFormula","n3","abs1","abs2","CalculateSuperFormulaCoordinate","rPhi","rTheta","spherical","newCoord","CatmullClarkSubdivisionOneIteration","pgonVertices","edgeVertices","AddOriginalVertices","pgonCoord","AddPolygonVertices","edgeCoord1","edgeCoord2","AddEdgeVertices","MoveContourVertex","newVertCoord","MoveVertex","pgonAverage","edgeAverage","vertEdgeCount","currentVertCoord","edgeCountForAverage","edgeMidCoords","MoveOriginalVertices","edgeCount","nextEdge","currentEdgeVertex","nextEdgeVertex","AddNewPolygons","CatmullClarkSubdivision","BooleanOperation","operation","aBody","bBody","AddBodyVertex","AddPolygonsToBody","ClipNodePolygonsWithTree","tree","SetPolygonsUserData","aTree","bTree","aFrontPolygons","aBackPolygons","aPlanarFrontPolygons","aPlanarBackPolygons","bFrontPolygons","bBackPolygons","bPlanarFrontPolygons","resultOctree","GenerateSurface","xRange","yRange","useTriangles","getPointCallback","xDiff","yDiff","SurfaceControlPoints","GetNValue","GetMValue","GetControlPoint","InitPlanar","iStep","jStep","GenerateBezierSurface","surfaceControlPoints","uIndex","vIndex","tmp1","tmp2","SvgToModel","segmentLength","SegmentElem","AddTransformedVertex","dummySVG","createSVGPoint","transformed","getCTM","matrixTransform","transformedCoord","resultCoord","contourVertexCount","SegmentCurve","originalPath","lastCoord","command","largeArcFlag","sweepFlag","commandString","pathSegType","SVGPathSeg","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_ABS","PATHSEG_ARC_REL","r1","r2","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","CreatePath","pathLength","getTotalLength","getPointAtLength","IsCurvedItem","IsSmoothItem","RemoveEqualEndVertices","firstCoord","StartNewContour","SVGPathElement","currentItem","lastMoveCoord","currentSegmentLength","pathSegList","numberOfItems","getItem","PATHSEG_CLOSEPATH","PATHSEG_MOVETO_ABS","PATHSEG_MOVETO_REL","PATHSEG_LINETO_ABS","PATHSEG_LINETO_REL","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","SVGRectElement","SVGPolygonElement","svgColor","parentElement","substring","firstBracket","secondBracket","SVGColorToHex","originalElem","ContourPolygonToPrisms","AppendPolygonVertices","CreateBasePolygon","AddHoleToBasePolygon","prism","prisms","currentHeight","holeBasePolygon","hasHoles","prismsAndMaterial","currentPrisms","currentPrism","AddElemType","elemType","getElementsByTagName","SegmentPaths","GenerateText","fontSpec","fontScale","fontHeight","fontSegmentation","CreatePathFromSpecification","commands","Num","glyphs","ha","ConvertBodyToThreeMeshes","theConversionData","textureLoadedCallback","threeGeometry","threeMaterial","THREE","PointsMaterial","Geometry","Points","Vector3","LineBasicMaterial","LineSegments","hasOpacity","MeshPhongMaterial","DoubleSide","transparent","theMaterial","loader","TextureLoader","wrapS","RepeatWrapping","wrapT","needsUpdate","computeFaceNormals","Mesh","lastVertexIndex","face","Face3","faces","Vector2","faceVertexUvs","ConvertModelToThreeMeshes","currentMeshes","ConvertJSONDataToThreeMeshes","resultMeshes","AddTriangles","materialData","textureOffset","textureScale","textureRotation","Color","setRGB","getHex","v3","u3","lastFace","textureUVs","geometry","originalJsonMaterialIndex","originalJsonMeshIndex","ThreeViewer","scene","directionalLight","runBeforeRender","runAfterRender","cameraMove","drawLoop","enableDraw","InitSettings","InitThree","DrawIfNeeded","cameraEyePosition","cameraCenterPosition","cameraUpVector","lightAmbientColor","lightDiffuseColor","Scene","antialias","WebGLRenderer","setClearColor","setSize","PerspectiveCamera","AmbientLight","DirectionalLight","lightPosition","subVectors","SetRunBeforeRender","SetRunAfterRender","AddMeshes","MeshCount","IsRelevantObject","VisibleMeshCount","IsVisibleObject","FaceCount","GetMesh","ShowMesh","HideMesh","RemoveMesh","dispose","RemoveMeshes","RemoveLastMesh","updateProjectionMatrix","FitMeshesInWindow","GetFilteredBoundingSphere","AdjustClippingPlanes","radiusLimit","near","far","GetFilteredCenter","GetFilteredBoundingBox","needToProcess","GetObjectsUnderPosition","mouseX","mouseY","cameraPosition","unproject","sub","normalize","Raycaster","intersectObjects","GetObjectsUnderMouse","GetObjectsUnderTouch","ProjectVector","halfWidth","halfHeight","project","EnableDraw","lookAt","StartDrawLoop","threeObj","jsm","InfoTable","AddRow","AddColorRow","valueColumn","colorDiv","colorString","FloatingControl","controlDiv","contentDiv","Open","FloatingDialog","dialogDiv","AddButton","dialog","buttonDiv","title","buttonsDiv","buttons","MouseClick","GetContentDiv","clickEvent","dialogClicked","ExtensionInterface","app","GetButtonsDiv","extensionButtons","GetModelJson","viewer","GetJsonData","ExtensionButtons","ImporterProgressBar","borderDiv","maxCount","maxWidth","Step","ImporterButtons","AddLogo","logoDiv","reload","onClick","buttonImage","AddToggleButton","toggleImage","isOn","IsSet","ImporterMenuItem","parentDiv","menuItemDiv","isOpen","openCloseImage","Initialize","userButton","openCloseButton","AddOpenCloseButton","userButtons","AddUserButton","menuItemTextDiv","AddSubItem","SetOpen","userImage","onCreate","onCtrlClick","onOpen","onClose","Highlight","highlight","IsHighlighted","ImporterMenu","AddGroup","exports","Number","EPSILON","isInteger","isFinite","assign","nextKey","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","ACESFilmicToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","EventDispatcher","_listeners","hasEventListener","listenerArray","_lut","_Math","DEG2RAD","RAD2DEG","d0","d1","d2","d3","clamp","euclideanModulo","mapLinear","a1","b1","lerp","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","LN2","floorPowerOfTwo","Quaternion","_x","_y","_z","_w","isVector2","setScalar","setX","setY","setComponent","getComponent","addVectors","addScalar","addScaledVector","subScalar","multiply","multiplyScalar","divideScalar","applyMatrix3","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","manhattanLength","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","equals","fromArray","fromBufferAttribute","getX","getY","rotateAround","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","sqrSin","tDir","_onChangeCallback","isQuaternion","setFromEuler","euler","isEuler","order","c1","c3","s1","s2","s3","setFromAxisAngle","halfAngle","setFromRotationMatrix","te","trace","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","inverse","conjugate","multiplyQuaternions","premultiply","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","_vector","_quaternion","isVector3","setZ","multiplyVectors","applyEuler","applyQuaternion","applyAxisAngle","applyNormalMatrix","applyMatrix4","qx","qy","qz","qw","ix","iy","iz","iw","matrixWorldInverse","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","reflect","dz","setFromSpherical","setFromSphericalCoords","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","sx","setFromMatrixColumn","sy","sz","getZ","_canvas","_vector$1","Matrix3","isMatrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","setFromMatrix4","applyToBufferAttribute","setXYZ","multiplyMatrices","ae","be","getInverse","throwOnDegenerate","isMatrix4","t11","t12","t13","det","msg","detInv","transpose","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","cx","cy","rotate","translate","ImageUtils","getDataURL","HTMLCanvasElement","ImageData","putImageData","toDataURL","textureId","Texture","mapping","magFilter","minFilter","anisotropy","encoding","DEFAULT_IMAGE","mipmaps","DEFAULT_MAPPING","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","onUpdate","Vector4","WebGLRenderTarget","scissor","scissorTest","depthBuffer","stencilBuffer","depthTexture","WebGLMultisampleRenderTarget","samples","isTexture","updateMatrix","meta","isRootObject","textures","metadata","generator","images","transformUv","uv","isVector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","getW","isWebGLRenderTarget","isWebGLMultisampleRenderTarget","_v1","_m1","Matrix4","_zero","_one","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","ac","ad","bc","bd","makeRotationFromQuaternion","compose","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","decompose","invSX","invSY","invSZ","makePerspective","makeOrthographic","_matrix","_quaternion$1","Euler","_order","DefaultOrder","Layers","mask","RotationOrders","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","channel","enableAll","disableAll","layers","_object3DId","_v1$1","_q1","_m1$1","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","Object3D","DefaultUp","configurable","enumerable","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","background","fog","overrideMaterial","autoUpdate","__THREE_DEVTOOLS__","isObject3D","onBeforeRender","onAfterRender","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","updateWorldMatrix","isCamera","isLight","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","updateMatrixWorld","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverseVisible","traverseAncestors","force","updateParents","updateChildren","geometries","shapes","library","isMesh","isInstancedMesh","instanceMatrix","isLine","isPoints","shape","uuids","extractFromCache","recursive","isScene","_points","_vector$2","_box","Box3","_v0","_v1$2","_v2","_f0","_f1","_f2","_center","_extents","_triangleNormal","_testAxis","satForAxes","axes","extents","isBox3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","setFromObject","expandByObject","getCenter","getSize","expandByVector","expandByScalar","computeBoundingBox","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","clampPoint","intersectsPlane","constant","intersectsTriangle","distanceToPoint","clampedPoint","getBoundingSphere","intersect","union","_box$1","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","_vector$3","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","_vector1","_vector2","_normalMatrix","isPlane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","invDenom","getUV","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","isColor","vertexColors","setHex","setStyle","hex","setHSL","handleAlpha","components","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpHSL","NAMES","materialId","blending","flatShading","vertexTangents","blendSrc","blendDst","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","precision","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","MeshBasicMaterial","lightMap","lightMapIntensity","aoMap","aoMapIntensity","specularMap","alphaMap","envMap","reflectivity","refractionRatio","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","skinning","morphTargets","setValues","BufferAttribute","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8Array","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float32BufferAttribute","Float64BufferAttribute","Float64Array","DirectGeometry","uvs2","groups","skinWeights","skinIndices","boundingSphere","verticesNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","uvsNeedUpdate","groupsNeedUpdate","arrayMax","isMaterial","onBeforeCompile","currentValue","isRoot","roughness","metalness","sheen","emissive","emissiveIntensity","clearcoat","clearcoatRoughness","clearcoatNormalMap","clearcoatNormalScale","matcap","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","morphNormals","srcPlanes","dstPlanes","isMeshBasicMaterial","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZW","onUpload","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","_bufferGeometryId","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","drawRange","isBufferGeometry","getIndex","setIndex","deleteAttribute","addGroup","clearGroups","setDrawRange","tangent","computeBoundingSphere","lineDistances","isGeometry","updateFromObject","direct","__directGeometry","elementsNeedUpdate","lineDistancesNeedUpdate","lineDistance","fromDirectGeometry","morphAttributesPosition","morphAttribute","jl","computeVertexNormals","vA","vB","vC","pA","pB","pC","ab","indices","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","morphArray","attributeData","hasMorphAttributes","attributeArray","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","updateMorphTargets","checkIntersection","raycaster","checkBufferGeometryIntersection","morphPosition","morphInfluences","morphTargetInfluences","influence","setDrawMode","morphTargetDictionary","ml","intersects","groupMaterial","fvA","fvB","fvC","isMultiMaterial","fl","faceMaterial","uvs_f","_geometryId","_m1$3","_obj$1","_offset$1","fromBufferGeometry","addFace","areaWeighted","vl","computeFlatVertexNormals","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","materialIndexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","faceVertexUvs2","uvsCopy","kl","mergeMesh","mergeVertices","verticesMap","faceIndicesToRemove","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","uvs1","normalsHash","colorsHash","uvsHash","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","srcVertexNormal","destVertexNormal","BoxGeometry","depth","widthSegments","heightSegments","depthSegments","BoxBufferGeometry","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","cloneUniforms","mergeUniforms","uniforms","merged","UniformsUtils","default_vertex","default_fragment","ShaderMaterial","defines","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","fov","filmGauge","filmOffset","isShaderMaterial","uniform","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","renderTarget","WebGLRenderTargetCube","currentRenderTarget","getRenderTarget","setRenderTarget","stencil","DataTexture","isWebGLRenderTargetCube","fromEquirectangularTexture","tEquirect","isDataTexture","_sphere$1","_vector$5","Frustum","p4","p5","planes","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_normalmap_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","uvTransform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","shadow","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotShadowMap","spotShadowMatrix","pointLights","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","t2D","cube","tCube","tFlip","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","WebGLAnimation","isAnimating","animationLoop","onAnimationFrame","frame","setAnimationLoop","setContext","WebGLAttributes","gl","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","buffer","bufferType","bytesPerElement","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","absNumericalSort","CubeTexture","DataTexture2DArray","wrapR","DataTexture3D","physical","isCubeTexture","isDataTexture2DArray","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","setValueT1","unit","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","units","setValueT6Array","SingleUniform","activeInfo","setValue","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","uniformObject","parseUniform","matchEnd","idIsIndex","subscript","WebGLUniforms","program","info","getActiveUniform","WebGLShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","getShaderSource","addLineNumbers","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","loopPattern","unrollLoops","loopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","isWebGL2","rendererExtensions","envMapCubeUV","tangentSpaceNormalMap","logarithmicDepthBuffer","generateExtensions","customDefines","generateDefines","numMultiviewViews","isRawShaderMaterial","instancing","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","toneMapping","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","depthPacking","isGLSL3ShaderMaterial","versionRegex","cachedUniforms","cachedAttributes","vertexGlsl","fragmentGlsl","glVertexShader","glFragmentShader","bindAttribLocation","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getUniforms","getAttributes","getActiveAttrib","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","capabilities","programs","floatVertexTextures","maxVertexUniforms","vertexTextures","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineDashedMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","getParameters","shadows","nClipPlanes","nClipIntersection","shaderID","isSkinnedMesh","bones","skeleton","nVertexUniforms","nVertexMatrices","allocateBones","getMaxPrecision","isWebGLMultiviewRenderTarget","numViews","gammaOutput","gammaInput","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","probe","vector3","matrix42","setup","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","bias","mapSize","isSpotLight","penumbra","isRectAreaLight","isPointLight","isHemisphereLight","WebGLRenderState","lightsArray","shadowsArray","setupLights","pushLight","pushShadow","shadowLight","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_renderer","_objects","maxTextureSize","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","1","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizonal","HORIZONAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","localClippingEnabled","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","depthMaterial","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setClear","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLTextures","_gl","utils","maxTextures","maxCubemapSize","maxSamples","_videoTextures","useOffscreenCanvas","OffscreenCanvas","createCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","HTMLImageElement","ImageBitmap","textureNeedsGenerateMipmaps","supportsMips","textureProperties","__maxMipLevel","LOG2E","getInternalFormat","glFormat","glType","internalFormat","filterFallback","onTextureDispose","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglColorTexture","__webglDepthStencilTexture","__webglViewFramebuffers","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","compressedTexImage2D","mipmapImage","setTextureCubeDynamic","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","textureNeedsPowerOfTwo","isDepthTexture","texImage3D","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isMultiview","createFramebuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","ext","colorTexture","framebufferTextureMultiviewOVR","depthStencilTexture","viewFramebuffers","framebufferTextureLayer","updateRenderTargetMipmap","webglTexture","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","UNSIGNED_INT_24_8_WEBGL","WebGLMultiviewRenderTarget","WebGLMultiview","mat3","mat4","cameraArray","renderSize","available","DEFAULT_NUMVIEWS","maxNumViews","getCameraArray","isArrayCamera","cameras","isAvailable","getContextAttributes","MAX_VIEWS_OVR","attachCamera","isMultiviewCompatible","getDrawingBufferSize","setNumViews","resizeRenderTarget","detachCamera","srcRenderTarget","srcFramebuffers","viewWidth","viewHeight","flush","updateCameraProjectionMatricesUniform","updateCameraViewMatricesUniform","updateObjectMatricesUniforms","Group","ArrayCamera","isGroup","_geometry","cameraLPos","cameraRPos","setProjectionFromUnion","cameraL","cameraR","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","left2","right2","top2","bottom2","WebVRManager","renderWidth","renderHeight","device","frameData","controllers","standingMatrix","standingMatrixInverse","framebufferScaleFactor","referenceSpaceType","VRFrameData","onVRDisplayPresentChange","tempQuaternion","tempPosition","tempCamera","cameraVR","isPresenting","currentPixelRatio","currentSize","eyeParameters","getEyeParameters","getPixelRatio","setDrawingBufferSize","animation","triggers","grips","findGamepad","gamepads","getGamepads","gamepad","hand","updateViewportFromBounds","bounds","getController","controller","getDevice","setDevice","setFramebufferScaleFactor","setReferenceSpaceType","getCamera","userHeight","depthNear","depthFar","getFrameData","stageParameters","sittingToStandingTransform","pose","leftViewMatrix","rightViewMatrix","leftProjectionMatrix","rightProjectionMatrix","getLayers","layer","leftBounds","rightBounds","hasPosition","buttonId","pressed","updateControllers","getStandingMatrix","submitFrame","setFrameOfReferenceType","WebXRManager","session","referenceSpace","sortedInputSources","onSessionEvent","inputSource","onSessionEnd","setFramebuffer","onRequestReferenceSpace","updateInputSources","findInputSource","inputSources","handedness","updateCamera","getSession","setSession","updateRenderState","baseLayer","XRWebGLLayer","requestReferenceSpace","onAnimationFrameCallback","getViewerPose","views","renderState","inputPose","getPose","targetRaySpace","_context","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","toneMappingExposure","toneMappingWhitePoint","programCache","renderLists","renderStates","morphtargets","bufferRenderer","indexedBufferRenderer","_this","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentArrayCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_scissor","_scissorTest","_clipping","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","beginShadows","endShadows","setState","fromCache","nGlobal","lGlobal","clippingState","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","getTargetPixelRatio","contextAttributes","xrCompatible","onContextLost","onContextRestore","getShaderPrecisionFormat","rangeMin","rangeMax","initGLContext","getExtension","maxAnisotropy","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","maxVertexTextures","maxAttributes","maxVaryings","maxFragmentUniforms","floatFragmentTextures","MAX_TEXTURE_MAX_ANISOTROPY_EXT","currentColorMask","currentColorClear","setMask","colorMask","setLocked","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","enableAttributeAndDivisor","meshPerAttribute","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","frontFace","cullFace","setPolygonOffset","factor","webglSlot","initAttributes","enableAttribute","disableUnusedAttributes","disableVertexAttribArray","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","boundTexture","unbindTexture","calls","autoReset","mode","instanceCount","wireframeAttributes","onGeometryDispose","buffergeometry","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","_bufferGeometry","geometryAttributes","getWireframeAttribute","currentAttribute","updateList","influencesList","objectInfluences","influences","morphInfluencesSum","morphBaseInfluence","lists","onSceneDispose","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","getClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","vr","environmentBlendMode","setMode","renderInstances","primcount","drawElements","multiview","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","setPixelRatio","updateStyle","setViewport","pixelRatio","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","bits","renderBufferImmediate","hasPositions","hasUvs","hasColors","programAttributes","positionArray","setProgram","updateBuffers","rangeFactor","isInstancedBufferGeometry","materialDefaultAttributeValues","programAttribute","geometryAttribute","stride","isInstancedInterleavedBuffer","maxInstancedCount","isInstancedBufferAttribute","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","materialProperties","lightsStateVersion","programCacheKey","programChange","numSupportedMorphTargets","numSupportedMorphNormals","needsLights","isMeshLambertMaterial","isMeshPhongMaterial","isMeshStandardMaterial","isShadowMaterial","materialNeedsLights","progUniforms","uniformsList","useCache","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","isFog","density","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsPhong","refreshUniformsToon","isMeshPhysicalMaterial","refreshUniformsStandard","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","uvScaleMap","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","ltc_1","LTC_1","ltc_2","LTC_2","projectObject","isLOD","opaqueObjects","transparentObjects","readRenderTargetPixels","activeCubeFaceIndex","restore","textureFormat","checkFramebufferStatus","readPixels","copyFramebufferToTexture","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","FogExp2","Fog","InterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","isInterleavedBuffer","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","float32Array","transformVertex","mvPosition","_v1$4","_v2$2","LOD","levels","SkinnedMesh","bindMode","bindMatrix","bindMatrixInverse","addLevel","getObjectForDistance","calculateInverses","normalizeSkinWeights","skinWeight","_offsetMatrix","_identityMatrix","Skeleton","boneInverses","Bone","bone","isBone","getBoneByName","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","InstancedMesh","linecap","linejoin","getMatrixAt","raycastTimes","instanceId","setMatrixAt","_start","_end","_inverseMatrix$1","_ray$1","_sphere$2","computeLineDistances","positionAttribute","linePrecision","localPrecision","localPrecisionSq","vStart","vEnd","interSegment","interRay","distSq","nbVertices","_start$1","_end$1","LineLoop","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","testPoint","localThresholdSq","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","CompressedTexture","CanvasTexture","DepthTexture","WireframeGeometry","ol","ParametricGeometry","slices","stacks","ParametricBufferGeometry","pu","pv","sliceCount","PolyhedronGeometry","PolyhedronBufferGeometry","subdivideFace","cols","aj","bj","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","uvA","uvB","uvC","azi","correctUVs","correctSeam","generateUVs","TetrahedronGeometry","TetrahedronBufferGeometry","OctahedronGeometry","OctahedronBufferGeometry","IcosahedronGeometry","IcosahedronBufferGeometry","DodecahedronGeometry","DodecahedronBufferGeometry","TubeGeometry","tubularSegments","radialSegments","closed","taper","bufferGeometry","TubeBufferGeometry","tangents","binormals","computeFrenetFrames","P","generateSegment","getPointAt","N","B","generateIndices","generateBufferData","TorusKnotGeometry","tube","heightScale","TorusKnotBufferGeometry","P1","P2","T","calculatePositionOnCurve","cu","su","quOverP","TorusGeometry","arc","TorusBufferGeometry","threshold","localThreshold","HAVE_CURRENT_DATA","isCanvasTexture","Earcut","triangulate","holeIndices","dim","invSize","outerLen","outerNode","linkedList","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","sum","insertNode","removeNode","again","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","tanMin","findHoleBridge","leftmost","py","intersectsPolygon","middleInside","q1","q2","Node","an","bp","ShapeUtils","isClockWise","pts","triangulateShape","holes","removeDupEndPts","addContour","ExtrudeGeometry","ExtrudeBufferGeometry","verticesArray","addShape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","ahole","hl","extrudeByPath","getSpacedPoints","shapePoints","extractPoints","scalePt2","pt","vec","bs","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","sidewalls","layeroffset","sl","slen1","slen2","f4","f3","addVertex","generateTopUV","addUV","generateSideWallUV","vector2","buildLidFaces","buildSideFaces","indexA","indexB","indexC","a_x","a_y","b_x","b_y","c_x","c_y","indexD","a_z","b_z","c_z","d_x","d_y","d_z","TextGeometry","TextBufferGeometry","font","isFont","generateShapes","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","SphereBufferGeometry","thetaEnd","grid","verticesRow","uOffset","RingGeometry","thetaSegments","phiSegments","RingBufferGeometry","segment","radiusStep","thetaSegmentLevel","LatheGeometry","LatheBufferGeometry","inverseSegments","ShapeGeometry","ShapeBufferGeometry","shapeHole","indexOffset","shapeVertices","shapeHoles","toJSON$1","EdgesGeometry","thresholdAngle","thresholdDot","sourceVertices","face1","face2","CylinderGeometry","radiusTop","radiusBottom","openEnded","CylinderBufferGeometry","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","slope","indexRow","generateTorso","ConeGeometry","ConeBufferGeometry","CircleGeometry","CircleBufferGeometry","Geometries","RawShaderMaterial","STANDARD","PHYSICAL","TOON","MATCAP","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","ArrayBuffer","isView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","startFrame","endFrame","fps","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","BooleanKeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","parseKeyframeTrack","trackType","typeName","getTrackTypeForValueTypeName","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","getInterpolation","ValueTypeName","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","createInterpolant","timeOffset","timeScale","startTime","endTime","nKeys","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","TypedKeyframeTrack","jsonTracks","frameTime","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","boneName","Cache","files","LoadingManager","onLoad","isLoading","itemsLoaded","itemsTotal","urlModifier","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","manager","crossOrigin","resourcePath","setCrossOrigin","setPath","setResourcePath","loading","FileLoader","AnimationLoader","CompressedTextureLoader","DataTextureLoader","ImageLoader","CubeTextureLoader","Curve","arcLengthDivisions","EllipseCurve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","ArcCurve","aRadius","CubicPoly","c0","initCatmullRom","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","cached","dataUriRegexResult","isBase64","atob","DOMParser","parseFromString","requestHeader","setResponseType","setWithCredentials","setMimeType","loadTexture","texDatas","loaded","mipmapCount","isCubemap","texData","onImageLoad","onImageError","urls","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","getLengths","cacheArcLengths","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentFraction","getTangent","pt1","pt2","getTangentAt","MAX_VALUE","tz","fromJSON","isEllipseCurve","twoPi","deltaAngle","samePoints","isArcCurve","pz","CatmullRomCurve3","curveType","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","CubicBezierCurve","CubicBezierCurve3","LineCurve","LineCurve3","QuadraticBezierCurve","QuadraticBezierCurve3","SplineCurve","isCatmullRomCurve3","intPoint","weight","isCubicBezierCurve","isCubicBezierCurve3","isLineCurve","isLineCurve3","isQuadraticBezierCurve","isQuadraticBezierCurve3","isSplineCurve","Curves","CurvePath","curves","autoClose","Path","currentPoint","Shape","Light","HemisphereLight","LightShadow","_frameExtents","_viewportCount","_viewports","SpotLightShadow","SpotLight","power","PointLightShadow","_cubeDirections","_cubeUps","PointLight","OrthographicCamera","DirectionalLightShadow","RectAreaLight","MaterialLoader","startPoint","endPoint","curveLengths","getCurveLengths","lens","cacheLengths","sums","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","getPointsHoles","holesPts","_lightPositionWorld","_lookTarget","shadowMatrix","projScreenMatrix","lookTarget","lightPositionWorld","viewportIndex","isSpotLightShadow","zoomW","zoomH","scaleW","scaleH","isDirectionalLightShadow","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","extractUrlBase","InstancedBufferGeometry","InstancedBufferAttribute","BufferGeometryLoader","typedArray","TYPED_ARRAYS","bufferAttributeConstr","bufferAttribute","drawcalls","ObjectLoader","parseShape","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseAnimations","bufferGeometryLoader","details","geometryShapes","geometryLoader","LegacyJSONLoader","loadImage","currentUrl","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","ShapePath","subPaths","currentPath","Font","createPath","char","glyph","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","familyName","FontLoader","setOptions","res","imageBitmap","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","paths","chars","line_height","yMax","yMin","underlineThickness","createPaths","AudioContext","webkitAudioContext","AudioLoader","SphericalHarmonics3","LightProbe","HemisphereLightProbe","sky","ground","AmbientLightProbe","bufferCopy","decodeAudioData","audioBuffer","isSphericalHarmonics3","zero","getAt","coeff","addScale","getIrradianceAt","getBasisAt","shBasis","isHemisphereLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","Clock","autoStart","oldTime","elapsedTime","running","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","performance","now","getElapsedTime","getDelta","newTime","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","Audio","getInput","autoplay","detune","loop","loopStart","loopEnd","playbackRate","isPlaying","hasPlaybackControl","sourceType","_startedAt","_pausedAt","removeFilter","disconnect","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","currentTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","play","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","pause","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","panner","createPanner","panningModel","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","PropertyMixer","mixFunction","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","useCount","referenceCount","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","getFrequencyData","getByteFrequencyData","getAverageFrequency","accumulate","accuIndex","currentWeight","mix","originalValueOffset","saveOriginalState","restoreOriginalState","_reservedRe","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","subscribe_","rootNode","findNode","AnimationObjectGroup","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","inUse","bindingsPerObject","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","AnimationMixer","_root","_initMemoryManager","_accuIndex","Uniform","InstancedInterleavedBuffer","PointCloud","ascSort","intersectObject","Spherical","firstValidIndex","isAnimationObjectGroup","sanitizeNodeName","objectIndex","propertyIndex","lastDot","searchNodeSubtree","childNode","subTreeNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","nObjects","nCachedObjects","indicesByUUID","parsedPaths","nBindings","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","_scheduleFading","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_update","deltaTime","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","setFromCamera","makeSafe","setFromCartesianCoords","_vector$6","Box2","_startP","_startEnd","Line3","ImmediateRenderObject","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","startEnd_startP","_v1$5","_v2$3","_normalMatrix$1","_keys","VertexNormalsHelper","nNormals","objGeometry","objPos","objNorm","_vector$7","SpotLightHelper","cone","coneLength","coneWidth","_vector$8","_boneMatrix","_matrixWorldInv","SkeletonHelper","getBoneList","boneList","PointLightHelper","sphereSize","RectAreaLightHelper","_vector$9","_color1","_color2","HemisphereLightHelper","LightProbeHelper","GAMMA_OUTPUT","GridHelper","PolarGridHelper","radials","circles","PositionalAudioHelper","divisionsInnerAngle","divisionsOuterAngle","materialInnerAngle","materialOuterAngle","halfConeInnerAngle","halfConeOuterAngle","_v1$6","_v2$4","_normalMatrix$2","FaceNormalsHelper","_v1$7","_v2$5","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$a","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_box$3","BoxHelper","Box3Helper","PlaneHelper","_lineGeometry","_coneGeometry","_axis","ArrowHelper","headLength","headWidth","setDirection","AxesHelper","setColor","ClosedSplineCurve3","SplineCurve3","Spline","construct","createPointsGeometry","createGeometry","createSpacedPointsGeometry","fromPoints","initFromArray","getControlPointsArray","reparametrizeByArcLength","setColors","Handlers","setTexturePath","isIntersectionBox","isIntersectionSphere","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBuffer","applyToVector3Array","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","computeTangents","getChildByName","renderDepth","getWorldRotation","eulerOrder","useQuaternion","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","setTexture","getActiveMipMapLevel","shadowMapCullFace","renderReverseSided","renderSingleSided","activeMipMapLevel","standing","audioLoader","getData","updateCubeMap","GeometryUtils","geometry1","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CubeGeometry","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicDrawUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","Face4","FlatShading","Float32Attribute","Float64Attribute","FrontFaceDirectionCCW","FrontFaceDirectionCW","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","threejs","ImporterViewer","canvasName","SetJsonData","ShowAllMeshes","inEnvironment","currentMeshIndex","environment","taskCount","currentTask","GetMeshesUnderPosition","GetMeshesByMaterial","meshIndices","HighlightMesh","FitMeshInWindow","SetFixUp","SetNamedView","viewName","ImporterApp","inGenerate","meshesGroup","materialMenuItems","meshMenuItems","importerButtons","introControl","floatingDialog","isMobile","readyForTest","OpenFile","matchMedia","RegisterCanvasClick","DragOver","Drop","fileInput","FileSelected","onhashchange","LoadFilesFromHash","hasHashModel","ShowIntroControl","GetWelcomeText","ClearReadyForTest","SetReadyForTest","AddExtension","IsEnabled","extInterface","dialogText","HideIntroControl","welcomeText","SetHeight","JsonLoaded","progressBar","Generate","GenerateMenu","AddDefaultGroup","menu","importerApp","importerMenu","materialsGroup","materialMenuItem","materialButtons","highlightButton","HighlightMeshesByMaterial","fitInWindowButton","FitMeshesByMaterialInWindow","toFixed","AddMeshButtons","meshButtons","copyNameToClipboardButton","execCommand","visibleImage","meshMenuItem","ShowHideMesh","IsolateMesh","isVisible","filesGroup","missingFilesGroup","infoGroup","infoTable","AddInformation","GenerateError","errorMessage","ShowMeshes","SetView","viewType","ShowHideMeshInternal","onlyThisVisible","HighlightMeshInternal","ProcessFiles","isUrl","userFiles","processorFunc","mousePosition","mouseMoved","OnCanvasClick","ScrollMeshIntoView","menuItem","dataTransfer","dropEffect","ResetHash"],"mappings":";;;;;;;u+BAAAA,OAAA,8BAAA,WACA,OAAA,SAAAC,EAAAC,EAAAC,GACA,iBAAAD,IACAA,EAAAA,EAAAE,MAAA,MAOA,IALA,IAAAC,EAAAH,EAAAG,OACAC,EAAAL,EACAM,EAAA,EACAC,EAAAN,EAAAK,KAEAA,EAAAF,GACAC,EAAAA,EAAAE,GAAAF,EAAAE,OACAA,EAAAN,EAAAK,KAGA,OAAAD,EAAAE,GAAAL,KAGAH,OAAA,uBACA,aACA,SAAAS,GACA,IAAAC,GACAC,OAAA,SAAAT,EAAAU,GACA,OAAAH,EAAAC,EAAAR,EAAAU,KAGA,OAAAF,IAGAV,OAAA,yBACA,QACA,SAAAU,GACA,OAAAA,IAEAV,OAAA,oBAAA,yBAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,yBACA,oBACA,SAAAM,GACA,OAAAA,IAGAN,OAAA,6BACA,oBACA,SAAAU,GACA,IAGAI,EAHAC,KAAAA,SAEAC,GACAF,KAGA,uEAAAV,MAAA,KAAAa,QAAA,SAAAT,GACAM,EAAA,WAAAN,EAAA,KAAAA,EAAAU,gBAGA,SAAAN,GACA,OAAA,MAAAA,EAAAO,OAAAP,GACAE,EAAAC,EAAAK,KAAAR,KAAA,WArBA,SAAAS,EAAAT,GACA,IAAAJ,EACA,IAAAA,KAAAI,EACA,GAAA,OAAAA,EAAAJ,GACA,OAAA,EAGA,OAAA,EAiBA,SAAAc,EAAAC,GACA,MAAA,YAAAP,EAAAO,GAGA,SAAAC,EAAAZ,GACA,OAAAA,GAAAA,EAAAa,SA0BA,SAAAC,EAAAd,GACA,MAAA,iBAAAA,EAGA,SAAAe,EAAAf,GACA,MAAA,UAAAI,EAAAJ,GAOA,SAAAgB,EAAAhB,GACA,MAAA,iBAAAA,EAGA,SAAAiB,EAAAjB,GACA,OAAAA,GAAAA,GAAAA,EAAAkB,OAmCA,OAAApB,EAAAC,OAAA,eAEAoB,QApFA,SAAAC,GACA,OAAAA,GAAAA,EAAAC,cAAAC,OAqFAC,YA5IA,SAAAvB,GACA,OAAAgB,EAAAhB,KAAAY,EAAAZ,IAAA,iBAAAA,EAAAP,SAAAiB,EAAAV,IA6IAwB,UA7HA,SAAAxB,GACA,MAAA,kBAAA,GA8HAyB,UA3HA,SAAAzB,GACA,YAAA,IAAAA,GA4HA0B,WAzHA,SAAA1B,GACA,OAAA,MAAAA,GAAAA,EAAAa,UAAAb,EAAA2B,eA0HAC,QAAAnB,EAEAA,cAAAA,EAEAC,WAAAA,EAEAE,WAAAA,EAEAiB,OA5EA,SAAAlB,GACA,MAAA,SAAAP,EAAAO,IA6EAG,SAAAA,EAEAgB,UAAAhB,EAEAC,SAAAA,EAEAgB,cAxEA,SAAA/B,GACA,OAAAe,EAAAf,KAAAiB,EAAAjB,IAAAgC,OAAAC,eAAAjC,IAAAgC,OAAAE,WAyEAlB,SAAAA,EAEAmB,aAhEA,SAAAC,GACA,GAAAA,EAAA,CACA,IAAAC,EAAAC,SAAAC,SAAA,KAAAD,SAAAE,SAIA,OAHAF,SAAAG,OACAJ,GAAA,IAAAC,SAAAG,MAEAL,EAAAM,WAAAL,KA4DAM,SA3CA,SAAAhC,GACA,MAAA,iBAAAA,GACAiC,aAAAjC,IAAAkC,eAAArC,KAAAG,IAAAmC,WA2CAC,YAxCA,SAAApC,GACA,YAAAqC,IAAArC,GAyCAM,SAAAA,EAEAb,KAAAA,MAIAhB,OAAA,4BACA,WACA,SAAA6D,GACA,OAAAA,IAEA7D,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,iCACA,mBACA,uBACA,SAAAU,EAAAmD,GACA,IAAAlC,EAAAkC,EAAAlC,SACA4B,EAAAM,EAAAN,SAEAO,EAAA,EAAA,EAEAC,EAAA,uBACAC,EAAA,IAGAC,EAAA,aAGAC,EAAA,qBAGAC,EAAA,aAGAC,EAAA,cAMAC,EAAAC,SAyBA,SAAAC,EAAAhD,GACA,IAAAA,EACA,OAAA,IAAAA,EAAAA,EAAA,EAGA,IADAA,EAAAiD,EAAAjD,MACAuC,GAAAvC,KAAAuC,EAAA,CACA,IAAAW,EAAAlD,EAAA,GAAA,EAAA,EACA,OAAAkD,EAAAV,EAEA,OAAAxC,GAAAA,EAAAA,EAAA,EAyDA,SAAAiD,EAAAjD,GACA,GAAA,iBAAAA,EACA,OAAAA,EAEA,GAAAgC,EAAAhC,GACA,OAAAyC,EAEA,GAAArC,EAAAJ,GAAA,CACA,IAAAmD,EAAA,mBAAAnD,EAAAoD,QAAApD,EAAAoD,UAAApD,EACAA,EAAAI,EAAA+C,GAAAA,EAAA,GAAAA,EAEA,GAAA,iBAAAnD,EACA,OAAA,IAAAA,EAAAA,GAAAA,EAEAA,EAAAA,EAAAqD,QAAAX,EAAA,IACA,IAAAY,EAAAV,EAAAW,KAAAvD,GACA,OAAAsD,GAAAT,EAAAU,KAAAvD,GACA8C,EAAA9C,EAAAwD,MAAA,GAAAF,EAAA,EAAA,GACAX,EAAAY,KAAAvD,GAAAyC,GAAAzC,EAGA,OAAAb,EAAAC,OAAA,iBACA4D,SAAAA,EACAC,SAAAA,EACAQ,UAtDA,SAAAzD,GACA,IAAA0D,EAAAV,EAAAhD,GACA2D,EAAAD,EAAA,EAEA,OAAAA,GAAAA,EAAAC,EAAAD,EAAAC,EAAAD,EAAA,OAqDAjF,OAAA,8BACA,aACA,SAAAmF,GACA,OAAAA,IAEAnF,OAAA,yBAAA,8BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,iCACA,sBACA,2BACA,sBACA,yBACA,SAAAU,EAAAD,EAAAoD,EAAAsB,GACA,IA+BAC,EAAAC,EA/BAC,EAAA1C,OAAAE,UAAAwC,eACAP,EAAA7C,MAAAY,UAAAiC,MACA3C,EAAAyB,EAAAzB,UACAd,EAAAuC,EAAAvC,WACAK,EAAAkC,EAAAlC,SACAgB,EAAAkB,EAAAlB,cACAZ,EAAA8B,EAAA9B,QACAI,EAAA0B,EAAA1B,YACAP,EAAAiC,EAAAjC,SACAoD,EAAAG,EAAAH,UAuBA,IApBAO,EAAAC,EAoBAC,EAAA,oBAAAC,OAAAA,OAAA5C,UAAA,KA0GA,SAAA6C,EAAA/E,GACA,IAAAe,EAAAf,GAAA,SACA,IAAAgF,KACA,IAAA,IAAAC,KAAAjF,EAAAgF,EAAAE,KAAAD,GACA,OAAAD,EA0DA,SAAAG,EAAAnF,EAAAV,GACA,IAAA6B,EAAA7B,GACA,OAAA,MAAAU,GAAA0E,EAAAlE,KAAAR,EAAAV,GAGA,IADA,IAAAG,EAAAH,EAAAG,OACAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAsF,EAAA3F,EAAAK,GACA,GAAA,MAAAK,IAAA0E,EAAAlE,KAAAR,EAAAiF,GACA,OAAA,EAEAjF,EAAAA,EAAAiF,GAEA,QAAAxF,EAgEA,SAAA2F,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAA,IAAAP,KAAAK,EAIAE,QAAAxC,IAAAqC,EAAAJ,KAGAM,IAAAxD,EAAAuD,EAAAL,KAAA9D,EAAAmE,EAAAL,MACAlD,EAAAuD,EAAAL,MAAAlD,EAAAsD,EAAAJ,MACAI,EAAAJ,OAEA9D,EAAAmE,EAAAL,MAAA9D,EAAAkE,EAAAJ,MACAI,EAAAJ,OAEAG,EAAAC,EAAAJ,GAAAK,EAAAL,GAAAM,EAAAC,SACAxC,IAAAsC,EAAAL,KACAI,EAAAJ,GAAAK,EAAAL,KAGA,OAAAI,EAGA,SAAAI,EAAAC,GACA,IAAAC,EAAAxB,EAAA3D,KAAAoF,UAAA,GACAP,EAAAM,EAAAE,QACAN,GAAA,EAKA,OAJA/D,EAAAmE,EAAAA,EAAAlG,OAAA,MACA8F,EAAAI,EAAAG,QAIAT,OAAAA,EACAU,QAAAJ,EACAJ,KAAAA,GAIA,SAAAS,IACA,IAAAN,EAAAD,EAAAQ,MAAAC,KAAAN,WAKA,OAHAF,EAAAK,QAAA1F,QAAA,SAAAiF,GACAF,EAAAM,EAAAL,OAAAC,EAAAI,EAAAH,MAAA,KAEAG,EAAAL,OAkFA,SAAAc,EAAAnG,GAIA,IAHA,IAAAgF,EAAAD,EAAA/E,GACAP,EAAAuF,EAAAvF,OACA0G,EAAA7E,MAAA7B,GACAE,EAAA,EAAAA,EAAAF,EAAAE,IACAwG,EAAAxG,GAAAK,EAAAgF,EAAArF,IAEA,OAAAwG,EA2BA,OAlZA3B,EAAA,SAAA4B,EAAAC,EAAAC,EAAAC,GAGA,GAAAH,IAAAC,EAAA,OAAA,IAAAD,GAAA,EAAAA,GAAA,EAAAC,EAEA,GAAA,MAAAD,GAAA,MAAAC,EAAA,OAAA,EAEA,GAAAD,GAAAA,EAAA,OAAAC,GAAAA,EAEA,IAAAjG,SAAAgG,EACA,OAAA,aAAAhG,GAAA,WAAAA,GAAA,iBAAAiG,IACA5B,EAAA2B,EAAAC,EAAAC,EAAAC,IAIA9B,EAAA,SAAA2B,EAAAC,EAAAC,EAAAC,GAKA,IAAAC,EAAArG,SAAAK,KAAA4F,GACA,GAAAI,IAAArG,SAAAK,KAAA6F,GAAA,OAAA,EACA,OAAAG,GAEA,IAAA,kBAEA,IAAA,kBAGA,MAAA,GAAAJ,GAAA,GAAAC,EACA,IAAA,kBAGA,OAAAD,IAAAA,GAAAC,IAAAA,EAEA,IAAAD,EAAA,GAAAA,GAAA,EAAAC,GAAAD,IAAAC,EACA,IAAA,gBACA,IAAA,mBAIA,OAAAD,IAAAC,EACA,IAAA,kBACA,OAAAxB,EAAAd,QAAAvD,KAAA4F,KAAAvB,EAAAd,QAAAvD,KAAA6F,GAGA,IAAAI,EAAA,mBAAAD,EACA,IAAAC,EAAA,CACA,GAAA,iBAAAL,GAAA,iBAAAC,EAAA,OAAA,EAGA,IAAAK,EAAAN,EAAA/E,YAAAsF,EAAAN,EAAAhF,YACA,GAAAqF,IAAAC,KAAAjG,EAAAgG,IAAAA,aAAAA,GACAhG,EAAAiG,IAAAA,aAAAA,IACA,gBAAAP,GAAA,gBAAAC,EACA,OAAA,EAQAC,EAAAA,MACAC,EAAAA,MAEA,IADA,IAAA9G,EAAA6G,EAAA7G,OACAA,KAGA,GAAA6G,EAAA7G,KAAA2G,EAAA,OAAAG,EAAA9G,KAAA4G,EAQA,GAJAC,EAAApB,KAAAkB,GACAG,EAAArB,KAAAmB,GAGAI,EAAA,CAGA,IADAhH,EAAA2G,EAAA3G,UACA4G,EAAA5G,OAAA,OAAA,EAEA,KAAAA,KACA,IAAA+E,EAAA4B,EAAA3G,GAAA4G,EAAA5G,GAAA6G,EAAAC,GAAA,OAAA,MAEA,CAEA,IAAAtB,EAAAD,EAAAhD,OAAAgD,KAAAoB,GAGA,GAFA3G,EAAAuF,EAAAvF,OAEAuC,OAAAgD,KAAAqB,GAAA5G,SAAAA,EAAA,OAAA,EACA,KAAAA,KAGA,GADAwF,EAAAD,EAAAvF,QACAuD,IAAAqD,EAAApB,KAAAT,EAAA4B,EAAAnB,GAAAoB,EAAApB,GAAAqB,EAAAC,GAAA,OAAA,EAMA,OAFAD,EAAAR,MACAS,EAAAT,OACA,GA8SAhG,EAAAC,OAAA,iBACAgF,QAAAA,EAEAhF,OAAAF,EAEA+G,MA7BA,SAAAA,EAAAC,EAAAC,GACA,IAAAC,EACA,QAAA/D,IAAA6D,GAAA,OAAAA,EACAE,EAAAF,OACA,GAAAC,GAAAD,EAAAD,MACAG,EAAAF,EAAAD,aACA,GAAAzF,EAAA0F,GAAA,CACAE,KACA,IAAA,IAAApH,EAAA,EAAAA,EAAAkH,EAAApH,OAAAE,IACAoH,EAAA7B,KAAA0B,EAAAC,EAAAlH,UAEA,GAAAoC,EAAA8E,GAEA,IAAA,IAAA5B,KADA8B,KACAF,EACAE,EAAA9B,GAAA2B,EAAAC,EAAA5B,SAGA8B,EAAAF,EAGA,OAAAE,GAWAnC,UA/aAD,EA+aAI,EA/aAH,GA+aA,EA9aA,SAAA5E,GACA,IAAAP,EAAAmG,UAAAnG,OAEA,GADAmF,IAAA5E,EAAAgC,OAAAhC,IACAP,EAAA,GAAA,MAAAO,EAAA,OAAAA,EACA,IAAA,IAAAgH,EAAA,EAAAA,EAAAvH,EAAAuH,IAIA,IAHA,IAAA1B,EAAAM,UAAAoB,GACAhC,EAAAL,EAAAW,GACA2B,EAAAjC,EAAAvF,OACAE,EAAA,EAAAA,EAAAsH,EAAAtH,IAAA,CACA,IAAAsF,EAAAD,EAAArF,GACAiF,QAAA,IAAA5E,EAAAiF,KAAAjF,EAAAiF,GAAAK,EAAAL,IAGA,OAAAjF,IAmaAkH,KA5SA,SAAAlH,EAAAmH,GACA,IAAA1H,EAAAwF,EAAAtF,EAAAgB,EAEA,GAAAX,EAGA,QALAoH,KAGA3H,EAAAO,EAAAP,SAIA,IAAAwF,KAAAjF,EACA,GAAAA,EAAA0E,eAAAO,KACAtE,EAAAX,EAAAiF,IACA,IAAAkC,EAAA3G,KAAAG,EAAAsE,EAAAtE,IACA,WAMA,IAAAhB,EAAA,EAAAA,EAAAF,IACAkB,EAAAX,EAAAL,IACA,IAAAwH,EAAA3G,KAAAG,EAAAhB,EAAAgB,IAFAhB,KASA,OAAAuG,MAmRAmB,OAhRA,SAAAhC,GACA,IAAAE,EAAAG,EAAAvB,EAAA3D,KAAAoF,UAAA,GACA,kBAAAP,IACAE,EAAAF,EACAA,EAAAK,EAAAG,SAEA,GAAAH,EAAAjG,SACAiG,GAAAL,GACAA,EAAAa,MAKA,OAHAR,EAAArF,QAAA,SAAAiH,GACAtB,EAAAX,EAAAiC,EAAA/B,KAEAF,GAqQAF,IAAAA,EAEAoC,QA/LA,SAAAnB,EAAAC,GACA,OAAA7B,EAAA4B,EAAAC,IAgMAmB,SAhNA,SAAAC,EAAA9G,EAAA+G,EAAAC,GACAF,EAAAlG,EAAAkG,GAAAA,EAAAtB,EAAAsB,GACAC,EAAAA,IAAAC,EAAAvD,EAAAsD,GAAA,EAEA,IAAAjI,EAAAgI,EAAAhI,OACAiI,EAAA,IACAA,EAAAE,UAAAnI,EAAAiI,EAAA,IAEA,OAAA1G,EAAAyG,GACAC,GAAAjI,GAAAgI,EAAAI,QAAAlH,EAAA+G,IAAA,IACAjI,GAAAqI,YAAAL,EAAA9G,EAAA+G,IAAA,GAwMAK,QA9LA,SAAA3G,EAAA4G,GACA,IAAAhD,EAAAA,EAAAgD,GAAAvI,EAAAuF,EAAAvF,OACA,GAAA,MAAA2B,EAAA,OAAA3B,EAEA,IADA,IAAAO,EAAAgC,OAAAZ,GACAzB,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAsF,EAAAD,EAAArF,GACA,GAAAqI,EAAA/C,KAAAjF,EAAAiF,MAAAA,KAAAjF,GAAA,OAAA,EAEA,OAAA,GAwLAgF,KAxQA,SAAAhF,GACA,GAAAe,EAAAf,GAAA,SACA,IAAAgF,KACA,IAAA,IAAAC,KAAAjF,EAAAmF,EAAAnF,EAAAiF,IAAAD,EAAAE,KAAAD,GACA,OAAAD,GAsQAgB,MAAAA,EAEAiC,KAzIA,SAAAjI,EAAAkI,EAAAC,GACA,IAAAnI,EACA,OAAA,KAGA,IADA,IAAAqE,EAAA2B,KAAAhG,GACAL,EAAA,EAAAA,EAAAiG,UAAAnG,OAAAE,IAAA,CACA,IAAAyI,EAAAxC,UAAAjG,GACAyI,KAAApI,UACAqE,EAAA+D,GAGA,OAAA/D,GAgIAgE,KA3HA,SAAArI,EAAAkI,EAAAC,GACA,IAAAnI,EACA,OAAA,KAGA,IADA,IAAAqE,KACA1E,EAAA,EAAAA,EAAAiG,UAAAnG,OAAAE,IAAA,CACA,IAAAyI,EAAAxC,UAAAjG,GACAyI,KAAApI,IACAqE,EAAA+D,GAAApI,EAAAoI,IAGA,OAAA/D,GAkHAiE,WA/GA,SAAAC,EAAAC,GACA,GAAArH,EAAAoH,GAAA,CACA,IAAAE,EAAAF,EAAAV,QAAAW,IACA,GAAAC,GACAF,EAAAG,OAAAD,EAAA,QAEA,GAAA1G,EAAAwG,GACA,IAAA,IAAAtD,KAAAsD,EACA,GAAAA,EAAAtD,IAAAuD,EAAA,QACAD,EAAAtD,GACA,MAKA,OAAAiB,MAkGA7B,OA/FA,SAAArE,EAAAV,EAAAqJ,GACAxH,EAAA7B,KACAA,EAAAA,EAAAE,MAAA,MAEA,IAAAC,EAAAH,EAAAG,OACA,IAAAA,EACA,OAAAiB,EAAAiI,GAAAA,EAAAnI,KAAAR,GAAA2I,EAEA,IAAA,IAAAhJ,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACA,IAAAiJ,EAAA,MAAA5I,OAAA,EAAAA,EAAAV,EAAAK,SACA,IAAAiJ,IACAA,EAAAD,EACAhJ,EAAAF,GAEAO,EAAAU,EAAAkI,GAAAA,EAAApI,KAAAR,GAAA4I,EAGA,OAAA5I,GAgFA6I,UA7EA,WACA,IAAAnD,EAAAD,EAAAQ,MAAAC,KAAAN,WAKA,OAHAF,EAAAK,QAAA1F,QAAA,SAAAiF,GACAF,EAAAM,EAAAL,OAAAC,EAAAI,EAAAH,MAAA,KAEAG,EAAAL,QAyEAc,OAAAA,MAKA/G,OAAA,8BACA,aACA,SAAA0J,GACA,OAAAA,IAEA1J,OAAA,yBAAA,8BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,+BACA,sBACA,sBACA,yBACA,SAAAU,EAAAmD,EAAA6F,GACA,IAAAC,EAAAzH,MAAAY,UAAA6G,OACAxH,EAAA0B,EAAA1B,YAYA,SAAAyH,EAAAC,EAAAC,EAAAxB,EAAAyB,GAIA,IAHA,IAAA1J,EAAAwJ,EAAAxJ,OACAuH,EAAAU,GAAAyB,EAAA,GAAA,GAEAA,EAAAnC,MAAAA,EAAAvH,GACA,GAAAyJ,EAAAD,EAAAjC,GAAAA,EAAAiC,GACA,OAAAjC,EAGA,OAAA,EAiCA,SAAAoC,EAAAzI,GACA,OAAAA,GAAAA,EAcA,SAAA0I,EAAAJ,GACA,GAAA1H,EAAA0H,GAAA,CAEA,IADA,IAAA5E,KACA1E,EAAA,EAAAA,EAAAsJ,EAAAxJ,OAAAE,IAAA,CACA,IAAA6I,EAAAS,EAAAtJ,GACA,GAAA4B,EAAAiH,GACA,IAAA,IAAAc,EAAA,EAAAA,EAAAd,EAAA/I,OAAA6J,IACAjF,EAAAa,KAAAsD,EAAAc,SAGAjF,EAAAa,KAAAsD,GAGA,OAAAnE,EAEA,OAAA4E,EAmGA,OAAAnJ,EAAAC,OAAA,gBACAiJ,cAAAA,EAEAlB,YA1JA,SAAAmB,EAAAtI,EAAA+G,GACA,GAAA/G,GAAAA,EACA,OAAAqI,EAAAC,EAAAG,EAAA1B,GAEA,IAAAV,EAAAU,EAAA,EACAjI,EAAAwJ,EAAAxJ,OAEA,OAAAuH,EAAAvH,GACA,GAAAwJ,EAAAjC,KAAArG,EACA,OAAAqG,EAGA,OAAA,GAgJAuC,QAjIA,SAAAN,GACA,OAAAF,EAAAvI,KAAAyI,EAAA,SAAAT,GACA,OAAA,MAAAA,KAiIAgB,MAAA,SAAAjB,EAAAkB,GACA,OAAAA,EACAlB,EAAApE,MAAA,EAAAsF,GAEAlB,EAAA,IAIAQ,OArIA,SAAAE,EAAAS,GACA,OAAAX,EAAAvI,KAAAyI,EAAAS,IAsIAL,QAAAA,EAEAM,KAjHA,SAAAV,EAAA9B,GACA,IAAAyC,KAQA,OANAd,EAAA5B,KAAA+B,EAAA,SAAAtJ,EAAA6I,GACArB,EAAAqB,EAAA7I,IACAiK,EAAA1E,KAAAsD,KAIAoB,GA0GAC,QAvGA,SAAArB,EAAAS,GACA,IAAAA,EACA,OAAA,EAEA,IAAAtJ,EAEA,GAAAsJ,EAAApB,QACA,OAAAoB,EAAApB,QAAAW,GAGA7I,EAAAsJ,EAAAxJ,OACA,KAAAE,KACA,GAAAsJ,EAAAtJ,KAAA6I,EACA,OAAA7I,EAIA,OAAA,GAwFAmK,UArFA,SAAA9J,EAAA+J,EAAAC,GACA,GAAAzI,EAAAvB,GACA,OAAAgK,OAAAC,OAAA3I,MAAAY,UAAAiC,MAAA3D,KAAAR,EAAA+J,GAAA,IAIA,OAAA/J,IAiFAkK,MAvDA,SAAAV,EAAAW,GACA,IAAAlD,EAAAkD,EAAA1K,OACAE,EAAA6J,EAAA/J,OACA6J,EAAA,EAEA,GAAA,iBAAArC,EACA,KAAAqC,EAAArC,EAAAqC,IACAE,EAAA7J,KAAAwK,EAAAb,QAGA,UAAAtG,IAAAmH,EAAAb,IACAE,EAAA7J,KAAAwK,EAAAb,KAMA,OAFAE,EAAA/J,OAAAE,EAEA6J,GAwCAnJ,QA/EA,SAAA+J,EAAAC,GACA,GAAAD,EAAA/J,QAAA,OAAA+J,EAAA/J,QAAAgK,GACA,IAAA,IAAA1K,EAAA,EAAAA,EAAAyK,EAAA3K,OAAAE,IAAA0K,EAAAD,EAAAzK,GAAAA,IA+EA2K,IA5EA,SAAAC,EAAApD,GACA,IAAAxG,EACAhB,EAAAsF,EADAkB,KAEA,GAAA5E,EAAAgJ,GACA,IAAA5K,EAAA,EAAAA,EAAA4K,EAAA9K,OAAAE,IAEA,OADAgB,EAAAwG,EAAA3G,KAAA+J,EAAA5K,GAAA4K,EAAA5K,GAAAA,KACAwG,EAAAjB,KAAAvE,QAGA,IAAAsE,KAAAsF,EAEA,OADA5J,EAAAwG,EAAA3G,KAAA+J,EAAAtF,GAAAsF,EAAAtF,GAAAA,KACAkB,EAAAjB,KAAAvE,GAEA,OAAA0I,EAAAlD,IAiEAqE,OAzCA,SAAAvB,EAAA9B,EAAAsD,GACA,OAAAnJ,MAAAY,UAAAsI,OAAAhK,KAAAyI,EAAA9B,EAAAsD,IA0CAC,KAvCA,SAAAzB,GACA,OAAAF,EAAAvI,KAAAyI,EAAA,SAAAT,EAAAC,GACA,OAAAQ,EAAApB,QAAAW,IAAAC,SAyCArJ,OAAA,6BACA,YACA,SAAAuL,GACA,OAAAA,IAEAvL,OAAA,wBAAA,6BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,wBACA,wBACA,SAAAuL,GACA,OAAAA,IAEAvL,OAAA,6BACA,sBACA,sBACA,wBACA,wBACA,SAAAU,EAAAmD,EAAA6F,EAAA6B,GACA,IAAAD,EAAAC,EAAAD,KACAvF,EAAA2D,EAAA3D,IACAa,EAAA8C,EAAA9C,MACA7E,EAAA8B,EAAA9B,QACAM,EAAAwB,EAAAxB,UAuDA,IAsLAmJ,EAtLA,WAsGA,SAAAC,IACA,OAAA3E,KAAA4E,WACA5E,KAAA4E,WAAA7E,MAAAC,KAAAN,WACAM,KAAA6E,KACA7E,KAAA6E,KAAA9E,MAAAC,KAAAN,gBADA,EAKA,OAAA,SAAAgF,EAAAI,EAAAC,EAAAC,EAAAC,GACAhK,EAAA8J,KACAE,EAAAD,EACAA,EAAAD,EACAA,EAAA,MAEAA,EAAAA,GAAAjJ,OAEAP,EAAAyJ,KAAA/J,EAAA+J,KACAC,EAAAD,EACAA,GAAA,GAGA,IAAAE,EAAAH,EAEAC,IACAA,EAlFA,SAAAG,EAAAH,GACA,IAAA7G,KAmCA,OAjCA6G,EAAA7K,QAAA,SAAA2F,GACA,GAAAb,EAAAa,EAAA,cACA,MAAA,IAAAsF,MAAA,iBAGA,IADA,IAAAC,KACAvF,GACAuF,EAAAC,QAAAxF,GACAA,EAAAA,EAAAyF,WAEApH,EAAAA,EAAA4F,OAAAsB,MAKAlH,GAFAA,EAAAqG,EAAArG,IAEA0E,OAAA,SAAA/C,GAEA,IADA,IAAA0F,EAAAL,EACAK,GAAA,CACA,GAAA1F,IAAA0F,EACA,OAAA,EAEA,GAAAvG,EAAAuG,EAAA,cAEA,IADA,IAAAC,EAAAD,EAAA,WACA/L,EAAA,EAAAA,EAAAgM,EAAAlM,OAAAE,IACA,GAAAgM,EAAAhM,KAAAqG,EACA,OAAA,EAIA0F,EAAAA,EAAAD,WAEA,OAAA,KAGAhM,OAAA,GACA4E,EA6CAuH,CAAAR,EAAAF,IAGAA,IACAE,EA3CA,SAAAC,EAAAH,GAEA,IADA,IAAAW,EAAAR,EACA1L,EAAA,EAAAA,EAAAuL,EAAAzL,OAAAE,IAAA,CACA,IAAAmM,EAAA,IAAAC,SACAD,EAAA5J,UAAAF,OAAAgK,OAAAH,EAAA3J,WACA4J,EAAAG,UAAAJ,EACAC,EAAAL,WAAA,KACAzF,EAAA8F,EAAA5J,UAAAgJ,EAAAvL,GAAAuC,WACA4J,EAAA5J,UAAAgK,UAAAhB,EAAAvL,GACAkM,EAAAC,EAGA,OAAAD,EA+BAM,CAAAf,EAAAF,IAGA,IAAAkB,EAAApB,EAAAoB,WAAA,GACAf,EAAA,IAAAU,SACA,mBAAAK,EAAA,6KADA,GA4CA,OA/BAf,EAAAnJ,UAAAF,OAAAgK,OAAAZ,EAAAlJ,WAGAmJ,EAAAnJ,UAAAb,YAAAgK,EACAA,EAAAI,WAAAR,EAGAI,EAAAY,UAAAb,EAGAC,EAAAR,eACAQ,EAAAR,aAAAA,GAGAK,IACAG,EAAAgB,WAAAnB,GAGAG,EAAAiB,UACAjB,EAAAiB,QAAA,SAAAtB,EAAAG,GACA,OAtKA,SAAAE,EAAAL,EAAAG,GAEA,IAAAoB,EAAAlB,EAAAnJ,UACAsK,EAAAnB,EAAAI,WAAAvJ,UACAuK,EAAAtB,GAAAA,EAAAsB,YACAtB,GAAAA,EAAAuB,UAEA,IAAA,IAAA9M,KAAAoL,EACA,GAAA,gBAAApL,EAAA,CAKA,IAAAgJ,EAAAoC,EAAApL,GACA,mBAAAoL,EAAApL,GACA2M,EAAA3M,GAAAgJ,EAAAiC,cAAA4B,GAAA,mBAAAD,EAAA5M,GAkBAgJ,EAjBA,SAAAhJ,EAAAyK,EAAAsC,GACA,OAAA,WACA,IAAAC,EAAA1G,KAAA2G,UAIA3G,KAAA2G,UAAAF,EAIA,IAAAG,EAAAzC,EAAApE,MAAAC,KAAAN,WAIA,OAFAM,KAAA2G,UAAAD,EAEAE,GAdA,CAgBAlN,EAAAgJ,EAAA4D,EAAA5M,IAEAqD,EAAAlB,cAAA6G,IAAA,OAAAA,GAAAA,EAAA,IACA5G,OAAA+K,eAAAR,EAAA3M,EAAAgJ,GAEA2D,EAAA3M,GAAAgJ,EAGA,OAAAyC,EA8HA2B,CAAA9G,KAAA8E,EAAAG,KAGAE,EAAA4B,UACA5B,EAAA4B,QAAA,SAAAjC,EAAAE,EAAAC,GACA,OAAAP,EAAAI,EAAA9E,KAAAgF,EAAAC,KAIAE,EAAAiB,QAAAtB,EAAAG,GAEAE,GAIA6B,GAEA,OAAApN,EAAAC,OAAA,cAAA6K,KAEAxL,OAAA,4BACA,WACA,SAAA+N,GACA,OAAAA,IAEA/N,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,uBACA,uBACA,SAAA+N,GACA,OAAAA,IAEA/N,OAAA,4BACA,WACA,SAAA+N,GACA,IA4JAC,EAAA,SAAAC,GAuBA,IAAAA,EACA,OAAAA,EAGA,IAAAC,IAAAD,EAAAE,KAKA,SAAAC,EAAAC,GAGAJ,EAAAI,GAAA,WACA,IAAA/H,EAAAE,UACAvB,EAAAqJ,SAAAC,KAAAN,EAAA,SAAAA,GAEA,OAAAD,EAAA9L,MAAAY,UAAAuL,GAAAxH,MAAAoH,EAAA3H,MAIA,GAAA,YAAA+H,GAAAH,EACA,OAAAjJ,GAaA,OA5BAiJ,IACAD,EAAArL,OAAA4L,SAAAP,IAmBAG,EAAA,WACAA,EAAA,UACAA,EAAA,OACA,MAAAH,EAAAQ,QACAR,EAAAQ,MAAAH,SAAAC,KAAAN,EAAA,SAAAA,GACA,OAAAA,EAAA5N,UAGA4N,GAGAS,EAAAX,GACAf,UAAA,aAEA2B,YA3NA,SAAAC,EAAA7C,GA6CA,cAAA6C,GACA,QACA,MAAA,IAAA1C,MAAA,+BAAA0C,GACA,IAAA,SAAA,IAAA,YACA,IAAAC,EAAAD,EACAA,EAAA,SAAA5M,GACA,IAAA,IAAA6D,KAAAgJ,EAAA,CACA,IAAAC,EAAAD,EAAAhJ,GACA,GAAAiJ,GAAAA,EAAAhK,MAEA,IAAAgK,EAAAhK,KAAA9C,EAAA6D,GAAA7D,GACA,OAAA,OAEA,GAAA8M,GAAA9M,EAAA6D,GACA,OAAA,EAGA,OAAA,GAEA,MACA,IAAA,SAEA,IAAAiB,KAAA8H,GACA,MAAA,IAAA1C,MAAA,sBAAA0C,EAAA,uBAEAA,EAAA9H,KAAA8H,GAEA,IAAA,YAkDA,SAAAG,EAAAlF,GAEA,IAAAoE,EAhDA,SAAAjD,EAAAjD,EAAAiH,GAyBA,IAAAzN,EAAAhB,EAAA,EAAAsH,EAAAmD,GAAAA,EAAA3K,QAAA,EAAAmK,KACA3C,GAAA,iBAAAmD,IAAAA,EAAAA,EAAA5K,MAAA,KACA,iBAAA2H,IAAAA,EAAAkH,MAAAlH,IAAAmH,QAAAnH,IACA,GAAAiH,EACA,KAAAzO,EAAAsH,IAAAtH,EACAgB,EAAAyJ,EAAAzK,GACAwH,EAAA3G,KAAA4N,EAAAzN,EAAAhB,EAAAyK,IACAR,EAAA1E,KAAAvE,QAIA,KAAAhB,EAAAsH,IAAAtH,EACAgB,EAAAyJ,EAAAzK,GACAwH,EAAAxG,EAAAhB,EAAAyK,IACAR,EAAA1E,KAAAvE,GAIA,OAAAiJ,EAKAb,CAAAE,EAAA+E,GAEAO,EAAApD,GAAAA,EAAAqD,KAmBA,GAlBAD,GACAlB,EAAAmB,KAAA,mBAAAD,EAAAA,EAAA,SAAAnI,EAAAC,GACA,IAAA,IAAAmI,EAAA7O,EAAA,EAAA6O,EAAAD,EAAA5O,GAAAA,IAAA,CACA,IAAA8O,EAAArI,EAAAoI,EAAAE,WACAC,EAAAtI,EAAAmI,EAAAE,WAIA,GAFAD,EAAA,MAAAA,EAAAA,EAAA1K,UAAA0K,EACAE,EAAA,MAAAA,EAAAA,EAAA5K,UAAA4K,EACAF,GAAAE,EAGA,QAAAH,EAAAI,aAAA,MAAAH,GAAAA,EAAAE,IAAA,EAAA,EAGA,OAAA,IAIAxD,IAAAA,EAAA0D,OAAA1D,EAAA2D,OAAA,CACA,IAAAjB,EAAAR,EAAA5N,QACA4N,EAAAA,EAAAlJ,MAAAgH,EAAA0D,OAAA,GAAA1D,EAAA0D,OAAA,IAAA1D,EAAA2D,OAAAC,EAAAA,KACAlB,MAAAA,EAEA,OAAAR,EAGA,OADAc,EAAAa,QAAAhB,EACAG,GAoEAc,WAAA,KAGAC,IAAA,SAAAC,GAOA,OAAAjJ,KAAAkJ,KAAAlJ,KAAAc,MAAAmI,KAGAE,YAAA,SAAAjO,GACA,OAAAA,EAAA8E,KAAA+I,aAGAK,IAAA,SAAAlO,EAAA+J,GACA,IAAAiE,EAAAlJ,KAAAkJ,KACApI,EAAAd,KAAAc,MACAiI,EAAA/I,KAAA+I,WACAE,EAAA/N,EAAA6N,GAAA9D,GAAA,OAAAA,EAAAA,EAAAgE,GAAAF,KAAA7N,EAAAA,EAAA6N,GAAAM,KAAAC,SACA,GAAAL,KAAAnI,EAAA,CAEA,GAAAmE,IAAA,IAAAA,EAAAsE,UACA,MAAA,IAAAnE,MAAA,yBAGA8D,EAAApI,EAAAmI,IAAA/N,OAGA4F,EAAAmI,GAAAC,EAAAlK,KAAA9D,GAAA,EAEA,OAAA+N,GAGAO,IAAA,SAAAtO,EAAA+J,GAGA,OAFAA,EAAAA,OAAAsE,WAAA,EAEAvJ,KAAAoJ,IAAAlO,EAAA+J,IAGAwE,OAAA,SAAAR,GAOA,IAAAnI,EAAAd,KAAAc,MACAoI,EAAAlJ,KAAAkJ,KACA,GAAAD,KAAAnI,EAIA,OAHAoI,EAAA1G,OAAA1B,EAAAmI,GAAA,GAEAjJ,KAAA0J,QAAAR,IACA,GAGApB,MAAA,SAAAA,EAAA7C,GA8BA,OAAAiC,EAAAlH,KAAA6H,YAAAC,EAAA7C,EAAAjF,CAAAA,KAAAkJ,QAGAQ,QAAA,SAAAR,GAKAA,EAAA7G,OAEArC,KAAA+I,WAAAG,EAAAS,YAAA3J,KAAA+I,WACAG,EAAAlJ,KAAAkJ,KAAAA,EAAA7G,OAEArC,KAAAkJ,KAAAA,EAEAlJ,KAAAc,SACA,IAAA,IAAArH,EAAA,EAAAsH,EAAAmI,EAAA3P,OAAAE,EAAAsH,EAAAtH,IACAuG,KAAAc,MAAAoI,EAAAzP,GAAAuG,KAAA+I,aAAAtP,GAIAoL,KAAA,SAAAI,GACA,IAAA,IAAAxL,KAAAwL,EACAjF,KAAAvG,GAAAwL,EAAAxL,GAEAuG,KAAA0J,QAAA1J,KAAAkJ,aAKA,OAAAtB,IAEA1O,OAAA,+BACA,oBACA,SAAAU,GAEA,IAAAkD,EAAA8M,EAAA,EAqEA,SAAAC,EAAA3P,GACA,OAAA,SAAAiF,EAAA2K,EAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAA/K,EAAA2K,GACAI,GAAAA,EAAA/K,QAAAA,IAEAA,EAAA2K,GAAAG,EAAA,WAKA,IAJA,IAAAE,EAAAP,EAEApK,EAAAE,UACA0K,EAAAH,EAAAG,OACAA,GACA5K,EAAA4K,EAAAL,OAAAhK,MAAAC,KAAAR,IAAAA,EACA4K,EAAAA,EAAAC,KAGA,GAAAJ,EAAAK,OACA,IAAAnD,EAAA8C,EAAAK,OAAAP,OAAA/J,KAAAR,GAIA,IADA,IAAA+K,EAAAN,EAAAM,MACAA,GAAAA,EAAAtB,GAAAkB,GAAA,CACA,GAAAI,EAAAP,iBAAA,CACA,IAAAQ,EAAAD,EAAAR,OAAAhK,MAAAC,KAAAR,GAEA2H,EAAAqD,IAAA1N,EAAAqK,EAAAqD,OAEArD,EAAAoD,EAAAR,OAAAzP,KAAA0F,KAAAmH,EAAA3H,GAEA+K,EAAAA,EAAAF,KAEA,OAAAlD,GAEA+C,IACAD,EAAAK,QAAAP,OAAA,SAAA5K,EAAAK,GACA,OAAA0K,EAAAnK,MAAAZ,EAAAK,MAGAyK,EAAA9K,OAAAA,GAEA,IAAAgI,EA3GA,SAAA8C,EAAA/P,EAAA6P,EAAAC,GACA,IAEAS,EAFAC,EAAAT,EAAA/P,GACAoQ,EAAA,UAAApQ,EAEA,GAAAoQ,EAAA,CACA,IAAAK,EAAAZ,EAAA,WACA,OAAAW,EAAAX,OAAA/J,KAAAN,aAEA+K,GACAhB,OAAA,WACAkB,IACAA,EAAAV,EAAAF,EAAA,OAGAA,OAAA,SAAA5K,EAAAK,GACA,OAAAmL,EACAA,EAAA5K,MAAAZ,EAAAK,GACAkL,EAAAX,OAAA5K,EAAAK,UAKAiL,GACAhB,OAAA,WACA,GAAAgB,EAAAV,OAAA,CACA,IAAAW,EAAAD,EAAAC,SACAL,EAAAI,EAAAJ,KACAA,GAAAK,GAGAA,EACAA,EAAAL,KAAAA,EAEAJ,EAAA/P,GAAAmQ,EAEAA,IACAA,EAAAK,SAAAA,WARAT,EAAA/P,GAaA+P,EAAAF,EAAAU,EAAAV,OAAA,OAGAd,GAAAW,IACAG,OAAAA,EACAC,iBAAAA,GAGA,GAAAU,IAAAJ,EACA,GAAA,SAAApQ,EAAA,CAGA,KAAAwQ,EAAAL,OAAAK,EAAAA,EAAAL,QACAK,EAAAL,KAAAI,EACAA,EAAAC,SAAAA,MACA,UAAAxQ,IAEA+P,EAAA/P,GAAAuQ,EACAA,EAAAJ,KAAAK,EACAA,EAAAA,SAAAD,QAIAR,EAAA/P,GAAAuQ,EAEA,OAAAA,EAyCAG,CAAAX,GAAAC,EAAAhQ,EAAA6P,EAAAC,GAEA,OADAD,EAAA,KACA5C,GAIA,OAAAvN,EAAAC,OAAA,gBACA0Q,MAAAV,EAAA,SAEAS,OAAAT,EAAA,UAEAO,OAAAP,EAAA,cAGA3Q,OAAA,6BACA,YACA,SAAA2Q,GACA,OAAAA,IAEA3Q,OAAA,wBAAA,6BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,wBACA,wBACA,SAAA2Q,GACA,OAAAA,IAEA3Q,OAAA,6BACA,sBACA,sBACA,yBACA,SAAAU,EAAAmD,EAAA6F,GACA,IAAA9C,EAAA8C,EAAA9C,MACA7B,EAAA7C,MAAAY,UAAAiC,MACAzD,EAAAuC,EAAAvC,WACAM,EAAAiC,EAAAjC,SA8CA,IAAA4M,EAAA,WAEA,SAAAmD,KACA,OAAA,SAAA/Q,EAAAgL,GACA+F,EAAA7O,UAAAlC,EACA,IAAA4M,EAAA,IAAAmE,EAKA,OAJAA,EAAA7O,UAAA,KACA8I,GACAhF,EAAA4G,EAAA5B,GAEA4B,GAVA,GAcAoE,GACAC,SAAA,kBACAC,YAAA,mBACAC,OAAA,oBA6DA,OAAArR,EAAAC,OAAA,eACAqR,SA5FA,SAAA/G,EAAAgH,GACA,IAAAC,EACA,OAAA,WACA,IAAAC,EAAArL,KAAAR,EAAAE,UAKA0L,GAAAE,aAAAF,GACAA,EAAAG,WALA,WACAH,EAAA,KACAjH,EAAApE,MAAAsL,EAAA7L,IAGA2L,KAqFAzD,SAAAA,EAEA8D,MA/HA,SAAArH,GACAsH,sBACAA,sBAAAtH,GAEAuH,cAAAvH,GAEA,OAAAnE,MA2HA2L,KAxHA,aA0HAC,MAvHA,SAAAA,EAAAzH,EAAAkH,GACA,IAAA7L,EAAA,KAAAE,WAAAzB,EAAA3D,KAAAoF,UAAA,GACA,GAAAlF,EAAA2J,GAAA,CAIA,OAHA,WACA,OAAAA,EAAApE,MAAAsL,EAAA7L,EAAAA,EAAAuE,OAAA9F,EAAA3D,KAAAoF,YAAAA,YAGA,GAAA5E,EAAAuQ,GACA,OAAA7L,GACAA,EAAA8F,QAAAnB,EAAAkH,GAAAlH,GACAyH,EAAA7L,MAAA,KAAAP,IAEAoM,EAAAzH,EAAAkH,GAAAlH,GAGA,MAAA,IAAA0H,UAAA,sBA0GAC,WAAA,WACA,OAAA,GAGAC,YAAA,WACA,OAAA,GAGAjB,iBAAAA,EACAkB,SA7EA,SAAAC,EAAAC,EAAAC,IACAD,GAAAC,IAAAD,EAAAC,GACAD,EAAAtJ,EAAAlE,YAAAwN,EAAApB,GAGA,IAiCAsB,EAjCAC,EAAAC,SACAJ,EAAAjB,QAAAsB,SAAAnN,QACA8M,EAAAlB,aAAAuB,SAAAnN,QACA8M,EAAAnB,UAAAwB,SAAAnN,QACAoN,KAAA,KAAA,KAAA,KAGA1L,EAAA,EACA1B,EAAA,SACA6M,EAAAnO,QAAAuO,EAAA,SAAAI,EAAAxB,EAAAD,EAAAD,EAAAlH,GAaA,OAZAzE,GAAA6M,EAAAhO,MAAA6C,EAAA+C,GAAA/F,QAAA4O,aAAAC,YACA7L,EAAA+C,EAAA4I,EAAAlT,OAEA0R,EACA7L,GAAA,cAAA6L,EAAA,iCACAD,EACA5L,GAAA,cAAA4L,EAAA,uBACAD,IACA3L,GAAA,OAAA2L,EAAA,YAIA0B,IAEArN,GAAA,OAGA8M,EAAAU,WAAAxN,EAAA,mBAAAA,EAAA,OAEAA,EAAA,4FAEAA,EAAA,gBAGA,IACAgN,EAAA,IAAAvG,SAAAqG,EAAAU,UAAA,MAAA,IAAAxN,GACA,MAAAyN,GAEA,MADAA,EAAAzN,OAAAA,EACAyN,EAGA,IAAAb,EAAA,SAAA9C,GACA,OAAAkD,EAAA9R,KAAA0F,KAAAkJ,EAAA4D,IAIAC,EAAAb,EAAAU,UAAA,MAGA,OAFAZ,EAAA5M,OAAA,YAAA2N,EAAA,OAAA3N,EAAA,IAEA4M,OA0BA9S,OAAA,4BACA,WACA,SAAA8T,GACA,OAAAA,IAEA9T,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,gCACA,uBACA,sBACA,yBACA,SAAAuL,EAAAuI,EAAApK,GACA,aAEA,IAAAqK,EAAArO,OAAAA,SAAA,gBACAsO,EAAAtO,OAAAA,SAAA,eAEAX,EAAA7C,MAAAY,UAAAiC,MACA2N,EAAAoB,EAAApB,MACAhI,EAAAa,EAAAb,UACAzF,EAAAyE,EAAAzE,OACA2B,EAAA8C,EAAA9C,MAEAA,EAAAqN,QAAAnR,WACAoR,OAAA,SAAAC,GAIA,OADArN,KAAAqH,KAAAgG,EAAAA,GACArN,MAEAsN,KAAA,WACA,IAAA,IAAA7T,EAAA,EAAAA,EAAAiG,UAAAnG,OAAAE,IACAuG,KAAAqH,KAAA3H,UAAAjG,IAEA,OAAAuG,MAEAuN,KAAA,SAAAF,GAIA,OADArN,KAAAwN,MAAAH,GACArN,QAKA,IAAAwH,EAAA,WACA,IAAAiG,EAAAzN,KACA0N,EAAA1N,KAAA2N,QAAA,IAAAR,QAAA,SAAAS,EAAAC,GACAJ,EAAAK,SAAAF,EACAH,EAAAM,QAAAF,IAGAG,EAAAN,EAAAD,GAEAzN,KAAAiN,MACAjN,KAAAkN,OAQA,SAAAc,EAAAN,EAAAO,GACA,IAAAC,GACAC,MAAA,WACA,OAAAF,EAAAG,aACA,WAEAH,EAAAI,aACA,WAEA,WAEAhH,KAAA,SAAAiH,EAAAC,EAAAC,GAIA,OAHAA,GACAxO,KAAAyO,SAAAD,GAEAR,EAAAb,QAAAnR,UAAAqL,KAAA/M,KAAA0F,KACAsO,GAAA,SAAA9O,GACA,OAAAA,QAAA1C,IAAA0C,EAAAkP,QACAJ,EAAAvO,MAAAP,EAAAkP,QAAAlP,GAEA8O,EAAA9O,IAGA+O,GAAA,SAAA/O,GACA,OAAAA,QAAA1C,IAAA0C,EAAAkP,QACAH,EAAAxO,MAAAP,EAAAkP,QAAAlP,GAEA+O,EAAA/O,OAIAiP,SAAA,SAAApB,GAKA,OAJAY,EAAAf,GAAA/S,QAAA,SAAAM,GACA4S,EAAA5S,KAEAwT,EAAAhB,GAAAjO,KAAAqO,GACArN,OAMA,OADAkO,EAAAS,KAAAT,EAAA7G,KACAvH,EAAA4N,EAAAQ,GA8HA,OA1HA1G,EAAAxL,UAAA4R,QAAA,SAAAnT,GACA,IAAA+E,EAAAvB,EAAA3D,KAAAoF,WACA,OAAAM,KAAA4O,YAAA,KAAApP,IAGAgI,EAAAxL,UAAA4S,YAAA,SAAAvD,EAAA7L,GAKA,OAJAA,EAAAA,EAAAoE,EAAApE,OACAkP,QAAArD,EACArL,KAAA8N,SAAAtO,GACAQ,KAAA6O,WAAA,EACA7O,MAGAwH,EAAAxL,UAAA8S,OAAA,SAAArU,GACA,IAGA,OAFAuF,KAAAkN,GAAAlO,KAAAvE,GAEAuF,KAAAiN,GAAA9S,QAAA,SAAA4U,GACA,OAAAA,EAAAtU,KAEA,MAAAuU,GACAhP,KAAA6N,OAAAmB,GAEA,OAAAhP,MAGAwH,EAAAxL,UAAA6R,OAAA,SAAAoB,GACA,IAAAzP,EAAAvB,EAAA3D,KAAAoF,WACA,OAAAM,KAAAkP,WAAA,KAAA1P,IAGAgI,EAAAxL,UAAAkT,WAAA,SAAA7D,EAAA7L,GAKA,OAJAA,EAAAA,EAAAoE,EAAApE,OACAkP,QAAArD,EACArL,KAAA+N,QAAAvO,GACAQ,KAAAmP,WAAA,EACAnP,MAGAwH,EAAAxL,UAAAoS,WAAA,WACA,QAAApO,KAAA6O,WAGArH,EAAAxL,UAAAqS,WAAA,WACA,QAAArO,KAAAmP,WAGA3H,EAAAxL,UAAAqL,KAAA,SAAApG,EAAAmO,EAAAC,GACA,IAAA3B,EAAAvP,EAAA6B,KAAA,WACA,OAAA0N,EAAArG,KAAApG,EAAAmO,EAAAC,IAGA7H,EAAAxL,UAAAyS,SAAA,SAAAY,GACA,IAAA3B,EAAAvP,EAAA6B,KAAA,WACA,OAAA0N,EAAAe,SAAAY,IAGA7H,EAAAxL,UAAAwR,MAAA,SAAA4B,GACA,IAAA1B,EAAAvP,EAAA6B,KAAA,WACA,OAAA0N,EAAAF,MAAA4B,IAIA5H,EAAAxL,UAAAsR,KAAA,WACA,IAAAI,EAAAvP,EAAA6B,KAAA,WACA,OAAA0N,EAAAJ,KAAAvN,MAAA2N,EAAAhO,YAGA8H,EAAAxL,UAAAuR,KAAA,SAAA6B,GACA,IAAA1B,EAAAvP,EAAA6B,KAAA,WACA,OAAA0N,EAAAH,KAAA6B,IAIA5H,EAAA8H,IAAA,SAAAvM,GAEA,IAAAkL,EAAA,IAAAzG,EAEA,OADA2F,QAAAmC,IAAAvM,GAAAsE,KAAA4G,EAAAL,QAAA2B,KAAAtB,GAAAA,EAAAJ,OAAA0B,KAAAtB,IACA9P,EAAA8P,EAAA,YAGAzG,EAAAlE,MAAA,SAAAP,GACA,OAAAiL,EAAAb,QAAAqC,KAAAzM,KAIAyE,EAAAC,KAAA,SAAAgI,EAAAxO,EAAAmO,EAAAC,GACA,IAAAK,EAAAD,GAAA,mBAAAA,EAAApI,KACAsI,EAAAD,GAAAD,aAAAtC,QAEA,IAAAuC,EACA,OAAAhQ,UAAAnG,OAAA,EACA0H,EAAAA,EAAAwO,GAAAA,GAEA,IAAAjI,GAAAoG,QAAA6B,GAEA,IAAAE,EAAA,CACA,IAAAC,EAAA,IAAApI,EAAAiI,EAAAI,QACAJ,EAAApI,KAAAuE,EAAAgE,EAAAhC,QAAAgC,GAAAhE,EAAAgE,EAAA/B,OAAA+B,GAAAA,EAAAd,QACAW,EAAAG,EAAAjC,QAGA,OAAA1M,GAAAmO,GAAAC,EACAI,EAAApI,KAAApG,EAAAmO,EAAAC,GAEAI,GAGAjI,EAAAqG,OAAA,SAAAiC,GACA,IAAA7B,EAAA,IAAAzG,EAEA,OADAyG,EAAAJ,OAAAiC,GACA7B,EAAAN,SASAnG,EAAAuI,UANAvI,EAAAoG,QAAA,SAAA1E,GACA,IAAA+E,EAAA,IAAAzG,EAEA,OADAyG,EAAAL,QAAA7N,MAAAkO,EAAAvO,WACAuO,EAAAN,SAKAnG,IAEAtO,OAAA,6BACA,mBACA,wBACA,cACA,SAAAU,EAAAgJ,EAAA4E,GACA,IAAAxG,EAAA4B,EAAA5B,KAEAgP,GACAxI,SAAAA,EAEAyI,SAAA,SAAA/L,EAAA1E,EAAA0Q,GACA,IAAAC,KAQA,OAPAD,EAAAA,GAAA,KACA1Q,EAAAA,MAEAwB,EAAAkD,EAAA,SAAAzK,EAAA+J,GACA2M,EAAAnR,KAAAwE,EAAAzD,MAAAmQ,EAAA1Q,MAGAgI,EAAA8H,IAAAa,IAGAC,OAAA,SAAAlM,EAAA1E,EAAA0Q,GACA,IAAAC,KACAlC,EAAA,IAAAzG,EACAkG,EAAAO,EAAAN,QAaA,OAXAuC,EAAAA,GAAA,KACA1Q,EAAAA,MAEAyO,EAAAL,UACA5M,EAAAkD,EAAA,SAAAzK,EAAA+J,GACAkK,EAAAA,EAAArG,KAAA,WACA,OAAA7D,EAAAzD,MAAAmQ,EAAA1Q,KAEA2Q,EAAAnR,KAAA0O,KAGAlG,EAAA8H,IAAAa,IAGAE,SAAA,SAAAnM,EAAA1E,EAAA0Q,GACA,IAAAjC,EAAA,IAAAzG,EACAkG,EAAAO,EAAAN,QAUA,OARAuC,EAAAA,GAAA,KACA1Q,EAAAA,MAEAyO,EAAAW,YAAAsB,EAAA1Q,GAEAwB,EAAAkD,EAAA,SAAAzK,EAAA+J,GACAkK,EAAAA,EAAArG,KAAA7D,KAEAkK,IAIA,OAAA9T,EAAAC,OAAA,cAAAmW,KAEA9W,OAAA,4BACA,WACA,SAAA8W,GACA,OAAAA,IAEA9W,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,uBACA,uBACA,SAAA8W,GACA,OAAAA,IAEA9W,OAAA,qCACA,oBACA,SAAAU,GA2DA,OAAAA,EAAAC,OAAA,mBACAyW,kBA3DA,SAAAC,GAEA,IAAAC,EAAAD,EAAAjX,MAAA,KACAmX,EAAAjT,SAAAgT,EAAA,IAEA,GAAAE,MAAAD,GACA,OAAA,EAKA,OAAAD,EAAA,GAAAG,OAAA7S,QAAA,MAAA,KACA,IAAA,UACA,IAAA,SACA,IAAA,MACA,IAAA,KACA,IAAA,IACA,OAAA,IAAA2S,EACA,IAAA,QACA,IAAA,OACA,IAAA,KACA,IAAA,KACA,IAAA,IACA,IAAA,IACA,OAfA,KAeAA,EACA,IAAA,UACA,IAAA,SACA,IAAA,MACA,IAAA,KACA,IAAA,IACA,OAAA,IAAAA,EACA,IAAA,OACA,IAAA,MACA,IAAA,KACA,IAAA,KACA,IAAA,IACA,OAAA,MAAAA,EACA,IAAA,SACA,IAAA,QACA,IAAA,KACA,IAAA,IACA,OAAA,QAAAA,EACA,IAAA,QACA,IAAA,OACA,IAAA,IACA,IAAA,IACA,OAAA,OAAAA,EACA,IAAA,QACA,IAAA,OACA,IAAA,OACA,IAAA,KACA,IAAA,IACA,OAAA,QAAAA,EACA,QACA,OAAA,QAQAvX,OAAA,gCACA,eACA,SAAA0X,GACA,OAAAA,IAEA1X,OAAA,2BAAA,gCAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,2BACA,2BACA,SAAA0X,GACA,OAAAA,IAEA1X,OAAA,0BACA,gCACA,SAAAsO,GACA,OAAAA,IAEAtO,OAAA,iCACA,sBACA,sBACA,wBACA,uBACA,uBACA,SAAAU,EAAAmD,EAAA6F,EAAA6B,EAAAwC,GACA,IAAAhJ,EAAA7C,MAAAY,UAAAiC,MACAoF,EAAAoB,EAAApB,QACA9H,EAAAwB,EAAAxB,UACAM,EAAAkB,EAAAlB,cACArB,EAAAuC,EAAAvC,WACAM,EAAAiC,EAAAjC,SACAP,EAAAwC,EAAAxC,cACAuF,EAAA8C,EAAA9C,MACA6C,EAAAC,EAAAD,UAEA,SAAAkO,EAAAC,GACA,IAAAC,GAAA,GAAAD,GAAAxX,MAAA,KACA,OACAI,KAAAqX,EAAA,GACAvX,GAAAuX,EAAA9S,MAAA,GAAAuO,KAAA,MAIA,IAAAwE,EAAA/J,GACAgK,GAAA,SAAAC,EAAAC,EAAAjI,EAAAjI,EAAAiP,EAAAkB,GACA,IAAA3D,EAAAzN,KACAqR,EAAArR,KAAAqR,OAAArR,KAAAqR,SAEA,OAAAxV,EAAAqV,IACAhB,EAAAjP,EACAD,KAAAkQ,EAAA,SAAAhX,EAAAiK,GACAsJ,EAAAwD,GAAA/W,EAAAiX,EAAAjI,EAAA/E,EAAA+L,EAAAkB,KAEApR,OAGAlF,EAAAqW,IAAA3W,EAAAyG,KACAiP,EAAAjP,EACAA,EAAAiI,EACAA,EAAAiI,EACAA,OAAArU,GAGAtC,EAAA0O,KACAgH,EAAAjP,EACAA,EAAAiI,EACAA,EAAA,MAGApO,EAAAoW,KACAA,EAAAA,EAAA5X,MAAA,OAGA4X,EAAA/W,QAAA,SAAA2W,GACA,IAAAQ,EAAAT,EAAAC,GACApX,EAAA4X,EAAA5X,KACAF,EAAA8X,EAAA9X,IAEA6X,EAAA3X,KAAA2X,EAAA3X,QAAAsF,MACAmF,GAAAlD,EACAkQ,SAAAA,EACAjI,KAAAA,EACAgH,IAAAA,EACA1W,GAAAA,EACA4X,IAAAA,MAIApR,OAGAoR,IAAA,SAAAF,EAAAC,EAAAjI,EAAAjI,EAAAiP,GACA,OAAAlQ,KAAAiR,GAAAC,EAAAC,EAAAjI,EAAAjI,EAAAiP,EAAA,IAGAqB,KAAA,SAAA1E,GACA,IAAA7M,KAAAqR,KACA,OAAArR,KAGA,IAAAyN,EAAAzN,KAEAlF,EAAA+R,KACAA,EAAA,IAAA2E,YAAA3E,IAGA/Q,OAAA+K,eAAAgG,EAAA,UACApS,MAAAuF,OAGA,IAAAR,EAAAvB,EAAA3D,KAAAoF,UAAA,GA2CA,OAzCAF,EADAjE,EAAAiE,IACAqN,GAAA9I,OAAAvE,IAEAqN,IAEAA,EAAA3S,MAAA2S,EAAAnT,KAAA,OAAAS,QAAA,SAAAsX,GACA,IAAAH,EAAAT,EAAAY,GACA/X,EAAA4X,EAAA5X,KACAF,EAAA8X,EAAA9X,GAEAkY,EAAAjE,EAAA4D,KAAA3X,GACA,GAAAgY,EAAA,CAOA,IAHA,IAAAC,EAAAD,EAAAnY,OACAqY,GAAA,EAEAnY,EAAA,EAAAA,EAAAkY,EAAAlY,IAAA,CACA,IAAAsV,EAAA2C,EAAAjY,KACAD,GAAAuV,EAAAvV,IAAAuV,EAAAvV,GAAAgD,WAAAhD,MAGAqT,EAAA3D,KACA6F,EAAA7F,OACA2D,EAAA3D,KAAApJ,KAAAiP,EAAA7F,KAAA2D,EAAA3D,OAGA2D,EAAA3D,KAAA6F,EAAA7F,MAAA,KAEA6F,EAAA5K,GAAApE,MAAAgP,EAAAmB,IAAA1Q,GACAuP,EAAAqC,MACAM,EAAAjY,GAAA,KACAmY,GAAA,IAIAA,IACAnE,EAAA4D,KAAAI,GAAApO,EAAAqO,OAIA1R,MAGA6R,SAAA,SAAAf,GACA,IAAAgB,GAAA9R,KAAAqR,OAAArR,KAAA+R,aAAAjB,OACA,OAAAgB,EAAAvY,OAAA,GAGAyY,SAAA,SAAAlY,EAAAgX,EAAA7P,EAAAmQ,GACA,IAAAtX,EACA,OAAAkG,KAIAlF,EAAAmG,KACAA,EAAAjB,KAAAiB,IAGAmQ,EACAtX,EAAAsX,IAAAN,EAAA7P,EAAAjB,MAEAlG,EAAAmX,GAAAH,EAAA7P,EAAAjB,MAOA,IAHA,IACAiS,EADAC,EAAAlS,KAAAmS,eAAAnS,KAAAmS,iBAGA1Y,EAAA,EAAAA,EAAAyY,EAAA3Y,OAAAE,IACA,GAAAyY,EAAAzY,GAAAK,KAAAA,EAAA,CACAmY,EAAAC,EAAAzY,GACA,MAGAwY,GACAC,EAAAlT,KACAiT,GACAnY,IAAAA,EACAoX,YAIA,IAAAkB,EAAAH,EAAAf,OACAmB,EAAAD,EAAAtB,GAAAsB,EAAAtB,OAKA,OAJA,GAAAuB,EAAA1Q,QAAAV,IACAoR,EAAArT,KAAAiC,GAGAjB,MAGAsS,aAAA,SAAAxY,EAAAgX,EAAA7P,GACA,OAAAjB,KAAAgS,SAAAlY,EAAAgX,EAAA7P,EAAA,IAGAsR,IAAA,SAAArB,EAAAjQ,GACA,IAAAoQ,EAAArR,KAAAqR,OAAArR,KAAAqR,SAuCA,OAtCAvW,EAAAoW,KACAA,EAAAA,EAAA5X,MAAA,OAGA4X,EAAA/W,QAAA,SAAA2W,GACA,IAAAQ,EAAAT,EAAAC,GACApX,EAAA4X,EAAA5X,KACAF,EAAA8X,EAAA9X,GAEAgZ,EAAAnB,EAAA3X,GAEA,GAAA8Y,EAAA,CACA,IAAAC,KAEA,GAAAxR,GAAAzH,EACA,IAAA,IAAAC,EAAA,EAAAkY,EAAAa,EAAAjZ,OAAAE,EAAAkY,EAAAlY,IAEAwH,GAAAuR,EAAA/Y,GAAA0K,KAAAlD,GAAAuR,EAAA/Y,GAAA0K,GAAA2I,IAAA7L,EACAwR,EAAAzT,KAAAwT,EAAA/Y,KAIAD,GAAAgZ,EAAA/Y,GAAAD,IAAA,GAAAgZ,EAAA/Y,GAAAD,GAAAmI,QAAAnI,IACAiZ,EAAAzT,KAAAwT,EAAA/Y,IAMAgZ,EAAAlZ,OACA8X,EAAA3X,GAAA+Y,SAEApB,EAAA3X,MAMAsG,MAEA0S,WAAA,SAAA5Y,EAAAgX,EAAA7P,GACA,IAAAiR,EAAAlS,KAAAmS,aACA,IAAAD,EACA,OAAAlS,KAEA,IAAA,IAAAvG,EAAA,EAAAA,EAAAyY,EAAA3Y,OAAAE,IAAA,CACA,IAAAwY,EAAAC,EAAAzY,GAEA,IAAAK,GAAAA,GAAAmY,EAAAnY,IAAA,CAIA,IAAAsY,EAAAH,EAAAf,OACA,IAAA,IAAAO,KAAAW,EACA,IAAAtB,GAAAA,GAAAW,EAAA,CAMA,IAFA,IAAAY,EAAAD,EAAAX,GAEArO,EAAA,EAAAA,EAAAiP,EAAA9Y,OAAA6J,IACAnC,GAAAA,GAAAoR,EAAA5Y,KACAwY,EAAAnY,IAAAyY,IAAAd,EAAAY,EAAA5Y,GAAAuG,MACAqS,EAAA5Y,GAAA,MAIA4Y,EAAAD,EAAAX,GAAApO,EAAAgP,GAEA9X,EAAA8X,KACAD,EAAAX,GAAA,MAKAlX,EAAA6X,KACAF,EAAAzY,GAAA,OASA,OALAyY,EAAAlS,KAAAmS,aAAA9O,EAAA6O,GACA3X,EAAA2X,KACAlS,KAAAmS,aAAA,MAGAnS,MAGA2S,QAAA,WACA,OAAA3S,KAAAuR,KAAAxR,MAAAC,KAAAN,cASA,OALAsR,EAAA4B,YAAA,SAAA1Y,EAAA4K,GACA,IAAA+H,EAAA,IAAA2E,YAAAtX,EAAA4K,GACA,OAAAnC,EAAAkK,EAAA/H,IAGAlL,EAAAC,OAAA,gBAAAmX,KAGA9X,OAAA,iCACA,sBACA,aACA,SAAAU,EAAAoX,GACA,OAAApX,EAAAC,OAAA,gBAAAmX,KAEA9X,OAAA,8BACA,YACA,aACA,SAAA8X,GACA,OAAAA,IAEA9X,OAAA,yBAAA,8BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,yBACA,yBACA,SAAA2Z,GACA,OAAAA,IAEA3Z,OAAA,yBACA,yBACA,SAAA2Z,GACA,OAAAA,IAEA3Z,OAAA,uBACA,uBACA,SAAA8T,GACA,OAAAA,IAEA9T,OAAA,+BACA,oBACA,SAAAU,GAEA,IAAAkZ,GACAC,WAAA,EACAC,OAAA,KACAC,OAAAjT,KACAkT,QAAA,KACAC,KAAA,MAGA,iBAAAC,SAAAA,QAAAC,UAAAD,QAAAC,SAAAF,MAAAC,QAAAC,SAAAC,KACAR,EAAAE,QAAA,EACAF,EAAAC,WAAA,GAGAD,EAAAG,OAAA,WACA,MAAA,oBAAAA,QAAA,mBAAAA,OAIAA,OACA,oBAAAjY,OAEAA,OAEA,oBAAAyS,KAEAA,KAEAzN,KAdA,GAiBA,IAAAuT,EAAA,KAWA,GATAzX,OAAA+K,eAAAiM,EAAA,WAAA,WACA,IAAAS,EAAA,CACA,IAAAC,EAAA,oBAAAxY,OAAAyY,QAAA,gBAAAzY,OACAuY,EAAAC,EAAAE,SAGA,OAAAH,IAGAT,EAAAC,UAAA,CAiBA,IAAAY,EAhBA,SAAAC,GACAA,EAAAA,EAAAxZ,cAEA,IAAAqS,EAAA,wBAAAoH,KAAAD,IACA,wBAAAC,KAAAD,IACA,qCAAAC,KAAAD,IACA,kBAAAC,KAAAD,IACAA,EAAAjS,QAAA,cAAA,GAAA,gCAAAkS,KAAAD,OAGA,OACAV,QAAAzG,EAAA,IAAA,GACAqH,QAAArH,EAAA,IAAA,KAIAsH,CAAAC,UAAAC,WAEAf,EAAAJ,EAAAI,WAEAS,EAAAT,UACAA,EAAAS,EAAAT,UAAA,EACAA,EAAAY,QAAAH,EAAAG,SAIAZ,EAAAgB,OACAhB,EAAAiB,QAAA,EACAjB,EAAAiB,SACAjB,EAAAkB,QAAA,GAIA,OAAAxa,EAAAC,OAAA,eAAAiZ,KAEA5Z,OAAA,6BACA,YACA,SAAA4Z,GACA,OAAAA,IAEA5Z,OAAA,wBAAA,6BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,wBACA,wBACA,SAAA4Z,GACA,OAAAA,IAEA5Z,OAAA,yBACA,yBACA,SAAAmF,GACA,OAAAA,IAEAnF,OAAA,yBACA,yBACA,SAAA0J,GACA,OAAAA,IAEA1J,OAAA,iCACA,oBACA,SAAAU,GAEA,IAAAya,EAAAvY,OAAAwY,QACAC,IAAA,QACAC,IAAA,OACAC,IAAA,OACAC,IAAA,SACAC,IAAA,SACAC,IAAA,SACAC,IAAA,WAEA,SAAAC,EAAAC,GACA,OAAAV,EAAAU,GAEA,IAAAC,EAAA,aA2GA,IAAAC,EAAA,EAWA,SAAAjJ,EAAA/C,EAAAC,GA0BA,IAEAxP,EAAAwb,EACAC,EAAAC,EAgBA5R,EACAY,EACAiR,EArBAC,EAAA5V,UAAA6V,OAwBA,OAvBAD,EAAAnN,MAAAc,KAAAqM,EAAAnN,MAAAc,IACAvP,EAAAuP,EAAAiM,EAAA,YAAAlX,KAAAiL,GAAAqM,EAAAtM,IAAAC,IAAAvP,EAAA,mBAAAuP,GACAkM,EAAA,EAAAC,GACA,UACAE,EAAA1I,SAAA,OAAA0I,EAAA1I,SAAA,iBAAA,wBACA,gBACAsI,EACApX,QAAA,MAAA,KAAAA,QAAA,MAAA,KACAA,QAAA,0BAAA,SACAA,QAAA,aAAA,IACAA,QAAA,WAAA,WAAA,MAAA,sBAAAqX,EAAA,uBACArX,QAAA,qBAAA,gBACAA,QAAA,kBAAA,+BACAA,QAAA,iBAAA,wBACA,OAAAwX,EAAA1I,SAAA,GAAA,KAAA,qEACAlT,EAAA,mDACAA,EAAA,MACAoE,QAAA,qBAAA,IACA0F,EAAA,IAAAqC,SAAAuP,GACAhR,GAAAmQ,IAAA,QAAAC,IAAA,OAAAC,IAAA,OAAAC,IAAA,SAAAC,IAAA,UACAU,EAAA,SAAAH,GAAA,OAAA,GAAAA,GAAApX,QAAA,aAAA,SAAAgP,GAAA,OAAA1I,EAAA0I,MACA,SAAA0I,GAAA,OAAAhS,EAAAlJ,KAAAgb,EAAAjK,SAAAgK,WAAAA,EAAAF,KAAA,EAAAvO,IAAA,GAAA4O,MAAAA,OAEAtM,EAAAoM,EAAAnN,MAAAc,GAAAC,GAAAoM,EAAAnN,MAAAc,GA+DA,OA5DA+C,EAAA7D,SAGA6D,EAAAhD,IAAA,SAAAC,GACA,OAAAyK,SAAA+B,eAAAxM,GAAAyM,WAwDA9b,EAAAC,OAAA,iBACA8b,UAAA,SAAApF,GACA,OAAAA,EAAAzS,QAAA,cAAA,SAAAoC,GACA,OAAAA,EAAA0V,cAAA9X,QAAA,IAAA,OAIA+X,UArOA,SAAAtF,GACA,OAAAA,EAAAzS,QAAA,MAAA,KACAA,QAAA,wBAAA,SACAA,QAAA,oBAAA,SACAA,QAAA,KAAA,KACA1D,eAkOA0b,iBA/NA,SAAArb,GACA,IACA,OAAAA,EACA,QAAAA,GACA,SAAAA,IACA,QAAAA,EAAA,MACAA,EAAA,IAAAA,GAAAA,EACA,UAAAuD,KAAAvD,GAAAsb,KAAAlF,MAAApW,GACAA,GAAAA,EACA,MAAAoS,GACA,OAAApS,IAuNA4a,WAnNA,SAAA9E,GACA,GAAA,MAAAA,EACA,MAAA,GAEA,IAAAA,EACA,OAAAlW,OAAAkW,GAGA,OAAAA,EAAAtW,WAAA6D,QAAAkX,EAAAF,IA6MAkB,aA1MA,WACA,MAAA,uCAAAlY,QAAA,QAAA,SAAAiX,GACA,IAAAkB,EAAA,GAAA5M,KAAAC,SAAA,EACA4M,EAAA,MAAAnB,EAAAkB,EAAA,EAAAA,EAAA,EACA,OAAAC,EAAAjc,SAAA,OAwMAkc,WAAA,SAAA5F,GACA,OAAAA,EAAA6F,OAAA,GAAAhc,cAAAmW,EAAAtS,MAAA,IAGAoY,MAxEA,SAAA9F,GACA,OAAAA,EAAAzS,QAAA,QAAA,KAyEAwY,eAAA,SAAA7b,GACA,OAAAsb,KAAAQ,UAAA9b,IAIA+b,WA3MA,SAAAxK,EAEA5H,EAEAqS,EAEAvO,GAmBA,SAAAwO,EAAA3X,EAAAqF,GACA,GAAArF,EAAA0N,MAAA,MAAA,CACA,IAAAkK,EACAC,EAAA,SAAA9X,EAAAhF,GACA,IAAA+c,EAAA/X,EAAAc,MACA,OAAAiX,EACA/c,EAAA+c,GACAD,EAAA9X,EAAA6X,EAAA7c,EAAA+c,IADA,KAGAF,GAGA,OAAAC,EAAA7X,EAAAzF,MAAA,KAAAwd,UAAA1S,GAEA,OAAAA,EAAArF,GAIA,OAxBAmJ,EAAAA,GAAAlN,OACAyb,EAAAA,EACA7K,MAAA1D,EAAAuO,GAAA,SAAAP,GACA,OAAAA,GAqBAlK,EAAAlO,QAAA,yCACA,SAAA2O,EAAA1N,EAAAgY,GACA,IAAAtc,EAAAic,EAAA3X,EAAAqF,GAIA,OAHA2S,IACAtc,EAAAic,EAAAK,EAAA7O,GAAA5N,KAAA4N,EAAAzN,EAAAsE,IAEA0X,EAAAhc,EAAAsE,GAAA9E,cA4JA+c,QA5EA,SAAAzG,GAIAA,GAHAA,EAAAA,EAAAzS,QAAA,aAAA,KAGA1D,cAKA,IAFA,IAAA6c,EAAA,qGAEAxd,EAAA,EAAAsH,EAAAkW,EAAA1d,OAAAE,EAAAsH,EAAAtH,IACA8W,EAAAA,EAAAzS,QAAA,IAAAwO,OAAA2K,EAAAb,OAAA3c,GAAA,KAFA,qGAEA2c,OAAA3c,IAUA,OAJA8W,EAAAA,EAAAzS,QAAA,OAAA,KAEAA,QAAA,MAAA,MA4DAkO,SAAAA,EAEA2E,KArNA,SAAAJ,GACA,OAAA,MAAAA,EAAA,GAAAlW,OAAA2B,UAAA2U,KAAArW,KAAAiW,IAsNA2G,SA7JA,SAAAC,GACA,IAAAlO,IAAAgM,EAAA,GACA,OAAAkC,EAAAA,EAAAlO,EAAAA,GA6JAmO,WAAA,SAAA7G,GACA,OAAAA,EAAA6F,OAAA,GAAAR,cAAArF,EAAAtS,MAAA,QAKA/E,OAAA,8BACA,aACA,SAAAme,GACA,OAAAA,IAEAne,OAAA,yBAAA,8BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,yBACA,yBACA,SAAAme,GACA,OAAAA,IAEAne,OAAA,0BACA,YACA,YACA,aACA,SAAA2Z,EAAAwE,EAAAzU,GACA,IAAAvB,EAAAuB,EAAAvB,QACAvB,EAAA8C,EAAA9C,MACA3B,EAAAyE,EAAAzE,OACA5D,EAAAqI,EAAArI,cACAmG,EAAAkC,EAAAlC,MACAwW,EAAAG,EAAAH,SAEAI,EAAAzE,EAAA9L,SACAnC,WAAA,SAAA2S,EAAAtS,GACA,IAAAnD,EAAAyV,MACAtS,IAAAA,MACAjF,KAAAwX,IAAAN,EAAAlX,KAAAyX,WACAzX,KAAAuX,cACAtS,EAAA1D,aAAAvB,KAAAuB,WAAA0D,EAAA1D,YACA0D,EAAA4L,QAAA/O,EAAA9B,KAAA6Q,MAAA/O,EAAAmD,QACA,IAAAvG,EAAAP,EAAA6B,KAAA,YACA8B,EAAAhC,KAAApB,EAAAoD,GACA9B,KAAA0X,IAAA5V,EAAAmD,GACAjF,KAAA2X,YAIAA,QAAA,KAGAC,gBAAA,KAIAC,YAAA,KAIAJ,UAAA,IAIAK,OAAA,SAAA7S,GACA,OAAAvE,EAAAV,KAAAuX,aAKAvO,IAAA,SAAA+O,GACA,OAAA/X,KAAAuX,WAAAQ,IAKA9Y,IAAA,SAAA8Y,GACA,OAAA,MAAA/X,KAAAgJ,IAAA+O,IAMAL,IAAA,SAAA3Y,EAAAiZ,EAAA/S,GACA,GAAA,MAAAlG,EAAA,OAAAiB,KAGA,IAAA8B,EAWA,GAVA,iBAAA/C,GACA+C,EAAA/C,EACAkG,EAAA+S,IAEAlW,MAAA/C,GAAAiZ,EAGA/S,IAAAA,OAGAjF,KAAAiY,UAAAnW,EAAAmD,GAAA,OAAA,EAGA,IAAAiT,EAAAjT,EAAAiT,MACAC,EAAAlT,EAAAkT,OACAC,KACAC,EAAArY,KAAAsY,UACAtY,KAAAsY,WAAA,EAEAD,IACArY,KAAAuY,oBAAA7X,EAAAV,KAAAuX,YACAvX,KAAA2X,YAGA,IAAAa,EAAAxY,KAAAuX,WACAI,EAAA3X,KAAA2X,QACAc,EAAAzY,KAAAuY,oBAGA,IAAA,IAAAR,KAAAjW,EACAkW,EAAAlW,EAAAiW,GACA1W,EAAAmX,EAAAT,GAAAC,IAAAI,EAAApZ,KAAA+Y,GACA1W,EAAAoX,EAAAV,GAAAC,UAGAL,EAAAI,GAFAJ,EAAAI,GAAAC,EAIAE,SAAAM,EAAAT,GAAAS,EAAAT,GAAAC,EAOA,GAHAhY,KAAA6X,eAAA/V,IAAA9B,KAAAiJ,GAAAjJ,KAAAgJ,IAAAhJ,KAAA6X,eAGAM,EAAA,CACAC,EAAA7e,SAAAyG,KAAA0Y,SAAAzT,GACA,IAAA,IAAAxL,EAAA,EAAAA,EAAA2e,EAAA7e,OAAAE,IACAuG,KAAA2S,QAAA,UAAAyF,EAAA3e,GAAAuG,KAAAwY,EAAAJ,EAAA3e,IAAAwL,GAMA,GAAAoT,EAAA,OAAArY,KACA,IAAAmY,EACA,KAAAnY,KAAA0Y,UACAzT,EAAAjF,KAAA0Y,SACA1Y,KAAA0Y,UAAA,EACA1Y,KAAA2S,QAAA,SAAA3S,KAAAiF,GAKA,OAFAjF,KAAA0Y,UAAA,EACA1Y,KAAAsY,WAAA,EACAtY,MAKAkY,MAAA,SAAAH,EAAA9S,GACA,OAAAjF,KAAA0X,IAAAK,OAAA,EAAAjY,KAAAmF,GAAAiT,OAAA,MAIAS,MAAA,SAAA1T,GACA,IAAAnD,KACA,IAAA,IAAA/C,KAAAiB,KAAAuX,WAAAzV,EAAA/C,QAAA,EACA,OAAAiB,KAAA0X,IAAA5V,EAAAhC,KAAAmF,GAAAiT,OAAA,MAKAU,WAAA,SAAAb,GACA,OAAA,MAAAA,GAAAxd,EAAAyF,KAAA2X,cACA7a,IAAAkD,KAAA2X,QAAAI,IASAc,kBAAA,SAAAC,GACA,IAAAA,EAAA,QAAA9Y,KAAA4Y,cAAAlY,EAAAV,KAAA2X,SACA,IAAAoB,EAAA/Y,KAAAsY,UAAAtY,KAAAuY,oBAAAvY,KAAAuX,WACAI,KACA,IAAA,IAAAI,KAAAe,EAAA,CACA,IAAAd,EAAAc,EAAAf,GACA1W,EAAA0X,EAAAhB,GAAAC,KACAL,EAAAI,GAAAC,GAEA,OAAAzd,EAAAod,IAAAA,GAKAjN,SAAA,SAAAqN,GACA,OAAA,MAAAA,GAAA/X,KAAAuY,oBACAvY,KAAAuY,oBAAAR,GADA,MAMAiB,mBAAA,WACA,OAAAtY,EAAAV,KAAAuY,sBAIA7X,MAAA,WACA,OAAA,IAAAV,KAAA7E,YAAA6E,KAAAuX,aAIA0B,MAAA,WACA,OAAAjZ,KAAAf,IAAAe,KAAA6X,cAIAqB,QAAA,SAAAjU,GACA,OAAAjF,KAAAiY,aAAAnY,KAAAmF,GAAAkU,UAAA,MAKAlB,UAAA,SAAAnW,EAAAmD,GACA,IAAAA,EAAAkU,WAAAnZ,KAAAmZ,SAAA,OAAA,EACArX,EAAAhC,KAAAE,KAAAuX,WAAAzV,GACA,IAAAkN,EAAAhP,KAAA4X,gBAAA5X,KAAAmZ,SAAArX,EAAAmD,IAAA,KACA,OAAA+J,IACAhP,KAAA2S,QAAA,UAAA3S,KAAAgP,EAAAlP,EAAAmF,GAAA2S,gBAAA5I,MACA,MAIA,OAAAsI,IAEApe,OAAA,6BACA,mBACA,iCACA,SAAAU,EAAAiZ,GACA,IAAAuG,EAAA,IAAAvG,EAEA,OAAAjZ,EAAAC,OAAA,eACAwf,QAAA,SAAA3f,EAAA4f,EAAAC,GACA,IAAArQ,KAAAjL,MAAA3D,KAAAoF,UAAA,GAEA,OAAA0Z,EAAAzG,SACAzY,KAAAR,EACAwP,KAAAA,KAIAsQ,UAAA,SAAA9f,EAAAqV,EAAAmB,GACA,IAAA7C,EAAA,SAAAR,GACAkC,EAAAhP,MAAAmQ,EAAArD,EAAA3D,OAGA,OADAkQ,EAAAnI,GAAAvX,EAAA2T,IAEA5D,OAAA,WACA2P,EAAA7G,IAAA7Y,EAAA2T,UAQAnU,OAAA,4BACA,WACA,SAAAugB,GACA,OAAAA,IAEAvgB,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,uBACA,uBACA,SAAAugB,GACA,OAAAA,IAEAvgB,OAAA,uBACA,uBACA,SAAA6D,GACA,OAAAA,IAEA7D,OAAA,uBACA,YACA,WACA,eACA,WACA,UACA,cACA,aACA,YACA,YACA,UACA,WACA,UACA,YACA,YACA,aACA,YACA,UACA,WACA,SAAAU,EAAA6K,EAAAmD,EAAAiC,EAAAmG,EAAAY,EAAApJ,EAAAwJ,EAAA6B,EAAA7F,EAAA8F,EAAA7L,EAAA5I,EAAAuE,EAAA0U,EAAAD,EAAAoC,EAAA1c,GACA,aAEA3B,MAAAY,UAAA+H,OACA3I,MAAAY,UAAA2F,QACAvG,MAAAY,UAAAiC,MACA7C,MAAAY,UAAA6G,OAJA,IAKA/C,EAAA8C,EAAA9C,MAEAtF,GADAoI,EAAAD,UACA5F,EAAAvC,YA6BA,IAAAkf,EAAA,EAMA,SAAAC,IACA,OAAAA,EAuCA,OApCA7Z,EAAA6Z,GACA/G,YAAA5B,EAAA4B,YAEAgH,QAvCA,SAAAvO,EAAAjK,EAAAmB,EAAAsX,GACA,OAAArf,EAAA4G,GAAAA,EAAA9G,KAAA+Q,EAAA9I,EAAAsX,GAAAzY,GAwCA0Y,eArCA,SAAAC,GACA,IACAhJ,GADAgJ,EAAAA,GAAA/e,OAAAoB,SAAAF,MACA5C,MAAA,KACAmG,KAEAsR,EAAAxX,OAAA,GACAwX,EAAA,GAAAzX,MAAA,KAAAa,QAAA,SAAA6f,GACA,IAAAC,EAAAD,EAAA1gB,MAAA,KACAmG,EAAAwa,EAAA,IAAAA,EAAA,KAGA,OAAAxa,GA4BAya,QAxBA,SAAAzf,GAGA,OAAA0f,WAAA1f,IAAA,GAuBA2f,IAjBA,SAAAtgB,GACA,OAAAA,EAAA4f,OAAA5f,EAAA4f,KAAAA,MAkBAW,IAAA,oBAAArf,OAAAA,OAAAqf,KAAArf,OAAAsf,UAAA,OAKAxa,EAAA6Z,EAAAlV,EAAAoF,EAAA+G,EAAA5D,EAAA3O,EAAAuE,EAAAyU,EAAAta,GACA6K,WAAAA,EAEAoI,MAAAA,EAEAxI,SAAAA,EAEAwJ,QAAAA,EAEA6B,QAAAA,EAEAC,OAAAA,EAEA7L,MAAAA,EAEAqQ,SAAAA,EAEAmC,MAAAA,IAGA7f,EAAA+f,MAAAA,IAEAzgB,OAAA,gCACA,wBACA,uBACA,SAAAU,EAAA+f,GACA,aAEA,IAqBAY,EACAC,EAtBAtH,EAAAyG,EAAA7G,OAAAI,QAKAuH,GACAC,iBAAA,sBACAC,cAAA,gBACAC,YAAA,gCACAC,WAAA,iBAEAC,EAAA,KAGAC,EAAA,GAEAC,EAAA,GAEAC,KACAC,KAIAC,EAAA,qCAEAzH,EAAA1Y,OAAA0Y,SACA0H,EAAA1H,EAAA2H,cAAA,OAEAC,EAAAF,EAAAG,uBACAH,EAAAI,oBACAJ,EAAAK,kBACAL,EAAAE,gBAEAI,EAAAN,EAAAO,mBACAP,EAAAQ,yBACAR,EAAAS,sBACAT,EAAAU,oBAOAC,GALArI,EAAAsI,gBACAtI,EAAAuI,wBACAvI,EAAAwI,qBACAxI,EAAAyI,iBAEAf,EAAAgB,OAEA,IAAA,IAAA1iB,KAAAqiB,EAAA,CACA,IAAApI,EAAAja,EAAA+S,MAAA+N,GAAAW,GACA,GAAAxH,EAAA,CACA6G,IACAD,EAAA5G,EAAA,GACA6G,EAAA,IAAAlO,OAAA,KAAAiO,EAAA,UAEAA,EACAQ,EAAA,IAAAR,EAAAngB,cAAA,IACA4gB,EAAAT,EAAAngB,eAGA6gB,EAAAtB,EAAAxD,WAAAxC,EAAA,KAAAja,EACA,IAAA2iB,EAAA1C,EAAA9D,UAAAlC,EAAA,IACAuH,EAAAmB,GAAAtB,EAAAsB,EAEA5B,EAAA/gB,KACAohB,EAAAL,EAAA/gB,KA0DA,OArDAohB,QACAhe,IAAAif,EAAA,aACAjB,EAAAL,EAAA,YAgBAd,EAAA7Z,MAAAoT,GACA6H,eAAAA,EAEAuB,OAAA,QAAAzI,KAAA7Y,OAAAgZ,UAAAC,WAEAsI,uBATA,SAAA7iB,GACA,OAAAuhB,EAAAvhB,IAAAA,GAUA8iB,qBAfA,SAAA9iB,GACA,OAAAwhB,EAAAxhB,IAAAA,GAgBA+iB,kBArBA,SAAA/iB,GACA,OAAAshB,EAAAA,EAAAthB,EAAAA,EAAAU,eAsBAkhB,gBAAAA,EAEAI,kBAAAA,EAEAM,eAAAN,EAEAtf,SAAA,WACA,OAAApB,OAAAoB,UAGAsgB,aAMA5B,IACA5H,EAAAwJ,QAAA7B,YACA8B,IAAA7B,IAIAM,EAAA,KAEAxhB,EAAAC,OAAA,eAAAqZ,KAGAha,OAAA,6BACA,aACA,SAAAga,GACA,OAAAA,IAEAha,OAAA,wBAAA,6BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,4BACA,wBACA,sBACA,wBACA,SAAAU,EAAA+f,EAAAzG,GACA,IAAAoJ,IAAAtI,UAAAC,UAAAxH,MAAA,eAAAuH,UAAAC,UAAAxH,MAAA,SACAmQ,EAAA,qBACAC,EAAA,6BACAC,EAAApJ,SAAA2H,cAAA,OACA0B,EAAArJ,SAAA2H,cAAA,SACA2B,EAAAtJ,SAAA2H,cAAA,SACA4B,EAAAvJ,SAAA2H,cAAA,MACA6B,GACAC,GAAAH,EACAI,MAAAL,EACAM,MAAAN,EACAO,MAAAP,EACAQ,GAAAN,EACAO,GAAAP,EACAQ,IAAAX,GAEAY,EAAA,mBACAtZ,EAAAhJ,MAAAY,UAAAoI,IACAnG,EAAA7C,MAAAY,UAAAiC,MAEA,SAAA0f,EAAAC,EAAAC,GASA,OARAlE,EAAAte,YAAAuiB,KACAA,GAAAA,IAEAC,IACAD,EAAAxZ,EAAA9J,KAAAsjB,EAAA,SAAAzK,GACA,OAAAA,EAAA2K,WAAA,MAGAnE,EAAAxW,QAAAya,GAGA,SAAAG,EAAAC,EAAAC,GACA,IAAAvkB,EAAAskB,EAAAD,UAAAC,EAAAD,SAAA3jB,cACA,YAAA0C,IAAAmhB,EACAvkB,IAAAukB,EAAA7jB,cAEAV,EAiCA,SAAAwkB,EAAAC,EAAAhL,GACA,GAAAwG,EAAAnf,WAAA2jB,GACA,OAAAA,EAAApe,MAAAoT,MAEA,GAAAwG,EAAAte,YAAA8iB,GAAA,CAEA,IADA,IAAAC,EACA3kB,EAAA,EAAAA,EAAA0kB,EAAA5kB,OAAAE,IACAkgB,EAAAnf,WAAA2jB,EAAA1kB,MACA0kB,EAAA1kB,GAAA0kB,EAAA1kB,GAAAsG,MAAAoT,MACAwG,EAAAte,YAAA8iB,EAAA1kB,MACA2kB,GAAA,IAIAA,IACAD,EAAAxE,EAAAxW,QAAAgb,IAGA,OAAAA,EAqBA,SAAAE,EAAAlL,EAAAgL,EAAAN,GACAM,EAAAD,EAAAC,EAAAhL,GAGA,IAFA,IAAAmL,EAAAnL,EACAyK,EAAAD,EAAAQ,EAAAN,GACApkB,EAAA,EAAAA,EAAAmkB,EAAArkB,OAAAE,IACA6kB,EAAAC,YAAAX,EAAAnkB,IAEA,OAAAuG,KAgCA,SAAAqb,EAAAmD,EAAA1Z,EAAAC,GACA,IAAAoO,EAAAO,SAAA2H,cAAAmD,GACA,GAAA1Z,EACA,IAAA,IAAApL,KAAAoL,EACAqO,EAAAsL,aAAA/kB,EAAAoL,EAAApL,IAMA,OAHAqL,GACAsZ,EAAAtZ,EAAAoO,GAEAA,EAuJA,IAAAuL,EAAA,0EAqCA,SAAAC,EAAAxL,EAAApO,EAAA6Z,GACA,GAAAA,EACA,OAAAzL,EAAAmL,aAAAvZ,EAEA,GAAA2O,SAAAmL,gBAAAC,SACA,OAAA/Z,EAAA+Z,SAAA3L,GAEA,KAAAA,GAAA,CACA,GAAApO,IAAAoO,EACA,OAAA,EAGAA,EAAAA,EAAAmL,WAGA,OAAA,EAiCA,SAAAS,EAAAf,GACA,OAAAA,EAIA,GAAAA,EAAArjB,SACAqjB,EAGAA,EAAAgB,cAPAtL,SAsLA,SAAAuL,IACA,OAAAA,EA8EA,OA3EAtF,EAAA7Z,MAAAmf,GACAC,OA9hBA,SAAAC,GAEA,IAAAC,EADAD,EAAAA,GAAAzL,SAKA,IACA0L,EAAAD,EAAAE,cACA,MAAArQ,GACAoQ,EAAAD,EAAA/J,KAMAgK,IACAA,EAAAD,EAAA/J,MAMAgK,EAAArB,WACAqB,EAAAD,EAAA/J,MAGA,OAAAgK,GAsgBAE,KAAA,SAAAF,GACAA,EAAAE,QAGAlK,KAAA,WACA,OAAA1B,SAAA0B,MAGA1U,MAjZA,SAAAyS,EAAA9T,GACA,IACAqB,EADA+M,EAAAzN,KAIA,IAAAsc,GAAA,IAAAnJ,EAAAxY,UAAA0E,EACA,OAAA8T,EAAA2K,UAAAze,GAIA,IAAAA,EAQA,OAPAqB,EAAAgT,SAAA2H,cAAAlI,EAAA4K,UAGA/c,KAAAyM,EAAA8R,WAAApM,GAAA,SAAA4E,GACAtK,EAAA+R,UAAA9e,EAAAqX,EAAAgG,SAAAtQ,EAAAgS,UAAAtM,EAAA4E,EAAAgG,aAGArd,GAgYAgf,SA3cA,SAAA1B,GACA,GAAAD,EAAAC,EAAA,UACA,OAAAA,EAAA2B,gBAEA,OAAA3B,EAAA4B,YAycAvE,cAAAA,EAEAwE,eAjbA,SAAAC,GAGA,GADAA,EAAAnG,EAAAhJ,KAAAmP,GACAjD,EAAA7e,KAAA8hB,GACA,OAAAzE,EAAA/O,OAAAyT,KAGA,IAAArmB,EAAAkjB,EAAA5e,KAAA8hB,IAAAxT,OAAAyT,GACArmB,KAAAwjB,IACAxjB,EAAA,KAEA,IAAAsmB,EAAA9C,EAAAxjB,GAQA,OAPAsmB,EAAAtK,UAAA,GAAAoK,EACAG,IAAAhiB,EAAA3D,KAAA0lB,EAAAJ,YAEAK,IAAA9lB,QAAA,SAAAgZ,GACA6M,EAAAE,YAAA/M,KAGA8M,KAgaAnB,SA7XA,SAAA3L,EAAAgN,GACA,OAAAxB,EAAAwB,EAAAhN,IA8XAiN,eAtXA,SAAAnU,GACA,OAAAyH,SAAA0M,eAAAnU,IAuXAkT,IAjXA,WACA,OAAAzL,UAkXA2M,MA3WA,SAAAlN,GACA,KAAAA,EAAAmN,iBAAA,CACA,IAAAH,EAAAhN,EAAAoN,WACApN,EAAA+M,YAAAC,GAEA,OAAAngB,MAwWAwgB,WAnWA,SAAApB,GACA,IAAA,IAAAA,EACAlM,EAAAuN,eAAA1gB,MAAA2T,cACA,CAAA,IAAA0L,EAIA,OACA1L,SAAAgN,mBACAhN,SAAAiN,yBACAjN,SAAAkN,sBACAlN,SAAAmN,oBAPA3N,EAAAwI,kBAAA3b,MAAAqf,GACAA,IAgWA0B,UAnVA,SAAAC,EAAAC,GACA,IAAA5c,EAAA6c,EAAAC,EAAAC,EAAAC,EACArD,EAAAgD,EAAAhD,SAAA3jB,cAEA,GAAA,SAAA2jB,EAGA,OAFA3Z,EAAA2c,EAAAzC,WACA2C,EAAA7c,EAAA1K,QACAqnB,EAAA7kB,OAAA+kB,GAAA,QAAA7c,EAAA2Z,SAAA3jB,kBAGA8mB,EAAAG,EAAA,gBAAAJ,EAAA,OACA1nB,OAAA,GAAA2nB,EAAAI,GAAA,aAGA,0CAAAtjB,KAAA+f,IACAoD,GAAAJ,EAAAQ,YAQAH,EAAAC,EAAAN,GAAAS,QAAA,YAAA,MAEAL,GAAAC,EAAAG,UAIAJ,EADA,MAAApD,GACAgD,EAAA7kB,MAEA8kB,EAGA,OAAAG,GAAAE,EAAAN,GAAAO,GAAA,aAAAG,QAAAJ,EAAAN,KAmTAjB,KAxSA,SAAA3M,EAAA2M,GACA,QAAAhjB,IAAAgjB,EACA,OAAA3M,EAAAuC,UAOA,GALA1V,KAAAqgB,MAAAlN,GACA2M,EAAAA,GAAA,GACAnG,EAAA7e,SAAAglB,KACAA,EAAAA,EAAAhiB,QAAA4gB,EAAA,cAEA/E,EAAA7e,SAAAglB,IAAAnG,EAAA/e,SAAAklB,GACA3M,EAAAuC,UAAAoK,OACA,GAAAnG,EAAAte,YAAAykB,GACA,IAAA,IAAArmB,EAAA,EAAAA,EAAAqmB,EAAAvmB,OAAAE,IACA0Z,EAAAoL,YAAAuB,EAAArmB,SAGA0Z,EAAAoL,YAAAuB,GAGA,OAAA9f,MAuRA2e,UAAAA,EAEAnjB,WAxPA,SAAA2X,GACA,OAAA,MAAAA,GAAAA,EAAAxY,UAAAwY,EAAA1X,eAyPAimB,aAlPA,SAAAvO,GACA,OAAAA,IAAAO,SAAA0B,MAAA1B,SAAA0B,KAAA0J,SAAA3L,IAmPApY,SAAA4e,EAAA5e,SAEAgjB,SAAAA,EAEA4D,aAzLA,SAAA3D,GACA,IAAAjZ,EAAAiZ,EAAA2D,cAAAjO,SAAA0B,KACA,KAAArQ,IAAA2Y,EAAA1f,KAAA+G,EAAAgZ,WAAA,UAAArK,SAAAkO,YAAAC,iBAAA9c,GAAA+c,UACA/c,EAAAA,EAAA4c,aAEA,OAAA5c,GAsLAga,SAAAA,EAEAgD,YA1NA,SAAA/D,GACA,IAAAmB,EAAAJ,EAAAf,GACA,OAAAmB,EAAAyC,aAAAzC,EAAA6C,cA0NAzX,MA5hBA,SAAA4I,EAAAgL,EAAAN,GACAM,EAAAD,EAAAC,EAAAhL,GACA,IACApO,GADAkd,EAAA9O,GACAmL,WACA,GAAAvZ,EAIA,IAHA,IAAA6Y,EAAAD,EAAAQ,EAAAN,GACAoE,EAAAA,EAAAC,YAEAzoB,EAAA,EAAAA,EAAAmkB,EAAArkB,OAAAE,IACAwoB,EACAld,EAAAod,aAAAvE,EAAAnkB,GAAAwoB,GAEAld,EAAAwZ,YAAAX,EAAAnkB,IAIA,OAAAuG,MA8gBAoK,OAjgBA,SAAA+I,EAAAgL,EAAAN,GACAM,EAAAD,EAAAC,EAAAhL,GACA,IAAA8O,EAAA9O,EACApO,EAAAkd,EAAA3D,WACA,GAAAvZ,EAEA,IADA,IAAA6Y,EAAAD,EAAAQ,EAAAN,GACApkB,EAAA,EAAAA,EAAAmkB,EAAArkB,OAAAE,IACAsL,EAAAod,aAAAvE,EAAAnkB,GAAAwoB,GAGA,OAAAjiB,MAyfAoiB,QArNA,SAAAjP,EAAAgL,EAAAN,GAIA,IAHA,IAAAS,EAAAnL,EACA8O,EAAA3D,EAAAiC,WACA3C,EAAAD,EAAAQ,EAAAN,GACApkB,EAAA,EAAAA,EAAAmkB,EAAArkB,OAAAE,IACAwoB,EACA3D,EAAA6D,aAAAvE,EAAAnkB,GAAAwoB,GAEA3D,EAAAC,YAAAX,EAAAnkB,IAGA,OAAAuG,MA4MAqe,OAAAA,EAEAgE,OAlJA,SAAArE,GACA,MAAAoB,KACApB,EAAAtK,UAIA,OAFAsK,EAAAsE,aAEAtiB,MA8IAyJ,OA7LA,SAAA0J,GACA,GAAAA,GAAAA,EAAAmL,WACA,IACAnL,EAAAmL,WAAA4B,YAAA/M,GACA,MAAAtG,GACA0V,QAAAC,KAAA,8BAAA3V,GAGA,OAAA7M,MAuLAkgB,YApLA,SAAA/M,EAAAsP,GACA9I,EAAAte,YAAAonB,KACAA,GAAAA,IAEA,IAAA,IAAAhpB,EAAA,EAAAA,EAAAgpB,EAAAlpB,OAAAE,IACA0Z,EAAA+M,YAAAuC,EAAAhpB,IAGA,OAAAuG,MA8KAlC,QA1IA,SAAAqV,EAAAuP,GAEA,OADAA,EAAApE,WAAAqE,aAAAxP,EAAAuP,GACA1iB,MA0IA4iB,SAjIA,SAAAA,EAAAzP,EAAAhP,GACAA,EAAAgP,GACA,IAAA,IAAA1Z,EAAA,EAAAkY,EAAAwB,EAAAyM,WAAArmB,OAAAE,EAAAkY,EAAAlY,IACAmpB,EAAAzP,EAAAyM,WAAAnmB,GAAA0K,GAEA,OAAAnE,MA8HA8W,QAvHA,SAAA3D,GAEA,IADA,IAAAoN,EAAApN,EAAAoN,WACA9mB,EAAA0Z,EAAAsP,SAAAlpB,OAAA,EAAAE,EAAA,EAAAA,IACA,GAAAA,EAAA,EAAA,CACA,IAAA0mB,EAAAhN,EAAAsP,SAAAhpB,GACA0Z,EAAAgP,aAAAhC,EAAAI,KAoHAsC,QA1GA,SAAA1P,EAAA2P,GACAnJ,EAAA7e,SAAAgoB,KACAA,EAAA9iB,KAAA6f,eAAAiD,GAAAvC,YAEApN,EAAAmL,WAAA6D,aAAAW,EAAA3P,GACA2P,EAAAvE,YAAApL,IAuGA4P,aA/FA,SAAA5P,EAAA2P,GACA,IAAAlD,EAAA3hB,EAAA3D,KAAA6Y,EAAAyM,YACAzM,EAAAoL,YAAAuE,GACA,IAAA,IAAArpB,EAAA,EAAAA,EAAAmmB,EAAArmB,OAAAE,IACAqpB,EAAAvE,YAAAqB,EAAAnmB,IAEA,OAAAuG,MA2FAgjB,OApFA,SAAA7P,GACA,IAAApO,EAAAoO,EAAAmL,WACA,GAAAvZ,EAAA,CACA,GAAA/E,KAAAijB,MAAAle,EAAAuZ,YAAA,OACAvZ,EAAAuZ,WAAA6D,aAAAhP,EAAApO,OAmFAnL,EAAAC,OAAA,aAAAolB,KAEA/lB,OAAA,2BACA,WACA,SAAA+lB,GACA,OAAAA,IAEA/lB,OAAA,sBAAA,2BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,8BACA,wBACA,sBACA,uBACA,sBACA,SAAAU,EAAA+f,EAAAzG,EAAA+L,GACA,IAAAiE,KACArgB,EAAAzH,MAAAY,UAAA6G,OACA5E,EAAA7C,MAAAY,UAAAiC,MACAklB,EAAAjQ,EAAAoI,iBAUA,WAEA,IAAAhK,EACA8R,EACAC,EACAC,EAyDArM,EAxDA9O,KACAob,KACAC,EAAA,MAEA3S,EAAA,SAAA4S,EAAAC,GACA,GAAA,MAAAD,EAAA,OAAA,KACA,IAAA,IAAAA,EAAAE,MAAA,OAAAF,EACAA,GAAA,GAAAA,GAAA3lB,QAAA,aAAA,IAEA,IAAA8lB,GADAN,IAAAI,GACAH,EAAApb,EACA,GAAAyb,EAAAH,GAAA,OAAAG,EAAAH,GAUA,IATAnS,GACAqS,OAAA,EACAE,eACAC,IAAAL,EACA3M,QAAA,WACA,OAAAjG,EAAA7Q,KAAA8jB,KAAA,KAGAV,GAAA,EACAK,IAAAA,EAAAA,EAAA3lB,QAAAimB,EAAAC,MAEA,OADA1S,EAAA/X,OAAA+X,EAAAuS,YAAAtqB,OACAqqB,EAAAtS,EAAAwS,KAAA,EAAAhN,EAAAxF,GAAAA,GAGA2S,EAAA,SAAAC,GACA,MAAA,MAAAA,EAAA,IACA,MAAAA,EAAA,IACA,KAAAlmB,KAAAkmB,GAAAA,EAAApmB,QAAA,KAAA,IACA,IAAAomB,GAGApN,EAAA,SAAA2M,GAEA,IADA,IAAAI,EAAAJ,EAAAI,YACApqB,EAAA,EAAAA,EAAAoqB,EAAAtqB,OAAAE,IAAA,CAQA,IAPA,IAAA0qB,EAAAN,EAAApqB,GACA2qB,GACAC,SACA7F,IAAA,IACA0F,WAAAD,EAAAE,EAAA,GAAAD,aAGA9gB,EAAA,EAAAA,EAAA+gB,EAAA5qB,OAAA6J,IAAA,CACA,IAAAkhB,EAAAH,EAAA/gB,GACAkhB,EAAAL,oBAAAK,EAAAL,kBAAA,KACAK,EAAAJ,WAAAI,EAAAL,yBACAK,EAAAL,kBAGAE,EAAArN,UAAA9X,KAAAolB,GAEA,OAAAX,GAGA/W,GAEAuK,EAAA,kCAEA,SAAA/B,GACA,OAAAA,EAAApX,QAAAmZ,EAFA,QAMA8M,EAAA,IAAAzX,OACA,0QACAxO,QAAA,eAAA,IAAA4O,EAAA,sBAAA,KACA5O,QAAA,aAAA,8CACAA,QAAA,cAAA,gDAGA,SAAAkmB,EACAO,EAEAC,EACAN,EACAO,EAEAC,EACAzb,EACA3I,EAEAqkB,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAAX,IAAA,IAAApB,KACA9R,EAAAuS,cAAAT,MACAC,GAAA,EACAmB,GAAA,MAAA,GAGA,GAAAN,GAAAO,IAAA,IAAApB,EAAA,CACAa,EAAAA,GAAA,IACA,IAAAkB,EAAA9T,EAAAuS,YAAAT,GACAE,GAAA8B,EAAA/B,KACA+B,EAAA/B,GAAAY,kBAAAA,EAAAC,IACAkB,IAAA/B,IACAa,WAAAA,EACA1F,IAAA,KAIA,IAAA6G,EAAA/T,EAAAuS,YAAAT,GAAAC,GAEA,GAAAqB,EACAW,EAAA7G,IAAAkG,EAAA5mB,QAAA0lB,EAAA,SAEA,GAAAva,EACAoc,EAAApc,GAAAA,EAAAnL,QAAA0lB,EAAA,SAEA,GAAAljB,EACAA,EAAAA,EAAAxC,QAAA0lB,EAAA,IAEA6B,EAAAC,YAAAD,EAAAC,cACAD,EAAAE,UAAAF,EAAAE,YACAF,EAAAC,UAAAtmB,KAAAsB,GACA+kB,EAAAE,QAAAvmB,MACAvE,MAAA6F,EACAyjB,OAAA,IAAAzX,OAAA,UAAAI,EAAApM,GAAA,kBAGA,GAAA0kB,EAEAG,GADAA,EAAAA,GAAAD,GACAC,EAAArnB,QAAA0lB,EAAA,IAAA,KAEA6B,EAAAG,UAAAH,EAAAG,YACAH,EAAAG,QAAAxmB,MACAD,IAAAimB,EAAAlnB,QAAA0lB,EAAA,IACA/oB,MAAA0qB,EACAjrB,KAAA,GAAA6qB,EAAAxrB,OAAA,QAAA,iBAGA,GAAAorB,EAAA,CAIA,IAAA3mB,EAAA+lB,EAEA,OALAY,EAAAA,EAAA7mB,QAAA0lB,EAAA,IACAsB,GAAAA,GAAA,IAAAhnB,QAAA0lB,EAAA,IAIAoB,GACA,IAAA,KACAb,EAAA,IAAAzX,OAAA,IAAAI,EAAAoY,IACA,MACA,IAAA,KACAf,EAAA,IAAAzX,OAAAI,EAAAoY,GAAA,KACA,MACA,IAAA,KACAf,EAAA,IAAAzX,OAAA,UAAAI,EAAAoY,GAAA,WACA,MACA,IAAA,KACAf,EAAA,IAAAzX,OAAA,IAAAI,EAAAoY,GAAA,SACA,MACA,IAAA,IACA9mB,EAAA,SAAAvD,GACA,OAAAqqB,GAAArqB,GAEA,MACA,IAAA,KACAuD,EAAA,SAAAvD,GACA,OAAAA,GAAAA,EAAAkH,QAAAmjB,IAAA,GAEA,MACA,IAAA,KACA9mB,EAAA,SAAAvD,GACA,OAAAqqB,GAAArqB,GAEA,MACA,QACAuD,EAAA,SAAAvD,GACA,QAAAA,GAIA,IAAAqqB,GAAA,WAAA9mB,KAAA4mB,KAAA5mB,EAAA,WACA,OAAA,IAGAA,IAAAA,EAAA,SAAAvD,GACA,OAAAA,GAAAspB,EAAA/lB,KAAAvD,KAGA4qB,EAAA9N,aAAA8N,EAAA9N,eACA8N,EAAA9N,WAAAvY,MACAD,IAAA4lB,EACAc,SAAAb,EACAnqB,MAAAqqB,EACA9mB,KAAAA,IAKA,MAAA,GAKA,IAAA2lB,EAAA3jB,KAAA2jB,UAEAA,EAAA9S,MAAA,SAAA4S,GACA,OAAA5S,EAAA4S,IAGAE,EAAAjX,aAAAA,EAEA1M,KAAA2jB,QAAA3jB,KAAA2jB,MAAAA,KAEA5jB,MAAAmjB,GAGA,IAEAwC,EAAA,sCACAC,EAAA,SACA1nB,EAAA7C,MAAAY,UAAAiC,MAGAilB,EAAA0C,cAAA1C,EAAAS,MAAA9S,MAGA,IAAA2U,EAAAtC,EAAAsC,SAEAK,OAAA,SAAAC,GACA,IAAApsB,EAAAosB,EAAA/H,SAAA3jB,cACA,MAAA,UAAAV,GAAA,WAAAosB,EAAA5rB,MAAA,WAAAR,GAGAqsB,QAAA,SAAA/H,GACA,QAAAA,EAAA+H,SAGAjH,SAAA,SAAAd,EAAAzb,EAAAqb,EAAA3R,GACA,GAAAoV,EAAArhB,MAAAiM,OAAAtK,QAAAsK,IAAA,EAAA,OAAAjM,MAGAuhB,SAAA,SAAAvD,GACA,QAAAA,EAAAuD,UAGAyE,QAAA,SAAAhI,GACA,OAAAA,EAAAuD,UAGAjjB,GAAA,SAAA0f,EAAAzb,EAAAqb,EAAAnjB,GACA,OAAA8H,GAAA9H,GAGAwrB,KAAA,SAAAjI,EAAAzb,EAAAqb,EAAAnjB,GACA,OAAA8H,EAAA,GAAA,GAGA2jB,MAAA,SAAAlI,GACA,OAAAtK,SAAA2L,gBAAArB,IAAAA,EAAA9hB,MAAA8hB,EAAA9jB,MAAA8jB,EAAAmI,WAGArF,UAAA,SAAA9C,GACA,OAAAiB,EAAA6B,UAAA9C,EAAA,MAAAA,EAAAmI,WAGA7iB,MAAA,SAAA0a,EAAAzb,GACA,OAAA,IAAAA,GAGA6jB,GAAA,SAAApI,EAAAzb,EAAAqb,EAAAnjB,GACA,OAAA8H,EAAA9H,GAGAwE,IAAA,SAAA+e,EAAAzb,EAAAqb,EAAAyI,GACA,OAAAC,EAAAtI,EAAAqI,IAIAE,OAAA,SAAAT,GACA,OAAAH,EAAA3nB,KAAA8nB,EAAA/H,WAGAyI,OAAA,SAAAxI,GACA,OAAAkF,EAAAsC,QAAA,QAAAxH,IAGAyI,MAAA,SAAAX,GACA,OAAAJ,EAAA1nB,KAAA8nB,EAAA/H,WAGAqG,KAAA,SAAApG,EAAAzb,EAAAqb,GACA,OAAArb,IAAAqb,EAAArkB,OAAA,GAGAmtB,GAAA,SAAA1I,EAAAzb,EAAAqb,EAAAnjB,GACA,OAAA8H,EAAA9H,GAGAksB,IAAA,SAAA3I,EAAAzb,EAAAqb,EAAAyI,GACA,OAAAvd,EAAAkV,EAAAqI,IAGAO,IAAA,SAAA5I,EAAAzb,EAAAqb,EAAAnjB,GACA,OAAA8H,EAAA,GAAA,GAOAwC,OAAA,SAAAiZ,GACA,QAAAA,EAAAM,YAGAuI,SAAA,SAAA7I,GACA,QAAAA,EAAA6I,UAGAC,SAAA,SAAA9I,GACA,IAAA+I,EAAA/I,EAAAmI,SACAnF,EAAA,MAAA+F,EACA,QAAA/F,GAAA+F,GAAA,IAAA9H,EAAA6B,UAAAC,QAAAC,IAGA/U,KAAA,SAAA+R,GACA,MAAA,SAAAA,EAAA9jB,MAGAunB,QAAA,SAAAzD,GACA,OAAAA,EAAAgJ,aAAAhJ,EAAAgJ,aAEA3G,MAAA,SAAArC,GACA,OAAAA,EAAAsC,kBAYA,SAAA2G,EAAA/sB,GACA,OAAA,SAAA4rB,GACA,IAAApsB,EAAAosB,EAAA/H,SAAA3jB,cACA,MAAA,UAAAV,GAAAosB,EAAA5rB,OAAAA,GAIA,SAAAgtB,EAAAhtB,GACA,OAAA,SAAA4rB,GACA,IAAApsB,EAAAosB,EAAA/H,SAAA3jB,cACA,OAAA,UAAAV,GAAA,WAAAA,IAAAosB,EAAA5rB,OAAAA,GAKA,IAAAT,KAvBA,QAAA,KAAA,QAAAU,QAAA,SAAAmI,GACAkjB,EAAAljB,GAAA6kB,eAAA,IAKA3B,EAAA,IAAAA,EAAA,IAkBA4B,OAAA,EACAC,UAAA,EACAC,MAAA,EACAC,UAAA,EACAC,OAAA,GAEAhC,EAAA/rB,GAAAwtB,EAAAxtB,GAEA,IAAAA,KACAguB,QAAA,EACAC,OAAA,GAEAlC,EAAA/rB,GAAAytB,EAAAztB,GAiWA,SAAAkuB,EAAAxU,EAAAhC,EAAAyW,GAGA,IAFA,IAAAhhB,KACAihB,EAAAD,GAAAjO,EAAA7e,SAAA8sB,IACAzU,EAAAA,EAAAmL,aAAA,IAAAnL,EAAAxY,UAAA,CACA,GAAAitB,EACA,GAAAC,GACA,GAAA/e,EAAAqK,EAAAyU,GACA,WAEA,GAAAjO,EAAAte,YAAAusB,IACA,GAAAjO,EAAAhW,QAAAwP,EAAAyU,IAAA,EACA,WAEA,GAAAzU,GAAAyU,EACA,MAGAhhB,EAAA5H,KAAAmU,GAMA,OAHAhC,IACAvK,EAAAsc,EAAArgB,OAAA+D,EAAAuK,IAEAvK,EAiBA,SAAA6b,EAAAtP,EAAAhC,GAGA,IAFA,IAAAyO,EAAAzM,EAAAyM,WACAhZ,KACAnN,EAAA,EAAAA,EAAAmmB,EAAArmB,OAAAE,IAAA,CACA,IAAA0Z,EAAAyM,EAAAnmB,GACA,GAAA0Z,EAAAxY,UACAiM,EAAA5H,KAAAmU,GAMA,OAHAhC,IACAvK,EAAAsc,EAAArgB,OAAA+D,EAAAuK,IAEAvK,EAgBA,SAAAkhB,EAAA9J,EAAA7M,GAEA,IACA,OAAAlT,EAAA3D,KAAA0jB,EAAA+J,iBAAA5W,IACA,MAAA6W,IAGA,OAAA9E,EAAApb,MAAAkW,EAAA7M,GAQA,SAAA8W,EAAAjK,EAAA7M,GAEA,IACA,OAAA6M,EAAAkK,cAAA/W,GACA,MAAA6W,IAGA,IAAApK,EAAAsF,EAAApb,MAAAkW,EAAA7M,GACA,OAAAyM,EAAArkB,OAAA,EACAqkB,EAAA,GAEA,KASA,SAAA0I,EAAAtI,EAAA7M,GAKA,OAJAA,IACAA,EAAA6M,EACAA,EAAAtK,SAAA0B,MAEAtM,EAAAkV,EAAA7M,GACA6M,EAEAiK,EAAAjK,EAAA7M,GAuBA,SAAAoP,EAAAvC,EAAA7M,EAAA7N,GAGA,IAFA,IAAAsc,EAAA5B,EAAA4B,WACAzM,EAAAyM,EAAA,GACAzM,GAAA,CACA,GAAA,GAAAA,EAAAxY,SAAA,CACA,IAAAwW,GAAArI,EAAAqK,EAAAhC,GACA,OAAAgC,EAEA,GAAA7P,EACA,MAGA6P,EAAAA,EAAA+O,YAGA,OAAA,KASA,SAAAiG,EAAAnK,EAAA7M,EAAAiT,GAGA,IAFA,IAAAxE,EAAA5B,EAAA4B,WACAzM,EAAAyM,EAAAA,EAAArmB,OAAA,GACA4Z,GAAA,CACA,GAAA,GAAAA,EAAAxY,SAAA,CACA,IAAAwW,GAAArI,EAAAqK,EAAAhC,GACA,OAAAgC,EAEA,GAAAiR,EACA,MAGAjR,EAAAA,EAAAiV,gBAGA,OAAA,KAQA,SAAAtf,EAAAkV,EAAA7M,GACA,IAAAA,IAAA6M,GAAA,IAAAA,EAAArjB,SACA,OAAA,EAGA,GAAAgf,EAAA7e,SAAAqW,GAAA,CACA,IACA,OAAAgS,EAAA7oB,KAAA0jB,EAAA7M,EAAArT,QAAA,iCAAA,cACA,MAAAkqB,IAGA,OAAA9E,EAAAzW,MAAAuR,EAAA7M,GACA,OAAAwI,EAAAte,YAAA8V,GACAwI,EAAAhW,QAAAqa,EAAA7M,IAAA,EACAwI,EAAA9d,cAAAsV,GACA+R,EAAAmF,MAAArK,EAAA7M,GAEA6M,IAAA7M,EAWA,SAAA+Q,EAAAlE,EAAA7M,EAAAmX,GAEA,IADA,IAAAnV,EAAA6K,EAAAkE,YACA/O,GAAA,CACA,GAAA,GAAAA,EAAAxY,SAAA,CACA,IAAAwW,GAAArI,EAAAqK,EAAAhC,GACA,OAAAgC,EAEA,GAAAmV,EACA,MAGAnV,EAAAA,EAAA+O,YAEA,OAAA,KAQA,SAAAqG,EAAAvK,EAAA7M,GAGA,IAFA,IAAAgC,EAAA6K,EAAAkE,YACAtb,KACAuM,GACA,GAAAA,EAAAxY,WACAwW,IAAArI,EAAAqK,EAAAhC,IACAvK,EAAA5H,KAAAmU,IAGAA,EAAAA,EAAA+O,YAEA,OAAAtb,EAQA,SAAA7B,EAAAiZ,EAAA7M,GACA,IAAAgC,EAAA6K,EAAAM,WACA,OAAAnL,GAAAhC,IAAArI,EAAAqK,EAAAhC,GAIA,KAHAgC,EAYA,SAAAiV,EAAApK,EAAA7M,EAAAmX,GAEA,IADA,IAAAnV,EAAA6K,EAAAoK,gBACAjV,GAAA,CACA,GAAA,GAAAA,EAAAxY,SAAA,CACA,IAAAwW,GAAArI,EAAAqK,EAAAhC,GACA,OAAAgC,EAEA,GAAAmV,EACA,MAGAnV,EAAAA,EAAAiV,gBAEA,OAAA,KAQA,SAAAI,EAAAxK,EAAA7M,GAGA,IAFA,IAAAgC,EAAA6K,EAAAoK,gBACAxhB,KACAuM,GACA,GAAAA,EAAAxY,WACAwW,IAAArI,EAAAqK,EAAAhC,IACAvK,EAAA5H,KAAAmU,IAGAA,EAAAA,EAAAiV,gBAEA,OAAAxhB,EAQA,SAAA6hB,EAAAzK,EAAA7M,GAGA,IAFA,IAAAgC,EAAA6K,EAAAM,WAAAiC,WACA3Z,KACAuM,GACA,GAAAA,EAAAxY,UAAAwY,IAAA6K,IACA7M,IAAArI,EAAAqK,EAAAhC,IACAvK,EAAA5H,KAAAmU,IAGAA,EAAAA,EAAA+O,YAEA,OAAAtb,EAxpBAsc,EAAAwF,OAAA,SAAAC,GACA,IAEAnK,EACAvV,EACAsc,EACAhO,EACAiO,EANAoD,EAAA,GACAC,KAWA,IAHA5f,EAAA0f,EAAA1f,MACA2f,GAAA,IAAA3f,GAEAsc,EAAAoD,EAAApD,QACA,IAAA,IAAA9rB,EAAA8rB,EAAAhsB,OAAAE,KACAmvB,GAAA,IAAArD,EAAA9rB,GAAAgB,MAGA,GAAA8c,EAAAoR,EAAApR,WACA,IAAA,IAAA9d,EAAA,EAAAA,EAAA8d,EAAAhe,OAAAE,IACA8d,EAAA9d,GAAAgsB,SACAmD,GAAA,IAAArR,EAAA9d,GAAAsF,IAAAwY,EAAA9d,GAAAgsB,SAAA1P,KAAAQ,UAAAgB,EAAA9d,GAAAgB,OAAA,IAEAmuB,GAAA,IAAArR,EAAA9d,GAAAsF,IAAA,IAIA,GAAAymB,EAAAmD,EAAAnD,QACA,IAAA/rB,EAAA+rB,EAAAjsB,OAAAE,KACAqvB,KAAAtD,EAAA/rB,GACAuG,KAAAwlB,QAAAsD,KAAA/pB,KACA8pB,EAAA7pB,KAAA8pB,WAEAhsB,IAAAgsB,KAAAruB,QACAmuB,GAAA,IAAAE,KAAA/pB,IAAA,IAAAgX,KAAAQ,UAAAuS,OAgBA,OAVAtK,EAAAmK,EAAAnK,MACA,MAAAA,IACAoK,EAAApK,EAAA5I,cAAAgT,GAIAA,IACAA,EAAA,MAIAA,eAAAA,EACAC,cAAAA,IAKA3F,EAAAmF,MAAA,SAAAlV,EAAAwV,EAAApmB,EAAAqb,EAAAmL,GACA,IAAAvK,EACAvV,EACAsc,EACAhO,EACAiO,EAEA/rB,EAAAqvB,EAAAtjB,EAAAwjB,EAEA,IAAAD,EAAA,CACA,GAAAvK,EAAAmK,EAAAnK,IAAA,CACA,IAAAT,EAAA5K,EAAA4K,SAAAnI,cACA,GAAA,KAAA4I,GACA,GAAAT,EAAA,IAAA,OAAA,OAEA,GAAAA,IAAAS,GAAA,IAAA5I,cAAA,OAAA,EAIA,IAAA3M,EAAA0f,EAAA1f,KACAkK,EAAA8V,aAAA,OAAAhgB,EACA,OAAA,EAKA,GAAAsc,EAAAoD,EAAApD,QACA,IAAA9rB,EAAA8rB,EAAAhsB,OAAAE,KAEA,KADA+L,EAAA2N,EAAA8V,aAAA,YACA1D,EAAA9rB,GAAAsqB,OAAA/lB,KAAAwH,GAAA,OAAA,EAIA,GAAA+R,EAAAoR,EAAApR,WACA,IAAA9d,EAAA8d,EAAAhe,OAAAE,KAEA,IADAqvB,EAAAvR,EAAA9d,IACAgsB,UAAAqD,EAAA9qB,KAAAmV,EAAA8V,aAAAH,EAAA/pB,OAAAoU,EAAA+V,aAAAJ,EAAA/pB,KAAA,OAAA,EAKA,GAAAymB,EAAAmD,EAAAnD,QACA,IAAA/rB,EAAA+rB,EAAAjsB,OAAAE,KAEA,GADAqvB,EAAAtD,EAAA/rB,GACAuvB,EAAAhpB,KAAAwlB,QAAAsD,EAAA/pB,MACA,IAAAgqB,GAAAC,EAAA7B,gBAAA4B,IAAAC,EAAA7B,iBACA6B,EAAA7V,EAAA5Q,EAAAqb,EAAAkL,EAAAruB,OACA,OAAA,OAIA,IAAAsuB,IAAA5F,EAAA7oB,KAAA6Y,EAAA2V,EAAA/pB,KACA,OAAA,EAKA,OAAA,GAGAmkB,EAAAzW,MAAA,SAAA0G,EAAAhC,GAEA,IAAAG,EAQA,KALAA,EADAqI,EAAA7e,SAAAqW,GACA+R,EAAAS,MAAA9S,MAAAM,GAEAA,GAIA,OAAA,EAIA,IAEA1X,EACA0vB,EAHAtF,EAAAvS,EAAAuS,YACAuF,EAAA,EAGA,IAAA3vB,EAAA,EACA0vB,EAAAtF,EAAApqB,GAAAA,IACA,GAAA,GAAA0vB,EAAA5vB,OAAA,CACA,IAAA4qB,EAAAgF,EAAA,GACA,GAAAnpB,KAAAqoB,MAAAlV,EAAAgR,GACA,OAAA,EAEAiF,IAIA,GAAAA,GAAA9X,EAAA/X,OACA,OAAA,EAGA,IACA+I,EADAsb,EAAA5d,KAAA8H,MAAA4L,SAAApC,GAEA,IAAA7X,EAAA,EAAA6I,EAAAsb,EAAAnkB,MACA,GAAA6I,IAAA6Q,EACA,OAAA,EAGA,OAAA,GAIA+P,EAAAmG,aAAA,SAAAzL,EAAAuG,GACA,IAAAmF,EAAAzmB,EAAAvI,KAAAsjB,EAAA,SAAAzK,EAAA5Q,GACA,OAAA2gB,EAAAmF,MAAAlV,EAAAgR,EAAA5hB,EAAAqb,GAAA,KAMA,OAHA0L,EAAAzmB,EAAAvI,KAAAgvB,EAAA,SAAAnW,EAAA5Q,GACA,OAAA2gB,EAAAmF,MAAAlV,EAAAgR,EAAA5hB,EAAA+mB,GAAA,MAKApG,EAAArgB,OAAA,SAAA+a,EAAAzM,GAGA,IAAAwI,EAAA7e,SAAAqW,GAGA,OAAA+R,EAAAmG,aAAAzL,EAAAzM,GAIA,IACA1X,EACA0vB,EAFAtF,EANAX,EAAAS,MAAA9S,MAAAM,GAMA0S,YAGAjd,KACA,IAAAnN,EAAA,EACA0vB,EAAAtF,EAAApqB,GAAAA,IAAA,CACA,GAAA,GAAA0vB,EAAA5vB,OAOA,MAAA,IAAA6L,MAAA,0BAAA+L,GANA,IAAAgT,EAAAgF,EAAA,GAEAG,EAAApG,EAAAmG,aAAAzL,EAAAuG,GAEAvd,EAAA+S,EAAAnV,KAAAoC,EAAA7C,OAAAulB,IAMA,OAAA1iB,GAIAsc,EAAAqG,QAAA,SAAAvL,EAAAwL,GACA,IAEAC,EAFAC,EAAAF,EAAAtF,WACAyE,EAAAa,EAEA5L,KAEA,OAAA8L,GACA,IAAA,IACA9L,EAAA6E,EAAAzE,EAAA2K,GACA,MACA,IAAA,KACAc,EAAAvH,EAAAlE,EAAA2K,GAAA,KAEA/K,EAAA5e,KAAAyqB,GAEA,MACA,IAAA,KACAA,EAAAlJ,EAAAvC,EAAA2K,GAAA,KAEA/K,EAAA5e,KAAAyqB,GAEA,MACA,IAAA,IACA7L,EAAA2K,EAAAvK,EAAA2K,GACA,MACA,IAAA,KACA,IAAAlQ,EAAA2P,EAAApK,EAAA2K,GAAA,GACAte,EAAA6X,EAAAlE,EAAA2K,GAAA,GACAlQ,GACAmF,EAAA5e,KAAAyZ,GAEApO,GACAuT,EAAA5e,KAAAqL,GAEA,MACA,IAAA,KACAuT,EAAA6K,EAAAzK,EAAA2K,GACA,MACA,IAAA,IACA/K,EAAA+J,EAAA3J,EAAA2K,GACA,MACA,IAAA,MACAc,EAAA1kB,EAAAiZ,EAAA2K,KAEA/K,EAAA5e,KAAAyqB,GAEA,MACA,IAAA,KACA7L,EAAAwK,EAAApK,EAAA2K,GAAA,GACA,MACA,IAAA,MACAc,EAAAtB,EAAAnK,EAAA2K,GAAA,KAEA/K,EAAA5e,KAAAyqB,GAEA,MACA,IAAA,KACA7L,EAAA4K,EAAAxK,EAAA2K,GACA,MACA,QACA,IAAAgB,EAAA3pB,KAAA0oB,OAAAc,GAEA,GADA5L,EAAA3f,EAAA3D,KAAA0jB,EAAA+J,iBAAA4B,EAAAf,iBACAe,EAAAd,cACA,IAAA,IAAApvB,EAAAkwB,EAAAd,cAAAtvB,OAAA,EAAAE,GAAA,EAAAA,IACAmkB,EAAA/a,EAAAvI,KAAAsjB,EAAA,SAAAtb,EAAAC,GACA,OAAA2gB,EAAAmF,MAAA/lB,GACAkjB,SAAAmE,EAAAd,cAAApvB,KACA8I,EAAAqb,GAAA,KAGAA,EAAA/a,EAAAvI,KAAAsjB,EAAA,SAAAtb,EAAAC,GACA,OAAA2gB,EAAAmF,MAAA/lB,GACAkjB,SAAAmE,EAAAd,cAAApvB,KACA8I,EAAAqb,GAAA,KAOA,OAAAA,GAGAsF,EAAApb,MAAA,SAAAqL,EAAAhC,EAAAyY,GAUA,IAPA,IAIAT,EAAAU,EAJAvY,EAAAtR,KAAA2jB,MAAA9S,MAAAM,GAGA2Y,KAEAjG,EAAAvS,EAAAuS,YAEApqB,EAAA,EACA0vB,EAAAtF,EAAApqB,GAAAA,IAAA,CAGA,IAFA,IACAswB,EADAC,GAAA7W,GAEA/P,EAAA,EACAymB,EAAAV,EAAA/lB,GAAAA,KACA2mB,EAAApQ,EAAAvV,IAAA4lB,EAAA,SAAA1nB,EAAA7I,GACA,OAAAypB,EAAAqG,QAAAjnB,EAAAunB,QAGAG,EAAAD,GAGAA,IACAD,EAAAA,EAAA/lB,OAAAgmB,IAIA,OAAAD,GAgWA,IAAAG,EAAA,WACA,OAAAA,GA4CA,OAzCAtQ,EAAA7Z,MAAAmqB,GAEAC,SA7VA,SAAA/W,EAAAhC,EAAAyW,GACA,IAAAC,EAAAD,GAAAjO,EAAA7e,SAAA8sB,GACA,KAAAzU,EAAAA,EAAAmL,YAAA,CACA,GAAAxV,EAAAqK,EAAAhC,GACA,OAAAgC,EAEA,GAAAyU,EACA,GAAAC,GACA,GAAA/e,EAAAqK,EAAAyU,GACA,WAEA,GAAAzU,GAAAyU,EACA,MAIA,OAAA,MA+UAD,UAAAA,EAEAwC,KA1SA,SAAAlhB,EAAAkW,GAEA,OADAA,EAAAA,GAAAF,EAAAE,OACA1J,eAAAxM,IA0SAwZ,SAAAA,EAEAjB,QArRA,SAAArO,EAAAhC,GACA,KAAAgC,IAAArK,EAAAqK,EAAAhC,IACAgC,EAAAA,EAAAmL,WAGA,OAAAnL,GAkRA8U,WAAAA,EAEAH,YAAAA,EAEAxB,KAAAA,EAEA8D,QA5NA,SAAApM,EAAA7M,GACAA,IACAA,EAAA6M,EACAA,EAAAtK,SAAA0B,MAEA,OAAA0S,EAAA9J,EAAA7M,IAyNAoP,WAAAA,EAEA4H,UAAAA,EAEArf,QAAAA,EAEAoZ,YAAAA,EAEAqG,aAAAA,EAEAxjB,OAAAA,EAEAqjB,gBAAAA,EAEAI,iBAAAA,EAEAhD,QAAAtC,EAAAsC,QAEAiD,SAAAA,IAGA7uB,EAAAC,OAAA,cAAAowB,KAEA/wB,OAAA,4BACA,YACA,SAAA+wB,GAEA,OAAAA,IAEA/wB,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,0BACA,wBACA,sBACA,sBACA,sBACA,SAAAU,EAAA+f,EAAAsQ,EAAAhL,GACA,IAAA7a,EAAAhJ,MAAAY,UAAAoI,IAEAuR,GADAva,MAAAY,UAAA6G,OACA8W,EAAAhE,WACAG,EAAA6D,EAAA7D,iBAEAuU,EAAA,WACAC,GACAnE,SAAA,WACAoE,SAAA,WACAC,IAAA,UACAC,MAAA,YACAC,UAAA,YACAC,YAAA,cACAC,YAAA,cACAC,QAAA,UACAC,QAAA,UACAC,OAAA,SACAC,YAAA,cACAC,gBAAA,mBAUA,IAAAC,GACAC,QACAniB,IAAA,SAAA8c,GACA,IAAA9N,EAAA8N,EAAAmD,aAAA,SACA,OAAA,MAAAjR,EAAAA,GAAA/L,EAAA6Z,GATArZ,MAAA,0BACAD,KAAA,OAWA4e,QACApiB,IAAA,SAAA8c,GACA,IAAArrB,EAAA0wB,EAAA1xB,EACAwL,EAAA6gB,EAAA7gB,QACAnE,EAAAglB,EAAAuF,cACAja,EAAA,eAAA0U,EAAA5rB,KACA+F,EAAAmR,EAAA,QACAka,EAAAla,EAAAtQ,EAAA,EAAAmE,EAAA1L,OAUA,IAPAE,EADAqH,EAAA,EACAwqB,EAGAla,EAAAtQ,EAAA,EAIArH,EAAA6xB,EAAA7xB,IAGA,IAFA0xB,EAAAlmB,EAAAxL,IAEAotB,WAGAsE,EAAA5J,YACA4J,EAAA7M,WAAAiD,WACAtC,EAAAlB,SAAAoN,EAAA7M,WAAA,aAAA,CAMA,GAHA7jB,EAAAud,EAAAmT,GAGA/Z,EACA,OAAA3W,EAIAwF,EAAAjB,KAAAvE,GAIA,OAAAwF,GAGAyX,IAAA,SAAAoO,EAAArrB,GAMA,IALA,IAAA8wB,EAAAJ,EACAlmB,EAAA6gB,EAAA7gB,QACAhF,EAAA0Z,EAAA/V,UAAAnJ,GACAhB,EAAAwL,EAAA1L,OAEAE,OACA0xB,EAAAlmB,EAAAxL,IAIAotB,SACAlN,EAAAhW,QAAAunB,EAAAC,OAAAniB,IAAAmiB,GAAAlrB,IAAA,KAEAsrB,GAAA,GAUA,OAHAA,IACAzF,EAAAuF,eAAA,GAEAprB,KA6CA,SAAA8X,EAAAiG,EAAAtkB,EAAAe,GACA,QAAAqC,IAAArC,EAaA,OADAujB,EAAAS,aAAA/kB,EAAAe,GACAuF,KAZA,GAAA,iBAAAtG,EAAA,CACA,IAAA,IAAA8xB,KAAA9xB,EACAqe,EAAAiG,EAAAwN,EAAA9xB,EAAA8xB,IAEA,OAAAxrB,KAEA,OAAAge,EAAAkL,cAAAlL,EAAAkL,aAAAxvB,GACAskB,EAAAiL,aAAAvvB,QADA,EA0BA,SAAA+xB,EAAAzN,EAAA0N,GACA,IAAAC,EAAA3N,EAAA,SAIA,OAHA2N,GAAAD,IACAC,EAAA3N,EAAA,SAbA,SAAAA,GACA,IAAA2N,KAMA,OALAhS,EAAA3Y,KAAAgd,EAAAzG,eAAA,SAAA9d,EAAAse,GACA,GAAAA,EAAAre,KAAAiI,QAAA,WACAgqB,EAAAhW,EAAAoC,EAAAre,KAAAoE,QAAA,QAAA,MAAAgY,EAAAiC,EAAAtd,UAGAkxB,EAMAC,CAAA5N,IAEA2N,EAuBA,SAAAE,EAAA7N,EAAAtkB,EAAAe,GACA,IAAAkxB,EAAAF,EAAAzN,GAAA,GACA2N,EAAAhW,EAAAjc,IAAAe,EAUA,SAAAyO,EAAA8U,EAAAtkB,EAAAe,GAEA,QAAAqC,IAAArC,EAAA,CACA,GAAA,iBAAAf,EAAA,CACA,IAAA,IAAAoyB,KAAApyB,EACAmyB,EAAA7N,EAAA8N,EAAApyB,EAAAoyB,IAEA,OAAA9rB,KAEA,OAzCA,SAAAge,EAAAtkB,GACA,QAAAoD,IAAApD,EACA,OAAA+xB,EAAAzN,GAAA,GAEA,IAAA2N,EAAAF,EAAAzN,GACA,GAAA2N,EAAA,CACA,GAAAjyB,KAAAiyB,EACA,OAAAA,EAAAjyB,GAEA,IAAAqyB,EAAApW,EAAAjc,GACA,GAAAqyB,KAAAJ,EACA,OAAAA,EAAAI,GAGA,IAAAP,EAAA,QAAA9xB,EAAAoE,QAAAusB,EAAA,OAAAjwB,cACA,OAAA2d,EAAAiG,EAAAwN,GA0BAQ,CAAAhO,EAAAtkB,GAIA,OADAmyB,EAAA7N,EAAAtkB,EAAAe,GACAuF,KAQA,SAAAisB,EAAAjO,GACAA,EAAA,iBACAA,EAAA,SAiFA,SAAA/R,EAAA+R,EAAAkO,GACA,YAAApvB,IAAAovB,EACAlO,EAAAmO,aAEAnO,EAAAmO,YAAA,MAAAD,EAAA,GAAA,GAAAA,EACAlsB,MASA,SAAAgY,EAAAgG,EAAAvjB,GACA,IAAA2xB,EAAAlB,EAAAlN,EAAA9jB,OAAAgxB,EAAAlN,EAAAD,SAAA3jB,eACA,QAAA0C,IAAArC,EAgBA,OAAA2xB,GAAA,QAAAA,QAAAtvB,KAAA8J,IAAAwlB,EAAApjB,IAAAgV,EAAA,UACApX,KAGAA,IAAAoX,EAAAvjB,MAGA,iBAAAmM,IACAA,IAAA9I,QAAA,MAAA,IAIA,MAAA8I,IAAA,GAAAA,KAYA,MAAAnM,EACAA,EAAA,GAEA,iBAAAA,EACAA,GAAA,GAEAkf,EAAA1e,QAAAR,KACAA,EAAAkf,EAAAvV,IAAA3J,EAAA,SAAA4xB,GACA,OAAA,MAAAA,EAAA,GAAAA,EAAA,MAKAD,GAAA,QAAAA,QAAAtvB,IAAAsvB,EAAA1U,IAAAsG,EAAAvjB,EAAA,WACAujB,EAAAvjB,MAAAA,GAWA,SAAA6xB,IACA,OAAAA,EA6BA,OAvUA3S,EAAA3Y,MAAA,QAAA,YAAA,WACAkqB,EAAAlrB,OACA0X,IAAA,SAAAoO,EAAArrB,GACA,GAAAkf,EAAA1e,QAAAR,GACA,OAAAqrB,EAAAC,QAAApM,EAAAhW,QAAAqU,EAAA8N,GAAArrB,IAAA,MAgSAwvB,EAAAzE,QAAAtc,KAAA,SAAA4c,EAAArsB,EAAAgT,EAAA8f,GACA,QAAArjB,EAAA4c,EAAAyG,GAAA9f,EAAA,KAQAkN,EAAA7Z,MAAAwsB,GACAE,KAnRA,SAAAxO,EAAAtkB,EAAAe,GACA,OAAAuF,KAAA+X,KAAAiG,EAAA,QAAAtkB,EAAAe,IAoRAsd,KAAAA,EAEAkU,UAAAA,EAEA/iB,KAAAA,EAEAujB,MAlJA,SAAA7O,EAAA8O,GACA,OAAAtoB,EAAA9J,KAAAsjB,EAAA,SAAAI,GACA,OAAAA,EAAA0O,MAkJAhqB,KAxIA,SAAAsb,EAAAtkB,EAAAe,GAEA,OADAf,EAAA4wB,EAAA5wB,IAAAA,OACAoD,IAAArC,EACAujB,EAAAtkB,IAEAskB,EAAAtkB,GAAAe,EACAuF,OAoIA2sB,WA3HA,SAAA3O,EAAAtkB,GAIA,OAHAA,EAAAJ,MAAA,KAAAa,QAAA,SAAA4d,IA7KA,SAAAiG,EAAAtkB,EAAAe,GACA,MAAAA,EACAujB,EAAA4O,gBAAAlzB,GAEAskB,EAAAS,aAAA/kB,EAAAe,GA0KAgkB,CAAAT,EAAAjG,KAEA/X,MAyHA6sB,WA5KA,SAAA7O,EAAA8O,GACA,GAAAA,EAAA,CACAnT,EAAA7e,SAAAgyB,KACAA,EAAAA,EAAAxzB,MAAA,QAEA,IAAAqyB,EAAAF,EAAAzN,GAAA,GACA8O,EAAA3yB,QAAA,SAAAT,UACAiyB,EAAAjyB,UAGAuyB,EAAAjO,GAEA,OAAAhe,MAkKA+sB,WAlHA,SAAA/O,EAAAtkB,GAIA,OAHAA,EAAAJ,MAAA,KAAAa,QAAA,SAAAuI,UACAsb,EAAAtb,KAEA1C,MAgHAiM,KAAAA,EAEA+L,IAAAA,EAEAkT,SAAAA,IAGAtxB,EAAAC,OAAA,YAAAyyB,KAEApzB,OAAA,4BACA,wBACA,sBACA,qBACA,uBACA,SAAAU,EAAA+f,EAAAsF,EAAAgL,GACA,IAUA+C,EAVAC,EAAA7xB,MAAAY,UAAAixB,KACAjuB,EAAA5D,MAAAY,UAAAgD,KAGAf,GAFA7C,MAAAY,UAAAkxB,MACA9xB,MAAAY,UAAA+H,OACA3I,MAAAY,UAAAiC,OAEA4E,GADAzH,MAAAY,UAAAoI,IACAhJ,MAAAY,UAAA6G,QACA1I,EAAAiB,MAAAY,UAAA7B,QACAwH,EAAAvG,MAAAY,UAAA2F,QACA2G,EAAAlN,MAAAY,UAAAsM,KAGA6kB,EAAA,2CAEAvT,EAAAD,EAAAC,QACAve,EAAAse,EAAAte,YACAP,EAAA6e,EAAA7e,SACA0J,EAAAmV,EAAAnV,KACAhK,EAAAmf,EAAAnf,WAEAN,EAAAyf,EAAAzf,KAOAW,GANA8e,EAAA1e,QAEA0e,EAAA5e,SAEA4e,EAAAne,WAEAme,EAAA9e,UAEA8e,EAAA9d,cAEA8d,EAAAtW,QAEAsW,EAAAxW,QAEAwW,EAAAhE,UAEAgE,EAAA9D,UACAoU,EAAAxH,SAEA,SAAA2K,EAAA5pB,EAAA6H,EAAAgiB,GACA,OAAA,SAAAvN,GACA,IAAAwN,EAAA1P,EAAAjE,EAAAvV,IAAA1E,UAAA,SAAA0B,GAEA,MAAA,aADAksB,EAAApzB,EAAAkH,KACA,UAAAksB,GAAA,SAAAA,GAAA,MAAAlsB,EACAA,EAAA6d,EAAAY,eAAAze,KAEA,OAAAwc,EAAArkB,OAAA,EACAyG,MAEAA,KAAAgB,KAAA,SAAAuB,GACAiB,EAAAzD,MAAAsL,GAAArL,KAAA4d,EAAArb,EAAA,MAEAvC,OAIA,SAAAutB,EAAA/pB,EAAA6H,GACA,OAAA,WACA,IACA5L,EAAAxB,EAAA3D,KAAAoF,WACAvB,EAAAwb,EAAAvV,IAFApE,KAEA,SAAA8lB,EAAAvjB,GACA,OAAAiB,EAAAzD,MAAAsL,GAAAya,GAAA/hB,OAAAtE,MAEA,OAAAqI,EAAAtD,EAAArG,KAIA,SAAAqvB,EAAAhqB,EAAA6H,EAAA+Y,GACA,OAAA,SAAAjT,GAEAlT,EAAA3D,KAAAoF,WADA,IAEAvB,EAAA6B,KAAAoE,IAAA,SAAA7B,EAAAujB,GAGA,OAAAtiB,EAAAzD,MAAAsL,EAAA+Y,GAAA0B,IAAAA,EAAA3U,MAGA,OAAAiT,GAAAjT,EACAhT,EAAA0E,OAAAsO,GAEAhT,GAKA,SAAAsvB,EAAAjqB,EAAA6H,EAAA+Y,GACA,OAAA,SAAAsJ,EAAAvc,GAEAlT,EAAA3D,KAAAoF,WADA,IAMAvB,EAAA6B,KAAAoE,IAAA,SAAA7B,EAAAujB,GAGA,OAAAtiB,EAAAzD,MAAAsL,EAAA+Y,GAAA0B,EAAA4H,IAAA5H,EAAA3U,EAAAuc,MAGA,OAAAtJ,GAAAjT,EACAhT,EAAA0E,OAAAsO,GAEAhT,GAMA,SAAAwvB,EAAAnqB,EAAA6H,GACA,OAAA,WACA,IACA5L,EAAAxB,EAAA3D,KAAAoF,WAIA,OAHAM,KAAAgB,KAAA,SAAAuB,EAAA4Q,GACA3P,EAAAzD,MAAAsL,GAAArL,MAAA+D,OAAAtE,MAHAO,MAwDA,SAAA4tB,EAAApqB,EAAA6H,EAAAgiB,GACA,OAAA,SAAA5yB,GAGA,OAAAkf,EAAApe,UAAAd,IACAN,EAAAG,KAHA0F,KAGA,SAAA8lB,EAAAvjB,GACA,IAAAsrB,EAEAA,EADAR,EACAzT,EAAAkM,EAAArrB,EAAA8H,EAAA8qB,EAAAvH,IAEArrB,EAEA+I,EAAAzD,MAAAsL,GAAAya,EAAA+H,MAVA7tB,MAAAA,KAcA,GACAwD,EAAAzD,MAAAsL,GAfArL,KAeA,UADA,GAQA,IAkfAqhB,EAlfAyM,EAAAnU,EAAA1S,OACAf,UAAA,aACArB,KAAA,SAAAsM,EAAA9F,GACA,IACAoB,EAAAmR,EAAAzK,EAAArO,EAsDA,GApDAqM,IAHAnR,KAIAqL,QAAAA,EAAAA,GAAA4T,EAAAE,MAEArkB,EAAAqW,IANAnR,KAQAmR,SAAAA,GAGA1E,EADA,MAAA0E,EAAAiF,OAAA,IAAA,MAAAjF,EAAAiF,OAAAjF,EAAA5X,OAAA,IAAA4X,EAAA5X,QAAA,GACA,KAAA4X,EAAA,MAEAgc,EAAAtZ,KAAA1C,IAIA1E,EAAA,IAEAmR,EAAAqB,EAAAY,eAAA1O,GAEAwI,EAAA9d,cAAAwP,KACAvG,EAAAuG,KAIA8H,EAAA8W,EAAAE,KAAA1d,EAAA,GAAAwS,EAAAF,SAAA1T,OAIAuS,GAAAzK,KAMAwG,EAAA7e,SAAAuQ,KACAA,EAAA4e,EAAA3D,KAAAjb,IAGAuS,EAAAqM,EAAAnC,YAAAzc,EAAA8F,KAKAyM,EAFAzM,IAAAnW,QAAAK,EAAA8V,GAEAA,GAGAA,IAOAyM,IAEA5e,EAAAe,MAzDAC,KAyDA4d,GAEA9Y,GACA,IAAA,IAAApL,KAAAoL,EAEA6U,EAAAnf,WAAAwF,KAAAtG,IACAsG,KAAAtG,GAAAoL,EAAApL,IAEAsG,KAAA+X,KAAAre,EAAAoL,EAAApL,IAMA,OAvEAsG,QA2EA8H,EAAA,WACAklB,EAAA,SAAA9xB,GACA,OAAAA,aAAA4yB,GAEAjpB,KAAA,SAAAsM,EAAA9F,GACA,OAAA,IAAAyiB,EAAA3c,EAAA9F,IAGA,IAAAgW,EAAA,SAAAlQ,EAAA9F,GACA,IAAA7Q,EAAA2W,GAIA,OAAA6b,EAAA7b,GACAA,EAEA9F,GAAA2hB,EAAA3hB,IAAAvQ,EAAAqW,GACA9F,EAAAib,KAAAnV,GAEAtM,KAAAsM,EAAA9F,GATAgW,EAAA0M,MAAA,WACA5c,EAAAkQ,MAYAA,EAAAld,GAAA2pB,EAAA9xB,UACA2d,EAAA7Z,MAAAuhB,EAAAld,IAGA5K,OAAA,EAEA6K,IAAA,SAAAD,GACA,OAAAkd,EAAA7c,EAAAmV,EAAAvV,IAAApE,KAAA,SAAAof,EAAA3lB,GACA,OAAA0K,EAAA7J,KAAA8kB,EAAA3lB,EAAA2lB,QAIAnhB,MAAA,WACA,OAAAojB,EAAApjB,EAAA8B,MAAAC,KAAAN,aAGAvF,QAAA,WACA,OAAAA,EAAA4F,MAAAC,KAAAN,YAGAsJ,IAAA,SAAAzG,GACA,YAAAzF,IAAAyF,EAAAtE,EAAA3D,KAAA0F,MAAAA,KAAAuC,GAAA,EAAAA,EAAAA,EAAAvC,KAAAzG,SAGAoI,QAAA,WACA,OAAAA,EAAA5B,MAAAC,KAAAN,YAGA4I,KAAA,WACA,OAAAA,EAAAvI,MAAAC,KAAAN,YAGAsuB,QAAA,WACA,OAAA/vB,EAAA3D,KAAA0F,OAGAiuB,KAAA,WACA,OAAAjuB,KAAAzG,QAIAkQ,OAAA,SAAA0H,GACA,OAAAA,EACAnR,KAAAsmB,KAAAnV,GAAA1H,UAEAzJ,KAAAgB,KAAA,SAAAvH,EAAA0Z,GACA8L,EAAAxV,OAAA0J,KAEAnT,OAGAgB,KAAA,SAAAC,GAEA,OADA0Y,EAAA3Y,KAAAhB,KAAAiB,GACAjB,MAGA6C,OAAA,SAAAsO,GACA,OAAA3W,EAAA2W,GAAAnR,KAAA2mB,IAAA3mB,KAAA2mB,IAAAxV,IACAkQ,EAAAxe,EAAAvI,KAAA0F,KAAA,SAAA+gB,GACA,OAAAkJ,EAAAnhB,QAAAiY,EAAA5P,OAIA3H,IAAA,SAAA2H,EAAA9F,GACA,OAAAgW,EAAA7c,EAAAxE,KAAAguB,UAAAjqB,OAAAsd,EAAAlQ,EAAA9F,GAAA2iB,cAGA1M,GAAA,SAAAnQ,GACA,GAAAnR,KAAAzG,OAAA,EAAA,CAEA,GAAAogB,EAAA7e,SAAAqW,GACA,OAAA8b,EAAA3yB,KAFA0F,KAEA,SAAA8lB,GACA,OAAAmE,EAAAnhB,QAAAgd,EAAA3U,KAEA,GAAAwI,EAAAte,YAAA8V,GACA,OAAA8b,EAAA3yB,KANA0F,KAMA,SAAA8lB,GACA,OAAAnM,EAAAhW,QAAAmiB,EAAA3U,IAAA,IAEA,GAAAwI,EAAAjf,WAAAyW,GACA,OAAA8b,EAAA3yB,KAVA0F,KAUA,SAAA8lB,GACA,OAAAA,GAAA3U,IAIA,OAAA,GAGAwV,IAAA,SAAAxV,GACA,IAAAyM,KACA,GAAApjB,EAAA2W,SAAArU,IAAAqU,EAAA7W,KACA0F,KAAAgB,KAAA,SAAAuB,EAAA4Q,GACAhC,EAAA7W,KAAA0F,KAAAuC,EAAA4Q,IAAAyK,EAAA5e,KAAAgB,YAEA,CACA,IAAAkuB,EAAA,iBAAA/c,EAAAnR,KAAA6C,OAAAsO,GACA9V,EAAA8V,IAAA3W,EAAA2W,EAAA7O,MAAArE,EAAA3D,KAAA6W,GAAAkQ,EAAAlQ,GACAnR,KAAA7F,QAAA,SAAAilB,GACA8O,EAAAvsB,QAAAyd,GAAA,GAAAxB,EAAA5e,KAAAogB,KAGA,OAAAiC,EAAAzD,IAGA3e,IAAA,SAAAkS,GACA,OAAAnR,KAAA6C,OAAA,WACA,OAAAhI,EAAAsW,GACA8N,EAAAH,SAAA9e,KAAAmR,GACAkQ,EAAArhB,MAAAsmB,KAAAnV,GAAA8c,UAIA3vB,GAAA,SAAAiE,GACA,OAAA,IAAAA,EAAAvC,KAAA/B,MAAAsE,GAAAvC,KAAA/B,MAAAsE,GAAAA,EAAA,IAGAe,MAAA,WACA,OAAAtD,KAAA1B,GAAA,IAGA8lB,KAAA,WACA,OAAApkB,KAAA1B,IAAA,IAGAgoB,KAAAkH,EAAAvD,EAAAnC,YAAAmC,GAEAzI,QAAAgM,EAAAvD,EAAAzI,QAAAyI,GAaAkE,QAAAX,EAAAvD,EAAAtC,UAAAsC,GAEAmE,aAAAX,EAAAxD,EAAAtC,UAAAsC,GAGAllB,OAAAyoB,EAAAvD,EAAAllB,OAAAklB,GAEAxH,SAAA+K,EAAAvD,EAAAxH,SAAAwH,GAEAvK,SAAA6N,EAAAtO,EAAAS,SAAAT,GAEAoB,MAAAsN,EAAA1O,EAAAoB,MAAApB,GAEAa,KAAA8N,EAAA3O,EAAAa,KAAAb,GAGAwN,MAAA,SAAAC,GACA,OAAA/S,EAAAvV,IAAApE,KAAA,SAAAof,GACA,OAAAA,EAAAsN,MAIA2B,UAAA,SAAAC,GACA,IAAA1nB,EAAAya,EAAAiN,GAEA,OADA1nB,EAAA2nB,WAAAvuB,KACA4G,GAGA4nB,YAAA,SAAAC,GACA,OAAAzuB,KAAAoK,OAAAqkB,GAAAhlB,UAGAilB,KAAA,SAAA5O,GAcA,IAAA6O,EAAA,mBAAA7O,EAEA,OAAA9f,KAAAgB,KAAA,SAAAvH,GACA4nB,EAAArhB,MAAA4uB,QAAAD,EAAA7O,EAAAxlB,KAAA0F,KAAAvG,GAAAqmB,MAIA8O,QAAA,SAAA9O,GAaA,IAAA4O,EAyBA,OAvBA1uB,KAAA,KACA,mBAAA8f,IACAA,EAAAA,EAAAxlB,KAAA0F,KAAA,KAIA0uB,EAAArN,EAAAvB,EAAA9f,KAAA,GAAAgf,eAAA1gB,GAAA,GAAAoC,OAAA,GAEAV,KAAA,GAAAse,YACAoQ,EAAAvM,aAAAniB,KAAA,IAGA0uB,EAAAtqB,IAAA,WAGA,IAFA,IAAA0hB,EAAA9lB,KAEA8lB,EAAA+I,mBACA/I,EAAAA,EAAA+I,kBAGA,OAAA/I,IACAzH,OAAAre,OAGAA,MAIA8uB,UAAA,SAAAhP,GAUA,MAAA,mBAAAA,EACA9f,KAAAgB,KAAA,SAAAvH,GACA4nB,EAAArhB,MAAA8uB,UAAAhP,EAAAxlB,KAAA0F,KAAAvG,MAIAuG,KAAAgB,KAAA,WACA,IAAAyM,EAAA4T,EAAArhB,MACA0f,EAAAjS,EAAAiS,WAEAA,EAAAnmB,OACAmmB,EAAAkP,QAAA9O,GAGArS,EAAA4Q,OAAAyB,MAMAkD,OAAA,SAAA7R,GAiBA,OAHAnR,KAAA+E,OAAAoM,GAAAwV,IAAA,QAAA3lB,KAAA,WACAqgB,EAAArhB,MAAAwuB,YAAAxuB,KAAA4f,cAEA5f,MAIAU,MAAA,WACA,OAAAV,KAAAoE,IAAA,WACA,OAAApE,KAAA8d,WAAA,MAKAiR,OAAA,SAAAC,GACA,OAAAhvB,KAAAgB,KAAA,WACA,IAAAoe,EAAAiC,EAAArhB,YACAlD,IAAAkyB,EAAA,QAAA5P,EAAA6P,IAAA,WAAAD,GAAA5P,EAAA8P,OAAA9P,EAAA+P,UAIA1W,KAAA,SAAAtH,GACA,OAAAkQ,EAAArhB,KAAAysB,MAAA,2BAAA5pB,OAAAsO,GAAA,MAGAie,QAAA5B,EAAAvD,EAAAzB,iBAAAyB,GAEA5f,KAAA,SAAA8G,GACA,OAAAkQ,EAAArhB,KAAAysB,MAAA,uBAAA5pB,OAAAsO,GAAA,MAGAke,QAAA7B,EAAAvD,EAAA1B,aAAA0B,GAEAxB,SAAA+E,EAAAvD,EAAAxB,SAAAwB,GAEAnpB,MAAA,SAAAglB,GACA,OAAAA,EACA9lB,KAAA2B,QAAA0f,EAAAyE,GAAA,IAEA9lB,KAAA+E,SAAA0d,WAAA9gB,QAAA3B,KAAA,OAMAqhB,EAAAld,GAAAmrB,OAAAjO,EAAAld,GAAAsF,OAEA4X,EAAAld,GAAAorB,MAAA,SAAAC,EAAAC,GACA,OAAAzvB,KAAA0vB,WAAAF,GAAAG,WAAAF,GAAAD,IAIAvQ,EAAA2D,SAiEA,OA9DAvB,EAAAld,GAAAoG,MAAA6iB,EAAAnO,EAAA1U,MAAA0U,GAEAoC,EAAAld,GAAAie,QAAAgL,EAAAnO,EAAAmD,QAAAnD,GAEAoC,EAAAld,GAAAiG,OAAAgjB,EAAAnO,EAAA7U,OAAA6U,GAEAoC,EAAAld,GAAAka,OAAA+O,EAAAnO,EAAAZ,OAAAY,GAGAtF,EAAA3Y,MACA4uB,SAAA,SACAC,UAAA,UACA1N,aAAA,SACA2N,YAAA,QACAC,WAAA,eACA,SAAAr2B,EAAAs2B,GACA3O,EAAAld,GAAAzK,GAAA,SAAAyX,GAOA,IANA,IAAA8e,EACArpB,KACAspB,EAAA7O,EAAAlQ,GACAiT,EAAA8L,EAAA32B,OAAA,EACAE,EAAA,EAEAA,GAAA2qB,EAAA3qB,IACAw2B,EAAAx2B,IAAA2qB,EAAApkB,KAAAA,KAAAU,OAAA,GACA2gB,EAAA6O,EAAAz2B,IAAAu2B,GAAAC,GAIAjxB,EAAAe,MAAA6G,EAAAqpB,EAAAjnB,OAGA,OAAAhJ,KAAAquB,UAAAznB,MA8BAya,EAjaA,GA2kBA,OAvKAA,EAmBAvZ,GAlBA3D,GAAAgsB,aAAA,SAAAC,GACA,IAAAtO,EAAA9hB,KAAAivB,IAAA,YACAoB,EAAA,aAAAvO,EACAwO,EAAAF,EAAA,uBAAA,gBACAD,EAAAnwB,KAAAmuB,UAAAtrB,OAAA,WACA,IAAAkC,EAAAsc,EAAArhB,MACA,QAAAqwB,GAAA,WAAAtrB,EAAAkqB,IAAA,cAGAqB,EAAAtyB,KAAA+G,EAAAkqB,IAAA,YAAAlqB,EAAAkqB,IAAA,cACAlqB,EAAAkqB,IAAA,iBACA3wB,GAAA,GAEA,MAAA,UAAAwjB,GAAAqO,EAAA52B,OAEA42B,EADA9O,EAAArhB,KAAA,GAAAgf,eAAAtL,WAOA,SAAA2N,GACAA,EAAAld,GAAAwY,IAAA,WACA,OAAA3c,KAAAuuB,YAAAlN,KAGAA,EAAAld,GAAAosB,QAAA,WACA,OAAAvwB,KAAAwJ,IAAAxJ,KAAAuuB,YAAAlN,MAGAA,EAAAld,GAAAqsB,QAAA,SAAArf,GACA,OAAAnR,KAAAuuB,WACApd,EACAnR,KAAAwJ,IAAAxJ,KAAAuuB,WAAA1rB,OAAAsO,IAEAnR,KAAAwJ,IAAAxJ,KAAAuuB,YAGAvuB,MAIA,uGAAA1G,MAAA,KAAAa,QAAA,SAAAuyB,GACA,IAAAvoB,EAAAkd,EAAAld,GAAAuoB,GACArL,EAAAld,GAAAuoB,GAAA,WACA,IAAA9lB,EAAAzC,EAAApE,MAAAC,KAAAN,WAEA,OADAkH,EAAA2nB,WAAAvuB,KACA4G,KA1BA,CA6BAkB,GAGA,SAAAuZ,GA6DA,IACAoP,EA7DApP,EAAAld,GAAA2D,MAAAuZ,EAAAld,GAAAmiB,KAEAjF,EAAAld,GAAAusB,MAAA,SAAAzO,EAAAH,GAwBA,OALAnI,EAAA7e,SAAAmnB,GACAA,EAAAgI,EAAAhC,WAAAhG,GACA+K,EAAA/K,KACAA,EAAAA,EAAA,IAEAjiB,KAAAgB,KAAA,SAAAvH,EAAA0Z,GACA,OAAA2O,GACA,IAAA,SACA7C,EAAA7U,OAAA6X,EAAA9O,GACA,MACA,IAAA,QACA8L,EAAA1U,MAAA0X,EAAA9O,GACA,MACA,IAAA,UACA8L,EAAAnhB,QAAAmkB,EAAA9O,GACA,MACA,IAAA,OACA8L,EAAAoB,MAAA4B,GACAhD,EAAAZ,OAAA4D,EAAA9O,GACA,MACA,IAAA,QACA8L,EAAAmD,QAAAH,EAAA9O,GACA,MAEA,QACA8L,EAAAZ,OAAA4D,EAAA9O,OAKAkO,EAAAld,GAAAwsB,WAAA,SAAAC,EAAA9O,GAIA,OAHA8O,EAAA5kB,WACA4kB,EAAAjX,EAAAnD,WAAAoa,EAAA5kB,SAAA4kB,IAEA5wB,KAAAqe,OAAAuS,IAKAvP,EAAAld,GAAA0sB,kBACAJ,EAAA,kBAAA/c,SAAA2H,cAAA,OACA,cACA,YAEA,WACA,OAAArb,KAAAiR,GAAAwf,EAAA,uBAAA,SAAA3f,GACAA,EAAAggB,qBAKAzP,EAAAld,GAAA4sB,gBAAA,WACA,OAAA/wB,KAAAuS,IAAA,yBAGA8O,EAAAld,GAAAke,OAAA,WACA,OAAApD,EAAA+R,KAAAhxB,KAAA,KAGAqhB,EAAAld,GAAA8sB,YAAA,WACA,OAAAhS,EAAAgS,YAAAjxB,KAAA,KAlFA,CAsFA8H,GAEAA,EAAA3D,GAAA+sB,OAAA,SAAAx3B,EAAAuL,GACA,IAAAzF,EAAAvB,EAAA3D,KAAAoF,UAAA,GACA+N,EAAAzN,KACAmxB,EAAAnxB,KAKA,OAHAA,KAAAgB,KAAA,WACAmwB,EAAAC,QAAAC,YAAAtxB,MAAA0N,GAAAzN,KAAAtG,GAAAqK,OAAAvE,MAEA2xB,GAIArpB,EAAAwpB,OACAlE,uBAAAA,EACAG,YAAAA,EACAK,cAAAA,EACAJ,iBAAAA,EACA+D,iBA5sBA,SAAA/tB,EAAA6H,GACA,OAAA,WACA,IACA5L,EAAAxB,EAAA3D,KAAAoF,WACA,OAAAutB,EAAA3yB,KAFA0F,KAEA,SAAA8lB,GACA,OAAAtiB,EAAAzD,MAAAsL,GAAAya,GAAA/hB,OAAAtE,QAwsBAguB,uBAAAA,EACA+D,+BA1tBA,SAAAhuB,EAAA6H,EAAAgiB,GACA,OAAA,SAAA/T,GACA,IACA7Z,EAAAxB,EAAA3D,KAAAoF,WAKA,OAJAvF,EAAAG,KAFA0F,KAEA,SAAA8lB,EAAAvjB,GACAqX,EAAAkM,EAAAxM,EAAA/W,EAAA8qB,EAAAvH,IACAtiB,EAAAzD,MAAAsL,GAAAya,EAAAxM,GAAAvV,OAAAtE,EAAAxB,MAAA,OAJA+B,OAytBA2tB,kBAAAA,EACA8D,mBAtsBA,SAAAjuB,EAAA6H,EAAAgiB,GACA,OAAA,SAAA3zB,EAAAe,GACA,IACAgF,EAAAxB,EAAA3D,KAAAoF,WAEA,OAAAia,EAAA9d,cAAAnC,IAAAigB,EAAApe,UAAAd,IACAN,EAAAG,KAJA0F,KAIA,SAAA8lB,EAAAvjB,GAEA8qB,GACAzT,EAAAkM,EAAArrB,EAAA8H,EAAA8qB,EAAAvH,EAAApsB,IAIA8J,EAAAzD,MAAAsL,GAAAya,GAAA/hB,OAAAtE,MAXAO,MAAAA,KAeA,GACAwD,EAAAzD,MAAAsL,GAhBArL,KAgBA,GAAAtG,SADA,KAyrBAE,EAAAC,OAAA,aAAAiO,KAGA5O,OAAA,2BACA,WACA,SAAA4O,GACA,OAAAA,IAEA5O,OAAA,sBAAA,2BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,0BACA,wBACA,sBACA,qBACA,sBACA,sBACA,SAAAU,EAAA+f,EAAAsF,EAAAgL,EAAA5I,GACA,IAAAjd,EAAAhJ,MAAAY,UAAAoI,IACAnG,EAAA7C,MAAAY,UAAAiC,MAKAyzB,EAAA/X,EAAA1S,OACAf,UAAA,gBAEAtB,WAAA,SAAAuO,GACAwG,EAAA7e,SAAAqY,KAGAA,EAFA,MAAAA,EAAAiD,OAAA,GAEA6I,EAAAY,eAAA1M,GAAA,GAGAO,SAAA+B,eAAAtC,IAGAnT,KAAA2xB,KAAAxe,KAIAue,EAAA11B,UAAAqlB,EAAAqQ,EAAA11B,UAAA8L,MAAA,SAAAqJ,GACA,OAAAkQ,EAAAlQ,EAAAnR,KAAA2xB,OAGAD,EAAA11B,UAAAgiB,IAAA,WACA,OAAAhe,KAAA2xB,MAMA,IAAA/J,EAAA,IAAA8J,EAAAhe,SAAA0B,MACAwc,EAAA,SAAAze,GACA,OAAAA,EACA,IAAAue,EAAAve,GAEAyU,GAgIA,OA7FAjO,EAAA7Z,MAAA8xB,GACAC,MAAA,SAAAjU,EAAAkU,EAAAtyB,GAMA,OALAoe,EAAAzjB,QAAA,SAAAgZ,GACA,IAAA6K,EAAA7K,aAAAue,EAAAve,EAAAye,EAAAze,GACA6K,EAAA8T,GAAA/xB,MAAAie,EAAAxe,KAGAQ,MAGA4nB,KAAA,IAAA8J,EAAAhe,SAAA0B,MAEAsc,cAAAA,EAEAtrB,QAAA,SAAA1M,EAAAyK,GACA,IAAAW,KAEAA,EAAApL,GAAAyK,EAEAutB,EAAAtrB,QAAAtB,IAGA4C,SAAA,SAAAolB,EAAAzhB,GACA,IAAAvG,KAEAgoB,EAAA3yB,QAAA,SAAAT,GACAoL,EAAApL,GArDA,SAAAyK,EAAAkH,GACA,OAAA,WACA,IACAya,EADA9lB,KACA2xB,KACA/qB,EAAAzC,EAAApE,MAAAsL,GAAAya,GAAA/hB,OAAA9F,EAAA3D,KAAAoF,aAEA,GAAAkH,EAAA,CACA,GAAAA,IAAAyE,EACA,OANArL,KAQA4G,aAAAmrB,YACAnrB,EAAA,IAAA8qB,EAAA9qB,GACA+S,EAAAte,YAAAuL,KACAA,EAAAxC,EAAA9J,KAAAsM,EAAA,SAAAwY,GACA,OAAAA,aAAA2S,YACA,IAAAL,EAAAtS,GAEAA,KAMA,OAAAxY,GA8BAorB,CAAA3mB,EAAA3R,GAAA2R,KAGAqmB,EAAAtrB,QAAAtB,MAKA8sB,EAAAlqB,UACA,WACA,YACA,WACA,aACA,OACA,UACA,aACA,YACA,UACA,cACA,eACA,SACA,kBACA,mBACA,YACAuiB,GAMA2H,EAAAtL,KAAA,SAAAnV,GACA,MAAA,SAAAA,EACAnR,KAAA4nB,KAEA5nB,KAAA4nB,KAAAK,WAAA9W,IAMAygB,EAAAlqB,UACA,QACA,SACA,SACA,QACA,WACA,WACA,QACA,OACA,YACA,aACA,eACA,WACA,WACA,UACA,SACA,cACA,UACA,UACA,QACA,WACA,UACA,eACA,UACAuX,GAGArlB,EAAAC,OAAA,YAAA+3B,KAEA14B,OAAA,0BACA,UACA,SAAA04B,GACA,OAAAA,IAEA14B,OAAA,qBAAA,0BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,0BACA,SACA,oBACA,sBACA,SAAAgQ,EAAA0oB,EAAAvQ,GA6BA,OA3BAuQ,EAAAlqB,UACA,OACA,OACA,OACA,aACA,aACA,OACA,OACAwB,GAEAmY,EAAAld,GAAA8H,KAAAoV,EAAAiQ,MAAA1D,cAAA1kB,EAAA+C,KAAA/C,EAAAA,EAAA+C,MAEAoV,EAAAld,GAAA4T,KAAAsJ,EAAAiQ,MAAAG,mBAAAvoB,EAAA6O,KAAA7O,EAAAA,EAAA6O,MAEAsJ,EAAAld,GAAAwoB,WAAAtL,EAAAiQ,MAAA3D,kBAAAzkB,EAAAyjB,WAAAzjB,GAEAmY,EAAAld,GAAAzB,KAAA2e,EAAAiQ,MAAAG,mBAAAvoB,EAAAxG,KAAAwG,EAAAA,EAAAxG,MAEA2e,EAAAld,GAAA4oB,WAAA1L,EAAAiQ,MAAA3D,kBAAAzkB,EAAA6jB,WAAA7jB,GAEAmY,EAAAld,GAAA+E,KAAAmY,EAAAiQ,MAAAG,mBAAAvoB,EAAAA,KAAAA,EAAAA,EAAAA,MAEAmY,EAAAld,GAAA0oB,WAAAxL,EAAAiQ,MAAA3D,kBAAAzkB,EAAA2jB,WAAA3jB,GAEAmY,EAAAld,GAAA6T,IAAAqJ,EAAAiQ,MAAA1D,cAAA1kB,EAAA8O,IAAA9O,EAAAA,EAAA8O,KAGA9O,IAEAhQ,OAAA,qBAAA,0BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,gCACA,wBACA,sBACA,uBACA,sBACA,qBACA,qBACA,SAAAU,EAAA+f,EAAAzG,EAAA+W,EAAAhL,EAAAqN,GACA3S,EAAA7Z,MAAA,IACAkB,EAAA2Y,EAAA3Y,KAEAoZ,GADAhf,MAAAY,UAAAiC,MACA0b,EAAAS,KACA6X,EAAA,mCACAC,GACApB,eAAA,qBACAqB,yBAAA,gCACAC,gBAAA,wBAEAC,EAAA,8BAEA,SAAAC,EAAAxhB,EAAA1R,GAeA,OAdAA,GAAA0R,EAAAyhB,qBACAnzB,IACAA,EAAA0R,GAGA6I,EAAA3Y,KAAAkxB,EAAA,SAAAx4B,EAAAsJ,GACA,IAAAwvB,EAAApzB,EAAA1F,GACAoX,EAAApX,GAAA,WAEA,OADAsG,KAAAgD,GAAA2W,EAAA7N,WACA0mB,GAAAA,EAAAzyB,MAAAX,EAAAM,YAEAoR,EAAA9N,GAAA2W,EAAA5N,eAGA+E,EAGA,SAAAD,EAAAC,GACA,IAAAC,GAAA,GAAAD,GAAAxX,MAAA,KACA,OACAY,KAAA6W,EAAA,GACAvX,GAAAuX,EAAA9S,MAAA,GAAAqK,OAAAkE,KAAA,MAKA,IAAAimB,GACAz3B,OAAA,YACAA,OAAA,iBACAA,OAAA,UACAA,OAAA,MACAA,OAAA,WACAA,OAAA,cACAA,OAAA,aACAA,OAAA,WACAA,OAAA,iBACAA,OAAA,gBACAA,OAAA,cACAA,OAAA,cACAA,OAAA,UACAA,OAAA,WACAA,OAAA,QACAA,OAAA,WACAA,OAAA,gBAEA03B,GACAC,iBAAA,EACAC,eAAA,EACAC,kBAAA,EAEAC,WAAA,GACAC,UAAA,GACAC,YAAA,GACAnyB,KAAA,GACAoyB,IAAA,GACAC,MAAA,GAEAC,KAAA,EACAC,QAAA,EACAC,UAAA,EACAC,SAAA,EACAC,UAAA,EACAC,SAAA,EACAC,UAAA,EACAC,KAAA,EAEAC,MAAA,EACAC,OAAA,EACA5kB,MAAA,EACA6kB,gBAAA,EACApM,OAAA,EACAC,MAAA,EAEAxB,MAAA,EACA5G,KAAA,EACAwU,QAAA,EACAC,SAAA,EAEAC,QAAA,EACAC,SAAA,EACAC,MAAA,EAEAC,QAAA,EAEAC,MAAA,EACAC,YAAA,EACAC,SAAA,EACAC,UAAA,EACAC,QAAA,EACAC,UAAA,EACAC,UAAA,EACAC,SAAA,EACAjF,WAAA,EACAC,WAAA,EAGAiF,UAAA,GAEAC,WAAA,GACAC,UAAA,GACAC,SAAA,GAEAC,KAAA,GACAC,OAAA,GACA7J,OAAA,GACA8J,OAAA,GACAC,OAAA,GAEAC,MAAA,IAIAxiB,EAAA,WAUA,OAAA,SAAA1Y,EAAA4K,GAGA6U,EAAA7e,SAAAZ,GACA4K,EAAAA,MAGA5K,GADA4K,EAAA5K,OACAA,MAAA,GAEA,IAAAoX,EAAAT,EAAA3W,GACAA,EAAAoX,EAAApX,KAEA4K,EAAA6U,EAAA7Z,OACAu1B,SAAA,EACAC,YAAA,GACAxwB,GAEAwM,EAAA9X,KACAsL,EAAAywB,UAAAjkB,EAAA9X,IAGA,IAAA2L,EA7BA,SAAAjL,GACA,IAAAqI,EAAAmwB,EAAAx4B,GACAqI,IACAA,EAAA,GAEA,OAAAkwB,EAAAlwB,GAwBAizB,CAAAt7B,GACA2S,EAAA,IAAA1H,EAAAjL,EAAA4K,GAIA,OAFA6U,EAAAhX,UAAAkK,EAAA/H,GAEAwtB,EAAAzlB,IApCA,GAwCA,SAAA4oB,EAAA90B,EAAAmE,GACA,IAAA/F,EACA6M,GACA8pB,cAAA/0B,GAEA,IAAA5B,KAAA4B,EACA,kBAAA5B,GAAAkzB,EAAAj0B,KAAAe,SAAAjC,IAAA6D,EAAA5B,KACA6M,EAAA7M,GAAA4B,EAAA5B,IAMA,OAHA+F,GACA6U,EAAA7Z,MAAA8L,EAAA9G,GAEAwtB,EAAA1mB,EAAAjL,GAGA,IACAg1B,KACAC,EAAA,cAAA56B,OACAkrB,GAAAA,MAAA,UAAA5G,KAAA,YACAiQ,GAAAG,WAAA,YAAAC,WAAA,YACAkG,EAAA,SAAA37B,GACA,OAAAq1B,EAAAr1B,IAAA07B,GAAA1P,EAAAhsB,IAAAA,GAEA47B,KACAC,EAAApc,EAAA1S,OACApC,KAAA,SAAA1F,EAAA2R,GACA9Q,KAAAg2B,QAAA72B,EACAa,KAAAi2B,OAAAnlB,EACA9Q,KAAAk2B,cAGA1sB,IAAA,SAAArF,EAAAc,GACA,IAAAkxB,EAAAn2B,KAAAk2B,UACAE,GACAjyB,GAAAA,EACAc,QAAA0U,EAAA7Z,SAAAmF,IAGAkxB,EAAAn3B,KAAAo3B,GAEA,IAAA3oB,EAAAzN,KACA,IAAAyN,EAAA4oB,UAAA,CACA5oB,EAAA4oB,UAAA,SAAAC,GACA,IAAAtY,EAAAhe,KACA6M,EAAA4oB,EAAAa,GACA92B,EAAA82B,EAAAC,MACAJ,EAAA1oB,EAAAyoB,UACA18B,EAAAqT,EAAA0oB,UAGA/1B,EADAma,EAAApe,UAAAiE,IACAqN,GAAA9I,OAAAvE,IAEAqN,GAGA8M,EAAA3Y,KAAAm1B,EAAA,SAAA5zB,EAAA6zB,GACA,IAAA3pB,EAAAuR,EACA,GAAAnR,EAAA2pB,+BAAA3pB,EAAA2pB,gCACA,OAAA,EAEA,IAAAryB,EAAAiyB,EAAAjyB,GACAc,EAAAmxB,EAAAnxB,YACAkM,EAAAlM,EAAAkM,SACAC,EAAAnM,EAAAmM,IACAlI,EAAAjE,EAAAiE,KAEA,IAAA1P,GAAAA,GAAAyL,EAAAzL,KAAA,IAAAyL,EAAAzL,GAAAmI,QAAAnI,GAAA,CAGA,GAAA2X,EAAA,CAEA,KADA1E,EAAAwd,EAAAzI,QAAA3U,EAAA1N,OAAAgS,KACA1E,IAAAuR,EAMA,OALArE,EAAA7Z,MAAA+M,GACA4pB,cAAAhqB,EACAiqB,UAAA1Y,IAOA,IAAA0X,EAAAjoB,EAAAwoB,OACA,GAAAP,KAAAnG,EAAA,CACA,IAAAoH,EAAA9pB,EAAA+pB,cACA,GAAAD,IAAAA,IAAAlqB,GAAAwS,EAAAH,SAAArS,EAAAkqB,IACA,OAIAhd,EAAApe,UAAA2N,KACA2D,EAAA3D,KAAAA,GAGAkI,GACA3D,EAAAhE,OAAAtF,EAAAc,GAGA,IAAA9G,EAAAgG,EAAApE,MAAA0M,EAAAjN,IAEA,IAAArB,IACA0O,EAAAikB,iBACAjkB,EAAAulB,uBAKA,IAAAthB,EAAArD,EAAAwoB,OAaAxoB,EAAAuoB,QAAAa,iBACAppB,EAAAuoB,QAAAa,iBAAAhB,EAAA/kB,GAAArD,EAAA4oB,WAAA,GAEA9T,QAAAC,KAAA,yBAAA/U,EAAAuoB,WAKAvsB,OAAA,SAAAtF,EAAAc,GAMA,IAAAoH,EAHA7S,GAFAyL,EAAA0U,EAAA7Z,SAAAmF,IAMAzL,KAJAA,EAKAyL,EAAAzL,GAAA6S,EAJA,IAAAC,OAAA,UAAA9S,EAAAsE,QAAA,IAAA,SAAA,YAOAkC,KAAAk2B,UAAAl2B,KAAAk2B,UAAArzB,OAAA,SAAAuzB,GACA,IAAAU,IAAA3yB,GAAAA,IAAAiyB,EAAAjyB,OACAkI,GAAAA,EAAArO,KAAAo4B,EAAAnxB,QAAAzL,QACAyL,EAAAkM,UAAAlM,EAAAkM,UAAAilB,EAAAnxB,QAAAkM,UAEA,OAAA2lB,IAEA,GAAA92B,KAAAk2B,UAAA38B,SACAyG,KAAAg2B,QAAAe,qBACA/2B,KAAAg2B,QAAAe,oBAAAlB,EAAA71B,KAAAi2B,QAAAj2B,KAAAq2B,WAAA,GAEAr2B,KAAAq2B,UAAA,SAIAW,EAAArd,EAAA1S,OACApC,KAAA,SAAAmZ,GACAhe,KAAAg2B,QAAAhY,EACAhe,KAAAi3B,aAKAC,SAAA,SAAApmB,EAAA7P,EAAAgE,GAEA,IAAAqM,EAAAT,EAAAC,GACAA,EAAAQ,EAAApX,KACAi9B,EAAAxB,EAAA7kB,GACAsmB,EAAAD,IAAAA,EAAAE,UAAAF,EAAAG,eAEApmB,EAAAlR,KAAAi3B,cAGAn6B,IAAAoU,EAAAJ,KACAI,EAAAJ,GAAA,IAAAilB,EAAA/1B,KAAAg2B,QAAAoB,GAAAtmB,IAIAI,EAAAJ,GAAAtH,IAAAvI,EAAA0Y,EAAA7Z,OACAtG,GAAA8X,EAAA9X,IACAyL,KAIAsyB,WAAA,SAAAzmB,EAAA3M,EAAAc,GAEA,IAAAiM,EAAAlR,KAAAi3B,SACA3lB,EAAAT,EAAAC,GAGA,GAFAA,EAAAQ,EAAApX,KAEA,CACA,IAAA6U,EAAAmC,EAAAJ,GAEA/B,GACAA,EAAAtF,OAAAtF,EAAAwV,EAAA7Z,OACAtG,GAAA8X,EAAA9X,IACAyL,SAIA,IAAA6L,KAAAI,EAAA,CACA,IAAAnC,EAAAmC,EAAAJ,GACA/B,EAAAtF,OAAAtF,EAAAwV,EAAA7Z,OACAtG,GAAA8X,EAAA9X,IACAyL,QAMAuyB,EAAA,SAAAxZ,GACA,IAAA/U,EAAAmR,EAAA4D,GACA3Q,EAAAyoB,EAAA7sB,GAIA,OAHAoE,IACAA,EAAAyoB,EAAA7sB,GAAA,IAAA+tB,EAAAhZ,IAEA3Q,GAwDA,SAAA4D,EAAA+M,EAAA9M,EAAAC,EAAAjI,EAAAjI,EAAAmQ,GAGA,GAAAuI,EAAA9d,cAAAqV,GAIA,OAHAyI,EAAA3Y,KAAAkQ,EAAA,SAAAhX,EAAAiK,GACA8M,EAAA+M,EAAA9jB,EAAAiX,EAAAjI,EAAA/E,EAAAiN,KAEApR,KAGA2Z,EAAA7e,SAAAqW,IAAAwI,EAAAnf,WAAAyG,KACAA,EAAAiI,EACAA,EAAAiI,EACAA,OAAArU,GAGA6c,EAAAnf,WAAA0O,KACAjI,EAAAiI,EACAA,OAAApM,IAGA,IAAAmE,IACAA,EAAA0Y,EAAA5N,aAGA,iBAAAmF,IAEAA,EADAA,EAAAvP,QAAA,MAAA,EACAuP,EAAA5X,MAAA,KAEA4X,EAAA5X,MAAA,OAIA,IAAA+T,EAAAmqB,EAAAxZ,GAYA,OAVA9M,EAAA/W,QAAA,SAAA2W,GACA,GAAA,SAAAA,EACA,OAAAid,EAAA9sB,GAEAoM,EAAA6pB,SAAApmB,EAAA7P,GACAiI,KAAAA,EACAiI,SAAAA,EACAC,MAAAA,MAGApR,KA2DA,SAAA+tB,EAAA9sB,GASA,OANAoxB,EAAAr0B,KAAA0V,SAAA+jB,aAAA/jB,SAAA0B,KACAuE,EAAAnO,MAAAvK,GAEAyS,SAAAmjB,iBAAA,mBAAA51B,GAAA,GAGAjB,KAGA,IAAA03B,GACAC,UAAA,EACAC,MAAA,IACAC,OAAA,GACAC,KAAA,GACAnb,IAAA,GACAob,MAAA,GACA9sB,OAAA,GACA+sB,KAAA,GACAC,KAAA,GACAC,UAAA,GACAC,QAAA,GACAC,OAAA,IACAC,MAAA,GACAC,MAAA,GACAC,IAAA,EACAC,GAAA,IA8EA,SAAAC,IACA,OAAAA,EAwDA,OAnEAvlB,EAAAwJ,QAAA7B,aACA8a,EAAA+C,eAIArB,SAAAnkB,EAAAwJ,QAAA7B,WAAA8B,IACAgc,aAAAzlB,EAAAwJ,QAAA7B,WAAA8B,MAQAhD,EAAA7Z,MAAA24B,GACA/F,aAAAA,EAEA5sB,OAAA8M,EAEA9T,KAAA44B,EAEAnlB,IA3QA,SAAAA,EAAAyL,EAAA9M,EAAAC,EAAAlQ,GAEA,GAAA0Y,EAAA9d,cAAAqV,GAIA,OAHAyI,EAAA3Y,KAAAkQ,EAAA,SAAAhX,EAAAiK,GACAoO,EAAAyL,EAAA9jB,EAAAiX,EAAAhN,KAHAnE,KAQA2Z,EAAA7e,SAAAqW,IAAAwI,EAAAnf,WAAAyG,KAAA,IAAAA,IACAA,EAAAkQ,EACAA,OAAArU,IAGA,IAAAmE,IACAA,EAAA0Y,EAAA5N,aAGA,iBAAAmF,IAEAA,EADAA,EAAAvP,QAAA,MAAA,EACAuP,EAAA5X,MAAA,KAEA4X,EAAA5X,MAAA,OAIA,IAAA+T,EAAAmqB,EAAAxZ,GAEA9M,GAAAA,EAAA/W,QAAA,SAAA2W,GAEAzD,EAAAkqB,WAAAzmB,EAAA7P,GACAkQ,SAAAA,MAGA,OAAAnR,MA2OAiR,GAAAA,EAEAG,IAzKA,SAAA4M,EAAA9M,EAAAC,EAAAjI,EAAAjI,GAGA,OAFAgQ,EAAA+M,EAAA9M,EAAAC,EAAAjI,EAAAjI,EAAA,GAEAjB,MAwKA4L,MAAA6pB,EAEA1H,MAAAA,EAEA6K,UA/FA,SAAA5a,GAEA,IAAA6a,EAAAvM,EAAApjB,KAAA8U,EAAA,aACA,IAAA6a,EAAA,CACAA,KACAvM,EAAApjB,KAAA8U,EAAA,YAAA6a,GACA,IAAAC,EAAA,SAAAC,EAAAjoB,GACA,IAAAvN,EAAAuN,EAAAkoB,SAAAloB,EAAAmoB,QACA,GAAAF,EAAAG,MAAA31B,GAAAw1B,EAAAI,KAAAroB,EAAAsoB,QAAAL,EAAAp5B,OAAAmR,EAAAuoB,WACAvoB,EAAAwoB,SAAAP,EAAAO,SAAAxoB,EAAAyoB,UAAAzoB,EAAAyoB,UAAAR,EAAAQ,UAKA,OAJAzoB,EAAAggB,iBACA,WAAAhgB,EAAA5W,MACA6+B,EAAA50B,GAAA2M,IAEA,GAIAG,EAAA+M,EAAA,yBAAA,SAAAlN,GACA,IAAA,iBAAA9S,KAAA8S,EAAA3R,OAAA4e,UACA,IAAA,IAAAhf,KAAA85B,EACAC,EAAAD,EAAA95B,GAAA+R,KAOA,OACAtH,IAAA,SAAAgwB,EAAAr1B,IAEAq1B,EAAA73B,QAAA,MAAA,EACA63B,EAAAp/B,cAAAd,MAAA,KAEAkgC,EAAAp/B,cAAAd,MAAA,MAEAa,QAAA,SAAAs/B,GACA,IAAAzK,GACA7qB,GAAAA,EACAg1B,KAAA,EACAD,MAAA,EACAv5B,OAAA,GAEA85B,EAAAngC,MAAA,KAAAa,QAAA,SAAA4E,GACA,OAAAA,GACA,IAAA,MACA,IAAA,OACA,IAAA,QACAiwB,EAAAjwB,IAAA,EACA,MACA,QACAiwB,EAAAuK,SAAAx6B,EAAA26B,WAAA,GACA1K,EAAAsK,QAAA5B,EAAA34B,IAAAA,EAAA6W,cAAA8jB,WAAA,MAGA,IAAAC,GAAA3K,EAAAkK,KAAA,OAAA,IAAA,KAAAlK,EAAAmK,IAAA,MAAA,IAAA,KAAAnK,EAAArvB,MAAA,QAAA,IAAA,IAAAqvB,EAAAsK,QACAT,EAAAc,GAAA3K,OAyCA4K,QAAAjE,EAEAkE,KAzKA,SAAA/oB,GACA9V,OAAA0Y,SAAApE,MACAwB,EAAAwoB,QAAA,GAEAxoB,EAAAggB,iBACAhgB,EAAAggB,iBACAhgB,EAAAshB,mBAEA,OAAApyB,MAmKA2S,QA3JA,SAAAmnB,EAAA5/B,EAAAsF,GACA,IAAAqN,EAEAA,EADA3S,aAAA6/B,MACA7/B,EAEA0Y,EAAA1Y,EAAAsF,GAEAqN,EAAA0pB,MAAA/2B,EAEA,IAAA2E,EAAA21B,EAAAE,eAAAF,EAAAnnB,QACAxO,EACAA,EAAA7J,KAAAw/B,EAAAjtB,GAEA0V,QAAAC,KAAA,mDAGA,OAAAxiB,QA+IAgB,EAAA0xB,EAAA,SAAAh5B,GACA++B,EAAA/+B,GAAA,SAAAskB,EAAA7M,EAAAjI,EAAAjI,GACA,OAAAvB,UAAAnG,OAAA,EACAyG,KAAAiR,GAAA+M,EAAAtkB,EAAAyX,EAAAjI,EAAAjI,IAEA,SAAAvH,EACAskB,EAAAkI,OACAlI,EAAAkI,QAEA,QAAAxsB,EACAskB,EAAAsB,MACAtB,EAAAsB,OAEA,SAAA5lB,EACAskB,EAAAoW,OACApW,EAAAoW,QAGAp0B,KAAA2S,QAAAqL,EAAAtkB,GAGAsG,SAKApG,EAAAC,OAAA,eAAA4+B,KAEAv/B,OAAA,6BACA,sBACA,YACA,oBACA,sBACA,SAAAygB,EAAA8e,EAAA7G,EAAAvQ,GAEA,IAAA4Y,GACA,MACA,KACA,MACA,WA8CA,OA3CAtgB,EAAA3Y,KAAAy3B,EAAA/F,aAAA,SAAAh5B,GACAugC,EAAAj7B,KAAAtF,KAIAk4B,EAAAlqB,SAAAuyB,EAAAxB,GAEA9e,EAAA3Y,KAAAi5B,EAAA,SAAAxgC,EAAAC,GACA2nB,EAAAld,GAAAzK,GAAA2nB,EAAAiQ,MAAA3D,kBAAA8K,EAAA/+B,GAAA++B,KAiCApX,EAAA0M,MAAA0K,EAAA1K,MAEA0K,IAEAv/B,OAAA,wBAAA,6BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,4BACA,yBACA,SAAAU,GACA,OAAAA,EAAAC,OAAA,mBAEAX,OAAA,kCACA,sBACA,qBACA,WACA,SAAAygB,EAAA0H,EAAA6Y,GASA,SAAAC,EAAAz3B,EAAAjI,EAAAX,GACA,IAAA0e,EAAA1e,EAAA4I,GAQA,YANA5F,IAAA0b,EACA1e,EAAA4I,IAAAjI,GAEA+d,EAAAxZ,KAAAvE,GAGAX,EAmFA,IAAAsgC,GACArU,SACA,QACA,YAEAc,UACA,SACA,aACA,mBAEApsB,OACA,SACA,QACA,OACA,WACA,iBACA,QACA,SACA,QACA,SACA,WACA,QACA,QACA,SACA,SACA,MACA,OACA,WACA,OACA,MACA,SAiCA,SAAA4/B,EAAAtZ,EAAAuZ,EAAA7/B,EAAA8/B,EAAAt5B,GACA,IAAAyrB,EAxBA,SAAA3L,GACA,IAAA7mB,EA1FA,SAAA6mB,GACA,OAAAA,EAAA7mB,MAAA6mB,EAAAhD,UAAA3jB,cAyFAogC,CAAAzZ,GACA0Z,OAAA39B,EASA,OAPA6c,EAAA3Y,KAAAo5B,EAAA,SAAA1N,EAAA3vB,GACA,GAAA4c,EAAAhW,QAAAzJ,EAAA6C,IAAA,EAEA,OADA09B,EAAA/N,GACA,IAIA+N,EAaAC,CAAA3Z,GAIA,GAAA,SAAA2L,GAAA4N,GAAAC,EACAxZ,EAAAtmB,MAAAA,EACAwG,EAAA3G,KAAAymB,EAAAtmB,QAGA,GAAA,WAAAiyB,GAAA,YAAAA,EAAA,CACA,IAAAiO,KAGA5Z,EAAA9b,QACA0U,EAAA3Y,KAAA+f,EAAA9b,QAAA,SAAAnE,EAAAqqB,GACAwP,EAAA37B,KAAAmsB,KAIAwP,EAAA37B,KAAA+hB,GAIAA,EAAA6Z,UAAA,GAAAL,IACAxZ,EAAAsK,eAAA,GAGA1R,EAAA3Y,KAAA25B,EAAA,SAAA75B,EAAA+5B,GACAA,EAAApgC,OAAAA,IACAogC,EAAAnO,IAAA,EACAzrB,EAAA3G,KAAAugC,EAAApgC,OAWA,IAAAqgC,GACAlH,OAAAja,EAAAhO,KACAovB,SAAAphB,EAAAhO,MAmCA,OAAAuuB,EAAAc,YAzBA,SAAAC,EAAA/xB,EAAAjE,GAGA0U,EAAAnf,WAAAyK,KACAA,GAAA81B,SAAA91B,IAGAA,EAAA0U,EAAAxY,OAAA25B,EAAA71B,OACAiE,EApKA,SAAAA,GACA,IAAAgyB,KACAC,EAAA,MAGAxhB,EAAA9d,cAAAqN,IACAyQ,EAAAxY,OAAA+5B,EAAAhyB,GAGAyQ,EAAA3Y,KAAAk6B,EAAA,SAAAxhC,EAAAe,GACAkf,EAAA1e,QAAAR,KACAygC,EAAAxhC,IAAAe,OAKAkf,EAAA1e,QAAAiO,GACAyQ,EAAA3Y,KAAAkI,EAAA,SAAApI,EAAA+5B,GACAV,EAAAU,EAAAnhC,KAAAmhC,EAAApgC,MAAAygC,KAIA,iBAAAhyB,GACAyQ,EAAA3Y,KAAAkI,EAAA5P,MAAA,KAAA,SAAAwH,EAAA+5B,GACA,IAAAriB,EAAAqiB,EAAAvhC,MAAA,KACAI,EAAA0hC,mBAAA5iB,EAAA,GAAA1a,QAAAq9B,EAAA,QACA1gC,EAAA2gC,mBAAA5iB,EAAA,GAAA1a,QAAAq9B,EAAA,QACAhB,EAAAzgC,EAAAe,EAAAygC,KAIA,OAAAA,EAqIAG,CAAAnyB,GAEA,IAAAoyB,EAxMA,SAAAL,EAAAp4B,GACA,IAAAy4B,KAGAX,EAAAtZ,EAAA4Z,GACA72B,IAAA,WACA,OAAApE,KAAAqE,SAAAsV,EAAA/V,UAAA5D,KAAAqE,UAAArE,OAEA6C,OAAAA,GAAA,yBACAmG,MAMA,OAJA2Q,EAAA3Y,KAAA25B,EAAA,SAAA75B,EAAA+5B,GACAV,EAAAU,EAAAnhC,KAAAmhC,EAAAS,KAGAA,EAyLAC,CAAAN,EAAAh2B,EAAApC,QAYA,OAVA8W,EAAA3Y,KAAAkI,EAAA,SAAAxP,EAAAuG,GACA0Z,EAAA3Y,KAAAs6B,EAAA5hC,GAAA,SAAA4gC,EAAAvZ,GACApH,EAAA3Y,KAAAf,EAAA,SAAAs6B,EAAA9/B,GACA4/B,EAAAtZ,EAAAuZ,EAAA7/B,EAAA8/B,EAAAt1B,EAAA2uB,cAKA3uB,EAAA81B,SAAAzgC,KAAA2gC,GAEAj7B,QAKA9G,OAAA,qCACA,sBACA,oBACA,WACA,SAAAygB,EAAA2S,EAAA4N,GAiBA,OAAAA,EAAAsB,eAhBA,SAAAP,GACA,IAAAvhC,EAAAQ,EAAAiE,KACAqL,EAAA,SAAA/O,GACA,GAAAA,EAAAN,QAAA,OAAAM,EAAAN,QAAAqP,GACArL,EAAAa,MAAAtF,KAAAA,EAAAe,MAAAA,KASA,OAPAkf,EAAA3Y,KAAAi6B,EAAA52B,SAAA,SAAAyI,EAAA+tB,GACA3gC,EAAA2gC,EAAA3gC,MAAAR,EAAAmhC,EAAAnhC,OACA,YAAAmhC,EAAA9c,SAAA3jB,gBACAygC,EAAAtZ,UAAA,UAAArnB,GAAA,SAAAA,GAAA,UAAAA,GAAA,QAAAA,IACA,SAAAA,GAAA,YAAAA,GAAA2gC,EAAA9U,UACAvc,EAAA8iB,EAAAtU,IAAA6iB,MAEA18B,KAMAjF,OAAA,sCACA,sBACA,UACA,oBACA,SAAAygB,EAAAugB,EAAAsB,GAiBA,OAAAtB,EAAAuB,gBAfA,SAAAR,GACA,IAAAnhC,KAWA,OATA6f,EAAA3Y,KAAAw6B,EAAAP,GAAA,SAAAxhC,EAAAiiC,GACA,IAAAn4B,EAAAm4B,EAAAhiC,KACAwc,EAAAwlB,EAAAjhC,MAEAX,EAAAyJ,QAAAzG,IAAAhD,EAAAyJ,GAAA2S,EACAyD,EAAA1e,QAAAnB,EAAAyJ,IAAAzJ,EAAAyJ,GAAAQ,OAAAmS,IACApc,EAAAyJ,GAAA2S,KAGApc,KAKAZ,OAAA,gCACA,sBACA,UACA,oBACA,SAAAygB,EAAAugB,EAAAsB,GASA,OAAAtB,EAAAyB,UARA,SAAAV,GACA,IAAA98B,KAIA,OAHAq9B,EAAAP,GAAA9gC,QAAA,SAAA6jB,GACA7f,EAAAa,KAAA48B,mBAAA5d,EAAAtkB,MAAA,IAAAkiC,mBAAA5d,EAAAvjB,UAEA0D,EAAAqO,KAAA,QAKAtT,OAAA,2BACA,UACA,oBACA,qBACA,gBACA,mBACA,oBACA,eACA,SAAAghC,EAAAtI,EAAAvQ,GAgBA,OAbAuQ,EAAAlqB,UACA,cACA,iBACA,kBACA,aACAwyB,GAEA7Y,EAAAld,GAAA62B,YAAA3Z,EAAAiQ,MAAA1D,cAAAsM,EAAAc,YAAAd,EAAAA,EAAAc,aACA3Z,EAAAld,GAAAq3B,eAAAna,EAAAiQ,MAAA1D,cAAAsM,EAAAsB,eAAAtB,EAAAA,EAAAsB,gBACAna,EAAAld,GAAAs3B,gBAAApa,EAAAiQ,MAAA1D,cAAAsM,EAAAuB,gBAAAvB,EAAAA,EAAAuB,iBACApa,EAAAld,GAAAw3B,UAAAta,EAAAiQ,MAAA1D,cAAAsM,EAAAyB,UAAAzB,EAAAA,EAAAyB,WAGAzB,IAEAhhC,OAAA,sBAAA,2BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,8BACA,wBACA,uBACA,SAAAU,EAAA+f,GACAve,MAAAY,UAAAkxB,MAAA,IACA/yB,EAAAiB,MAAAY,UAAA7B,QACAwb,EAAAgE,EAAAhE,UACAE,EAAA8D,EAAA9D,UAEA,SAAAgmB,EAAAniC,EAAAe,GACA,MAAA,iBAAAA,GAAAqhC,EAAAjmB,EAAAnc,IAAAe,EAAAA,EAAA,KAGA,IAAAqhC,GACAC,eAAA,EACAC,QAAA,EACAC,cAAA,EACAC,cAAA,EACAC,QAAA,EACAC,UAAA,EACAC,KAAA,GAEAC,KAIA,SAAAC,EAAA7iC,GACA,OAAAA,KAAA4iC,EACAA,EAAA5iC,GAAA4iC,EAAA5iC,GAAA,IAAA4S,OAAA,UAAA5S,EAAA,WASA,SAAA4G,EAAA6S,EAAA1Y,GACA,IAAAwM,EAAAkM,EAAA7S,WAAA,GACAk8B,EAAAv1B,QAAAnK,IAAAmK,EAAAw1B,QAEA,QAAA3/B,IAAArC,EAAA,OAAA+hC,EAAAv1B,EAAAw1B,QAAAx1B,EACAu1B,EAAAv1B,EAAAw1B,QAAAhiC,EAAA0Y,EAAA7S,UAAA7F,EAaA,IAAAiiC,KAiEA,SAAAC,EAAA7W,GAKA,IAAA8W,EAAA9W,EAAA9G,cAAA4C,YAMA,OAJAgb,GAAAA,EAAAC,SACAD,EAAA5hC,QAGA4hC,EAAA/a,iBAAAiE,GAgHA,IAAAgX,EAAA,WACA,OAAAA,GAqBA,OAlBAnjB,EAAA7Z,MAAAg9B,GACAC,YAAA,EACAC,YAIAC,SA1JA,SAAAjf,EAAAtkB,GACA,IAAAA,EAAA,OAAAsG,KACA,IACA8sB,EADAtnB,EAAAlF,EAAA0d,GAGA8O,EADAnT,EAAA7e,SAAApB,GACAA,EAAAJ,MAAA,QAEAI,EAWA,OATAozB,EAAA3yB,QAAA,SAAA8M,GACA,IAAAi2B,EAAAX,EAAAt1B,GACAzB,EAAAiH,MAAAywB,KACA13B,IAAAA,EAAA,IAAA,IAAAyB,KAIA3G,EAAA0d,EAAAxY,GAEAxF,MAyIAM,UAAAA,EACA2uB,IAlHA,SAAAjR,EAAA0O,EAAAjyB,GACA,GAAAiF,UAAAnG,OAAA,EAAA,CACA,IACA4jC,EAAAR,EAAA3e,GACA,GAAArE,EAAA7e,SAAA4xB,GACA,OAAA1O,EAAA5B,MAAAzG,EAAA+W,KAAAyQ,EAAAC,iBAAAvnB,EAAA6W,IACA,GAAA/S,EAAAte,YAAAqxB,GAAA,CACA,IAAA5nB,KAIA,OAHA3K,EAAAG,KAAAoyB,EAAA,SAAAhqB,GACAoC,EAAApC,GAAAsb,EAAA5B,MAAAzG,EAAAjT,KAAAy6B,EAAAC,iBAAAvnB,EAAAnT,MAEAoC,GAIA,IAAAmqB,EAAA,GACA,GAAA,iBAAA,EACAx0B,GAAA,IAAAA,EAGAw0B,EAAApZ,EAAA6W,GAAA,IAAAmP,EAAAnP,EAAAjyB,GAFAujB,EAAA5B,MAAAihB,eAAAxnB,EAAA6W,SAKA,IAAA3tB,OAAA2tB,OACA5vB,IAAA4vB,EAAA3tB,OAGA2tB,EAAA3tB,MAAA,IAAA2tB,EAAA3tB,KAGAkwB,GAAApZ,EAAA9W,KAAA,IAAA88B,EAAA98B,IAAA2tB,EAAA3tB,MAAA,IAFAif,EAAA5B,MAAAihB,eAAAxnB,EAAA9W,OAQA,OADAif,EAAA5B,MAAAkhB,SAAA,IAAArO,EACAjvB,MA+EAuhB,SAnNA,SAAAvD,EAAAvjB,GACA,GAAAiF,UAAAnG,OAAA,EACA,QAAAyG,KAAAigB,IAAAsB,SAKA,OAFAvD,EAAAuD,SAAA9mB,EAEAuF,MA6MAu9B,SAxEA,SAAAvf,EAAAtkB,GACA,IAAAwjC,EAAAX,EAAA7iC,GACA,OAAAskB,EAAA1d,WAAA0d,EAAA1d,UAAAmM,MAAAywB,IAuEA/N,KAzKA,SAAAnR,GAEA,OADA8e,EAAA7N,IAAAjR,EAAA,UAAA,QACAhe,MAwKAw9B,YAlLA,SAAAxf,GACA,MAAA,QAAA8e,EAAA7N,IAAAjR,EAAA,YAAA,GAAA8e,EAAA7N,IAAAjR,EAAA,YAkLAyf,YAjEA,SAAAzf,EAAAtkB,GACA,GAAAA,EAAA,CACA,IAAA8L,EAAAlF,EAAA0d,IAGArE,EAAA7e,SAAApB,GACAA,EAAAJ,MAAA,QAEAI,GAGAS,QAAA,SAAA8M,GACA,IAAAi2B,EAAAX,EAAAt1B,GACAzB,EAAAiH,MAAAywB,KACA13B,EAAAA,EAAA1H,QAAAo/B,EAAA,QAIA58B,EAAA0d,EAAAxY,EAAAmL,aAEArQ,EAAA0d,EAAA,IAGA,OAAAhe,MA2CAkvB,KA5LA,SAAAlR,GACA8e,EAAA7N,IAAAjR,EAAA,UAAA,IACA,QAAA8e,EAAA7N,IAAAjR,EAAA,YACA8e,EAAA7N,IAAAjR,EAAA,UAnBA,SAAAD,GACA,IAAAgD,EAAA2c,EACAhB,EAAA3e,KACAgD,EAAArN,SAAA2H,cAAA0C,GACArK,SAAA0B,KAAAmJ,YAAAwC,GACA2c,EAAAf,EAAA5b,GAAAqc,iBAAA,WACArc,EAAAzC,WAAA4B,YAAAa,GACA,QAAA2c,IAAAA,EAAA,SACAhB,EAAA3e,GAAA2f,GAEA,OAAAhB,EAAA3e,GASA4f,CAAA3f,EAAAD,WAEA,OAAA/d,MAwLA49B,YAnCA,SAAA5f,EAAAtkB,EAAA+N,GACA,IAAAgG,EAAAzN,KAYA,OAXAtG,EAAAJ,MAAA,QAAAa,QAAA,SAAA8M,QACAnK,IAAA2K,IACAA,GAAAgG,EAAA8vB,SAAAvf,EAAA/W,IAEAQ,EACAgG,EAAAwvB,SAAAjf,EAAA/W,GAEAwG,EAAAgwB,YAAAzf,EAAA/W,KAIAwG,KAyBA7T,EAAAC,OAAA,cAAAijC,KAEA5jC,OAAA,4BACA,WACA,oBACA,sBACA,SAAA4jC,EAAAlL,EAAAvQ,GAGAuQ,EAAAlqB,UACA,WACA,YACA,MACA,WACA,OACA,cACA,cACA,OACA,eACAo1B,GAmDA,OA/CA,WAAA,OAAA,MAAA,QAAA,SAAA,QAAA,SAAA,SAAA,aACA,YAAA,cAAA,eAAA,cAAA,UAAA,WAAA,SAAA,aAAA,YAAA,cAAA,eAAA,UAAA,cAAA,aAAA,eAAA,gBAAA,QACA,aAAA,kBAAA,UAAA,WAAA,aAAA,YAAA,iBAAA,gBAAA,SAAA,UAEA3iC,QAAA,SAAAuyB,GAEA,IAAAnlB,EAAAmlB,EAEAkF,EAAAF,cAAA11B,UAAAuL,GAAA,SAAA9M,GAIA,OAFAuF,KAAAivB,IAAAvC,EAAAjyB,GAEAuF,QAOAqhB,EAAAld,GAAAiY,MAAAiF,EAAAiQ,MAAAG,mBAAAqL,EAAA7N,IAAA6N,GAEAzb,EAAAld,GAAA8qB,IAAA5N,EAAAiQ,MAAAG,mBAAAqL,EAAA7N,IAAA6N,GAGAzb,EAAAld,GAAAo5B,SAAAlc,EAAAiQ,MAAAC,iBAAAuL,EAAAS,SAAAT,GAGAzb,EAAAld,GAAA84B,SAAA5b,EAAAiQ,MAAAE,+BAAAsL,EAAAG,SAAAH,EAAAA,EAAAx8B,WAGA+gB,EAAAld,GAAAs5B,YAAApc,EAAAiQ,MAAAE,+BAAAsL,EAAAW,YAAAX,EAAAA,EAAAx8B,WAGA+gB,EAAAld,GAAAy5B,YAAAvc,EAAAiQ,MAAAE,+BAAAsL,EAAAc,YAAAd,EAAAA,EAAAx8B,WAEA+gB,EAAAld,GAAA05B,aAAA,SAAAC,EAAAC,GAGA,OAFA/9B,KAAAy9B,YAAAM,GACA/9B,KAAAi9B,SAAAa,GACA99B,MAGAqhB,EAAAld,GAAA05B,aAAA,SAAAC,EAAAC,GAGA,OAFA/9B,KAAAy9B,YAAAM,GACA/9B,KAAAi9B,SAAAa,GACA99B,MAGA88B,IAEA5jC,OAAA,uBAAA,4BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,0BACA,wBACA,sBACA,qBACA,uBACA,SAAAU,EAAA+f,EAAAsF,EAAA6d,GACA,IAGAkB,EAHAtgB,EAAA,mBACAugB,EAAAtkB,EAAAO,QACAyH,EAAA1C,EAAA0C,aAGA,SAAAuc,IACA,QAAAphC,IAAAkhC,EACA,OAAAA,EAEA,IAAAG,EAAAC,EACAthB,EAAAmC,EAAAY,eAAA,6IAEA,GACAwe,EAAAvhB,EAAA8C,WAAA,GAgBA,OAdAX,EAAAZ,OAAA3K,SAAA0B,KAAA0H,GAEAqhB,EAAAE,EAAArX,YAEA8V,EAAA7N,IAAAnS,EAAA,WAAA,UAEAshB,EAAAC,EAAArX,YAEAmX,IAAAC,IACAA,EAAAthB,EAAA,GAAAwhB,aAGArf,EAAAxV,OAAAqT,GAEAkhB,EAAAG,EAAAC,EAMA,SAAAG,EAAAvgB,GACA,GAAAiB,EAAAlkB,SAAAijB,GACA,OACAia,KAAA,EACAuG,IAAA,EACAnG,MAAA,EACAoG,OAAA,GAEA,IAAAC,EAAA7c,iBAAA7D,GACA,OACAia,KAAAgG,EAAAS,EAAAC,gBAAA3gB,GACAwgB,IAAAP,EAAAS,EAAAE,eAAA5gB,GACAqa,MAAA4F,EAAAS,EAAAG,iBAAA7gB,GACAygB,OAAAR,EAAAS,EAAAI,kBAAA9gB,IAUA,SAAA+gB,EAAA/gB,EAAAghB,GACA,QAAAliC,IAAAkiC,EACA,OAAAthB,EAAA1f,KAAAggB,EAAAD,WAAAygB,IAAA,EAAAvG,KAAA,GAAAja,EAAAihB,wBAEA,IACAl6B,EAAA4c,EAAA3D,GAEAkhB,EAAAH,EAAAh6B,GACAo6B,EAAAC,EAAAphB,GACAqhB,EAAAd,EAAAx5B,GAMA,OAJAu6B,EAAAthB,GACAwgB,IAAAQ,EAAAR,IAAAU,EAAAV,IAAAW,EAAAX,IAAAa,EAAAb,IACAvG,KAAA+G,EAAA/G,KAAAiH,EAAAjH,KAAAkH,EAAAlH,KAAAoH,EAAApH,OAEAj4B,KASA,SAAAu/B,EAAAvhB,EAAAghB,GACA,YAAAliC,IAAAkiC,EACAhhB,EAAAihB,yBAEAF,EAAA/gB,EAAAghB,GACA/Q,EAAAjQ,EAAAghB,GACAh/B,MAwBA,SAAAw/B,EAAAxhB,EAAAyhB,GACA,QAAA3iC,GAAA2iC,EACA,OACAC,MAAA1hB,EAAAsgB,YACAqB,OAAA3hB,EAAA4hB,cAGA,IAAAC,EAAA,eAAA/C,EAAA7N,IAAAjR,EAAA,cACAlZ,GACA46B,MAAAD,EAAAC,MACAC,OAAAF,EAAAE,QAEA,GAAAE,EAUA,CACA,IAAAC,EAAAvB,EAAAvgB,QAEAlhB,IAAAgI,EAAA46B,QACA56B,EAAA46B,MAAA56B,EAAA46B,MAAAI,EAAA7H,KAAA6H,EAAAzH,YAGAv7B,IAAAgI,EAAA66B,SACA76B,EAAA66B,OAAA76B,EAAA66B,OAAAG,EAAAtB,IAAAsB,EAAArB,YAlBA,CACA,IAAAsB,EAAAC,EAAAhiB,QAEAlhB,IAAAgI,EAAA46B,QACA56B,EAAA46B,MAAA56B,EAAA46B,MAAAK,EAAA9H,KAAA8H,EAAA1H,YAGAv7B,IAAAgI,EAAA66B,SACA76B,EAAA66B,OAAA76B,EAAA66B,OAAAI,EAAAvB,IAAAuB,EAAAtB,QAeA,OADA3B,EAAA7N,IAAAjR,EAAAlZ,GACA9E,KAkDA,SAAAigC,EAAA9gB,GACA,IAAAN,EAAAM,EAAAN,gBACAzJ,EAAA+J,EAAA/J,KACAkW,EAAAjiB,KAAAiiB,IACA4U,EAAA5U,EAAAzM,EAAAqhB,YAAA9qB,EAAA8qB,aACA5B,EAAAhT,EAAAzM,EAAAyf,YAAAlpB,EAAAkpB,aACAtX,EAAAsE,EAAAzM,EAAAmI,YAAA5R,EAAA4R,aACAmZ,EAAA7U,EAAAzM,EAAAshB,aAAA/qB,EAAA+qB,cACAP,EAAAtU,EAAAzM,EAAA+gB,aAAAxqB,EAAAwqB,cACAtd,EAAAgJ,EAAAzM,EAAAyD,aAAAlN,EAAAkN,cAEA,OACAod,MAAAQ,EAAAlZ,EAAAsX,EAAA4B,EACAP,OAAAQ,EAAA7d,EAAAsd,EAAAO,GAwBA,SAAAf,EAAAphB,GACA,GAAAiB,EAAAlkB,SAAAijB,GACA,OACAia,KAAA,EACAuG,IAAA,EACAnG,MAAA,EACAoG,OAAA,GAGA,IAAAC,EAAA7c,iBAAA7D,GACA,OACAia,KAAAgG,EAAAS,EAAA0B,YACA5B,IAAAP,EAAAS,EAAA2B,WACAhI,MAAA4F,EAAAS,EAAA4B,aACA7B,OAAAR,EAAAS,EAAA6B,eAkBA,SAAAC,EAAAxiB,GACA,IAAAlkB,EAAAm0B,EAAAjQ,GACA1I,EAAA8pB,EAAAphB,GAEA,OACA0hB,MAAA5lC,EAAA4lC,MAAApqB,EAAA2iB,KAAA3iB,EAAA+iB,MACAsH,OAAA7lC,EAAA6lC,OAAArqB,EAAAkpB,IAAAlpB,EAAAmpB,QAQA,SAAAuB,EAAAhiB,GACA,GAAAiB,EAAAlkB,SAAAijB,GACA,OACAia,KAAA,EACAuG,IAAA,EACAnG,MAAA,EACAoG,OAAA,GAGA,IAAAC,EAAA7c,iBAAA7D,GACA,OACAia,KAAAgG,EAAAS,EAAA+B,aACAjC,IAAAP,EAAAS,EAAAgC,YACArI,MAAA4F,EAAAS,EAAAiC,cACAlC,OAAAR,EAAAS,EAAAkC,gBAUA,SAAAC,EAAA7iB,EAAAghB,GACA,QAAAliC,IAAAkiC,EAAA,CACA,IAAAllC,EAAAkkB,EAAAihB,wBACA,OACAhH,KAAAn+B,EAAAm+B,KAAAj9B,OAAA8lC,YACAtC,IAAA1kC,EAAA0kC,IAAAxjC,OAAA+lC,aAGA,IACAh8B,EAAA4c,EAAA3D,GAEAkhB,EAAA2B,EAAA97B,GACAo6B,EAAAC,EAAAphB,GACAqhB,EAAAd,EAAAx5B,GAMA,OAJAu6B,EAAAthB,GACAwgB,IAAAQ,EAAAR,IAAAU,EAAAV,IAAAW,EAAAX,IAAAa,EAAAb,IACAvG,KAAA+G,EAAA/G,KAAAiH,EAAAjH,KAAAkH,EAAAlH,KAAAoH,EAAApH,OAEAj4B,KA+BA,SAAAs/B,EAAAthB,EAAAghB,GACA,QAAAliC,GAAAkiC,EAAA,CACA,IACAj6B,EAAA4c,EAAA3D,GAEAna,EAAAk7B,EAAA/gB,GACAkhB,EAAAH,EAAAh6B,GAEAs6B,GADAD,EAAAphB,GACAugB,EAAAx5B,IAGA,OACAy5B,IAAA36B,EAAA26B,IAAAU,EAAAV,IAAAa,EAAAb,IACAvG,KAAAp0B,EAAAo0B,KAAAiH,EAAAjH,KAAAoH,EAAApH,MAGA,IAAAnzB,GACA05B,IAAAQ,EAAAR,IACAvG,KAAA+G,EAAA/G,MAOA,MAJA,UAAA6E,EAAA7N,IAAAjR,EAAA,cACAlZ,EAAA,SAAA,YAEAg4B,EAAA7N,IAAAjR,EAAAlZ,GACA9E,KASA,SAAAghC,EAAAhjB,EAAAghB,GACA,QAAAliC,IAAAkiC,EAAA,CACA,IACAj6B,EAAA4c,EAAA3D,GAEAna,EAAA07B,EAAAvhB,GACAkhB,EAAAH,EAAAh6B,GAEAs6B,GADAD,EAAAphB,GACAugB,EAAAx5B,IAGA,OACAy5B,IAAA36B,EAAA26B,IAAAU,EAAAV,IAAAa,EAAAb,IACAvG,KAAAp0B,EAAAo0B,KAAAiH,EAAAjH,KAAAoH,EAAApH,KACAyH,MAAA77B,EAAA67B,MACAC,OAAA97B,EAAA87B,QAKA,OAFAL,EAAAthB,EAAAghB,GACA/Q,EAAAjQ,EAAAghB,GACAh/B,KAmDA,SAAAihC,EAAAjjB,EAAAvjB,GACA,IAAAujB,EAAArjB,WACAqjB,EAAAA,EAAA4D,aAEA,IAAAsf,EAAA,eAAAljB,EACA,YAAAlhB,IAAArC,EACAymC,EAAAljB,EAAAijB,WAAAjjB,EAAA8iB,aAEAI,EACAljB,EAAAijB,WAAAxmC,EAEAujB,EAAAmjB,SAAA1mC,EAAAujB,EAAAojB,SAEAphC,MAQA,SAAAqhC,EAAArjB,EAAAvjB,GACA,IAAAujB,EAAArjB,WACAqjB,EAAAA,EAAA4D,aAEA,IAAA0f,EAAA,cAAAtjB,EAEA,YAAAlhB,IAAArC,EACA6mC,EAAAtjB,EAAAqjB,UAAArjB,EAAA+iB,aAEAO,EACAtjB,EAAAqjB,UAAA5mC,EAEAujB,EAAAmjB,SAAAnjB,EAAAujB,QAAA9mC,GAEAuF,MAQA,SAAAiuB,EAAAjQ,EAAAyhB,GACA,QAAA3iC,GAAA2iC,EACA,OAAA9lB,EAAA5e,SAAAijB,IAEA0hB,MAAA1hB,EAAAwjB,WACA7B,OAAA3hB,EAAAyjB,aAGA9nB,EAAAne,WAAAwiB,GACAiiB,EAAAvsB,WAGAgsB,MAAA1hB,EAAAgJ,YACA2Y,OAAA3hB,EAAAsE,cAIA,IAAAud,EAAA,eAAA/C,EAAA7N,IAAAjR,EAAA,cACAlZ,GACA46B,MAAAD,EAAAC,MACAC,OAAAF,EAAAE,QAEA,IAAAE,EAAA,CACA,IAAAE,EAAAC,EAAAhiB,GACA8hB,EAAAvB,EAAAvgB,QAEAlhB,IAAAgI,EAAA46B,OAAA,KAAA56B,EAAA46B,OAAA,OAAA56B,EAAA46B,QACA56B,EAAA46B,MAAA56B,EAAA46B,MAAAK,EAAA9H,KAAA8H,EAAA1H,MAAAyH,EAAA7H,KAAA6H,EAAAzH,YAGAv7B,IAAAgI,EAAA66B,QAAA,KAAA76B,EAAA66B,QAAA,OAAA76B,EAAA66B,SACA76B,EAAA66B,OAAA76B,EAAA66B,OAAAI,EAAAvB,IAAAuB,EAAAtB,OAAAqB,EAAAtB,IAAAsB,EAAArB,QAIA,OADA3B,EAAA7N,IAAAjR,EAAAlZ,GACA9E,KAmBA,SAAA0hC,IACA,OAAAA,EAifA,OA9eA/nB,EAAA7Z,MAAA4hC,GACAnD,cAAAA,EAEAQ,iBAAAA,EAEAQ,aAAAA,EAEAK,aAtdA,SAAA5hB,EAAAvjB,GACA,YAAAqC,GAAArC,EACA+kC,EAAAxhB,GAAA2hB,OAEAH,EAAAxhB,GACA2hB,OAAAllC,KAmdA+kC,WAAAA,EAEAlB,YA3ZA,SAAAtgB,EAAAvjB,GACA,YAAAqC,GAAArC,EACA+kC,EAAAxhB,GAAA0hB,OAEAF,EAAAxhB,GACA0hB,MAAAjlC,IAEAuF,OAsZA2hC,YA9YA,SAAA3jB,GACA,IAAA4jB,EAAApC,EAAAxhB,GACA+hB,EAAAC,EAAAhiB,GAQA,OACAia,KAAA8H,EAAA9H,KACAuG,IAAAuB,EAAAvB,IACAkB,MAAAkC,EAAAlC,MAAAK,EAAA9H,KAAA8H,EAAA1H,MACAsH,OAAAiC,EAAAjC,OAAAI,EAAAvB,IAAAuB,EAAAtB,SAkYAwB,gBAAAA,EAEAN,OAtWA,SAAA3hB,EAAAvjB,GACA,YAAAqC,GAAArC,EACAwzB,EAAAjQ,GAAA2hB,QAEA1R,EAAAjQ,GACA2hB,OAAAllC,IAEAuF,OAiWAo/B,cAAAA,EAEAyC,WAxUA,SAAA7jB,GACA,IAAAlkB,EAAAknC,EAAAhjB,GACA1I,EAAA8pB,EAAAphB,GAEA,OACAia,KAAAn+B,EAAAm+B,KACAuG,IAAA1kC,EAAA0kC,IACAkB,MAAA5lC,EAAA4lC,MAAApqB,EAAA2iB,KAAA3iB,EAAA+iB,MACAsH,OAAA7lC,EAAA6lC,OAAArqB,EAAAkpB,IAAAlpB,EAAAmpB,SAkUA+B,WAAAA,EAEA7e,aAAAA,EAEAqe,eAAAA,EAGAa,aAAAA,EAEAiB,SApQA,SAAA9jB,EAAAghB,GACA,QAAAliC,IAAAkiC,EAAA,CACA,IAAAllC,EAAAkkB,EAAAihB,wBACA,OACAhH,KAAAn+B,EAAAm+B,KAAAj9B,OAAA8lC,YACAtC,IAAA1kC,EAAA0kC,IAAAxjC,OAAA+lC,YACArB,MAAAr2B,KAAA04B,MAAAjoC,EAAA4lC,OACAC,OAAAt2B,KAAA04B,MAAAjoC,EAAA6lC,SAKA,OAFAkB,EAAA7iB,EAAAghB,GACA/Q,EAAAjQ,EAAAghB,GACAh/B,MA2PAs/B,iBAAAA,EAEA0B,aAAAA,EAEA9C,eAAAA,EAEA8D,eAzLA,SAAAhkB,EAAAikB,GAcA,IACAC,EAAAC,EAAAzC,EAAAC,EAAAyC,EAAAC,EADAC,EAAAtkB,EAAAM,WAEAikB,EAfA,SAAAvkB,EAAAwkB,GACA,IAAAN,EAAAC,EAAAp9B,EAAAiZ,EAEAkkB,EAAAC,EAAA,EACA,KAAAp9B,GAAAA,GAAAy9B,GAAAz9B,EAAApK,UACAunC,GAAAn9B,EAAA09B,YAAA,EACAN,GAAAp9B,EAAA29B,WAAA,EACA39B,EAAAA,EAAA4c,aAGA,OAAAugB,EAAAA,EAAAC,EAAAA,GAKAQ,CAAA3kB,EAAAskB,GAEAJ,EAAAK,EAAAL,EACAC,EAAAI,EAAAJ,EACAzC,EAAA1hB,EAAAgJ,YACA2Y,EAAA3hB,EAAAsE,aACA8f,EAAAE,EAAAhE,YACA+D,EAAAC,EAAA1C,aAEA,OAAAqC,GACAC,GAAAE,EAAA1C,EACAyC,GAAAE,EAAA1C,GACA,UAAAsC,IACAC,GAAAE,EAAA,EAAA1C,EAAA,EACAyC,GAAAE,EAAA,EAAA1C,EAAA,GAMA,OAHA2C,EAAArB,WAAAiB,EACAI,EAAAjB,UAAAc,EAEAniC,MAuJAihC,WAAAA,EAEAI,UAAAA,EAEApT,KAAAA,EAEAyR,MAhEA,SAAA1hB,EAAAvjB,GACA,YAAAqC,GAAArC,EACAwzB,EAAAjQ,GAAA0hB,OAEAzR,EAAAjQ,GACA0hB,MAAAjlC,IAEAuF,SA4DA,WACA,IAAAsrB,EAAAjiB,KAAAiiB,IACAsX,EAAAv5B,KAAAu5B,IACAC,EAAA,oBACAC,EAAA,oBACAC,EAAA,wBACAC,EAAA,OACAC,EAAA,KAEA,SAAAC,EAAAC,EAAAzD,EAAAC,GACA,OACAxlB,WAAAgpB,EAAA,KAAAF,EAAAjlC,KAAAmlC,EAAA,IAAAzD,EAAA,IAAA,GACAvlB,WAAAgpB,EAAA,KAAAF,EAAAjlC,KAAAmlC,EAAA,IAAAxD,EAAA,IAAA,IAIA,SAAAyD,EAAAriB,EAAA2L,GACA,OAAAlvB,SAAAs/B,EAAA7N,IAAAlO,EAAA2L,GAAA,KAAA,EAqPA,IAAA2W,GACAC,KACArL,KAAA,SAAAnW,EAAA5Y,GACA,IAMAq6B,EANAC,EAAAt6B,EAAAs6B,OACAC,EAAAD,EAAAzoC,SAAAyoC,EAAAvC,WAAAuC,EAAA3/B,OAAAo0B,KACAyL,EAAAF,EAAA9D,MACAiE,EAAA7hB,EAAAmW,KAAA/uB,EAAA06B,kBAAAxD,WACAyD,EAAAJ,EAAAE,EACAG,EAAAH,EAAAz6B,EAAA66B,eAAAL,EAAAD,EAIAv6B,EAAA66B,eAAAL,EAGAG,EAAA,GAAAC,GAAA,GACAP,EAAAzhB,EAAAmW,KAAA4L,EAAA36B,EAAA66B,eAAAL,EACAD,EACA3hB,EAAAmW,MAAA4L,EAAAN,GAIAzhB,EAAAmW,KADA6L,EAAA,GAAAD,GAAA,EACAJ,EAIAI,EAAAC,EACAL,EAAAC,EAAAx6B,EAAA66B,eAEAN,EAKAI,EAAA,EACA/hB,EAAAmW,MAAA4L,EAGAC,EAAA,EACAhiB,EAAAmW,MAAA6L,EAIAhiB,EAAAmW,KAAA3M,EAAAxJ,EAAAmW,KAAA0L,EAAA7hB,EAAAmW,OAGAuG,IAAA,SAAA1c,EAAA5Y,GACA,IAMA86B,EANAR,EAAAt6B,EAAAs6B,OACAC,EAAAD,EAAAzoC,SAAAyoC,EAAAnC,UAAAmC,EAAA3/B,OAAA26B,IACAyF,EAAA/6B,EAAAs6B,OAAA7D,OACAuE,EAAApiB,EAAA0c,IAAAt1B,EAAA06B,kBAAAvD,UACA8D,EAAAV,EAAAS,EACAE,EAAAF,EAAAh7B,EAAAm7B,gBAAAJ,EAAAR,EAIAv6B,EAAAm7B,gBAAAJ,EAGAE,EAAA,GAAAC,GAAA,GACAJ,EAAAliB,EAAA0c,IAAA2F,EAAAj7B,EAAAm7B,gBAAAJ,EACAR,EACA3hB,EAAA0c,KAAA2F,EAAAH,GAIAliB,EAAA0c,IADA4F,EAAA,GAAAD,GAAA,EACAV,EAIAU,EAAAC,EACAX,EAAAQ,EAAA/6B,EAAAm7B,gBAEAZ,EAKAU,EAAA,EACAriB,EAAA0c,KAAA2F,EAGAC,EAAA,EACAtiB,EAAA0c,KAAA4F,EAIAtiB,EAAA0c,IAAAlT,EAAAxJ,EAAA0c,IAAA0F,EAAApiB,EAAA0c,OAIA8F,MACArM,KAAA,SAAAnW,EAAA5Y,GACA,IAkBAq6B,EACAgB,EAnBAf,EAAAt6B,EAAAs6B,OACAC,EAAAD,EAAA3/B,OAAAo0B,KAAAuL,EAAAvC,WACAyC,EAAAF,EAAA9D,MACA+C,EAAAe,EAAAzoC,SAAAyoC,EAAAvC,WAAAuC,EAAA3/B,OAAAo0B,KACA0L,EAAA7hB,EAAAmW,KAAA/uB,EAAA06B,kBAAAxD,WACAyD,EAAAF,EAAAlB,EACAqB,EAAAH,EAAAz6B,EAAA66B,eAAAL,EAAAjB,EACA+B,EAAA,SAAAt7B,EAAAu7B,GAAA,IACAv7B,EAAAw7B,UACA,UAAAx7B,EAAAu7B,GAAA,GACAv7B,EAAAw7B,UACA,EACAC,EAAA,SAAAz7B,EAAA07B,GAAA,GACA17B,EAAA27B,YACA,UAAA37B,EAAA07B,GAAA,IACA17B,EAAA27B,YACA,EACAhhC,GAAA,EAAAqF,EAAArF,OAAA,GAIAggC,EAAA,IACAN,EAAAzhB,EAAAmW,KAAAuM,EAAAG,EAAA9gC,EAAAqF,EAAA66B,eACAL,EAAAD,GACA,GAAAF,EAAAX,EAAAiB,MACA/hB,EAAAmW,MAAAuM,EAAAG,EAAA9gC,GAEAigC,EAAA,KACAS,EAAAziB,EAAAmW,KAAA/uB,EAAA06B,kBAAAxD,WAAAoE,EACAG,EAAA9gC,EAAA4+B,GACA,GAAAG,EAAA2B,GAAAT,KACAhiB,EAAAmW,MAAAuM,EAAAG,EAAA9gC,IAIA26B,IAAA,SAAA1c,EAAA5Y,GACA,IAmBA47B,EACAd,EApBAR,EAAAt6B,EAAAs6B,OACAC,EAAAD,EAAA3/B,OAAA26B,IAAAgF,EAAAnC,UACA4C,EAAAT,EAAA7D,OACA+C,EAAAc,EAAAzoC,SAAAyoC,EAAAnC,UAAAmC,EAAA3/B,OAAA26B,IACA0F,EAAApiB,EAAA0c,IAAAt1B,EAAA06B,kBAAAvD,UACA8D,EAAAD,EAAAxB,EACA0B,EAAAF,EAAAh7B,EAAAm7B,gBAAAJ,EAAAvB,EACAlE,EAAA,QAAAt1B,EAAAu7B,GAAA,GACAD,EAAAhG,GACAt1B,EAAA67B,WACA,WAAA77B,EAAAu7B,GAAA,GACAv7B,EAAA67B,WACA,EACAJ,EAAA,QAAAz7B,EAAA07B,GAAA,GACA17B,EAAA87B,aACA,WAAA97B,EAAA07B,GAAA,IACA17B,EAAA87B,aACA,EACAnhC,GAAA,EAAAqF,EAAArF,OAAA,GAGAsgC,EAAA,IACAH,EAAAliB,EAAA0c,IAAAgG,EAAAG,EAAA9gC,EAAAqF,EAAAm7B,gBACAJ,EAAAR,GACA,GAAAO,EAAApB,EAAAuB,MACAriB,EAAA0c,KAAAgG,EAAAG,EAAA9gC,GAEAugC,EAAA,KACAU,EAAAhjB,EAAA0c,IAAAt1B,EAAA06B,kBAAAvD,UAAAmE,EAAAG,EACA9gC,EAAA6+B,GACA,GAAAE,EAAAkC,GAAAV,KACAtiB,EAAA0c,KAAAgG,EAAAG,EAAA9gC,KAKAohC,SACAhN,KAAA,WACAoL,EAAAiB,KAAArM,KAAAl4B,MAAAC,KAAAN,WACA2jC,EAAAC,IAAArL,KAAAl4B,MAAAC,KAAAN,YAEA8+B,IAAA,WACA6E,EAAAiB,KAAA9F,IAAAz+B,MAAAC,KAAAN,WACA2jC,EAAAC,IAAA9E,IAAAz+B,MAAAC,KAAAN,cAKAgiC,EAAAwD,MAhWA,SAAAlnB,EAAA/Y,GAIA,IAAA0/B,EAAAE,EAAAG,EAAAG,EAAAC,EAAAC,EACAlmC,GAHA8F,EAAA0U,EAAAxY,UAAA8D,IAGAqgC,GACA9B,GAxBAziB,EAwBA9b,EAAAu+B,OAvBA+B,EAAAxkB,GAAA/lB,OACAD,EAAAkkB,EAAAlkB,SAAAwqC,GACA/pC,IAAA+pC,GAAA,IAAAA,EAAA5qC,SACA6qC,GAAAzqC,IAAAS,EACAiqC,EAAAjF,EAAA+E,IAEAxkB,QAAAwkB,EACAxqC,SAAAA,EACAS,WAAAA,EACAqI,OAAA2hC,EAAA3E,EAAA9f,IAAAkX,KAAA,EAAAuG,IAAA,GACAyC,WAAAA,EAAAsE,GACAlE,UAAAA,EAAAkE,GACA7F,MAAA+F,EAAA/F,MACAC,OAAA8F,EAAA9F,SAWA+F,EAxCA,SAAAlC,GACA,IAAAmC,EAAAnC,EAAAzoC,UAAAyoC,EAAAhoC,WAAA,GACAshC,EAAA7N,IAAAuU,EAAAziB,QAAA,cACA6kB,EAAApC,EAAAzoC,UAAAyoC,EAAAhoC,WAAA,GACAshC,EAAA7N,IAAAuU,EAAAziB,QAAA,cACA8kB,EAAA,WAAAF,GACA,SAAAA,GAAAnC,EAAA9D,MAAAQ,YAAAsD,EAAAziB,SAGA,OACA2e,MAHA,WAAAkG,GACA,SAAAA,GAAApC,EAAA7D,OAAAQ,aAAAqD,EAAAziB,SAEAmd,IAAA,EACAyB,OAAAkG,EAAA3H,IAAA,GA6BA4H,CAAAtC,GACAuC,GAAA9gC,EAAA8gC,WAAA,QAAAzsC,MAAA,KACA6pC,KA3BA,IAAApiB,EACAwkB,EACAxqC,EACAS,EACAgqC,EACAC,EAtDA3hB,EA8EA3kB,EAAAkmC,EA7EA,IAAAvhB,EAAAnpB,UAEAszB,KAAAA,EAAAnK,GACAjgB,QAAA26B,IAAA,EAAAvG,KAAA,IAGAhZ,EAAAlkB,SAAA+oB,IAEAmK,KAAAA,EAAAnK,GACAjgB,QACA26B,IAAA6C,EAAAvd,GACAmU,KAAAgJ,EAAAnd,KAIAA,EAAAgN,gBAEA7C,MACAyR,MAAA,EACAC,OAAA,GAEA97B,QACA26B,IAAA1a,EAAAkiB,MACA/N,KAAAnU,EAAAmiB,SAKAhY,KAAAA,EAAAnK,GACAjgB,OAAAg9B,EAAA/c,IAiDA3kB,EAAA2xB,iBAGA7rB,EAAA2/B,GAAA,YAlFA,IAAA9gB,EAoFA+gB,EAAAQ,EAAApX,KAAAyR,MACAsF,EAAAK,EAAApX,KAAA0R,OACAwF,EAAAE,EAAAxhC,OAGAuhC,EAAAzrB,EAAAxY,UAAAgkC,GAIAxrB,EAAA3Y,MAAA,KAAA,MAAA,WACA,IACAklC,EACAC,EAFA5D,GAAAt9B,EAAAjF,OAAA,IAAA1G,MAAA,KAIA,IAAAipC,EAAAhpC,SACAgpC,EAAAM,EAAA7kC,KAAAukC,EAAA,IACAA,EAAAx+B,QAAA,WACA++B,EAAA9kC,KAAAukC,EAAA,KACA,UAAAx+B,OAAAw+B,IACA,SAAA,WAEAA,EAAA,GAAAM,EAAA7kC,KAAAukC,EAAA,IAAAA,EAAA,GAAA,SACAA,EAAA,GAAAO,EAAA9kC,KAAAukC,EAAA,IAAAA,EAAA,GAAA,SAGA2D,EAAAnD,EAAAlvB,KAAA0uB,EAAA,IACA4D,EAAApD,EAAAlvB,KAAA0uB,EAAA,IACAY,EAAAnjC,OACAkmC,EAAAA,EAAA,GAAA,EACAC,EAAAA,EAAA,GAAA,GAIAlhC,EAAAjF,OACAgjC,EAAAnvB,KAAA0uB,EAAA,IAAA,GACAS,EAAAnvB,KAAA0uB,EAAA,IAAA,MAKA,IAAAwD,EAAAxsC,SACAwsC,EAAA,GAAAA,EAAA,IAGA,UAAA9gC,EAAA2/B,GAAA,GACAQ,EAAAnN,MAAA4M,EACA,WAAA5/B,EAAA2/B,GAAA,KACAQ,EAAAnN,MAAA4M,EAAA,GAGA,WAAA5/B,EAAA2/B,GAAA,GACAQ,EAAA5G,KAAAwG,EACA,WAAA//B,EAAA2/B,GAAA,KACAQ,EAAA5G,KAAAwG,EAAA,GAOA,OAJAL,EAAAzB,EAAAC,EAAAyB,GAAAC,EAAAG,GACAI,EAAAnN,MAAA0M,EAAA,GACAS,EAAA5G,KAAAmG,EAAA,GAEA,SAAA7e,GACA,IAAA8d,EAAAwC,EACAX,EAAAjF,EAAA1a,GACA4e,EAAAe,EAAA/F,MACAqF,EAAAU,EAAA9F,OACAS,EAAAgD,EAAAtd,EAAA,cACAua,EAAA+C,EAAAtd,EAAA,aACAie,EAAAW,EAAAtE,EAAAgD,EAAAtd,EAAA,eACA4f,EAAAhG,MACA2E,EAAAU,EAAA1E,EAAA+C,EAAAtd,EAAA,gBACA4f,EAAA/F,OACA7d,EAAAnI,EAAAxY,UAAAikC,GACAZ,EAAAtB,EAAAC,EAAAsB,GAAAgB,EAAA/F,MAAA+F,EAAA9F,QAEA,UAAA16B,EAAAw/B,GAAA,GACA3iB,EAAAmW,MAAAyM,EACA,WAAAz/B,EAAAw/B,GAAA,KACA3iB,EAAAmW,MAAAyM,EAAA,GAGA,WAAAz/B,EAAAw/B,GAAA,GACA3iB,EAAA0c,KAAAuG,EACA,WAAA9/B,EAAAw/B,GAAA,KACA3iB,EAAA0c,KAAAuG,EAAA,GAGAjjB,EAAAmW,MAAAuM,EAAA,GACA1iB,EAAA0c,KAAAgG,EAAA,GAEAZ,GACAxD,WAAAA,EACAC,UAAAA,GAGA1mB,EAAA3Y,MAAA,OAAA,OAAA,SAAAvH,EAAA4sC,GACAhD,EAAA0C,EAAAtsC,KACA4pC,EAAA0C,EAAAtsC,IAAA4sC,GAAAvkB,GACA+iB,YAAAA,EACAG,aAAAA,EACAN,UAAAA,EACAK,WAAAA,EACAnB,kBAAAA,EACAG,eAAAA,EACAM,gBAAAA,EACAxgC,QAAA8gC,EAAA,GAAAH,EAAA,GAAAG,EAAA,GAAAH,EAAA,IACAC,GAAAx/B,EAAAw/B,GACAG,GAAA3/B,EAAA2/B,GACApB,OAAAA,EACA1d,KAAAA,MAKA7gB,EAAAmhC,QAGAA,EAAA,SAAAthC,GACA,IAAAmzB,EAAAkN,EAAAlN,KAAAnW,EAAAmW,KACAI,EAAAJ,EAAA4M,EAAAH,EACAlG,EAAA2G,EAAA3G,IAAA1c,EAAA0c,IACAC,EAAAD,EAAAwG,EAAAD,EACAuB,GACAnnC,QACA4hB,QAAA5hB,EACA84B,KAAAkN,EAAAlN,KACAuG,IAAA2G,EAAA3G,IACAkB,MAAAmF,EACAlF,OAAAqF,GAEAjkB,SACAA,QAAA+E,EACAmS,KAAAnW,EAAAmW,KACAuG,IAAA1c,EAAA0c,IACAkB,MAAAgF,EACA/E,OAAAoF,GAEAwB,WAAAlO,EAAA,EAAA,OAAAJ,EAAA,EAAA,QAAA,SACAuO,SAAA/H,EAAA,EAAA,MAAAD,EAAA,EAAA,SAAA,UAEAqG,EAAAH,GAAA9B,EAAA3K,EAAAI,GAAAwM,IACAyB,EAAAC,WAAA,UAEAvB,EAAAD,GAAAnC,EAAApE,EAAAC,GAAAuG,IACAsB,EAAAE,SAAA,UAEAlb,EAAAsX,EAAA3K,GAAA2K,EAAAvK,IAAA/M,EAAAsX,EAAApE,GAAAoE,EAAAnE,IACA6H,EAAAG,UAAA,aAEAH,EAAAG,UAAA,WAEAxhC,EAAAmhC,MAAA9rC,KAAA0F,KAAA8E,EAAAwhC,KAIAzF,EAAA/a,EAAAnM,EAAAxY,OAAA2gB,GAAAskB,MAAAA,KA9FA,CA+FApoB,IAnQA,GA0bApkB,EAAAC,OAAA,YAAA6nC,KAEAxoC,OAAA,0BACA,sBACA,SACA,oBACA,sBACA,SAAAygB,EAAA+nB,EAAA9P,EAAAvQ,GAqHA,OAnHAuQ,EAAAlqB,UACA,gBACA,mBACA,eACA,eACA,aACA,cACA,cACA,SACA,gBACA,eACA,iBACA,eACA,WACA,mBACA,eACA,iBACA,aACA,YACA,OACA,SACAg6B,GAEArgB,EAAAld,GAAAN,OAAAwd,EAAAiQ,MAAA1D,cAAA8T,EAAAb,aAAAa,EAAAA,EAAAb,cAEAxf,EAAAld,GAAAk9B,UAAAhgB,EAAAiQ,MAAA1D,cAAA8T,EAAAL,UAAAK,GAEArgB,EAAAld,GAAA88B,WAAA5f,EAAAiQ,MAAA1D,cAAA8T,EAAAT,WAAAS,GAEArgB,EAAAld,GAAA2d,SAAA,SAAA7c,GACA,IAAAjF,KAAAzG,OACA,OAAAyG,KAGA,GAAAiF,EAKA,OAJAA,EAAAqgC,IAAArgC,EAAAqgC,GAAA/rC,UACA0L,EAAA0U,EAAAjZ,MAAAuE,IACAqgC,GAAArgC,EAAAqgC,GAAA,IAEAtlC,KAAAgB,KAAA,WACA0gC,EAAAwD,MAAAllC,KAAAiF,KAGA,IAAA6gB,EAAA9lB,KAAA,GAEA,OAAA0hC,EAAApC,iBAAAxZ,IAKAzE,EAAAld,GAAAwd,aAAAN,EAAAiQ,MAAA/D,YAAAmU,EAAA/f,aAAA+f,GAGArgB,EAAAld,GAAA8pB,KAAA5M,EAAAiQ,MAAA1D,cAAA8T,EAAAzT,KAAAyT,GAEArgB,EAAAld,GAAAu7B,MAAAre,EAAAiQ,MAAA1D,cAAA8T,EAAAhC,MAAAgC,EAAAA,EAAAhC,OAEAre,EAAAld,GAAAw7B,OAAAte,EAAAiQ,MAAA1D,cAAA8T,EAAA/B,OAAA+B,EAAAA,EAAA/B,QAEAte,EAAAld,GAAAq7B,WAAAne,EAAAiQ,MAAA1D,cAAA8T,EAAAlC,WAAAkC,EAAAlC,aAEA,QAAA,UAAArlC,QAAA,SAAAslC,GACA,IAAAiH,EAAAjH,EAAA3hC,QAAA,IAAA,SAAA6oC,GACA,OAAAA,EAAA,GAAA/wB,gBAGAyL,EAAAld,GAAA,QAAAuiC,GAAA,SAAAE,EAAAnsC,GAWA,GAVAiF,UAAAnG,OACA,kBAAAqtC,IACAnsC,EAAAmsC,EACAA,GAAA,IAGAA,GAAA,EACAnsC,OAAAqC,QAGAA,IAAArC,EAAA,CACA,IAAA2kB,EAAApf,KAAA,GACA,IAAAof,EACA,OAEA,IAAAynB,EAAAnF,EAAAzT,KAAA7O,GACA,GAAAwnB,EAAA,CACA,IAAAtxB,EAAAosB,EAAAtC,cAAAhgB,GACAynB,EAAAnH,MAAAmH,EAAAnH,MAAApqB,EAAA2iB,KAAA3iB,EAAA+iB,MACAwO,EAAAlH,OAAAkH,EAAAlH,OAAArqB,EAAAkpB,IAAAlpB,EAAAmpB,OAEA,MAAA,UAAAgB,EAAAoH,EAAAnH,MAAAmH,EAAAlH,OAEA,OAAA3/B,KAAAgB,KAAA,SAAAuB,EAAA6c,GACA,IAAA0nB,KACAxxB,EAAAosB,EAAAtC,cAAAhgB,GACA,UAAAqgB,GACAqH,EAAApH,MAAAjlC,EACAmsC,IACAE,EAAApH,MAAAoH,EAAApH,MAAApqB,EAAA2iB,KAAA3iB,EAAA+iB,SAGAyO,EAAAnH,OAAAllC,EACAmsC,IACAE,EAAAnH,OAAAmH,EAAAnH,OAAArqB,EAAAkpB,IAAAlpB,EAAAmpB,SAGAiD,EAAAzT,KAAA7O,EAAA0nB,QAOAzlB,EAAAld,GAAAq9B,WAAAngB,EAAAiQ,MAAA1D,cAAA8T,EAAApD,YAAAoD,EAAAA,EAAApD,aAEAjd,EAAAld,GAAAs9B,YAAApgB,EAAAiQ,MAAA1D,cAAA8T,EAAA9B,aAAA8B,EAAAA,EAAA9B,cAEA8B,IAEAxoC,OAAA,qBAAA,0BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,sBACA,wBACA,sBACA,uBACA,qBACA,oBACA,sBACA,wBACA,SAAAU,EAAA+f,EAAAzG,EAAA+L,EAAAyiB,EAAA5E,EAAArE,GACA,IAAAsO,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAEAC,EAAAp0B,EAAAuJ,kBAAA,gBACAic,EAAAxlB,EAAAuJ,kBAAA,iBAEA8qB,EAAA,8EACA9wB,EAAAvD,EAAA6H,eAAA,YACAysB,KAwBA,SAAAC,EAAAzpB,EAAA0pB,EAAAC,EAAAC,EAAA3mC,EAAA4mC,GACA,IAAA9oC,EAKA+oC,EACAC,EALAC,KACAC,KACAC,EAAA,GACAC,EAAAnoC,KAGAooC,GAAA,EACA9G,GAAA,EAkCA,GA/BA3nB,EAAA9d,cAAA8rC,KACAC,EAAAD,EAAAU,OACApnC,EAAA0mC,EAAA5M,SACA8M,EAAAF,EAAAE,MACAF,EAAAA,EAAAA,UAGAhuB,EAAA7e,SAAA6sC,KACAA,EAAAW,EAAAC,OAAAZ,SAEA7qC,IAAA6qC,IACAA,EAAAW,EAAAC,OAAAC,QAEAb,GAAA,IACAW,EAAA/1B,MACAo1B,EAAA,GAGAhuB,EAAAnf,WAAAotC,IACA3mC,EAAA2mC,EACAa,KAAA,SAEAb,EAAAA,GAAA,QAGAC,EACAA,GAAA,IAEAA,EAAA,EAGAluB,EAAA7e,SAAA4sC,GAEAM,EAAAjB,GAAAW,EACAM,EAAAhB,GAAAW,EAAA,IACAK,EAAAf,GAAAW,EACAE,EAAAR,MACA,CAEA,IAAAvoC,KAAA2oC,EAAA,CACA,IAAAxxB,EAAAwxB,EAAA3oC,GACA,GAAAwoC,EAAAvpC,KAAAe,GACAmpC,GAAAnpC,EAAA,IAAAmX,EAAA,SACA,CAIA,GAHA,cAAAnX,IACAuiC,GAAA,GAEA,QAAAviC,GAAA4a,EAAA9d,cAAAqa,IAEA,GADA8xB,EAAAjpC,GAAA,QAAAmX,EAAAsoB,IAAA,MAAAtoB,EAAAmiB,MAAA,MAAAniB,EAAAuoB,OAAA,MAAAvoB,EAAA+hB,KAAA,MACA,QAAA6E,EAAA7N,IAAAjR,EAAA,QAAA,CACA,IAAAiQ,EAAAyT,EAAAzT,KAAAjQ,GACA8e,EAAA7N,IAAAjR,EAAA,OAAA,YAAAiQ,EAAAyR,MAAA,MAAAzR,EAAA0R,OAAA,YACA,QAIAqI,EAAAjpC,GAAAmX,EAEA+xB,EAAAjpC,KAAA2a,EAAA9D,UAAA9W,KAGA+oC,EAAApP,EA8DA,OA3DAwP,IACAF,EAAAvxB,GAAAyxB,EACAD,EAAAjpC,KAAAyX,IAGAkxB,EAAA,GAAAhuB,EAAA9d,cAAA6rC,KACAM,EAAAd,GAAAe,EAAAz7B,KAAA,MACAw7B,EAAAb,GAAAQ,EAAA,IACAK,EAAAX,GAAAQ,EAAA,IACAG,EAAAZ,GAAAQ,GAGAG,EAAA,SAAAj3B,GAEA,GADAs3B,GAAA,EACAt3B,EAAA,CACA,GAAAA,EAAA3R,SAAA2R,EAAA2lB,cACA,OAEAgC,EAAAlmB,IAAAzB,EAAA3R,OAAA2oC,EAAAC,QAEAtP,EAAAlmB,IAAAyL,EAAAspB,EAAAS,GAEAjL,EAAA7N,IAAAjR,EAAAwpB,GAIAvmC,GAAAA,EAAA3G,KAAA0F,OAGA2nC,EAAA,IACAlP,EAAAxnB,GAAA+M,EAAA8pB,EAAAC,GAGApuB,EAAAzO,SAAA,WACAk9B,GAGAL,EAAAztC,KAAA6tC,IACA,KAAAR,EAAAE,GAAA,GALAluB,IASAqE,EAAA0qB,WAEA5L,EAAA7N,IAAAjR,EAAAgqB,GAEAL,GAAA,GACAhuB,EAAAzO,SAAA,WACAk9B,GAGAL,EAAAztC,KAAA6tC,IACA,EALAxuB,GAQA2nB,GACAqH,EAAA3qB,EAAA0pB,EAAA,UAAAC,EAAA1mC,GAGAjB,KASA,SAAAkvB,EAAAlR,EAAA4qB,EAAA3nC,GAUA,OATA67B,EAAA5N,KAAAlR,GACA4qB,KACA3nC,GAAA0Y,EAAAnf,WAAAouC,KACA3nC,EAAA2nC,EACAA,EAAA,UAEA9L,EAAA7N,IAAAjR,EAAA,UAAA,GACAypB,EAAAzpB,GAAAme,QAAA,EAAA0M,MAAA,OAAAD,EAAA3nC,IAEAjB,KAUA,SAAAmvB,EAAAnR,EAAA4qB,EAAA3nC,GAeA,OAdA2nC,IACA3nC,GAAA0Y,EAAAnf,WAAAouC,KACA3nC,EAAA2nC,EACAA,EAAA,UAEAnB,EAAAzpB,GAAAme,QAAA,EAAA0M,MAAA,OAAAD,EAAA,WACA9L,EAAA3N,KAAAnR,GACA/c,GACAA,EAAA3G,KAAA0jB,MAIA8e,EAAA3N,KAAAnR,GAEAhe,KAUA,SAAA2oC,EAAA3qB,EAAAukB,EAAAqG,EAAA3nC,GACA,IAAA6nC,EAAAtrC,SAAAwgB,EAAAqjB,WACA5nC,EAAA,EAEAsvC,EAAA,IAAAH,EADA,EAEAzH,EAAA3jC,SAAA+kC,GAEAyG,EAAAC,YAAA,aACAxvC,GAEAsvC,IAAA/qB,EAAAqjB,WAAAF,EAAA2H,GAAAC,EAAAtvC,EAAAqvC,GAEArvC,GAAAsvC,EAAA,IACAG,cAAAF,GACA/nC,GAAA0Y,EAAAzO,SAAAjK,EAAA,IAAA0Y,KAXA,GAuCA,SAAAwvB,EAAAnrB,EAAA4qB,EAAAzM,EAAAkM,EAAApnC,GAEA,OADAwmC,EAAAzpB,GAAAme,QAAAA,GAAAyM,EAAAP,EAAApnC,GACAjB,KAWA,SAAAopC,EAAAprB,EAAA4qB,EAAAP,EAAApnC,GACA,IAAA9B,EAAA29B,EAAA7N,IAAAjR,EAAA,WAUA,OATA7e,EAAA,EACA29B,EAAA7N,IAAAjR,EAAA,UAAA,GAEA7e,EAAA,EAEA29B,EAAA5N,KAAAlR,GAEAmrB,EAAAnrB,EAAA4qB,EAAAzpC,EAAAkpC,EAAApnC,GAEAjB,KAUA,SAAAqpC,EAAArrB,EAAA4qB,EAAAP,EAAApnC,GACA,IACA85B,EACAoB,EAAAW,EAAA7N,IAAAjR,EAAA,WACA/Y,KAyBA,OAvBA0U,EAAA9d,cAAA+sC,IACA3jC,EAAAojC,OAAAO,EAAAP,OACApjC,EAAA0iC,SAAAiB,EAAAjB,SACA5M,EAAA6N,EAAA7N,WAEA91B,EAAA0iC,SAAAiB,EACA3nC,GACA85B,EAAA95B,EACAgE,EAAAojC,OAAAA,GAEAtN,EAAAsN,GAGApjC,EAAA81B,SAAA,WACA+B,EAAA7N,IAAAjR,EAAA,UAAAme,GACAW,EAAA3N,KAAAnR,GACA+c,GACAA,EAAAzgC,KAAA0jB,IAIAmrB,EAAAnrB,EAAA/Y,EAAA,GAEAjF,KAyBA,SAAAspC,EAAAtrB,EAAA2pB,EAAA1mC,GAGA,IAAA6gB,EAAAgb,EAAA7N,IAAAjR,EAAA,YAGAkR,EAAAlR,GAGA8e,EAAA7N,IAAAjR,GACA8D,SAAA,WACAynB,WAAA,WAIA,IAAAlJ,EAAAvD,EAAA7N,IAAAjR,EAAA,cACAuiB,EAAAzD,EAAA7N,IAAAjR,EAAA,iBACA0iB,EAAA5D,EAAA7N,IAAAjR,EAAA,eACA4iB,EAAA9D,EAAA7N,IAAAjR,EAAA,kBACA2hB,EAAA7C,EAAA7N,IAAAjR,EAAA,UA8BA,OA3BA8e,EAAA7N,IAAAjR,GACA8D,SAAAA,EACAynB,WAAA,UACAC,SAAA,SACA7J,OAAA,EACAU,UAAA,EACAE,aAAA,EACAG,WAAA,EACAE,cAAA,IAIA6G,EAAAzpB,GACA2hB,OAAAA,EACAU,UAAAA,EACAE,aAAAA,EACAG,WAAAA,EACAE,cAAAA,IAEA+G,SAAAA,EACA5M,SAAA,WACA95B,GACAA,EAAAlB,MAAAie,MAKAhe,KASA,SAAAypC,EAAAzrB,EAAA2pB,EAAA1mC,GAEA,GAAAygC,EAAA/B,OAAA3hB,GAAA,EAAA,CAGA8e,EAAA7N,IAAAjR,EAAA,YAAA,IAGA2hB,EAAA7C,EAAA7N,IAAAjR,EAAA,UACAqiB,EAAAvD,EAAA7N,IAAAjR,EAAA,cACAuiB,EAAAzD,EAAA7N,IAAAjR,EAAA,iBACA0iB,EAAA5D,EAAA7N,IAAAjR,EAAA,eACA4iB,EAAA9D,EAAA7N,IAAAjR,EAAA,kBAGA8e,EAAA7N,IAAAjR,GACAurB,WAAA,UACAC,SAAA,SACA7J,OAAAA,EACAU,UAAAA,EACAE,aAAAA,EACAG,WAAAA,EACAE,cAAAA,IAIA6G,EAAAzpB,GACA2hB,OAAA,EACAU,UAAA,EACAE,aAAA,EACAG,WAAA,EACAE,cAAA,IAGA+G,SAAAA,EACA+B,OAAA,EACA3O,SAAA,WACA5L,EAAAnR,GACA8e,EAAA7N,IAAAjR,GACAurB,WAAA,UACAC,SAAA,SACA7J,OAAAA,EACAU,UAAAA,EACAE,aAAAA,EACAG,WAAAA,EACAE,cAAAA,IAEA3/B,GACAA,EAAAlB,MAAAie,MAKA,OAAAhe,KAsHA,SAAAsoC,IACA,OAAAA,EA6BA,OAvlBAd,EAAAT,EAAA7zB,EAAAsJ,qBAAA,mBACAgrB,EAAAR,EAAA9zB,EAAAsJ,qBAAA,uBACAgrB,EAAAt0B,EAAAsJ,qBAAA,oBACAgrB,EAAAP,EAAA/zB,EAAAsJ,qBAAA,8BAAA,GAEAgrB,EAAAN,EAAAh0B,EAAAsJ,qBAAA,wBACAgrB,EAAAL,EAAAj0B,EAAAsJ,qBAAA,wBACAgrB,EAAAH,EAAAn0B,EAAAsJ,qBAAA,qBACAgrB,EAAAJ,EAAAl0B,EAAAsJ,qBAAA,+BAAA,GAqjBA7C,EAAA7Z,MAAAwoC,GACA/1B,KAAA,EAEAg2B,QACAC,OAAA,IACAmB,KAAA,IACAC,KAAA,KAGAnC,QAAAA,EACAoC,qBA7GA,SAAA7rB,EAAA2pB,GACA,IAAAmC,GAAA,EACArR,EAAArnB,IAAA4M,EAAA,gBAAA,WACA8rB,GAAA,IASA,OAFAv+B,WALA,WACAu+B,GACArR,EAAA9lB,QAAAqL,EAAA9K,EAAAwJ,QAAA7B,WAAA8B,MAGAgrB,GAEA3nC,MAkGAopC,OAAAA,EACAC,QAAAA,EACAF,OAAAA,EACAY,WAtQA,SAAA/rB,EAAA4qB,EAAAoB,EAAAC,GACAnN,EAAAU,YAAAxf,GACAorB,EAAAprB,EAAA4qB,EAAAP,OAAApnC,UAEAooC,EAAArrB,EAAA4qB,EAAAP,OAAApnC,UAEA,OAAAjB,MAiQAmvB,KAAAA,EACAwZ,YAAAA,EAEAW,UAAAA,EACAY,YAnIA,SAAAlsB,EAAA2pB,EAAA1mC,GAGA,GAAAygC,EAAA/B,OAAA3hB,GACAsrB,EAAAtrB,EAAA2pB,EAAA1mC,GAIAwoC,EAAAzrB,EAAA2pB,EAAA1mC,GAEA,OAAAjB,MA0HAypC,QAAAA,EACAva,KAAAA,EACAib,MAhFA,SAAAnsB,EAAAve,GAEA,IAKA2qC,EAJAn+B,GAFAxM,EAAAA,OAEAwM,KAEAo+B,GADA5qC,EAAA2c,MACA3c,EAAA4qC,MACAppC,EAAAxB,EAAAwB,SAGAqpC,EAAArrB,EAAA5D,cAAA,OACAoP,MAAAhrB,EAAAa,WAAA,aAKA6pC,GApCA,SAAAnsB,EAAAve,GACA,IAAA8qC,EAAAtrB,EAAA5D,cAAA,MAAA5b,GACAq9B,EAAA7N,IAAAsb,GACAzoB,SAAA,WACA0c,IAAA,EACAvG,KAAA,EACAyH,MAAA,OACAC,OAAA,OACA6K,OAAA,WACArO,QAAA,KAEAne,EAAAO,YAAAgsB,GAsBAE,CAAAH,GACA7f,MAAA,iBAEAxL,EAAA5D,cAAA,OACAoP,MAAA,WAEAigB,EAAAzrB,EAAAmB,eAAAnU,GAAA,IACAxC,EAAA,WACA2gC,IACA9+B,aAAA8+B,GACAA,EAAA,MAEAE,IACArrB,EAAAxV,OAAA6gC,GACAA,EAAA,OAQA7qC,EAAA2c,OACA0gB,EAAA7N,IAAAqb,EAAA7qC,EAAA2c,OAEA+tB,EAAA5rB,YAAAmsB,GACAJ,EAAA/rB,YAAA4rB,GACAnsB,EAAAO,YAAA+rB,GAKAD,IACAD,EAAA7+B,WALA,WACA9B,IACAxI,GAAAA,KAGAopC,IAGA,OACA5gC,OAAAA,EACA4wB,OArBA,SAAA56B,GACAA,GAAAA,EAAAwM,MAAAq+B,IACAI,EAAAC,UAAAlrC,EAAAwM,SAkDA8iB,OAzWA,SAAA/Q,EAAA4qB,EAAA3nC,GACA67B,EAAAU,YAAAxf,GACAkR,EAAAlR,EAAA4qB,EAAA3nC,GAEAkuB,EAAAnR,EAAA4qB,EAAA3nC,GAEA,OAAAjB,QAsWApG,EAAAC,OAAA,UAAAyuC,KAEApvC,OAAA,wBACA,OACA,oBACA,sBACA,SAAAovC,EAAA1W,EAAAvQ,GAmCA,OAjCAuQ,EAAAlqB,UACA,UACA,uBACA,SACA,UACA,SACA,aACA,OACA,cACA,YACA,cACA,UACA,OACA,UACA4gC,GAEAjnB,EAAAld,GAAAgrB,KAAA9N,EAAAiQ,MAAA3D,kBAAA2a,EAAAnZ,KAAAmZ,GAEAjnB,EAAAld,GAAAsjC,QAAApmB,EAAAiQ,MAAA3D,kBAAA2a,EAAAb,QAAAa,GACAjnB,EAAAld,GAAA0lC,qBAAAxoB,EAAAiQ,MAAA3D,kBAAA2a,EAAAuB,qBAAAvB,GAEAjnB,EAAAld,GAAA+qB,KAAA7N,EAAAiQ,MAAA3D,kBAAA2a,EAAApZ,KAAAoZ,GACAjnB,EAAAld,GAAAgrB,KAAA9N,EAAAiQ,MAAA3D,kBAAA2a,EAAAnZ,KAAAmZ,GACAjnB,EAAAld,GAAAymC,OAAAvpB,EAAAiQ,MAAA3D,kBAAA2a,EAAAsC,OAAAtC,GACAjnB,EAAAld,GAAAglC,OAAA9nB,EAAAiQ,MAAA3D,kBAAA2a,EAAAa,OAAAb,GACAjnB,EAAAld,GAAAilC,OAAA/nB,EAAAiQ,MAAA3D,kBAAA2a,EAAAc,OAAAd,GACAjnB,EAAAld,GAAAklC,QAAAhoB,EAAAiQ,MAAA3D,kBAAA2a,EAAAe,QAAAf,GACAjnB,EAAAld,GAAA4lC,WAAA1oB,EAAAiQ,MAAA3D,kBAAA2a,EAAAyB,WAAAzB,GAEAjnB,EAAAld,GAAAmlC,UAAAjoB,EAAAiQ,MAAA3D,kBAAA2a,EAAAgB,UAAAhB,GACAjnB,EAAAld,GAAA+lC,YAAA7oB,EAAAiQ,MAAA3D,kBAAA2a,EAAA4B,YAAA5B,GACAjnB,EAAAld,GAAAslC,QAAApoB,EAAAiQ,MAAA3D,kBAAA2a,EAAAmB,QAAAnB,GAEAA,IAEApvC,OAAA,mBAAA,wBAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,uBACA,wBACA,sBACA,uBACA,qBACA,oBACA,uBACA,sBACA,qBACA,kBACA,sBACA,sBACA,SAAAU,EAAA+f,EAAAzG,EAAA+L,EAAAqN,EAAAmM,EAAAxO,EAAAiQ,EAAAoO,EAAAxL,EAAAh1B,GACA,IAGAuZ,EAHAxe,EAAAzH,MAAAY,UAAA6G,OACAzH,MAAAY,UAAAiC,MA8RA,OA5RAojB,EA2DAvZ,GA1DA3D,GAAA0mC,OAAA,QAEAxpB,EAAAnO,QAAAA,EAEAmO,EAAA1L,UAAAgE,EAAAhE,UAEA0L,EAAA4K,UAAA,SAAAgE,GAIA,IAHA,IAAAnK,EACArsB,EAAA,OAEAqD,KAAAgpB,EAAAmK,EAAAx2B,IAAAA,IACA6yB,EAAAL,UAAAnG,IAIAzE,EAAAwL,WAAA,SAAA7O,EAAAtkB,GACA4yB,EAAAO,WAAA7O,EAAAtkB,IAGA2nB,EAAArgB,KAAA2Y,EAAA3Y,KAEAqgB,EAAAlgB,OAAAwY,EAAAxY,OAEAkgB,EAAA5d,KAAA,SAAAY,EAAApD,GACA,OAAA4B,EAAAvI,KAAA+J,EAAApD,IAGAogB,EAAAtJ,KAAA,SAAAiG,EAAAtkB,GACA,OAAA4yB,EAAAvU,KAAAiG,EAAAtkB,IAGA2nB,EAAApmB,QAAA0e,EAAA1e,QACAomB,EAAA9mB,cAAAof,EAAApf,cACA8mB,EAAA7mB,WAAAmf,EAAAnf,WACA6mB,EAAAtmB,SAAA4e,EAAA5e,SACAsmB,EAAAxlB,cAAA8d,EAAA9d,cACAwlB,EAAAzlB,UAAA+d,EAAA/e,SAEAymB,EAAA1d,QAAAgW,EAAAhW,QAEA0d,EAAAzd,UAAA+V,EAAA/V,UACAyd,EAAAjd,IAAAuV,EAAAvV,IAEAid,EAAA1V,KAAA,aAGA0V,EAAAypB,UAAA9vC,OAAA+a,KAAAlF,MAEAwQ,EAAAzV,MAAA+N,EAAA/N,MAEAyV,EAAA1Q,KAAAgJ,EAAAhJ,KACA0Q,EAAAnnB,KAAAyf,EAAAzf,KAEAmnB,EAAAld,GAAAhD,OAAA,SAAA2D,GACA6U,EAAA7Z,MAAAuhB,EAAAld,GAAAW,IAMA,SAAAuc,GACAA,EAAA0Y,MAAA,SAAAp5B,EAAAmE,GACA,GAAA6U,EAAA7e,SAAA6F,GAAA,CACA,IAAAzG,EAAAyG,EACA,OAAA83B,EAAA3yB,OAAA5L,EAAA4K,GAEA,OAAA2zB,EAAA7sB,MAAAjL,EAAAmE,IAGAuc,EAAAvQ,SAEAuQ,EAAAvQ,MAAA8oB,QAAAnB,EAAAmB,QAEAvY,EAAAld,GAAAsjB,OAAA,SAAAxmB,GACA,GAAA,KAAAvB,UAAAM,KAAAuP,KAAA,SAAAtO,QACA,GAAAjB,KAAAzG,OAAA,CACA,IAAAuX,EAAAuQ,EAAA0Y,MAAA,UACA/5B,KAAA1B,GAAA,GAAAqU,QAAA7B,GACAA,EAAAyhB,sBAAAvyB,KAAAgJ,IAAA,GAAAye,SAEA,OAAAznB,MAIAqhB,EAAAld,GAAA4mC,eAAA1pB,EAAAld,GAAAwO,QAEA0O,EAAAld,GAAAuD,SAAA,SAAAyJ,EAAAL,EAAA7P,GACA,OAAAjB,KAAAiR,GAAAH,EAAAK,EAAAlQ,IAGAogB,EAAAld,GAAA6mC,WAAA,SAAA75B,EAAAL,EAAA7P,GACA,OAAAjB,KAAAuS,IAAAzB,EAAAK,EAAAlQ,IAGAogB,EAAAld,GAAA8mC,KAAA,SAAAn6B,EAAA7P,GAEA,OADAogB,EAAA3N,SAAA0B,MAAA1N,SAAA1H,KAAAmR,SAAAL,EAAA7P,GACAjB,MAGAqhB,EAAAld,GAAA+mC,IAAA,SAAAp6B,EAAA7P,GAEA,OADAogB,EAAA3N,SAAA0B,MAAA41B,WAAAhrC,KAAAmR,SAAAL,EAAA7P,GACAjB,MAGAqhB,EAAAld,GAAAoL,KAAA,SAAAuB,EAAAK,EAAAjI,EAAAjI,GACA,OAAAjB,KAAAiR,GAAAH,EAAAK,EAAAjI,EAAAjI,IAGAogB,EAAAld,GAAAgnC,OAAA,SAAAr6B,EAAA7P,GACA,OAAAjB,KAAAuS,IAAAzB,EAAA7P,IAGAogB,EAAAld,GAAA4pB,MAAA,SAAA9sB,GAEA,OADAw3B,EAAA1K,MAAA9sB,GACAjB,MAGAqhB,EAAAld,GAAA01B,KAAA,WAEA,OAAA75B,MAGAqhB,EAAAld,GAAAinC,OAAA,SAAAlJ,EAAAC,GACA,OAAAniC,KAAAynC,SACAxP,KAAAiK,EAAA,KACA1D,IAAA2D,EAAA,MACA,KAIA9gB,EAAA0M,MAAA0K,EAAA1K,MAEA1M,EAAApQ,GAAAwnB,EAAAxnB,GAEAoQ,EAAA9O,IAAAkmB,EAAAlmB,IA1EA,CA2EAzK,GAEA,SAAAuZ,GAEAA,EAAAgqB,KAAA,EACAhqB,EAAA3E,QAAAxJ,EAAAwJ,QACA2E,EAAAiqB,QAEAjqB,EAAAiqB,KAAA,KAAAjqB,EAAAiqB,KAAA9lB,QAAAnE,EAAAiqB,KAAAC,QAAAthB,EAAAzE,QAEAnE,EAAAiqB,KAAAE,aAAA,SAAArnC,GACA,OAAAA,GAGAkd,EAAA2b,SAAAF,EAAAE,SAEA3b,EAAAvC,SAAAG,EAAAH,SAEAuC,EAAA4N,IAAA6N,EAAA7N,IAEA5N,EAAAnY,KAAAojB,EAAApjB,KAEAmY,EAAAinB,GAAAA,EACAjnB,EAAAinB,GAAAmD,QAIApqB,EAAAunB,MAAA,SAAAA,EAAAP,EAAAlkC,GACA,IAAAunC,EAAA9C,GAAA,iBAAAA,EAAAvnB,EAAAlgB,UAAAynC,IACA7N,SAAA52B,IAAAA,GAAAkkC,GACAhnB,EAAA7mB,WAAAouC,IAAAA,EACAjB,SAAAiB,EACAP,OAAAlkC,GAAAkkC,GAAAA,IAAAhnB,EAAA7mB,WAAA6tC,IAAAA,GAoCA,OAhCAhnB,EAAAinB,GAAA/1B,IACAm5B,EAAA/D,SAAA,EAGA,iBAAA+D,EAAA/D,WACA+D,EAAA/D,YAAAtmB,EAAAinB,GAAAC,OACAmD,EAAA/D,SAAAtmB,EAAAinB,GAAAC,OAAAmD,EAAA/D,UAGA+D,EAAA/D,SAAAtmB,EAAAinB,GAAAC,OAAAoD,UAMA,MAAAD,EAAAhC,QAAA,IAAAgC,EAAAhC,QACAgC,EAAAhC,MAAA,MAIAgC,EAAA3yB,IAAA2yB,EAAA3Q,SAEA2Q,EAAA3Q,SAAA,WACA1Z,EAAA7mB,WAAAkxC,EAAA3yB,MACA2yB,EAAA3yB,IAAAze,KAAA0F,MAGA0rC,EAAAhC,OACAroB,EAAAuqB,QAAA5rC,KAAA0rC,EAAAhC,QAIAgC,GAGArqB,EAAAgnB,UAEAhnB,EAAAxd,UACAwd,EAAAxd,OAAAgoC,UAAA,SAAA/lB,EAAA7gB,EAAAxL,GACA,IAAAqoB,EAAAT,EAAA4N,IAAAnJ,EAAA,YAGA,WAAAhE,IACAgE,EAAA1J,MAAA0F,SAAA,YAGA,IAOAgqB,EAAAC,EAPAC,EAAA3qB,EAAAyE,GACAmmB,EAAAD,EAAAnoC,SACAqoC,EAAA7qB,EAAA4N,IAAAnJ,EAAA,OACAqmB,EAAA9qB,EAAA4N,IAAAnJ,EAAA,QACAsmB,GAAA,aAAAtqB,GAAA,UAAAA,IAAAT,EAAA1d,QAAA,QAAAuoC,EAAAC,KAAA,EACArnC,KACAunC,KAIAD,GACAC,EAAAL,EAAAlqB,WACAgqB,EAAAO,EAAA7N,IACAuN,EAAAM,EAAApU,OAEA6T,EAAA3xB,WAAA+xB,IAAA,EACAH,EAAA5xB,WAAAgyB,IAAA,GAGA9qB,EAAA7mB,WAAAyK,KACAA,EAAAA,EAAA3K,KAAAwrB,EAAArsB,EAAAwyC,IAGA,MAAAhnC,EAAAu5B,MACA15B,EAAA05B,IAAAv5B,EAAAu5B,IAAAyN,EAAAzN,IAAAsN,GAEA,MAAA7mC,EAAAgzB,OACAnzB,EAAAmzB,KAAAhzB,EAAAgzB,KAAAgU,EAAAhU,KAAA8T,GAGA,UAAA9mC,EACAA,EAAAmhC,MAAA9rC,KAAAwrB,EAAAhhB,GAEAknC,EAAA/c,IAAAnqB,IAIAuc,EAAAirB,MAAA,SAAAtuB,EAAAuuB,GACA,OAAAvuB,EAAAkL,aACAoD,EAAApjB,KAAA8U,EAAAuuB,OAMA,IAAAC,EAAAnrB,EAAAld,GAAA8H,KACAoV,EAAAld,GAAA8H,KAAA,SAAAiK,GACA,IAAAD,EAAAu2B,EAAAzsC,MAAAC,KAAAN,WAIA,YAHA5C,IAAAmZ,IACAA,EAAA,IAEAA,GAGAoL,EAAAld,GAAAo+B,IAAAlhB,EAAAld,GAAA2d,SAtIA,CAwIAha,GAEAA,EAAA2kC,UAAA,SAAA3sB,GACA,OAAAb,EAAAY,eAAAC,IAGAhY,EAAA4kC,WAAA5kC,EAAA6kC,OAAAhzB,EAAAnV,KAEAsD,EAAAlO,QAAAA,EAEAoB,OAAA4xC,OAAA5xC,OAAAqmB,EAAAvZ,IAGA5O,OAAA,yBACA,uBACA,SAAAU,GACA,OAAAA,EAAAC,OAAA,iBAEAX,OAAA,wBACA,sBACA,sBACA,wBACA,uBACA,sBACA,+BACA,gCACA,UACA,SAAAU,QAAAmD,MAAA6F,QAAA6B,OAAAuI,MAAAxF,SAAAqL,QAAAg6B,MAEA,IAAA7rC,KAAA4B,QAAA5B,KACAlB,MAAA8C,QAAA9C,MACA6L,KAAAqB,MAAArB,KACA1Q,QAAA8B,MAAA9B,QACAT,WAAAuC,MAAAvC,WACAqB,cAAAkB,MAAAlB,cACA3B,KAAA6C,MAAA7C,KAEA4yC,eAGA,SAAA/yB,GAIA,OAHA7Z,IAAAA,EAAAwT,SAAA2H,cAAA,MACAnb,EAAAhE,KAAA6d,EAEA7Z,EAAAhE,MANAgE,EAUA6sC,IAAA,WACA,IAAAC,QAAA,EACAjuC,IACArF,KACAuzC,QAAA,sDACAC,aAAA,qCACAC,UAAA,8BACAC,SAAA,mBACAC,SAAA,YACAC,QAAA,QAEAC,mBACAv9B,OAAA,EAGA9V,KAAA,MAEAszC,WAAA7hC,KAEA8hC,QAAA9hC,KAEAqD,MAAArD,KAEAovB,SAAApvB,KAEAN,QAAA,KAEA4H,QAAA,EAIAy6B,SACAC,OAAA,oEACAC,KAAA,mBACAC,IAAA,4BACA/tB,KAAA,YACA7T,KAAA,cAGA6hC,aAAA,EAEA1iC,QAAA,EAEA2iC,aAAA,EAEA5lC,OAAA,EAEA6lC,WACAC,iBAAA,IAIA,SAAAC,eAAAC,GAIA,GAHAA,IACAA,EAAAA,EAAA70C,MAAA,IAAA,GAAA,IAEA60C,EAAA,CACA,GAAAA,GAAAd,SACA,MAAA,OACA,GAAAc,GAAAf,SACA,MAAA,OACA,GAAAF,aAAAlvC,KAAAmwC,GACA,MAAA,SACA,GAAAhB,UAAAnvC,KAAAmwC,GACA,MAAA,MAGA,MAAA,OAGA,SAAAC,YAAAr0B,EAAAjS,GACA,MAAA,IAAAA,EAAAiS,GACAA,EAAA,IAAAjS,GAAAhK,QAAA,YAAA,KAIA,SAAAuwC,cAAAppC,GACAA,EAAAiE,KAAAjE,EAAAiE,MAAAjE,EAAA6C,MACA7C,EAAA8oC,aAAA9oC,EAAAiE,MAAA,UAAAhP,KAAA+K,EAAAiE,QACAjE,EAAAiE,KAAAolC,MAAArpC,EAAAiE,KAAAjE,EAAAspC,eAEAtpC,EAAAiE,MAAAjE,EAAA/K,MAAA,OAAA+K,EAAA/K,KAAA0b,gBACA3Q,EAAA8U,IAAAq0B,YAAAnpC,EAAA8U,IAAA9U,EAAAiE,MACAjE,EAAAiE,UAAApM,GAIA,SAAA6+B,UAAAl8B,EAAA3F,EAAAy0C,EAAAC,GACA,IAAAhC,EAAAzpC,EAAA9H,QAAAnB,GACA20C,EAAA5yC,cAAA/B,GACAkH,KAAAlH,EAAA,SAAAiF,EAAAtE,GACA+xC,EAAAtyC,KAAAO,GACA+zC,IAAAzvC,EAAAwvC,EAAAC,EACAA,EAAA,KAAAC,GAAA,UAAAjC,GAAA,SAAAA,EAAAztC,EAAA,IAAA,MAEAyvC,GAAAzrC,EAAAtD,EAAA+J,IAAA/O,EAAAf,KAAAe,EAAAA,OAEA,SAAA+xC,IAAA+B,GAAA,UAAA/B,EACA7Q,UAAAl8B,EAAAhF,EAAA8zC,EAAAxvC,GACAU,EAAA+J,IAAAzK,EAAAtE,KAIA,IAAA6zC,MAAA,SAAAx0C,EAAAy0C,GACA,IAAA9uC,KAWA,OAVAA,EAAA+J,IAAA,SAAAzK,EAAAtE,GACAD,WAAAC,KACAA,EAAAA,KAEA,MAAAA,IACAA,EAAA,IAEAuF,KAAAhB,KAAA48B,mBAAA78B,GAAA,IAAA68B,mBAAAnhC,KAEAkhC,UAAAl8B,EAAA3F,EAAAy0C,GACA9uC,EAAA+M,KAAA,KAAA1O,QAAA,OAAA,MAGAivC,IAAAl6B,QAAA9L,SACAb,UAAA,MAEAwoC,SAAA,SAAAlvC,MACA,IAAAsN,EAAA9M,KAAA8M,EACAW,KAAAzN,KACAiF,QAAAnF,SAAAytC,kBAAAzgC,EAAA7H,QAAAzF,MACAmvC,IAAA7hC,EAAA6hC,IAAA,IAAAC,eAEAP,cAAAppC,SAEAA,QAAAuoC,YACAvoC,QAAAuoC,WAAAlzC,KAAA0F,KAAA2uC,IAAA1pC,SAGA,IAAA4pC,SAAA5pC,QAAA4pC,UAAA5pC,QAAA6pC,SACAX,KAAAlpC,QAAA8pC,UAAA9pC,QAAAyoC,QAAAmB,UACAG,QAAA/pC,QAAA+pC,QACAhB,UAAA/oC,QAAA+oC,UACAiB,WAAAhqC,QAAAiE,MAAAjE,QAAAiE,gBAAAgmC,SACAC,wBAAAlqC,QAAAkqC,wBACAj1C,KAAA+K,QAAA/K,KACA6f,IAAA9U,QAAA8U,IACA/J,MAAA/K,QAAA+K,MACAo/B,KAAAnqC,QAAAmqC,KACA7nB,SAAAtiB,QAAAsiB,SACA3X,SAAA,IAAApI,SACA6nC,aAAAJ,YAAA,oCAEA,GAAAjB,UACA,IAAAt0C,QAAAs0C,UACAW,IAAAj1C,MAAAs0C,UAAAt0C,MAIAy0C,MAAAA,KAAAxsC,QAAA,MAAA,IACAwsC,KAAAA,KAAA70C,MAAA,IAAA,GAAA,IAEA60C,MAAAQ,IAAAW,kBACAX,IAAAW,iBAAAnB,MAOA,IAAAoB,OAAA,WACAZ,IAAAa,UAAA7jC,KACAgjC,IAAAc,QAAA9jC,KACAgjC,IAAAe,WAAA/jC,KACAgjC,IAAAgB,UAAAhkC,KACAgjC,IAAA,MAEAa,UAAA,WACA,IAAArxC,OAAA6Q,OAAA,EACA,GAAA2/B,IAAAiB,QAAA,KAAAjB,IAAAiB,OAAA,KAAA,KAAAjB,IAAAiB,QAAA,GAAAjB,IAAAiB,QAAA9C,eAAA/yB,KAAAvd,WAAA,SAAA,CACAqyC,SAAAA,UAAAX,eAAAjpC,QAAA8pC,UAAAJ,IAAAkB,kBAAA,iBAEA1xC,OAAAwwC,IAAAmB,aACA,IACA,UAAAjB,SACAkB,KAAA5xC,QACA,OAAA0wC,SACA1wC,OAAAwwC,IAAAqB,YACA,QAAAnB,SACA1wC,OAAAmvC,QAAAtvC,KAAAG,QAAA,KAAA4X,KAAAlF,MAAA1S,QACA,QAAA0wC,SACA1wC,OAAA8xC,MAAAC,OAAAC,WACA,eAAAtB,WACA1wC,OAAAwwC,IAAAyB,SAEA,MAAAvjC,GACAmC,MAAAnC,EAGAmC,MACAY,SAAA/B,OAAAmB,MAAA2/B,IAAAiB,OAAAjB,KAEA/+B,SAAAhC,QAAAzP,OAAAwwC,IAAAiB,OAAAjB,UAGA/+B,SAAA/B,OAAA,IAAAzI,MAAAupC,IAAA0B,YAAA1B,IAAAiB,OAAAjB,KAEAY,UAGAE,QAAA,WACA7/B,UACAA,SAAA/B,OAAA,IAAAzI,MAAA,SAAAupC,IAAAiB,OAAAjB,KAEAY,UAGAI,UAAA,WACA//B,UACAA,SAAA/B,OAAA,IAAAzI,MAAA,WAAAupC,IAAAiB,OAAAjB,KAEAY,UAGAG,WAAA,SAAAY,GACA1gC,UACAA,SAAAd,OAAAwhC,EAAA3B,IAAAiB,OAAAjB,MAWA,GAPAA,IAAAa,UAAAA,UACAb,IAAAc,QAAAA,QACAd,IAAAgB,UAAAA,UACAhB,IAAAe,WAAAA,WAEAf,IAAA4B,KAAAr2C,KAAA6f,IAAA/J,MAAAo/B,KAAA7nB,UAEAynB,QACA,IAAA,IAAAjwC,OAAAiwC,QAAA,CACA,IAAAv0C,MAAAu0C,QAAAjwC,KAEA,iBAAAA,IAAA3E,cACAi1C,YAAA50C,MAEAk0C,IAAA6B,iBAAAzxC,IAAAtE,OAqBA,OAhBA40C,cAAA,IAAAA,aACAV,IAAA6B,iBAAA,eAAAnB,aAGAL,SAAA,qBAAAA,SACAL,IAAA6B,iBAAA,mBAAA,kBAKArB,yBACAR,IAAA6B,iBAAA,gBAAArB,yBAGAR,IAAA8B,KAAAxrC,QAAAiE,KAAAjE,QAAAiE,KAAA,MAEA0G,SAAAjC,SAIAgmB,MAAA,WACA,IAAA7mB,EAAA9M,KAAA8M,EACA6hC,EAAA7hC,EAAA6hC,IAEAA,GACAA,EAAAhb,SAKA+c,QAAA,SAAAlxC,GACA,OAAAQ,KAAA0uC,SAAAlvC,IAGAwJ,IAAA,SAAAxJ,GAGA,OAFAA,EAAAA,OACAtF,KAAA,MACA8F,KAAA0uC,SAAAlvC,IAGAmxC,KAAA,SAAAnxC,GAGA,OAFAA,EAAAA,OACAtF,KAAA,OACA8F,KAAA0uC,SAAAlvC,IAGAoxC,MAAA,SAAApxC,GAGA,OAFAA,EAAAA,OACAtF,KAAA,QACA8F,KAAA0uC,SAAAlvC,IAGA4J,IAAA,SAAA5J,GAGA,OAFAA,EAAAA,OACAtF,KAAA,MACA8F,KAAA0uC,SAAAlvC,IAGAqxC,IAAA,SAAArxC,GAGA,OAFAA,EAAAA,OACAtF,KAAA,SACA8F,KAAA0uC,SAAAlvC,IAGAqF,KAAA,SAAAI,GACAjF,KAAA8M,GACA7H,QAAAA,UAeA,OAVA,UAAA,MAAA,OAAA,MAAA,MAAA,SAAA9K,QAAA,SAAAT,GACAqzC,IAAArzC,GAAA,SAAAqgB,EAAAva,GACA,IAAAmvC,EAAA,IAAA5B,KAAAhzB,IAAAA,IACA,OAAA40B,EAAAj1C,GAAA8F,MAIAutC,IAAAjS,eAAAyS,kBACAR,IAAAuB,MAAAA,MAEAvB,IApUA,GAuUA,OAAAF,KAAAE,IAAAA,MAEA7zC,OAAA,uBACA,sBACA,uBACA,UACA,SAAAygB,EAAAozB,EAAA1rB,GACA,IAAA2rB,EAAA,EAiBA,SAAAoB,EAAAr0B,EAAAjS,GACA,MAAA,IAAAA,EAAAiS,GACAA,EAAA,IAAAjS,GAAAhK,QAAA,YAAA,KAwHA,SAAAgzC,EAAA/2B,EAAA7Q,EAAAukC,EAAAoB,GAOA,OANAxtB,EAAA7mB,WAAAuf,IACA80B,EAAA3lC,EAAAukC,EAAA1zB,EAAA7Q,OAAApM,EAAAid,OAAAjd,GACAukB,EAAA7mB,WAAA0O,KACA2lC,EAAApB,EAAAA,EAAAvkC,EAAAA,OAAApM,GAEAukB,EAAA7mB,WAAAizC,KAAAoB,EAAApB,EAAAA,OAAA3wC,IAEAid,IAAAA,EACA7Q,KAAAA,EACAukC,QAAAA,EACAoB,SAAAA,GAnJAxtB,EAAArgB,MACA,YACA,WACA,eACA,YACA,cACA,YACA,SAAAvH,EAAAS,GACAmnB,EAAAld,GAAAjK,GAAA,SAAAiK,GACA,OAAAnE,KAAAiR,GAAA/W,EAAAiK,MAUAkd,EAAA0vB,UAAA,SAAA9rC,GACA,IAMA+rC,EAKAC,EAXArhC,EAAA,IAAA+J,EAAAnS,SACA0pC,EAAAjsC,EAAAksC,cACAC,GAAA/vB,EAAA7mB,WAAA02C,GACAA,IAAAA,IAAA,WAAAlE,EACAW,EAAAj6B,SAAA2H,cAAA,UACAg2B,EAAAr2C,OAAAo2C,GAEAzd,EAAA,SAAA2d,GACAjwB,EAAAssB,GAAA5C,eAAA,QAAAuG,GAAA,UAEA3C,GAAAhb,MAAAA,GAGA,IAAA,IAAA50B,KAAAkG,EAAAiE,KACAjE,EAAA8U,IAAAq0B,EAAAnpC,EAAA8U,IAAAhb,EAAA,IAAAkG,EAAAiE,KAAAnK,IAiCA,OA5BAsiB,EAAAssB,GAAA18B,GAAA,aAAA,SAAApE,EAAAykC,GACAhmC,aAAA2lC,GACA5vB,EAAAssB,GAAAp7B,MAAA9I,SAEA,SAAAoD,EAAA3S,MAAA82C,EAGAphC,EAAAhC,QAAAojC,EAAA,GAAA,IAAArC,GAFA/+B,EAAA/B,OAAAhB,GAKA7R,OAAAo2C,GAAAC,EACAL,GAAA3vB,EAAA7mB,WAAA62C,IACAA,EAAAL,EAAA,IAEAK,EAAAL,OAAAl0C,IAGA9B,OAAAo2C,GAAA,WACAJ,EAAAtxC,WAGAiuC,EAAAhtC,IAAAsE,EAAA8U,IAAAjc,QAAA,YAAA,OAAAszC,GACA19B,SAAA69B,KAAAhzB,YAAAovB,GAEA1oC,EAAAmG,QAAA,IAAA6lC,EAAA1lC,WAAA,WACAooB,EAAA,YACA1uB,EAAAmG,UAEAwE,GAQAyR,EAAAmwB,cACAzD,aAAA,GAIA1sB,EAAAowB,KAAA,SAAA13B,EAAA9U,GAmBA,GAlBA8U,EAIA9U,EASAA,EAAA8U,IAAAA,EAPA9U,EADA0U,EAAA7e,SAAAif,IAEAA,IAAAA,GAGAA,EATA9U,GACA8U,IAAA,MAgBA,UAFA9U,EAAA0U,EAAA7Z,SAAAuhB,EAAAmwB,aAAAvsC,IAEA4pC,SAAA,CACA,IAAA6C,EAAA,UAAA1zC,KAAAiH,EAAA8U,KAKA,OAHA23B,IACAzsC,EAAA8U,IAAAq0B,EAAAnpC,EAAA8U,IACA9U,EAAA0sC,MAAA1sC,EAAA0sC,MAAA,MAAA,IAAA1sC,EAAA0sC,MAAA,GAAA,eACAtwB,EAAA0vB,UAAA9rC,GAqBA,IAAAyI,EAAAq/B,EAAA2D,QAAAzrC,EAAA8U,IAAA9U,GAMA,OALAyI,EAAAA,EAAArG,KAnBA,SAAA6B,EAAA0mC,EAAAjB,GACAttB,EAAA3N,UAAAf,QAAA,cACA1N,EAAAwoC,SACAxoC,EAAAwoC,QAAA1tC,MAAAC,KAAAN,WAEAuF,EAAA81B,UACA91B,EAAA81B,SAAAh7B,MAAAC,KAAAN,WAEA,OAAAwJ,GAGA,WACAmY,EAAA3N,UAAAf,QAAA,aACA1N,EAAA+J,OACA/J,EAAA+J,MAAAjP,MAAAC,KAAAN,cAMA+tC,QAAA//B,EAAAJ,KACAI,EAAAsB,MAAAtB,EAAAH,KACAG,EAAAqtB,SAAArtB,EAAAN,OAEAM,GAmBA2T,EAAArY,IAAA,WACA,OAAAqY,EAAAowB,KAAAX,EAAA/wC,MAAA,KAAAL,aAGA2hB,EAAAsvB,KAAA,WACA,IAAA1rC,EAAA6rC,EAAA/wC,MAAA,KAAAL,WAEA,OADAuF,EAAA/K,KAAA,OACAmnB,EAAAowB,KAAAxsC,IAGAoc,EAAAuwB,QAAA,WACA,IAAA3sC,EAAA6rC,EAAA/wC,MAAA,KAAAL,WAEA,OADAuF,EAAA4pC,SAAA,OACAxtB,EAAAowB,KAAAxsC,IAGA,IAAA4sC,EAAAxwB,EAAAld,GAAA6wB,KA8BA,SAAA8c,EAAAC,GAGA,OAAA,SAAAC,EAAAxuC,GAEA,iBAAAwuC,IACAxuC,EAAAwuC,EACAA,EAAA,KAGA,IAAAnD,EACAp1C,EAAA,EACAw4C,EAAAD,EAAA53C,cAAAqS,MAAAylC,OAEA,GAAAtF,OAAApyC,WAAAgJ,GAGA,KAAAqrC,EAAAoD,EAAAx4C,MAGA,MAAAo1C,EAAA,IACAA,EAAAA,EAAA5wC,MAAA,IAAA,KACA8zC,EAAAlD,GAAAkD,EAAAlD,QAAAvpC,QAAA9B,KAIAuuC,EAAAlD,GAAAkD,EAAAlD,QAAA7vC,KAAAwE,IAtDA6d,EAAAld,GAAA6wB,KAAA,SAAAjb,EAAA7Q,EAAAukC,GACA,GAAA,iBAAA1zB,GAAA83B,EACA,OAAAA,EAAA9xC,MAAAC,KAAAN,WAEA,IAAAM,KAAAzG,OAAA,OAAAyG,KACA,IAGAmR,EAHA1D,EAAAzN,KACAiF,EAAA6rC,EAAA/2B,EAAA7Q,EAAAukC,GACAppB,EAAApf,EAAA8U,KAAA9U,EAAA8U,IAAAzgB,MAAA,MAEA2H,EAAAgE,EAAAwoC,QAYA,OAXAppB,GAAAA,EAAA9qB,OAAA,IAAA0L,EAAA8U,IAAAsK,EAAA,GAAAlT,EAAAkT,EAAA,IAEApf,EAAAiE,MAAA,iBAAAjE,EAAAiE,OACAjE,EAAA/K,KAAA,QAEA+K,EAAAwoC,QAAA,SAAA0C,GACA1iC,EAAAqS,KAAA3O,EACAkQ,EAAA,SAAAvB,KAAAqwB,EAAAryC,QAAAmvC,QAAA,KAAA3mB,KAAAnV,GAAAg/B,GACAlvC,GAAAA,EAAAlB,MAAA0N,EAAA/N,YAEA2hB,EAAAowB,KAAAxsC,GACAjF,MAGAqhB,EAAAitB,MAAAvB,EAAAuB,MAqCA,IAGA4D,EAAA,OAYA,OAVA7wB,EAAA8wB,cAAAL,MACAzwB,EAAA+wB,cAAAN,MACAzwB,EAAAgxB,UAAA,SAAAlzC,EAAA+M,GACAyN,EAAA7Z,MAAAitC,EAAAjS,eAAA37B,EAAA+M,IAGAmV,EAAAixB,UAAA,SAAAv4B,EAAA9Y,GACA,OAAAogB,EAAArY,IAAA+Q,OAAAjd,EAAAmE,EAAA,WAGAogB,IAIAnoB,OAAA,4BACA,UACA,SAAAmoB,GA0HA,OA9GAA,EAAAkxB,UAAA,SAAAttC,GAGA,IAAAutC,EACApK,EACAqK,EACAC,EACAC,EACAC,EACAC,KACAC,IATA7tC,EAAAoc,EAAAlgB,UAAA8D,IASA8tC,SACAC,EAAA,SAAA9pC,GAOA,IANAspC,EAAAvtC,EAAAutC,QAAAtpC,EACAk/B,GAAA,EACAwK,EAAAF,GAAA,EACAA,EAAA,EACAC,EAAAE,EAAAt5C,OACAk5C,GAAA,EACAI,GAAAD,EAAAD,IAAAC,EACA,IAAA,IAAAC,EAAAD,GAAA7yC,MAAAmJ,EAAA,GAAAA,EAAA,KAAAjE,EAAAguC,YAAA,CACAT,GAAA,EACA,MAGAC,GAAA,EACAI,IACAC,EAAAA,EAAAv5C,QAAAy5C,EAAAF,EAAAnzC,SACA6yC,EAAAK,EAAAt5C,OAAA,EACAg5C,EAAAW,YAIAX,GACA/oC,IAAA,WACA,GAAAqpC,EAAA,CACA,IAAAlqC,EAAAkqC,EAAAt5C,OACAiQ,EAAA,SAAAhK,GACA6hB,EAAArgB,KAAAxB,EAAA,SAAAsN,EAAA1L,GACA,mBAAAA,EACA6D,EAAA0nC,QAAA4F,EAAAtzC,IAAAmC,IAAAyxC,EAAA7zC,KAAAoC,GACAA,GAAAA,EAAA7H,QAAA,iBAAA6H,GAAAoI,EAAApI,MAGAoI,EAAA9J,WACA+yC,EAAAE,EAAAE,EAAAt5C,OACAi5C,IACAE,EAAA/pC,EACAqqC,EAAAR,IAGA,OAAAxyC,MAEAyJ,OAAA,WAcA,OAbAopC,GACAxxB,EAAArgB,KAAAtB,UAAA,SAAAoN,EAAA1L,GAEA,IADA,IAAAN,GACAA,EAAAugB,EAAA1d,QAAAvC,EAAAyxC,EAAA/xC,KAAA,GACA+xC,EAAArwC,OAAA1B,EAAA,GAEA2xC,IACA3xC,GAAA6xC,KAAAA,EACA7xC,GAAA8xC,KAAAA,KAKA5yC,MAEAf,IAAA,SAAAkF,GACA,SAAA0uC,KAAA1uC,EAAAkd,EAAA1d,QAAAQ,EAAA0uC,IAAA,EAAAA,EAAAt5C,UAEA8mB,MAAA,WAEA,OADAsyB,EAAAE,EAAAt5C,OAAA,EACAyG,MAEAkzC,QAAA,WAEA,OADAL,EAAAC,EAAAN,OAAA11C,EACAkD,MAEAuhB,SAAA,WACA,OAAAsxB,GAEAM,KAAA,WAGA,OAFAL,OAAAh2C,EACA01C,GAAAD,EAAAW,UACAlzC,MAEAozC,OAAA,WACA,OAAAN,GAEAO,SAAA,SAAAhoC,EAAA7L,GAOA,OANAqzC,GAAAzK,IAAA0K,IAEAtzC,GAAA6L,GADA7L,EAAAA,OACAvB,MAAAuB,EAAAvB,QAAAuB,GACAizC,EAAAK,EAAA9zC,KAAAQ,GACAwzC,EAAAxzC,IAEAQ,MAEAgzC,KAAA,WACA,OAAAT,EAAAc,SAAArzC,KAAAN,YAEA0oC,MAAA,WACA,QAAAA,IAIA,OAAAmK,GAGAlxB,IAIAnoB,OAAA,2BACA,SACA,uBACA,SAAAmoB,EAAA1H,GAsCA,OApCA0H,EAAA7Z,SAAA,WACA,IAAAyG,EAAA,IAAA0L,EAAAnS,SACAZ,GACA+G,QAAA,WACA,OAAAM,EAAAN,UAcA,OAVA,UAAA,cAAA,SAAA,aAAA,SAAA,OAAA,OAAA,OAAA,YAAAxT,QAAA,SAAAT,GACAkN,EAAAlN,GAAA,WACA,IAAA45C,EAAArlC,EAAAvU,GAAAqG,MAAAkO,EAAAvO,WAIA,OAHA4zC,GAAArlC,IACAqlC,EAAA1sC,GAEA0sC,KAIA1sC,GAGAya,EAAA5Z,KAAA,WACA,IAAAiG,EAAAiM,EAAAnS,SAAA8H,IAAAqK,EAAA/V,UAAAlE,YACA6zC,EAAA7lC,EAAArG,KAUA,OATAqG,EAAArG,KAAA,SAAAiH,EAAAC,GAOA,OAAAglC,EAAAj5C,KAAAoT,EANA,SAAAvG,GAIA,OAAAmH,GAAAA,EAAAvO,MAAA,KAAAoH,IAEAoH,IAEAb,GAGA2T,IAIAnoB,OAAA,wBACA,sBACA,SACA,eACA,SAAAygB,EAAA0H,GAGA,IAEAmyB,EAAA,OAAA,MAAAnqC,KAAAC,UAAAxL,QAAA,MAAA,IAEA21C,EAAA,OAEAC,KAAA10C,KA8BA,SAAA20C,IAIA73C,OAAA+K,eAAA7G,KAAAmI,SAAA,GACAa,IAAA,WACA,YAIAhJ,KAAAwzC,QAAAA,EAAAnqC,KAAAC,SAGAqqC,EAAAv5B,IAAA,EAEAu5B,EAAAjG,QAAA,SAAAkG,GAOA,OAAAA,EAAAj5C,WACA,IAAAi5C,EAAAj5C,UAAA,IAAAi5C,EAAAj5C,WAGAg5C,EAAA33C,WACA+C,IAAA,SAAA60C,GAIA,IAAAD,EAAAjG,QAAAkG,GACA,OAAA,EAGA,IAAAC,KAEAC,EAAAF,EAAA5zC,KAAAwzC,SAGA,IAAAM,EAAA,CACAA,EAAAH,EAAAv5B,MAGA,IACAy5B,EAAA7zC,KAAAwzC,UAAA/4C,MAAAq5C,GACAh4C,OAAAi4C,iBAAAH,EAAAC,GAIA,MAAAhnC,GACAgnC,EAAA7zC,KAAAwzC,SAAAM,EACAzyB,EAAAlgB,OAAAyyC,EAAAC,IASA,OAJA7zC,KAAAmI,MAAA2rC,KACA9zC,KAAAmI,MAAA2rC,OAGAA,GAEAp8B,IAAA,SAAAk8B,EAAA1qC,EAAAzO,GACA,IAAAiI,EAIAoxC,EAAA9zC,KAAAjB,IAAA60C,GACAzrC,EAAAnI,KAAAmI,MAAA2rC,GAGA,GAAA,iBAAA5qC,EACAf,EAAAe,GAAAzO,OAKA,GAAA4mB,EAAA9mB,cAAA4N,GACAkZ,EAAAlgB,OAAAnB,KAAAmI,MAAA2rC,GAAA5qC,QAGA,IAAAxG,KAAAwG,EACAf,EAAAzF,GAAAwG,EAAAxG,GAIA,OAAAyF,GAEAa,IAAA,SAAA4qC,EAAA70C,GAKA,IAAAoJ,EAAAnI,KAAAmI,MAAAnI,KAAAjB,IAAA60C,IAEA,YAAA92C,IAAAiC,EACAoJ,EAAAA,EAAApJ,IAEAi1C,OAAA,SAAAJ,EAAA70C,EAAAtE,GACA,IAAAw5C,EAYA,YAAAn3C,IAAAiC,GACAA,GAAA,iBAAAA,QAAAjC,IAAArC,OAIAqC,KAFAm3C,EAAAj0C,KAAAgJ,IAAA4qC,EAAA70C,IAGAk1C,EAAAj0C,KAAAgJ,IAAA4qC,EAAAvyB,EAAA1L,UAAA5W,KASAiB,KAAA0X,IAAAk8B,EAAA70C,EAAAtE,QAIAqC,IAAArC,EAAAA,EAAAsE,IAEA0K,OAAA,SAAAmqC,EAAA70C,GACA,IAAAtF,EAAAC,EAAAw6C,EACAJ,EAAA9zC,KAAAjB,IAAA60C,GACAzrC,EAAAnI,KAAAmI,MAAA2rC,GAEA,QAAAh3C,IAAAiC,EACAiB,KAAAmI,MAAA2rC,UAEA,CAEAzyB,EAAApmB,QAAA8D,GAOArF,EAAAqF,EAAAgF,OAAAhF,EAAAqF,IAAAid,EAAA1L,aAEAu+B,EAAA7yB,EAAA1L,UAAA5W,GAGArF,EADAqF,KAAAoJ,GACApJ,EAAAm1C,IAIAx6C,EAAAw6C,KACA/rC,GACAzO,GAAAA,EAAA+S,MAAAgnC,QAIAh6C,EAAAC,EAAAH,OACA,KAAAE,YACA0O,EAAAzO,EAAAD,MAIA06C,QAAA,SAAAP,GACA,OAAAvyB,EAAA9mB,cACAyF,KAAAmI,MAAAyrC,EAAA5zC,KAAAwzC,gBAGAY,QAAA,SAAAR,GACAA,EAAA5zC,KAAAwzC,iBACAxzC,KAAAmI,MAAAyrC,EAAA5zC,KAAAwzC,YAKA,IAAAa,EAAA,IAAAV,EAyLA,OAvLAtyB,EAAAlgB,OAAAkgB,GACAqoB,MAAA,SAAA5jB,EAAA5rB,EAAAgP,GACA,IAAAwgC,EAEA,GAAA5jB,EAYA,OAXA5rB,GAAAA,GAAA,MAAA,QACAwvC,EAAA2K,EAAArrC,IAAA8c,EAAA5rB,GAGAgP,KACAwgC,GAAAroB,EAAApmB,QAAAiO,GACAwgC,EAAA2K,EAAAL,OAAAluB,EAAA5rB,EAAAmnB,EAAAzd,UAAAsF,IAEAwgC,EAAA1qC,KAAAkK,IAGAwgC,OAIAkC,QAAA,SAAA9lB,EAAA5rB,GACAA,EAAAA,GAAA,KAEA,IAAAwvC,EAAAroB,EAAAqoB,MAAA5jB,EAAA5rB,GACAo6C,EAAA5K,EAAAnwC,OACA4K,EAAAulC,EAAA/pC,QACAysB,EAAA/K,EAAAkzB,YAAAzuB,EAAA5rB,GAMA,eAAAiK,IACAA,EAAAulC,EAAA/pC,QACA20C,KAGAnwC,IAIA,OAAAjK,GACAwvC,EAAApkC,QAAA,qBAIA8mB,EAAAyN,KACA11B,EAAA7J,KAAAwrB,EApBA,WACAzE,EAAAuqB,QAAA9lB,EAAA5rB,IAmBAkyB,KAGAkoB,GAAAloB,GACAA,EAAA/L,MAAA2yB,QAKAuB,YAAA,SAAAzuB,EAAA5rB,GACA,IAAA6E,EAAA7E,EAAA,aACA,OAAAm6C,EAAArrC,IAAA8c,EAAA/mB,IAAAs1C,EAAAL,OAAAluB,EAAA/mB,GACAshB,MAAAgB,EAAAkxB,UAAA,eAAA/oC,IAAA,WACA6qC,EAAA5qC,OAAAqc,GAAA5rB,EAAA,QAAA6E,SAMA6E,UAAA,SAAAM,EAAAiD,GACA,IAAAP,EAAAO,MAaA,OAXA,MAAAjD,KAjRA,SAAApK,GACA,IAAAP,EAAAO,EAAAP,OACAW,EAAAmnB,EAAAnnB,KAAAJ,GAEA,GAAAunB,EAAAtmB,SAAAjB,GACA,OAAA,EAGA,GAAA,IAAAA,EAAAa,UAAApB,EACA,OAAA,EAGA,MAAA,UAAAW,GAAA,aAAAA,IACA,IAAAX,GACA,iBAAAA,GAAAA,EAAA,GAAAA,EAAA,KAAAO,GAoQA06C,CAAA14C,OAAAoI,IAMAwvC,EAAAp5C,KAAAsM,EAAA1C,GALAmd,EAAArd,MAAA4C,EACA,iBAAA1C,GACAA,GAAAA,IAOA0C,GAEA5C,MAAA,SAAAV,EAAAW,GACA,IAAAlD,EAAAkD,EAAA1K,OACAE,EAAA6J,EAAA/J,OACA6J,EAAA,EAEA,GAAA,iBAAArC,EACA,KAAAqC,EAAArC,EAAAqC,IACAE,EAAA7J,KAAAwK,EAAAb,QAGA,UAAAtG,IAAAmH,EAAAb,IACAE,EAAA7J,KAAAwK,EAAAb,KAMA,OAFAE,EAAA/J,OAAAE,EAEA6J,KAIA+d,EAAAlgB,OAAAkgB,EAAAld,IACAulC,MAAA,SAAAxvC,EAAAgP,GACA,IAAAurC,EAAA,EAQA,MANA,iBAAAv6C,IACAgP,EAAAhP,EACAA,EAAA,KACAu6C,KAGA/0C,UAAAnG,OAAAk7C,EACApzB,EAAAqoB,MAAA1pC,KAAA,GAAA9F,QAGA4C,IAAAoM,EACAlJ,KACAA,KAAAgB,KAAA,WACA,IAAA0oC,EAAAroB,EAAAqoB,MAAA1pC,KAAA9F,EAAAgP,GAGAmY,EAAAkzB,YAAAv0C,KAAA9F,GAEA,OAAAA,GAAA,eAAAwvC,EAAA,IACAroB,EAAAuqB,QAAA5rC,KAAA9F,MAIA0xC,QAAA,SAAA1xC,GACA,OAAA8F,KAAAgB,KAAA,WACAqgB,EAAAuqB,QAAA5rC,KAAA9F,MAKA2tC,MAAA,SAAAwC,EAAAnwC,GAIA,OAHAmwC,EAAAhpB,EAAAinB,IAAAjnB,EAAAinB,GAAAC,OAAA8B,IAAAA,EACAnwC,EAAAA,GAAA,KAEA8F,KAAA0pC,MAAAxvC,EAAA,SAAAmQ,EAAA+hB,GACA,IAAAhhB,EAAAG,WAAAlB,EAAAggC,GACAje,EAAAyN,KAAA,WACAvuB,aAAAF,OAIAspC,WAAA,SAAAx6C,GACA,OAAA8F,KAAA0pC,MAAAxvC,GAAA,UAIAyT,QAAA,SAAAzT,EAAAJ,GACA,IAAA4M,EACAkC,EAAA,EACA4C,EAAA6V,EAAA7Z,WACAnD,EAAArE,KACAvG,EAAAuG,KAAAzG,OACAqU,EAAA,aACAhF,GACA4C,EAAAoD,YAAAvK,GAAAA,KAUA,IANA,iBAAAnK,IACAJ,EAAAI,EACAA,OAAA4C,GAEA5C,EAAAA,GAAA,KAEAT,MACAiN,EAAA2tC,EAAArrC,IAAA3E,EAAA5K,GAAAS,EAAA,gBACAwM,EAAA2Z,QACAzX,IACAlC,EAAA2Z,MAAA7W,IAAAoE,IAIA,OADAA,IACApC,EAAAmC,QAAA7T,MAIAunB,IAIAnoB,OAAA,gCACA,wBACA,sBACA,qBACA,oBACA,uBACA,sBACA,oBACA,sBACA,kBACA,qBACA,qBACA,SAAAU,EAAA+f,EAAAsF,EAAAqN,EAAAmM,EAAAxO,EAAAyX,EAAA5E,EAAAwL,EAAAjnB,EAAAszB,GACA,aAEA,IAAA12C,EAAA7C,MAAAY,UAAAiC,MAEA22C,GADAx5C,MAAAY,UAAA+H,WAEA60B,KAKA,SAAAvH,EAAArT,EAAA62B,EAAA5vC,GACA,IAAA6vC,EAAAD,EAAAv7C,MAAA,KACAy7C,EAAAD,EAAA,GACAD,EAAAC,EAAA,GAEAC,IACAA,EAAAF,GAGA,IAAAG,EAAA1oB,EAAApjB,KAAA8U,EAAA+2B,GAEA,GAAA,aAAA9vC,EACA,OAAA+vC,EACA,GAAA,YAAA/vC,EAAA,CACA,IAAA+vC,EACA,MAAA,IAAA5vC,MAAA,sCAEA4vC,EAAAC,UACA3oB,EAAAO,WAAA7O,EAAA62B,GACAG,OAAAl4C,OAEA,GAAAk4C,EAOA/vC,GACA+vC,EAAAttB,MAAAziB,OARA,CACA,QAAAnI,IAAAmI,GAAA,iBAAAA,EACA,MAAA,IAAAG,MAAA,sCAEA,IAAA8vC,EAAAN,EAAAC,GACAG,EAAA,IAAAE,EAAAl3B,EAAA/Y,GACAqnB,EAAApjB,KAAA8U,EAAA+2B,EAAAC,GAMA,OAAAA,EAqGA,IAAAG,EAAAx7B,EAAA9G,QAAA9L,SACAb,UAAA,SAEAtB,WAAA,SAAAoZ,EAAA/Y,GACAjF,KAAA2xB,KAAA3T,EACAhe,KAAAo1C,aAAAnwC,IAGAmwC,aAAA,SAAAnwC,GACA,IAAAE,EAAAnF,KAAA7E,YACAgN,EAAAhD,EAAAgD,MAAAhD,EAAAgD,UACAzJ,EAAAyJ,EAAAzJ,SACA,IAAAA,EAAA,CACA,IAAA22C,KACA,EAAA,CAEA,GADAA,EAAA/vC,QAAAH,GACAA,IAAAgwC,EACA,MAEAhwC,EAAAA,EAAAI,iBACAJ,GAEAzG,EAAAyJ,EAAAzJ,YACA,IAAA,IAAAjF,EAAA,EAAAA,EAAA47C,EAAA97C,OAAAE,KACA0L,EAAAkwC,EAAA57C,IACAuC,UAAAwC,eAAA,YACAmb,EAAA7Z,MAAApB,EAAAyG,EAAAnJ,UAAAiJ,SAAA,GAEAE,EAAA3G,eAAA,YACAmb,EAAA7Z,MAAApB,EAAAyG,EAAAF,SAAA,GASA,OALAnJ,OAAA+K,eAAA7G,KAAA,WACAvF,MAAAkf,EAAA7Z,SAAApB,EAAAuG,GAAA,KAIAjF,KAAAiF,SAIAgwC,QAAA,WAGAj1C,KAAAs1C,WAGAhpB,EAAAO,WAAA7sB,KAAA2xB,KAAA3xB,KAAA60C,aAGAS,SAAA37B,EAAAhO,KAEA4pC,OAAA,SAAAloC,EAAAw6B,GAKA,IAAA2N,EAAAx1C,KACA,OAAAuL,WALA,WACA,OAAA,iBAAA8B,EAAAmoC,EAAAnoC,GAAAA,GACAtN,MAAAy1C,EAAA91C,YAGAmoC,GAAA,IAGA1c,OAAA,SAAApsB,EAAAtE,GACA,IACA4pB,EACAoxB,EACAh8C,EAHAwL,EAAAlG,EAKA,GAAA,IAAAW,UAAAnG,OAGA,OAAAogB,EAAA7Z,SAAAE,KAAAiF,SAGA,GAAA,iBAAAlG,EAMA,GAHAkG,KACAof,EAAAtlB,EAAAzF,MAAA,KACAyF,EAAAslB,EAAA1kB,QACA0kB,EAAA9qB,OAAA,CAEA,IADAk8C,EAAAxwC,EAAAlG,GAAA4a,EAAA7Z,SAAAE,KAAAiF,QAAAlG,IACAtF,EAAA,EAAAA,EAAA4qB,EAAA9qB,OAAA,EAAAE,IACAg8C,EAAApxB,EAAA5qB,IAAAg8C,EAAApxB,EAAA5qB,QACAg8C,EAAAA,EAAApxB,EAAA5qB,IAGA,GADAsF,EAAAslB,EAAAzkB,MACA,IAAAF,UAAAnG,OACA,YAAAuD,IAAA24C,EAAA12C,GAAA,KAAA02C,EAAA12C,GAEA02C,EAAA12C,GAAAtE,MACA,CACA,GAAA,IAAAiF,UAAAnG,OACA,YAAAuD,IAAAkD,KAAAiF,QAAAlG,GAAA,KAAAiB,KAAAiF,QAAAlG,GAEAkG,EAAAlG,GAAAtE,EAMA,OAFAuF,KAAA01C,YAAAzwC,GAEAjF,MAGA01C,YAAA,SAAAzwC,GACA,IAAAlG,EAEA,IAAAA,KAAAkG,EACAjF,KAAA21C,WAAA52C,EAAAkG,EAAAlG,IAGA,OAAAiB,MAGA21C,WAAA,SAAA52C,EAAAtE,GAIA,OAFAuF,KAAAiF,QAAAlG,GAAAtE,EAEAuF,MAGA41C,OAAA,SAAAz+B,GACAA,EAAAA,GAAA,SACA,GAAAA,MAAA,IAAA9N,KAAAC,gBACAoK,SAAA+B,eAAA0B,IACA,OAAAA,GAGA6G,IAAA,WACA,OAAAhe,KAAA2xB,QAsBA,SAAAP,IACA,OAAAA,EAUA,OA5BA/P,EAAAld,GAAA+sB,OAAA,SAAAx3B,EAAAuL,GACA,IAAAzF,EAAAvB,EAAA3D,KAAAoF,UAAA,GACA+N,EAAAzN,KACAmxB,EAAAnxB,KAKA,OAHAA,KAAAgB,KAAA,WACAmwB,EAAAE,EAAAtxB,MAAA0N,GAAAzN,KAAAtG,GAAAqK,OAAAvE,MAEA2xB,GAGAwjB,EAAAvuC,QAAA,SAAA,SAAA1M,EAAAuL,GACA,IAAAzF,EAAAvB,EAAA3D,KAAAoF,UAAA,GACA,OAAA2xB,EAAAtxB,MAAAC,MAAAA,KAAA61C,QAAAn8C,GAAAqK,OAAAvE,MAQAma,EAAA7Z,MAAAsxB,GACAC,YAAAA,EACA8jB,OAAAA,EACAje,SA/MA,SAAAge,EAAAY,EAAAf,EAAAgB,GACA,IAAAlB,EAAAK,EAAAl5C,UAAA64C,WAIA,GAFAD,EAAAC,GAAAK,EAEAY,EAAA,CACAf,GAAAp7B,EAAAnf,WAAAu6C,KACAgB,EAAAhB,EACAA,EAAA,MAEAA,IACAF,EAAAA,EAAA,IAAAE,GAGA,IAAAhc,EAAAH,EAAAkd,GA9DA,SAAAjB,EAAAkB,GAKA,OAAA,SAAA/3B,EAAA/Y,GACA,IAAAisB,EAAAG,EAAArT,EAAA62B,EAAA,YACA,GAAA,aAAA5vC,EACA,OAAAisB,GAAA,KAGA,IAAAA,IACAA,EAAAG,EAAArT,EAAA62B,EAAA,iBAAA5vC,GAAAA,OACA,iBAAAA,GACA,OAAAjF,KAGA,GAAAiF,EAAA,CACA,IAAAzF,EAAAvB,EAAA3D,KAAAoF,UAAA,GACA,GAAAq2C,EACA,OAAAA,EAAAh2C,MAAAmxB,EAAA1xB,GAEA,GAAA,iBAAAyF,EAAA,CACA,IAAA6E,EAAA7E,EAEA,IAAAisB,EACA,MAAA,IAAA9rB,MAAA,0BAAAyvC,EACA,uDACA/qC,EAAA,KAGA,IAAA6P,EAAAnf,WAAA02B,EAAApnB,KAAA,MAAAA,EAAAsM,OAAA,GACA,MAAA,IAAAhR,MAAA,mBAAA0E,EAAA,SAAA+qC,EACA,oBAGA,OAAA3jB,EAAApnB,GAAA/J,MAAAmxB,EAAA1xB,MA0BAw2C,CAAAnB,EAAAkB,GAEA10B,EAAAld,GAAA2xC,GAAA,SAAA7wC,GACA,IAAAksB,EAAAnxB,KAEA,GAAAA,KAAAzG,QAAA,aAAA0L,EAEA,CACA,IAAAzF,EAAAvB,EAAA3D,KAAAoF,WACAM,KAAAgB,KAAA,WACA,IAAAi1C,EAAAh4C,EAAA3D,KAAAkF,GACAy2C,EAAA3wC,QAAAtF,MACA,IAAA4G,EAAAmyB,EAAAh5B,WAAAjD,EAAAm5C,GACA,QAAAn5C,IAAA8J,EAEA,OADAuqB,EAAAvqB,GACA,SATAuqB,OAAAr0B,EAcA,OAAAq0B,GAGAwjB,EAAAvuC,QAAA0vC,EAAA,SAAA7wC,GACA,IAAA2B,EAAAmyB,EAAA/4B,KAAA2xB,KAAA1sB,GAIA,YAHAnI,IAAA8J,IACAA,EAAA5G,MAEA4G,MAsKAgyB,UAAAA,IAGAh/B,EAAAC,OAAA,eAAAu3B,KAEAl4B,OAAA,6BACA,aACA,SAAAk4B,GACA,OAAAA,IAEAl4B,OAAA,wBAAA,6BAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,+BACA,sBACA,wBACA,uBACA,sBACA,oBACA,uBACA,uBACA,sBACA,SAAA6D,EAAA6F,EAAA6B,EAAAkV,EAAA2S,EAAAmM,EAAArH,EAAA/P,GAEA,IAAA60B,EAAA,EAEAC,EAAA/kB,EAAA+jB,OAAApuC,SACAb,UAAA,WAEAkwC,kBAAA,GAEAnxC,SAEAa,OAAA,MAGAmvC,QAAA,WACAj1C,KAAA2G,YAIA3G,KAAA+gB,QACAxO,IAAAvS,KAAAq2C,gBAGAr2C,KAAAm2B,SAAA5jB,IAAAvS,KAAAq2C,iBAGAzxC,WAAA,SAAAmc,EAAA9b,GAGA8b,EAAAM,EAAAN,GAAA/gB,KAAAs2C,gBAAAt2C,MAAA,GACAA,KAAA+gB,QAAAM,EAAAN,GACA/gB,KAAAqrC,KAAA6K,IACAl2C,KAAAq2C,eAAA,IAAAr2C,KAAA60C,WAAA70C,KAAAqrC,KAEArrC,KAAAm2B,SAAA9U,IACArhB,KAAAu2C,wBAEAv2C,KAAAw2C,UAAAn1B,IACArhB,KAAA8gB,UAAAO,IAEAN,IAAA/gB,OACAssB,EAAApjB,KAAA6X,EAAA/gB,KAAA60C,WAAA70C,MACAA,KAAAy2C,KAAA,EAAAz2C,KAAA+gB,SACAtX,OAAA,SAAAqH,GACAA,EAAA3R,SAAA4hB,GACA/gB,KAAAi1C,aAIAj1C,KAAA0T,SAAA2N,EAAAN,EAAA3E,MAGA2E,EAAA/B,cAGA+B,EAAArN,UAAAqN,GACA/gB,KAAAhF,OAAAqmB,EAAArhB,KAAA0T,SAAA,GAAAkO,aAAA5hB,KAAA0T,SAAA,GAAAsO,eAGAhiB,KAAA2G,UAAAoa,EAAA9b,GAOAjF,KAAA02C,UAEA12C,KAAA22C,SAAA,SAAA,KAAA32C,KAAA42C,uBAEA52C,KAAA62C,SAIAzB,aAAA,SAAAnwC,GACAA,EAAA0U,EAAA7Z,MAAAE,KAAA82C,oBAAA7xC,GAEAjF,KAAA2G,UAAA1B,IAGA6xC,kBAAA,WACA,UAGAF,oBAAAj9B,EAAAhO,KAEArF,OAAA,WACA,GAAAtG,KAAA2G,UACA,OAAA3G,KAAA2G,UAAA5G,MAAAC,KAAAN,YAIAq3C,YAAA,SAAAv3C,GACA,GAAAQ,KAAA2G,UACA,OAAA3G,KAAA2G,UAAA5G,MAAAC,KAAAR,IAIAk3C,QAAA/8B,EAAAhO,KAEAkrC,MAAAl9B,EAAAhO,KAEAqrC,SAAA,SAAA/xC,GACA,IAAAgyC,KACA9O,EAAAnoC,KAyBA,SAAAk3C,EAAA3xB,EAAA4xB,GACA,IAAA3+B,EAAA/e,EACA,IAAAA,EAAA,EAAAA,EAAA8rB,EAAAhsB,OAAAE,IACA+e,EAAA2vB,EAAAoO,qBAAAhxB,EAAA9rB,KAAA4nB,IACApc,EAAAuE,KApBAvE,EAAA8b,QAAA/f,KAAA,SAAA8L,EAAAiU,GACA,IAAAq2B,EAAAz9B,EAAAvV,IAAA+jC,EAAAoO,qBAAA,SAAAlyC,GACA,OAAAA,IAEA4oB,KAAA,SAAA5oB,GACA,OAAAgd,EAAAhd,GAAAid,GAAAP,KAGAq2B,GACAjP,EAAAsO,IAAAp1B,EAAAN,IACAtX,OAAA,6BAYA+O,EAAA6I,EAAA1H,EAAAnV,KAAAgU,EAAAxP,MAAAjF,OAAAkB,EAAA8b,QAAA/X,UAEAwP,EAAA6I,EAAA7I,EAAAmO,IAAA1hB,EAAA8b,SAAA/X,OAEAm/B,EAAAoO,qBAAAhxB,EAAA9rB,IAAA+e,EACAy+B,EAAAj4C,KAAAumB,EAAA9rB,IACA09C,GAAAlyC,EAAAsgB,QAAAA,EAAA9rB,KACAw9C,EAAAj4C,KAAAiG,EAAAsgB,QAAAA,EAAA9rB,KAYA,OAhDAwL,EAAArC,EAAA9C,OACAihB,QAAA/gB,KAAA+gB,QACAwE,QAAAvlB,KAAAiF,QAAAsgB,aACAtgB,IAsCAnG,MACAo4C,EAAAjyC,EAAAnG,KAAA2N,MAAA,aAAA,GAEAxH,EAAAoyC,OACAH,EAAAjyC,EAAAoyC,MAAA5qC,MAAA,aAGAwqC,EAAAzqC,KAAA,MAGA8qC,uBAAA,SAAAxmC,GACA,IAAAq3B,EAAAnoC,KACA2Z,EAAA3Y,KAAAmnC,EAAAoO,qBAAA,SAAAx3C,EAAAtE,IACA,IAAAgK,EAAAd,QAAAmN,EAAA3R,OAAA1E,KACA0tC,EAAAoO,qBAAAx3C,GAAAsiB,EAAA5mB,EAAAksB,IAAA7V,EAAA3R,QAAA6J,UAIAhJ,KAAAu3C,KAAAl2B,EAAAvQ,EAAA3R,UAGAq4C,aAAA,SAAAz2B,EAAAjiB,EAAAu4C,GACA,OAAAr3C,KAAAy3C,aAAA12B,EAAAjiB,EAAAu4C,GAAA,IAGAK,UAAA,SAAA32B,EAAAjiB,EAAAu4C,GACA,OAAAr3C,KAAAy3C,aAAA12B,EAAAjiB,EAAAu4C,GAAA,IAGAI,aAAA,SAAA12B,EAAAjiB,EAAAu4C,EAAA7tC,GACAA,EAAA,kBAAAA,EAAAA,EAAA6tC,EACA,IAAA13C,EAAA,iBAAAohB,GAAA,OAAAA,EACA9b,GACAoyC,MAAA13C,EAAAb,EAAAu4C,EACAv4C,KAAAa,EAAAohB,EAAAjiB,EACAiiB,QAAAphB,EAAAK,KAAA+gB,QAAAA,EACAvX,IAAAA,GAGA,OADAvE,EAAA8b,QAAA6c,YAAA59B,KAAAg3C,SAAA/xC,GAAAuE,GACAxJ,MAGAy2C,IAAA,SAAAkB,EAAA52B,EAAA+U,GACA,IAAA8hB,EACApC,EAAAx1C,KAGA,kBAAA23C,IACA7hB,EAAA/U,EACAA,EAAA42B,EACAA,GAAA,GAIA7hB,GAKA/U,EAAA62B,EAAAv2B,EAAAN,GACA/gB,KAAAm2B,SAAAn2B,KAAAm2B,SAAA3sB,IAAAuX,KALA+U,EAAA/U,EACAA,EAAA/gB,KAAA+gB,QACA62B,EAAA53C,KAAA63C,UAMAj1C,EAAA5B,KAAA80B,EAAA,SAAAhlB,EAAAzD,GACA,SAAAyqC,IAKA,GAAAH,IACA,IAAAnC,EAAAvwC,QAAAsc,WACAF,EAAArhB,MAAAu9B,SAAA,qBAGA,OAAA,iBAAAlwB,EAAAmoC,EAAAnoC,GAAAA,GACAtN,MAAAy1C,EAAA91C,WAIA,iBAAA2N,IACAyqC,EAAAC,KAAA1qC,EAAA0qC,KACA1qC,EAAA0qC,MAAAD,EAAAC,MAAA12B,EAAA02B,QAGA,IAAAtrC,EAAAqE,EAAArE,MAAA,sBACAgF,EAAAhF,EAAA,GAAA+oC,EAAAa,eACAllC,EAAA1E,EAAA,GAEA0E,EACAymC,EAAA3mC,GAAAQ,EAAAN,EAAA2mC,GAEA/2B,EAAA9P,GAAAQ,EAAAqmC,MAKAP,KAAA,SAAAx2B,EAAAtP,GACAA,GAAAA,GAAA,IAAAnY,MAAA,KAAAkT,KAAAxM,KAAAq2C,eAAA,KACAr2C,KAAAq2C,eACAt1B,EAAAxO,IAAAd,GAGAzR,KAAAm2B,SAAA9U,EAAArhB,KAAAm2B,SAAAxP,IAAA5F,GAAA/X,OACAhJ,KAAA8gB,UAAAO,EAAArhB,KAAA8gB,UAAA6F,IAAA5F,GAAA/X,OACAhJ,KAAAw2C,UAAAn1B,EAAArhB,KAAAw2C,UAAA7vB,IAAA5F,GAAA/X,QAGA2tC,SAAA,SAAAz8C,EAAA4W,EAAA5H,GACA,IAAAxG,EAAAs1C,EACA/2C,EAAAjB,KAAAiF,QAAA/K,GAcA,GAZAgP,EAAAA,OACA4H,EAAA2nB,EAAA7sB,MAAAkF,IACA5W,MAAAA,IAAA8F,KAAAi4C,kBACA/9C,EACA8F,KAAAi4C,kBAAA/9C,GAAAE,cAIA0W,EAAA3R,OAAAa,KAAA+gB,QAAA,GAGAi3B,EAAAlnC,EAAA4kB,cAEA,IAAAhzB,KAAAs1C,EACAt1C,KAAAoO,IACAA,EAAApO,GAAAs1C,EAAAt1C,IAMA,OADA1C,KAAA+gB,QAAApO,QAAA7B,EAAA5H,KACAnM,EAAAvC,WAAAyG,KACA,IAAAA,EAAAlB,MAAAC,KAAA+gB,QAAA,IAAAjQ,GAAA/M,OAAAmF,KACA4H,EAAAyhB,yBAKA,OAAA4jB,IAiBAj9C,OAAA,yBACA,sBACA,uBACA,SACA,kBACA,SAAAygB,EAAAu+B,EAAA72B,EAAA80B,GAEA,IAIA6B,EAHAG,EAAA/8C,MAAAY,UAAAwC,eACA45C,EAAAh9C,MAAAY,UAAAiC,MA4XA,OA1XAojB,EAAA4K,WAAA+rB,EAaA32B,EAAA4K,UAZA,SAAAgE,GACA,IAAA/e,EAAA4U,EAAArsB,EACA,IAAAA,EAAA,EAAA,OAAAqsB,EAAAmK,EAAAx2B,IAAAA,KAGAyX,EAAAmQ,EAAAirB,MAAAxmB,EAAA,YACA5U,EAAAzH,QACA4X,EAAAyE,GAAAilB,eAAA,UAGAiN,EAAA/nB,KAIA5O,EAAAw2B,OAAA,SAAAn+C,EAAA2+C,EAAAr8C,GACA,IAAAs8C,EAAAn9C,EAMAo6B,EAAA77B,EAAAJ,MAAA,KAAA,GACAI,EAAAA,EAAAJ,MAAA,KAAA,GACA,IAAAi/C,EAAAhjB,EAAA,IAAA77B,EAEAsC,IACAA,EAAAq8C,EACAA,EAAAh3B,EAAAm3B,QAGAn3B,EAAApmB,QAAAe,KACAA,EAAAqlB,EAAAlgB,OAAApB,MAAA,UAAAgE,OAAA/H,KAIAqlB,EAAAiqB,KAAA9lB,QAAA+yB,EAAAn+C,eAAA,SAAA0rB,GACA,QAAAzE,EAAAnY,KAAA4c,EAAAyyB,IAGAl3B,EAAAkU,GAAAlU,EAAAkU,OAEA+iB,EAAAj3B,EAAAkU,GAAA77B,GAEA,IAAA++C,EAAAJ,EAAAr8C,UACA08C,KAEA,IAAA,IAAA35C,KAAA/C,EAAA,CACA,IAAAvB,EAAAuB,EAAA+C,GAEAsiB,EAAAxlB,cAAApB,GACAi+C,EAAA35C,GAAAsiB,EAAAxlB,cAAA48C,EAAA15C,IACAsiB,EAAAw2B,OAAA12C,UAAAs3C,EAAA15C,GAAAtE,GAGA4mB,EAAAw2B,OAAA12C,UAAA1G,GAEAi+C,EAAA35C,GAAAtE,EAIA,IAAAk+C,EAAAt3B,EAAAw2B,OAAA12C,QAKA82C,kBAAAK,GAAAD,EAAAr8C,UAAAi8C,mBAAAv+C,IAEAuL,QAAAozC,EAAAr8C,UAAAiJ,SACAyzC,GACAh/C,KAAA6+C,EACAhjB,UAAAA,EACAqjB,WAAAl/C,EACAm7C,WAAA,aAAAtf,EAAAA,EAAA,IAAA,IAAA77B,EACAm/C,eAAAN,IA+GA,OA5GAp9C,EAAAkmB,EAAAkU,GAAA77B,GAAA2+C,EAAAtxC,QAAA4xC,GAkBAt3B,EAAAlgB,OAAAhG,EAAAm9C,GACAxkC,QAAA9X,EAAA8X,QAIA6kC,OAAAA,EAIAG,wBA0DAR,GACAj3B,EAAArgB,KAAAs3C,EAAAQ,mBAAA,SAAAr/C,EAAA0mB,GACA,IAAA44B,EAAA54B,EAAAnkB,UAIAqlB,EAAAw2B,OAAAkB,EAAAxjB,UAAA,IAAAwjB,EAAAH,WAAAz9C,EACAglB,EAAAw4B,iBAKAL,EAAAQ,oBAEAT,EAAAS,oBACAT,EAAAS,mBAAA95C,KAAA7D,GAMA+8C,EAAAhhB,SAAA/7B,EAAAzB,EAAA6+C,GAEAp9C,GAGAkmB,EAAAw2B,OAAA12C,OAAA,SAAAhC,GAOA,IANA,IAGAJ,EACAtE,EAJAgsB,EAAA2xB,EAAA99C,KAAAoF,UAAA,GACAs5C,EAAA,EACAC,EAAAxyB,EAAAltB,OAIAy/C,EAAAC,EAAAD,IACA,IAAAj6C,KAAA0nB,EAAAuyB,GACAv+C,EAAAgsB,EAAAuyB,GAAAj6C,GACAo5C,EAAA79C,KAAAmsB,EAAAuyB,GAAAj6C,SAAAjC,IAAArC,IAGA4mB,EAAAxlB,cAAApB,GACA0E,EAAAJ,GAAAsiB,EAAAxlB,cAAAsD,EAAAJ,IACAsiB,EAAAw2B,OAAA12C,UAAAhC,EAAAJ,GAAAtE,GAGA4mB,EAAAw2B,OAAA12C,UAAA1G,GAIA0E,EAAAJ,GAAAtE,GAKA,OAAA0E,GAIAkiB,EAAAm3B,OAAArC,EAAApvC,SACA6xC,WAAA,SACAX,kBAAA,GACA3B,eAAA,QAEArxC,SACAsgB,WACAhE,UAAA,EAGAzb,OAAA,MAGA+xC,OAAA,WACA,OAAA73C,KAAA+gB,SAGA40B,WAAA,SAAA52C,EAAAtE,GAWA,MAVA,YAAAsE,GACAiB,KAAAk5C,kBAAAz+C,GAGAuF,KAAAiF,QAAAlG,GAAAtE,EAEA,aAAAsE,GACAiB,KAAAm5C,mBAAA1+C,GAGAuF,MAGAk5C,kBAAA,SAAAz+C,GACA,IAAA2+C,EAAA/0C,EAAAg1C,EAEA,IAAAD,KAAA3+C,EACA4+C,EAAAr5C,KAAAu2C,qBAAA6C,GACA3+C,EAAA2+C,KAAAp5C,KAAAiF,QAAAsgB,QAAA6zB,IACAC,GACAA,EAAA9/C,SAQA8K,EAAAgd,EAAAg4B,EAAArwC,OACAhJ,KAAAw3C,aAAA6B,EAAAD,GAMA/0C,EAAA44B,SAAAj9B,KAAAg3C,UACAj2B,QAAA1c,EACAvF,KAAAs6C,EACA7zB,QAAA9qB,EACA+O,KAAA,OAKA2vC,mBAAA,SAAA1+C,GACAuF,KAAAy3C,aAAAz3C,KAAA63C,SAAA73C,KAAA64C,eAAA,YAAA,OAAAp+C,GAGAA,IACAuF,KAAAw3C,aAAAx3C,KAAAw2C,UAAA,KAAA,kBACAx2C,KAAAw3C,aAAAx3C,KAAA8gB,UAAA,KAAA,oBAIAw4B,OAAA,WACA,OAAAt5C,KAAA01C,aAAAn0B,UAAA,KAGA2xB,QAAA,WACA,OAAAlzC,KAAA01C,aAAAn0B,UAAA,KAIAg0B,OAAA,SAAAloC,EAAAw6B,GAKA,IAAA2N,EAAAx1C,KACA,OAAAuL,WALA,WACA,OAAA,iBAAA8B,EAAAmoC,EAAAnoC,GAAAA,GACAtN,MAAAy1C,EAAA91C,YAGAmoC,GAAA,IAGA0R,WAAA,SAAAx4B,GACA/gB,KAAAw2C,UAAAx2C,KAAAw2C,UAAAhtC,IAAAuX,GACA/gB,KAAAy2C,IAAA11B,GACA2O,WAAA,SAAA5e,GACA9Q,KAAA03C,UAAAr2B,EAAAvQ,EAAA2lB,eAAA,KAAA,mBAEA9G,WAAA,SAAA7e,GACA9Q,KAAAw3C,aAAAn2B,EAAAvQ,EAAA2lB,eAAA,KAAA,sBAKA+iB,WAAA,SAAAz4B,GACA/gB,KAAA8gB,UAAA9gB,KAAA8gB,UAAAtX,IAAAuX,GACA/gB,KAAAy2C,IAAA11B,GACA+S,QAAA,SAAAhjB,GACA9Q,KAAA03C,UAAAr2B,EAAAvQ,EAAA2lB,eAAA,KAAA,mBAEA1C,SAAA,SAAAjjB,GACA9Q,KAAAw3C,aAAAn2B,EAAAvQ,EAAA2lB,eAAA,KAAA,wBAOApV,EAAAm3B,OAAAM,sBAEAz3B,EAAArgB,MAAAkuB,KAAA,SAAAC,KAAA,WAAA,SAAA5nB,EAAAkyC,GACAp4B,EAAAm3B,OAAAx8C,UAAA,IAAAuL,GAAA,SAAAwZ,EAAA9b,EAAAhE,GAKA,IAAAy4C,EAJA,iBAAAz0C,IACAA,GAAA00C,OAAA10C,IAIA,IAAA20C,EAAA30C,GAEA,IAAAA,GAAA,iBAAAA,EACAw0C,EACAx0C,EAAA00C,QAAAF,EAHAlyC,EAMA,iBADAtC,EAAAA,SAEAA,GAAA0iC,SAAA1iC,IAGAy0C,GAAAr4B,EAAA9mB,cAAA0K,GACAA,EAAA81B,SAAA95B,EAEAgE,EAAA4iC,OACA9mB,EAAA8mB,MAAA5iC,EAAA4iC,OAGA6R,GAAAr4B,EAAAw4B,SAAAx4B,EAAAw4B,QAAAF,OAAAC,GACA74B,EAAAxZ,GAAAtC,GACA20C,IAAAryC,GAAAwZ,EAAA64B,GACA74B,EAAA64B,GAAA30C,EAAA0iC,SAAA1iC,EAAAojC,OAAApnC,GAEA8f,EAAA2oB,MAAA,SAAAr/B,GACAgX,EAAArhB,MAAAuH,KACAtG,GACAA,EAAA3G,KAAAymB,EAAA,IAEA1W,SAMAgX,EAAAw2B,SAIA3+C,OAAA,uBACA,SACA,SACA,cACA,aACA,UACA,iBACA,YACA,SAAAmoB,GACA,OAAAA,IAGAnoB,OAAA,kBAAA,uBAAA,SAAAa,GAAA,OAAAA,IAEAb,OAAA,gCAAA,WACA,IAAA4gD,EAAA,WAEA95C,KAAA+5C,YAAA,EACA/5C,KAAAg6C,WAAA,IA8JA,OAlJAF,EAAAG,aAAA,SAAAhjC,EAAAijC,GAEA,OAAA7wC,KAAAC,UAAA4wC,EAAAjjC,GAAAA,GAYA6iC,EAAAK,UAAA,SAAAljC,EAAAijC,GAEA,OAAA7wC,KAAA+wC,MAAA/wC,KAAAC,UAAA4wC,EAAAjjC,EAAA,GAAAA,IASA6iC,EAAAO,cAAA,WAEA,OAAA,IAAAP,EAAAK,UAAA,EAAA,IAaAL,EAAAQ,gBAAA,SAAArjC,EAAAijC,EAAAK,GAEA,IAAAjxC,GAAA,KAAAixC,EAAA,OAAA,OAAA,OACA,OAAAlxC,KAAA+wC,MAAA9wC,GAAA4wC,EAAAjjC,EAAA,GAAAA,IAYA6iC,EAAAU,eAAA,SAAAxiC,EAAAyiC,GAEA,YAAA39C,IAAAkb,GAAA,OAAAA,EACAyiC,EAEAziC,GAUA8hC,EAAAY,UAAA,SAAA55C,EAAAvH,GAEA,OAAAuH,EAAA,EAAAA,EAAA,EAAAvH,EAAA,GAUAugD,EAAAa,UAAA,SAAA75C,EAAAvH,GAEA,OAAAuH,EAAAvH,EAAA,EAAAuH,EAAA,EAAA,GAWAg5C,EAAAc,qBAAA,SAAAx7C,EAAAD,EAAAoK,GAQA,IAAAmjB,EANA,QAAA5vB,IAAAsC,GAAA,OAAAA,QACAtC,IAAAqC,GAAA,OAAAA,EAMA,IAAAutB,KAAAttB,EACAA,EAAAZ,eAAAkuB,KACAnjB,QAAAzM,IAAAqC,EAAAutB,IAAA,OAAAvtB,EAAAutB,MACAvtB,EAAAutB,GAAAttB,EAAAstB,KAcAotB,EAAAe,kBAAA,SAAA3/C,EAAA4/C,EAAAC,GAEA,QAAAj+C,IAAA5B,GAAA,OAAAA,EACA,OAAA6/C,EAGA,IAAAC,EAAA9/C,EAAA4/C,GACA,YAAAh+C,IAAAk+C,GAAA,OAAAA,EACAD,EAGAC,GASAlB,EAAAmB,QAAA,SAAA9mB,GAEA5R,QAAA24B,IAAA,cAAA/mB,IAGA2lB,IAKA5gD,OAAA,gCAAA,SAAA,SAAA4gD,GAkFA,OA7EAA,EAAAqB,MAAA,WACAn7C,KAAA2I,MAAA,EACA3I,KAAA65B,KAAA,GAOAigB,EAAAqB,MAAAn/C,UAAAo/C,MAAA,WACA,IAAAC,EAAA,IAAAC,KACAt7C,KAAA2I,MAAA0yC,EAAAE,WAOAzB,EAAAqB,MAAAn/C,UAAAw/C,KAAA,WACA,IAAAH,EAAA,IAAAC,KACAt7C,KAAA2c,IAAA0+B,EAAAE,WASAzB,EAAAqB,MAAAn/C,UAAAy/C,OAAA,WACA,OAAAz7C,KAAA2c,IAAA3c,KAAA2I,OASAmxC,EAAA4B,WAAA,WACA17C,KAAA2I,MAAA,KACA3I,KAAA27C,OAAA,KACA37C,KAAAwY,QAAA,MAWAshC,EAAA4B,WAAA1/C,UAAA4/C,IAAA,SAAA5S,GACA,IAAAqS,EAAA,IAAAC,KACA3+B,EAAA0+B,EAAAE,UACA,OAAAv7C,KAAA2I,QACA3I,KAAA2I,MAAAgU,EACA3c,KAAA27C,OAAA,EACA37C,KAAAwY,QAAA,GAGA,OAAAwwB,QAAAlsC,IAAAksC,IACAA,EAAA,KAGAhpC,KAAA27C,OAAA37C,KAAA27C,OAAA,EACA,IAAAE,EAAAl/B,EAAA3c,KAAA2I,MAOA,OANAkzC,GAAA7S,IACAhpC,KAAAwY,QAAAxY,KAAA27C,OAAAE,EAAA,IACA77C,KAAA2I,MAAAgU,EACA3c,KAAA27C,OAAA,GAGAn+C,SAAAwC,KAAAwY,QAAA,KAGAshC,IAGA5gD,OAAA,oCAAA,SAAA,SAAA4gD,GAmEA,OAzDAA,EAAAgC,gBAAA,SAAA/4C,EAAAkU,EAAAijC,GACA,IAAA6B,EAAAh5C,EAAAkU,GACAlU,EAAAkU,GAAAlU,EAAAm3C,GACAn3C,EAAAm3C,GAAA6B,GAWAjC,EAAAkC,WAAA,SAAAj5C,EAAAk5C,EAAAC,GACA,GAAAn5C,EAAAxJ,OAAA,EACA,OAAA,EAGA,IAAA4iD,EAAAF,EACA,QAAAn/C,IAAAq/C,GAAA,OAAAA,EACA,OAAA,EAGA,IAOA1iD,EAAA2J,EAPAg5C,EAAAF,EAQA,SAPAp/C,IAAAs/C,GAAA,OAAAA,IACAA,EAAA,SAAA3iD,EAAA2J,GACA02C,EAAAgC,gBAAA/4C,EAAAtJ,EAAA2J,KAKA3J,EAAA,EAAAA,EAAAsJ,EAAAxJ,OAAA,EAAAE,IACA,IAAA2J,EAAA,EAAAA,EAAAL,EAAAxJ,OAAAE,EAAA,EAAA2J,IACA+4C,EAAAp5C,EAAAK,GAAAL,EAAAK,EAAA,KACAg5C,EAAAh5C,EAAAA,EAAA,GAKA,OAAA,GAUA02C,EAAAuC,WAAA,SAAAt5C,EAAA6F,GACA,IAAAnP,EACA,IAAAA,EAAA,EAAAA,EAAAmP,EAAAnP,IACAsJ,EAAA/D,KAAA+D,EAAApD,UAIAm6C,IAGA5gD,OAAA,gCAAA,SAAA,SAAA4gD,GAkEA,OArDAA,EAAAwC,aAAA,SAAAC,EAAAC,EAAAC,EAAArxC,EAAAsxC,GAuCA,IAAAjjD,EADA,QAAAqD,IAAA0/C,GAAA,OAAAA,GApCA,SAAAC,EAAAC,EAAAF,QAEA1/C,IAAA0/C,EAAAG,SAAA,OAAAH,EAAAG,SACAH,EAAAG,QAAAF,EAAAC,GA4CAE,CAAAH,EAAAC,EAAAF,GA1BA,SAAAK,EAAAC,EAAAJ,EAAAF,GAEA,IAAAO,EAAAR,KAhBA,SAAAO,EAAAJ,EAAAF,QAEA1/C,IAAA0/C,EAAAhuC,YAAA,OAAAguC,EAAAhuC,YACAguC,EAAAhuC,WAAAsuC,EAAAJ,GAcAM,CAAAF,EAAAJ,EAAAF,GACAO,GAAAD,EAAAL,EAAA,EACAlxC,WAAA,WACAsxC,EAAAC,EAAA,EAAAJ,EAAAF,IACApxC,GAEAG,WAAA,YAhBA,SAAAmxC,EAAAF,QAEA1/C,IAAA0/C,EAAAS,UAAA,OAAAT,EAAAS,UACAT,EAAAS,SAAAP,GAcAQ,CAAAR,EAAAF,IACApxC,GAgBAyxC,CAAA,EAAAH,EAAAF,QAVA,IAAA/iD,EAAA,EAAAA,EAAAgjD,GACAF,IADA9iD,OAaAqgD,IAGA5gD,OAAA,gCAAA,SAAA,SAAA4gD,GAsCA,OA/BAA,EAAAqD,eAAA,WACA,IAAAniD,OAAAoiD,sBACA,OAAA,EAGA,IACA,IAAAC,EAAA3pC,SAAA2H,cAAA,UACA,IAAAgiC,EAAAC,WAAA,wBAAAD,EAAAC,WAAA,SACA,OAAA,EAEA,MAAAC,GACA,OAAA,EAGA,OAAA,GASAzD,EAAA0D,iBAAA,WACA,SAAAxiD,OAAAyiD,MAAAziD,OAAA0iD,YAAA1iD,OAAA2iD,UAAA3iD,OAAAi1C,MAAAj1C,OAAAqf,MAOAy/B,IAGA5gD,OAAA,qCAAA,SAAA,SAAA4gD,GAqBA,OAbAA,EAAA8D,aAAA,SAAAC,EAAAC,GACA,IAAApN,EAAA,IAAA9B,eACA8B,EAAApB,iBAAA,oBACAoB,EAAAH,KAAA,MAAAsN,GAAA,GACAnN,EAAAqN,mBAAA,WACA,GAAA,GAAArN,EAAAjZ,WAAA,CACA,IAAAumB,EAAAjoC,KAAAlF,MAAA6/B,EAAAZ,cACAgO,EAAAE,KAGAtN,EAAAD,KAAA,OAGAqJ,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GAoMA,OAnMAA,EAAAmE,IAAA,KACAnE,EAAAoE,IAAA,WACApE,EAAAqE,OAAA,kBACArE,EAAAsE,OAAA,iBAUAtE,EAAAuE,OAAA,SAAAn+C,GAEA,OAAAmJ,KAAAu5B,IAAA1iC,GAAA45C,EAAAmE,KAWAnE,EAAAwE,WAAA,SAAAp+C,GAEA,OAAAA,EAAA45C,EAAAmE,KAWAnE,EAAAyE,WAAA,SAAAr+C,GAEA,OAAAA,GAAA45C,EAAAmE,KAYAnE,EAAA0E,QAAA,SAAAt+C,EAAAC,GAEA,OAAAA,EAAAD,EAAA45C,EAAAmE,KAYAnE,EAAA2E,UAAA,SAAAv+C,EAAAC,GAEA,OAAAD,EAAAC,EAAA25C,EAAAmE,KAYAnE,EAAA4E,QAAA,SAAAx+C,EAAAC,GAEA,OAAAkJ,KAAAu5B,IAAAziC,EAAAD,GAAA45C,EAAAmE,KAaAnE,EAAA6E,eAAA,SAAAz+C,EAAAC,EAAAy+C,GAEA,OAAAv1C,KAAAu5B,IAAAziC,EAAAD,GAAA0+C,GAYA9E,EAAA+E,eAAA,SAAA3+C,EAAAC,GAEA,OAAA25C,EAAA0E,QAAAt+C,EAAAC,IAAA25C,EAAA4E,QAAAx+C,EAAAC,IAYA25C,EAAAgF,iBAAA,SAAA5+C,EAAAC,GAEA,OAAA25C,EAAA2E,UAAAv+C,EAAAC,IAAA25C,EAAA4E,QAAAx+C,EAAAC,IAYA25C,EAAAiF,QAAA,SAAA7+C,EAAAC,GAEA,OAAA25C,EAAA0E,QAAAt+C,EAAAC,GAAAD,EAAAC,GAYA25C,EAAAkF,QAAA,SAAA9+C,EAAAC,GAEA,OAAA25C,EAAA2E,UAAAv+C,EAAAC,GAAAD,EAAAC,GAWA25C,EAAAmF,OAAA,SAAAxkD,GAEA,OAAAq/C,EAAAgF,iBAAArkD,EAAA,GACA4O,KAAA61C,GAAA,EACApF,EAAA+E,eAAApkD,GAAA,IACA4O,KAAA61C,GAAA,EAGA71C,KAAA81C,KAAA1kD,IAWAq/C,EAAAsF,OAAA,SAAA3kD,GAEA,OAAAq/C,EAAAgF,iBAAArkD,EAAA,GACA,EACAq/C,EAAA+E,eAAApkD,GAAA,GACA4O,KAAA61C,GAGA71C,KAAAg2C,KAAA5kD,IAGAq/C,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GAqRA,OA7QAA,EAAAwF,QAAA,SAAApd,EAAAC,GAEAniC,KAAAkiC,EAAAA,EACAliC,KAAAmiC,EAAAA,GAUA2X,EAAAwF,QAAAtjD,UAAAujD,IAAA,SAAArd,EAAAC,GAEAniC,KAAAkiC,EAAAA,EACAliC,KAAAmiC,EAAAA,GAWA2X,EAAAwF,QAAAtjD,UAAA0iD,QAAA,SAAAc,GAEA,OAAA1F,EAAA4E,QAAA1+C,KAAAkiC,EAAAsd,EAAAtd,IAAA4X,EAAA4E,QAAA1+C,KAAAmiC,EAAAqd,EAAArd,IAYA2X,EAAAwF,QAAAtjD,UAAA2iD,eAAA,SAAAa,EAAAZ,GAEA,OAAA9E,EAAA6E,eAAA3+C,KAAAkiC,EAAAsd,EAAAtd,EAAA0c,IAAA9E,EAAA6E,eAAA3+C,KAAAmiC,EAAAqd,EAAArd,EAAAyc,IAWA9E,EAAAwF,QAAAtjD,UAAAyjD,WAAA,SAAAD,GAEA,OAAAn2C,KAAAq2C,MAAAF,EAAAtd,EAAAliC,KAAAkiC,IAAAsd,EAAAtd,EAAAliC,KAAAkiC,IAAAsd,EAAArd,EAAAniC,KAAAmiC,IAAAqd,EAAArd,EAAAniC,KAAAmiC,KAWA2X,EAAAwF,QAAAtjD,UAAA2jD,QAAA,SAAAH,GAEA,IAAAI,EAAA5/C,KAAA6/C,QAAAC,YACAC,EAAAP,EAAAK,QAAAC,YACA,GAAAF,EAAAlB,QAAAqB,GACA,OAAA,EAEA,IAAAC,EAAAlG,EAAAmG,YAAAL,EAAAG,GACA,OAAAjG,EAAAsF,OAAAY,IASAlG,EAAAwF,QAAAtjD,UAAAkkD,OAAA,WAEA,OAAA72C,KAAAq2C,KAAA1/C,KAAAkiC,EAAAliC,KAAAkiC,EAAAliC,KAAAmiC,EAAAniC,KAAAmiC,IAWA2X,EAAAwF,QAAAtjD,UAAAmkD,eAAA,SAAAC,GAIA,OAFApgD,KAAAkiC,GAAAke,EACApgD,KAAAmiC,GAAAie,EACApgD,MASA85C,EAAAwF,QAAAtjD,UAAA8jD,UAAA,WAEA,IAAAvmD,EAAAyG,KAAAkgD,SAIA,OAHApG,EAAAwE,WAAA/kD,IACAyG,KAAAmgD,eAAA,EAAA5mD,GAEAyG,MAWA85C,EAAAwF,QAAAtjD,UAAAqkD,UAAA,SAAA9mD,GAEA,IAAA+mD,EAAAtgD,KAAAkgD,SAIA,OAHApG,EAAAwE,WAAAgC,IACAtgD,KAAAmgD,eAAA5mD,EAAA+mD,GAEAtgD,MAYA85C,EAAAwF,QAAAtjD,UAAAukD,OAAA,SAAAC,EAAAC,GAEA,IAAAjY,EAAAgY,EAAAX,QAAAC,YAGA,OAFA9/C,KAAAkiC,GAAAsG,EAAAtG,EAAAue,EACAzgD,KAAAmiC,GAAAqG,EAAArG,EAAAse,EACAzgD,MAYA85C,EAAAwF,QAAAtjD,UAAA0kD,OAAA,SAAAC,EAAAC,GAEA,IAAA1e,EAAAliC,KAAAkiC,EAAA0e,EAAA1e,EACAC,EAAAniC,KAAAmiC,EAAAye,EAAAze,EACA0e,EAAAx3C,KAAAy3C,IAAAH,GACAI,EAAA13C,KAAA23C,IAAAL,GAGA,OAFA3gD,KAAAkiC,EAAAA,EAAA2e,EAAA1e,EAAA4e,EAAAH,EAAA1e,EACAliC,KAAAmiC,EAAAD,EAAA6e,EAAA5e,EAAA0e,EAAAD,EAAAze,EACAniC,MASA85C,EAAAwF,QAAAtjD,UAAAilD,SAAA,WAEA,MAAA,IAAAjhD,KAAAkiC,EAAA,KAAAliC,KAAAmiC,EAAA,KASA2X,EAAAwF,QAAAtjD,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAwF,QAAAt/C,KAAAkiC,EAAAliC,KAAAmiC,IAOA2X,EAAAoH,SAAApH,EAAAwF,QAUAxF,EAAAqH,iBAAA,SAAAp+C,GAEA,OAAA,IAAA+2C,EAAAwF,QAAAv8C,EAAA,GAAAA,EAAA,KAWA+2C,EAAAsH,eAAA,SAAA5B,GAEA,OAAAA,EAAAtd,EAAAsd,EAAArd,IAYA2X,EAAAuH,WAAA,SAAAnhD,EAAAC,GAEA,OAAA,IAAA25C,EAAAwF,QAAAp/C,EAAAgiC,EAAA/hC,EAAA+hC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,IAYA2X,EAAAwH,WAAA,SAAAphD,EAAAC,GAEA,OAAA,IAAA25C,EAAAwF,QAAAp/C,EAAAgiC,EAAA/hC,EAAA+hC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,IAYA2X,EAAAmG,YAAA,SAAA//C,EAAAC,GAEA,OAAAD,EAAAgiC,EAAA/hC,EAAA+hC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,GAGA2X,IAGA5gD,OAAA,oCAAA,eAAA,SAAA4gD,GAoYA,OA3XAA,EAAAyH,MAAA,SAAArf,EAAAC,EAAAqf,GAEAxhD,KAAAkiC,EAAAA,EACAliC,KAAAmiC,EAAAA,EACAniC,KAAAwhD,EAAAA,GAWA1H,EAAAyH,MAAAvlD,UAAAujD,IAAA,SAAArd,EAAAC,EAAAqf,GAEAxhD,KAAAkiC,EAAAA,EACAliC,KAAAmiC,EAAAA,EACAniC,KAAAwhD,EAAAA,GAWA1H,EAAAyH,MAAAvlD,UAAA0iD,QAAA,SAAAc,GAEA,OAAA1F,EAAA4E,QAAA1+C,KAAAkiC,EAAAsd,EAAAtd,IAAA4X,EAAA4E,QAAA1+C,KAAAmiC,EAAAqd,EAAArd,IAAA2X,EAAA4E,QAAA1+C,KAAAwhD,EAAAhC,EAAAgC,IAYA1H,EAAAyH,MAAAvlD,UAAA2iD,eAAA,SAAAa,EAAAZ,GAEA,OAAA9E,EAAA6E,eAAA3+C,KAAAkiC,EAAAsd,EAAAtd,EAAA0c,IAAA9E,EAAA6E,eAAA3+C,KAAAmiC,EAAAqd,EAAArd,EAAAyc,IAAA9E,EAAA6E,eAAA3+C,KAAAwhD,EAAAhC,EAAAgC,EAAA5C,IAWA9E,EAAAyH,MAAAvlD,UAAAyjD,WAAA,SAAAD,GAEA,OAAAn2C,KAAAq2C,MAAAF,EAAAtd,EAAAliC,KAAAkiC,IAAAsd,EAAAtd,EAAAliC,KAAAkiC,IAAAsd,EAAArd,EAAAniC,KAAAmiC,IAAAqd,EAAArd,EAAAniC,KAAAmiC,IAAAqd,EAAAgC,EAAAxhD,KAAAwhD,IAAAhC,EAAAgC,EAAAxhD,KAAAwhD,KAWA1H,EAAAyH,MAAAvlD,UAAA2jD,QAAA,SAAAH,GAEA,IAAAI,EAAA5/C,KAAA6/C,QAAAC,YACAC,EAAAP,EAAAK,QAAAC,YACA,GAAAF,EAAAlB,QAAAqB,GACA,OAAA,EAEA,IAAAC,EAAAlG,EAAA2H,UAAA7B,EAAAG,GACA,OAAAjG,EAAAsF,OAAAY,IAWAlG,EAAAyH,MAAAvlD,UAAA0lD,gBAAA,SAAAlC,GAEA,IAAAmB,EAAA3gD,KAAA2/C,QAAAH,GACA,OAAA1F,EAAA4E,QAAAiC,EAAA,IAAA7G,EAAA4E,QAAAiC,EAAAt3C,KAAA61C,KAWApF,EAAAyH,MAAAvlD,UAAA2lD,oBAAA,SAAAnC,GAEA,IAAAmB,EAAA3gD,KAAA2/C,QAAAH,GACA,OAAA1F,EAAA4E,QAAAiC,EAAAt3C,KAAA61C,GAAA,IASApF,EAAAyH,MAAAvlD,UAAAkkD,OAAA,WAEA,OAAA72C,KAAAq2C,KAAA1/C,KAAAkiC,EAAAliC,KAAAkiC,EAAAliC,KAAAmiC,EAAAniC,KAAAmiC,EAAAniC,KAAAwhD,EAAAxhD,KAAAwhD,IASA1H,EAAAyH,MAAAvlD,UAAA4lD,IAAA,SAAApC,GAEAx/C,KAAAkiC,GAAAsd,EAAAtd,EACAliC,KAAAmiC,GAAAqd,EAAArd,EACAniC,KAAAwhD,GAAAhC,EAAAgC,GASA1H,EAAAyH,MAAAvlD,UAAA6lD,IAAA,SAAArC,GAEAx/C,KAAAkiC,GAAAsd,EAAAtd,EACAliC,KAAAmiC,GAAAqd,EAAArd,EACAniC,KAAAwhD,GAAAhC,EAAAgC,GAWA1H,EAAAyH,MAAAvlD,UAAAmkD,eAAA,SAAAC,GAKA,OAHApgD,KAAAkiC,GAAAke,EACApgD,KAAAmiC,GAAAie,EACApgD,KAAAwhD,GAAApB,EACApgD,MASA85C,EAAAyH,MAAAvlD,UAAA8jD,UAAA,WAEA,IAAAvmD,EAAAyG,KAAAkgD,SAIA,OAHApG,EAAAwE,WAAA/kD,IACAyG,KAAAmgD,eAAA,EAAA5mD,GAEAyG,MAWA85C,EAAAyH,MAAAvlD,UAAAqkD,UAAA,SAAA9mD,GAEA,IAAA+mD,EAAAtgD,KAAAkgD,SAIA,OAHApG,EAAAwE,WAAAgC,IACAtgD,KAAAmgD,eAAA5mD,EAAA+mD,GAEAtgD,MAYA85C,EAAAyH,MAAAvlD,UAAAukD,OAAA,SAAAC,EAAAC,GAEA,IAAAjY,EAAAgY,EAAAX,QAAAC,YAIA,OAHA9/C,KAAAkiC,GAAAsG,EAAAtG,EAAAue,EACAzgD,KAAAmiC,GAAAqG,EAAArG,EAAAse,EACAzgD,KAAAwhD,GAAAhZ,EAAAgZ,EAAAf,EACAzgD,MAcA85C,EAAAyH,MAAAvlD,UAAA0kD,OAAA,SAAAoB,EAAAnB,EAAAC,GAEA,IAAApY,EAAAsZ,EAAAjC,QAAAC,YAEAiC,EAAAvZ,EAAAtG,EACAhsB,EAAAsyB,EAAArG,EACA3uB,EAAAg1B,EAAAgZ,EAEAtf,EAAAliC,KAAAkiC,EAAA0e,EAAA1e,EACAC,EAAAniC,KAAAmiC,EAAAye,EAAAze,EACAqf,EAAAxhD,KAAAwhD,EAAAZ,EAAAY,EAEAT,EAAA13C,KAAA23C,IAAAL,GACAE,EAAAx3C,KAAAy3C,IAAAH,GAQA,OAPA3gD,KAAAkiC,GAAA6f,IAAAA,EAAA7f,EAAAhsB,EAAAisB,EAAA3uB,EAAAguC,IAAA,EAAAX,GAAA3e,EAAA2e,IAAArtC,EAAA2uB,EAAAjsB,EAAAsrC,GAAAT,EACA/gD,KAAAmiC,GAAAjsB,IAAA6rC,EAAA7f,EAAAhsB,EAAAisB,EAAA3uB,EAAAguC,IAAA,EAAAX,GAAA1e,EAAA0e,GAAArtC,EAAA0uB,EAAA6f,EAAAP,GAAAT,EACA/gD,KAAAwhD,GAAAhuC,IAAAuuC,EAAA7f,EAAAhsB,EAAAisB,EAAA3uB,EAAAguC,IAAA,EAAAX,GAAAW,EAAAX,IAAA3qC,EAAAgsB,EAAA6f,EAAA5f,GAAA4e,EAEA/gD,KAAAkiC,GAAA0e,EAAA1e,EACAliC,KAAAmiC,GAAAye,EAAAze,EACAniC,KAAAwhD,GAAAZ,EAAAY,EACAxhD,MAWA85C,EAAAyH,MAAAvlD,UAAAgmD,UAAA,SAAAxZ,GAEA,IAAAoY,EAAA,IAAA9G,EAAAyH,MAAA,EAAA,EAAA,GACAU,EAAA,IAAAnI,EAAAoI,OAAA,EAAA,EAAA,GACAJ,EAAAhI,EAAAqI,YAAA3Z,EAAAyZ,GACAtB,EAAAnY,EAAAmX,QAAAsC,GACAG,EAAApiD,KAAA6/C,QAAAa,OAAAoB,EAAAnB,EAAAC,GACA,OAAA,IAAA9G,EAAAwF,QAAA8C,EAAAlgB,EAAAkgB,EAAAjgB,IASA2X,EAAAyH,MAAAvlD,UAAAilD,SAAA,WAEA,MAAA,IAAAjhD,KAAAkiC,EAAA,KAAAliC,KAAAmiC,EAAA,KAAAniC,KAAAwhD,EAAA,KASA1H,EAAAyH,MAAAvlD,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAyH,MAAAvhD,KAAAkiC,EAAAliC,KAAAmiC,EAAAniC,KAAAwhD,IAOA1H,EAAAoI,OAAApI,EAAAyH,MAUAzH,EAAAuI,eAAA,SAAAt/C,GAEA,OAAA,IAAA+2C,EAAAyH,MAAAx+C,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAWA+2C,EAAAwI,aAAA,SAAA9C,GAEA,OAAAA,EAAAtd,EAAAsd,EAAArd,EAAAqd,EAAAgC,IAYA1H,EAAAyI,SAAA,SAAAriD,EAAAC,GAEA,OAAA,IAAA25C,EAAAyH,MAAArhD,EAAAgiC,EAAA/hC,EAAA+hC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,EAAAjiC,EAAAshD,EAAArhD,EAAAqhD,IAYA1H,EAAA0I,SAAA,SAAAtiD,EAAAC,GAEA,OAAA,IAAA25C,EAAAyH,MAAArhD,EAAAgiC,EAAA/hC,EAAA+hC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,EAAAjiC,EAAAshD,EAAArhD,EAAAqhD,IAYA1H,EAAA2H,UAAA,SAAAvhD,EAAAC,GAEA,OAAAD,EAAAgiC,EAAA/hC,EAAA+hC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,EAAAjiC,EAAAshD,EAAArhD,EAAAqhD,GAYA1H,EAAAqI,YAAA,SAAAjiD,EAAAC,GAEA,IAAAhC,EAAA,IAAA27C,EAAAoI,OAAA,EAAA,EAAA,GAIA,OAHA/jD,EAAA+jC,EAAAhiC,EAAAiiC,EAAAhiC,EAAAqhD,EAAAthD,EAAAshD,EAAArhD,EAAAgiC,EACAhkC,EAAAgkC,EAAAjiC,EAAAshD,EAAArhD,EAAA+hC,EAAAhiC,EAAAgiC,EAAA/hC,EAAAqhD,EACArjD,EAAAqjD,EAAAthD,EAAAgiC,EAAA/hC,EAAAgiC,EAAAjiC,EAAAiiC,EAAAhiC,EAAA+hC,EACA/jC,GAGA27C,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GAqDA,OA5CAA,EAAA2I,qBAAA,SAAAC,EAAAC,EACAC,EAAAC,GAEA,OAAAH,EAAAG,EAAAF,EAAAC,GAWA9I,EAAAgJ,qBAAA,SAAAJ,EAAAC,EAAAI,EACAH,EAAAC,EAAAG,EACAC,EAAAC,EAAAC,GAEA,IAAAC,EAAAtJ,EAAA2I,qBAAAI,EAAAG,EAAAE,EAAAC,GACAE,EAAAvJ,EAAA2I,qBAAAG,EAAAI,EAAAC,EAAAE,GACAG,EAAAxJ,EAAA2I,qBAAAG,EAAAC,EAAAI,EAAAC,GACA,OAAAR,EAAAU,EAAAT,EAAAU,EAAAN,EAAAO,GAWAxJ,EAAAyJ,qBAAA,SAAAb,EAAAC,EAAAI,EAAAS,EACAZ,EAAAC,EAAAG,EAAAS,EACAR,EAAAC,EAAAC,EAAAO,EACAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAV,EAAAtJ,EAAAgJ,qBAAAD,EAAAG,EAAAS,EAAAP,EAAAC,EAAAO,EAAAE,EAAAC,EAAAC,GACAT,EAAAvJ,EAAAgJ,qBAAAF,EAAAI,EAAAS,EAAAR,EAAAE,EAAAO,EAAAC,EAAAE,EAAAC,GACAR,EAAAxJ,EAAAgJ,qBAAAF,EAAAC,EAAAY,EAAAR,EAAAC,EAAAQ,EAAAC,EAAAC,EAAAE,GACAC,EAAAjK,EAAAgJ,qBAAAF,EAAAC,EAAAG,EAAAC,EAAAC,EAAAC,EAAAQ,EAAAC,EAAAC,GACA,OAAAT,EAAAV,EAAAW,EAAAV,EAAAW,EAAAP,EAAAgB,EAAAP,GAGA1J,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GAiaA,OAxZAA,EAAAkK,aACAC,QAAA,EACAC,iBAAA,EACAC,UAAA,GAYArK,EAAAsK,WAAA,SAAAlkD,EAAAC,GAEA,OAAA,IAAA25C,EAAAwF,SAAAp/C,EAAAgiC,EAAA/hC,EAAA+hC,GAAA,GAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,GAAA,IAaA2X,EAAAuK,mBAAA,SAAAnkD,EAAAC,EAAA4U,GAEA,IAAA2tC,EAAAxiD,EAAAgiC,EACAygB,EAAAziD,EAAAiiC,EACAygB,EAAAziD,EAAA+hC,EACA2gB,EAAA1iD,EAAAgiC,EACA8gB,EAAAluC,EAAAmtB,EACAghB,EAAAnuC,EAAAotB,EAEAmiB,EAAA5B,EAAAG,EAAAF,EAAAM,EAAAL,EAAAM,EAAAL,EAAAI,EAAAN,EAAAC,EAAAF,EAAAQ,EACA,OAAApJ,EAAAwE,WAAAgG,GACAxK,EAAAkK,YAAAE,iBACApK,EAAAyE,WAAA+F,GACAxK,EAAAkK,YAAAG,UAGArK,EAAAkK,YAAAC,SAaAnK,EAAAyK,sBAAA,SAAArkD,EAAAC,EAAAqgD,GAEA,IAAAgE,EAAA1K,EAAAwH,WAAAnhD,EAAAD,GACAugD,EAAAvgD,EAAAu/C,WAAAt/C,GAEAwgD,EAAA6D,EAAA7E,QAAAa,GAKA,OAJA1G,EAAAwE,WAAAqC,KACAF,GAAAA,GAGAA,GAYA3G,EAAA2K,iBAAA,SAAAC,EAAAC,GAEA,IAAAxmD,EAAA,IAAA27C,EAAAwF,QAAA,EAAA,GAGA,OAFAnhD,EAAA+jC,EAAAwiB,EAAAr7C,KAAAy3C,IAAA6D,GACAxmD,EAAAgkC,EAAAuiB,EAAAr7C,KAAA23C,IAAA2D,GACAxmD,GAYA27C,EAAA8K,sBAAA,SAAAF,EAAAC,GAEA,OAAAA,EAAAD,GAYA5K,EAAA+K,sBAAA,SAAAH,EAAAI,GAEA,OAAAhL,EAAA4E,QAAAgG,EAAA,GACA,EAGAI,EAAAJ,GAYA5K,EAAAiL,SAAA,SAAA7kD,EAAAC,GAEA,OAAA,IAAA25C,EAAAyH,OAAArhD,EAAAgiC,EAAA/hC,EAAA+hC,GAAA,GAAAhiC,EAAAiiC,EAAAhiC,EAAAgiC,GAAA,GAAAjiC,EAAAshD,EAAArhD,EAAAqhD,GAAA,IAaA1H,EAAAkL,oBAAA,SAAA9kD,EAAAC,EAAAqgD,GAEA,IAAAgE,EAAA1K,EAAA0I,SAAAriD,EAAAD,GACAugD,EAAAvgD,EAAAu/C,WAAAt/C,GAEAwgD,EAAA6D,EAAA7E,QAAAa,GAKA,OAJA1G,EAAAwE,WAAAqC,KACAF,GAAAA,GAGAA,GAaA3G,EAAAmL,oBAAA,SAAA/kD,EAAAC,EAAAqoC,GAEA,IAAAmY,EAAAzgD,EAAAy/C,QAAAx/C,GACAygD,EAAA,IAAA9G,EAAAyH,MAAA,EAAA,EAAA,GAMA,OAJAzH,EAAAoL,iBAAAhlD,EAAA0gD,EAAAzgD,EAAAqoC,IAAAsR,EAAAkK,YAAAG,YACAxD,EAAA,EAAAt3C,KAAA61C,GAAAyB,GAGAA,GAcA7G,EAAAoL,iBAAA,SAAAhlD,EAAAC,EAAA4U,EAAAyzB,GAEA,IAAA2c,EAAAjlD,EAAA8hD,UAAAxZ,GACA4c,EAAAjlD,EAAA6hD,UAAAxZ,GACA6c,EAAAtwC,EAAAitC,UAAAxZ,GACA8c,EAAAxL,EAAAuK,mBAAAc,EAAAC,EAAAC,GAEApD,EAAA,IAAAnI,EAAAoI,OAAA,EAAA,EAAA,GACAvB,EAAAnY,EAAAmX,QAAAsC,GASA,OARAnI,EAAA4E,QAAAiC,EAAAt3C,KAAA61C,MACAoG,GAAAxL,EAAAkK,YAAAE,iBACAoB,EAAAxL,EAAAkK,YAAAG,UACAmB,GAAAxL,EAAAkK,YAAAG,YACAmB,EAAAxL,EAAAkK,YAAAE,mBAIAoB,GAaAxL,EAAAyL,qBAAA,SAAAb,EAAAC,EAAAa,GAEA,IAAArnD,EAAA,IAAA27C,EAAAyH,MAAA,EAAA,EAAA,GAIA,OAHApjD,EAAA+jC,EAAAwiB,EAAAr7C,KAAA23C,IAAA2D,GAAAt7C,KAAAy3C,IAAA0E,GACArnD,EAAAgkC,EAAAuiB,EAAAr7C,KAAA23C,IAAA2D,GAAAt7C,KAAA23C,IAAAwE,GACArnD,EAAAqjD,EAAAkD,EAAAr7C,KAAAy3C,IAAA6D,GACAxmD,GAaA27C,EAAA2L,uBAAA,SAAAf,EAAA/kB,EAAAglB,GAEA,IAAAxmD,EAAA,IAAA27C,EAAAyH,MAAA,EAAA,EAAA,GAIA,OAHApjD,EAAA+jC,EAAAwiB,EAAAr7C,KAAAy3C,IAAA6D,GACAxmD,EAAAgkC,EAAAuiB,EAAAr7C,KAAA23C,IAAA2D,GACAxmD,EAAAqjD,EAAA7hB,EACAxhC,GAaA27C,EAAA4L,aAAA,SAAAxlD,EAAAC,EAAAukD,GAEA,IAAA/D,EAAAzgD,EAAAy/C,QAAAx/C,GACA,OAAAwgD,EAAA+D,GAcA5K,EAAA6L,iBAAA,SAAAzlD,EAAAC,EAAAukD,EAAAlc,GAEA,IAAAmY,EAAA7G,EAAAmL,oBAAA/kD,EAAAC,EAAAqoC,GACA,OAAAmY,EAAA+D,GAWA5K,EAAA8L,kBAAA,SAAA5mB,GAEA,IAAAp2B,EAAAo2B,EAAAzlC,OACAssD,EAAA,IAAA/L,EAAAyH,MAAA,EAAA,EAAA,GACA,GAAA34C,GAAA,EAAA,CACA,IAAAnP,EACA,IAAAA,EAAA,EAAAA,EAAAmP,EAAAnP,IACAosD,EAAA/L,EAAAyI,SAAAsD,EAAA7mB,EAAAvlC,IAEAosD,EAAA1F,eAAA,EAAAv3C,GAGA,OAAAi9C,GAaA/L,EAAAgM,wBAAA,SAAAC,EAAAC,EAAAC,GAEA,IAAA/vC,EAAA4jC,EAAA0I,SAAAwD,EAAAD,GACAvyC,EAAAsmC,EAAA0I,SAAAyD,EAAAF,GAEAvd,EAAA,IAAAsR,EAAAoI,OAAA,EAAA,EAAA,GAMA,OALA1Z,EAAAtG,EAAAhsB,EAAAisB,EAAA3uB,EAAAguC,EAAAtrC,EAAAsrC,EAAAhuC,EAAA2uB,EACAqG,EAAArG,EAAAjsB,EAAAsrC,EAAAhuC,EAAA0uB,EAAAhsB,EAAAgsB,EAAA1uB,EAAAguC,EACAhZ,EAAAgZ,EAAAtrC,EAAAgsB,EAAA1uB,EAAA2uB,EAAAjsB,EAAAisB,EAAA3uB,EAAA0uB,EAEAsG,EAAAsX,YACAtX,GAWAsR,EAAAoM,gBAAA,SAAAlnB,GAEA,IAGAvlC,EAAA0sD,EACA3tC,EAAAnO,EAJAzB,EAAAo2B,EAAAzlC,OACAivC,EAAA,IAAAsR,EAAAoI,OAAA,EAAA,EAAA,GACA,GAAAt5C,GAAA,EAGA,IAAAnP,EAAA,EAAAA,EAAAmP,EAAAnP,IAEA0sD,GAAA1sD,EAAA,GAAAmP,EAEA4P,EAAAwmB,EAHAvlC,EAAAmP,GAIAyB,EAAA20B,EAAAmnB,GAEA3d,EAAAtG,IAAA1pB,EAAA2pB,EAAA93B,EAAA83B,IAAA3pB,EAAAgpC,EAAAn3C,EAAAm3C,GACAhZ,EAAArG,IAAA3pB,EAAAgpC,EAAAn3C,EAAAm3C,IAAAhpC,EAAA0pB,EAAA73B,EAAA63B,GACAsG,EAAAgZ,IAAAhpC,EAAA0pB,EAAA73B,EAAA63B,IAAA1pB,EAAA2pB,EAAA93B,EAAA83B,GAKA,OADAqG,EAAAsX,YACAtX,GAaAsR,EAAAsM,yBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAn6B,EAAAo6B,EAAA3kC,GAEA,SAAA4kC,EAAAxmD,EAAAC,EAAA4U,GAEA,IAAA2pB,GAAAx+B,EAAAC,EAAA4U,GAAA,EACA4xC,EAAAjoB,GAAAA,EAAAx+B,IAAAw+B,EAAAv+B,IAAAu+B,EAAA3pB,GACA,OAAA4xC,EAAA,EACA,EAEAt9C,KAAAq2C,KAAAiH,GAGA,IAAAC,EAAAP,EAAA5G,WAAA6G,GACAO,EAAAP,EAAA7G,WAAA8G,GACAO,EAAAP,EAAA9G,WAAA4G,GAEAU,EAAAV,EAAA5G,WAAA39B,GACAklC,EAAAV,EAAA7G,WAAA39B,GACAmlC,EAAAV,EAAA9G,WAAA39B,GAEAolC,EAAAR,EAAAE,EAAAC,EAAAC,GACA,GAAAhN,EAAAuE,OAAA6I,GACA,OAAAV,EAGA,IAAAW,EAAAT,EAAAE,EAAAG,EAAAC,GACAI,EAAAV,EAAAG,EAAAG,EAAAC,GACAI,EAAAX,EAAAI,EAAAC,EAAAE,GAEAK,EAAAd,EAAA3G,QAAAM,eAAAiH,GACAG,EAAAl7B,EAAAwzB,QAAAM,eAAAkH,GACAG,EAAAf,EAAA5G,QAAAM,eAAAgH,GACAM,EAAA3N,EAAAyI,SAAAzI,EAAAyI,SAAA+E,EAAAC,GAAAC,GAEA,OADAC,EAAAtH,eAAA,EAAA+G,GACAO,GAGA3N,IAGA5gD,OAAA,qCAAA,eAAA,SAAA4gD,GAslBA,OA/kBAA,EAAA4N,eAAA,WAEA,IAAAvpD,KAiBA,OAhBAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,GAWA27C,EAAA6N,YAAA,SAAAC,GAEA,IAAAzpD,KAiBA,OAhBAA,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,GAWA27C,EAAA+N,gBAAA,SAAAD,GAEA,IAAAzpD,KAiBA,OAhBAA,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,IACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,IACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,GAAAypD,EAAA,GACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,GACAzpD,EAAA,IAAAypD,EAAA,GACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,EAAA,IAAAypD,EAAA,IACAzpD,GAYA27C,EAAAgO,qBAAA,SAAAF,EAAAG,GAEA,IAAAC,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAV,EAAA,GACAW,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAb,EAAA,GACAc,EAAAd,EAAA,GACAe,EAAAf,EAAA,GACAgB,EAAAhB,EAAA,GACAiB,EAAAjB,EAAA,GACAkB,EAAAlB,EAAA,IACAmB,EAAAnB,EAAA,IACAoB,EAAApB,EAAA,IACAqB,EAAArB,EAAA,IACAsB,EAAAtB,EAAA,IACAuB,EAAAvB,EAAA,IAEAzpD,KAKA,OAJAA,EAAA,GAAA6pD,EAAAI,EAAAH,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EACA7qD,EAAA,GAAA6pD,EAAAK,EAAAJ,EAAAQ,EAAAP,EAAAW,EAAAV,EAAAc,EACA9qD,EAAA,GAAA6pD,EAAAM,EAAAL,EAAAS,EAAAR,EAAAY,EAAAX,EAAAe,EACA/qD,EAAA,GAAA6pD,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EAAAZ,EAAAgB,EACAhrD,GAYA27C,EAAAsP,eAAA,SAAAC,EAAAC,GAEA,IAAAtB,EAAAqB,EAAA,GACApB,EAAAoB,EAAA,GACAnB,EAAAmB,EAAA,GACAlB,EAAAkB,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,IACAS,EAAAT,EAAA,IACAU,EAAAV,EAAA,IACAW,EAAAX,EAAA,IACAY,EAAAZ,EAAA,IACAa,EAAAb,EAAA,IAEAjB,EAAAkB,EAAA,GACAjB,EAAAiB,EAAA,GACAhB,EAAAgB,EAAA,GACAf,EAAAe,EAAA,GACAd,EAAAc,EAAA,GACAb,EAAAa,EAAA,GACAZ,EAAAY,EAAA,GACAX,EAAAW,EAAA,GACAV,EAAAU,EAAA,GACAT,EAAAS,EAAA,GACAR,EAAAQ,EAAA,IACAP,EAAAO,EAAA,IACAN,EAAAM,EAAA,IACAL,EAAAK,EAAA,IACAJ,EAAAI,EAAA,IACAH,EAAAG,EAAA,IAEAnrD,KAiBA,OAhBAA,EAAA,GAAA6pD,EAAAI,EAAAH,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EACA7qD,EAAA,GAAA6pD,EAAAK,EAAAJ,EAAAQ,EAAAP,EAAAW,EAAAV,EAAAc,EACA9qD,EAAA,GAAA6pD,EAAAM,EAAAL,EAAAS,EAAAR,EAAAY,EAAAX,EAAAe,EACA/qD,EAAA,GAAA6pD,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EAAAZ,EAAAgB,EACAhrD,EAAA,GAAAorD,EAAAnB,EAAAoB,EAAAhB,EAAAiB,EAAAb,EAAAc,EAAAV,EACA7qD,EAAA,GAAAorD,EAAAlB,EAAAmB,EAAAf,EAAAgB,EAAAZ,EAAAa,EAAAT,EACA9qD,EAAA,GAAAorD,EAAAjB,EAAAkB,EAAAd,EAAAe,EAAAX,EAAAY,EAAAR,EACA/qD,EAAA,GAAAorD,EAAAhB,EAAAiB,EAAAb,EAAAc,EAAAV,EAAAW,EAAAP,EACAhrD,EAAA,GAAAwrD,EAAAvB,EAAAwB,EAAApB,EAAAqB,EAAAjB,EAAAkB,EAAAd,EACA7qD,EAAA,GAAAwrD,EAAAtB,EAAAuB,EAAAnB,EAAAoB,EAAAhB,EAAAiB,EAAAb,EACA9qD,EAAA,IAAAwrD,EAAArB,EAAAsB,EAAAlB,EAAAmB,EAAAf,EAAAgB,EAAAZ,EACA/qD,EAAA,IAAAwrD,EAAApB,EAAAqB,EAAAjB,EAAAkB,EAAAd,EAAAe,EAAAX,EACAhrD,EAAA,IAAA4rD,EAAA3B,EAAA4B,EAAAxB,EAAAyB,EAAArB,EAAAsB,EAAAlB,EACA7qD,EAAA,IAAA4rD,EAAA1B,EAAA2B,EAAAvB,EAAAwB,EAAApB,EAAAqB,EAAAjB,EACA9qD,EAAA,IAAA4rD,EAAAzB,EAAA0B,EAAAtB,EAAAuB,EAAAnB,EAAAoB,EAAAhB,EACA/qD,EAAA,IAAA4rD,EAAAxB,EAAAyB,EAAArB,EAAAsB,EAAAlB,EAAAmB,EAAAf,EACAhrD,GAWA27C,EAAAqQ,kBAAA,SAAAvC,GAEA,IAAAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACA2B,EAAA3B,EAAA,GACA4B,EAAA5B,EAAA,GACA6B,EAAA7B,EAAA,GACA8B,EAAA9B,EAAA,GACA+B,EAAA/B,EAAA,GACAgC,EAAAhC,EAAA,GACAiC,EAAAjC,EAAA,IACAkC,EAAAlC,EAAA,IACAmC,EAAAnC,EAAA,IACAoC,EAAApC,EAAA,IACAqC,EAAArC,EAAA,IACAsC,EAAAtC,EAAA,IAEAQ,EAAAJ,EAAAwB,EAAAvB,EAAAsB,EACAlB,EAAAL,EAAAyB,EAAAvB,EAAAqB,EACAjB,EAAAN,EAAA0B,EAAAvB,EAAAoB,EACAhB,EAAAN,EAAAwB,EAAAvB,EAAAsB,EACAY,EAAAnC,EAAAyB,EAAAvB,EAAAqB,EACAa,EAAAnC,EAAAwB,EAAAvB,EAAAsB,EACAa,EAAAX,EAAAK,EAAAJ,EAAAG,EACAQ,EAAAZ,EAAAM,EAAAJ,EAAAE,EACAS,EAAAb,EAAAO,EAAAJ,EAAAC,EACAU,EAAAb,EAAAK,EAAAJ,EAAAG,EACAxB,EAAAoB,EAAAM,EAAAJ,EAAAE,EACAvB,EAAAoB,EAAAK,EAAAJ,EAAAG,EAEA3F,EAAA8D,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAmC,EAAAlC,EAAAiC,EAAAJ,EAAAG,EAAAF,EAAAC,EACA,OAAAhG,GAWAxK,EAAA4Q,aAAA,SAAA9C,GAEA,IAAAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACA2B,EAAA3B,EAAA,GACA4B,EAAA5B,EAAA,GACA6B,EAAA7B,EAAA,GACA8B,EAAA9B,EAAA,GACA+B,EAAA/B,EAAA,GACAgC,EAAAhC,EAAA,GACAiC,EAAAjC,EAAA,IACAkC,EAAAlC,EAAA,IACAmC,EAAAnC,EAAA,IACAoC,EAAApC,EAAA,IACAqC,EAAArC,EAAA,IACAsC,EAAAtC,EAAA,IAEAQ,EAAAJ,EAAAwB,EAAAvB,EAAAsB,EACAlB,EAAAL,EAAAyB,EAAAvB,EAAAqB,EACAjB,EAAAN,EAAA0B,EAAAvB,EAAAoB,EACAhB,EAAAN,EAAAwB,EAAAvB,EAAAsB,EACAY,EAAAnC,EAAAyB,EAAAvB,EAAAqB,EACAa,EAAAnC,EAAAwB,EAAAvB,EAAAsB,EACAa,EAAAX,EAAAK,EAAAJ,EAAAG,EACAQ,EAAAZ,EAAAM,EAAAJ,EAAAE,EACAS,EAAAb,EAAAO,EAAAJ,EAAAC,EACAU,EAAAb,EAAAK,EAAAJ,EAAAG,EACAxB,EAAAoB,EAAAM,EAAAJ,EAAAE,EACAvB,EAAAoB,EAAAK,EAAAJ,EAAAG,EAEA3F,EAAA8D,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAmC,EAAAlC,EAAAiC,EAAAJ,EAAAG,EAAAF,EAAAC,EACA,GAAAxQ,EAAAuE,OAAAiG,GACA,OAAA,KAGA,IAAAnmD,KAmBA,OAjBAA,EAAA,IAAAqrD,EAAAf,EAAAgB,EAAAjB,EAAAkB,EAAAe,GAAAnG,EACAnmD,EAAA,IAAA+pD,EAAAM,EAAAP,EAAAQ,EAAAN,EAAAsC,GAAAnG,EACAnmD,EAAA,IAAA6rD,EAAAK,EAAAJ,EAAAG,EAAAF,EAAA3B,GAAAjE,EACAnmD,EAAA,IAAA0rD,EAAAO,EAAAR,EAAAS,EAAAP,EAAAvB,GAAAjE,EACAnmD,EAAA,IAAAsrD,EAAAe,EAAAjB,EAAAd,EAAAiB,EAAAa,GAAAjG,EACAnmD,EAAA,IAAA6pD,EAAAS,EAAAP,EAAAsC,EAAArC,EAAAoC,GAAAjG,EACAnmD,EAAA,IAAA8rD,EAAA3B,EAAAyB,EAAAM,EAAAH,EAAA7B,GAAA/D,EACAnmD,EAAA,IAAAwrD,EAAAU,EAAAR,EAAAvB,EAAAwB,EAAAzB,GAAA/D,EACAnmD,EAAA,IAAAorD,EAAAf,EAAAgB,EAAAgB,EAAAd,EAAAY,GAAAhG,EACAnmD,EAAA,IAAA8pD,EAAAuC,EAAAxC,EAAAQ,EAAAL,EAAAmC,GAAAhG,EACAnmD,EAAA,KAAA4rD,EAAAK,EAAAJ,EAAA1B,EAAA4B,EAAA9B,GAAA9D,EACAnmD,EAAA,KAAAyrD,EAAAtB,EAAAqB,EAAAS,EAAAN,EAAA1B,GAAA9D,EACAnmD,EAAA,KAAAqrD,EAAAe,EAAAhB,EAAAkB,EAAAhB,EAAAa,GAAAhG,EACAnmD,EAAA,KAAA6pD,EAAAyC,EAAAxC,EAAAsC,EAAArC,EAAAoC,GAAAhG,EACAnmD,EAAA,KAAA6rD,EAAA3B,EAAA0B,EAAAxB,EAAA0B,EAAA7B,GAAA9D,EACAnmD,EAAA,KAAAwrD,EAAApB,EAAAqB,EAAAvB,EAAAwB,EAAAzB,GAAA9D,EAEAnmD,GAaA27C,EAAA6Q,kBAAA,SAAAzoB,EAAAC,EAAAqf,GAEA,IAAArjD,KAiBA,OAhBAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA+jC,EACA/jC,EAAA,IAAAgkC,EACAhkC,EAAA,IAAAqjD,EACArjD,EAAA,IAAA,EACAA,GAaA27C,EAAA8Q,eAAA,SAAA9I,EAAAnB,EAAAC,GAEA,IAAApY,EAAAsZ,EAAAjC,QAAAC,YAEAiC,EAAAvZ,EAAAtG,EACAhsB,EAAAsyB,EAAArG,EACA3uB,EAAAg1B,EAAAgZ,EAEAqJ,EAAA9I,EAAAA,EACAkE,EAAA/vC,EAAAA,EACAkoB,EAAA5qB,EAAAA,EAEAutC,EAAA13C,KAAA23C,IAAAL,GACAE,EAAAx3C,KAAAy3C,IAAAH,GAEAxiD,KACA,QAAArB,IAAA8jD,GAAA,OAAAA,EACAziD,EAAA,GAAA0sD,GAAA5E,EAAA7nB,GAAAyiB,EACA1iD,EAAA,GAAA4jD,EAAA7rC,GAAA,EAAA2qC,GAAArtC,EAAAutC,EACA5iD,EAAA,GAAA4jD,EAAAvuC,GAAA,EAAAqtC,GAAA3qC,EAAA6qC,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA4jD,EAAA7rC,GAAA,EAAA2qC,GAAArtC,EAAAutC,EACA5iD,EAAA,GAAA8nD,GAAA4E,EAAAzsB,GAAAyiB,EACA1iD,EAAA,GAAA+X,EAAA1C,GAAA,EAAAqtC,GAAAkB,EAAAhB,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA4jD,EAAAvuC,GAAA,EAAAqtC,GAAA3qC,EAAA6qC,EACA5iD,EAAA,GAAA+X,EAAA1C,GAAA,EAAAqtC,GAAAkB,EAAAhB,EACA5iD,EAAA,IAAAigC,GAAAysB,EAAA5E,GAAApF,EACA1iD,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,MACA,CACA,IAAA+B,EAAA0gD,EAAA1e,EACA/hC,EAAAygD,EAAAze,EACAptB,EAAA6rC,EAAAY,EAEArjD,EAAA,GAAA0sD,GAAA5E,EAAA7nB,GAAAyiB,EACA1iD,EAAA,GAAA4jD,EAAA7rC,GAAA,EAAA2qC,GAAArtC,EAAAutC,EACA5iD,EAAA,GAAA4jD,EAAAvuC,GAAA,EAAAqtC,GAAA3qC,EAAA6qC,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA4jD,EAAA7rC,GAAA,EAAA2qC,GAAArtC,EAAAutC,EACA5iD,EAAA,GAAA8nD,GAAA4E,EAAAzsB,GAAAyiB,EACA1iD,EAAA,GAAA+X,EAAA1C,GAAA,EAAAqtC,GAAAkB,EAAAhB,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA4jD,EAAAvuC,GAAA,EAAAqtC,GAAA3qC,EAAA6qC,EACA5iD,EAAA,GAAA+X,EAAA1C,GAAA,EAAAqtC,GAAAkB,EAAAhB,EACA5iD,EAAA,IAAAigC,GAAAysB,EAAA5E,GAAApF,EACA1iD,EAAA,IAAA,EACAA,EAAA,KAAA+B,GAAA+lD,EAAA7nB,GAAA2jB,GAAA5hD,EAAA+V,EAAAnB,EAAAvB,KAAA,EAAAqtC,IAAA1gD,EAAAqT,EAAAuB,EAAAmB,GAAA6qC,EACA5iD,EAAA,KAAAgC,GAAA0qD,EAAAzsB,GAAAloB,GAAAhW,EAAA6hD,EAAAhtC,EAAAvB,KAAA,EAAAqtC,IAAA9rC,EAAAgtC,EAAA7hD,EAAAsT,GAAAutC,EACA5iD,EAAA,KAAA4W,GAAA81C,EAAA5E,GAAAzyC,GAAAtT,EAAA6hD,EAAA5hD,EAAA+V,KAAA,EAAA2qC,IAAA3gD,EAAAgW,EAAA/V,EAAA4hD,GAAAhB,EACA5iD,EAAA,IAAA,EAGA,OAAAA,GAWA27C,EAAAgR,yBAAA,SAAAC,GAEA,IAAA7oB,EAAA6oB,EAAA,GACA5oB,EAAA4oB,EAAA,GACAvJ,EAAAuJ,EAAA,GACAv3C,EAAAu3C,EAAA,GAEAC,EAAA9oB,EAAAA,EACA+oB,EAAA9oB,EAAAA,EACA+oB,EAAA1J,EAAAA,EAEA2J,EAAAjpB,EAAA8oB,EACAI,EAAAlpB,EAAA+oB,EACAI,EAAAnpB,EAAAgpB,EACAI,EAAAnpB,EAAA8oB,EACAM,EAAAppB,EAAA+oB,EACAM,EAAAhK,EAAA0J,EACAO,EAAAj4C,EAAAw3C,EACAU,EAAAl4C,EAAAy3C,EACAU,EAAAn4C,EAAA03C,EAEA/sD,KAiBA,OAhBAA,EAAA,GAAA,GAAAmtD,EAAAE,GACArtD,EAAA,GAAAitD,EAAAO,EACAxtD,EAAA,GAAAktD,EAAAK,EACAvtD,EAAA,GAAA,EACAA,EAAA,GAAAitD,EAAAO,EACAxtD,EAAA,GAAA,GAAAgtD,EAAAK,GACArtD,EAAA,GAAAotD,EAAAE,EACAttD,EAAA,GAAA,EACAA,EAAA,GAAAktD,EAAAK,EACAvtD,EAAA,GAAAotD,EAAAE,EACAttD,EAAA,IAAA,GAAAgtD,EAAAG,GACAntD,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,GAWA27C,EAAA8R,gBAAA,SAAAjL,GAEA,IAAAI,EAAA13C,KAAA23C,IAAAL,GACAE,EAAAx3C,KAAAy3C,IAAAH,GAEAxiD,KAiBA,OAhBAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA0iD,EACA1iD,EAAA,GAAA4iD,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA4iD,EACA5iD,EAAA,IAAA0iD,EACA1iD,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,GAWA27C,EAAA+R,gBAAA,SAAAlL,GAEA,IAAAI,EAAA13C,KAAA23C,IAAAL,GACAE,EAAAx3C,KAAAy3C,IAAAH,GAEAxiD,KAiBA,OAhBAA,EAAA,GAAA0iD,EACA1iD,EAAA,GAAA,EACAA,EAAA,IAAA4iD,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA4iD,EACA5iD,EAAA,GAAA,EACAA,EAAA,IAAA0iD,EACA1iD,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,GAWA27C,EAAAgS,gBAAA,SAAAnL,GAEA,IAAAI,EAAA13C,KAAA23C,IAAAL,GACAE,EAAAx3C,KAAAy3C,IAAAH,GAEAxiD,KAiBA,OAhBAA,EAAA,GAAA0iD,EACA1iD,EAAA,GAAA4iD,EACA5iD,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA4iD,EACA5iD,EAAA,GAAA0iD,EACA1iD,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,GAYA27C,EAAAiS,oBAAA,SAAAnE,EAAApI,GAEA,IAAAuI,KACAA,EAAA,GAAAvI,EAAAtd,EACA6lB,EAAA,GAAAvI,EAAArd,EACA4lB,EAAA,GAAAvI,EAAAgC,EACAuG,EAAA,GAAA,EAEA,IAAAiE,EAAAlS,EAAAgO,qBAAAF,EAAAG,GACA5pD,EAAA,IAAA27C,EAAAyH,MAAAyK,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,OAAA7tD,GAYA27C,EAAAmS,cAAA,SAAArE,EAAApI,GAEA,IAAAuI,KACAA,EAAA,GAAAvI,EAAAtd,EACA6lB,EAAA,GAAAvI,EAAArd,EACA4lB,EAAA,GAAAvI,EAAAgC,EACAuG,EAAA,GAAA,EAEA,IAAAiE,EAAAlS,EAAAgO,qBAAAF,EAAAG,GACA5pD,EAAA,IAAA27C,EAAAyH,MAAAyK,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,OAAA7tD,GAGA27C,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GA0EA,OAhEAA,EAAAoS,YAAA,SAAAtL,EAAAuL,EAAAC,EAAAC,GAEArsD,KAAA4gD,MAAAA,EACA5gD,KAAAmsD,GAAAA,EACAnsD,KAAAosD,GAAAA,EACApsD,KAAAqsD,GAAAA,GAYAvS,EAAAoS,YAAAlwD,UAAAujD,IAAA,SAAAqB,EAAAuL,EAAAC,EAAAC,GAEArsD,KAAA4gD,MAAAA,EACA5gD,KAAAmsD,GAAAA,EACAnsD,KAAAosD,GAAAA,EACApsD,KAAAqsD,GAAAA,GASAvS,EAAAoS,YAAAlwD,UAAAswD,mBAAA,WAKA,OAHAtsD,KAAAmsD,GAAArS,EAAA0I,SAAAxiD,KAAAmsD,GAAAnsD,KAAA4gD,OACA5gD,KAAAosD,GAAAtS,EAAA0I,SAAAxiD,KAAAosD,GAAApsD,KAAA4gD,OACA5gD,KAAAqsD,GAAAvS,EAAA0I,SAAAxiD,KAAAqsD,GAAArsD,KAAA4gD,OACA5gD,MASA85C,EAAAoS,YAAAlwD,UAAAuwD,iBAAA,WAKA,OAHAvsD,KAAAmsD,GAAArS,EAAAyI,SAAAviD,KAAAmsD,GAAAnsD,KAAA4gD,OACA5gD,KAAAosD,GAAAtS,EAAAyI,SAAAviD,KAAAosD,GAAApsD,KAAA4gD,OACA5gD,KAAAqsD,GAAAvS,EAAAyI,SAAAviD,KAAAqsD,GAAArsD,KAAA4gD,OACA5gD,MASA85C,EAAAoS,YAAAlwD,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAoS,YAAAlsD,KAAA4gD,MAAAf,QAAA7/C,KAAAmsD,GAAAtM,QAAA7/C,KAAAosD,GAAAvM,QAAA7/C,KAAAqsD,GAAAxM,UAGA/F,IAGA5gD,OAAA,qCAAA,eAAA,SAAA4gD,GAyaA,OAhaAA,EAAA0S,uBACAC,oBAAA,EACAC,sBAAA,EACAC,qBAAA,GAYA7S,EAAA8S,wBACAC,qBAAA,EACAC,2BAAA,EACAC,yBAAA,EACAC,yBAAA,GAWAlT,EAAAmT,qBACAR,oBAAA,EACAC,sBAAA,EACAC,qBAAA,GAUA7S,EAAAoT,SAAA,SAAAC,EAAAxwC,GAEA3c,KAAAmtD,IAAAA,EACAntD,KAAA2c,IAAAA,GAUAm9B,EAAAoT,SAAAlxD,UAAAujD,IAAA,SAAA4N,EAAAxwC,GAEA3c,KAAAmtD,IAAAA,EACAntD,KAAA2c,IAAAA,GASAm9B,EAAAoT,SAAAlxD,UAAAoxD,UAAA,WAEA,OAAAptD,KAAAmtD,IAAA1N,WAAAz/C,KAAA2c,MAWAm9B,EAAAoT,SAAAlxD,UAAAqxD,cAAA,SAAA7N,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAmrB,EAAAttD,KAAAmtD,IAAAjrB,EACAqrB,EAAAvtD,KAAAmtD,IAAAhrB,EACA6oB,EAAAhrD,KAAA2c,IAAAulB,EACA+oB,EAAAjrD,KAAA2c,IAAAwlB,EAEA5oC,EAAAyG,KAAAotD,YACA,GAAAtT,EAAAuE,OAAA9kD,GACA,OAAAimD,EAAAd,QAAA1+C,KAAAmtD,KACArT,EAAA0S,sBAAAE,sBAGA5S,EAAA0S,sBAAAG,qBAGA,IAAA5K,IAAA7f,EAAAorB,IAAAtC,EAAAsC,IAAAnrB,EAAAorB,IAAAtC,EAAAsC,KAAAh0D,EAAAA,GACA,GAAAugD,EAAA0E,QAAAuD,EAAA,IAAAjI,EAAA2E,UAAAsD,EAAA,GACA,OAAAjI,EAAA0S,sBAAAG,qBAGA,IAAAa,EAAAF,EAAAvL,GAAAiJ,EAAAsC,GACAG,EAAAF,EAAAxL,GAAAkJ,EAAAsC,GACA,OAAAzT,EAAA4E,QAAA8O,EAAAtrB,IAAA4X,EAAA4E,QAAA+O,EAAAtrB,GAIA2X,EAAA4E,QAAAqD,EAAA,IAAAjI,EAAA4E,QAAAqD,EAAA,GACAjI,EAAA0S,sBAAAE,sBAGA5S,EAAA0S,sBAAAC,oBAPA3S,EAAA0S,sBAAAG,sBAmBA7S,EAAAoT,SAAAlxD,UAAA0xD,eAAA,SAAAC,EAAAC,GAEA,SAAAC,EAAAV,EAAAxwC,EAAA6iC,GAEA,QAAAA,EAAAd,QAAAyO,IAAA3N,EAAAd,QAAA/hC,KACAm9B,EAAA+E,eAAAW,EAAAtd,EAAA74B,KAAAiiB,IAAA6hC,EAAAjrB,EAAAvlB,EAAAulB,MACA4X,EAAA+E,eAAAW,EAAArd,EAAA94B,KAAAiiB,IAAA6hC,EAAAhrB,EAAAxlB,EAAAwlB,MACA2X,EAAAgF,iBAAAU,EAAAtd,EAAA74B,KAAAykD,IAAAX,EAAAjrB,EAAAvlB,EAAAulB,MACA4X,EAAAgF,iBAAAU,EAAArd,EAAA94B,KAAAykD,IAAAX,EAAAhrB,EAAAxlB,EAAAwlB,KAOA,IAAA4rB,OAAAjxD,IAAA8wD,GAAA,OAAAA,EAEAI,EAAAhuD,KAAAmtD,IACAc,EAAAjuD,KAAA2c,IACAuxC,EAAAP,EAAAR,IACAgB,EAAAR,EAAAhxC,IAEAyxC,EAAAJ,EAAAtP,QAAAwP,IAAAF,EAAAtP,QAAAyP,GACAE,EAAAJ,EAAAvP,QAAAwP,IAAAD,EAAAvP,QAAAyP,GACA,GAAAC,GAAAC,EACA,OAAAvU,EAAA8S,uBAAAE,2BAGA,IAAAQ,EAAAU,EAAA9rB,EACAqrB,EAAAS,EAAA7rB,EACA6oB,EAAAiD,EAAA/rB,EACA+oB,EAAAgD,EAAA9rB,EACAmsB,EAAAJ,EAAAhsB,EACAqsB,EAAAL,EAAA/rB,EACAqsB,EAAAL,EAAAjsB,EACAusB,EAAAN,EAAAhsB,EAEAusB,GAAAF,EAAAF,IAAAf,EAAAgB,IAAAE,EAAAF,IAAAjB,EAAAgB,GACAK,GAAA3D,EAAAsC,IAAAC,EAAAgB,IAAAtD,EAAAsC,IAAAD,EAAAgB,GACAM,GAAAH,EAAAF,IAAAvD,EAAAsC,IAAAkB,EAAAF,IAAArD,EAAAsC,GACA,GAAAzT,EAAAuE,OAAAuQ,GAAA,CACA,GAAA9U,EAAAuE,OAAAqQ,IAAA5U,EAAAuE,OAAAsQ,GAAA,CACA,GAAAd,EAAAG,EAAAC,EAAAC,IACAL,EAAAG,EAAAC,EAAAE,IACAN,EAAAK,EAAAC,EAAAH,IACAH,EAAAK,EAAAC,EAAAF,GAEA,OAAAnU,EAAA8S,uBAAAE,2BACA,GAAAsB,EAKA,OAJAL,IACAH,EAAA1rB,EAAA8rB,EAAA9rB,EACA0rB,EAAAzrB,EAAA6rB,EAAA7rB,GAEA2X,EAAA8S,uBAAAG,yBACA,GAAAsB,EAKA,OAJAN,IACAH,EAAA1rB,EAAA+rB,EAAA/rB,EACA0rB,EAAAzrB,EAAA8rB,EAAA9rB,GAEA2X,EAAA8S,uBAAAG,yBAGA,OAAAjT,EAAA8S,uBAAAC,qBAGA,IAAAgC,EAAAH,EAAAE,EACAE,EAAAH,EAAAC,EACA,OAAA9U,EAAA0E,QAAAqQ,EAAA,IAAA/U,EAAA2E,UAAAoQ,EAAA,IACA/U,EAAA0E,QAAAsQ,EAAA,IAAAhV,EAAA2E,UAAAqQ,EAAA,GAEAhV,EAAA8S,uBAAAC,qBAGAuB,GACAL,IACAH,EAAA1rB,EAAA8rB,EAAA9rB,EACA0rB,EAAAzrB,EAAA6rB,EAAA7rB,GAEA2X,EAAA8S,uBAAAG,0BACAsB,GACAN,IACAH,EAAA1rB,EAAA+rB,EAAA/rB,EACA0rB,EAAAzrB,EAAA8rB,EAAA9rB,GAEA2X,EAAA8S,uBAAAG,2BAGAgB,IACAH,EAAA1rB,EAAAorB,EAAAuB,GAAA7D,EAAAsC,GACAM,EAAAzrB,EAAAorB,EAAAsB,GAAA5D,EAAAsC,IAEAzT,EAAA8S,uBAAAI,2BAWAlT,EAAAoT,SAAAlxD,UAAA+yD,aAAA,SAAAvP,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EAEAgrB,EAAAntD,KAAAmtD,IACAxwC,EAAA3c,KAAA2c,IACA2wC,EAAAH,EAAAjrB,EACAqrB,EAAAJ,EAAAhrB,EACA6oB,EAAAruC,EAAAulB,EACA+oB,EAAAtuC,EAAAwlB,EAEA6sB,GAAAhE,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAsC,IAAAtC,EAAAsC,GACA,GAAAzT,EAAAuE,OAAA2Q,GACA,OAAA7B,EAAAtN,QAGA,IAAAkC,IAAAiJ,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAsC,IAAAprB,EAAAorB,IAAAyB,EACA,GAAAlV,EAAA0E,QAAAuD,EAAA,GACA,OAAAoL,EAAAtN,QACA,GAAA/F,EAAA2E,UAAAsD,EAAA,GACA,OAAAplC,EAAAkjC,QAGA,IAAAxZ,EAAAyT,EAAAwH,WAAA3kC,EAAAwwC,GAAAhN,eAAA4B,GACA5jD,EAAA27C,EAAAuH,WAAA8L,EAAA9mB,GACA,OAAAloC,GASA27C,EAAAoT,SAAAlxD,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAoT,SAAAltD,KAAAmtD,IAAAtN,QAAA7/C,KAAA2c,IAAAkjC,UAUA/F,EAAAmV,OAAA,SAAA9B,EAAAxwC,GAEA3c,KAAAmtD,IAAAA,EACAntD,KAAA2c,IAAAA,GAUAm9B,EAAAmV,OAAAjzD,UAAAujD,IAAA,SAAA4N,EAAAxwC,GAEA3c,KAAAmtD,IAAAA,EACAntD,KAAA2c,IAAAA,GASAm9B,EAAAmV,OAAAjzD,UAAAoxD,UAAA,WAEA,OAAAptD,KAAAmtD,IAAA1N,WAAAz/C,KAAA2c,MAWAm9B,EAAAmV,OAAAjzD,UAAAqxD,cAAA,SAAA7N,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAqf,EAAAhC,EAAAgC,EAEAthD,EAAAF,KAAAmtD,IACAhtD,EAAA25C,EAAA0I,SAAAxiD,KAAA2c,IAAA3c,KAAAmtD,KAEAG,EAAAptD,EAAAgiC,EACAqrB,EAAArtD,EAAAiiC,EACA+sB,EAAAhvD,EAAAshD,EACAwJ,EAAA9qD,EAAAgiC,EAAA/hC,EAAA+hC,EACA+oB,EAAA/qD,EAAAiiC,EAAAhiC,EAAAgiC,EACA+oB,EAAAhrD,EAAAshD,EAAArhD,EAAAqhD,EAEAwN,GAAAhE,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAgE,IAAAhE,EAAAgE,GACA,GAAApV,EAAAuE,OAAA2Q,GACA,OAAA9uD,EAAAw+C,QAAAc,GACA1F,EAAAmT,oBAAAP,sBAEA5S,EAAAmT,oBAAAN,qBAGA,IAAA5K,IAAAiJ,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAgE,IAAA1N,EAAA0N,IAAAF,EACAG,EAAAhvD,EAAA0/C,QAAAM,eAAA4B,GACAhtC,EAAA+kC,EAAAyI,SAAAriD,EAAAivD,GACA1O,EAAAjB,EAAAC,WAAA1qC,GACA,OAAA+kC,EAAAuE,OAAAoC,GACA3G,EAAA0E,QAAAuD,EAAA,IAAAjI,EAAA2E,UAAAsD,EAAA,GACAjI,EAAAmT,oBAAAN,qBACA7S,EAAA4E,QAAAqD,EAAA,IAAAjI,EAAA4E,QAAAqD,EAAA,GACAjI,EAAAmT,oBAAAP,sBAEA5S,EAAAmT,oBAAAR,oBAGA3S,EAAAmT,oBAAAN,sBASA7S,EAAAmV,OAAAjzD,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAmV,OAAAjvD,KAAAmtD,IAAAtN,QAAA7/C,KAAA2c,IAAAkjC,UAYA/F,EAAAsV,wBAAA,SAAAzB,EAAA0B,GAEA,IAMA51D,EAAA61D,EANA9O,EAAA1G,EAAAwH,WAAAqM,EAAAhxC,IAAAgxC,EAAAR,KACA5zD,EAAAo0D,EAAAR,IAAA1N,WAAAkO,EAAAhxC,KACA8uB,EAAAlyC,EAAA81D,EACA5O,EAAA,EAEAtiD,KAEA,IAAA1E,EAAA,EAAAA,GAAA41D,EAAA51D,IACA61D,EAAA3B,EAAAR,IAAAtN,QAAAU,OAAAC,EAAAC,GACAtiD,EAAAa,KAAAswD,GACA7O,GAAAhV,EAEA,OAAAttC,GAYA27C,EAAAyV,sBAAA,SAAA5B,EAAA0B,GAEA,IAMA51D,EAAA61D,EANA9O,EAAA1G,EAAA0I,SAAAmL,EAAAhxC,IAAAgxC,EAAAR,KACA5zD,EAAAo0D,EAAAR,IAAA1N,WAAAkO,EAAAhxC,KACA8uB,EAAAlyC,EAAA81D,EACA5O,EAAA,EAEAtiD,KAEA,IAAA1E,EAAA,EAAAA,GAAA41D,EAAA51D,IACA61D,EAAA3B,EAAAR,IAAAtN,QAAAU,OAAAC,EAAAC,GACAtiD,EAAAa,KAAAswD,GACA7O,GAAAhV,EAEA,OAAAttC,GAGA27C,IAGA5gD,OAAA,mCAAA,eAAA,SAAA4gD,GAsXA,OA7WAA,EAAA0V,qBACAC,YAAA,EACAC,gBAAA,EACAC,iBAAA,GAWA7V,EAAA8V,oBACAC,mBAAA,EACAC,wBAAA,EACAC,0BAAA,GAUAjW,EAAAkW,mBACAP,YAAA,EACAQ,mBAAA,GAWAnW,EAAAoW,kBACAL,mBAAA,EACAC,wBAAA,EACAC,0BAAA,GAUAjW,EAAAqW,OAAA,SAAAxnD,EAAA63C,GAEAxgD,KAAA2I,MAAAA,EACA3I,KAAAwgD,UAAAA,GAUA1G,EAAAqW,OAAAn0D,UAAAujD,IAAA,SAAA52C,EAAA63C,GAEAxgD,KAAA2I,MAAAA,EACA3I,KAAAwgD,UAAAA,GAWA1G,EAAAqW,OAAAn0D,UAAAqxD,cAAA,SAAA7N,GAEA,IAAA19B,EAAA9hB,KAAAglD,oBAAAxF,GACA,OAAA1F,EAAAwE,WAAAx8B,GACAg4B,EAAA0V,oBAAAE,gBACA5V,EAAAyE,WAAAz8B,GACAg4B,EAAA0V,oBAAAG,iBAGA7V,EAAA0V,oBAAAC,aAWA3V,EAAAqW,OAAAn0D,UAAAgpD,oBAAA,SAAAxF,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAjiC,EAAAF,KAAA2I,MACAxI,EAAAH,KAAAwgD,UACA,OAAArgD,EAAA+hC,GAAAC,EAAAjiC,EAAAiiC,GAAAhiC,EAAAgiC,GAAAD,EAAAhiC,EAAAgiC,IAYA4X,EAAAqW,OAAAn0D,UAAAo0D,aAAA,SAAAj7C,EAAAy4C,GAEA,IAAAN,EAAAttD,KAAA2I,MAAAu5B,EACAqrB,EAAAvtD,KAAA2I,MAAAw5B,EACA6oB,EAAAhrD,KAAA2I,MAAAu5B,EAAAliC,KAAAwgD,UAAAte,EACA+oB,EAAAjrD,KAAA2I,MAAAw5B,EAAAniC,KAAAwgD,UAAAre,EACAmsB,EAAAn5C,EAAAxM,MAAAu5B,EACAqsB,EAAAp5C,EAAAxM,MAAAw5B,EACAqsB,EAAAr5C,EAAAxM,MAAAu5B,EAAA/sB,EAAAqrC,UAAAte,EACAusB,EAAAt5C,EAAAxM,MAAAw5B,EAAAhtB,EAAAqrC,UAAAre,EAEAusB,GAAAF,EAAAF,IAAAf,EAAAgB,IAAAE,EAAAF,IAAAjB,EAAAgB,GACAK,GAAA3D,EAAAsC,IAAAC,EAAAgB,IAAAtD,EAAAsC,IAAAD,EAAAgB,GACAM,GAAAH,EAAAF,IAAAvD,EAAAsC,IAAAkB,EAAAF,IAAArD,EAAAsC,GACA,GAAAzT,EAAAuE,OAAAuQ,GACA,OAAA9U,EAAAuE,OAAAqQ,IAAA5U,EAAAuE,OAAAsQ,GACA7U,EAAA8V,mBAAAG,0BAEAjW,EAAA8V,mBAAAC,mBAGA,IAAApP,EAAAiO,EAAAE,EAKA,OAJA,OAAAhB,IACAA,EAAA1rB,EAAAorB,EAAA7M,GAAAuK,EAAAsC,GACAM,EAAAzrB,EAAAorB,EAAA9M,GAAAwK,EAAAsC,IAEAzT,EAAA8V,mBAAAE,yBASAhW,EAAAqW,OAAAn0D,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAqW,OAAAnwD,KAAA2I,MAAAk3C,QAAA7/C,KAAAwgD,UAAAX,UAUA/F,EAAAuW,KAAA,SAAA1nD,EAAA63C,GAEAxgD,KAAA2I,MAAAA,EACA3I,KAAAwgD,UAAAA,GAUA1G,EAAAuW,KAAAr0D,UAAAujD,IAAA,SAAA52C,EAAA63C,GAEAxgD,KAAA2I,MAAAA,EACA3I,KAAAwgD,UAAAA,GAYA1G,EAAAuW,KAAAr0D,UAAAqxD,cAAA,SAAA7N,EAAA8Q,GAEA,IAAApuB,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAqf,EAAAhC,EAAAgC,EAEAthD,EAAAF,KAAA2I,MACAxI,EAAAH,KAAAwgD,UAEA8M,EAAAptD,EAAAgiC,EACAqrB,EAAArtD,EAAAiiC,EACA+sB,EAAAhvD,EAAAshD,EACAwJ,EAAA9qD,EAAAgiC,EAAA/hC,EAAA+hC,EACA+oB,EAAA/qD,EAAAiiC,EAAAhiC,EAAAgiC,EACA+oB,EAAAhrD,EAAAshD,EAAArhD,EAAAqhD,EAEAwN,GAAAhE,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAgE,IAAAhE,EAAAgE,GACA,GAAApV,EAAAuE,OAAA2Q,GAKA,YAJAlyD,IAAAwzD,GACAA,EAAA/Q,IAAAr/C,EAAAgiC,EAAAhiC,EAAAiiC,EAAAjiC,EAAAshD,GAGAthD,EAAAw+C,QAAAc,GACA1F,EAAAkW,kBAAAP,YAGA3V,EAAAkW,kBAAAC,mBAGA,IAAAlO,IAAAiJ,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAgE,IAAA1N,EAAA0N,IAAAF,EACAG,EAAAhvD,EAAA0/C,QAAAM,eAAA4B,GACAhtC,EAAA+kC,EAAAyI,SAAAriD,EAAAivD,QACAryD,IAAAwzD,GACAA,EAAA/Q,IAAAxqC,EAAAmtB,EAAAntB,EAAAotB,EAAAptB,EAAAysC,GAGA,IAAAf,EAAAjB,EAAAC,WAAA1qC,GACA,OAAA+kC,EAAAuE,OAAAoC,GACA3G,EAAAkW,kBAAAP,YAGA3V,EAAAkW,kBAAAC,oBAWAnW,EAAAuW,KAAAr0D,UAAA+yD,aAAA,SAAAvP,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAqf,EAAAhC,EAAAgC,EAEAthD,EAAAF,KAAA2I,MACAxI,EAAAH,KAAAwgD,UAEA8M,EAAAptD,EAAAgiC,EACAqrB,EAAArtD,EAAAiiC,EACA+sB,EAAAhvD,EAAAshD,EACAwJ,EAAA9qD,EAAAgiC,EAAA/hC,EAAA+hC,EACA+oB,EAAA/qD,EAAAiiC,EAAAhiC,EAAAgiC,EACA+oB,EAAAhrD,EAAAshD,EAAArhD,EAAAqhD,EAEAwN,GAAAhE,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAsC,IAAAtC,EAAAsC,IAAArC,EAAAgE,IAAAhE,EAAAgE,GACA,GAAApV,EAAAuE,OAAA2Q,GACA,OAAA9uD,EAAA2/C,QAGA,IAAAkC,IAAAiJ,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAsC,IAAAprB,EAAAorB,IAAArC,EAAAgE,IAAA1N,EAAA0N,IAAAF,EACAG,EAAAhvD,EAAA0/C,QAAAM,eAAA4B,GACA,OAAAjI,EAAAyI,SAAAriD,EAAAivD,IAaArV,EAAAuW,KAAAr0D,UAAAu0D,aAAA,SAAAp7C,EAAAq7C,EAAAC,GAEA,SAAAC,EAAAx6C,EAAAywB,EAAApjC,EAAAm4B,EAAAhuB,GAEA,IAAAvP,GAAA+X,EAAAywB,GAAAzE,EAAAhsB,EAAA3S,GAAA2+B,IAAAhsB,EAAAwlB,GAAAwG,EAAAhsB,EAAAxI,GAAAw0B,IAAAhsB,EAAAywB,GAAAxE,EAAAjsB,EAAA3S,GAAA4+B,IAAAjsB,EAAAwlB,GAAAyG,EAAAjsB,EAAAxI,GAAAy0B,IAAAjsB,EAAAywB,GAAA6a,EAAAtrC,EAAA3S,GAAAi+C,IAAAtrC,EAAAwlB,GAAA8lB,EAAAtrC,EAAAxI,GAAA8zC,GACA,OAAArjD,EAGA,IAAAwyD,EAAA3wD,KAAAwgD,UAAAX,QAAAC,YACA8Q,EAAA5wD,KAAA2I,MACAslD,EAAAnU,EAAAyI,SAAAqO,EAAAD,GAEAE,EAAA17C,EAAAqrC,UAAAX,QAAAC,YACAgR,EAAA37C,EAAAxM,MACAwlD,EAAArU,EAAAyI,SAAAuO,EAAAD,GAEA36C,GAAA06C,EAAA3C,EAAA6C,EAAA3C,GACA4C,EAAAL,EAAAx6C,EAAA,EAAA,EAAA,EAAA,GACA86C,EAAAN,EAAAx6C,EAAA,EAAA,EAAA,EAAA,GACA+6C,EAAAP,EAAAx6C,EAAA,EAAA,EAAA,EAAA,GACAg7C,EAAAR,EAAAx6C,EAAA,EAAA,EAAA,EAAA,GACAi7C,EAAAT,EAAAx6C,EAAA,EAAA,EAAA,EAAA,GACA84C,EAAA+B,EAAAI,EAAAD,EAAAA,EACA,GAAApX,EAAA4E,QAAAsQ,EAAA,GACA,OAAA,EAGA,IAAAoC,EAAAH,EAAAC,EAAAF,EAAAG,EACAE,EAAAD,EAAApC,EACAsC,GAAAL,EAAAI,EAAAH,GAAAC,EAEA,QAAAr0D,IAAA0zD,EAAA,CACAG,EAAAxQ,eAAAkR,GACA,IAAAE,EAAAzX,EAAAyI,SAAAqO,EAAAD,GACAH,EAAAjR,IAAAgS,EAAArvB,EAAAqvB,EAAApvB,EAAAovB,EAAA/P,GAGA,QAAA1kD,IAAA2zD,EAAA,CACAI,EAAA1Q,eAAAmR,GACA,IAAAE,EAAA1X,EAAAyI,SAAAuO,EAAAD,GACAJ,EAAAlR,IAAAiS,EAAAtvB,EAAAsvB,EAAArvB,EAAAqvB,EAAAhQ,GAGA,OAAA,GAYA1H,EAAAuW,KAAAr0D,UAAAo0D,aAAA,SAAAj7C,EAAAy4C,GAEA,IAAA4C,EAAA,IAAA1W,EAAAyH,MAAA,EAAA,EAAA,GACAkP,EAAA,IAAA3W,EAAAyH,MAAA,EAAA,EAAA,GACA,OAAAvhD,KAAAuwD,aAAAp7C,EAAAq7C,EAAAC,GAIAD,EAAA9R,QAAA+R,SACA3zD,IAAA8wD,GACAA,EAAArO,IAAAiR,EAAAtuB,EAAAsuB,EAAAruB,EAAAquB,EAAAhP,GAEA1H,EAAAoW,iBAAAJ,yBAGAhW,EAAAoW,iBAAAL,mBAVA/V,EAAAoW,iBAAAH,2BAmBAjW,EAAAuW,KAAAr0D,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAuW,KAAArwD,KAAA2I,MAAAk3C,QAAA7/C,KAAAwgD,UAAAX,UAGA/F,IAGA5gD,OAAA,kCAAA,eAAA,SAAA4gD,GA+IA,OAvIAA,EAAA2X,MAAA,SAAA3D,EAAAxiC,GAEAtrB,KAAA8tD,IAAAA,EACA9tD,KAAAsrB,IAAAA,GAUAwuB,EAAA2X,MAAAz1D,UAAAujD,IAAA,SAAAuO,EAAAxiC,GAEAtrB,KAAA8tD,IAAAA,EACA9tD,KAAAsrB,IAAAA,GASAwuB,EAAA2X,MAAAz1D,UAAA01D,UAAA,WAEA,OAAA5X,EAAAsK,WAAApkD,KAAA8tD,IAAA9tD,KAAAsrB,MASAwuB,EAAA2X,MAAAz1D,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAA2X,MAAAzxD,KAAA8tD,IAAAjO,QAAA7/C,KAAAsrB,IAAAu0B,UAUA/F,EAAA6X,IAAA,SAAA7D,EAAAxiC,GAEAtrB,KAAA8tD,IAAAA,EACA9tD,KAAAsrB,IAAAA,GAUAwuB,EAAA6X,IAAA31D,UAAAujD,IAAA,SAAAuO,EAAAxiC,GAEAtrB,KAAA8tD,IAAAA,EACA9tD,KAAAsrB,IAAAA,GASAwuB,EAAA6X,IAAA31D,UAAA01D,UAAA,WAEA,OAAA5X,EAAAiL,SAAA/kD,KAAA8tD,IAAA9tD,KAAAsrB,MASAwuB,EAAA6X,IAAA31D,UAAA41D,QAAA,WAEA,OAAA9X,EAAA0I,SAAAxiD,KAAAsrB,IAAAtrB,KAAA8tD,MAWAhU,EAAA6X,IAAA31D,UAAA61D,cAAA,SAAArS,GAEA,QAAA1F,EAAA0E,QAAAgB,EAAAtd,EAAAliC,KAAA8tD,IAAA5rB,IAAA4X,EAAA0E,QAAAgB,EAAArd,EAAAniC,KAAA8tD,IAAA3rB,IAAA2X,EAAA0E,QAAAgB,EAAAgC,EAAAxhD,KAAA8tD,IAAAtM,OAGA1H,EAAA2E,UAAAe,EAAAtd,EAAAliC,KAAAsrB,IAAA4W,IAAA4X,EAAA2E,UAAAe,EAAArd,EAAAniC,KAAAsrB,IAAA6W,IAAA2X,EAAA2E,UAAAe,EAAAgC,EAAAxhD,KAAAsrB,IAAAk2B,KAYA1H,EAAA6X,IAAA31D,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAA6X,IAAA3xD,KAAA8tD,IAAAjO,QAAA7/C,KAAAsrB,IAAAu0B,UAYA/F,EAAAgY,SAAA,SAAAC,EAAAC,GAEA,IAAAlE,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAiF,QAAAgT,EAAAjE,IAAA5rB,EAAA8vB,EAAAlE,IAAA5rB,GAAA4X,EAAAiF,QAAAgT,EAAAjE,IAAA3rB,EAAA6vB,EAAAlE,IAAA3rB,GAAA2X,EAAAiF,QAAAgT,EAAAjE,IAAAtM,EAAAwQ,EAAAlE,IAAAtM,IACAl2B,EAAA,IAAAwuB,EAAAyH,MAAAzH,EAAAkF,QAAA+S,EAAAzmC,IAAA4W,EAAA8vB,EAAA1mC,IAAA4W,GAAA4X,EAAAkF,QAAA+S,EAAAzmC,IAAA6W,EAAA6vB,EAAA1mC,IAAA6W,GAAA2X,EAAAkF,QAAA+S,EAAAzmC,IAAAk2B,EAAAwQ,EAAA1mC,IAAAk2B,IACA,OAAA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IAGAwuB,IAGA5gD,OAAA,qCAAA,eAAA,SAAA4gD,GA4DA,OApDAA,EAAAmY,OAAA,SAAAC,EAAAxN,GAEA1kD,KAAAkyD,OAAAA,EACAlyD,KAAA0kD,OAAAA,GAUA5K,EAAAmY,OAAAj2D,UAAAujD,IAAA,SAAA2S,EAAAxN,GAEA1kD,KAAAkyD,OAAAA,EACAlyD,KAAA0kD,OAAAA,GASA5K,EAAAmY,OAAAj2D,UAAA01D,UAAA,WAEA,OAAA1xD,KAAAkyD,QASApY,EAAAmY,OAAAj2D,UAAAm2D,UAAA,WAEA,OAAAnyD,KAAA0kD,QASA5K,EAAAmY,OAAAj2D,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAmY,OAAAjyD,KAAAkyD,OAAArS,QAAA7/C,KAAA0kD,SAGA5K,IAGA5gD,OAAA,6CAAA,eAAA,SAAA4gD,GAwNA,OAnNAA,EAAAsY,eAAA,WAEApyD,KAAA4nD,OAAA9N,EAAA4N,kBASA5N,EAAAsY,eAAAp2D,UAAAq2D,UAAA,WAEA,OAAAryD,KAAA4nD,QASA9N,EAAAsY,eAAAp2D,UAAAs2D,UAAA,SAAA1K,GAEA5nD,KAAA4nD,OAAAA,GASA9N,EAAAsY,eAAAp2D,UAAAu2D,OAAA,SAAAnzD,GAEAY,KAAA4nD,OAAA9N,EAAAsP,eAAAppD,KAAA4nD,OAAAxoD,EAAAwoD,SAWA9N,EAAAsY,eAAAp2D,UAAAw2D,MAAA,SAAAhT,GAEA,OAAA1F,EAAAiS,oBAAA/rD,KAAA4nD,OAAApI,IASA1F,EAAAsY,eAAAp2D,UAAA6jD,MAAA,WAEA,IAAA1hD,EAAA,IAAA27C,EAAAsY,eAEA,OADAj0D,EAAAypD,OAAA9N,EAAA6N,YAAA3nD,KAAA4nD,QACAzpD,GASA27C,EAAA2Y,uBAAA,WAEA,IAAAC,EAAA,IAAA5Y,EAAAsY,eAEA,OADAM,EAAA9K,OAAA9N,EAAA4N,iBACAgL,GAWA5Y,EAAA6Y,0BAAA,SAAAC,GAEA,IAAAF,EAAA,IAAA5Y,EAAAsY,eAEA,OADAM,EAAA9K,OAAA9N,EAAA6Q,kBAAAiI,EAAA1wB,EAAA0wB,EAAAzwB,EAAAywB,EAAApR,GACAkR,GAYA5Y,EAAA+Y,qBAAA,SAAArS,EAAAC,GAEA,IAAAjY,EAAAgY,EAAAX,QAAAC,YACA8S,EAAApqB,EAAAqX,QAAAM,eAAAM,GACA,OAAA3G,EAAA6Y,0BAAAC,IAaA9Y,EAAAgZ,uBAAA,SAAAhR,EAAAnB,EAAAC,GAEA,IAAA8R,EAAA,IAAA5Y,EAAAsY,eAEA,OADAM,EAAA9K,OAAA9N,EAAA8Q,eAAA9I,EAAAnB,EAAAC,GACA8R,GAYA5Y,EAAAiZ,wBAAA,SAAApS,EAAAC,GAEA,IAAA8R,EAAA,IAAA5Y,EAAAsY,eAQA,YAPAt1D,IAAA8jD,GAAA,OAAAA,EACA8R,EAAA9K,OAAA9N,EAAA8R,gBAAAjL,IAEA+R,EAAAH,OAAAzY,EAAA6Y,0BAAA,IAAA7Y,EAAAoI,QAAAtB,EAAA1e,GAAA0e,EAAAze,GAAAye,EAAAY,KACAkR,EAAAH,OAAAzY,EAAAiZ,wBAAApS,IACA+R,EAAAH,OAAAzY,EAAA6Y,0BAAA,IAAA7Y,EAAAoI,OAAAtB,EAAA1e,EAAA0e,EAAAze,EAAAye,EAAAY,MAEAkR,GAYA5Y,EAAAkZ,wBAAA,SAAArS,EAAAC,GAEA,IAAA8R,EAAA,IAAA5Y,EAAAsY,eAQA,YAPAt1D,IAAA8jD,GAAA,OAAAA,EACA8R,EAAA9K,OAAA9N,EAAA+R,gBAAAlL,IAEA+R,EAAAH,OAAAzY,EAAA6Y,0BAAA,IAAA7Y,EAAAoI,QAAAtB,EAAA1e,GAAA0e,EAAAze,GAAAye,EAAAY,KACAkR,EAAAH,OAAAzY,EAAAkZ,wBAAArS,IACA+R,EAAAH,OAAAzY,EAAA6Y,0BAAA,IAAA7Y,EAAAoI,OAAAtB,EAAA1e,EAAA0e,EAAAze,EAAAye,EAAAY,MAEAkR,GAYA5Y,EAAAmZ,wBAAA,SAAAtS,EAAAC,GAEA,IAAA8R,EAAA,IAAA5Y,EAAAsY,eAQA,YAPAt1D,IAAA8jD,GAAA,OAAAA,EACA8R,EAAA9K,OAAA9N,EAAAgS,gBAAAnL,IAEA+R,EAAAH,OAAAzY,EAAA6Y,0BAAA,IAAA7Y,EAAAoI,QAAAtB,EAAA1e,GAAA0e,EAAAze,GAAAye,EAAAY,KACAkR,EAAAH,OAAAzY,EAAAmZ,wBAAAtS,IACA+R,EAAAH,OAAAzY,EAAA6Y,0BAAA,IAAA7Y,EAAAoI,OAAAtB,EAAA1e,EAAA0e,EAAAze,EAAAye,EAAAY,MAEAkR,GAcA5Y,EAAAoZ,0BAAA,SAAAC,EAAAC,EAAAC,EAAAzS,GAEA,IAAA8R,EAAA,IAAA5Y,EAAAsY,eAIA,OAHAM,EAAAH,OAAAzY,EAAAiZ,wBAAAI,EAAAvS,IACA8R,EAAAH,OAAAzY,EAAAkZ,wBAAAI,EAAAxS,IACA8R,EAAAH,OAAAzY,EAAAmZ,wBAAAI,EAAAzS,IACA8R,GAGA5Y,IAGA5gD,OAAA,oCAAA,eAAA,SAAA4gD,GAuWA,OA9VAA,EAAAwZ,oBACAC,aAAA,EACAC,oBAAA,EACAC,mBAAA,GAUA3Z,EAAA4Z,mBACAC,oBAAA,EACAC,oBAAA,GAYA9Z,EAAA+Z,MAAA,SAAA3zD,EAAAC,EAAA4U,EAAA9G,GAEAjO,KAAAE,EAAAA,EACAF,KAAAG,EAAAA,EACAH,KAAA+U,EAAAA,EACA/U,KAAAiO,EAAAA,GAYA6rC,EAAA+Z,MAAA73D,UAAAujD,IAAA,SAAAr/C,EAAAC,EAAA4U,EAAA9G,GAEAjO,KAAAE,EAAAA,EACAF,KAAAG,EAAAA,EACAH,KAAA+U,EAAAA,EACA/U,KAAAiO,EAAAA,GASA6rC,EAAA+Z,MAAA73D,UAAA83D,UAAA,WAEA,OAAA,IAAAha,EAAAoI,OAAAliD,KAAAE,EAAAF,KAAAG,EAAAH,KAAA+U,IAWA+kC,EAAA+Z,MAAA73D,UAAAgpD,oBAAA,SAAAxF,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAqf,EAAAhC,EAAAgC,EAEAthD,EAAAF,KAAAE,EACAC,EAAAH,KAAAG,EACA4U,EAAA/U,KAAA+U,EACA9G,EAAAjO,KAAAiO,EAEAwyC,GAAAvgD,EAAAgiC,EAAA/hC,EAAAgiC,EAAAptB,EAAAysC,EAAAvzC,GAAA5E,KAAAq2C,KAAAx/C,EAAAA,EAAAC,EAAAA,EAAA4U,EAAAA,GACA,OAAA0rC,GAWA3G,EAAA+Z,MAAA73D,UAAA+3D,cAAA,SAAAvU,GAEA,IAAAwU,EAAAh0D,KAAAglD,oBAAAxF,GACA,OAAAn2C,KAAAu5B,IAAAoxB,IAWAla,EAAA+Z,MAAA73D,UAAA+yD,aAAA,SAAAvP,GAEA,IAAAtd,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAqf,EAAAhC,EAAAgC,EAEAthD,EAAAF,KAAAE,EACAC,EAAAH,KAAAG,EACA4U,EAAA/U,KAAA+U,EACA9G,EAAAjO,KAAAiO,EAEAwyC,EAAAzgD,KAAA+zD,cAAAvU,GACAyU,EAAA/zD,EAAAgiC,EAAA/hC,EAAAgiC,EAAAptB,EAAAysC,EAAAvzC,EACA6rC,EAAA2E,UAAAwV,EAAA,KACAxT,GAAAA,GAGA,IAAAjY,EAAAxoC,KAAA8zD,YAAAhU,YACA3hD,EAAAqhD,EAAAK,QAAAU,OAAA/X,EAAAiY,GACA,OAAAtiD,GAYA27C,EAAA+Z,MAAA73D,UAAAqxD,cAAA,SAAA7N,GAEA,IAAAt/C,EAAAF,KAAAE,EACAC,EAAAH,KAAAG,EACA4U,EAAA/U,KAAA+U,EACA9G,EAAAjO,KAAAiO,EAEAi0B,EAAAsd,EAAAtd,EACAC,EAAAqd,EAAArd,EACAqf,EAAAhC,EAAAgC,EAEA9iB,EAAAx+B,EAAAgiC,EAAA/hC,EAAAgiC,EAAAptB,EAAAysC,EAAAvzC,EACA,OAAA6rC,EAAAwE,WAAA5f,GACAob,EAAAwZ,mBAAAE,oBACA1Z,EAAAyE,WAAA7f,GACAob,EAAAwZ,mBAAAG,mBAGA3Z,EAAAwZ,mBAAAC,cAYAzZ,EAAA+Z,MAAA73D,UAAAo0D,aAAA,SAAAj7C,EAAAy4C,GAEA,IAAApN,EAAArrC,EAAAqrC,UAAAX,QAAAC,YAEAwN,EAAAn4C,EAAAxM,MAAAu5B,EACAqrB,EAAAp4C,EAAAxM,MAAAw5B,EACA+sB,EAAA/5C,EAAAxM,MAAA64C,EAEAwJ,EAAA71C,EAAAxM,MAAAu5B,EAAAse,EAAAte,EACA+oB,EAAA91C,EAAAxM,MAAAw5B,EAAAqe,EAAAre,EACA+oB,EAAA/1C,EAAAxM,MAAA64C,EAAAhB,EAAAgB,EAEAthD,EAAAF,KAAAE,EACAC,EAAAH,KAAAG,EACA4U,EAAA/U,KAAA+U,EACA9G,EAAAjO,KAAAiO,EAEA+gD,EAAA9uD,GAAAotD,EAAAtC,GAAA7qD,GAAAotD,EAAAtC,GAAAl2C,GAAAm6C,EAAAhE,GACA,GAAApR,EAAAuE,OAAA2Q,GACA,OAAAlV,EAAA4Z,kBAAAC,oBAGA,IAAA5R,GAAA7hD,EAAAotD,EAAAntD,EAAAotD,EAAAx4C,EAAAm6C,EAAAjhD,GAAA+gD,EACA,QAAAlyD,IAAA8wD,EAAA,CACApN,EAAAL,eAAA4B,GACA,IAAAtoD,EAAAqgD,EAAAyI,SAAAptC,EAAAxM,MAAA63C,GACAoN,EAAArO,IAAA9lD,EAAAyoC,EAAAzoC,EAAA0oC,EAAA1oC,EAAA+nD,GAGA,OAAA1H,EAAA4Z,kBAAAE,qBAaA9Z,EAAA+Z,MAAA73D,UAAAk4D,iBAAA,SAAA/+C,GAEA,IAAAqrC,EAAArrC,EAAAqrC,UAAAX,QAAAC,YAEAwN,EAAAn4C,EAAAxM,MAAAu5B,EACAqrB,EAAAp4C,EAAAxM,MAAAw5B,EACA+sB,EAAA/5C,EAAAxM,MAAA64C,EAEAwJ,EAAA71C,EAAAxM,MAAAu5B,EAAAse,EAAAte,EACA+oB,EAAA91C,EAAAxM,MAAAw5B,EAAAqe,EAAAre,EACA+oB,EAAA/1C,EAAAxM,MAAA64C,EAAAhB,EAAAgB,EAEAthD,EAAAF,KAAAE,EACAC,EAAAH,KAAAG,EACA4U,EAAA/U,KAAA+U,EACA9G,EAAAjO,KAAAiO,EAEA+gD,EAAA9uD,GAAAotD,EAAAtC,GAAA7qD,GAAAotD,EAAAtC,GAAAl2C,GAAAm6C,EAAAhE,GACA,GAAApR,EAAAuE,OAAA2Q,GACA,OAAA,KAGA,IAAAjN,GAAA7hD,EAAAotD,EAAAntD,EAAAotD,EAAAx4C,EAAAm6C,EAAAjhD,GAAA+gD,EAEA,OADAxO,EAAAL,eAAA4B,GACAjI,EAAAyI,SAAAptC,EAAAxM,MAAA63C,IASA1G,EAAA+Z,MAAA73D,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAA+Z,MAAA7zD,KAAAE,EAAAF,KAAAG,EAAAH,KAAA+U,EAAA/U,KAAAiO,IAYA6rC,EAAAqa,8BAAA,SAAA3U,EAAAgB,GAEA,IAAA4T,EAAA,IAAAta,EAAA+Z,MACArrB,EAAAgY,EAAAX,QAAAC,YACAuU,EAAA7rB,EAAAtG,EACAoyB,EAAA9rB,EAAArG,EACAoyB,EAAA/rB,EAAAgZ,EACAgT,IAAAH,EAAA7U,EAAAtd,EAAAoyB,EAAA9U,EAAArd,EAAAoyB,EAAA/U,EAAAgC,GAEA,OADA4S,EAAA7U,IAAA8U,EAAAC,EAAAC,EAAAC,GACAJ,GAaAta,EAAA2a,wBAAA,SAAAv0D,EAAAC,EAAA4U,GAEA,IAAAq/C,EAAA,IAAAta,EAAA+Z,MACAQ,GAAAl0D,EAAAgiC,EAAAjiC,EAAAiiC,IAAAptB,EAAAysC,EAAAthD,EAAAshD,IAAAzsC,EAAAotB,EAAAjiC,EAAAiiC,IAAAhiC,EAAAqhD,EAAAthD,EAAAshD,GACA8S,GAAAn0D,EAAAqhD,EAAAthD,EAAAshD,IAAAzsC,EAAAmtB,EAAAhiC,EAAAgiC,IAAAntB,EAAAysC,EAAAthD,EAAAshD,IAAArhD,EAAA+hC,EAAAhiC,EAAAgiC,GACAqyB,GAAAp0D,EAAA+hC,EAAAhiC,EAAAgiC,IAAAntB,EAAAotB,EAAAjiC,EAAAiiC,IAAAptB,EAAAmtB,EAAAhiC,EAAAgiC,IAAA/hC,EAAAgiC,EAAAjiC,EAAAiiC,GACAqyB,IAAAH,EAAAn0D,EAAAgiC,EAAAoyB,EAAAp0D,EAAAiiC,EAAAoyB,EAAAr0D,EAAAshD,GAEA,OADA4S,EAAA7U,IAAA8U,EAAAC,EAAAC,EAAAC,GACAJ,GAaAta,EAAA4a,oCAAA,SAAAlV,EAAAgB,EAAA4T,GAEA,IAAA5rB,EAAAgY,EAAAX,QAAAC,YAEAwN,EAAA9N,EAAAtd,EACAqrB,EAAA/N,EAAArd,EACA+sB,EAAA1P,EAAAgC,EAEAwJ,EAAAxL,EAAAtd,EAAAsG,EAAAtG,EACA+oB,EAAAzL,EAAArd,EAAAqG,EAAArG,EACA+oB,EAAA1L,EAAAgC,EAAAhZ,EAAAgZ,EAEAthD,EAAAk0D,EAAAl0D,EACAC,EAAAi0D,EAAAj0D,EACA4U,EAAAq/C,EAAAr/C,EACA9G,EAAAmmD,EAAAnmD,EAEA+gD,EAAA9uD,GAAAotD,EAAAtC,GAAA7qD,GAAAotD,EAAAtC,GAAAl2C,GAAAm6C,EAAAhE,GACA,GAAApR,EAAAuE,OAAA2Q,GACA,OAAA,EAGA,IAAAjN,GAAA7hD,EAAAotD,EAAAntD,EAAAotD,EAAAx4C,EAAAm6C,EAAAjhD,GAAA+gD,EACAxmB,EAAA2X,eAAA4B,GACA,IAAA6L,EAAA9T,EAAAyI,SAAA/C,EAAAhX,GACAiY,EAAAjB,EAAAC,WAAAmO,GACAlvB,EAAAx+B,EAAAotD,EAAAntD,EAAAotD,EAAAx4C,EAAAm6C,EAAAjhD,EAKA,OAJA6rC,EAAAyE,WAAA7f,KACA+hB,GAAAA,GAGAA,GAaA3G,EAAA6a,8BAAA,SAAAnV,EAAAgB,EAAA4T,GAEA,OAAA/qD,KAAAu5B,IAAAkX,EAAA4a,oCAAAlV,EAAAgB,EAAA4T,KAGAta,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GAoKA,OAzJAA,EAAA8a,WAAA,SAAAC,EAAA3C,EAAA15B,GAEA,GAAAq8B,EAAAnW,QAAAwT,GACA,OAAApY,EAAA4N,iBAGA,IAAAvpD,KAEA8P,EAAA6rC,EAAA0I,SAAAqS,EAAA3C,GAAApS,YACA5pC,EAAA4jC,EAAAqI,YAAA3pB,EAAAvqB,GAAA6xC,YACAiC,EAAAjI,EAAAqI,YAAAl0C,EAAAiI,GAAA4pC,YAmBA,OAjBA3hD,EAAA,GAAA+X,EAAAgsB,EACA/jC,EAAA,GAAA4jD,EAAA7f,EACA/jC,EAAA,GAAA8P,EAAAi0B,EACA/jC,EAAA,GAAA,EACAA,EAAA,GAAA+X,EAAAisB,EACAhkC,EAAA,GAAA4jD,EAAA5f,EACAhkC,EAAA,GAAA8P,EAAAk0B,EACAhkC,EAAA,GAAA,EACAA,EAAA,GAAA+X,EAAAsrC,EACArjD,EAAA,GAAA4jD,EAAAP,EACArjD,EAAA,IAAA8P,EAAAuzC,EACArjD,EAAA,IAAA,EACAA,EAAA,KAAA27C,EAAA2H,UAAAvrC,EAAA2+C,GACA12D,EAAA,KAAA27C,EAAA2H,UAAAM,EAAA8S,GACA12D,EAAA,KAAA27C,EAAA2H,UAAAxzC,EAAA4mD,GACA12D,EAAA,IAAA,EAEAA,GAcA27C,EAAAgb,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAA/2D,KAEAg3D,EAAA,EAAA9rD,KAAA+rD,IAAAL,EAAA,GACAM,EAAA,GAAAJ,EAAAC,GAmBA,OAjBA/2D,EAAA,GAAAg3D,EAAAH,EACA72D,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAAg3D,EACAh3D,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,GAAA,EACAA,EAAA,KAAA+2D,EAAAD,GAAAI,EACAl3D,EAAA,KAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EACAA,EAAA,IAAA,EAAA+2D,EAAAD,EAAAI,EACAl3D,EAAA,IAAA,EAEAA,GAmBA27C,EAAAwb,QAAA,SAAA9V,EAAAqV,EAAA3C,EAAA15B,EAAAu8B,EAAAC,EAAAC,EAAAC,EAAAK,GAEA,IAAA9uC,GACA+4B,EAAAtd,EACAsd,EAAArd,EACAqd,EAAAgC,EACA,GAGAgU,EAAA1b,EAAA8a,WAAAC,EAAA3C,EAAA15B,GACAi9B,EAAA3b,EAAAgb,kBAAAC,EAAAC,EAAAC,EAAAC,GACAQ,EAAA5b,EAAAsP,eAAAoM,EAAAC,GACAE,EAAA7b,EAAAgO,qBAAA4N,EAAAjvC,GACAuoC,EAAA2G,EAAA,GACA,GAAA7b,EAAAuE,OAAA2Q,GACA,OAAA,KAGA,IAAA7wD,EAAA,IAAA27C,EAAAyH,MAAA,EAAA,EAAA,GAIA,OAHApjD,EAAA+jC,GAAAyzB,EAAA,GAAA3G,EAAA,GAAA,IAAAuG,EAAA,GAAAA,EAAA,GACAp3D,EAAAgkC,GAAAwzB,EAAA,GAAA3G,EAAA,GAAA,IAAAuG,EAAA,GAAAA,EAAA,GACAp3D,EAAAqjD,EAAAmU,EAAA,GAAA3G,EAAA,GAAA,GACA7wD,GAmBA27C,EAAA8b,UAAA,SAAApW,EAAAqV,EAAA3C,EAAA15B,EAAAu8B,EAAAC,EAAAC,EAAAC,EAAAK,GAEA,IAAA9uC,IACA+4B,EAAAtd,EAAAqzB,EAAA,IAAAA,EAAA,GAAA,EAAA,GACA/V,EAAArd,EAAAozB,EAAA,IAAAA,EAAA,GAAA,EAAA,EACA,EAAA/V,EAAAgC,EAAA,EACA,GAGAgU,EAAA1b,EAAA8a,WAAAC,EAAA3C,EAAA15B,GACAi9B,EAAA3b,EAAAgb,kBAAAC,EAAAC,EAAAC,EAAAC,GACAQ,EAAA5b,EAAAsP,eAAAoM,EAAAC,GACAI,EAAA/b,EAAA4Q,aAAAgL,GACAC,EAAA7b,EAAAgO,qBAAA+N,EAAApvC,GACAuoC,EAAA2G,EAAA,GACA,GAAA7b,EAAAuE,OAAA2Q,GACA,OAAA,KAGA,IAAA7wD,EAAA,IAAA27C,EAAAyH,MAAA,EAAA,EAAA,GAIA,OAHApjD,EAAA+jC,EAAAyzB,EAAA,GAAAA,EAAA,GACAx3D,EAAAgkC,EAAAwzB,EAAA,GAAAA,EAAA,GACAx3D,EAAAqjD,EAAAmU,EAAA,GAAAA,EAAA,GACAx3D,GAGA27C,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GAoUA,OA3TAA,EAAAgc,aAAA,SAAA92B,GAoBA,SAAA+2B,EAAA/2B,EAAAxmB,GAEA,IAGA/e,EAHAmP,EAAAo2B,EAAAzlC,OACA8Q,EAAA,EAGA,IAAA5Q,EAAA,EAAAA,EAAAmP,EAAAnP,IACA+e,GAAAnO,EACAA,EAAA5Q,EAEAqgD,EAAAuK,mBAAArlB,EAAAxmB,GAAAwmB,EAAA30B,GAAA20B,EAAAvlC,KAAAqgD,EAAAkK,YAAAG,YACA95C,EAAA5Q,GAKA,OAAA4Q,EAGA,IAAAlM,KACAyK,EAAAo2B,EAAAzlC,OACA,GAAAqP,EAAA,EACA,OAAAzK,EAGA,IAEAkM,EAFA/G,EA3CA,SAAA07B,GAEA,IAIAvlC,EAAA+e,EAJA5P,EAAAo2B,EAAAzlC,OACAy8D,EAAAlc,EAAAoE,IACA+X,GAAA,EAGA,IAAAx8D,EAAA,EAAAA,EAAAmP,EAAAnP,IACA+e,EAAAwmB,EAAAvlC,GAAAyoC,EACA4X,EAAA0E,QAAAhmC,EAAAw9C,KACAA,EAAAx9C,EACAy9C,EAAAx8D,GAIA,OAAAw8D,EA4BAC,CAAAl3B,GACAxmB,EAAAlV,EAGA,GACAnF,EAAAa,KAAAwZ,GACAnO,EAAA0rD,EAAA/2B,EAAAxmB,GACAA,EAAAnO,QACAA,GAAA/G,GAEA,OAAAnF,GAaA27C,EAAAqc,aAAA,SAAAn3B,GA6BA,SAAAo3B,EAAAhhD,EAAAoqC,GAEA,IAAA6W,EAAA,IA7BA,WAEAr2D,KAAA8hB,SAAA,MA8BA,OAFAu0C,EAAAv0C,SAAA09B,EACApqC,EAAAkhD,SAAAt3D,KAAAq3D,GACAjhD,EAAAkhD,SAAA/8D,OAAA,EAGA,SAAAg9D,EAAAnhD,EAAAohD,EAAAt2D,EAAAC,GAEA,IAEA1G,EAAA+e,EAFAi+C,GAAA,EAGA,IAAAh9D,EAAA,EAAAA,EAAA2b,EAAAshD,MAAAn9D,OAAAE,IAEA,IADA+e,EAAApD,EAAAshD,MAAAj9D,IACAk9D,OAAAz2D,GAAAsY,EAAAo+C,OAAAz2D,GAAAqY,EAAAm+C,OAAAx2D,GAAAqY,EAAAo+C,OAAA12D,EAAA,CACAu2D,EAAAh9D,EACA,MAIA,IAAA,GAAAg9D,EAAA,CACA,IAAAI,EAAA,IA5CA,WAEA72D,KAAA22D,MAAA,KACA32D,KAAA42D,MAAA,KACA52D,KAAA82D,KAAA,KACA92D,KAAA+2D,KAAA,MAwCAF,EAAAF,MAAAz2D,EACA22D,EAAAD,MAAAz2D,EACA02D,EAAAC,MAAA,EACAD,EAAAE,MAAA,EACA3hD,EAAAshD,MAAA13D,KAAA63D,GACAJ,EAAArhD,EAAAshD,MAAAn9D,OAAA,EAGA,IAAAy9D,EAAA5hD,EAAAshD,MAAAD,GASA,OARAO,EAAAF,MAAAN,GAAAQ,EAAAD,MAAAP,KACA,GAAAQ,EAAAF,KACAE,EAAAF,KAAAN,GACA,GAAAQ,EAAAD,OACAC,EAAAD,KAAAP,IAIAC,EAGA,SAAAQ,EAAA7hD,EAAAlV,EAAAC,EAAA4U,GAEA,IAAAyhD,EAAAphD,EAAA8hD,UAAA39D,OACAstD,EAAA0P,EAAAnhD,EAAAohD,EAAAt2D,EAAAC,GACA2mD,EAAAyP,EAAAnhD,EAAAohD,EAAAr2D,EAAA4U,GACAoiD,EAAAZ,EAAAnhD,EAAAohD,EAAAzhD,EAAA7U,GAEAk3D,EAAA,IAhEA,WAEAp3D,KAAAs2D,SAAA,KACAt2D,KAAA02D,MAAA,KACA12D,KAAAq3D,MAAA,MAiEA,OAJAD,EAAAd,UAAAp2D,EAAAC,EAAA4U,GACAqiD,EAAAV,OAAA7P,EAAAC,EAAAqQ,GACAC,EAAAC,OAAA,EACAjiD,EAAA8hD,UAAAl4D,KAAAo4D,GACAhiD,EAAA8hD,UAAA39D,OAAA,EAGA,SAAA+9D,EAAAliD,EAAAohD,EAAAC,GAEA,IAAAO,EAAA5hD,EAAAshD,MAAAD,GACAO,EAAAF,MAAAN,EACAQ,EAAAF,MAAA,EACAE,EAAAD,MAAAP,IACAQ,EAAAD,MAAA,GAIA,SAAAQ,EAAAniD,EAAAohD,GAEA,IAAAY,EAAAhiD,EAAA8hD,UAAAV,GACAY,EAAAC,QAIAC,EAAAliD,EAAAohD,EAAAY,EAAAV,MAAA,IACAY,EAAAliD,EAAAohD,EAAAY,EAAAV,MAAA,IACAY,EAAAliD,EAAAohD,EAAAY,EAAAV,MAAA,IACAU,EAAAC,OAAA,GAiBA,SAAAG,EAAApiD,EAAAlV,EAAAC,EAAA4U,EAAA9G,GAEA,OAAA6rC,EAAA0E,QAhBA,SAAAppC,EAAAlV,EAAAC,EAAA4U,EAAA9G,GAEA,IAAAwpD,EAAAriD,EAAAkhD,SAAAp2D,GAAA4hB,SACA41C,EAAAtiD,EAAAkhD,SAAAn2D,GAAA2hB,SACA61C,EAAAviD,EAAAkhD,SAAAvhD,GAAA+M,SACA81C,EAAAxiD,EAAAkhD,SAAAroD,GAAA6T,SAEA+1C,EAAA/d,EAAA0I,SAAAiV,EAAAG,GACAE,EAAAhe,EAAA0I,SAAAkV,EAAAE,GACAG,EAAAje,EAAA0I,SAAAmV,EAAAC,GAEA,OAAA9d,EAAA2H,UAAAoW,EAAA/d,EAAAqI,YAAA2V,EAAAC,IAAA,EAKAC,CAAA5iD,EAAAlV,EAAAC,EAAA4U,EAAA9G,GAAA,GAqBA,SAAAgqD,EAAA7iD,EAAAtU,GAEA,IAEArH,EAAA29D,EAeAvQ,EAAAC,EAAAqQ,EAAAe,EAAAC,EAAAC,EAjBAC,KAGA,IAAA5+D,EAAA,EAAAA,EAAA2b,EAAA8hD,UAAA39D,OAAAE,KACA29D,EAAAhiD,EAAA8hD,UAAAz9D,IACA49D,OAKAG,EAAApiD,EAAAgiD,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAAx1D,GACAu3D,EAAAr5D,MAAA,GALAq5D,EAAAr5D,MAAA,GAYA,IA6CAs5D,EA7CAC,KACA,IAAA9+D,EAAA,EAAAA,EAAA4+D,EAAA9+D,OAAAE,IACA4+D,EAAA5+D,KAIA29D,EAAAhiD,EAAA8hD,UAAAz9D,IACA49D,QAIAxQ,EAAAzxC,EAAAshD,MAAAU,EAAAV,MAAA,IACA5P,EAAA1xC,EAAAshD,MAAAU,EAAAV,MAAA,IACAS,EAAA/hD,EAAAshD,MAAAU,EAAAV,MAAA,IAEAwB,GAAA,GAAArR,EAAAiQ,OAAA,GAAAjQ,EAAAkQ,MAAAsB,EAAAxR,EAAAiQ,OAAAuB,EAAAxR,EAAAkQ,MACAoB,GAAA,GAAArR,EAAAgQ,OAAA,GAAAhQ,EAAAiQ,MAAAsB,EAAAvR,EAAAgQ,OAAAuB,EAAAvR,EAAAiQ,MACAqB,GAAA,GAAAjB,EAAAL,OAAA,GAAAK,EAAAJ,MAAAsB,EAAAlB,EAAAL,OAAAuB,EAAAlB,EAAAJ,MAEAmB,GACAK,EAAAv5D,MAAAo4D,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAAx1D,IAGAq3D,GACAI,EAAAv5D,MAAAo4D,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAAx1D,IAGAs3D,GACAG,EAAAv5D,MAAAo4D,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAAx1D,KAIA,IAAArH,EAAA,EAAAA,EAAA4+D,EAAA9+D,OAAAE,IACA4+D,EAAA5+D,KAIA29D,EAAAhiD,EAAA8hD,UAAAz9D,IACA49D,OAIAE,EAAAniD,EAAA3b,GAIA,IAAAA,EAAA,EAAAA,EAAA8+D,EAAAh/D,OAAAE,IACA6+D,EAAAC,EAAA9+D,GACAw9D,EAAA7hD,EAAAkjD,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA,IAAAn6D,KACAyK,EAAAo2B,EAAAzlC,OACA,GAAAqP,EAAA,EACA,OAAAzK,EAGA,IAEA1E,EAUA29D,EAZAhiD,EAAA,IA3MA,WAEApV,KAAAs2D,YACAt2D,KAAA02D,SACA12D,KAAAk3D,cA0MA,IAAAz9D,EAAA,EAAAA,EAAAmP,EAAAnP,IACA28D,EAAAhhD,EAAA4pB,EAAAvlC,IAIA,IArGA,SAAA2b,GAEA,IAAAohD,GAAA,EAEAA,EADAgB,EAAApiD,EAAA,EAAA,EAAA,EAAA,GACA6hD,EAAA7hD,EAAA,EAAA,EAAA,GAEA6hD,EAAA7hD,EAAA,EAAA,EAAA,GAGA,IAAAgiD,EAAAhiD,EAAA8hD,UAAAV,GACAS,EAAA7hD,EAAAgiD,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAA,GACAW,EAAA7hD,EAAAgiD,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAA,GACAW,EAAA7hD,EAAAgiD,EAAAd,SAAA,GAAAc,EAAAd,SAAA,GAAA,GAwFAkC,CAAApjD,GACA3b,EAAA,EAAAA,EAAAmP,EAAAnP,IACAw+D,EAAA7iD,EAAA3b,GAIA,IAAAA,EAAA,EAAAA,EAAA2b,EAAA8hD,UAAA39D,OAAAE,KACA29D,EAAAhiD,EAAA8hD,UAAAz9D,IACA49D,OACAl5D,EAAAa,KAAAo4D,EAAAd,UAGA,OAAAn4D,GAGA27C,IAGA5gD,OAAA,wCAAA,eAAA,SAAA4gD,GAg9BA,OAt8BAA,EAAA2e,YACAxU,QAAA,EACAyU,OAAA,EACAC,QAAA,EACAC,QAAA,GAYA9e,EAAA+e,wBACAC,SAAA,EACAC,OAAA,EACAC,OAAA,EACAC,QAAA,GAYAnf,EAAAof,yBACAC,qBAAA,EACAC,uBAAA,EACAC,qBAAA,EACAC,eAAA,GAOAxf,EAAAyf,UAAA,WAEAv5D,KAAAs2D,SAAA,KACAt2D,KAAAmI,MAAA,KACAnI,KAAAw5D,SAUA1f,EAAAyf,UAAAv9D,UAAAo6D,UAAA,SAAAl0B,EAAAC,GAEAniC,KAAAy5D,eAAA,IAAA3f,EAAAwF,QAAApd,EAAAC,KASA2X,EAAAyf,UAAAv9D,UAAAy9D,eAAA,SAAAja,GAEAx/C,KAAAs2D,SAAAt3D,KAAAwgD,GACAx/C,KAAA05D,cAWA5f,EAAAyf,UAAAv9D,UAAA29D,UAAA,SAAA74D,GAEA,OAAAd,KAAAs2D,SAAAx1D,IASAg5C,EAAAyf,UAAAv9D,UAAA49D,aAAA,SAAA94D,GAEAd,KAAAs2D,SAAA9zD,OAAA1B,EAAA,IASAg5C,EAAAyf,UAAAv9D,UAAA69D,YAAA,WAEA,OAAA75D,KAAAs2D,SAAA/8D,QAaAugD,EAAAyf,UAAAv9D,UAAA89D,kBAAA,SAAA7iD,EAAAijC,EAAAj5C,GAEA,IAAA2H,EAAA5I,KAAAs2D,SAAA/8D,OACAuH,EAAAmW,EAEA,IADAhW,EAAAH,GACAA,GAAAo5C,GAEAj5C,EADAH,GAAAA,EAAA,GAAA8H,IAaAkxC,EAAAyf,UAAAv9D,UAAA+9D,cAAA,SAAAj5D,GAEA,OAAAg5C,EAAAa,UAAA75C,EAAAd,KAAAs2D,SAAA/8D,SAWAugD,EAAAyf,UAAAv9D,UAAAg+D,cAAA,SAAAl5D,GAEA,OAAAg5C,EAAAY,UAAA55C,EAAAd,KAAAs2D,SAAA/8D,SASAugD,EAAAyf,UAAAv9D,UAAAi+D,cAAA,SAAArxD,GAEAkxC,EAAAuC,WAAAr8C,KAAAs2D,SAAA1tD,GACA5I,KAAA05D,cAOA5f,EAAAyf,UAAAv9D,UAAAk+D,gBAAA,WAEAl6D,KAAAs2D,SAAAx/C,UACA9W,KAAA05D,cAWA5f,EAAAyf,UAAAv9D,UAAAm+D,eAAA,SAAAr5D,GAEA,IAAA2X,EAAAzY,KAAAs2D,SAAAt2D,KAAAg6D,cAAAl5D,IACAs5D,EAAAp6D,KAAAs2D,SAAAx1D,GACAuJ,EAAArK,KAAAs2D,SAAAt2D,KAAA+5D,cAAAj5D,IACAu5D,EAAAvgB,EAAAwH,WAAA7oC,EAAA2hD,GACAE,EAAAxgB,EAAAwH,WAAAj3C,EAAA+vD,GACA,OAAAC,EAAA1a,QAAA2a,IASAxgB,EAAAyf,UAAAv9D,UAAAu+D,cAAA,WAEA,GAAA,OAAAv6D,KAAAmI,MAAAqyD,WACA,OAAAx6D,KAAAmI,MAAAqyD,WAGA,IAAA5xD,EAAA5I,KAAAs2D,SAAA/8D,OACA4E,EAAA,EACA,GAAAyK,GAAA,EAAA,CACA,IAAAnP,EAAA+e,EAAAnO,EACA,IAAA5Q,EAAA,EAAAA,EAAAmP,EAAAnP,IACA+e,EAAAxY,KAAAs2D,SAAA78D,GACA4Q,EAAArK,KAAAs2D,UAAA78D,EAAA,GAAAmP,GACAzK,GAAAqa,EAAA0pB,EAAA73B,EAAA83B,EAAA93B,EAAA63B,EAAA1pB,EAAA2pB,EAEAhkC,GAAA,GAIA,OADA6B,KAAAmI,MAAAqyD,WAAAr8D,EACAA,GASA27C,EAAAyf,UAAAv9D,UAAAy+D,QAAA,WAEA,IAAAD,EAAAx6D,KAAAu6D,gBACA,OAAAlxD,KAAAu5B,IAAA43B,IASA1gB,EAAAyf,UAAAv9D,UAAA0+D,eAAA,WAEA,GAAA,OAAA16D,KAAAmI,MAAAm9C,YACA,OAAAtlD,KAAAmI,MAAAm9C,YAGA,IAAAnnD,EAAA27C,EAAAkK,YAAAC,QACA,GAAAjkD,KAAAs2D,SAAA/8D,QAAA,EAAA,CACA,IAAAihE,EAAAx6D,KAAAu6D,gBACAzgB,EAAAwE,WAAAkc,GACAr8D,EAAA27C,EAAAkK,YAAAE,iBACApK,EAAAyE,WAAAic,KACAr8D,EAAA27C,EAAAkK,YAAAG,WAKA,OADAnkD,KAAAmI,MAAAm9C,YAAAnnD,EACAA,GAUA27C,EAAAyf,UAAAv9D,UAAA2+D,cAAA,WAEA,GAAA,OAAA36D,KAAAmI,MAAAyyD,WACA,OAAA56D,KAAAmI,MAAAyyD,WAGA,IAAAhyD,EAAA5I,KAAAs2D,SAAA/8D,OACA,GAAAqP,EAAA,EACA,OAAAkxC,EAAA2e,WAAAxU,QAGA,IAIAxqD,EAJA0E,EAAA27C,EAAA2e,WAAAxU,QACA4W,EAAA76D,KAAA06D,iBACA,GAAAG,GAAA/gB,EAAAkK,YAAAC,QAGA,IAFA9lD,EAAA27C,EAAA2e,WAAAC,OAEAj/D,EAAA,EAAAA,EAAAmP,EAAAnP,IACA,GAAAuG,KAAA86D,gBAAArhE,GAAA,CACA0E,EAAA27C,EAAA2e,WAAAE,QACA,MAMA,OADA34D,KAAAmI,MAAAyyD,WAAAz8D,EACAA,GAWA27C,EAAAyf,UAAAv9D,UAAA++D,qBAAA,SAAAj6D,GAEA,QAAAhE,IAAAkD,KAAAmI,MAAA6yD,mBAAAl6D,GACA,OAAAd,KAAAmI,MAAA6yD,mBAAAl6D,GAGA,IAAA2X,EAAAzY,KAAAs2D,SAAAt2D,KAAAg6D,cAAAl5D,IACAs5D,EAAAp6D,KAAAs2D,SAAAx1D,GACAuJ,EAAArK,KAAAs2D,SAAAt2D,KAAA+5D,cAAAj5D,IAEA3C,EAAA27C,EAAAuK,mBAAA5rC,EAAA2hD,EAAA/vD,GAEA,OADArK,KAAAmI,MAAA6yD,mBAAAl6D,GAAA3C,EACAA,GAWA27C,EAAAyf,UAAAv9D,UAAAi/D,eAAA,SAAAn6D,GAEA,IAAAwkD,EAAAtlD,KAAA06D,iBACAQ,EAAAl7D,KAAA+6D,qBAAAj6D,GACA,OAAAo6D,GAAAphB,EAAAkK,YAAAC,SAGAiX,GAAA5V,GAWAxL,EAAAyf,UAAAv9D,UAAA8+D,gBAAA,SAAAh6D,GAEA,IAAAwkD,EAAAtlD,KAAA06D,iBACAQ,EAAAl7D,KAAA+6D,qBAAAj6D,GACA,OAAAo6D,GAAAphB,EAAAkK,YAAAC,SAGAiX,GAAA5V,GAWAxL,EAAAyf,UAAAv9D,UAAAqxD,cAAA,SAAA7N,GAEA,SAAA2b,EAAA3b,EAAA2N,EAAAxwC,GAYA,IAAAy+C,EAAAjO,EAAAhrB,EAAAqd,EAAArd,EACAk5B,EAAA1+C,EAAAwlB,EAAAqd,EAAArd,EAEAm5B,EAAAxhB,EAAAyE,WAAA6c,GACAG,EAAAzhB,EAAAwE,WAAA8c,GACAI,EAAA1hB,EAAAyE,WAAA8c,GACAI,EAAA3hB,EAAAwE,WAAA+c,GACA,GAAAC,GAAAE,GAAAD,GAAAE,EACA,OAAA,EAGA,IAAAC,GAAAJ,IAAAC,EACAI,GAAAH,IAAAC,EACA,GAAAC,GAAAC,EACA,OAAA,EAGA,IAAA/N,EA3BA,SAAApO,EAAA2N,EAAAxwC,GAEA,IAAAxe,EAAA,IAAA27C,EAAAwF,QAAA6N,EAAAjrB,EAAAsd,EAAArd,GACA,IAAA2X,EAAA4E,QAAAyO,EAAAhrB,EAAAqd,EAAArd,GAAA,CACA,IAAAy5B,EAAAvyD,KAAAu5B,KAAAuqB,EAAAhrB,EAAAqd,EAAArd,IAAAxlB,EAAAwlB,EAAAgrB,EAAAhrB,IACAhkC,EAAA+jC,EAAAirB,EAAAjrB,GAAAvlB,EAAAulB,EAAAirB,EAAAjrB,GAAA05B,EAEA,OAAAz9D,EAoBA09D,CAAArc,EAAA2N,EAAAxwC,GACA,GAAAm9B,EAAA0E,QAAAoP,EAAA1rB,EAAAsd,EAAAtd,GACA,OAAA,EACA,GAAA4X,EAAA2E,UAAAmP,EAAA1rB,EAAAsd,EAAAtd,GAAA,CACA,GAAAw5B,GAAAC,EAAA,CACA,IAAAG,EAAAhiB,EAAA2E,UAAA9hC,EAAAwlB,EAAAgrB,EAAAhrB,GACA,OAAAu5B,GAAAI,GAAAH,IAAAG,EACA,EAEA,EAEA,OAAA,EAEA,OAAA,EAGA,IAEAriE,EAAAsiE,EAAAC,EAAArO,EAAA7rC,EAFAm6C,EAAAj8D,KAAAs2D,SAAA/8D,OACA2iE,EAAA,EAEA,IAAAziE,EAAA,EAAAA,EAAAwiE,EAAAxiE,IAAA,CAKA,GAJAsiE,EAAA/7D,KAAAs2D,SAAA78D,GACAuiE,EAAAh8D,KAAAs2D,UAAA78D,EAAA,GAAAwiE,GACAtO,EAAA,IAAA7T,EAAAoT,SAAA6O,EAAAC,IACAl6C,EAAA6rC,EAAAN,cAAA7N,KACA1F,EAAA0S,sBAAAC,oBACA,OAAA3S,EAAA+e,uBAAAE,OACA,GAAAj3C,GAAAg4B,EAAA0S,sBAAAE,sBACA,OAAA5S,EAAA+e,uBAAAC,SAEAoD,GAAAf,EAAA3b,EAAAuc,EAAAC,GAGA,OAAAE,EAAA,GAAA,EACApiB,EAAA+e,uBAAAG,OAEAlf,EAAA+e,uBAAAI,SAeAnf,EAAAyf,UAAAv9D,UAAA0xD,eAAA,SAAAC,EAAAwO,EAAAC,GAEA,IAMA3iE,EAAA4iE,EAAAC,EAAAC,EAAAC,EACAC,EAAA36C,EAPA3jB,EAAA27C,EAAAof,wBAAAI,eACA2C,EAAAj8D,KAAAs2D,SAAA/8D,OACA,GAAA0iE,EAAA,EACA,OAAA99D,EAKA,IAAA1E,EAAA,EAAAA,EAAAwiE,EAAAxiE,IAKA,GAJA4iE,EAAA5iE,EACA6iE,GAAA7iE,EAAA,GAAAwiE,EACAM,EAAAv8D,KAAAs2D,SAAA+F,GACAG,EAAAx8D,KAAAs2D,SAAAgG,GACAD,GAAAF,GAAAG,GAAAH,GAAAE,GAAAD,GAAAE,GAAAF,EAAA,CAKA,GAFAK,EAAA,IAAA3iB,EAAAoT,SAAAqP,EAAAC,IACA16C,EAAA6rC,EAAAD,eAAA+O,KACA3iB,EAAA8S,uBAAAI,yBACA,OAAAlT,EAAAof,wBAAAC,qBACA,GAAAr3C,GAAAg4B,EAAA8S,uBAAAE,2BACA,OAAAhT,EAAAof,wBAAAE,uBACAt3C,GAAAg4B,EAAA8S,uBAAAG,2BACA5uD,EAAA27C,EAAAof,wBAAAG,sBAIA,OAAAl7D,GAYA27C,EAAAyf,UAAAv9D,UAAA0gE,WAAA,SAAAzlD,EAAAijC,GA0BA,GAAAjjC,GAAAijC,EACA,OAAA,EAGA,GAAAl6C,KAAAg6D,cAAA/iD,IAAAijC,GAAAl6C,KAAA+5D,cAAA9iD,IAAAijC,EACA,OAAA,EAGA,IAAAyiB,EAAA38D,KAAAs2D,SAAAr/C,GACA2lD,EAAA58D,KAAAs2D,SAAApc,GACA,OAAAyiB,EAAAje,QAAAke,MAlCA,SAAAC,EAAA5lD,EAAAijC,GAEA,IAAAyiB,EAAAE,EAAAlD,UAAA1iD,GACA2lD,EAAAC,EAAAlD,UAAAzf,GACAyT,EAAA,IAAA7T,EAAAoT,SAAAyP,EAAAC,GAEA,GADAC,EAAAnP,eAAAC,EAAA12C,EAAAijC,IACAJ,EAAAof,wBAAAI,eACA,OAAA,EAEA,OAAA,EA6BAwD,CAAA98D,KAAAiX,EAAAijC,MA1BA,SAAA2iB,EAAA5lD,EAAAijC,GAEA,IAAAyiB,EAAAE,EAAAlD,UAAA1iD,GACA2lD,EAAAC,EAAAlD,UAAAzf,GACA6iB,EAAA,IAAAjjB,EAAAwF,SACAqd,EAAAz6B,EAAA06B,EAAA16B,GAAA,GACAy6B,EAAAx6B,EAAAy6B,EAAAz6B,GAAA,GAGA,OADA06B,EAAAxP,cAAA0P,IACAjjB,EAAA+e,uBAAAG,OAqBAgE,CAAAh9D,KAAAiX,EAAAijC,KAaAJ,EAAAyf,UAAAv9D,UAAAihE,QAAA,WAEA,IACAxjE,EAAA48D,EADAC,KAEA,IAAA78D,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA48D,EAAAr2D,KAAAs2D,SAAA78D,GACA68D,EAAAt3D,KAAAq3D,EAAAxW,SAEA,OAAAyW,GASAxc,EAAAyf,UAAAv9D,UAAAkhE,UAAA,SAAA5G,GAGA,IAAA78D,EAAA48D,EACA,IAFAr2D,KAAAw5D,QAEA//D,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IACA48D,EAAAC,EAAA78D,GACAuG,KAAAo2D,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,IAUA2X,EAAAyf,UAAAv9D,UAAAmhE,eAAA,WAEA,GAAA,OAAAn9D,KAAAmI,MAAAi1D,YACA,OAAAp9D,KAAAmI,MAAAi1D,YAGA,IAKA3jE,EAAA+lD,EALArhD,EAAA,IAAA27C,EAAA2X,MACA,IAAA3X,EAAAwF,QAAAxF,EAAAoE,IAAApE,EAAAoE,KACA,IAAApE,EAAAwF,SAAAxF,EAAAoE,KAAApE,EAAAoE,MAIA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA+lD,EAAAx/C,KAAAs2D,SAAA78D,GACA0E,EAAA2vD,IAAA5rB,EAAA4X,EAAAiF,QAAA5gD,EAAA2vD,IAAA5rB,EAAAsd,EAAAtd,GACA/jC,EAAA2vD,IAAA3rB,EAAA2X,EAAAiF,QAAA5gD,EAAA2vD,IAAA3rB,EAAAqd,EAAArd,GACAhkC,EAAAmtB,IAAA4W,EAAA4X,EAAAkF,QAAA7gD,EAAAmtB,IAAA4W,EAAAsd,EAAAtd,GACA/jC,EAAAmtB,IAAA6W,EAAA2X,EAAAkF,QAAA7gD,EAAAmtB,IAAA6W,EAAAqd,EAAArd,GAIA,OADAniC,KAAAmI,MAAAi1D,YAAAj/D,EACAA,GAOA27C,EAAAyf,UAAAv9D,UAAAw9D,MAAA,WAEAx5D,KAAAs2D,YACAt2D,KAAA05D,cAOA5f,EAAAyf,UAAAv9D,UAAA09D,WAAA,WAEA15D,KAAAmI,OACAqyD,WAAA,KACAlV,YAAA,KACA0V,sBACAJ,WAAA,KACAwC,YAAA,OAUAtjB,EAAAyf,UAAAv9D,UAAA6jD,MAAA,WAEA,IACApmD,EAAA48D,EADAl4D,EAAA,IAAA27C,EAAAyf,UAEA,IAAA9/D,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA48D,EAAAr2D,KAAAs2D,SAAA78D,GACA0E,EAAAs7D,eAAApD,EAAAxW,SAEA,OAAA1hD,GAOA27C,EAAAujB,iBAAA,WAEAr9D,KAAAs9D,SAAA,KACAt9D,KAAAw5D,SAUA1f,EAAAujB,iBAAArhE,UAAAo6D,UAAA,SAAAl0B,EAAAC,GAEAniC,KAAAu9D,YAAAnH,UAAAl0B,EAAAC,IASA2X,EAAAujB,iBAAArhE,UAAAy9D,eAAA,SAAAja,GAEAx/C,KAAAu9D,YAAA9D,eAAAja,IAWA1F,EAAAujB,iBAAArhE,UAAAwhE,iBAAA,SAAAC,EAAAv7B,EAAAC,GAEA,OAAAniC,KAAAs9D,SAAAG,GAAArH,UAAAl0B,EAAAC,IAUA2X,EAAAujB,iBAAArhE,UAAA0hE,sBAAA,SAAAD,EAAAje,GAEA,OAAAx/C,KAAAs9D,SAAAG,GAAAhE,eAAAja,IASA1F,EAAAujB,iBAAArhE,UAAA69D,YAAA,WAEA,IACApgE,EADAwiE,EAAA,EAEA,IAAAxiE,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IACAwiE,GAAAj8D,KAAAs9D,SAAA7jE,GAAAogE,cAEA,OAAAoC,GAOAniB,EAAAujB,iBAAArhE,UAAAk+D,gBAAA,WAEA,IAAAzgE,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IACAuG,KAAAs9D,SAAA7jE,GAAAygE,mBAYApgB,EAAAujB,iBAAArhE,UAAA2hE,mBAAA,SAAAF,GAEA,OAAAz9D,KAAAs9D,SAAAG,GAAA5D,eAWA/f,EAAAujB,iBAAArhE,UAAA4hE,WAAA,SAAAC,GAGA79D,KAAAu9D,iBADAzgE,IAAA+gE,GAAA,OAAAA,EACA,IAAA/jB,EAAAyf,UAEAsE,EAEA79D,KAAAs9D,SAAAt+D,KAAAgB,KAAAu9D,cASAzjB,EAAAujB,iBAAArhE,UAAA8hE,eAAA,WAEA,OAAA99D,KAAAu9D,aAYAzjB,EAAAujB,iBAAArhE,UAAA+hE,iBAAA,SAAAN,EAAAO,GAEA,OAAAh+D,KAAAs9D,SAAAG,GAAA9D,UAAAqE,IAWAlkB,EAAAujB,iBAAArhE,UAAAiiE,WAAA,SAAAn9D,GAEA,OAAAd,KAAAs9D,SAAAx8D,IASAg5C,EAAAujB,iBAAArhE,UAAAkiE,aAAA,WAEA,OAAAl+D,KAAAs9D,SAAA/jE,QASAugD,EAAAujB,iBAAArhE,UAAAu+D,cAAA,WAEA,IACA9gE,EADAytD,EAAA,EAEA,IAAAztD,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IACAytD,GAAAlnD,KAAAs9D,SAAA7jE,GAAA8gE,gBAEA,OAAArT,GASApN,EAAAujB,iBAAArhE,UAAAy+D,QAAA,WAEA,IAAAD,EAAAx6D,KAAAu6D,gBACA,OAAAlxD,KAAAu5B,IAAA43B,IASA1gB,EAAAujB,iBAAArhE,UAAA0+D,eAAA,WAEA,GAAA,OAAA16D,KAAAu9D,YACA,OAAAzjB,EAAAkK,YAAAC,QAEA,IAOAxqD,EAAA0kE,EAPA7Y,EAAAtlD,KAAAs9D,SAAA,GAAA5C,iBACA,GAAA,GAAA16D,KAAAs9D,SAAA/jE,OACA,OAAA+rD,EAEA,GAAAA,GAAAxL,EAAAkK,YAAAC,QACA,OAAAnK,EAAAkK,YAAAC,QAGA,IAAAxqD,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IAAA,CAEA,IADA0kE,EAAAn+D,KAAAs9D,SAAA7jE,GAAAihE,mBACA5gB,EAAAkK,YAAAC,QACA,OAAAnK,EAAAkK,YAAAC,QAEA,GAAAqB,GAAA6Y,EACA,OAAArkB,EAAAkK,YAAAC,QAGA,OAAAqB,GASAxL,EAAAujB,iBAAArhE,UAAA2+D,cAAA,WAEA,GAAA,OAAA36D,KAAAu9D,YACA,OAAAzjB,EAAA2e,WAAAxU,QAEA,GAAA,GAAAjkD,KAAAs9D,SAAA/jE,OACA,OAAAyG,KAAAs9D,SAAA,GAAA3C,gBAEA,IAAAlhE,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IAEA,GADAuG,KAAAs9D,SAAA7jE,GAAAkhE,iBACA7gB,EAAA2e,WAAAxU,QACA,OAAAnK,EAAA2e,WAAAxU,QAGA,OAAAnK,EAAA2e,WAAAG,SAWA9e,EAAAujB,iBAAArhE,UAAAihE,QAAA,WAEA,IACAxjE,EAAA2J,EAAAy6D,EAAAxH,EADAC,KAEA,IAAA78D,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IAAA,CAEA,IADAokE,EAAA79D,KAAAs9D,SAAA7jE,GACA2J,EAAA,EAAAA,EAAAy6D,EAAAhE,cAAAz2D,IACAizD,EAAAwH,EAAAlE,UAAAv2D,GACAkzD,EAAAt3D,KAAAq3D,EAAAxW,SAEApmD,EAAAuG,KAAAs9D,SAAA/jE,OAAA,GACA+8D,EAAAt3D,KAAA,MAGA,OAAAs3D,GAWAxc,EAAAujB,iBAAArhE,UAAAkhE,UAAA,SAAA5G,GAIA,IAAA78D,EAAA48D,EACA,IAHAr2D,KAAAw5D,QACAx5D,KAAA49D,aAEAnkE,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IAEA,QADA48D,EAAAC,EAAA78D,IAEAuG,KAAA49D,aAEA59D,KAAAo2D,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,IASA2X,EAAAujB,iBAAArhE,UAAAw9D,MAAA,WAEAx5D,KAAAs9D,YACAt9D,KAAAu9D,YAAA,MASAzjB,EAAAujB,iBAAArhE,UAAA6jD,MAAA,WAEA,IACApmD,EAAAokE,EADA1/D,EAAA,IAAA27C,EAAAujB,iBAEA,IAAA5jE,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IACAokE,EAAA79D,KAAAs9D,SAAA7jE,GACA0E,EAAAy/D,WAAAC,EAAAhe,SAEA,OAAA1hD,GAGA27C,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GA0gBA,OArgBAA,EAAAskB,QAAA,WAEAp+D,KAAAs2D,SAAA,KACAt2D,KAAAmI,MAAA,KACAnI,KAAAw5D,SAWA1f,EAAAskB,QAAApiE,UAAAo6D,UAAA,SAAAl0B,EAAAC,EAAAqf,GAEAxhD,KAAAy5D,eAAA,IAAA3f,EAAAyH,MAAArf,EAAAC,EAAAqf,KASA1H,EAAAskB,QAAApiE,UAAAy9D,eAAA,SAAAja,GAEAx/C,KAAAs2D,SAAAt3D,KAAAwgD,GACAx/C,KAAA05D,cAWA5f,EAAAskB,QAAApiE,UAAA29D,UAAA,SAAA74D,GAEA,OAAAd,KAAAs2D,SAAAx1D,IASAg5C,EAAAskB,QAAApiE,UAAA69D,YAAA,WAEA,OAAA75D,KAAAs2D,SAAA/8D,QAWAugD,EAAAskB,QAAApiE,UAAA+9D,cAAA,SAAAj5D,GAEA,OAAAg5C,EAAAa,UAAA75C,EAAAd,KAAAs2D,SAAA/8D,SAOAugD,EAAAskB,QAAApiE,UAAAk+D,gBAAA,WAEAl6D,KAAAs2D,SAAAx/C,UACA9W,KAAA05D,cAWA5f,EAAAskB,QAAApiE,UAAAg+D,cAAA,SAAAl5D,GAEA,OAAAg5C,EAAAY,UAAA55C,EAAAd,KAAAs2D,SAAA/8D,SAWAugD,EAAAskB,QAAApiE,UAAAm+D,eAAA,SAAAr5D,GAEA,IAAA2X,EAAAzY,KAAAs2D,SAAAt2D,KAAAg6D,cAAAl5D,IACAs5D,EAAAp6D,KAAAs2D,SAAAx1D,GACAuJ,EAAArK,KAAAs2D,SAAAt2D,KAAA+5D,cAAAj5D,IACAu5D,EAAAvgB,EAAA0I,SAAA/pC,EAAA2hD,GACAE,EAAAxgB,EAAA0I,SAAAn4C,EAAA+vD,GACA,OAAAC,EAAA1a,QAAA2a,IASAxgB,EAAAskB,QAAApiE,UAAA83D,UAAA,WAEA,GAAA,OAAA9zD,KAAAmI,MAAAqgC,OACA,OAAAxoC,KAAAmI,MAAAqgC,OAEA,IAAArqC,EAAA27C,EAAAoM,gBAAAlmD,KAAAs2D,UAEA,OADAt2D,KAAAmI,MAAAqgC,OAAArqC,EACAA,GASA27C,EAAAskB,QAAApiE,UAAAqiE,YAAA,WAEA,IAEA5kE,EAAA48D,EAFA7tB,EAAAxoC,KAAA8zD,YACA31D,EAAA,IAAA27C,EAAAyf,UAEA,IAAA9/D,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA48D,EAAAr2D,KAAAs2D,SAAA78D,GAAAuoD,UAAAxZ,GACArqC,EAAAi4D,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,GAEA,OAAAhkC,GASA27C,EAAAskB,QAAApiE,UAAAihE,QAAA,WAEA,IACAxjE,EAAA48D,EADAC,KAEA,IAAA78D,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA48D,EAAAr2D,KAAAs2D,SAAA78D,GACA68D,EAAAt3D,KAAAq3D,EAAAxW,SAEA,OAAAyW,GASAxc,EAAAskB,QAAApiE,UAAAkhE,UAAA,SAAA5G,GAGA,IAAA78D,EAAA48D,EACA,IAFAr2D,KAAAw5D,QAEA//D,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IACA48D,EAAAC,EAAA78D,GACAuG,KAAAo2D,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,IAQA1H,EAAAskB,QAAApiE,UAAAw9D,MAAA,WAEAx5D,KAAAs2D,YACAt2D,KAAA05D,cAOA5f,EAAAskB,QAAApiE,UAAA09D,WAAA,WAEA15D,KAAAmI,OACAqgC,OAAA,OAUAsR,EAAAskB,QAAApiE,UAAA6jD,MAAA,WAEA,IACApmD,EAAA48D,EADAl4D,EAAA,IAAA27C,EAAAskB,QAEA,IAAA3kE,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA48D,EAAAr2D,KAAAs2D,SAAA78D,GACA0E,EAAAs7D,eAAApD,EAAAxW,SAEA,OAAA1hD,GAOA27C,EAAAwkB,eAAA,WAEAt+D,KAAAs9D,SAAA,KACAt9D,KAAAw5D,SAWA1f,EAAAwkB,eAAAtiE,UAAAo6D,UAAA,SAAAl0B,EAAAC,EAAAqf,GAEAxhD,KAAAu9D,YAAAnH,UAAAl0B,EAAAC,EAAAqf,IASA1H,EAAAwkB,eAAAtiE,UAAAy9D,eAAA,SAAAja,GAEAx/C,KAAAu9D,YAAA9D,eAAAja,IAYA1F,EAAAwkB,eAAAtiE,UAAAwhE,iBAAA,SAAAC,EAAAv7B,EAAAC,EAAAqf,GAEA,OAAAxhD,KAAAs9D,SAAAG,GAAArH,UAAAl0B,EAAAC,EAAAqf,IAUA1H,EAAAwkB,eAAAtiE,UAAA0hE,sBAAA,SAAAD,EAAAje,GAEA,OAAAx/C,KAAAs9D,SAAAG,GAAAhE,eAAAja,IASA1F,EAAAwkB,eAAAtiE,UAAA69D,YAAA,WAEA,IACApgE,EADAwiE,EAAA,EAEA,IAAAxiE,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IACAwiE,GAAAj8D,KAAAs9D,SAAA7jE,GAAAogE,cAEA,OAAAoC,GAWAniB,EAAAwkB,eAAAtiE,UAAA2hE,mBAAA,SAAAF,GAEA,OAAAz9D,KAAAs9D,SAAAG,GAAA5D,eAWA/f,EAAAwkB,eAAAtiE,UAAA4hE,WAAA,SAAAC,GAGA79D,KAAAu9D,iBADAzgE,IAAA+gE,GAAA,OAAAA,EACA,IAAA/jB,EAAAskB,QAEAP,EAEA79D,KAAAs9D,SAAAt+D,KAAAgB,KAAAu9D,cASAzjB,EAAAwkB,eAAAtiE,UAAA8hE,eAAA,WAEA,OAAA99D,KAAAu9D,aAYAzjB,EAAAwkB,eAAAtiE,UAAA+hE,iBAAA,SAAAN,EAAAO,GAEA,OAAAh+D,KAAAs9D,SAAAG,GAAA9D,UAAAqE,IAWAlkB,EAAAwkB,eAAAtiE,UAAAiiE,WAAA,SAAAR,GAEA,OAAAz9D,KAAAs9D,SAAAG,IASA3jB,EAAAwkB,eAAAtiE,UAAAkiE,aAAA,WAEA,OAAAl+D,KAAAs9D,SAAA/jE,QASAugD,EAAAwkB,eAAAtiE,UAAAuiE,mBAAA,WAEA,IAEA9kE,EAAA2J,EAAAy6D,EAAAxH,EAFA7tB,EAAAxoC,KAAAs9D,SAAA,GAAAxJ,YACA31D,EAAA,IAAA27C,EAAAujB,iBAEA,IAAA5jE,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IAGA,IAFA0E,EAAAy/D,aACAC,EAAA79D,KAAAs9D,SAAA7jE,GACA2J,EAAA,EAAAA,EAAAy6D,EAAAhE,cAAAz2D,IACAizD,EAAAwH,EAAAlE,UAAAv2D,GACAjF,EAAAs7D,eAAApD,EAAArU,UAAAxZ,IAGA,OAAArqC,GAWA27C,EAAAwkB,eAAAtiE,UAAAihE,QAAA,WAEA,IACAxjE,EAAA2J,EAAAy6D,EAAAxH,EADAC,KAEA,IAAA78D,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IAAA,CAEA,IADAokE,EAAA79D,KAAAs9D,SAAA7jE,GACA2J,EAAA,EAAAA,EAAAy6D,EAAAhE,cAAAz2D,IACAizD,EAAAwH,EAAAlE,UAAAv2D,GACAkzD,EAAAt3D,KAAAq3D,EAAAxW,SAEApmD,EAAAuG,KAAAs9D,SAAA/jE,OAAA,GACA+8D,EAAAt3D,KAAA,MAGA,OAAAs3D,GAWAxc,EAAAwkB,eAAAtiE,UAAAkhE,UAAA,SAAA5G,GAIA,IAAA78D,EAAA48D,EACA,IAHAr2D,KAAAw5D,QACAx5D,KAAA49D,aAEAnkE,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IAEA,QADA48D,EAAAC,EAAA78D,IAEAuG,KAAA49D,aAEA59D,KAAAo2D,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,IASA1H,EAAAwkB,eAAAtiE,UAAAw9D,MAAA,WAEAx5D,KAAAs9D,YACAt9D,KAAAu9D,YAAA,MASAzjB,EAAAwkB,eAAAtiE,UAAA6jD,MAAA,WAEA,IACApmD,EAAAokE,EADA1/D,EAAA,IAAA27C,EAAAwkB,eAEA,IAAA7kE,EAAA,EAAAA,EAAAuG,KAAAs9D,SAAA/jE,OAAAE,IACAokE,EAAA79D,KAAAs9D,SAAA7jE,GACA0E,EAAAy/D,WAAAC,EAAAhe,SAEA,OAAA1hD,GAaA27C,EAAA0kB,qBAAA,SAAA3B,EAAAn9B,GAEA,IAGAjnB,EAAA2hD,EAAA/vD,EACAo0D,EAAAC,EAAAC,EACAtE,EAAAC,EACA7Z,EAAAme,EAIAnlE,EAAAknD,EAVA/3C,EAAAi0D,EAAAhD,cACArxB,EAAAq0B,EAAA/I,YAOA31D,EAAA,IAAA27C,EAAAskB,QAGA,IAAA3kE,EAAA,EAAAA,EAAAmP,EAAAnP,IACAgf,EAAAokD,EAAA7C,cAAAvgE,GACA2gE,EAAA3gE,EACA4Q,EAAAwyD,EAAA9C,cAAAtgE,GAEAglE,EAAA5B,EAAAlD,UAAAlhD,GACAimD,EAAA7B,EAAAlD,UAAAS,GACAuE,EAAA9B,EAAAlD,UAAAtvD,GAEAgwD,EAAAvgB,EAAA0I,SAAAic,EAAAC,GACApE,EAAAxgB,EAAA0I,SAAAmc,EAAAD,GACA/d,EAAA0Z,EAAA1a,QAAA2a,GAAA,EACAxgB,EAAAoL,iBAAAuZ,EAAAC,EAAAC,EAAAn2B,IAAAsR,EAAAkK,YAAAG,YACAxD,EAAAt3C,KAAA61C,GAAAyB,GAGAF,EAAA/gB,EAAAr2B,KAAA23C,IAAAL,IACAie,EAAAF,EAAA7e,SACAU,OAAA+Z,EAAA7Z,GACAme,EAAAle,OAAAlY,EAAAmY,EAAA+d,GACAvgE,EAAAi4D,UAAAwI,EAAA18B,EAAA08B,EAAAz8B,EAAAy8B,EAAApd,GAGA,OAAArjD,GAGA27C,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GAojBA,OAnjBAA,EAAA+kB,eACAC,KAAA,EACAC,MAAA,EACAC,IAAA,GAGAllB,EAAAmlB,cAAA,SAAAC,GAEAl/D,KAAAk/D,kBAAAA,EACAl/D,KAAAm/D,SAGArlB,EAAAmlB,cAAAjjE,UAAAgjE,IAAA,SAAAnC,EAAAuC,EAAAC,EAAAC,GAEAt/D,KAAAm/D,QAEA,IAAAI,EAAAv/D,KAAAw/D,6BAAA3C,GACA,GAAA,OAAA0C,EAAA,CACA,IAAAE,EAAA5C,EAAAhd,QAQA,OAPA0f,GAAAzlB,EAAA+kB,cAAAC,KACAM,EAAApgE,KAAAygE,GACAF,GAAAzlB,EAAA+kB,cAAAE,MACAM,EAAArgE,KAAAygE,GAEAH,EAAAtgE,KAAAygE,IAEA,EAGA,QAAAz/D,KAAA0/D,8BAIA1/D,KAAA2/D,4BAIA3/D,KAAA4/D,wBAAAR,EAAAC,KAOAvlB,EAAAmlB,cAAAjjE,UAAAmjE,MAAA,WAEAn/D,KAAA6/D,gBAAA,KACA7/D,KAAA8/D,2BAAA,KACA9/D,KAAA+/D,WAAA,KACA//D,KAAAggE,sBAAA,KACAhgE,KAAAigE,0BAAA,KACAjgE,KAAAkgE,iBAAA,KACAlgE,KAAAmgE,cAAA,KACAngE,KAAAogE,iBAAA,MAGAtmB,EAAAmlB,cAAAjjE,UAAAwjE,6BAAA,SAAA3C,GAEA78D,KAAA6/D,gBAAAhD,EACA78D,KAAA8/D,8BACA,IAGArmE,EAAA48D,EAAAn8D,EAHAmmE,GAAA,EACAC,GAAA,EAGA,IAAA7mE,EAAA,EAAAA,EAAAuG,KAAA6/D,gBAAAhG,cAAApgE,IACA48D,EAAAwG,EAAAlD,UAAAlgE,IACAS,EAAA8F,KAAAk/D,kBAAAqB,cAAAlK,KACAvc,EAAA+kB,cAAAC,KACAuB,GAAA,EACAnmE,GAAA4/C,EAAA+kB,cAAAE,QACAuB,GAAA,GAEAtgE,KAAA8/D,2BAAA9gE,KAAA9E,GAGA,OAAAmmE,GAAAC,EACA,KAGAD,EACAvmB,EAAA+kB,cAAAC,KACAwB,EACAxmB,EAAA+kB,cAAAE,MAGAjlB,EAAA+kB,cAAAG,KAGAllB,EAAAmlB,cAAAjjE,UAAA0jE,wBAAA,WAEA,SAAAc,EAAAR,EAAAS,GAEA,GAAA,IAAAT,EAAAzmE,OACA,OAAA,EAEA,IAAAmnE,EAAAV,EAAAA,EAAAzmE,OAAA,GACA,OAAAmnE,GAAA5mB,EAAA+kB,cAAAG,KAAAyB,GAAA3mB,EAAA+kB,cAAAG,KAGA0B,GAAAD,EAGA,SAAAE,EAAAC,EAAAvK,EAAAn8D,GAEA0mE,EAAAb,WAAAtG,eAAApD,GACAuK,EAAAZ,sBAAAhhE,KAAA9E,GACAA,GAAA4/C,EAAA+kB,cAAAG,KACA4B,EAAAV,iBAAAlhE,KAAA4hE,EAAAZ,sBAAAzmE,OAAA,GAIA,SAAAsnE,EAAAD,EAAAE,GAEA,IAAAC,EAAAH,EAAAf,gBAAA7F,cAAA8G,GACArC,EAAAmC,EAAAf,gBAAAlG,UAAAoH,GACArC,EAAAkC,EAAAf,gBAAAlG,UAAAmH,GACAlT,EAAAgT,EAAA1B,kBAAA8B,sBAAAvC,EAAAC,GACA,OAAA,OAAA9Q,IAGA+S,EAAAC,EAAAhT,EAAA9T,EAAA+kB,cAAAG,MACA,GAGA,SAAAiC,EAAAL,EAAAE,EAAAL,GAEA,IAAApK,EAAAuK,EAAAf,gBAAAlG,UAAAmH,GAAAjhB,QACA8gB,EAAAC,EAAAvK,EAAAoK,GAEA,IAAAxE,EAAA2E,EAAAf,gBAAAhG,cACA6G,EAAAE,EAAAd,2BAAAhmB,EAAAY,UAAAomB,EAAA7E,IACAiF,EAAAN,EAAAd,2BAAAhmB,EAAAa,UAAAmmB,EAAA7E,IAKA,OAJAwE,GAAA3mB,EAAA+kB,cAAAG,KAAA0B,GAAAQ,GACAP,EAAAC,EAAAvK,EAAAoK,IAGA,EAuBAzgE,KAAA+/D,WAAA//D,KAAAk/D,kBAAAiC,gBACAnhE,KAAAggE,yBACAhgE,KAAAkgE,oBAEA,IACAzmE,EAAA2nE,EAAAN,EAAAL,EADAxE,EAAAj8D,KAAA6/D,gBAAAhG,cAEA,IAAApgE,EAAA,EAAAA,GAAAwiE,EAAAxiE,IAEAqnE,EAAArnE,GADA2nE,EAAA3nE,IAAAwiE,KAGA6E,EAAA,GAGAL,EAAAzgE,KAAA8/D,2BAAAgB,GACAN,EAAAxgE,KAAAggE,sBAAAS,IACAI,EAAA7gE,KAAA8gE,GAGAM,GACAH,EAAAjhE,KAAA8gE,EAAAL,GAKA,OADAzgE,KAAAigE,0BAAAjgE,KAAAk/D,kBAAAmC,mBAAArhE,KAAA+/D,cA3CA,SAAAA,EAAAG,EAAAD,GAEA,GAAAC,EAAA3mE,OAAA,EACA,OAAA,EAcA,OAXAugD,EAAAkC,WAAAkkB,EACA,SAAAhgE,EAAAC,GACA,IAAAmhE,EAAArB,EAAA//D,GACAqhE,EAAAtB,EAAA9/D,GACA,OAAA25C,EAAA0E,QAAA8iB,EAAAC,IAEA,SAAA9nE,EAAA2J,GACA02C,EAAAgC,gBAAAokB,EAAAzmE,EAAA2J,MAIA,EA2BAo+D,CAAAxhE,KAAA+/D,WAAA//D,KAAAkgE,iBAAAlgE,KAAAigE,4BAOAnmB,EAAAmlB,cAAAjjE,UAAA2jE,uBAAA,WAEA,SAAA8B,EAAAzB,EAAAC,EAAAyB,GAEA,IAAAC,EAAA3B,EAAA0B,GACA,GAAAC,GAAA7nB,EAAA+kB,cAAAG,IACA,OAAA,EAGA,IAAA+B,EAAAjnB,EAAAY,UAAAgnB,EAAA1B,EAAAzmE,QACA4sD,EAAArM,EAAAa,UAAA+mB,EAAA1B,EAAAzmE,QACAqoE,EAAA5B,EAAAe,GACAc,EAAA7B,EAAA7Z,GAEA2b,EAAA7B,EAAAyB,GACAK,EAAA9B,EAAAc,GACAiB,EAAA/B,EAAA9Z,GAEA,GAAAyb,GAAA9nB,EAAA+kB,cAAAE,MAAA,CACA,GAAA8C,GAAA/nB,EAAA+kB,cAAAC,KACA,OAAA,EACA,GAAA+C,GAAA/nB,EAAA+kB,cAAAG,KACAllB,EAAA+E,eAAAijB,EAAAE,GACA,OAAA,OAGA,GAAAJ,GAAA9nB,EAAA+kB,cAAAC,KAAA,CACA,GAAA+C,GAAA/nB,EAAA+kB,cAAAE,MACA,OAAA,EACA,GAAA8C,GAAA/nB,EAAA+kB,cAAAG,KACAllB,EAAAgF,iBAAAgjB,EAAAE,GACA,OAAA,OAGA,GAAAJ,GAAA9nB,EAAA+kB,cAAAG,IACA,GAAA6C,GAAA/nB,EAAA+kB,cAAAC,MACA,GAAAhlB,EAAA+E,eAAAijB,EAAAC,GACA,OAAA,OAEA,GAAAF,GAAA/nB,EAAA+kB,cAAAE,OACAjlB,EAAAgF,iBAAAgjB,EAAAC,GACA,OAAA,EAKA,OAAA,EAKA,IAAAtoE,EAAAukE,EAAAiE,EACA,IAHAjiE,KAAAmgE,iBACAngE,KAAAogE,oBAEA3mE,EAAA,EAAAA,EAAAuG,KAAAkgE,iBAAA3mE,OAAAE,IACAukE,EAAAh+D,KAAAkgE,iBAAAzmE,GAEA,KADAwoE,EAAAR,EAAAzhE,KAAAggE,sBAAAhgE,KAAAigE,0BAAAjC,MAEAh+D,KAAAmgE,cAAAnhE,KAAAg/D,GACAh+D,KAAAogE,iBAAAphE,KAAAijE,IAIA,OAAA,IAAAjiE,KAAAmgE,cAAA5mE,QAAAyG,KAAAmgE,cAAA5mE,OAAA,GAAA,GAOAugD,EAAAmlB,cAAAjjE,UAAA4jE,wBAAA,SAAAR,EAAAC,GAEA,SAAA6C,EAAAtB,EAAAxB,EAAAC,EAAA/7C,GAEA,SAAA6+C,EAAAC,EAAAjC,EAAA3+D,EAAA6gE,GAEAD,EAAAjC,EAAA3+D,IAAA2+D,EAAAkC,GACAD,EAAAjC,EAAAkC,IAAAlC,EAAA3+D,GA6CA,SAAAu4D,EAAAuI,EAAAvC,EAAAqC,GAEA,IAAA,GAAAA,EAAAE,GAAA,CACA,IAAA3D,EAAAyD,EAAAE,GAEA,OA/CA,SAAAF,EAAAthE,GAEAshE,EAAAA,EAAAthE,KAAA,EACAshE,EAAAthE,IAAA,EA2CAyhE,CAAAH,EAAAE,GACA3D,EAEA,OAAA7kB,EAAAa,UAAA2nB,EAAAvC,EAAAlG,eAIA,SAAA2I,EAAA5B,EAAAwB,EAAAK,EAAArD,EAAAC,GAEA,SAAAqD,EAAA7F,EAAAxG,GAEA,IAAA4F,EAAAY,EAAAhD,cACAoC,EAAA,GAAAY,EAAAlD,UAAAsC,EAAA,GAAAvd,QAAA2X,IAGAwG,EAAApD,eAAApD,GAGA,IAAAsM,EAAA/B,EAAAT,cAAAsC,GACA,IAAA,IAAAL,EAAAO,GAAA,CACA,IAAAC,EAAAhC,EAAA1B,kBAAAiC,gBACAyB,EAAAnJ,eAAAmH,EAAAb,WAAApG,UAAAgJ,GAAA9iB,SAGA,IAFA,IAAAyiB,EAAAvI,EAAA4I,EAAA/B,EAAAb,WAAAqC,GACAS,EAAA,KACAP,GAAAK,GACA,OAAAE,GACAjC,EAAAZ,sBAAAsC,KAAAxoB,EAAA+kB,cAAAG,MACA6D,EAAAjC,EAAAZ,sBAAAsC,IAGAI,EAAAE,EAAAhC,EAAAb,WAAApG,UAAA2I,GAAAziB,SACAyiB,EAAAvI,EAAAuI,EAAA1B,EAAAb,WAAAqC,GAEAQ,EAAA/I,cAAA,IACAgJ,GAAA/oB,EAAA+kB,cAAAC,KACAM,EAAApgE,KAAA4jE,GACAC,GAAA/oB,EAAA+kB,cAAAE,OACAM,EAAArgE,KAAA4jE,KAOA,IAAAR,EApFA,SAAArC,EAAAI,EAAAC,GAEA,SAAA0C,EAAAV,EAAAjC,EAAAC,EAAA2C,GAEA,IAAAtpE,EACA,IAAAA,EAAAspE,EAAA,EAAAtpE,EAAA0mE,EAAA5mE,OAAAE,IACA,IAAA,GAAA2oE,EAAAjC,EAAA1mE,KAGA2mE,EAAA2C,IAAA3C,EAAA3mE,GACA,OAAAA,EAGA,OAAA,EAGA,IACAA,EAKAupE,EANAZ,KAEA,IAAA3oE,EAAA,EAAAA,EAAAsmE,EAAAlG,cAAApgE,IACA2oE,EAAApjE,MAAA,GAIA,IAAAvF,EAAA,EAAAA,EAAA0mE,EAAA5mE,OAAAE,IACA,IAAA,GAAA2oE,EAAAjC,EAAA1mE,IAAA,CAIA,IAAA,IADAupE,EAAAF,EAAAV,EAAAjC,EAAAC,EAAA3mE,IAEA,OAAA,KAEA0oE,EAAAC,EAAAjC,EAAA1mE,EAAAupE,GAEA,OAAAZ,EAmDAa,CAAArC,EAAAb,WAAAa,EAAAT,cAAAS,EAAAR,kBACA,GAAA,OAAAgC,EACA,OAAA,EAGA,IADA,IAAAK,EAAAn/C,EAAAs9C,EAAAT,cAAA5mE,OAAA,EAAA,EACAkpE,GAAA,GAAAA,EAAA7B,EAAAT,cAAA5mE,QACAipE,EAAA5B,EAAAwB,EAAAK,EAAArD,EAAAC,GACAoD,EAAAn/C,EAAAm/C,EAAA,EAAAA,EAAA,EAEA,OAAA,EAGA,QAAAP,EAAAliE,KAAAo/D,EAAAC,GAAA,MAIA6C,EAAAliE,KAAAo/D,EAAAC,GAAA,IAqBAvlB,EAAAopB,qBAAA,SAAArG,EAAA1nD,EAAAguD,EAAAC,EAAA9D,GAEA,IAAAJ,GACAiC,cAAA,WACA,OAAA,IAAArnB,EAAAyf,WAEAgH,cAAA,SAAAlK,GACA,IAAAv0C,EAAA3M,EAAAk4C,cAAAgJ,GACAn8D,EAAA4/C,EAAA+kB,cAAAG,IAMA,OALAl9C,GAAAg4B,EAAA0V,oBAAAE,gBACAx1D,EAAA4/C,EAAA+kB,cAAAC,KACAh9C,GAAAg4B,EAAA0V,oBAAAG,mBACAz1D,EAAA4/C,EAAA+kB,cAAAE,OAEA7kE,GAEA8mE,sBAAA,SAAAvC,EAAAC,GACA,IAAA2E,EAAA,IAAAvpB,EAAAqW,OAAAuO,EAAA5kB,EAAAwH,WAAAod,EAAAD,IACA7Q,EAAA,IAAA9T,EAAAwF,QAAA,EAAA,GACAgkB,EAAAnuD,EAAAi7C,aAAAiT,EAAAzV,GACA,OAAA0V,GAAAxpB,EAAA8V,mBAAAE,wBACA,KAEAlC,GAEAyT,mBAAA,SAAAxE,GACA,IAIApjE,EAAA48D,EAJAzV,EAAA,IAAA9G,EAAAwF,QAAA,EAAA,GACAikB,EAAApuD,EAAAxM,MAAAk3C,QACA2jB,EAAAruD,EAAAqrC,UAAAX,QAAAa,QAAAr3C,KAAA61C,GAAA,EAAA0B,GACA6iB,EAAA,IAAA3pB,EAAAqW,OAAAoT,EAAAC,GAEAE,KACA,IAAAjqE,EAAA,EAAAA,EAAAojE,EAAAhD,cAAApgE,IACA48D,EAAAwG,EAAAlD,UAAAlgE,GACAiqE,EAAA1kE,KAAAykE,EAAAze,oBAAAqR,IAEA,OAAAqN,IAIAC,EAAA,IAAA7pB,EAAAmlB,cAAAC,GACA,OAAAyE,EAAA3E,IAAAnC,EAAAsG,EAAAC,EAAA9D,IAiBAxlB,EAAA8pB,oBAAA,SAAA/G,EAAAzI,EAAAyP,EAAAC,EAAAxE,GAEA,IAAAJ,GACAiC,cAAA,WACA,OAAA,IAAArnB,EAAAskB,SAEAmC,cAAA,SAAAlK,GACA,IAAAv0C,EAAAsyC,EAAA/G,cAAAgJ,GACAn8D,EAAA4/C,EAAA+kB,cAAAG,IAMA,OALAl9C,GAAAg4B,EAAAwZ,mBAAAE,oBACAt5D,EAAA4/C,EAAA+kB,cAAAC,KACAh9C,GAAAg4B,EAAAwZ,mBAAAG,qBACAv5D,EAAA4/C,EAAA+kB,cAAAE,OAEA7kE,GAEA8mE,sBAAA,SAAAvC,EAAAC,GACA,IAAAvpD,EAAA,IAAA2kC,EAAAuW,KAAAqO,EAAA5kB,EAAA0I,SAAAkc,EAAAD,IACA7Q,EAAA,IAAA9T,EAAAyH,MAAA,EAAA,EAAA,GACAwiB,EAAA3P,EAAAhE,aAAAj7C,EAAAy4C,GACA,OAAAmW,GAAAjqB,EAAA4Z,kBAAAE,oBACA,KAEAhG,GAEAyT,mBAAA,SAAAxE,GACA,IAKApjE,EAAA48D,EALA2N,EAAAnH,EAAA/I,YACAmQ,EAAA,IAAAnqB,EAAAoI,OAAAkS,EAAAl0D,EAAAk0D,EAAAj0D,EAAAi0D,EAAAr/C,GACAmvD,EAAApqB,EAAAqI,YAAA8hB,EAAAD,GACAG,EAAAtH,EAAAlD,UAAA,GACAyK,EAAAtqB,EAAAqa,8BAAAgQ,EAAAD,GAEAR,KACA,IAAAjqE,EAAA,EAAAA,EAAAojE,EAAAhD,cAAApgE,IACA48D,EAAAwG,EAAAlD,UAAAlgE,GACAiqE,EAAA1kE,KAAAolE,EAAApf,oBAAAqR,IAEA,OAAAqN,IAIAC,EAAA,IAAA7pB,EAAAmlB,cAAAC,GACA,OAAAyE,EAAA3E,IAAAnC,EAAAgH,EAAAC,EAAAxE,IAaAxlB,EAAAuqB,iBAAA,SAAAxH,EAAAyH,EAAAC,GAEA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,SAAAC,EAAAnI,EAAA1nD,EAAAguD,EAAAC,GAEA,IAAAnrC,KACAI,KAEA,GAAAyhB,EAAAopB,qBAAArG,EAAA1nD,EAAA8iB,EAAAI,MAAA,CAGA,IAAA5+B,EACA,IAAAA,EAAA,EAAAA,EAAAw+B,EAAA1+B,OAAAE,IACA0pE,EAAAnkE,KAAAi5B,EAAAx+B,IAEA,IAAAA,EAAA,EAAAA,EAAA4+B,EAAA9+B,OAAAE,IACA2pE,EAAApkE,KAAAq5B,EAAA5+B,KAIA,IAEAA,EAAA2J,EAAA+R,EAAA8vD,EAFAC,EAAAT,EACAU,EAAAN,EAAAhlB,QAEA,IAAApmD,EAAA,EAAAA,EAAAkrE,EAAAlrE,IAAA,CAIA,IAHA0rE,EAAA5kB,OAAAukB,EAAAF,GACAzvD,EAAA,IAAA2kC,EAAAqW,OAAAgV,EAAAJ,GACAE,KACA7hE,EAAA,EAAAA,EAAA8hE,EAAA3rE,OAAA6J,IACA4hE,EAAAE,EAAA9hE,GAAA+R,EAAAuvD,EAAAO,GAEAC,EAAAD,EAEA,IAAA7hE,EAAA,EAAAA,EAAA8hE,EAAA3rE,OAAA6J,IACAshE,EAAA1lE,KAAAkmE,EAAA9hE,IAIA,IAAAg6D,EAAAP,EAAAM,iBACAiI,EAAAhI,EAAA9xC,IAAA4W,EAAAk7B,EAAAtP,IAAA5rB,EACAmjC,EAAAjI,EAAA9xC,IAAA6W,EAAAi7B,EAAAtP,IAAA3rB,EACAmjC,EAAAF,EAAAd,EACAiB,EAAAF,EAAAd,EAEAiB,GAAA3I,GACA4I,EAAA,IAAA3rB,EAAAwF,QAAA8d,EAAAtP,IAAA5rB,EAAAk7B,EAAAtP,IAAA3rB,GACAujC,EAAA,IAAA5rB,EAAAwF,QAAA8d,EAAAtP,IAAA5rB,EAAAk7B,EAAA9xC,IAAA6W,GAEAwjC,KACAC,KAGA,OAFApB,EAAAgB,EAAAG,EAAArB,EAAAgB,EAAAG,EAAA,IAAA3rB,EAAAoH,SAAA,EAAA,GAAA,IAAApH,EAAAoH,SAAA,EAAA,IACAsjB,EAAAmB,EAAAC,EAAArB,EAAAgB,EAAAG,EAAA,IAAA5rB,EAAAoH,SAAA,GAAA,GAAA,IAAApH,EAAAoH,SAAA,EAAA,IACA0kB,GAGA9rB,IAGA5gD,OAAA,4CAAA,eAAA,SAAA4gD,GAqTA,OApTAA,EAAA+rB,iCAAA,SAAAC,EAAAC,GAEA,SAAAC,EAAAC,EAAA5P,EAAA0P,EAAAG,EAAAC,GAEAF,EAAAxM,eAAApD,QACAv5D,IAAAipE,GAAA,OAAAA,GACAA,EAAA/mE,MAAAknE,EAAAC,IAIA,SAAAvI,EAAAkI,EAAAG,EAAAG,EAAAL,EAAAM,GA2FA,IAAAC,EAzFA,SAAAR,EAAAG,EAAAG,EAAAC,GAEA,SAAAE,EAAAT,EAAAG,EAAAO,EAAAC,EAAAJ,GAEA,SAAAK,EAAA7J,EAAA8J,EAAAC,GAEA,IAAAjZ,EAAA,IAAA7T,EAAAoT,SAAAyZ,EAAAC,GACA9kD,EAAA+6C,EAAAnP,eAAAC,GAAA,GAAA,GACA,OAAA7rC,GAAAg4B,EAAAof,wBAAAC,sBAAAr3C,GAAAg4B,EAAAof,wBAAAE,uBAMA,GAAAsN,EAAAT,EAAAO,EAAAC,GACA,OAAA,EAGA,IAAAhtE,EACA,IAAAA,EAAA,EAAAA,EAAAqsE,EAAA5H,eAAAzkE,IACA,QAAAqD,IAAAupE,EAAAQ,WAAAptE,IAIAitE,EADAZ,EAAA7H,WAAAxkE,GACA+sE,EAAAC,GACA,OAAA,EAIA,OAAA,EAGA,SAAAK,EAAAtnB,EAAA6mB,GAEA,IAAA5sE,EACA,IAAAA,EAAA,EAAAA,EAAA4sE,EAAAU,eAAAxtE,OAAAE,IACA,GAAA+lD,EAAAd,QAAA2nB,EAAAU,eAAAttE,IACA,OAAA,EAGA,OAAA,EAGA,IACAutE,EAAAC,EAAAT,EAAAC,EADAS,EAAApB,EAAA7H,WAAAmI,GAEA,IAAAY,EAAA,EAAAA,EAAAf,EAAApM,cAAAmN,IACA,IAAAC,EAAA,EAAAA,EAAAC,EAAArN,cAAAoN,IAGA,GAFAT,EAAAP,EAAAtM,UAAAqN,GACAP,EAAAS,EAAAvN,UAAAsN,GACAV,EAAAT,EAAAG,EAAAO,EAAAC,EAAAJ,GAAA,CACA,GAAAS,EAAAN,EAAAH,IAAAS,EAAAL,EAAAJ,GACA,SAIA,OAFAA,EAAAU,eAAA/nE,KAAAwnE,EAAA3mB,SACAwmB,EAAAU,eAAA/nE,KAAAynE,EAAA5mB,UAEAsN,IAAA6Z,EACArqD,IAAAsqD,GAKA,OAAA,KA2BAE,CAAArB,EAAAG,EAAAG,EAAAC,GACA,OAAA,OAAAC,IAzBA,SAAAL,EAAAH,EAAAM,EAAAE,EAAAP,GAEA,IAAAmB,EAAApB,EAAA7H,WAAAmI,GACAgB,EAAAd,EAAAnZ,IACAka,EAAApB,EAAAtM,UAAAyN,GAAAvnB,QACAomB,EAAAhM,cAAAmN,EAAA,GAEA,IAAAE,EAAA,EACAC,EAAA,OACAzqE,IAAAipE,GAAA,OAAAA,IACAuB,EAAAvB,EAAAqB,GAAA,GACAG,EAAAxB,EAAAqB,GAAA,GACAttB,EAAAuC,WAAA0pB,EAAAqB,EAAA,IAGA,IAAAI,EAAAlB,EAAA3pD,IACA8qD,EAAAP,EAAAlN,cAAAwN,GACAN,EAAApN,kBAAA0N,EAAAC,EAAA,SAAA3mE,GACAklE,EAAAC,EAAAiB,EAAAvN,UAAA74D,GAAA++C,QAAAkmB,EAAAK,EAAAtlE,KAEAklE,EAAAC,EAAAiB,EAAAvN,UAAA6N,GAAA3nB,QAAAkmB,EAAAK,EAAAoB,GACAxB,EAAAC,EAAAoB,EAAAtB,EAAAuB,EAAAC,GAQAG,CAAAzB,EAAAH,EAAAM,EAAAE,EAAAP,IACA,GAGA,IAGAtsE,EAAA48D,EAHAsR,EAAA7B,EAAA5H,eACA0J,EAAA9B,EAAA7H,WAAA,GACAgI,EAAA,IAAAnsB,EAAAyf,UAEA,IAAA9/D,EAAA,EAAAA,EAAAmuE,EAAA/N,cAAApgE,IACA48D,EAAAuR,EAAAjO,UAAAlgE,GACAusE,EAAAC,EAAA5P,EAAAxW,QAAAkmB,EAAA,EAAAtsE,GAEA,GAAA,GAAAkuE,EACA,OAAA1B,EAGA,IACAG,EADAyB,KAEA,IAAAzB,EAAA,EAAAA,EAAAuB,EAAAvB,IACAyB,EAAA7oE,KAAAonE,GASA,IANA,IAAAC,GACAQ,cACAiB,eACAf,mBAGAc,EAAAtuE,OAAA,GAEA,GADA6sE,EAAAyB,EAAAloE,QACAi+D,EAAAkI,EAAAG,EAAAG,EAAAL,EAAAM,GACAA,EAAAQ,WAAAT,IAAA,MACA,CAKA,QAJAtpE,IAAAupE,EAAAyB,YAAA1B,KACAC,EAAAyB,YAAA1B,GAAA,GAEAC,EAAAyB,YAAA1B,IAAA,EACAC,EAAAyB,YAAA1B,GAAA,GACA,OAAA,KAEAyB,EAAA7oE,KAAAonE,GAIA,OAAAH,GAGAnsB,EAAAiuB,yBAAA,SAAAlL,GAEA,IACApjE,EADA0E,KAEA,IAAA1E,EAAA,EAAAA,EAAAojE,EAAAhD,cAAA,EAAApgE,IACA0E,EAAAa,MAAA,EAAAvF,EAAAA,EAAA,IAEA,OAAA0E,GAGA27C,EAAAkuB,4BAAA,SAAAlC,GAYA,SAAAmC,EAAApL,GAEA,IACApjE,EAAA2J,EADAwF,EAAAi0D,EAAAhD,cAEA,IAAApgE,EAAA,EAAAA,EAAAmP,EAAAnP,IACA,IAAA2J,EAAA,EAAAA,EAAAwF,EAAAxF,IACA,GAAA3J,GAAA2J,GAGAy5D,EAAAH,WAAAjjE,EAAA2J,GACA,OACA+pD,IAAA1zD,EACAkjB,IAAAvZ,GAKA,OAAA,KAGA,SAAA8kE,EAAAC,EAAAC,GAEA,SAAAhS,EAAA+R,EAAAE,EAAAvnE,GAEAunE,EAAAxL,QAAApD,eAAA0O,EAAAtL,QAAAlD,UAAA74D,IACAunE,EAAAjkE,IAAApF,KAAAmpE,EAAA/jE,IAAAtD,IAGA,IASAqsD,EAAAxwC,EATA2rD,GACAzL,QAAA,IAAA/iB,EAAAyf,UACAn1D,QAEAmkE,GACA1L,QAAA,IAAA/iB,EAAAyf,UACAn1D,QAmBA,OAdA+oD,EAAAib,EAAAjb,IACAxwC,EAAAwrD,EAAAtL,QAAA7C,cAAAoO,EAAAzrD,KACAy5C,EAAA+R,EAAAG,EAAAF,EAAAzrD,KACAwrD,EAAAtL,QAAA/C,kBAAA3M,EAAAxwC,EAAA,SAAA7b,GACAs1D,EAAA+R,EAAAG,EAAAxnE,KAGAqsD,EAAAib,EAAAzrD,IACAA,EAAAwrD,EAAAtL,QAAA7C,cAAAoO,EAAAjb,KACAiJ,EAAA+R,EAAAI,EAAAH,EAAAjb,KACAgb,EAAAtL,QAAA/C,kBAAA3M,EAAAxwC,EAAA,SAAA7b,GACAs1D,EAAA+R,EAAAI,EAAAznE,MAIAwnE,YAAAA,EACAC,YAAAA,GAIA,IAAAC,KACA5/D,EAAAk9D,EAAAjM,cACA4O,EAvEA,SAAA7/D,GAEA,IACAnP,EADA0E,KAEA,IAAA1E,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAA1E,GAAAA,EAEA,OAAA0E,EAgEAuqE,CAAA9/D,GACA4/D,EAAAxpE,MACA69D,QAAAiJ,EACA1hE,IAAAqkE,IAKA,IAFA,IACAN,EAAAlM,EAAAmM,EAAAC,EADAlqE,KAEAqqE,EAAAjvE,OAAA,GAGA,GAFA4uE,EAAAK,EAAA5oE,SACAq8D,EAAAkM,EAAAtL,QAAAhD,eACA,GAGA,GAAA,GAAAoC,EAAA,CAKA,GAAA,QADAmM,EAAAH,EAAAE,EAAAtL,UAEA,OAAA,KAEAwL,EAAAH,EAAAC,EAAAC,GACAI,EAAAxpE,KAAAqpE,EAAAC,aACAE,EAAAxpE,KAAAqpE,EAAAE,kBATApqE,EAAAa,KAAAmpE,EAAA/jE,KAWA,OAAAjG,GAGA27C,EAAA6uB,qBAAA,SAAA9L,GAEA,GAAA,OAAAA,EACA,OAAA,KAGA,IAAAZ,EAAAY,EAAAhD,cACA,GAAAoC,EAAA,EACA,OAAA,KAGA,GAAA,GAAAA,EACA,QAAA,EAAA,EAAA,IAGA,IAAArB,EAAAiC,EAAAlC,gBACA,OAAAC,IAAA9gB,EAAA2e,WAAAxU,QACA,KAGA2W,GAAA9gB,EAAA2e,WAAAC,OACA5e,EAAAiuB,yBAAAlL,GAGA/iB,EAAAkuB,4BAAAnL,IAaA/iB,EAAA8uB,mBAAA,SAAA/L,GAEA,IAAAgM,EAAAhM,EAAAwB,cACA,OAAAvkB,EAAA6uB,qBAAAE,IAGA/uB,IAGA5gD,OAAA,qCAAA,eAAA,SAAA4gD,GA8WA,OApWAA,EAAAgvB,oBAAA,SAAAC,EAAAC,IAEA,SAAAC,EAAA91D,EAAA61D,GAEA,IAAAA,EAAA71D,GACA,OAGA,GAAA,OAAAA,EAAAsP,SACA,OAGA,IAAAhpB,EAAA0mB,EACA,IAAA1mB,EAAA,EAAAA,EAAA0Z,EAAAsP,SAAAlpB,OAAAE,IACA0mB,EAAAhN,EAAAsP,SAAAhpB,GACAwvE,EAAA9oD,EAAA6oD,GAIAC,CAAAF,EAAAnhD,KAAAohD,IAcAlvB,EAAAovB,uBAAA,SAAAC,EAAAC,GAEA,SAAAC,EAAAF,EAAAC,EAAAE,EAAAC,EAAAC,GAEA,IAAAv7C,EAAAk7C,EAAAvX,UAAA/R,QACA5xB,EAAAkyB,eAAA,IACA,IAAA2N,EAAA,IAAAhU,EAAAyH,MACA4nB,EAAArb,IAAA5rB,EAAAonC,EAAAr7C,EAAAiU,EACAinC,EAAArb,IAAA3rB,EAAAonC,EAAAt7C,EAAAkU,EACAgnC,EAAArb,IAAAtM,EAAAgoB,EAAAv7C,EAAAuzB,GAEAl2B,EAAAwuB,EAAAyI,SAAAuL,EAAA7/B,GACAw7C,EAAA,IAAA3vB,EAAA6X,IAAA7D,EAAAxiC,GACA,OAAA89C,EAAAK,GAGA,IAAAx7C,EAAAk7C,EAAAvX,UACA,GAAA9X,EAAAuE,OAAApwB,EAAAiU,IAAA4X,EAAAuE,OAAApwB,EAAAkU,IAAA2X,EAAAuE,OAAApwB,EAAAuzB,GACA,OAAA,KAGA,IAAArjD,GACAkrE,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,GACAC,EAAAF,EAAAC,EAAA,EAAA,EAAA,IAEA,OAAAjrE,GAUA27C,EAAA4vB,OAAA,SAAAD,EAAAE,GAEA3pE,KAAAg/B,UACAh/B,KAAA4nB,KAAA5nB,KAAA4pE,cAAA,KAAAH,GACAzpE,KAAA2pE,mBAAAA,OACA7sE,IAAAkD,KAAA2pE,oBAAA,OAAA3pE,KAAA2pE,oBAAA,IAAA3pE,KAAA2pE,qBACA3pE,KAAA2pE,mBAAA,KAcA7vB,EAAA4vB,OAAA1tE,UAAA6tE,SAAA,SAAArqB,GAEA,OAAAx/C,KAAA8pE,eAAAtqB,EAAAx/C,KAAA4nB,OAaAkyB,EAAA4vB,OAAA1tE,UAAA+tE,UAAA,SAAAvqB,GAEA,IAAArsC,EAAAnT,KAAAgqE,iBAAAxqB,EAAAx/C,KAAA4nB,MACA,OAAA,OAAAzU,GACA,EAEAnT,KAAAiqE,gBAAAzqB,EAAArsC,IAYA2mC,EAAA4vB,OAAA1tE,UAAAiuE,gBAAA,SAAAzqB,EAAArsC,GAEA,IAAA1Z,EAAA+e,EACA,IAAA/e,EAAA,EAAAA,EAAA0Z,EAAA6rB,OAAAzlC,OAAAE,IAEA,GADA+e,EAAArF,EAAA6rB,OAAAvlC,GACA+lD,EAAAd,QAAA1+C,KAAAg/B,OAAAxmB,IACA,OAAAA,EAGA,OAAA,GAYAshC,EAAA4vB,OAAA1tE,UAAA8tE,eAAA,SAAAtqB,EAAA53B,GAEA,IAAAzU,EAAAnT,KAAAgqE,iBAAAxqB,EAAA53B,GACA,GAAA,OAAAzU,EACA,OAAA,EAGA,IAAA4W,EAAA/pB,KAAAiqE,gBAAAzqB,EAAArsC,GACA,IAAA,GAAA4W,EACA,OAAAA,EAGA,GAAA5W,EAAA6rB,OAAAzlC,QAAAyG,KAAA2pE,oBACA3pE,KAAAkqE,UAAA/2D,GACA,OAAAnT,KAAA8pE,eAAAtqB,EAAArsC,GAIA,IAAArS,EAAAd,KAAAg/B,OAAAzlC,OAGA,OAFAyG,KAAAg/B,OAAAhgC,KAAAwgD,GACArsC,EAAA6rB,OAAAhgC,KAAA8B,GACAA,GAYAg5C,EAAA4vB,OAAA1tE,UAAAguE,iBAAA,SAAAxqB,EAAArsC,GAEA,GAAA,OAAAA,EAAAsP,SACA,OAAAtP,EAGA,IAAA++C,EAAA/+C,EAAAs2D,IAAA/X,YACAyY,EAAA3qB,EAAAtd,EAAAgwB,EAAAhwB,EACAkoC,EAAA5qB,EAAArd,EAAA+vB,EAAA/vB,EACAkoC,EAAA7qB,EAAAgC,EAAA0Q,EAAA1Q,EAEA,OAAA2oB,GAAAC,GAAAC,GAEAF,GAAAC,GAAAC,EAEAF,GAAAC,IAAAC,EACArqE,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,IACA0nD,IAAAC,GAAAC,EAEAF,GAAAC,IAAAC,EAEAF,IAAAC,GAAAC,EACArqE,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,IACA0nD,GAAAC,GAAAC,EACArqE,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,KACA0nD,GAAAC,GAAAC,EACArqE,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,IAGA,KATAziB,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,IAFAziB,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,IAJAziB,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,IAFAziB,KAAAgqE,iBAAAxqB,EAAArsC,EAAAsP,SAAA,KA4BAq3B,EAAA4vB,OAAA1tE,UAAAkuE,UAAA,SAAA/2D,GAEA,IAAAm3D,EAAAtqE,KACAyiB,EAAAq3B,EAAAovB,uBAAA/1D,EAAAs2D,IAAA,SAAAc,GACA,OAAAD,EAAAV,cAAAz2D,EAAAo3D,KAGA,GAAA,OAAA9nD,EACA,OAAA,EAGAtP,EAAAsP,SAAAA,EACA,IAGAhpB,EAHA+wE,EAAAr3D,EAAA6rB,OAIA,IAHA7rB,EAAA6rB,UAGAvlC,EAAA,EAAAA,EAAA+wE,EAAAjxE,OAAAE,IACAuG,KAAAgqE,iBAAAhqE,KAAAg/B,OAAAwrC,EAAA/wE,IAAA0Z,GACA6rB,OAAAhgC,KAAAwrE,EAAA/wE,IAGA,OAAA,GAYAqgD,EAAA4vB,OAAA1tE,UAAA4tE,cAAA,SAAA7kE,EAAA0kE,GAEA,IAAAgB,GACA1lE,OAAAA,EACA0kE,IAAAA,EACAzqC,UACAvc,SAAA,MAEA,OAAAgoD,GAWA3wB,EAAA4wB,eAAA,SAAAjB,GAEAzpE,KAAA4nB,KAAA5nB,KAAA4pE,cAAA,KAAAH,IAUA3vB,EAAA4wB,eAAA1uE,UAAAi7D,YAAA,SAAAlR,EAAAC,EAAAC,EAAAvJ,GAEA,OAAA18C,KAAA2qE,kBAAA5kB,EAAAC,EAAAC,EAAAjmD,KAAA4nB,KAAA80B,IAYA5C,EAAA4wB,eAAA1uE,UAAA2uE,kBAAA,SAAA5kB,EAAAC,EAAAC,EAAAr+B,EAAA80B,GAOA,IALA,SAAAqJ,EAAAC,EAAAC,EAAA9yC,GAEA,OAAAA,EAAAs2D,IAAA5X,cAAA9L,IAAA5yC,EAAAs2D,IAAA5X,cAAA7L,IAAA7yC,EAAAs2D,IAAA5X,cAAA5L,GAGA2kB,CAAA7kB,EAAAC,EAAAC,EAAAr+B,GACA,OAAA,EAGA,GAAA,OAAAA,EAAAnF,SAAA,CACA,IAAA6nD,EAAAtqE,KACA4nB,EAAAnF,SAAAq3B,EAAAovB,uBAAAthD,EAAA6hD,IAAA,SAAAc,GACA,OAAAD,EAAAV,cAAAhiD,EAAA2iD,KAKA,IAAA9wE,EAAA0Z,EADA,GAAA,OAAAyU,EAAAnF,SAEA,IAAAhpB,EAAA,EAAAA,EAAAmuB,EAAAnF,SAAAlpB,OAAAE,IAEA,GADA0Z,EAAAyU,EAAAnF,SAAAhpB,GACAuG,KAAA2qE,kBAAA5kB,EAAAC,EAAAC,EAAA9yC,EAAAupC,GACA,OAAA,EAWA,OANA90B,EAAAsvC,UAAAl4D,MACA+mD,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAvJ,SAAAA,KAEA,GAYA5C,EAAA4wB,eAAA1uE,UAAA4tE,cAAA,SAAA7kE,EAAA0kE,GAEA,IAAAgB,GACA1lE,OAAAA,EACA0kE,IAAAA,EACAvS,aACAz0C,SAAA,MAEA,OAAAgoD,GAGA3wB,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GAsTA,OAjTAA,EAAA+wB,QAAA,WAEA7qE,KAAA4nB,KAAA,MAYAkyB,EAAA+wB,QAAA7uE,UAAA8uE,WAAA,SAAAjO,EAAAngB,GAMA,OAJA,OAAA18C,KAAA4nB,OACA5nB,KAAA4nB,KAAA5nB,KAAA4pE,iBAGA5pE,KAAA+qE,iBAAA/qE,KAAA4nB,KAAAi1C,EAAAngB,IASA5C,EAAA+wB,QAAA7uE,UAAAgvE,SAAA,SAAAhC,GAEAhpE,KAAAipE,aAAAjpE,KAAA4nB,KAAAohD,IAUAlvB,EAAA+wB,QAAA7uE,UAAAitE,aAAA,SAAA91D,EAAA61D,GAEA,OAAA71D,IACA61D,EAAA71D,GACAnT,KAAAipE,aAAA91D,EAAA83D,OAAAjC,GACAhpE,KAAAipE,aAAA91D,EAAA+3D,QAAAlC,KAUAlvB,EAAA+wB,QAAA7uE,UAAAmvE,SAAA,WAEA,IAAAhtE,KAIA,OAHA6B,KAAAgrE,SAAA,SAAA73D,GACAhV,EAAAa,KAAAmU,KAEAhV,GASA27C,EAAA+wB,QAAA7uE,UAAAovE,UAAA,WAEA,IAAAxiE,EAAA,EAIA,OAHA5I,KAAAgrE,SAAA,WACApiE,GAAA,IAEAA,GAaAkxC,EAAA+wB,QAAA7uE,UAAA+uE,iBAAA,SAAA53D,EAAA0pD,EAAAngB,GAEA,GAAAmgB,EAAAhD,cAAA,EACA,OAAA,EAGA,IAAArxB,EACA,GAAA,OAAAr1B,EAAA0pD,QAAA,CACAr0B,EAAAq0B,EAAA/I,YACA,IAAAM,EAAAta,EAAAqa,8BAAA0I,EAAAlD,UAAA,GAAAnxB,GACAr1B,EAAA0pD,QAAAA,OACA//D,IAAA4/C,IACAvpC,EAAAupC,SAAAA,GAEAvpC,EAAAihD,MAAAA,MACA,CACA,IAAA0P,KACAD,KACAwH,KACAC,EAAAxxB,EAAA8pB,oBAAA/G,EAAA1pD,EAAAihD,MAAAyP,EAAAC,EAAAuH,GACAC,IACAxH,EAAAvqE,OAAA,GACAyG,KAAAurE,wBAAAp4D,EAAA2wD,EAAApnB,GAEAmnB,EAAAtqE,OAAA,GACAyG,KAAAwrE,yBAAAr4D,EAAA0wD,EAAAnnB,GAEA2uB,EAAA9xE,OAAA,IACAivC,EAAAq0B,EAAA/I,YACAha,EAAA2H,UAAAjZ,EAAAr1B,EAAAihD,MAAAN,aAAA,EACA9zD,KAAAurE,wBAAAp4D,EAAAk4D,EAAA3uB,GAEA18C,KAAAwrE,yBAAAr4D,EAAAk4D,EAAA3uB,KAMA,OAAA,GAWA5C,EAAA+wB,QAAA7uE,UAAAuvE,wBAAA,SAAAp4D,EAAAs4D,EAAA/uB,GAMA,IAAAjjD,EACA,IALA,OAAA0Z,EAAA83D,SACA93D,EAAA83D,OAAAjrE,KAAA4pE,gBACAz2D,EAAA83D,OAAAlmE,OAAAoO,GAGA1Z,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACAuG,KAAA+qE,iBAAA53D,EAAA83D,OAAAQ,EAAAhyE,GAAAijD,IAYA5C,EAAA+wB,QAAA7uE,UAAAwvE,yBAAA,SAAAr4D,EAAAs4D,EAAA/uB,GAMA,IAAAjjD,EACA,IALA,OAAA0Z,EAAA+3D,UACA/3D,EAAA+3D,QAAAlrE,KAAA4pE,gBACAz2D,EAAA+3D,QAAAnmE,OAAAoO,GAGA1Z,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACAuG,KAAA+qE,iBAAA53D,EAAA+3D,QAAAO,EAAAhyE,GAAAijD,IAUA5C,EAAA+wB,QAAA7uE,UAAA4tE,cAAA,WAUA,OAPA/M,QAAA,KACAngB,SAAA,KACA0X,MAAA,KACArvD,OAAA,KACAkmE,OAAA,KACAC,QAAA,OAkBApxB,EAAA4xB,uBAAA,SAAA7O,EAAA8O,EAAA9H,EAAAC,EAAA8H,EAAAC,GAEA,SAAAC,EAAAjP,EAAA1pD,EAAA44D,GAEA,GAAA,OAAA54D,EAAA,CAIA,IAAA64D,KACAC,KACAC,KACAZ,EAAAxxB,EAAA8pB,oBAAA/G,EAAA1pD,EAAAihD,MAAA6X,EAAAD,EAAAE,GACA,GAAAZ,IAIAU,EAAAzyE,OAAA,GACA4yE,EAAAh5D,EAAA64D,EAAAD,GAEAE,EAAA1yE,OAAA,GACA6yE,EAAAj5D,EAAA84D,EAAAF,GAEAG,EAAA3yE,OAAA,GAAA,CACA,IAAAivC,EAAAq0B,EAAA/I,YACAha,EAAA2H,UAAAjZ,EAAAr1B,EAAAihD,MAAAN,aAAA,EACAqY,EAAAh5D,EAAA+4D,GAAA,GAEAE,EAAAj5D,EAAA+4D,GAAA,KAKA,SAAAG,EAAAZ,EAAAt4D,EAAA44D,GAEA,IAAAtyE,EACA,IAAAA,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACAqyE,EAAAL,EAAAhyE,GAAA0Z,EAAA44D,GAIA,SAAAO,EAAAb,EAAAc,GAEA,IAAA9yE,EACA,IAAAA,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACA8yE,EAAAvtE,KAAAysE,EAAAhyE,IAIA,SAAA0yE,EAAAh5D,EAAAs4D,EAAAM,GAEA,OAAA54D,EAAA83D,OACAoB,EAAAZ,EAAAt4D,EAAA83D,OAAAc,GAEAO,EAAAb,EAAAM,EAAAF,EAAA/H,GAIA,SAAAsI,EAAAj5D,EAAAs4D,EAAAM,GAEA,OAAA54D,EAAA+3D,QACAmB,EAAAZ,EAAAt4D,EAAA+3D,QAAAa,GAEAO,EAAAb,EAAAM,EAAAH,EAAA/H,GAKA,OADAiI,EAAAjP,EAAA8O,EAAA/jD,MAAA,IACA,GAWAkyB,EAAA0yB,8BAAA,SAAAb,EAAAc,EAAAzD,IAEA,SAAAC,EAAA91D,GAEA,GAAA,OAAAA,EAAA,CACA,IAAAu5D,EAAAv5D,EAAAihD,MAAA/G,cAAAof,GACAC,GAAA5yB,EAAAwZ,mBAAAE,qBACAyV,EAAA91D,EAAA83D,QACAjC,EAAA71D,GACA81D,EAAA91D,EAAA+3D,UACAwB,GAAA5yB,EAAAwZ,mBAAAG,oBACAwV,EAAA91D,EAAA+3D,SACAlC,EAAA71D,GACA81D,EAAA91D,EAAA83D,UAEAhC,EAAA91D,EAAA+3D,SACAjC,EAAA91D,EAAA83D,UAKAhC,CAAA0C,EAAA/jD,OAGAkyB,IAGA5gD,OAAA,qCAAA,eAAA,SAAA4gD,GA+FA,OAlFAA,EAAA6yB,yBAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA1d,GAEA,SAAA2d,EAAAJ,EAAAC,EAAAC,EAAAC,EAAAvgC,GAEA,IAAAygC,EAAAzgC,EAAAA,EACA0gC,EAAAD,EAAAzgC,EACA2gC,EAAA,EAAA3gC,EACA4gC,EAAAD,EAAAA,EACAE,EAAAD,EAAAD,EACAjrC,EAAAmrC,EAAAT,EAAA1qC,EAAA,EAAAkrC,EAAA5gC,EAAAqgC,EAAA3qC,EAAA,EAAAirC,EAAAF,EAAAH,EAAA5qC,EAAAgrC,EAAAH,EAAA7qC,EACAC,EAAAkrC,EAAAT,EAAAzqC,EAAA,EAAAirC,EAAA5gC,EAAAqgC,EAAA1qC,EAAA,EAAAgrC,EAAAF,EAAAH,EAAA3qC,EAAA+qC,EAAAH,EAAA5qC,EACA,OAAA,IAAA2X,EAAAwF,QAAApd,EAAAC,GAGA,IAEA1oC,EAAA+lD,EAFArhD,KACAugC,EAAA,EAAA2wB,EAEA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IACA+lD,EAAAwtB,EAAAJ,EAAAC,EAAAC,EAAAC,EAAAtzE,EAAAilC,GACAvgC,EAAAa,KAAAwgD,GAEA,OAAArhD,GAaA27C,EAAAwzB,oBAAA,SAAAC,EAAAhqE,EAAA2+B,GAcA,IAAAsrC,EAZA,SAAAjqE,EAAAgqE,GAEA,IAEA9zE,EAFA0E,EAAA,EACA2vD,EAAAhU,EAAAiF,QAAAwuB,EAAAhqE,EAAAgqE,GAEA,IAAA9zE,EAAA,EAAAA,EAAAq0D,EAAAr0D,IACA0E,GAAAoF,EAAA9J,EACA0E,GAAA1E,EAAA,EAEA,OAAA0E,EAGAsvE,CAAAlqE,EAAAgqE,GACA,OAAAC,EAAAnkE,KAAAqkE,IAAAxrC,EAAAqrC,GAAAlkE,KAAAqkE,IAAA,EAAAxrC,EAAA3+B,EAAAgqE,IAYAzzB,EAAA6zB,oBAAA,SAAAC,EAAAve,GAEA,IAIA51D,EAAA2J,EAAAopC,EAAAqhC,EAAAC,EAAAtuB,EAJArhD,KACAoF,EAAAqqE,EAAAr0E,OAAA,EACAmlC,EAAA,EAAA2wB,EAGA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IAAA,CAGA,IAFA+yC,EAAA/yC,EAAAilC,EACA8gB,EAAA,IAAA1F,EAAAwF,QAAA,EAAA,GACAl8C,EAAA,EAAAA,GAAAG,EAAAH,IACAyqE,EAAAD,EAAAxqE,GACA0qE,EAAAh0B,EAAAwzB,oBAAAlqE,EAAAG,EAAAipC,GACAgT,EAAAtd,GAAA2rC,EAAA3rC,EAAA4rC,EACAtuB,EAAArd,GAAA0rC,EAAA1rC,EAAA2rC,EAEA3vE,EAAAa,KAAAwgD,GAEA,OAAArhD,GAGA27C,IAGA5gD,OAAA,wCAAA,eAAA,SAAA4gD,GA4HA,OA9GAA,EAAAi0B,sBAAA,SAAA7rC,EAAAhiC,EAAAC,EAAA6tE,GAEA,OAAA3kE,KAAAq2C,MAAAr2C,KAAAqkE,IAAAxrC,EAAA/hC,EAAA,IAAA,EAAAkJ,KAAA6xC,IAAA8yB,EAAA3kE,KAAAu5B,IAAA1iC,OAcA45C,EAAAm0B,iBAAA,SAAA/rC,EAAAhiC,EAAAC,EAAA4U,GAEA,OAAA7U,EAAAmJ,KAAA8a,KAAA9a,KAAAqkE,IAAAxrC,EAAA/hC,EAAA,IAAA,EAAAkJ,KAAAqkE,IAAA34D,EAAA,MAaA+kC,EAAAo0B,qBAAA,SAAAxpB,EAAA2K,EAAAzO,GAEA,IAMAnnD,EAAA+lD,EANArhD,KACAgwE,EAAA9e,EAEA1K,EAAA,EAAAt7C,KAAA61C,GACAzT,EAAA,EAAApiC,KAAA61C,GAAAivB,EAGA,IAAA10E,EAAA,EAAAA,EAAA00E,EAAA10E,IACA+lD,EAAA1F,EAAA2L,uBAAAf,EAAA,EAAAC,QACA7nD,IAAA8jD,GAAA,OAAAA,IACApB,EAAA1F,EAAAyI,SAAA/C,EAAAoB,IAEAziD,EAAAa,KAAAwgD,GACAmF,GAAAlZ,EAGA,OAAAttC,GAgBA27C,EAAAs0B,aAAA,SAAAC,EAAAC,EAAAjf,EAAAiH,EAAAmV,GAEA,GAAA4C,EAAA90E,SAAA+0E,EAAA/0E,OAAA,CAIA,IAKAE,EAAA2J,EAMAqoC,EAAA+T,EASAhnC,EAAAnO,EAAAwyD,EApBA0R,EAAAF,EAAA90E,OAAA,EACAi1E,EAAAnf,EACAof,KACAC,KAGA,IAAAj1E,EAAA,EAAAA,GAAA80E,EAAA90E,IACAg1E,EAAAzvE,KAAA86C,EAAA0I,SAAA8rB,EAAA70E,GAAA40E,EAAA50E,KACAi1E,EAAA1vE,KAAAqvE,EAAA50E,GAAAgmD,WAAA6uB,EAAA70E,KAIA,IAAAA,EAAA,EAAAA,GAAA80E,EAAA90E,IAEA,IADAgyC,EAAAijC,EAAAj1E,GAAA+0E,EACAprE,EAAA,EAAAA,GAAAorE,EAAAprE,IACAo8C,EAAA6uB,EAAA50E,GAAAomD,QAAAU,OAAAkuB,EAAAh1E,GAAAgyC,EAAAroC,GACAkzD,EAAAt3D,KAAAwgD,GAKA,IAAA/lD,EAAA,EAAAA,EAAA80E,EAAA90E,IACA,IAAA2J,EAAA,EAAAA,EAAAorE,EAAAprE,IAGAiH,GAFAmO,EAAA/e,GAAA+0E,EAAA,GAAAprE,GAEA,EADAoV,EAAAg2D,EAAA,EAEA,EAOA3R,GALArkD,EAAA/e,GAAA+0E,EAAA,GAAAprE,EAEAiH,EAAAmO,EAAAg2D,EAAA,EACAnkE,EAAA,EAFAmO,EAAA,GAKAizD,EAAAzsE,KAAA69D,KAKA/iB,IAGA5gD,OAAA,kCAAA,eAAA,SAAA4gD,GAgFA,OAvEAA,EAAA60B,IAAA,SAAAxyE,EAAAqkD,EAAAjnD,GAEAyG,KAAA7D,OAAAA,EACA6D,KAAAwgD,UAAAA,EAAAV,YACA9/C,KAAAzG,OAAAA,GAWAugD,EAAA60B,IAAA3yE,UAAAujD,IAAA,SAAApjD,EAAAqkD,EAAAjnD,GAEAyG,KAAA7D,OAAAA,EACA6D,KAAAwgD,UAAAA,EAAAV,YACA9/C,KAAAzG,OAAAA,GASAugD,EAAA60B,IAAA3yE,UAAA4yE,UAAA,WAEA,OAAA5uE,KAAA7D,QASA29C,EAAA60B,IAAA3yE,UAAA6yE,aAAA,WAEA,OAAA7uE,KAAAwgD,WAWA1G,EAAA60B,IAAA3yE,UAAA8yE,gBAAA,SAAAv1E,GAEA,YAAAuD,IAAAkD,KAAAzG,QAAA,OAAAyG,KAAAzG,QAGAugD,EAAA2E,UAAAllD,EAAAyG,KAAAzG,SASAugD,EAAA60B,IAAA3yE,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAA60B,IAAA3uE,KAAA7D,OAAA0jD,QAAA7/C,KAAAwgD,UAAAX,QAAA7/C,KAAAzG,SAGAugD,IAGA5gD,OAAA,mCAAA,eAAA,SAAA4gD,GA4MA,OArMAA,EAAAi1B,OAAA,SAAA7iE,GAEAlM,KAAAkM,UACAmjD,aAAA,GACAxrD,OAAA,IAAAi2C,EAAAoH,SAAA,EAAA,GACArY,MAAA,IAAAiR,EAAAwF,QAAA,EAAA,IAEAxF,EAAAc,qBAAA1uC,EAAAlM,KAAAkM,UAAA,GAEAlM,KAAA8hB,SAAA,IAAAg4B,EAAAwF,QAAA,EAAA,GACAt/C,KAAAgvE,eAAA,EACAhvE,KAAAyrE,YACAzrE,KAAAivE,eAAA,MAUAn1B,EAAAi1B,OAAA/yE,UAAAkzE,OAAA,SAAAhtC,EAAAC,GAEAniC,KAAAmvE,QACAnvE,KAAA8hB,SAAAy9B,IAAArd,EAAAC,GACAniC,KAAAgvE,eAAA,GAUAl1B,EAAAi1B,OAAA/yE,UAAAozE,OAAA,SAAAltC,EAAAC,GAEAniC,KAAAgvE,eACAhvE,KAAAqvE,gBAAArvE,KAAA8hB,SAAAogB,EAAAliC,KAAA8hB,SAAAqgB,GAEAniC,KAAAqvE,gBAAAntC,EAAAC,IAcA2X,EAAAi1B,OAAA/yE,UAAAszE,cAAA,SAAAptC,EAAAC,EAAAotC,EAAAC,EAAAC,EAAAC,GAEA,IAOAj2E,EAPAk2E,EAAA71B,EAAA6yB,yBACA,IAAA7yB,EAAAwF,QAAAt/C,KAAA8hB,SAAAogB,EAAAliC,KAAA8hB,SAAAqgB,GACA,IAAA2X,EAAAwF,QAAAiwB,EAAAC,GACA,IAAA11B,EAAAwF,QAAAmwB,EAAAC,GACA,IAAA51B,EAAAwF,QAAApd,EAAAC,GACAniC,KAAAkM,SAAAmjD,cAGA,IAAA51D,EAAA,EAAAA,EAAAk2E,EAAAp2E,OAAAE,IACAuG,KAAAovE,OAAAO,EAAAl2E,GAAAyoC,EAAAytC,EAAAl2E,GAAA0oC,IAQA2X,EAAAi1B,OAAA/yE,UAAAmzE,MAAA,WA0CA,GAAA,OAAAnvE,KAAAivE,eAAA,CACA,GAzCA,SAAApS,GAEA,GAAA,IAAAA,EAAAhD,cACA,OAAA,EAEAgD,EAAAlD,UAAA,GAAAjb,QAAAme,EAAAlD,UAAAkD,EAAAhD,cAAA,KACAgD,EAAAjD,aAAAiD,EAAAhD,cAAA,GAEA,GAAAgD,EAAAhD,cAAA,EACA,OAAA,EAEA,OAAA,EA8BA+V,CAAA5vE,KAAAivE,gBAAA,CACA,IAAAY,EA5BA,SAAApE,EAAA5O,GAEA,SAAAiT,EAAAD,EAAAhT,GAIA,GAFAkT,EAAAC,EAAAtV,iBACAuV,EAAApT,EAAAnC,iBACAqV,IAAAE,EAAA,CACA,IAAAC,EAAArT,EAAAlD,UAAA,GACAwW,EAAAH,EAAA3iB,cAAA6iB,GACA,GAAAC,GAAAr2B,EAAA+e,uBAAAG,OACA,OAAA,EAGA,OAAA,EAGA,IAAAv/D,EAAAu2E,EAAAD,EAAAE,EACA,IAAAx2E,EAAAgyE,EAAAlyE,OAAA,EAAAE,GAAA,EAAAA,IAEA,GAAAq2E,EADAE,EAAAvE,EAAAhyE,GAAAwkE,WAAA,GACApB,GACA,OAAA4O,EAAAhyE,GAGA,OAAA,KAKA22E,CAAApwE,KAAAyrE,SAAAzrE,KAAAivE,gBACA,GAAA,OAAAY,EAAA,CACA,IAAAQ,EAAA,IAAAv2B,EAAAujB,iBACAgT,EAAAzS,WAAA59D,KAAAivE,gBACAjvE,KAAAyrE,SAAAzsE,KAAAqxE,QAEAR,EAAAjS,WAAA59D,KAAAivE,gBAGAjvE,KAAAivE,eAAA,OAUAn1B,EAAAi1B,OAAA/yE,UAAAs0E,aAAA,WAEA,OAAAtwE,KAAAyrE,SAAAlyE,QAWAugD,EAAAi1B,OAAA/yE,UAAAu0E,WAAA,SAAAzvE,GAEA,OAAAd,KAAAyrE,SAAA3qE,IASAg5C,EAAAi1B,OAAA/yE,UAAAw0E,YAAA,WAEA,OAAAxwE,KAAAyrE,UASA3xB,EAAAi1B,OAAA/yE,UAAAy0E,kBAAA,WAKA,OAHA,OAAAzwE,KAAAivE,iBACAjvE,KAAAivE,eAAA,IAAAn1B,EAAAyf,WAEAv5D,KAAAivE,gBAUAn1B,EAAAi1B,OAAA/yE,UAAAqzE,gBAAA,SAAAntC,EAAAC,GAEA,IAAA06B,EAAA78D,KAAAywE,oBACAC,EAAA1wE,KAAAkM,SAAArI,OAAAq+B,EAAAA,EAAAliC,KAAAkM,SAAA28B,MAAA3G,EACAyuC,EAAA3wE,KAAAkM,SAAArI,OAAAs+B,EAAAA,EAAAniC,KAAAkM,SAAA28B,MAAA1G,EACA06B,EAAAzG,UAAAsa,EAAAC,GACA3wE,KAAA8hB,SAAAy9B,IAAArd,EAAAC,GACAniC,KAAAgvE,eAAA,GAGAl1B,IAGA5gD,OAAA,mCAAA,eAAA,SAAA4gD,GA4EA,OAnEAA,EAAA82B,wBAAA,SAAAC,GAGA,IADA,IAAAC,EAAAD,EAAA52E,SAAA,IACA62E,EAAAv3E,OAAA,GACAu3E,EAAA,IAAAA,EAEA,IAAA76D,EAAAzY,SAAAszE,EAAAC,OAAA,EAAA,GAAA,IACAC,EAAAxzE,SAAAszE,EAAAC,OAAA,EAAA,GAAA,IACA5wE,EAAA3C,SAAAszE,EAAAC,OAAA,EAAA,GAAA,IACA,OAAA96D,EAAA+6D,EAAA7wE,IAWA25C,EAAAm3B,kCAAA,SAAAJ,GAEA,IAAAK,EAAAp3B,EAAA82B,wBAAAC,GACA,OAAAK,EAAA,GAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,MAWAp3B,EAAAq3B,mBAAA,SAAAN,GAEA,IAAAC,EAAA,KAAAD,EACA,OAAArzE,SAAAszE,EAAA,KAaAh3B,EAAAs3B,wBAAA,SAAAC,EAAAC,EAAAC,GAEA,SAAAC,EAAAC,GAGA,IADA,IAAAtzE,EAAAX,SAAAi0E,EAAA,IAAAx3E,SAAA,IACAkE,EAAA5E,OAAA,GACA4E,EAAA,IAAAA,EAEA,OAAAA,EAEA,IAAA8X,EAAAu7D,EAAAH,GACAL,EAAAQ,EAAAF,GACAnxE,EAAAqxE,EAAAD,GACAT,EAAA,KAAA76D,EAAA+6D,EAAA7wE,EACA,OAAA3C,SAAAszE,EAAA,KAGAh3B,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GAyBA,OAhBAA,EAAA43B,SAAA,SAAAC,GAEA3xE,KAAA4xE,QAAA,MACA5xE,KAAA6xE,QAAA,MACA7xE,KAAA8xE,SAAA,EACA9xE,KAAA+xE,UAAA,EACA/xE,KAAAm8B,QAAA,EACAn8B,KAAAgyE,WAAA,EACAhyE,KAAAiyE,aAAA,EACAjyE,KAAAkyE,UAAA,GACAlyE,KAAAmyE,QAAA,KACAnyE,KAAAoyE,aAAA,EACApyE,KAAAqyE,cAAA,EACAv4B,EAAAc,qBAAA+2B,EAAA3xE,MAAA,IAGA85C,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GA+DA,OA1DAA,EAAAw4B,YAAA,WAEAtyE,KAAAuyE,aACAvyE,KAAAwyE,gBAAA,IAAA14B,EAAA43B,UAWA53B,EAAAw4B,YAAAt2E,UAAAy2E,YAAA,SAAAC,GAGA,OADA1yE,KAAAuyE,UAAAvzE,KAAA0zE,GACA1yE,KAAAuyE,UAAAh5E,OAAA,GAWAugD,EAAAw4B,YAAAt2E,UAAA22E,YAAA,SAAA7xE,GAEA,OAAAA,EAAA,GAAAA,GAAAd,KAAAuyE,UAAAh5E,OACAyG,KAAAwyE,gBAEAxyE,KAAAuyE,UAAAzxE,IASAg5C,EAAAw4B,YAAAt2E,UAAA42E,mBAAA,WAEA,OAAA5yE,KAAAwyE,iBASA14B,EAAAw4B,YAAAt2E,UAAA62E,MAAA,WAEA,OAAA7yE,KAAAuyE,UAAAh5E,QAGAugD,IAGA5gD,OAAA,kCAAA,eAAA,SAAA4gD,GA+pCA,OArpCAA,EAAAg5B,WAAA,SAAAhxD,GAEA9hB,KAAA8hB,SAAAA,GASAg4B,EAAAg5B,WAAA92E,UAAA+2E,YAAA,WAEA,OAAA/yE,KAAA8hB,UASAg4B,EAAAg5B,WAAA92E,UAAAg3E,YAAA,SAAAlxD,GAEA9hB,KAAA8hB,SAAAA,GASAg4B,EAAAg5B,WAAA92E,UAAA6jD,MAAA,WAEA,OAAA,IAAA/F,EAAAg5B,WAAA9yE,KAAA8hB,SAAA+9B,UAWA/F,EAAAm5B,UAAA,SAAAnyE,GAEAd,KAAAq2D,OAAAv1D,EACAd,KAAA0yE,UAAA,GASA54B,EAAAm5B,UAAAj3E,UAAAk3E,eAAA,WAEA,OAAAlzE,KAAAq2D,QASAvc,EAAAm5B,UAAAj3E,UAAAm3E,eAAA,SAAAryE,GAEAd,KAAAq2D,OAAAv1D,GASAg5C,EAAAm5B,UAAAj3E,UAAAo3E,iBAAA,WAEA,OAAA,IAAApzE,KAAA0yE,UASA54B,EAAAm5B,UAAAj3E,UAAAq3E,iBAAA,WAEA,OAAArzE,KAAA0yE,UASA54B,EAAAm5B,UAAAj3E,UAAAs3E,iBAAA,SAAAZ,GAEA1yE,KAAA0yE,SAAAA,GASA54B,EAAAm5B,UAAAj3E,UAAAu3E,kBAAA,SAAAn0E,GAEAY,KAAA0yE,SAAAtzE,EAAAszE,UASA54B,EAAAm5B,UAAAj3E,UAAA6jD,MAAA,WAEA,IAAA1hD,EAAA,IAAA27C,EAAAm5B,UAAAjzE,KAAAq2D,QAEA,OADAl4D,EAAAu0E,SAAA1yE,KAAA0yE,SACAv0E,GAYA27C,EAAA05B,SAAA,SAAArmB,EAAAxwC,GACA3c,KAAAmtD,IAAAA,EACAntD,KAAA2c,IAAAA,EACA3c,KAAA0yE,UAAA,GASA54B,EAAA05B,SAAAx3E,UAAAy3E,kBAAA,WACA,OAAAzzE,KAAAmtD,KASArT,EAAA05B,SAAAx3E,UAAA03E,kBAAA,SAAA5yE,GACAd,KAAAmtD,IAAArsD,GASAg5C,EAAA05B,SAAAx3E,UAAA23E,kBAAA,WACA,OAAA3zE,KAAA2c,KASAm9B,EAAA05B,SAAAx3E,UAAA43E,kBAAA,SAAA9yE,GACAd,KAAA2c,IAAA7b,GASAg5C,EAAA05B,SAAAx3E,UAAAo3E,iBAAA,WACA,OAAA,IAAApzE,KAAA0yE,UASA54B,EAAA05B,SAAAx3E,UAAAq3E,iBAAA,WACA,OAAArzE,KAAA0yE,UASA54B,EAAA05B,SAAAx3E,UAAAs3E,iBAAA,SAAAZ,GACA1yE,KAAA0yE,SAAAA,GASA54B,EAAA05B,SAAAx3E,UAAAu3E,kBAAA,SAAAn0E,GAEAY,KAAA0yE,SAAAtzE,EAAAszE,UASA54B,EAAA05B,SAAAx3E,UAAA6jD,MAAA,WAEA,IAAA1hD,EAAA,IAAA27C,EAAA05B,SAAAxzE,KAAAmtD,IAAAntD,KAAA2c,KAEA,OADAxe,EAAAu0E,SAAA1yE,KAAA0yE,SACAv0E,GAYA27C,EAAA+5B,YAAA,SAAAvd,GAEAt2D,KAAAs2D,SAAAA,EACAt2D,KAAA0yE,UAAA,EACA1yE,KAAA8zE,QAAA,GASAh6B,EAAA+5B,YAAA73E,UAAA+3E,eAAA,SAAAjzE,GAEAd,KAAAs2D,SAAAt3D,KAAA8B,IAUAg5C,EAAA+5B,YAAA73E,UAAAg4E,kBAAA,SAAAhW,EAAAiW,GAEAj0E,KAAAs2D,SAAA9zD,OAAAyxE,EAAA,EAAAjW,IAWAlkB,EAAA+5B,YAAA73E,UAAAk3E,eAAA,SAAApyE,GAEA,OAAAd,KAAAs2D,SAAAx1D,IAUAg5C,EAAA+5B,YAAA73E,UAAAm3E,eAAA,SAAAryE,EAAAozE,GAEAl0E,KAAAs2D,SAAAx1D,GAAAozE,GASAp6B,EAAA+5B,YAAA73E,UAAAm4E,iBAAA,WAEA,OAAAn0E,KAAAs2D,UASAxc,EAAA+5B,YAAA73E,UAAAo4E,iBAAA,SAAA9d,GAEAt2D,KAAAs2D,SAAAA,GASAxc,EAAA+5B,YAAA73E,UAAAq4E,iBAAA,WAEA,OAAAr0E,KAAAs2D,SAAA/8D,QASAugD,EAAA+5B,YAAA73E,UAAAo3E,iBAAA,WAEA,OAAA,IAAApzE,KAAA0yE,UASA54B,EAAA+5B,YAAA73E,UAAAq3E,iBAAA,WAEA,OAAArzE,KAAA0yE,UASA54B,EAAA+5B,YAAA73E,UAAAs3E,iBAAA,SAAAZ,GAEA1yE,KAAA0yE,SAAAA,GASA54B,EAAA+5B,YAAA73E,UAAAs4E,cAAA,WAEA,OAAA,IAAAt0E,KAAA8zE,QASAh6B,EAAA+5B,YAAA73E,UAAAu4E,cAAA,WAEA,OAAAv0E,KAAA8zE,QASAh6B,EAAA+5B,YAAA73E,UAAAw4E,cAAA,SAAAC,GAEAz0E,KAAA8zE,OAAAW,GAOA36B,EAAA+5B,YAAA73E,UAAA04E,qBAAA,WAEA10E,KAAAs2D,SAAAx/C,WASAgjC,EAAA+5B,YAAA73E,UAAAu3E,kBAAA,SAAAn0E,GAEAY,KAAA0yE,SAAAtzE,EAAAszE,SACA1yE,KAAA8zE,OAAA10E,EAAA00E,QASAh6B,EAAA+5B,YAAA73E,UAAA6jD,MAAA,WAEA,IACApmD,EADA0E,EAAA,IAAA27C,EAAA+5B,gBAEA,IAAAp6E,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA0E,EAAAm4D,SAAAt3D,KAAAgB,KAAAs2D,SAAA78D,IAIA,OAFA0E,EAAAu0E,SAAA1yE,KAAA0yE,SACAv0E,EAAA21E,OAAA9zE,KAAA8zE,OACA31E,GAWA27C,EAAA66B,uBACAC,OAAA,EACAC,MAAA,EACAC,YAAA,GASAh7B,EAAAi7B,sBAAA,WAEA/0E,KAAA9F,KAAA,KACA8F,KAAAg/B,OAAA,KACAh/B,KAAAg1E,SAAA,IAAAl7B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,KASAzH,EAAAi7B,sBAAA/4E,UAAAi5E,QAAA,WAEA,OAAAj1E,KAAA9F,MASA4/C,EAAAi7B,sBAAA/4E,UAAAk5E,UAAA,WAEA,OAAAl1E,KAAAg/B,QASA8a,EAAAi7B,sBAAA/4E,UAAAm5E,QAAA,SAAAj7E,GAEA8F,KAAA9F,KAAAA,GASA4/C,EAAAi7B,sBAAA/4E,UAAAo5E,UAAA,SAAAp2C,GAEAh/B,KAAAg/B,OAAAA,GAWA8a,EAAAi7B,sBAAA/4E,UAAAq5E,UAAA,SAAAz0B,EAAA00B,EAAAC,GAEAv1E,KAAA9F,KAAA4/C,EAAA66B,sBAAAC,OACA50E,KAAAg/B,OAAA,IAAA8a,EAAAoS,YACAtL,EACA00B,EACAC,EACA,IAAAz7B,EAAAyH,MAAA,EAAA,EAAA,KAaAzH,EAAAi7B,sBAAA/4E,UAAAg5E,SAAA,SAAAp0B,EAAA00B,EAAAC,EAAAC,GAEAx1E,KAAA9F,KAAA4/C,EAAA66B,sBAAAE,MACA70E,KAAAg/B,OAAA,IAAA8a,EAAAoS,YACAtL,EACA00B,EACAC,EACAC,IAaA17B,EAAAi7B,sBAAA/4E,UAAAy5E,eAAA,SAAA70B,EAAA8D,EAAA4wB,EAAAE,GAEAx1E,KAAA9F,KAAA4/C,EAAA66B,sBAAAG,YACA90E,KAAAg/B,OAAA,IAAA8a,EAAAoS,YACAtL,EACA00B,EAAAz1B,QAAAQ,UAAAqE,GACA5K,EAAAqI,YAAAqzB,EAAAF,GAAAj1B,UAAAqE,GACA8wB,IAUA17B,EAAAi7B,sBAAA/4E,UAAA05E,UAAA,SAAAhjB,GAEA1yD,KAAAg/B,OAAAutB,mBACAvsD,KAAAg/B,OAAA4hB,MAAA8R,EAAAF,MAAAxyD,KAAAg/B,OAAA4hB,OACA5gD,KAAAg/B,OAAAmtB,GAAAuG,EAAAF,MAAAxyD,KAAAg/B,OAAAmtB,IACAnsD,KAAAg/B,OAAAotB,GAAAsG,EAAAF,MAAAxyD,KAAAg/B,OAAAotB,IACApsD,KAAAg/B,OAAAqtB,GAAAqG,EAAAF,MAAAxyD,KAAAg/B,OAAAqtB,IACArsD,KAAAg/B,OAAAstB,sBASAxS,EAAAi7B,sBAAA/4E,UAAA6jD,MAAA,WAEA,IAAA1hD,EAAA,IAAA27C,EAAAi7B,sBAGA,OAFA52E,EAAAg3E,QAAAn1E,KAAA9F,MACAiE,EAAAi3E,UAAAp1E,KAAAg/B,OAAA6gB,SACA1hD,GASA27C,EAAA67B,KAAA,WAEA31E,KAAAw5D,SAWA1f,EAAA67B,KAAA35E,UAAAo6D,UAAA,SAAAC,GAGA,OADAr2D,KAAAs2D,SAAAt3D,KAAAq3D,GACAr2D,KAAAs2D,SAAA/8D,OAAA,GAWAugD,EAAA67B,KAAA35E,UAAA45E,SAAA,SAAA/H,GAGA,OADA7tE,KAAA4tE,OAAA5uE,KAAA6uE,GACA7tE,KAAA4tE,OAAAr0E,OAAA,GAWAugD,EAAA67B,KAAA35E,UAAA65E,QAAA,SAAA1gE,GAGA,OADAnV,KAAA81E,MAAA92E,KAAAmW,GACAnV,KAAA81E,MAAAv8E,OAAA,GAWAugD,EAAA67B,KAAA35E,UAAA8uE,WAAA,SAAAjO,GAGA,OADA78D,KAAAyrE,SAAAzsE,KAAA69D,GACA78D,KAAAyrE,SAAAlyE,OAAA,GAWAugD,EAAA67B,KAAA35E,UAAA29D,UAAA,SAAA74D,GAEA,OAAAd,KAAAs2D,SAAAx1D,IAWAg5C,EAAA67B,KAAA35E,UAAA+5E,kBAAA,SAAAj1E,GAEA,OAAAd,KAAAs2D,SAAAx1D,GAAAghB,UAUAg4B,EAAA67B,KAAA35E,UAAAg6E,kBAAA,SAAAl1E,EAAAghB,GAEA9hB,KAAAs2D,SAAAx1D,GAAAghB,SAAAA,GAWAg4B,EAAA67B,KAAA35E,UAAAi6E,SAAA,SAAAn1E,GAEA,OAAAd,KAAA4tE,OAAA9sE,IAWAg5C,EAAA67B,KAAA35E,UAAAk6E,QAAA,SAAAp1E,GAEA,OAAAd,KAAA81E,MAAAh1E,IAWAg5C,EAAA67B,KAAA35E,UAAAu0E,WAAA,SAAAzvE,GAEA,OAAAd,KAAAyrE,SAAA3qE,IASAg5C,EAAA67B,KAAA35E,UAAAm6E,uBAAA,SAAAzD,GAEA,IAAAj5E,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,IACAuG,KAAA4tE,OAAAn0E,GAAA65E,iBAAAZ,IAUA54B,EAAA67B,KAAA35E,UAAAo6E,sBAAA,SAAA1D,GAEA,IAAAj5E,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAA81E,MAAAv8E,OAAAE,IACAuG,KAAA81E,MAAAr8E,GAAA65E,iBAAAZ,IAUA54B,EAAA67B,KAAA35E,UAAAq6E,yBAAA,SAAA3D,GAEA,IAAAj5E,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAyrE,SAAAlyE,OAAAE,IACAuG,KAAAyrE,SAAAhyE,GAAA65E,iBAAAZ,IAUA54B,EAAA67B,KAAA35E,UAAAs6E,sBAAA,SAAA7B,GAEA,IAAAh7E,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAyrE,SAAAlyE,OAAAE,IACAuG,KAAAyrE,SAAAhyE,GAAA+6E,cAAAC,IAUA36B,EAAA67B,KAAA35E,UAAA49D,aAAA,SAAA94D,GAEA,IAGArH,EAAA2J,EAAAyqE,EAAA14D,EAAA0nD,EAAA0Z,EAHAC,KACAC,KACAC,KAEA,IAAAj9E,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,KACAo0E,EAAA7tE,KAAA4tE,OAAAn0E,IACAy5E,kBAAApyE,EACA01E,EAAAx3E,KAAAvF,GACAo0E,EAAAqF,kBAAApyE,GACA+sE,EAAAsF,eAAAtF,EAAAqF,iBAAA,GAGA,IAAAz5E,EAAA,EAAAA,EAAAuG,KAAA81E,MAAAv8E,OAAAE,KACA0b,EAAAnV,KAAA81E,MAAAr8E,IACAg6E,qBAAA3yE,GAAAqU,EAAAw+D,qBAAA7yE,EACA21E,EAAAz3E,KAAAvF,IAEA0b,EAAAs+D,qBAAA3yE,GACAqU,EAAAu+D,kBAAAv+D,EAAAs+D,oBAAA,GAEAt+D,EAAAw+D,qBAAA7yE,GACAqU,EAAAy+D,kBAAAz+D,EAAAw+D,oBAAA,IAIA,IAAAl6E,EAAA,EAAAA,EAAAuG,KAAAyrE,SAAAlyE,OAAAE,IAEA,IADAojE,EAAA78D,KAAAyrE,SAAAhyE,GACA2J,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IAAA,CAEA,GADAmzE,EAAA1Z,EAAAqW,eAAA9vE,GACAy5D,EAAAqW,eAAA9vE,IAAAtC,EAAA,CACA41E,EAAA13E,KAAAvF,GACA,MACA88E,GAAAz1E,GACA+7D,EAAAsW,eAAA/vE,EAAAmzE,EAAA,GAIA,IAAA98E,EAAA,EAAAA,EAAA+8E,EAAAj9E,OAAAE,IACAuG,KAAA22E,YAAAH,EAAA/8E,GAAAA,GAEA,IAAAA,EAAA,EAAAA,EAAAg9E,EAAAl9E,OAAAE,IACAuG,KAAA42E,WAAAH,EAAAh9E,GAAAA,GAEA,IAAAA,EAAA,EAAAA,EAAAi9E,EAAAn9E,OAAAE,IACAuG,KAAA62E,cAAAH,EAAAj9E,GAAAA,GAEAuG,KAAAs2D,SAAA9zD,OAAA1B,EAAA,IASAg5C,EAAA67B,KAAA35E,UAAA26E,YAAA,SAAA71E,GAEAd,KAAA4tE,OAAAprE,OAAA1B,EAAA,IASAg5C,EAAA67B,KAAA35E,UAAA46E,WAAA,SAAA91E,GAEAd,KAAA81E,MAAAtzE,OAAA1B,EAAA,IASAg5C,EAAA67B,KAAA35E,UAAA66E,cAAA,SAAA/1E,GAEAd,KAAAyrE,SAAAjpE,OAAA1B,EAAA,IASAg5C,EAAA67B,KAAA35E,UAAA69D,YAAA,WAEA,OAAA75D,KAAAs2D,SAAA/8D,QASAugD,EAAA67B,KAAA35E,UAAA86E,WAAA,WAEA,OAAA92E,KAAA4tE,OAAAr0E,QASAugD,EAAA67B,KAAA35E,UAAA+6E,UAAA,WAEA,OAAA/2E,KAAA81E,MAAAv8E,QASAugD,EAAA67B,KAAA35E,UAAAs0E,aAAA,WAEA,OAAAtwE,KAAAyrE,SAAAlyE,QASAugD,EAAA67B,KAAA35E,UAAAg7E,qBAAA,WAEA,OAAAh3E,KAAAi3E,YASAn9B,EAAA67B,KAAA35E,UAAAk7E,qBAAA,SAAAD,GAEAj3E,KAAAi3E,WAAAA,GAWAn9B,EAAA67B,KAAA35E,UAAAm7E,2BAAA,SAAAv2B,EAAA00B,EAAAC,GAEAv1E,KAAAi3E,WAAA5B,UAAAz0B,EAAA00B,EAAAC,IAYAz7B,EAAA67B,KAAA35E,UAAAo7E,0BAAA,SAAAx2B,EAAA00B,EAAAC,EAAAC,GAEAx1E,KAAAi3E,WAAAjC,SAAAp0B,EAAA00B,EAAAC,EAAAC,IAYA17B,EAAA67B,KAAA35E,UAAAq7E,gCAAA,SAAAz2B,EAAA8D,EAAA4wB,EAAAE,GAEAx1E,KAAAi3E,WAAAxB,eAAA70B,EAAA8D,EAAA4wB,EAAAE,IASA17B,EAAA67B,KAAA35E,UAAA05E,UAAA,SAAAhjB,GAEA,IAAAj5D,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACAuG,KAAAs2D,SAAA78D,GAAAqoB,SAAA4wC,EAAAF,MAAAxyD,KAAAs2D,SAAA78D,GAAAqoB,UAEA9hB,KAAAi3E,WAAAvB,UAAAhjB,IASA5Y,EAAA67B,KAAA35E,UAAAmhE,eAAA,WAEA,IAGA1jE,EAAA+lD,EAHAsO,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAoE,IAAApE,EAAAoE,IAAApE,EAAAoE,KACA5yB,EAAA,IAAAwuB,EAAAyH,OAAAzH,EAAAoE,KAAApE,EAAAoE,KAAApE,EAAAoE,KAGA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA+lD,EAAAx/C,KAAAs2D,SAAA78D,GAAAqoB,SACAgsC,EAAA5rB,EAAA4X,EAAAiF,QAAA+O,EAAA5rB,EAAAsd,EAAAtd,GACA4rB,EAAA3rB,EAAA2X,EAAAiF,QAAA+O,EAAA3rB,EAAAqd,EAAArd,GACA2rB,EAAAtM,EAAA1H,EAAAiF,QAAA+O,EAAAtM,EAAAhC,EAAAgC,GACAl2B,EAAA4W,EAAA4X,EAAAkF,QAAA1zB,EAAA4W,EAAAsd,EAAAtd,GACA5W,EAAA6W,EAAA2X,EAAAkF,QAAA1zB,EAAA6W,EAAAqd,EAAArd,GACA7W,EAAAk2B,EAAA1H,EAAAkF,QAAA1zB,EAAAk2B,EAAAhC,EAAAgC,GAGA,OAAA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IASAwuB,EAAA67B,KAAA35E,UAAA01D,UAAA,WAEA,IAAA0L,EAAAp9D,KAAAm9D,iBACA,OAAAC,EAAA1L,aASA5X,EAAA67B,KAAA35E,UAAAs7E,kBAAA,WAEA,IAGA79E,EAAA+e,EAHA05C,EAAAlyD,KAAA0xD,YACAhN,EAAA,EAGA,IAAAjrD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA+e,EAAA05C,EAAAzS,WAAAz/C,KAAAs2D,SAAA78D,GAAAqoB,UACAg4B,EAAA2E,UAAAjmC,EAAAksC,KACAA,EAAAlsC,GAIA,IAAAra,EAAA,IAAA27C,EAAAmY,OAAAC,EAAAxN,GACA,OAAAvmD,GAOA27C,EAAA67B,KAAA35E,UAAAu7E,cAAA,WAEA,IAGA99E,EAHAy4D,EAAAlyD,KAAA0xD,YAAA7R,QAIA,IAHAqS,EAAA/R,gBAAA,GAGA1mD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACAuG,KAAAs2D,SAAA78D,GAAAqoB,SAAAg4B,EAAAyI,SAAAviD,KAAAs2D,SAAA78D,GAAAqoB,SAAAowC,IAUApY,EAAA67B,KAAA35E,UAAAw7E,MAAA,SAAApiE,GAEA,IAEA3b,EAAA2J,EAKAq0E,EAOAC,EAQAC,EAtBAC,EAAA53E,KAAAs2D,SAAA/8D,OAGA,IAAAE,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACAuG,KAAAs2D,SAAAt3D,KAAAoW,EAAAukD,UAAAlgE,GAAAomD,SAIA,IAAApmD,EAAA,EAAAA,EAAA2b,EAAA0hE,aAAAr9E,KACAg+E,EAAAriE,EAAA6gE,SAAAx8E,GAAAomD,SACAszB,eAAAsE,EAAAvE,iBAAA0E,GACA53E,KAAA4tE,OAAA5uE,KAAAy4E,GAIA,IAAAh+E,EAAA,EAAAA,EAAA2b,EAAA2hE,YAAAt9E,KACAi+E,EAAAtiE,EAAA8gE,QAAAz8E,GAAAomD,SACA6zB,kBAAAgE,EAAAjE,oBAAAmE,GACAF,EAAA9D,kBAAA8D,EAAA/D,oBAAAiE,GACA53E,KAAA81E,MAAA92E,KAAA04E,GAIA,IAAAj+E,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAAA,CAEA,IADAk+E,EAAAviE,EAAAm7D,WAAA92E,GAAAomD,QACAz8C,EAAA,EAAAA,EAAAu0E,EAAAtD,mBAAAjxE,IACAu0E,EAAArhB,SAAAlzD,IAAAw0E,EAEA53E,KAAAyrE,SAAAzsE,KAAA24E,KAQA79B,EAAA67B,KAAA35E,UAAAw9D,MAAA,WAEAx5D,KAAAs2D,YACAt2D,KAAA4tE,UACA5tE,KAAA81E,SACA91E,KAAAyrE,YACAzrE,KAAAi3E,WAAA,IAAAn9B,EAAAi7B,uBASAj7B,EAAA67B,KAAA35E,UAAA6jD,MAAA,WAEA,IAEApmD,EAFA0E,EAAA,IAAA27C,EAAA67B,KAGA,IAAAl8E,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA0E,EAAAi4D,UAAAp2D,KAAAs2D,SAAA78D,GAAAomD,SAGA,IAAApmD,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,IACA0E,EAAAy3E,SAAA51E,KAAA4tE,OAAAn0E,GAAAomD,SAGA,IAAApmD,EAAA,EAAAA,EAAAuG,KAAA81E,MAAAv8E,OAAAE,IACA0E,EAAA03E,QAAA71E,KAAA81E,MAAAr8E,GAAAomD,SAGA,IAAApmD,EAAA,EAAAA,EAAAuG,KAAAyrE,SAAAlyE,OAAAE,IACA0E,EAAA2sE,WAAA9qE,KAAAyrE,SAAAhyE,GAAAomD,SAIA,OADA1hD,EAAA+4E,qBAAAl3E,KAAAi3E,WAAAp3B,SACA1hD,GAGA27C,IAGA5gD,OAAA,mCAAA,eAAA,SAAA4gD,GA2JA,OAtJAA,EAAA+9B,MAAA,WAEA73E,KAAA83E,UACA93E,KAAAuyE,UAAA,IAAAz4B,EAAAw4B,aAWAx4B,EAAA+9B,MAAA77E,UAAA+7E,QAAA,SAAA3iE,GAGA,OADApV,KAAA83E,OAAA94E,KAAAoW,GACApV,KAAA83E,OAAAv+E,OAAA,GASAugD,EAAA+9B,MAAA77E,UAAAg8E,UAAA,SAAAF,GAEA,IAAAr+E,EAAA2b,EACA,IAAA3b,EAAA,EAAAA,EAAAq+E,EAAAv+E,OAAAE,IACA2b,EAAA0iE,EAAAr+E,GACAuG,KAAA+3E,QAAA3iE,IAYA0kC,EAAA+9B,MAAA77E,UAAAi8E,QAAA,SAAAn3E,GAEA,OAAAd,KAAA83E,OAAAh3E,IASAg5C,EAAA+9B,MAAA77E,UAAAk8E,UAAA,WAEA,OAAAl4E,KAAA83E,OAAAv+E,QAWAugD,EAAA+9B,MAAA77E,UAAAy2E,YAAA,SAAAC,GAEA,OAAA1yE,KAAAuyE,UAAAE,YAAAC,IAWA54B,EAAA+9B,MAAA77E,UAAA22E,YAAA,SAAA7xE,GAEA,OAAAd,KAAAuyE,UAAAI,YAAA7xE,IASAg5C,EAAA+9B,MAAA77E,UAAA42E,mBAAA,WAEA,OAAA5yE,KAAAuyE,UAAAK,sBASA94B,EAAA+9B,MAAA77E,UAAAm8E,eAAA,WAEA,OAAAn4E,KAAAuyE,WASAz4B,EAAA+9B,MAAA77E,UAAAo8E,cAAA,WAEA,OAAAp4E,KAAAuyE,UAAAM,SASA/4B,EAAA+9B,MAAA77E,UAAA69D,YAAA,WAEA,IACApgE,EADAmP,EAAA,EAEA,IAAAnP,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACAmP,GAAA5I,KAAA83E,OAAAr+E,GAAAogE,cAEA,OAAAjxD,GASAkxC,EAAA+9B,MAAA77E,UAAAs0E,aAAA,WAEA,IACA72E,EADAmP,EAAA,EAEA,IAAAnP,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACAmP,GAAA5I,KAAA83E,OAAAr+E,GAAA62E,eAEA,OAAA1nE,GAGAkxC,IAGA5gD,OAAA,2CAAA,eAAA,SAAA4gD,GAgbA,OAxaAA,EAAAu+B,SAAA,WAEAr4E,KAAA02D,SACA12D,KAAAs4E,UASAx+B,EAAAy+B,SAAA,WAEAv4E,KAAA22D,OAAA,EACA32D,KAAA42D,OAAA,EACA52D,KAAAw4E,OAAA,EACAx4E,KAAAy4E,OAAA,GASA3+B,EAAA4+B,aAAA,WAEA14E,KAAAc,OAAA,EACAd,KAAA8W,SAAA,GASAgjC,EAAA6+B,SAAA,WAEA34E,KAAA44E,SACA54E,KAAA64E,WAWA/+B,EAAAg/B,cAAA,SAAA1jE,GAEApV,KAAA44E,MAAA,KACA54E,KAAA02D,MAAA,KACA12D,KAAAs4E,MAAA,KACAt4E,KAAA+4E,UAAA3jE,IASA0kC,EAAAg/B,cAAA98E,UAAA+8E,UAAA,SAAA3jE,GAQA,SAAA01D,EAAAkO,EAAA5jE,EAAA6+D,GAEA,SAAA1d,EAAAyiB,EAAAC,EAAAC,EAAAC,EAAAlF,GAoBA,IAEAx6E,EAAAu9D,EAFAoiB,EAAA,IAAAt/B,EAAA4+B,aAGA,IAAAj/E,EAAA,EAAAA,EAAAu/E,EAAAtiB,MAAAn9D,OAAAE,KACAu9D,EAAAgiB,EAAAtiB,MAAAj9D,IACAk9D,QAAAuiB,GAAAliB,EAAAJ,QAAAuiB,GACAC,EAAAt4E,MAAArH,EACA2/E,EAAAtiE,SAAA,GACAkgD,EAAAL,QAAAwiB,GAAAniB,EAAAJ,QAAAsiB,IACAE,EAAAt4E,MAAArH,EACA2/E,EAAAtiE,SAAA,GAIA,IAAA,IAAAsiE,EAAAt4E,MAAA,CACA,IAAA+1D,EAAA,IAAA/c,EAAAy+B,SACA1hB,EAAAF,MAAAuiB,EACAriB,EAAAD,MAAAuiB,EACAtiB,EAAA2hB,MAAAvE,EACApd,EAAA4hB,OAAA,EACAO,EAAAtiB,MAAA13D,KAAA63D,GAEAuiB,EAAAt4E,MAAAk4E,EAAAtiB,MAAAn9D,OAAA,EACA6/E,EAAAtiE,SAAA,MACA,CACA,IAAAuiE,EAAAL,EAAAtiB,MAAA0iB,EAAAt4E,QACA,IAAAu4E,EAAAb,MACAa,EAAAb,MAAAvE,EACAoF,EAAAb,QAAAvE,IAAA,IAAAoF,EAAAZ,QACAY,EAAAZ,MAAAxE,IA/CA,SAAA+E,EAAA/E,EAAAiF,EAAAC,EAAAC,EAAAH,GAEA,SAAAK,EAAAC,EAAAC,EAAA/iB,IAEA,GAAA8iB,EAAA7iB,MAAA/0D,QAAA80D,IACA8iB,EAAA7iB,MAAA13D,KAAAy3D,IAEA,GAAA8iB,EAAAjB,MAAA32E,QAAA63E,IACAD,EAAAjB,MAAAt5E,KAAAw6E,GAIAP,EAAAL,MAAA55E,KAAAk6E,GACAD,EAAAJ,OAAA75E,KAAAo6E,GACAE,EAAAN,EAAAJ,MAAAM,GAAAjF,EAAAmF,EAAAt4E,OACAw4E,EAAAN,EAAAJ,MAAAO,GAAAlF,EAAAmF,EAAAt4E,OAoCA24E,CAAAT,EAAA/E,EAAAiF,EAAAC,EAAAC,EAAAH,GAGA,IAGAx/E,EAAA2gE,EAAA/vD,EAHAwyD,EAAAznD,EAAAm7D,WAAA0D,GACAyF,EAAA,IAAA5/B,EAAA6+B,SAGA/vE,EAAAi0D,EAAAwX,mBACA,IAAA56E,EAAA,EAAAA,EAAAmP,EAAAnP,IACA2gE,EAAAyC,EAAAqW,eAAAz5E,GACA4Q,EAAAwyD,EAAAqW,eAAAz5E,EAAAmP,EAAA,EAAAnP,EAAA,EAAA,GACA88D,EAAAyiB,EAAAU,EAAAtf,EAAA/vD,EAAA4pE,GAEA+E,EAAAV,MAAAt5E,KAAA06E,GAOA,IAAAjgF,EAjFAu/E,EAEAO,EAgFA,IALAv5E,KAAA44E,SACA54E,KAAA02D,SACA12D,KAAAs4E,SAGA7+E,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IAlFAu/E,EAmFAh5E,UAjFAu5E,EAAAA,EAAA,IAAAz/B,EAAAu+B,SACAW,EAAAJ,MAAA55E,KAAAu6E,GAmFA,IAAA9/E,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACAqxE,EAAA9qE,KAAAoV,EAAA3b,IAYAqgD,EAAAg/B,cAAA98E,UAAA29E,gBAAA,SAAAJ,GAEA,IAAA9/E,EAAAu9D,EACA,IAAAv9D,EAAA,EAAAA,EAAA8/E,EAAA7iB,MAAAn9D,OAAAE,IAEA,GADAu9D,EAAAuiB,EAAA7iB,MAAAj9D,GACAuG,KAAA45E,cAAA55E,KAAA02D,MAAAM,IACA,OAAA,EAGA,OAAA,GAWAld,EAAAg/B,cAAA98E,UAAA49E,cAAA,SAAA5iB,GAEA,IAAA6iB,EAAA75E,KAAA85E,oBAAA9iB,GACA,OAAA,GAAA6iB,GAWA//B,EAAAg/B,cAAA98E,UAAA89E,oBAAA,SAAA9iB,GAEA,IAAA6iB,EAAA,EAOA,OANA,GAAA7iB,EAAAwhB,QACAqB,GAAA,IAEA,GAAA7iB,EAAAyhB,QACAoB,GAAA,GAEAA,GAYA//B,EAAAg/B,cAAA98E,UAAA+9E,qBAAA,SAAA/iB,EAAA0iB,GAEA,OAAA,GAAA1iB,EAAAwhB,OAAAxhB,EAAAwhB,OAAAkB,EACA1iB,EAAAwhB,OACA,GAAAxhB,EAAAyhB,OAAAzhB,EAAAyhB,OAAAiB,EACA1iB,EAAAyhB,OAEA,GAWA3+B,EAAAg/B,cAAA98E,UAAAg+E,uBAAA,SAAAC,GAEA,OAAAA,EAAAnjE,QAGA9W,KAAA02D,MAAAujB,EAAAn5E,OAAA81D,MAFA52D,KAAA02D,MAAAujB,EAAAn5E,OAAA61D,OAcA7c,EAAAg/B,cAAA98E,UAAAk+E,qBAAA,SAAAD,GAEA,OAAAA,EAAAnjE,QAGA9W,KAAA02D,MAAAujB,EAAAn5E,OAAA61D,MAFA32D,KAAA02D,MAAAujB,EAAAn5E,OAAA81D,OAiBA9c,EAAAqgC,6BAAA,SAAA/kE,GAEA,IAEA3b,EAAA2J,EAKAy5D,EAPA1+D,KAGA,IAAA1E,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACA0E,EAAAa,SAIA,IAAAvF,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAEA,IADAojE,EAAAznD,EAAAm7D,WAAA92E,GACA2J,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IACAjF,EAAA0+D,EAAAqW,eAAA9vE,IAAApE,KAAAvF,GAIA,OAAA0E,GAaA27C,EAAAsgC,YAAA,SAAAhlE,GAEA,IAKA3b,EAAAu9D,EALAgiB,EAAA,IAAAl/B,EAAAg/B,cAAA1jE,GACA,GAAA,IAAA4jE,EAAAtiB,MAAAn9D,OACA,OAAA,EAIA,IAAAE,EAAA,EAAAA,EAAAu/E,EAAAtiB,MAAAn9D,OAAAE,IAEA,IAAA,KADAu9D,EAAAgiB,EAAAtiB,MAAAj9D,IACA++E,QAAA,IAAAxhB,EAAAyhB,MACA,OAAA,EAGA,OAAA,GAcA3+B,EAAAugC,eAAA,SAAAjlE,GAEA,IACA3b,EAAA2J,EAAA4zD,EAAAoiB,EAAArvD,EAAAyuD,EAAAC,EAAA6B,EAAAC,EADAvB,EAAA,IAAAl/B,EAAAg/B,cAAA1jE,GAEA,IAAA3b,EAAA,EAAAA,EAAAu/E,EAAAtiB,MAAAn9D,OAAAE,IAAA,CAEA,IAAA,KADAu9D,EAAAgiB,EAAAtiB,MAAAj9D,IACA++E,QAAA,IAAAxhB,EAAAyhB,MACA,OAAA,EAKA,IAFAD,EAAAQ,EAAAV,MAAAthB,EAAAwhB,OACAzuD,GAAA,EACA3mB,EAAA,EAAAA,EAAAo1E,EAAAK,OAAAt/E,OAAA6J,IAEA,IADAg2E,EAAAZ,EAAAK,OAAAz1E,IACAtC,OAAArH,EAAA,CACA6gF,EAAAlB,EAAAtiE,QACAiT,GAAA,EACA,MAGA,IAAAA,EACA,OAAA,EAKA,IAFA0uD,EAAAO,EAAAV,MAAAthB,EAAAyhB,OACA1uD,GAAA,EACA3mB,EAAA,EAAAA,EAAAq1E,EAAAI,OAAAt/E,OAAA6J,IAEA,IADAg2E,EAAAX,EAAAI,OAAAz1E,IACAtC,OAAArH,EAAA,CACA8gF,EAAAnB,EAAAtiE,QACAiT,GAAA,EACA,MAGA,IAAAA,EACA,OAAA,EAGA,GAAAuwD,GAAAC,EACA,OAAA,EAGA,OAAA,GAgBAzgC,EAAA0gC,wBAAA,SAAAhB,EAAAR,EAAAyB,GAEA,SAAAC,EAAAlB,EAAAR,EAAA2B,GAEA,IACAlhF,EAAAu9D,EAAA4jB,EADAlB,EAAAV,EAAAV,MAAAkB,GAEA,IAAA//E,EAAA,EAAAA,EAAAigF,EAAAb,OAAAt/E,OAAAE,IACAu9D,EAAAgiB,EAAAtiB,MAAAgjB,EAAAb,OAAAp/E,GAAAqH,QAEA,IADA85E,EAAA5B,EAAAe,qBAAA/iB,EAAAwiB,KAEAmB,EAAA37E,KAAA47E,GAQA,IAHA,IAEAC,EAFAC,KACAH,GAAAnB,GAEAmB,EAAAphF,OAAA,GACAshF,EAAAF,EAAA/6E,MACAk7E,EAAAD,KAIAC,EAAAD,IAAA,EACAJ,EAAAI,IACAH,EAAAG,EAAA7B,EAAA2B,KAKA7gC,IAGA5gD,OAAA,uCAAA,eAAA,SAAA4gD,GAmeA,OAzdAA,EAAAihC,gBAAA,SAAA3lE,EAAA8sB,EAAAC,EAAAqf,GAEA,OAAApsC,EAAAghD,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,EAAAC,EAAAqf,MAUA1H,EAAAkhC,eAAA,SAAA5lE,EAAAihD,GAEA,OAAAjhD,EAAAwgE,SAAA,IAAA97B,EAAAm5B,UAAA5c,KAWAvc,EAAAmhC,cAAA,SAAA7lE,EAAA+3C,EAAAxwC,GAEA,OAAAvH,EAAAygE,QAAA,IAAA/7B,EAAA05B,SAAArmB,EAAAxwC,KAUAm9B,EAAAohC,iBAAA,SAAA9lE,EAAAkhD,GAEA,OAAAlhD,EAAA01D,WAAA,IAAAhxB,EAAA+5B,YAAAvd,KAaAxc,EAAAqhC,UAAA,SAAA/lE,GAEA,IACA3b,EAAA2J,EAAAyqE,EAAA14D,EAAA0nD,EADAZ,EAAA7mD,EAAAykD,cAEA,IAAApgE,EAAA,EAAAA,EAAA2b,EAAA0hE,aAAAr9E,IAEA,IADAo0E,EAAAz4D,EAAA6gE,SAAAx8E,IACAy5E,iBAAA,GAAArF,EAAAqF,kBAAAjX,EACA,OAAA,EAGA,IAAAxiE,EAAA,EAAAA,EAAA2b,EAAA2hE,YAAAt9E,IAAA,CAEA,IADA0b,EAAAC,EAAA8gE,QAAAz8E,IACAg6E,oBAAA,GAAAt+D,EAAAs+D,qBAAAxX,EACA,OAAA,EAEA,GAAA9mD,EAAAw+D,oBAAA,GAAAx+D,EAAAw+D,qBAAA1X,EACA,OAAA,EAGA,IAAAxiE,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAAA,CAEA,IADAojE,EAAAznD,EAAAm7D,WAAA92E,IACA46E,mBAAA,EACA,OAAA,EAEA,IAAAjxE,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IACA,GAAAy5D,EAAAqW,eAAA9vE,GAAA,GAAAy5D,EAAAqW,eAAA9vE,IAAA64D,EACA,OAAA,EAIA,OAAA,GAYAniB,EAAAshC,2BAAA,SAAAhmE,EAAAtU,GAEA,IAKArH,EAAA4hF,EAAAl1B,EAAA3tC,EAAAnO,EALAwyD,EAAAznD,EAAAm7D,WAAAzvE,GACA8H,EAAAi0D,EAAAwX,mBAEA7rC,EAAA,IAAAsR,EAAAoI,OAAA,EAAA,EAAA,GACA,GAAAt5C,GAAA,EAEA,IAAAnP,EAAA,EAAAA,EAAAmP,EAAAnP,IACA4hF,EAAA5hF,EACA0sD,GAAA1sD,EAAA,GAAAmP,EAEA4P,EAAApD,EAAA2gE,kBAAAlZ,EAAAqW,eAAAmI,IACAhxE,EAAA+K,EAAA2gE,kBAAAlZ,EAAAqW,eAAA/sB,IAEA3d,EAAAtG,IAAA1pB,EAAA2pB,EAAA93B,EAAA83B,IAAA3pB,EAAAgpC,EAAAn3C,EAAAm3C,GACAhZ,EAAArG,IAAA3pB,EAAAgpC,EAAAn3C,EAAAm3C,IAAAhpC,EAAA0pB,EAAA73B,EAAA63B,GACAsG,EAAAgZ,IAAAhpC,EAAA0pB,EAAA73B,EAAA63B,IAAA1pB,EAAA2pB,EAAA93B,EAAA83B,GAKA,OADAqG,EAAAsX,YACAtX,GAWAsR,EAAAwhC,4BAAA,SAAAlmE,GAEA,IAEA3b,EAFA0E,KAGA,IAAA1E,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACA0E,EAAAa,KAAA86C,EAAAshC,2BAAAhmE,EAAA3b,IAGA,OAAA0E,GAaA27C,EAAAyhC,2BAAA,SAAAnmE,GAEA,IAIA3b,EAAA2J,EAAAmqE,EAAA1Q,EAAAr0B,EACAgzC,EAAA5yE,EAAA6yE,EALAt9E,KACAu9E,EAAA5hC,EAAAwhC,4BAAAlmE,GACAumE,EAAA,KAIA,IAAAliF,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAIA,GAHAojE,EAAAznD,EAAAm7D,WAAA92E,GACA0E,EAAA1E,MAEAojE,EAAAyX,gBAIA,IAHA,OAAAqH,IACAA,EAAA7hC,EAAAqgC,6BAAA/kE,IAEAhS,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IAAA,CAKA,IAJAo4E,EAAA,IAAA1hC,EAAAoI,OAAA,EAAA,EAAA,GACAt5C,EAAA,EAEA6yE,EAAAE,EAAA9e,EAAAqW,eAAA9vE,IACAmqE,EAAA,EAAAA,EAAAkO,EAAAliF,OAAAg0E,IACAn4D,EAAAm7D,WAAAkL,EAAAlO,IACAgH,kBAAA1X,EAAA0X,kBACAiH,EAAA1hC,EAAAyI,SAAAi5B,EAAAE,EAAAD,EAAAlO,KACA3kE,KAIA4yE,EAAAr7B,eAAA,EAAAv3C,GACA4yE,EAAA17B,YACA3hD,EAAA1E,GAAAuF,KAAAw8E,QAIA,IADAhzC,EAAAkzC,EAAAjiF,GACA2J,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IACAjF,EAAA1E,GAAAuF,KAAA,IAAA86C,EAAAoI,OAAA1Z,EAAAtG,EAAAsG,EAAArG,EAAAqG,EAAAgZ,IAKA,OAAArjD,GAYA27C,EAAA8hC,4BAAA,SAAA/e,EAAAgf,GAEA,IAGApiF,EAAAgf,EAHAqjE,KACAlzE,EAAAi0D,EAAAhD,cAGA,IAAApgE,EAAA,EAAAA,EAAAmP,EAAAnP,IACAqiF,EAAA98E,KAAA,GAGA,IAAAvF,EAAA,EAAAA,EAAAmP,EAAAnP,IACAgf,EAAAqjE,EAAAjf,EAAA7C,cAAAvgE,IACAojE,EAAA1C,eAAA1gE,GAAAoiF,EACAC,EAAAriF,GAAAgf,EAEAqjE,EAAAriF,GAAAgf,EAAA,EAIA,IAAAsjE,EAAAD,EAAA,GACAE,EAAAF,EAAAlzE,EAAA,GACA,GAAA,IAAAmzE,GAAAA,GAAAC,EACA,IAAAviF,EAAA,EAAAqiF,EAAAriF,IAAAsiF,EAAAtiF,IACAqiF,EAAAriF,GAAAuiF,EAIA,OAAAF,GAaAhiC,EAAAmiC,yBAAA,SAAA7mE,EAAAtU,GAEA,IAIArH,EAJAojE,EAAAznD,EAAAm7D,WAAAzvE,GACA8H,EAAAi0D,EAAAwX,mBAEAl2E,EAAA,IAAA27C,EAAAyH,MAAA,EAAA,EAAA,GAEA,IAAA9nD,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAA27C,EAAAyI,SAAApkD,EAAAiX,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,KAIA,OADA0E,EAAAgiD,eAAA,EAAAv3C,GACAzK,GASA27C,EAAAoiC,kBAAA,SAAA9mE,GAEA,IAAA3b,EACA,IAAAA,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACA2b,EAAAm7D,WAAA92E,GACAi7E,wBAcA56B,EAAAqiC,mBAAA,SAAA/mE,EAAAtU,EAAA4jD,EAAAlE,EAAAC,GAEA,IAOAhnD,EAAA2iF,EAAAC,EAPAC,EAAAlnE,EAAA2gE,kBAAAj1E,GAAA++C,QAGA3/C,EAAAugD,EAEA1rC,EAAA+kC,EAAAi0B,sBAAArpB,EAAAxkD,EADA,EAFA,MAMA,IAAAzG,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACA2iF,EAAAE,EAAA78B,WAAArqC,EAAAukD,UAAAlgE,GAAAqoB,UACAg4B,EAAA2E,UAAA29B,EAAA13B,KAIA23B,EAAAviC,EAAAm0B,iBAAAmO,EAAA37B,EAVA,EAUA1rC,GACAK,EAAA2gE,kBAAAt8E,GAAA8mD,OAAAC,EAAA67B,KAYAviC,EAAAyiC,iBAAA,SAAAnnE,GAEA,IAEA3b,EAFA0E,EAAA,IAAA27C,EAAA67B,KAGA,IAAAl8E,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACA0E,EAAAi4D,UAAAhhD,EAAAukD,UAAAlgE,GAAAomD,SAGA,IACAmX,EADAgiB,EAAA,IAAAl/B,EAAAg/B,cAAA1jE,GAEA,IAAA3b,EAAA,EAAAA,EAAAu/E,EAAAtiB,MAAAn9D,OAAAE,IACAu9D,EAAAgiB,EAAAtiB,MAAAj9D,GACAqgD,EAAAmhC,cAAA98E,EAAA64D,EAAAL,MAAAK,EAAAJ,OAGA,OAAAz4D,GAWA27C,EAAA0iC,yBAAA,SAAApnE,GAEA,IACA3b,EAAA2J,EAAAq5E,EAAAC,EAAAC,EAAA/E,EAAA/a,EAAAzC,EAAA/vD,EADAuyE,EAAAxnE,EAAAk7D,eAEA,IAAA72E,EAAA,EAAAA,EAAAmjF,EAAAnjF,IAKA,IAJAgjF,EAAA3iC,EAAAmiC,yBAAA7mE,EAAA3b,GACAijF,EAAAtnE,EAAAghD,UAAA,IAAAtc,EAAAg5B,WAAA2J,IACAE,EAAAvnE,EAAAm7D,WAAA92E,GACAm+E,EAAA+E,EAAAtI,mBACAjxE,EAAA,EAAAA,EAAAw0E,EAAAx0E,IACAg3D,EAAAuiB,EAAAzJ,eAAA9vE,GACAiH,EAAAsyE,EAAAzJ,eAAA9vE,EAAAw0E,EAAA,EAAAx0E,EAAA,EAAA,IACAy5D,EAAA,IAAA/iB,EAAA+5B,aAAAzZ,EAAA/vD,EAAAqyE,KACAnJ,kBAAAoJ,GACAvnE,EAAA01D,WAAAjO,GAGA,IAAApjE,EAAA,EAAAA,EAAAmjF,EAAAnjF,IACA2b,EAAAyhE,cAAA,IAUA/8B,EAAA+iC,oBAAA,SAAAznE,GAEA,IACA3b,EAAA2J,EAAAu5E,EAAA9f,EAAArd,EAAAs9B,EAAA1lB,EAAA2lB,EADAH,EAAAxnE,EAAAk7D,eAEA,IAAA72E,EAAA,EAAAA,EAAAmjF,EAAAnjF,IAAA,CAGA,IAFAkjF,EAAAvnE,EAAAm7D,WAAA92E,GACAojE,EAAA,IAAA/iB,EAAAskB,QACAh7D,EAAA,EAAAA,EAAAu5E,EAAAtI,mBAAAjxE,IACAo8C,EAAApqC,EAAA2gE,kBAAA4G,EAAAzJ,eAAA9vE,IACAy5D,EAAAzG,UAAA5W,EAAAtd,EAAAsd,EAAArd,EAAAqd,EAAAgC,GAGA,GAAA,QADAs7B,EAAAhjC,EAAA8uB,mBAAA/L,IAEA,IAAAz5D,EAAA,EAAAA,EAAA05E,EAAAvjF,OAAA6J,IACAg0D,EAAA0lB,EAAA15E,IACA25E,EAAA,IAAAjjC,EAAA+5B,aACA8I,EAAAzJ,eAAA9b,EAAA,IACAulB,EAAAzJ,eAAA9b,EAAA,IACAulB,EAAAzJ,eAAA9b,EAAA,OAEAmc,kBAAAoJ,GACAvnE,EAAA01D,WAAAiS,GAIA,IAAAtjF,EAAA,EAAAA,EAAAmjF,EAAAnjF,IACA2b,EAAAyhE,cAAA,IAYA/8B,EAAAkjC,wBAAA,SAAA5nE,EAAAm9D,EAAA0K,GAEA,SAAAC,EAAAD,EAAA1iC,GAUA,YALAz9C,IAAAmgF,GAAAA,EACAnjC,EAAAQ,gBAJA,EACA,SAGAC,EAAA,GAEAT,EAAAK,UANA,EACA,UAUA,IAAA1gD,EAAA0jF,EAAAzK,EACAn4B,EAAA,EACA,IAAA9gD,EAAA,EAAAA,EAAA2b,EAAA2hE,YAAAt9E,IACA0jF,EAAAD,EAAAD,EAAA1iC,KACAm4B,EAAAH,EAAAE,YAAA,IAAA34B,EAAA43B,UAAAE,QAAAuL,EAAAtL,QAAAsL,KACA/nE,EAAA8gE,QAAAz8E,GAAA65E,iBAAAZ,GAEA,IAAAj5E,EAAA,EAAAA,EAAA2b,EAAA0hE,aAAAr9E,IACA0jF,EAAAD,EAAAD,EAAA1iC,KACAm4B,EAAAH,EAAAE,YAAA,IAAA34B,EAAA43B,UAAAE,QAAAuL,EAAAtL,QAAAsL,KACA/nE,EAAA6gE,SAAAx8E,GAAA65E,iBAAAZ,GAEA,IAAAj5E,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACA0jF,EAAAD,EAAAD,EAAA1iC,KACAm4B,EAAAH,EAAAE,YAAA,IAAA34B,EAAA43B,UAAAE,QAAAuL,EAAAtL,QAAAsL,KACA/nE,EAAAm7D,WAAA92E,GAAA65E,iBAAAZ,IAYA54B,EAAAsjC,iBAAA,SAAAhoE,EAAAu2D,EAAA1iE,GAEA,SAAAo0E,EAAAjoE,EAAAtU,EAAA47C,GAEA,IAAAmgB,EAAAznD,EAAAm7D,WAAAzvE,GACA47C,EAAAg2B,SAAA7V,EAAAwW,mBACA,IACA55E,EAAA+lD,EADArhD,EAAA,IAAA27C,EAAAskB,QAEA,IAAA3kE,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACA+lD,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,IACA0E,EAAAi4D,UAAA5W,EAAAtd,EAAAsd,EAAArd,EAAAqd,EAAAgC,GAEA,OAAArjD,EAGA,IAAA1E,EAAAojE,EAAAngB,EACA,IAAAjjD,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAMAojE,EAAAwgB,EAAAjoE,EAAA3b,EALAijD,GACAzzC,GAAAA,EACA42D,gBAAApmE,EACAi5E,UAAA,IAGA/G,EAAAb,WAAAjO,EAAAngB,IAIA5C,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GAoUA,OA1TAA,EAAAwjC,4BAAA,SAAA99B,EAAA+9B,GAEA,IAAAp/E,EAAA,IAAA27C,EAAAwF,QAAA,EAAA,GAEA6M,EAAAoxB,EAAApxB,GAAAtM,QAAAC,YACAsM,EAAAmxB,EAAAnxB,GAAAvM,QAAAC,YACAuM,EAAAvS,EAAAqI,YAAAo7B,EAAApxB,GAAAoxB,EAAAnxB,IAEAoxB,EAAA1jC,EAAAqa,8BAAAopB,EAAA38B,MAAAyL,GACAoxB,EAAA3jC,EAAAqa,8BAAAopB,EAAA38B,MAAAwL,GACAsxB,EAAA5jC,EAAAqa,8BAAAopB,EAAA38B,MAAAuL,GAEAmE,EAAAktB,EAAAzuB,aAAAvP,GAIA,OAHArhD,EAAA+jC,EAAAw7C,EAAA14B,oBAAAsL,GACAnyD,EAAAgkC,EAAAs7C,EAAAz4B,oBAAAsL,GAEAnyD,GAaA27C,EAAA6jC,2BAAA,SAAAn+B,EAAAhX,EAAA+0C,GAEA,IASA9jF,EAAAmkF,EAAA59B,EATA7hD,EAAA,IAAA27C,EAAAwF,QAAA,EAAA,GAEA6M,EAAAoxB,EAAApxB,GAAAtM,QAAAC,YACAsM,EAAAmxB,EAAAnxB,GAAAvM,QAAAC,YACAuM,EAAAkxB,EAAAlxB,GAAAxM,QAAAC,YAEA+9B,GAAA,EACAC,EAAA,EAGA,IAAArkF,EAAA,EAAAA,EAAA,EAAAA,IACA,IAAAA,EACAmkF,EAAAzxB,EACA,IAAA1yD,EACAmkF,EAAAxxB,EACA,IAAA3yD,IACAmkF,EAAAvxB,GAGArM,EAAA32C,KAAAu5B,IAAAkX,EAAA2H,UAAAjZ,EAAAo1C,IACA9jC,EAAA2E,UAAAuB,EAAA89B,KACAD,EAAApkF,EACAqkF,EAAA99B,GAIA,IAAA,IAAA69B,EACA,OAAA1/E,EAGA,IAAA4/E,EAAA,KAwBA,OAvBA,IAAAF,EACAE,EAAA,IAAAjkC,EAAAoS,YACAqxB,EAAA38B,MACAwL,EACAC,EACA,IAAAvS,EAAAyH,MAAA,EAAA,EAAA,IAEA,IAAAs8B,EACAE,EAAA,IAAAjkC,EAAAoS,YACAqxB,EAAA38B,MACAuL,EACAE,EACA,IAAAvS,EAAAyH,MAAA,EAAA,EAAA,IAEA,IAAAs8B,IACAE,EAAA,IAAAjkC,EAAAoS,YACAqxB,EAAA38B,MACAuL,EACAC,EACA,IAAAtS,EAAAyH,MAAA,EAAA,EAAA,KAIA,OAAAw8B,EACA5/E,EAGA27C,EAAAwjC,4BAAA99B,EAAAu+B,IAaAjkC,EAAAkkC,iCAAA,SAAAx+B,EAAAhX,EAAA+0C,GAEA,IAAAp/E,EAAA,IAAA27C,EAAAwF,QAAA,EAAA,GAEA2+B,EAAAV,EAAAlxB,GAAAxM,QAAAC,YACA,GAAAm+B,EAAAv8B,gBAAAlZ,GAEA,OADArqC,EAAA27C,EAAA6jC,2BAAAn+B,EAAAhX,EAAA+0C,GACA,GAGA,IAAAW,EAAA,IAAApkC,EAAAuW,KAAAktB,EAAA38B,MAAAq9B,GACAE,EAAAD,EAAAnvB,aAAAvP,GACA4+B,EAAAtkC,EAAAkL,oBAAAu4B,EAAA38B,MAAAu9B,EAAAF,GAEAI,EAAAd,EAAApxB,GAAAtM,QAAAC,YACAw+B,EAAAxkC,EAAA0I,SAAAhD,EAAA2+B,GACAx9B,EAAA7G,EAAAmL,oBAAAq5B,EAAAD,EAAAJ,GACAv5B,EAAA64B,EAAApxB,GAAAjM,SAIA,OAFA/hD,EAAA+jC,EAAAye,EAAA+D,EACAvmD,EAAAgkC,EAAAi8C,GACAjgF,EAAAwiD,IAYA7G,EAAAykC,oCAAA,SAAAnpE,EAAAtU,GAEA,IAIArH,EAAA+lD,EAJArhD,KACA0+D,EAAAznD,EAAAm7D,WAAAzvE,GACAy8E,EAAAnoE,EAAA4hE,uBAAA9B,YAGA,IAAAz7E,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACA+lD,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,IACA0E,EAAAa,KAAA86C,EAAAwjC,4BAAA99B,EAAA+9B,IAGA,OAAAp/E,GAaA27C,EAAA0kC,mCAAA,SAAAppE,EAAAtU,EAAA0nC,GAEA,IAIA/uC,EAAA+lD,EAJArhD,KACA0+D,EAAAznD,EAAAm7D,WAAAzvE,GACAy8E,EAAAnoE,EAAA4hE,uBAAA9B,YAGA,IAAAz7E,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACA+lD,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,IACA0E,EAAAa,KAAA86C,EAAA6jC,2BAAAn+B,EAAAhX,EAAA+0C,IAGA,OAAAp/E,GAaA27C,EAAA2kC,yCAAA,SAAArpE,EAAAtU,EAAA0nC,GAEA,IAMA/uC,EAAA2J,EAAAo8C,EAAAk/B,EANAvgF,KACAwgF,KAEA9hB,EAAAznD,EAAAm7D,WAAAzvE,GACAy8E,EAAAnoE,EAAA4hE,uBAAA9B,YAGA,IAAAz7E,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACA+lD,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,IACAilF,EAAA5kC,EAAAkkC,iCAAAx+B,EAAAhX,EAAA+0C,GACAp/E,EAAAa,KAAA0/E,EAAA,IACAC,EAAA3/E,KAAA0/E,EAAA,IAGA,IAAAT,EAAAV,EAAAlxB,GAAAxM,QAAAC,YACA,GAAAm+B,EAAAv8B,gBAAAlZ,GACA,OAAArqC,EAGA,IAAAygF,GAAA,EACA,IAAAnlF,EAAA,EAAAA,EAAAklF,EAAAplF,OAAAE,IAAA,CACA,IAAA2J,EAAA3J,EAAA,EAAA2J,EAAAu7E,EAAAplF,OAAA6J,IACA,GAAA02C,EAAA2E,UAAAp1C,KAAAu5B,IAAA+7C,EAAAllF,GAAAklF,EAAAv7E,IAAAiG,KAAA61C,IAAA,CACA0/B,GAAA,EACA,MAGA,GAAAA,EACA,MAIA,GAAAA,EAAA,CACA,IAAAl6B,EAAA64B,EAAApxB,GAAAjM,SACA,IAAAzmD,EAAA,EAAAA,EAAAklF,EAAAplF,OAAAE,IACAqgD,EAAA0E,QAAAmgC,EAAAllF,GAAA4P,KAAA61C,MACA/gD,EAAA1E,GAAAyoC,EAAAwiB,GAAAi6B,EAAAllF,GAAA,EAAA4P,KAAA61C,KAKA,OAAA/gD,GAWA27C,EAAA+kC,iCAAA,SAAAzpE,GAEA,IACA3b,EADA0E,KAEA,IAAA1E,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACA0E,EAAAa,KAAA86C,EAAAykC,oCAAAnpE,EAAA3b,IAEA,OAAA0E,GAWA27C,EAAAglC,gCAAA,SAAA1pE,GAEA,IAEA3b,EAAA+uC,EAFArqC,KACAu9E,EAAA5hC,EAAAwhC,4BAAAlmE,GAEA,IAAA3b,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACA+uC,EAAAkzC,EAAAjiF,GACA0E,EAAAa,KAAA86C,EAAA0kC,mCAAAppE,EAAA3b,EAAA+uC,IAEA,OAAArqC,GAWA27C,EAAAilC,sCAAA,SAAA3pE,GAEA,IAEA3b,EAAA+uC,EAFArqC,KACAu9E,EAAA5hC,EAAAwhC,4BAAAlmE,GAEA,IAAA3b,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACA+uC,EAAAkzC,EAAAjiF,GACA0E,EAAAa,KAAA86C,EAAA2kC,yCAAArpE,EAAA3b,EAAA+uC,IAEA,OAAArqC,GAaA27C,EAAAklC,2BAAA,SAAA5pE,GAEA,IAAAjX,KACA84E,EAAA7hE,EAAA4hE,uBAAA/B,UASA,OARAgC,IAAAn9B,EAAA66B,sBAAAC,OACAz2E,EAAA27C,EAAA+kC,iCAAAzpE,GACA6hE,IAAAn9B,EAAA66B,sBAAAE,MACA12E,EAAA27C,EAAAglC,gCAAA1pE,GACA6hE,IAAAn9B,EAAA66B,sBAAAG,cACA32E,EAAA27C,EAAAilC,sCAAA3pE,IAGAjX,GAGA27C,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GAwMA,OA9LAA,EAAAmlC,eAAA,SAAA7pE,EAAAg/C,GAEA,SAAA8qB,EAAAriB,EAAAzI,EAAA+qB,GAEA,SAAAle,EAAAngE,EAAAu1D,EAAA+oB,EAAAC,GAEAD,EAAApgF,KAAA,IAAA86C,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,IACA69B,EAAArgF,KAAA8B,GAGA,SAAA+/D,EAAA5pD,EAAAijC,EAAAklC,EAAAC,GAEA,IAAA7+B,EAAA1G,EAAA0I,SAAAqa,EAAA3iB,GAAA2iB,EAAA5lD,IAAA6oC,YACA3qC,EAAA,IAAA2kC,EAAAuW,KAAAwM,EAAA5lD,GAAAupC,GACAoN,EAAAwG,EAAAF,iBAAA/+C,GACAiqE,EAAApgF,KAAA,IAAA86C,EAAAyH,MAAAqM,EAAA1rB,EAAA0rB,EAAAzrB,EAAAyrB,EAAApM,IACA69B,EAAArgF,MAAA,GAGA,IAMAvF,EAAAqoB,EAAAu0C,EANAipB,OAAAxiF,IAAAqiF,GAAA,OAAAA,EACAv2E,EAAAi0D,EAAAtjE,OACA4E,KACAohF,KAEAC,GAAA,EAEA,IAAA/lF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA48D,EAAAwG,EAAApjE,GACAqoB,EAAAsyC,EAAA/G,cAAAgJ,GACAkpB,EAAAvgF,KAAA8iB,IAAAg4B,EAAAwZ,mBAAAG,oBACAh6D,EAAA,GAAA8lF,EAAA9lF,EAAA,KAAA8lF,EAAA9lF,KACA+lF,GAAA,GAIA,IAAAA,EAAA,CACA,IAAA,IAAAD,EAAA,GACA,OAAAphF,EAGA,IAAA1E,EAAA,EAAAA,EAAAmP,EAAAnP,IACA48D,EAAAwG,EAAApjE,GACA0E,EAAAa,KAAA,IAAA86C,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,IACA89B,GACAH,EAAAngF,KAAAvF,GAGA,OAAA0E,EAGA,IAGA8Y,EAAAijC,EAqBAulC,EACApE,EACAja,EACAse,EA3BAN,KACAC,KAGA,IAAA5lF,EAAA,EAAAA,EAAAmP,EAAAnP,IACAwd,EAAAxd,EAAA,EACAygD,EAAAzgD,EACA,IAAAA,IACAwd,EAAArO,EAAA,GAGAytD,EAAAwG,EAAA3iB,GACAqlC,EAAArlC,IACAqlC,EAAAtoE,IACA4pD,EAAA5pD,EAAAijC,EAAAklC,EAAAC,GAEApe,EAAA/mB,EAAAmc,EAAA+oB,EAAAC,IAEAE,EAAAtoE,IACA4pD,EAAA5pD,EAAAijC,EAAAklC,EAAAC,GASA,IAAA5lF,EAAA,EAAAA,EAAA2lF,EAAA7lF,OAAAE,IACAgmF,EAAAL,EAAA3lF,GACA2nE,EAAAjjE,EAAAA,EAAA5E,OAAA,GACA,IAAAE,GAAA2nE,EAAA1iB,QAAA+gC,GAOAH,IAEAI,EAAAL,EAAA5lF,EAAA,IACA,KAFA4hF,EAAAgE,EAAA5lF,IAGA0lF,EAAAA,EAAA5lF,OAAA,GAAA8hF,GACA,IAAAqE,IACAP,EAAAA,EAAA5lF,OAAA,GAAAmmF,KAZAvhF,EAAAa,KAAA,IAAA86C,EAAAyH,MAAAk+B,EAAAv9C,EAAAu9C,EAAAt9C,EAAAs9C,EAAAj+B,IACA89B,IACAjE,EAAAgE,EAAA5lF,GACA0lF,EAAAngF,KAAAq8E,KAeA,OAAAl9E,EAGA,SAAAwhF,EAAAxhF,EAAAk4D,EAAAupB,GAEA,IAEAnmF,EAFAqH,GAAA,EAGA,IAAArH,EAAAmmF,EAAAnmF,EAAA0E,EAAA07D,cAAApgE,IACA,GAAA48D,EAAA3X,QAAAvgD,EAAA43E,kBAAAt8E,IAAA,CACAqH,EAAArH,EACA,MAQA,OAJA,IAAAqH,IACAA,EAAA3C,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,MAGA1gD,EAGA,IAQArH,EAAA2J,EAAAy5D,EAAAgjB,EAAAC,EACAC,EAAAZ,EAsBA9oB,EA/BAl4D,EAAA,IAAA27C,EAAA67B,KAEAqK,KACAC,KAEAC,KACAC,KAIA,IAAA1mF,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAAA,CAIA,IAHAojE,EAAAznD,EAAAm7D,WAAA92E,GAEAomF,KACAz8E,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IACA08E,EAAA1qE,EAAA2gE,kBAAAlZ,EAAAqW,eAAA9vE,IACAy8E,EAAA7gF,KAAA,IAAA86C,EAAAyH,MAAAu+B,EAAA59C,EAAA49C,EAAA39C,EAAA29C,EAAAt+B,IAKA,IADAu+B,EAAAb,EAAAW,EAAAzrB,EADA+qB,MAEA/7E,EAAA,EAAAA,EAAA+7E,EAAA5lF,OAAA6J,KACA,IAAA+7E,EAAA/7E,KACA88E,EAAArjB,EAAAqW,eAAAiM,EAAA/7E,MAAA,GAIA48E,EAAAhhF,KAAA+gF,GACAE,EAAAjhF,KAAAmgF,GAIA,IAAA1lF,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACAymF,EAAAzmF,KACA48D,EAAAjhD,EAAA2gE,kBAAAt8E,GACA0mF,EAAA1mF,GAAA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,MAIA,IAEAm2B,EAAAyI,EAFAR,EAAAzhF,EAAA07D,cAGA,IAAApgE,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAIA,GAHAojE,EAAAznD,EAAAm7D,WAAA92E,GACAsmF,EAAAC,EAAAvmF,GAEA,KADA0lF,EAAAc,EAAAxmF,IACAF,OAAA,CAKA,IADA6mF,KACAh9E,EAAA,EAAAA,EAAA+7E,EAAA5lF,OAAA6J,KACA,IAAA+7E,EAAA/7E,GACAg9E,EAAAphF,KAAAmhF,EAAAtjB,EAAAqW,eAAAiM,EAAA/7E,OAEAizD,EAAA0pB,EAAA38E,GACAg9E,EAAAphF,KAAA2gF,EAAAxhF,EAAAk4D,EAAAupB,MAIAjI,EAAA,IAAA79B,EAAA+5B,YAAAuM,IACA7M,kBAAA1W,GACA1+D,EAAA2sE,WAAA6M,GAGA,OAAAx5E,GAGA27C,IAGA5gD,OAAA,uCAAA,eAAA,SAAA4gD,GAo3DA,OA12DAA,EAAAumC,kBAAA,SAAAjb,EAAAC,GAEA,IAAAlnE,EAAA,IAAA27C,EAAA67B,KAEAzzC,EAAAkjC,EAAA,EACAjjC,EAAAkjC,EAAA,EAUA,OARAlnE,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,GAAAC,EAAA,KACAhkC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,GAAAC,EAAA,KACAhkC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,EAAAC,EAAA,KACAhkC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,EAAAC,EAAA,KAEAhkC,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KAEA11E,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,OAAArf,GAAAC,EAAA,GAAA,IAAA2X,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAaA27C,EAAAwmC,eAAA,SAAAlb,EAAAC,EAAAkb,GAEA,IAAApiF,EAAA,IAAA27C,EAAA67B,KAEAzzC,EAAAkjC,EAAA,EACAjjC,EAAAkjC,EAAA,EACA7jB,EAAA++B,EAAA,EAmBA,OAjBApiF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,GAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,GAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,GAAAC,EAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,GAAAC,EAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,EAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,EAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,EAAAC,EAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,EAAAC,EAAAqf,KAEArjD,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KAEA11E,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,OAAArf,GAAAC,GAAAqf,GAAA,IAAA1H,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAgBA27C,EAAA0mC,oBAAA,SAAApb,EAAAC,EAAAkb,EAAAE,GAEA,IAAAtiF,EAAA,IAAA27C,EAAA67B,KAEAzzC,EAAAkjC,EAAA,EACAjjC,EAAAkjC,EAAA,EACA7jB,EAAA++B,EAAA,EAmBA,OAjBApiF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,GAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,GAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,GAAAC,EAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,GAAAC,EAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,EAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,EAAAC,GAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAArf,EAAAC,EAAAqf,KACArjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAAArf,EAAAC,EAAAqf,KAEAi/B,EAAA,IAAAtiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA4M,EAAA,IAAAtiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA4M,EAAA,IAAAtiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA4M,EAAA,IAAAtiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA4M,EAAA,IAAAtiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KACA4M,EAAA,IAAAtiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,EAAA,KAEA11E,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,OAAArf,GAAAC,GAAAqf,GAAA,IAAA1H,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAcA27C,EAAA4mC,2BAAA,SAAAtb,EAAAC,EAAAsb,EAAAC,GA8BA,IAAAziF,EAAA,IAAA27C,EAAA67B,KAEAkL,EAAAzb,EAAA,EACA0b,EAAAzb,EAAA,EACA0b,EAAA3b,EAAAub,EACAK,EAAA3b,EAAAub,EAKA,OAtCA,WAEA,IAAAnnF,EAAA2J,EAAAo8C,EAEA,IAAA/lD,EAAA,EAAAA,GAAAmnF,EAAAnnF,IACA,IAAA2J,EAAA,EAAAA,GAAAu9E,EAAAv9E,IACAo8C,EAAA,IAAA1F,EAAAyH,MAAAn+C,EAAA29E,EAAAF,EAAApnF,EAAAunF,EAAAF,EAAA,GACA3iF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAtzB,IA4BAyhC,GAvBA,WAEA,IAAAxnF,EAAA2J,EACAoV,EAAAnO,EAAAm0B,EAAA0iD,EAEA,IAAA99E,EAAA,EAAAA,EAAAw9E,EAAAx9E,IACA,IAAA3J,EAAA,EAAAA,EAAAknF,EAAAlnF,IAEA4Q,GADAmO,EAAApV,GAAAu9E,EAAA,GAAAlnF,GACA,EAEAynF,GADA1iD,EAAAhmB,EAAAmoE,EAAA,GACA,EACAxiF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,KAaA2iD,GAEAhjF,GAcA27C,EAAAsnC,wBAAA,SAAAhc,EAAAC,EAAAkb,EAAAlxB,GAEA,SAAAgyB,EAAAC,GAEA,IAAAz9E,EAAA,EAIA,OAHAy9E,EAAA,GAAAA,GAAAjyB,IACAxrD,GAAAwrD,EAAA,IAAAA,EAAA,GAAA,EAAAA,GAAAiyB,EAAA,IAEAz9E,EAGA,SAAA09E,EAAAD,GAEA,IAAA7nF,EAEA68D,KACAzyD,EAAAw9E,EAAAC,GACA,GAAA,IAAAA,GAAAA,IAAAjyB,EAAA,CACA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IACA68D,EAAAt3D,KAAA6E,EAAApK,GAEA,IAAAA,EAAA,EAAAA,GAAA41D,EAAA51D,IACA68D,EAAAt3D,KAAA6E,GAAApK,EAAA,GAAA41D,EAAA51D,GAEA,IAAAA,EAAA41D,EAAA,EAAA51D,GAAA,EAAAA,IACA68D,EAAAt3D,KAAA6E,GAAAwrD,EAAA,GAAAA,EAAA51D,GAEA,IAAAA,EAAA41D,EAAA,EAAA51D,EAAA,EAAAA,IACA68D,EAAAt3D,KAAA6E,EAAApK,GAAA41D,EAAA,SAEA,GAAAiyB,EAAA,GAAAA,EAAAjyB,EAAA,CACA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IACA68D,EAAAt3D,KAAA6E,EAAApK,GAEA,IAAAA,EAAA,EAAAA,EAAA41D,EAAA51D,IACA68D,EAAAt3D,KAAA6E,EAAAwrD,EAAA,EAAA51D,GAEA,IAAAA,EAAA41D,EAAA51D,GAAA,EAAAA,IACA68D,EAAAt3D,KAAA6E,EAAA,EAAAwrD,EAAA51D,EAAA,GAEA,IAAAA,EAAA41D,EAAA,EAAA51D,EAAA,EAAAA,IACA68D,EAAAt3D,KAAA6E,EAAAwrD,EAAA,EAAA51D,EAAA,GAIA,OAAA68D,EAGA,SAAA2qB,EAAAK,GAEA,IAAA7nF,EAAA2J,EAAAo8C,EAEAgiC,EAAAF,EAAAG,EACA,GAAA,IAAAH,GAAAA,IAAAjyB,EACA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IACA,IAAA2J,EAAA,EAAAA,GAAAisD,EAAAjsD,IACAo8C,EAAA,IAAA1F,EAAAyH,MAAAn+C,EAAA29E,EAAAF,EAAApnF,EAAAunF,EAAAF,EAAAU,EAAAE,GACAvjF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAtzB,SAGA,GAAA8hC,EAAA,GAAAA,EAAAjyB,EACA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IACA,IAAA2J,EAAA,EAAAA,GAAAisD,EAAAjsD,IACA,IAAA3J,GAAAA,IAAA41D,GAAA,IAAAjsD,GAAAA,IAAAisD,IACA7P,EAAA,IAAA1F,EAAAyH,MAAAn+C,EAAA29E,EAAAF,EAAApnF,EAAAunF,EAAAF,EAAAU,EAAAE,GACAvjF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAtzB,KAOA,SAAA2hC,EAAAG,GAEA,IAAA7nF,EAAA2J,EACAoV,EAAAnO,EAAAm0B,EAAA0iD,EAEA,GAAA,IAAAI,GAAAA,IAAAjyB,EAAA,CACA,IAAAxrD,EAAAw9E,EAAAC,GACA,IAAA7nF,EAAA,EAAAA,EAAA41D,EAAA51D,IACA,IAAA2J,EAAA,EAAAA,EAAAisD,EAAAjsD,IAEAiH,GADAmO,EAAA3U,EAAApK,GAAA41D,EAAA,GAAAjsD,GACA,EAEA89E,GADA1iD,EAAAhmB,EAAA62C,EAAA,GACA,EACA,IAAAiyB,EACAnjF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAr7D,EAAAgmB,EAAA0iD,EAAA72E,KAEAlM,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,KAMA,GAAA8iD,EAAA,GAAAA,GAAAjyB,EAAA,CACA,IAAAsyB,EAAAC,EAAAN,EAAA,GACAO,EAAAD,EAAAN,GACA,IAAA7nF,EAAA,EAAAA,EAAA,EAAA41D,EAAA51D,IACA+e,EAAAmpE,EAAAloF,GACA+kC,EAAAqjD,EAAApoF,GACAA,EAAA,EAAA41D,EAAA,GACAhlD,EAAAs3E,EAAAloF,EAAA,GACAynF,EAAAW,EAAApoF,EAAA,KAEA4Q,EAAAs3E,EAAA,GACAT,EAAAW,EAAA,IAEA1jF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,MAKA,IAUA/kC,EAVA0E,EAAA,IAAA27C,EAAA67B,KAEAkL,EAAAzb,EAAA,EACA0b,EAAAzb,EAAA,EACAqc,EAAAnB,EAAA,EAEAQ,EAAA3b,EAAA/V,EACA2xB,EAAA3b,EAAAhW,EACAoyB,EAAAlB,EAAAlxB,EAGA,IAAA51D,EAAA,EAAAA,GAAA41D,EAAA51D,IACAwnF,EAAAxnF,GAGA,IAAAmoF,KACA,IAAAnoF,EAAA,EAAAA,GAAA41D,EAAA51D,IACAmoF,EAAA5iF,KAAAuiF,EAAA9nF,IAGA,IAAAA,EAAA,EAAAA,GAAA41D,EAAA51D,IACA0nF,EAAA1nF,GAGA,OAAA0E,GAYA27C,EAAAgoC,eAAA,SAAAp9B,EAAA2K,GAEA,IAOA51D,EAPA0E,EAAA,IAAA27C,EAAA67B,KACAxH,EAAA9e,EAGA5jB,GADApiC,KAAA61C,GACA,EAAA71C,KAAA61C,GAAAivB,GAEA4T,EAAAjoC,EAAAo0B,qBAAAxpB,EAAA2K,GAEA,IAAA51D,EAAA,EAAAA,EAAAsoF,EAAAxoF,OAAAE,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAiP,EAAAtoF,KACAgyC,EAGA,IAAAu2C,EAAA,IAAAloC,EAAA+5B,gBACA,IAAAp6E,EAAA,EAAAA,EAAA00E,EAAA10E,IACAuoF,EAAAjO,eAAAt6E,GAKA,OAHA0E,EAAA2sE,WAAAkX,GAEA7jF,EAAAk5E,gCAAA,IAAAv9B,EAAAyH,MAAA,EAAA,EAAA,GAAAmD,EAAA,IAAA5K,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAaA27C,EAAAmoC,eAAA,SAAAv9B,EAAA2K,EAAA6yB,GAEA,IASAzoF,EAAA2J,EAAAoiD,EATArnD,EAAA,IAAA27C,EAAA67B,KAEAxH,EAAA9e,EACA8yB,EAAA,EAAAhU,EAEAiU,EAAAjkF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAAyL,qBAAAb,EAAA,EAAA,KACAjZ,EAAApiC,KAAA61C,GAAAivB,EACAxpB,EAAAlZ,EAGA,IAAAhyC,EAAA,EAAAA,EAAA00E,EAAA10E,IAAA,CAEA,IADA+rD,EAAA,EACApiD,EAAA,EAAAA,EAAA++E,EAAA/+E,IACAjF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAAyL,qBAAAb,EAAAC,EAAAa,KACAA,GAAA/Z,EAEAkZ,GAAAlZ,EAEA,IAEA5nC,EAAA2U,EAAAnO,EAAAm0B,EAAA0iD,EAAArkB,EAFAwlB,EAAAlkF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAAyL,sBAAAb,EAAA,EAAA,KAGA,IAAAjrD,EAAA,EAAAA,GAAA00E,EAAA10E,IACA,GAAA,IAAAA,EAEA,IADAoK,EAAA,EACAT,EAAA,EAAAA,EAAA++E,EAAA/+E,IAEAiH,GADAmO,EAAA3U,EAAAT,GACA,EACAA,IAAA++E,EAAA,IACA93E,EAAAxG,GAGAg5D,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA+3E,IACAF,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,QAEA,GAAApjE,EAAA00E,EAEA,IADAtqE,GAAApK,EAAA,GAAA0oF,EAAA,EACA/+E,EAAA,EAAAA,EAAA++E,EAAA/+E,IAEAiH,GADAmO,EAAA3U,EAAAT,GACA,EAEA89E,GADA1iD,EAAAhmB,EAAA2pE,GACA,EAEA/+E,IAAA++E,EAAA,IACA93E,EAAAxG,EACAq9E,EAAAr9E,EAAAs+E,GAGAtlB,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,IACA0jD,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,QAEA,GAAApjE,IAAA00E,EAEA,IADAtqE,GAAApK,EAAA,GAAA0oF,EAAA,EACA/+E,EAAA,EAAAA,EAAA++E,EAAA/+E,IAEAiH,GADAmO,EAAA3U,EAAAT,GACA,EACAA,IAAA++E,EAAA,IACA93E,EAAAxG,GAGAg5D,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAA6pE,EAAAh4E,IACA63E,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAMA,OADA1+D,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAaA27C,EAAAwoC,2BAAA,SAAA59B,EAAA69B,EAAAL,GAgDA,IAKAzoF,EAAA2J,EAMAo/E,EAAAC,EAAAC,EAAA1J,EACA2J,EAAAC,EACAC,EAAAC,EACAC,EAAAC,EAdA7kF,EA9CA,WACA,IAAAA,EAAA,IAAA27C,EAAA67B,KAIA5gE,GAAA,EAAA1L,KAAAq2C,KAAA,IAAA,EAsCA,OApCA5F,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA4W,GACA+kC,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA4W,GACA+kC,EAAAihC,gBAAA58E,EAAA,GANA,GAMA4W,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAPA,GAOA4W,GAEA+kC,EAAAihC,gBAAA58E,EAAA,GAAA4W,EAAA,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA4W,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAXA,GAWA4W,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAZA,GAYA4W,EAAA,GAEA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAhBA,GAiBA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAjBA,GAmBA+kC,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KAEAA,EAGA8kF,GAEAC,EAAA/kF,EAAA43E,kBAAA,GAAA71B,SACArX,EAAA6b,EAAAw+B,EAGA,IAAAzpF,EAAA,EAAAA,EAAA0E,EAAA07D,cAAApgE,IACA0E,EAAAw7D,UAAAlgE,GACAqoB,SAAAq+B,eAAAtX,GAOA,IAAA25C,EAAA,EAAAA,EAAAD,EAAAC,IAAA,CAKA,IAJAE,EAAAvkF,EAEAA,EAAA,IAAA27C,EAAA67B,KACAqD,EAAA,IAAAl/B,EAAAg/B,cAAA4J,GACAjpF,EAAA,EAAAA,EAAAu/E,EAAAJ,MAAAr/E,OAAAE,IACAgpF,EAAAC,EAAA3M,kBAAAt8E,GACAqgD,EAAAihC,gBAAA58E,EAAAskF,EAAAvgD,EAAAugD,EAAAtgD,EAAAsgD,EAAAjhC,GAIA,IADAohC,KACAnpF,EAAA,EAAAA,EAAAu/E,EAAAtiB,MAAAn9D,OAAAE,IACAkpF,EAAA3J,EAAAtiB,MAAAj9D,GACAspF,EAAAjpC,EAAAiL,SAAA29B,EAAA3M,kBAAA4M,EAAAhsB,OAAA+rB,EAAA3M,kBAAA4M,EAAA/rB,QACAgsB,EAAA5jF,KAAAb,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAiQ,EAAA1iC,UAAAqE,MAGA,IAAAjrD,EAAA,EAAAA,EAAAu/E,EAAAV,MAAA/+E,OAAAE,IAAA,CAGA,IAFAopF,EAAA7J,EAAAV,MAAA7+E,GACAqpF,KACA1/E,EAAA,EAAAA,EAAAy/E,EAAAhK,OAAAt/E,OAAA6J,IACA4/E,EAAAH,EAAAhK,OAAAz1E,GACA0/E,EAAA9jF,KAAAg6E,EAAAgB,uBAAAgJ,IACAF,EAAA9jF,KAAA4jF,EAAAI,EAAAliF,QAGAg5C,EAAAohC,iBAAA/8E,GAAA2kF,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAhpC,EAAAohC,iBAAA/8E,GAAA2kF,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAhpC,EAAAohC,iBAAA/8E,GAAA2kF,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAhpC,EAAAohC,iBAAA/8E,GAAA2kF,EAAA,GAAAA,EAAA,GAAAA,EAAA,MAIA,GAAAZ,EACA,IAAAzoF,EAAA,EAAAA,EAAA0E,EAAAmyE,eAAA72E,IACA0E,EAAAoyE,WAAA92E,GAAA+6E,cAAA,GAKA,OADAr2E,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAeA27C,EAAAqpC,iBAAA,SAAAz+B,EAAA/kB,EAAA0vB,EAAA+zB,EAAAlB,GAEA,IAMAzoF,EAOA+e,EAAAnO,EAAAwyD,EAbA1+D,EAAA,IAAA27C,EAAA67B,KACAxH,EAAA9e,EAEA1K,EAAA,EAAAt7C,KAAA61C,GACAzT,EAAA,EAAApiC,KAAA61C,GAAAivB,EAGA,IAAA10E,EAAA,EAAAA,EAAA00E,EAAA10E,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAAf,EAAA/kB,EAAA,EAAAglB,KACAxmD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAAf,GAAA/kB,EAAA,EAAAglB,KACAA,GAAAlZ,EAIA,IAAAhyC,EAAA,EAAAA,EAAA00E,EAAA10E,IAEA4Q,GADAmO,EAAA,EAAA/e,GACA,EACAA,IAAA00E,EAAA,IACA9jE,EAAA,GAEAwyD,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAAA,EAAA,EAAAmO,EAAA,IACA0pE,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAGA,GAAAumB,EAAA,CACA,IAAApB,EAAA,IAAAloC,EAAA+5B,gBACAwP,EAAA,IAAAvpC,EAAA+5B,gBACA,IAAAp6E,EAAA,EAAAA,EAAA00E,EAAA10E,IACAuoF,EAAAjO,eAAA,GAAA5F,EAAA10E,EAAA,IACA4pF,EAAAtP,eAAA,EAAAt6E,EAAA,GAEA0E,EAAA2sE,WAAAkX,GACA7jF,EAAA2sE,WAAAuY,GAIA,OADAllF,EAAAk5E,gCAAA,IAAAv9B,EAAAyH,MAAA,EAAA,GAAA5hB,EAAA,GAAA+kB,EAAA,IAAA5K,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAgBA27C,EAAAwpC,YAAA,SAAA5+B,EAAA/kB,EAAAghB,EAAA0O,EAAA+zB,EAAAlB,GAEA,IAMAzoF,EASA+e,EAAAnO,EAAAwyD,EAfA1+D,EAAA,IAAA27C,EAAA67B,KACAxH,EAAA9e,EAEA1K,EAAAhE,EACAlV,EAAAkV,GAAAwtB,EAAA,GAKA,IAFAhwE,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAA,EAAA9lB,EAAA,EAAA,KACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAA,GAAA9lB,EAAA,EAAA,KACAlmC,EAAA,EAAAA,EAAA00E,EAAA10E,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAAf,EAAA/kB,EAAA,EAAAglB,KACAxmD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAAf,GAAA/kB,EAAA,EAAAglB,KACAA,GAAAlZ,EAIA,IAAAhyC,EAAA,EAAAA,GAAA00E,EAAA10E,IAEA4Q,GADAmO,EAAA,EAAA/e,GACA,EACAA,IAAA00E,IACA9jE,EAAA,GAEAwyD,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAAA,EAAA,EAAAmO,EAAA,IACA0pE,GAAAzoF,EAAA,GAAAA,EAAA00E,GACAtR,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAGA,GAAAumB,EAAA,CACA,IAAApB,EAAA,IAAAloC,EAAA+5B,gBACAwP,EAAA,IAAAvpC,EAAA+5B,gBACA,IAAAp6E,EAAA,EAAAA,GAAA00E,EAAA10E,IACAuoF,EAAAjO,eAAA,GAAA5F,EAAA10E,IACA4pF,EAAAtP,eAAA,EAAAt6E,EAAA,GAEA0E,EAAA2sE,WAAAkX,GACA7jF,EAAA2sE,WAAAuY,GAIA,OADAllF,EAAAk5E,gCAAA,IAAAv9B,EAAAyH,MAAA,EAAA,GAAA5hB,EAAA,GAAA+kB,EAAA,IAAA5K,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAgBA27C,EAAAypC,aAAA,SAAAC,EAAAC,EAAA9jD,EAAA0vB,EAAA+zB,EAAAlB,GAEA,IAaAzoF,EAcA+e,EAAAnO,EAAAwyD,EAsCAmlB,EAAAqB,EAjEAllF,EAAA,IAAA27C,EAAA67B,KACAxH,EAAA9e,EAEAq0B,EAAA5pC,EAAAuE,OAAAmlC,GACAG,EAAA7pC,EAAAuE,OAAAolC,GAEA9+B,EAAA,EAAAt7C,KAAA61C,GACAzT,EAAA,EAAApiC,KAAA61C,GAAAivB,EAOA,IALAuV,GACAvlF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAA,EAAA9lB,EAAA,EAAA,KAIAlmC,EAAA,EAAAA,EAAA00E,EAAA10E,IACAiqF,GACAvlF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAA+9B,EAAA7jD,EAAA,EAAAglB,KAEAg/B,GACAxlF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAAg+B,GAAA9jD,EAAA,EAAAglB,KAEAA,GAAAlZ,EAOA,IALAk4C,GACAxlF,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAh5B,EAAA2L,uBAAA,GAAA9lB,EAAA,EAAA,KAIAlmC,EAAA,EAAAA,EAAA00E,EAAA10E,IACAiqF,GAEAr5E,GADAmO,EAAA/e,EAAA,GACA,EACAA,IAAA00E,EAAA,IACA9jE,EAAA,GAEAwyD,EAAA,IAAA/iB,EAAA+5B,aAAA,EAAAxpE,EAAAmO,IACA0pE,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,IACA8mB,GAEAt5E,GADAmO,EAAA/e,GACA,EACAA,IAAA00E,EAAA,IACA9jE,EAAA,GAEAwyD,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA8jE,IACA+T,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,KAGAxyD,GADAmO,EAAA,EAAA/e,GACA,EACAA,IAAA00E,EAAA,IACA9jE,EAAA,GAEAwyD,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAAA,EAAA,EAAAmO,EAAA,IACA0pE,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,IAKA,GAAAumB,EACA,GAAAM,EAAA,CAEA,IADAL,EAAA,IAAAvpC,EAAA+5B,gBACAp6E,EAAA,EAAAA,EAAA00E,EAAA10E,IACA4pF,EAAAtP,eAAAt6E,EAAA,GAEA0E,EAAA2sE,WAAAuY,QACA,GAAAM,EAAA,CAEA,IADA3B,EAAA,IAAAloC,EAAA+5B,gBACAp6E,EAAA,EAAAA,EAAA00E,EAAA10E,IACAuoF,EAAAjO,eAAA5F,EAAA10E,EAAA,GAEA0E,EAAA2sE,WAAAkX,OACA,CAGA,IAFAA,EAAA,IAAAloC,EAAA+5B,gBACAwP,EAAA,IAAAvpC,EAAA+5B,gBACAp6E,EAAA,EAAAA,EAAA00E,EAAA10E,IACAuoF,EAAAjO,eAAA,GAAA5F,EAAA10E,EAAA,IACA4pF,EAAAtP,eAAA,EAAAt6E,EAAA,GAEA0E,EAAA2sE,WAAAkX,GACA7jF,EAAA2sE,WAAAuY,GAIA,IAAAO,GAAAJ,EAAAC,GAAA,EAEA,OADAtlF,EAAAk5E,gCAAA,IAAAv9B,EAAAyH,MAAA,EAAA,GAAA5hB,EAAA,GAAAikD,EAAA,IAAA9pC,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAaA27C,EAAA+pC,sBAAA,SAAAC,EAAAC,EAAAX,GAEA,IAGA3pF,EAMA+e,EAAAnO,EAAA25E,EATA7lF,EAAA,IAAA27C,EAAA67B,KACA/sE,EAAAk7E,EAAAvqF,OAGA,IAAAE,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAgR,EAAArqF,GAAAomD,UACA1hD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAiR,EAAAtqF,GAAAomD,UAIA,IAAApmD,EAAA,EAAAA,EAAAmP,EAAAnP,IAEA4Q,GADAmO,EAAA,EAAA/e,GACA,EACAA,IAAAmP,EAAA,IACAyB,EAAA,GAEA25E,EAAA,IAAAlqC,EAAA+5B,aAAAr7D,EAAAnO,EAAAA,EAAA,EAAAmO,EAAA,IACAra,EAAA2sE,WAAAkZ,GAGA,GAAAZ,EAAA,CACA,IAAApB,EAAA,IAAAloC,EAAA+5B,gBACAwP,EAAA,IAAAvpC,EAAA+5B,gBACA,IAAAp6E,EAAA,EAAAA,EAAAmP,EAAAnP,IACAuoF,EAAAjO,eAAA,EAAAt6E,EAAA,GACA4pF,EAAAtP,eAAA,GAAAnrE,EAAAnP,EAAA,IAEA0E,EAAA2sE,WAAAkX,GACA7jF,EAAA2sE,WAAAuY,GAGA,OAAAllF,GAcA27C,EAAAmqC,yBAAA,SAAApnB,EAAAl9B,EAAAyjD,EAAAvH,GAEA,IAEApiF,EAAA48D,EAFAytB,KACAC,KAEAn7E,EAAAi0D,EAAAhD,cACA,IAAApgE,EAAA,EAAAA,EAAAmP,EAAAnP,IACA48D,EAAAwG,EAAAlD,UAAAlgE,GACAqqF,EAAA9kF,KAAA,IAAA86C,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAA,IACA4hD,EAAA/kF,KAAA,IAAA86C,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAAxC,IAGA,IAAAxhC,EAAA27C,EAAA+pC,sBAAAC,EAAAC,EAAAX,GACA,QAAAtmF,IAAA++E,GAAA,OAAAA,EAAA,CACA,IAAAC,EAAAhiC,EAAA8hC,4BAAA/e,EAAAgf,GAEA,IAAApiF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAoyE,WAAA92E,GACA+6E,cAAAsH,EAAAriF,IAIA,IAAAmnD,EAAAkjC,EAAA,GAAAjkC,QACAqkC,EAAAJ,EAAA,GAAAjkC,QACAskC,EAAArqC,EAAA0I,SAAA0hC,EAAAtjC,GAAAd,YACAuM,EAAA,IAAAvS,EAAAoI,OAAA,EAAA,EAAA,GACAkK,EAAAtS,EAAAqI,YAAAkK,EAAA83B,GACAh4B,EAAArS,EAAAqI,YAAAiK,EAAAC,GAGA,OADAluD,EAAAi5E,0BAAAx2B,EAAAuL,EAAAC,EAAAC,GACAluD,GAiBA27C,EAAAsqC,cAAA,SAAAvU,EAAArvB,EAAA7gB,EAAAyjD,EAAAvH,GAEA,IAAAhf,EAAA,IAAA/iB,EAAAskB,QACAvB,EAAAK,UAAA2S,GACA,IAKAp2E,EALAmP,EAAAi0D,EAAAhD,cAGAiqB,KACAC,KAEA,IAAAtqF,EAAA,EAAAA,EAAAmP,EAAAnP,IACAqqF,EAAA9kF,KAAA69D,EAAAlD,UAAAlgE,GAAAomD,SACAkkC,EAAA/kF,KAAA69D,EAAAlD,UAAAlgE,GAAAomD,QAAAU,OAAAC,EAAA7gB,IAGA,IAAAxhC,EAAA27C,EAAA+pC,sBAAAC,EAAAC,EAAAX,GAEA,QAAAtmF,IAAA++E,GAAA,OAAAA,EAAA,CACA,IAAAC,EAAAhiC,EAAA8hC,4BAAA/e,EAAAgf,GAEA,IAAApiF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAoyE,WAAA92E,GACA+6E,cAAAsH,EAAAriF,IAIA,IAAAmnD,EAAAic,EAAAlD,UAAA,GAAA9Z,QACAqkC,EAAArnB,EAAAlD,UAAA,GAAA9Z,QACAskC,EAAArqC,EAAA0I,SAAA0hC,EAAAtjC,GAAAd,YACAuM,EAAA7L,EAAAX,QAAAC,YACAsM,EAAAtS,EAAAqI,YAAAkK,EAAA83B,GACAh4B,EAAArS,EAAAqI,YAAAiK,EAAAC,GAGA,OADAluD,EAAAi5E,0BAAAx2B,EAAAuL,EAAAC,EAAAC,GACAluD,GAkBA27C,EAAAuqC,sBAAA,SAAAxU,EAAArvB,EAAA7gB,EAAAyjD,EAAAvH,GA4EA,IAAA19E,EAAA,IAAA27C,EAAA67B,KACA2O,KACAjU,EAAA,IAAAv2B,EAAAwkB,eACA+R,EAAAnT,UAAA2S,GA7EA,SAAAQ,EAAA7vB,EAAA7gB,EAAAxhC,GAEA,IAAA1E,EAAA2J,EAAAy6D,EAAAvX,EAAAC,EACA,IAAA9sD,EAAA,EAAAA,EAAA42E,EAAAnS,eAAAzkE,IAEA,IADAokE,EAAAwS,EAAApS,WAAAxkE,GACA2J,EAAA,EAAAA,EAAAy6D,EAAAhE,cAAAz2D,IACAkjD,EAAAuX,EAAAlE,UAAAv2D,GAAAy8C,QACA0G,EAAAsX,EAAAlE,UAAAv2D,GAAAy8C,QAAAU,OAAAC,EAAA7gB,GACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxsB,IACAnoD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAvsB,IAqEA06B,CAAA5Q,EAAA7vB,EAAA7gB,EAAAxhC,GAhEA,SAAAkyE,EAAAiU,EAAAzI,EAAA19E,GAEA,IAEA1E,EAAA2J,EAAAy6D,EAAA5B,EAAAzjD,EAAAnO,EAAA25E,EAAAlI,EAFAj4E,EAAA,EAGA,IAAApK,EAAA,EAAAA,EAAA42E,EAAAnS,eAAAzkE,IAAA,CAQA,IAPAokE,EAAAwS,EAAApS,WAAAxkE,GACAqiF,EAAA,UACAh/E,IAAA++E,GAAA,OAAAA,IACAC,EAAAhiC,EAAA8hC,4BAAA/d,EAAAge,IAEA5f,EAAA4B,EAAAhE,cACAyqB,EAAAtlF,KAAA6E,GACAT,EAAA,EAAAA,EAAA64D,EAAA74D,IAEAiH,GADAmO,EAAA,EAAA3U,EAAA,EAAAT,GACA,EACAA,GAAA64D,EAAA,IACA5xD,EAAA,EAAAxG,GAEAmgF,EAAA,IAAAlqC,EAAA+5B,aAAAr7D,EAAAnO,EAAAA,EAAA,EAAAmO,EAAA,IACA,OAAAsjE,GACAkI,EAAAxP,cAAAsH,EAAA14E,IAEAjF,EAAA2sE,WAAAkZ,GAEAngF,GAAAo4D,GAwCAsoB,CAAAlU,EAAAiU,EAAAzI,EAAA19E,GAEAilF,GAtCA,SAAA/S,EAAAiU,GAEA,IAAAve,KACAye,EAAAnU,EAAA9R,qBACAkmB,EAAA3qC,EAAA+rB,iCAAA2e,EAAAze,GACA,GAAA,OAAA0e,EACA,OAGA,IAKAhrF,EAAA2J,EAAAg0D,EAAAstB,EACAC,EAAAC,EANA1tB,EAAApd,EAAA6uB,qBAAA8b,GACA,GAAA,OAAAvtB,EACA,OAKA,IAAAz9D,EAAA,EAAAA,EAAAy9D,EAAA39D,OAAAE,IAAA,CAIA,IAHA29D,EAAAF,EAAAz9D,GACAkrF,EAAA,IAAA7qC,EAAA+5B,gBACA+Q,EAAA,IAAA9qC,EAAA+5B,gBACAzwE,EAAA,EAAAA,EAAA,EAAAA,IACAshF,EAAA3e,EAAA3O,EAAAh0D,IACAuhF,EAAA5Q,eAAA,EAAAuQ,EAAAI,EAAA,IAAA,EAAAA,EAAA,GAAA,GACAA,EAAA3e,EAAA3O,EAAA,EAAAh0D,IACAwhF,EAAA7Q,eAAA,EAAAuQ,EAAAI,EAAA,IAAA,EAAAA,EAAA,IAEAvmF,EAAA2sE,WAAA6Z,GACAxmF,EAAA2sE,WAAA8Z,IAYAC,CAAAxU,EAAAiU,GAGA,IAAAH,EAAArqC,EAAA0I,SAAAqtB,EAAA,GAAAA,EAAA,IAAA/vB,YACAc,EAAA,IAAA9G,EAAAyH,MAAAsuB,EAAA,GAAA3tC,EAAA2tC,EAAA,GAAA1tC,EAAA0tC,EAAA,GAAAruB,GACA6K,EAAA7L,EAAAX,QAAAC,YACAsM,EAAAtS,EAAAqI,YAAAkK,EAAA83B,GACAh4B,EAAArS,EAAAqI,YAAAiK,EAAAC,GAGA,OADAluD,EAAAi5E,0BAAAx2B,EAAAuL,EAAAC,EAAAC,GACAluD,GAcA27C,EAAAgrC,yBAAA,SAAA1rF,EAAAumC,EAAAyjD,EAAAvH,GAEA,SAAAkJ,EAAAloB,GAEA,IACApjE,EAAA2J,EAAAy6D,EAAAxH,EADAl4D,KAEA,IAAA1E,EAAA,EAAAA,EAAAojE,EAAAqB,eAAAzkE,IAAA,CAEA,IADAokE,EAAAhB,EAAAoB,WAAAxkE,GACA2J,EAAA,EAAAA,EAAAy6D,EAAAhE,cAAAz2D,IACAizD,EAAAwH,EAAAlE,UAAAv2D,GACAjF,EAAAa,KAAA,IAAA86C,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAA,IAEA1oC,EAAAojE,EAAAqB,eAAA,GACA//D,EAAAa,KAAA,MAGA,OAAAb,EAGA,IAGA1E,EAAAojE,EAHAib,KACArM,EAAAryE,EAAAo3E,cACAhwB,EAAA,IAAA1G,EAAAoI,OAAA,EAAA,EAAA,GAEA,IAAAzoD,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IAEA,KADAojE,EAAA4O,EAAAhyE,IACAykE,eACA4Z,EAAA94E,KAAA86C,EAAAsqC,cAAAW,EAAAloB,GAAArc,EAAA7gB,EAAAyjD,EAAAvH,IACAhf,EAAAqB,eAAA,GACA4Z,EAAA94E,KAAA86C,EAAAuqC,sBAAAU,EAAAloB,GAAArc,EAAA7gB,EAAAyjD,EAAAvH,IAGA,OAAA/D,GAeAh+B,EAAAkrC,mBAAA,SAAAnV,EAAArvB,EAAA7gB,EAAAD,EAAA0jD,GAEA,IAGA3pF,EAHA0E,EAAA,IAAA27C,EAAA67B,KACA/sE,EAAAinE,EAAAt2E,OAGA,IAAAE,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAjD,EAAAp2E,KAGA,IAAAojE,EAAA,IAAA/iB,EAAAskB,QACAvB,EAAAvG,SAAAuZ,EACA,IAMAvgB,EAWA8K,EAAA/vD,EAAAm0B,EAAA0iD,EAjBA+D,EAAAnrC,EAAA0kB,qBAAA3B,EAAAn9B,GACAwlD,EAAAD,EAAA3uB,SACA,IAAA78D,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAoS,EAAAzrF,KAIA,IAAAA,EAAA,EAAAA,EAAAmP,EAAAnP,IACA61D,EAAAugB,EAAAp2E,GAAAomD,QAAAU,OAAAC,EAAA7gB,GACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxjB,IAGA,IAAA71D,EAAA,EAAAA,EAAAmP,EAAAnP,IACA61D,EAAA41B,EAAAzrF,GAAAomD,QAAAU,OAAAC,EAAA7gB,GACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxjB,IAIA,IAAA71D,EAAA,EAAAA,EAAAmP,EAAAnP,IAEA4Q,GADA+vD,EAAA3gE,GACA,EAEAynF,GADA1iD,EAAA47B,EAAA,EAAAxxD,GACA,EACAnP,IAAAmP,EAAA,IACAyB,EAAA,EACA62E,EAAA,EAAAt4E,GAEAzK,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA/vD,EAAA62E,EAAA1iD,KACArgC,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAAxxD,EAAA41B,EAAA51B,EAAAs4E,EAAAt4E,EAAAyB,EAAAzB,KAGA,GAAAw6E,EACA,IAAA3pF,EAAA,EAAAA,EAAAmP,EAAAnP,IAEA4Q,GADA+vD,EAAA3gE,GACA,EAEAynF,GADA1iD,EAAA/kC,EAAAmP,GACA,EACAnP,IAAAmP,EAAA,IACAyB,EAAA,EACA62E,EAAAt4E,GAEAzK,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA57B,EAAA0iD,EAAA72E,KACAlM,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA,EAAAxxD,EAAAyB,EAAA,EAAAzB,EAAAs4E,EAAA,EAAAt4E,EAAA41B,EAAA,EAAA51B,KAIA,IAAAu7E,EAAArqC,EAAA0I,SAAAqtB,EAAA,GAAAA,EAAA,IAAA/vB,YACAc,EAAA,IAAA9G,EAAAyH,MAAAsuB,EAAA,GAAA3tC,EAAA2tC,EAAA,GAAA1tC,EAAA0tC,EAAA,GAAAruB,GACA6K,EAAA7L,EAAAX,QAAAC,YACAsM,EAAAtS,EAAAqI,YAAAkK,EAAA83B,GACAh4B,EAAArS,EAAAqI,YAAAiK,EAAAC,GAGA,OADAluD,EAAAi5E,0BAAAx2B,EAAAuL,EAAAC,EAAAC,GACAluD,GAgBA27C,EAAAqrC,sBAAA,SAAAzgC,EAAA/kB,EAAAD,EAAA2vB,EAAA+zB,EAAAlB,GAgBA,IAIAzoF,EAJA+uC,EAAA,IAAAsR,EAAAoI,OAAA,EAAA,EAAA,GACAigC,EAfA,SAAAz9B,EAAA2K,EAAA5wB,GAEA,IAEAkmB,EAAAygC,EAFAjnF,KACAstC,EAAA,EAAApiC,KAAA61C,GAAAmQ,EAEA51D,EAAA,EACA,IAAAA,EAAA,EAAAA,EAAA41D,EAAA51D,IACAkrD,EAAAlrD,EAAAgyC,EACA25C,EAAAtrC,EAAA2K,iBAAAC,EAAAC,GACAxmD,EAAAa,KAAA,IAAA86C,EAAAyH,MAAA6jC,EAAAljD,EAAAkjD,EAAAjjD,EAAA1D,IAEA,OAAAtgC,EAIA2jF,CAAAp9B,EAAA2K,GAAA1vB,EAAA,GACAxhC,EAAA27C,EAAAkrC,mBAAA7C,EAAA35C,EAAA7I,EAAAD,EAAA0jD,GAGA,GAAAlB,EACA,IAAAzoF,EAAA,EAAAA,EAAA41D,EAAA51D,IACA0E,EAAAoyE,WAAA,EAAA92E,GAAA+6E,cAAA,GACAr2E,EAAAoyE,WAAA,EAAA92E,EAAA,GAAA+6E,cAAA,GAIA,OAAAr2E,GAgBA27C,EAAAurC,kBAAA,SAAAC,EAAA9kC,EAAA7gB,EAAAD,EAAA6lD,EAAAnC,GAEA,IAKA3pF,EAAAgf,EAAA2hD,EAAA/vD,EACAgwD,EAAAC,EAAA3Z,EANAxiD,EAAA,IAAA27C,EAAA67B,KACA/sE,EAAA08E,EAAA/rF,OAEAolF,KAIA,IAAAllF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA,IAAAA,GAAAA,IAAAmP,EAAA,EACA+3C,EAAAt3C,KAAA61C,GAAA,GAEAzmC,EAAAhf,EAAA,EACA2gE,EAAA3gE,EACA4Q,EAAA5Q,EAAA,EAEA6gE,EAAAxgB,EAAA0I,SAAA8iC,EAAAj7E,GAAAi7E,EAAAlrB,IACAC,EAAAvgB,EAAA0I,SAAA8iC,EAAA7sE,GAAA6sE,EAAAlrB,IACAzZ,EAAA2Z,EAAA3a,QAAA0a,GAAA,EACAvgB,EAAAoL,iBAAAogC,EAAA7sE,GAAA6sE,EAAAlrB,GAAAkrB,EAAAj7E,GAAAm2C,IAAA1G,EAAAkK,YAAAG,YACAxD,EAAAt3C,KAAA61C,GAAAyB,IAIAg+B,EAAA3/E,KAAA2hD,GAGA,IAEAF,EAAA+kC,EAAAC,EA0BAn2B,EAWA9wB,EAAA0iD,EAvCA14C,EAAA,IAAAsR,EAAAoI,OAAA,EAAA,EAAA,GACAwjC,KAEA,IAAAjsF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA2gE,EAAA3gE,EACAA,IAAAmP,EAAA,EACA68E,EAAA3rC,EAAA0I,SAAA8iC,EAAAlrB,EAAA,GAAAkrB,EAAAlrB,KAEA/vD,GAAA5Q,EAAA,GAAAmP,EACA68E,EAAA3rC,EAAA0I,SAAA8iC,EAAAlrB,GAAAkrB,EAAAj7E,KAGAs2C,EAAAg+B,EAAAvkB,GACA3Z,EAAA/gB,EAAAr2B,KAAA23C,IAAAL,IACA6kC,EAAAF,EAAAlrB,GAAAva,SACAU,OAAAklC,EAAAhlC,GACA+kC,EAAA9kC,OAAAlY,IAAAn/B,KAAA61C,GAAAyB,GAAA2kC,EAAAlrB,IACAsrB,EAAA1mF,KAAAwmF,GAGA,IAAA/rF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAwS,EAAA7rF,KAGA,IAAAA,EAAA,EAAAA,EAAAmP,EAAAnP,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA4S,EAAAjsF,KAIA,IAAAA,EAAA,EAAAA,EAAAmP,EAAAnP,IACA61D,EAAAg2B,EAAA7rF,GAAAomD,QAAAU,OAAAC,EAAA7gB,GACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxjB,IAGA,IAAA71D,EAAA,EAAAA,EAAAmP,EAAAnP,IACA61D,EAAAo2B,EAAAjsF,GAAAomD,QAAAU,OAAAC,EAAA7gB,GACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxjB,IAIA,IAAA71D,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IAEA4Q,GADA+vD,EAAA3gE,GACA,EAEAynF,GADA1iD,EAAA47B,EAAA,EAAAxxD,GACA,EACAzK,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA/vD,EAAA62E,EAAA1iD,KACArgC,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAAxxD,EAAA41B,EAAA51B,EAAAs4E,EAAAt4E,EAAAyB,EAAAzB,KAiBA,GAdA28E,IAEAl7E,GADA+vD,EAAA,GACAxxD,EACA41B,EAAA47B,EAAA,EAAAxxD,EACAs4E,EAAA9mB,EAAA,EAAAxxD,EACAzK,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA57B,EAAA0iD,EAAA72E,KAGAA,GADA+vD,EAAAxxD,EAAA,GACAA,EACA41B,EAAA47B,EAAA,EAAAxxD,EACAs4E,EAAA9mB,EAAA,EAAAxxD,EACAzK,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA/vD,EAAA62E,EAAA1iD,MAGA4kD,EACA,IAAA3pF,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IAEA4Q,GADA+vD,EAAA3gE,GACA,EAEAynF,GADA1iD,EAAA/kC,EAAAmP,GACA,EACAzK,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA57B,EAAA0iD,EAAA72E,KACAlM,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAzZ,EAAA,EAAAxxD,EAAAyB,EAAA,EAAAzB,EAAAs4E,EAAA,EAAAt4E,EAAA41B,EAAA,EAAA51B,KAIA,IAAAu7E,EAAArqC,EAAA0I,SAAA8iC,EAAA,GAAAA,EAAA,IAAAxlC,YACAc,EAAA,IAAA9G,EAAAyH,MAAA+jC,EAAA,GAAApjD,EAAAojD,EAAA,GAAAnjD,EAAAmjD,EAAA,GAAA9jC,GACA6K,EAAA7L,EAAAX,QAAAC,YACAsM,EAAAtS,EAAAqI,YAAAkK,EAAA83B,GACAh4B,EAAArS,EAAAqI,YAAAiK,EAAAC,GAGA,OADAluD,EAAAi5E,0BAAAx2B,EAAAuL,EAAAC,EAAAC,GACAluD,GAeA27C,EAAA6rC,cAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAA7D,GAEA,IAOAzoF,EAAAusF,EAAAxmC,EAPArhD,EAAA,IAAA27C,EAAA67B,KAEAhxB,EAAA,EACAlZ,EAAA,EAAApiC,KAAA61C,GAAA6mC,EAEA5D,KAGA,IAAA1oF,EAAA,EAAAA,EAAAssF,EAAAtsF,IACAusF,EAAAlsC,EAAA2K,iBAAAohC,EAAAlhC,GACAnF,EAAA,IAAA1F,EAAAyH,MAAAykC,EAAA9jD,EAAA0jD,EAAA,EAAAI,EAAA7jD,GACAggD,EAAAnjF,KAAAwgD,GACAmF,GAAAlZ,EAGA,IAIAroC,EAAAg/C,EAQAya,EAAArkD,EAAAgmB,EAAAn0B,EAAA62E,EAZA+E,EAAA,IAAAnsC,EAAAyH,MAAA,EAAA,EAAA,GACAX,EAAA,IAAA9G,EAAAyH,MAAA,EAAA,EAAA,GAIA,IAFA9V,EAAA,EAAApiC,KAAA61C,GAAA4mC,EAEArsF,EAAA,EAAAA,EAAAqsF,EAAArsF,IACA,IAAA2J,EAAA,EAAAA,EAAA2iF,EAAA3iF,IACAg/C,EAAA+/B,EAAA/+E,GAAAy8C,QAAAa,OAAAulC,EAAAxsF,EAAAgyC,EAAAmV,GACAziD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA1wB,IAKA,IAAA3oD,EAAA,EAAAA,EAAAqsF,EAAArsF,IAEA,IADAojE,EAAA,IAAA/iB,EAAA+5B,gBACAzwE,EAAA,EAAAA,EAAA2iF,EAAA3iF,IAGAo7B,GAFAhmB,EAAA/e,EAAAssF,EAAA3iF,GAEA,EACA89E,GAFA72E,EAAAmO,EAAAutE,GAEA,EAEA3iF,IAAA2iF,EAAA,IACAvnD,EAAA/kC,EAAAssF,EACA7E,GAAAznF,EAAA,GAAAssF,GAGAtsF,IAAAqsF,EAAA,IACAz7E,EAAAjH,EACA89E,EAAA99E,EAAA,EACAA,IAAA2iF,EAAA,IACA7E,EAAA,IAIArkB,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,IACA0jD,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAKA,OADA1+D,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAcA27C,EAAAosC,kBAAA,SAAArW,EAAA+V,EAAAE,EAAA5D,GAEA,IAQAzoF,EAAAusF,EAAAxmC,EARArhD,EAAA,IAAA27C,EAAA67B,KAEAoQ,EAAAlW,EAAAt2E,OAEAkyC,GADApiC,KAAA61C,GACA,EAAA71C,KAAA61C,GAAA6mC,GAEA5D,KAGA,IAAA1oF,EAAA,EAAAA,EAAAssF,EAAAtsF,IACAusF,EAAAnW,EAAAp2E,GACA+lD,EAAA,IAAA1F,EAAAyH,MAAAykC,EAAA9jD,EAAA0jD,EAAA,EAAAI,EAAA7jD,GACAggD,EAAAnjF,KAAAwgD,GACA/T,EAGA,IAIAroC,EAAAg/C,EAQAya,EAAArkD,EAAAgmB,EAAAn0B,EAAA62E,EAZA+E,EAAA,IAAAnsC,EAAAyH,MAAA,EAAA,EAAA,GACAX,EAAA,IAAA9G,EAAAyH,MAAA,EAAA,EAAA,GAIA,IAFA9V,EAAA,EAAApiC,KAAA61C,GAAA4mC,EAEArsF,EAAA,EAAAA,EAAAqsF,EAAArsF,IACA,IAAA2J,EAAA,EAAAA,EAAA2iF,EAAA3iF,IACAg/C,EAAA+/B,EAAA/+E,GAAAy8C,QAAAa,OAAAulC,EAAAxsF,EAAAgyC,EAAAmV,GACAziD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA1wB,IAKA,IAAA3oD,EAAA,EAAAA,EAAAqsF,EAAArsF,IAEA,IADAojE,EAAA,IAAA/iB,EAAA+5B,gBACAzwE,EAAA,EAAAA,EAAA2iF,EAAA3iF,IAGAo7B,GAFAhmB,EAAA/e,EAAAssF,EAAA3iF,GAEA,EACA89E,GAFA72E,EAAAmO,EAAAutE,GAEA,EAEA3iF,IAAA2iF,EAAA,IACAvnD,EAAA/kC,EAAAssF,EACA7E,GAAAznF,EAAA,GAAAssF,GAGAtsF,IAAAqsF,EAAA,IACAz7E,EAAAjH,EACA89E,EAAA99E,EAAA,EACAA,IAAA2iF,EAAA,IACA7E,EAAA,IAIArkB,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,IACA0jD,GACArlB,EAAA2X,cAAApxE,GAEAjF,EAAA2sE,WAAAjO,GAKA,OADA1+D,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAeA27C,EAAAqsC,yBAAA,SAAAC,EAAAC,EAAA9X,EAAAC,EAAA0T,GAEA,IASAzoF,EAKAojE,EAAAimB,EAdA3kF,EAAA,IAAA27C,EAAA67B,KAEAtH,EAAAv0B,EAAAyV,sBAAA62B,EAAA7X,GACAD,EAAAx0B,EAAAyV,sBAAA82B,EAAA9X,GAEAjY,KACAmV,KAIA,IAHA3xB,EAAAs0B,aAAAC,EAAAC,EAAAE,EAAAlY,EAAAmV,GAGAhyE,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxc,EAAA78D,KAIA,IAAAA,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACAqpF,EAAArX,EAAAhyE,GACAojE,EAAA,IAAA/iB,EAAA+5B,YAAAiP,GACAZ,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAIA,OADA1+D,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAeA27C,EAAAwsC,aAAA,SAAAlhB,EAAAC,EAAAsb,EAAAC,EAAAsB,GAEA,IAAAqE,EAAA,IAAAzsC,EAAAmV,OAAA,IAAAnV,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA6jB,EAAA,EAAA,IACAohB,EAAA,IAAA1sC,EAAAmV,OAAA,IAAAnV,EAAAyH,MAAA,EAAA8jB,EAAA,GAAA,IAAAvrB,EAAAyH,MAAA6jB,EAAAC,EAAA,IACA,OAAAvrB,EAAAqsC,yBAAAI,EAAAC,EAAA7F,EAAAC,EAAAsB,IAaApoC,EAAA2sC,mBAAA,SAAAx4D,EAAAohC,EAAA6yB,GAEA,OAAApoC,EAAAwsC,aAAAr4D,EAAAA,EAAAohC,EAAAA,EAAA6yB,IAgBApoC,EAAA4sC,mCAAA,SAAAN,EAAAC,EAAA9X,EAAAC,EAAA0T,EAAAviD,GAEA,IASAlmC,EAKAojE,EAAAimB,EAdA3kF,EAAA,IAAA27C,EAAA67B,KAEAtH,EAAAv0B,EAAAyV,sBAAA62B,EAAA7X,GACAD,EAAAx0B,EAAAyV,sBAAA82B,EAAA9X,GAEAjY,KACAmV,KAIA,IAHA3xB,EAAAs0B,aAAAC,EAAAC,EAAAE,EAAAlY,EAAAmV,GAGAhyE,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxc,EAAA78D,KAIA,IAAAA,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACAqpF,EAAArX,EAAAhyE,GACAojE,EAAA,IAAA/iB,EAAA+5B,YAAAiP,GACAZ,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAGA,IAEA8pB,EAAAtwB,EAQAjzD,EAAAwjF,EAcApuE,EAAAnO,EAAAm0B,EAAA0iD,EAxBA2F,EAAA1oF,EAAA07D,cAGA,IAAApgE,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IACA48D,EAAAC,EAAA78D,IACAktF,EAAA,IAAA7sC,EAAAyH,MAAA8U,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,IACAA,GAAA7hB,EACAxhC,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA6T,IAIA,IAAAltF,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IAAA,CAGA,IADAmtF,KACAxjF,GAFA0/E,EAAArX,EAAAhyE,IAEAF,OAAA,EAAA6J,GAAA,EAAAA,IACAwjF,EAAA5nF,KAAA8jF,EAAA1/E,GAAAyjF,GAEAhqB,EAAA,IAAA/iB,EAAA+5B,YAAA+S,GACA1E,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAKA,IAAApjE,EAAA,EAAAA,EAAA+0E,EAAA/0E,IAEA4Q,GADAmO,EAAA/e,EAAAotF,GACA,EAEA3F,GADA1iD,EAAAhmB,EAAAquE,GACA,EACAhqB,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,IACArgC,EAAA2sE,WAAAjO,GAGA,IAAApjE,EAAA,EAAAA,EAAA+0E,EAAA/0E,IAEA4Q,GADAmO,EAAA/e,EAAA80E,GAAAC,EAAA,GAAAqY,GACA,EAEA3F,GADA1iD,EAAAhmB,EAAAquE,GACA,EACAhqB,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAgmB,EAAA0iD,EAAA72E,IACAlM,EAAA2sE,WAAAjO,GAGA,IAAApjE,EAAA,EAAAA,EAAA80E,EAAA90E,IAEA4Q,GADAmO,EAAA/e,GAAA+0E,EAAA,GAAAqY,GACArY,EAAA,EAEA0S,GADA1iD,EAAAhmB,EAAAquE,GACArY,EAAA,EACA3R,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAgmB,EAAA0iD,EAAA72E,IACAlM,EAAA2sE,WAAAjO,GAGA,IAAApjE,EAAA,EAAAA,EAAA80E,EAAA90E,IAEA4Q,GADAmO,GAAA/e,EAAA,GAAA+0E,EAAA/0E,EAAAotF,GACArY,EAAA,EAEA0S,GADA1iD,EAAAhmB,EAAAquE,GACArY,EAAA,EACA3R,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,IACArgC,EAAA2sE,WAAAjO,GAIA,OADA1+D,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAgBA27C,EAAAgtC,wBAAA,SAAAzY,EAAAC,EAAAE,EAAA0T,GAEA,IAMAzoF,EAKAojE,EAXA1+D,EAAA,IAAA27C,EAAA67B,KACArf,KACAmV,KAKA,IAHA3xB,EAAAs0B,aAAAC,EAAAC,EAAAE,EAAAlY,EAAAmV,GAGAhyE,EAAA,EAAAA,EAAA68D,EAAA/8D,OAAAE,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAAxc,EAAA78D,KAIA,IAAAA,EAAA,EAAAA,EAAAgyE,EAAAlyE,OAAAE,IACA68D,EAAAmV,EAAAhyE,GACAojE,EAAA,IAAA/iB,EAAA+5B,YAAAvd,GACA4rB,GACArlB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAIA,OADA1+D,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAkBA27C,EAAAitC,iBAAA,SAAAC,EAAAllC,EAAAnB,EAAA0O,EAAA+zB,EAAA6D,GAEA,IAOAxtF,EAAA2J,EAAAg/C,EAPAjkD,EAAA,IAAA27C,EAAA67B,KACAuR,EAAAptC,EAAA4E,QAAAiC,EAAA,EAAAt3C,KAAA61C,IAEAt2C,EAAAo+E,EAAAztF,OACAkyC,EAAAkV,EAAA0O,EACA42B,EAAAnsC,EAAA0I,SAAAV,EAAAnlC,IAAAmlC,EAAAqL,KAGA,IAAA1zD,EAAA,EAAAA,EAAAmP,EAAAnP,IACA,IAAA2J,EAAA,EAAAA,GAAAisD,EAAAjsD,IACA8jF,GAAA9jF,IAAAisD,IAIAjN,EAAA4kC,EAAAvtF,GAAAomD,QAAAa,OAAAulC,EAAA7iF,EAAAqoC,EAAAqW,EAAAqL,KACAhvD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA1wB,KAIA,IAOA5pC,EAAAgmB,EAAAn0B,EAAA62E,EAAArkB,EAPAsqB,EAAA,EAQA,IAPA,iBAAAF,EACAE,EAAA,EACA,YAAAF,IACAE,EAAA,GAIA1tF,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACA,IAAA2J,EAAA,EAAAA,EAAAisD,EAAAjsD,IAGAiH,GAFAmO,EAAA/e,GAAA41D,EAAA,GAAAjsD,GAEA,EACA89E,GAFA1iD,EAAAhmB,EAAA62C,EAAA,GAEA,EAEA63B,IAGA78E,GAFAmO,EAAA/e,EAAA41D,EAAAjsD,GAEA,EACA89E,GAFA1iD,EAAAhmB,EAAA62C,GAEA,EACAjsD,IAAAisD,EAAA,IACAhlD,EAAA5Q,EAAA41D,EACA6xB,GAAAznF,EAAA,GAAA41D,IAIAwN,EAAA,IAAA/iB,EAAA+5B,aAAAr7D,EAAAnO,EAAA62E,EAAA1iD,IACA,GAAA2oD,EACAtqB,EAAA2X,cAAA/6E,GACA,GAAA0tF,GACAtqB,EAAA2X,cAAA,GAEAr2E,EAAA2sE,WAAAjO,GAIA,GAAAqqB,GAAA9D,EAAA,CACA,IAAApB,EAAA,IAAAloC,EAAA+5B,gBACAwP,EAAA,IAAAvpC,EAAA+5B,gBACA,IAAAp6E,EAAA,EAAAA,EAAA41D,EAAA51D,IACAuoF,EAAAjO,eAAA1kB,GAAAzmD,EAAA,GAAAnP,GACA4pF,EAAAtP,eAAA1kB,EAAA51D,EAAA,GAEA0E,EAAA2sE,WAAAkX,GACA7jF,EAAA2sE,WAAAuY,GAGA,IAGA/yB,EAHA82B,EAAAnB,EAAApmC,QAAAC,YACAunC,EAAA,IAAAvtC,EAAAuW,KAAAvO,EAAAqL,IAAAi6B,GACAxD,EAAA,EAEA,IAAAnqF,EAAA,EAAAA,EAAAmP,EAAAnP,IACA62D,EAAA+2B,EAAAt4B,aAAAi4B,EAAAvtF,IACAmqF,GAAAtzB,EAAA7Q,WAAAunC,EAAAvtF,IAEAmqF,GAAAh7E,EAEA,IAAAg4C,EAAA,IAAA9G,EAAAyH,MAAAO,EAAAqL,IAAAjrB,EAAA4f,EAAAqL,IAAAhrB,EAAA2f,EAAAqL,IAAA3L,GACA08B,EAAA,IAAApkC,EAAAuW,KAAAzP,EAAAqlC,GACAqB,EAAApJ,EAAAnvB,aAAAi4B,EAAA,IACA1R,EAAAx7B,EAAA0I,SAAAwkC,EAAA,GAAAM,GAAAxnC,YAGA,OADA3hD,EAAAk5E,gCAAAz2B,EAAAgjC,EAAAtO,EAAA8R,GACAjpF,GAcA27C,EAAAytC,aAAA,SAAAC,EAAAjC,GAEA,IAIA9rF,EAAA2J,EAOAoV,EAAAnO,EAXAlM,EAAA,IAAA27C,EAAA67B,KACAhO,EAAA6f,EAAAjuF,OACAqP,EAAA4+E,EAAA,GAAAjuF,OAGA,IAAA6J,EAAA,EAAAA,EAAAwF,EAAAxF,IACA,IAAA3J,EAAA,EAAAA,EAAAkuE,EAAAluE,IACA0E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA0U,EAAA/tF,GAAA2J,KAKA,IAAAA,EAAA,EAAAA,EAAAukE,EAAA,EAAAvkE,IACA,IAAA3J,EAAA,EAAAA,EAAAmP,EAAAnP,IAEA4Q,GADAmO,EAAApV,EAAAukE,EAAAluE,GACAkuE,EACAluE,IAAAmP,EAAA,IACAyB,EAAAjH,GAEAjF,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAAr7D,EAAAnO,EAAAA,EAAA,EAAAmO,EAAA,KAIA,GAAA+sE,EAAA,CACA,IAAAvD,EAAA,IAAAloC,EAAA+5B,gBACAwP,EAAA,IAAAvpC,EAAA+5B,gBACA,IAAAp6E,EAAA,EAAAA,EAAAmP,EAAAnP,IACAuoF,EAAAjO,eAAApM,EAAAluE,EAAAkuE,EAAA,GAEA,IAAAluE,EAAAmP,EAAA,EAAAnP,GAAA,EAAAA,IACA4pF,EAAAtP,eAAApM,EAAAluE,GAEA0E,EAAA2sE,WAAAkX,GACA7jF,EAAA2sE,WAAAuY,GAIA,OADAllF,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAeA27C,EAAA2tC,wBAAA,SAAAC,EAAAC,EAAAC,EAAAv4B,EAAA6yB,GAEA,IAIAzoF,EAAA+lD,EAJA4mC,EAAA,IAAAtsC,EAAAmV,OAAA,IAAAnV,EAAAyH,MAAAomC,EAAAzlD,EAAAylD,EAAAxlD,EAAA,GAAA,IAAA2X,EAAAyH,MAAAqmC,EAAA1lD,EAAAylD,EAAAxlD,EAAA,IACAkkD,EAAA,IAAAvsC,EAAAmV,OAAA,IAAAnV,EAAAyH,MAAAomC,EAAAzlD,EAAA0lD,EAAAzlD,EAAA,GAAA,IAAA2X,EAAAyH,MAAAqmC,EAAA1lD,EAAA0lD,EAAAzlD,EAAA,IACAhkC,EAAA27C,EAAAqsC,yBAAAC,EAAAC,EAAAh3B,EAAAA,EAAA6yB,GAGA,IAAAzoF,EAAA,EAAAA,EAAA0E,EAAA07D,cAAApgE,KACA+lD,EAAArhD,EAAA43E,kBAAAt8E,IACA+nD,EAAAkmC,EAAAloC,EAAAtd,EAAAsd,EAAArd,GAIA,OADAhkC,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAgBA27C,EAAA+tC,6BAAA,SAAAH,EAAAC,EAAAC,EAAAv4B,EAAA6yB,EAAA4F,GAEA,IAIAruF,EAAA+lD,EAJA4mC,EAAA,IAAAtsC,EAAAmV,OAAA,IAAAnV,EAAAyH,MAAAqmC,EAAA1lD,EAAAylD,EAAAxlD,EAAA,GAAA,IAAA2X,EAAAyH,MAAAomC,EAAAzlD,EAAAylD,EAAAxlD,EAAA,IACAkkD,EAAA,IAAAvsC,EAAAmV,OAAA,IAAAnV,EAAAyH,MAAAqmC,EAAA1lD,EAAA0lD,EAAAzlD,EAAA,GAAA,IAAA2X,EAAAyH,MAAAomC,EAAAzlD,EAAA0lD,EAAAzlD,EAAA,IACAhkC,EAAA27C,EAAA4sC,mCAAAN,EAAAC,EAAAh3B,EAAAA,EAAA6yB,EAAA4F,GAGAjB,GAAAx3B,EAAA,IAAAA,EAAA,GACA,IAAA51D,EAAA,EAAAA,EAAAotF,EAAAptF,KACA+lD,EAAArhD,EAAA43E,kBAAAt8E,IACA+nD,EAAAkmC,EAAAloC,EAAAtd,EAAAsd,EAAArd,GAIA,OADAhkC,EAAAi5E,0BAAA,IAAAt9B,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,GAAA,IAAAzH,EAAAyH,MAAA,EAAA,EAAA,IACApjD,GAGA27C,IAGA5gD,OAAA,oCAAA,eAAA,SAAA4gD,GA6DA,OAjDAA,EAAAiuC,OAAA,SAAAlzB,EAAA3C,EAAA15B,EAAAu8B,EAAAizB,EAAAC,GAEAjoF,KAAA60D,IAAA/a,EAAAU,eAAAqa,EAAA,IAAA/a,EAAAyH,MAAA,EAAA,EAAA,IACAvhD,KAAAkyD,OAAApY,EAAAU,eAAA0X,EAAA,IAAApY,EAAAyH,MAAA,EAAA,EAAA,IACAvhD,KAAAw4B,GAAAshB,EAAAU,eAAAhiB,EAAA,IAAAshB,EAAAoI,OAAA,EAAA,EAAA,IACAliD,KAAA+0D,YAAAjb,EAAAU,eAAAua,EAAA,IACA/0D,KAAAgoF,kBAAAluC,EAAAU,eAAAwtC,EAAA,IACAhoF,KAAAioF,iBAAAnuC,EAAAU,eAAAytC,EAAA,MAcAnuC,EAAAiuC,OAAA/rF,UAAAujD,IAAA,SAAAsV,EAAA3C,EAAA15B,EAAAu8B,EAAAizB,EAAAC,GAEAjoF,KAAA60D,IAAAA,EACA70D,KAAAkyD,OAAAA,EACAlyD,KAAAw4B,GAAAA,EACAx4B,KAAA+0D,YAAAjb,EAAAU,eAAAua,EAAA,IACA/0D,KAAAgoF,kBAAAluC,EAAAU,eAAAwtC,EAAA,IACAhoF,KAAAioF,iBAAAnuC,EAAAU,eAAAytC,EAAA,MASAnuC,EAAAiuC,OAAA/rF,UAAA6jD,MAAA,WAEA,IAAA1hD,EAAA,IAAA27C,EAAAiuC,OAOA,OANA5pF,EAAA02D,IAAA70D,KAAA60D,IACA12D,EAAA+zD,OAAAlyD,KAAAkyD,OACA/zD,EAAAq6B,GAAAx4B,KAAAw4B,GACAr6B,EAAA42D,YAAA/0D,KAAA+0D,YACA52D,EAAA6pF,kBAAAhoF,KAAAgoF,kBACA7pF,EAAA8pF,iBAAAjoF,KAAAioF,iBACA9pF,GAGA27C,IAGA5gD,OAAA,qCAAA,eAAA,SAAA4gD,GA4TA,OA/SAA,EAAAouC,YAAA,SAAA9yE,EAAAm9D,EAAA4V,GAEA,SAAAC,EAAA7V,EAAA8V,EAAAC,EAAA9rC,GAEA,IAAA/iD,EACA,IAAAA,EAAA,EAAAA,EAAA84E,EAAAM,QAAAp5E,IACA4uF,EAAArpF,SAGA,IACA0zE,EADA6V,EAAA/rC,EAAA+rC,YAEA,IAAA9uF,EAAA,EAAAA,EAAA8uF,EAAA9uF,KAEA,KADAi5E,EAAAl2B,EAAAgsC,YAAA/uF,IAEA4uF,EAAA3V,GAAA1zE,KAAAvF,GAEA6uF,EAAAtpF,KAAAvF,GAiRA,YAAAqD,IAAAqrF,GAAA,OAAAA,SAIArrF,IAAAy1E,GAAA,OAAAA,IACAA,EAAA,IAAAz4B,EAAAw4B,aAjRA,SAAAl9D,EAAAm9D,EAAA4V,GAEA,SAAAM,EAAAC,EAAAC,EAAAR,GAEA,GAAA,IAAAO,EAAAnvF,OAAA,CAIA,IAMAE,EAAAo0E,EAAAxX,EANAqc,EAAAH,EAAAI,YAAAgW,GAKA,QAJA7rF,IAAAqrF,EAAAS,sBAAA,OAAAT,EAAAS,sBACAT,EAAAS,qBAAAlW,QAGA51E,IAAAqrF,EAAAU,SAAA,OAAAV,EAAAU,QAEA,IAAApvF,EAAA,EAAAA,EAAAivF,EAAAnvF,OAAAE,IACAo0E,EAAAz4D,EAAA6gE,SAAAyS,EAAAjvF,IACA48D,EAAAjhD,EAAA2gE,kBAAAlI,EAAAqF,kBACAiV,EAAAU,QAAAxyB,QAIAv5D,IAAAqrF,EAAAW,oBAAA,OAAAX,EAAAW,oBACAX,EAAAW,mBAAApW,IAIA,GAAA,IAAAt9D,EAAA0hE,aACA,OAGA,IAYAr9E,EAZAsvF,KACAC,KAYA,IAXAZ,EAAA7V,EAAAwW,EAAAC,GACAT,UAAA,WACA,OAAAnzE,EAAA0hE,cAEA0R,YAAA,SAAA1nF,GAEA,OADAsU,EAAA6gE,SAAAn1E,GACAuyE,sBAKA55E,EAAA,EAAAA,EAAAsvF,EAAAxvF,OAAAE,IACAgvF,EAAAM,EAAAtvF,GAAAA,EAAA0uF,GAEAM,EAAAO,GAAA,EAAAb,GAqOAc,CAAA7zE,EAAAm9D,EAAA4V,GAlOA,SAAA/yE,EAAAm9D,EAAA4V,GAEA,SAAAe,EAAAC,EAAAR,EAAAR,GAEA,GAAA,IAAAgB,EAAA5vF,OAAA,CAIA,IAMAE,EAAA0b,EAAAg4C,EAAAxwC,EANA+1D,EAAAH,EAAAI,YAAAgW,GAKA,QAJA7rF,IAAAqrF,EAAAiB,qBAAA,OAAAjB,EAAAiB,qBACAjB,EAAAiB,oBAAA1W,QAGA51E,IAAAqrF,EAAAkB,QAAA,OAAAlB,EAAAkB,OAEA,IAAA5vF,EAAA,EAAAA,EAAA0vF,EAAA5vF,OAAAE,IACA0b,EAAAC,EAAA8gE,QAAAiT,EAAA1vF,IACA0zD,EAAA/3C,EAAA2gE,kBAAA5gE,EAAAs+D,qBACA92D,EAAAvH,EAAA2gE,kBAAA5gE,EAAAw+D,qBACAwU,EAAAkB,OAAAl8B,EAAAxwC,QAIA7f,IAAAqrF,EAAAmB,mBAAA,OAAAnB,EAAAmB,mBACAnB,EAAAmB,kBAAA5W,IAIA,GAAA,IAAAt9D,EAAA2hE,YACA,OAGA,IAYAt9E,EAZA8vF,KACAC,KAYA,IAXApB,EAAA7V,EAAAgX,EAAAC,GACAjB,UAAA,WACA,OAAAnzE,EAAA2hE,aAEAyR,YAAA,SAAA1nF,GAEA,OADAsU,EAAA8gE,QAAAp1E,GACAuyE,sBAKA55E,EAAA,EAAAA,EAAA8vF,EAAAhwF,OAAAE,IACAyvF,EAAAK,EAAA9vF,GAAAA,EAAA0uF,GAEAe,EAAAM,GAAA,EAAArB,GAmLAsB,CAAAr0E,EAAAm9D,EAAA4V,GAhLA,SAAA/yE,EAAAm9D,EAAA4V,GAuCA,SAAAuB,EAAAC,EAAAhB,EAAAiB,EAAAzB,GAEA,SAAA0B,EAAA/oF,EAAA8oF,EAAAzB,GAEA,SAAA2B,EAAAxjC,EAAAC,EAAAwjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QAEAvtF,IAAAqrF,EAAAmC,YAAA,OAAAnC,EAAAmC,YACAnC,EAAAmC,WAAAhkC,EAAAC,EAAAwjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAIA,IAAAxtB,EAAAznD,EAAAm7D,WAAAzvE,GACA8H,EAAAi0D,EAAAwX,mBACA,GAAAzrE,EAAA,EACAkxC,EAAAmB,QAAA,8BADA,CAKA,IAAAqL,EAAAC,EAAAwjC,EACAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAOA5wF,EALA8wF,GAAA,EAMA,QALAztF,IAAAqrF,EAAAqC,mBAAA,OAAArC,EAAAqC,oBACAD,EAAApC,EAAAqC,mBAIA,GAAA5hF,GAAA2hF,EACA,IAAA9wF,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACA6sD,EAAAlxC,EAAA2gE,kBAAAlZ,EAAAqW,eAAA,IACA3sB,EAAAnxC,EAAA2gE,kBAAAlZ,EAAAqW,gBAAAz5E,EAAA,GAAAmP,IACAmhF,EAAA30E,EAAA2gE,kBAAAlZ,EAAAqW,gBAAAz5E,EAAA,GAAAmP,IACAohF,EAAAJ,EAAAa,cAAA3pF,GAAA,GACAmpF,EAAAL,EAAAa,cAAA3pF,IAAArH,EAAA,GAAAmP,GACAshF,EAAAN,EAAAa,cAAA3pF,IAAArH,EAAA,GAAAmP,GACAuhF,EAAA,KACAC,EAAA,KACAC,EAAA,KACA,OAAAT,EAAAc,gBACAP,EAAAP,EAAAc,cAAA5pF,GAAA,GACAspF,EAAAR,EAAAc,cAAA5pF,IAAArH,EAAA,GAAAmP,GACAyhF,EAAAT,EAAAc,cAAA5pF,IAAArH,EAAA,GAAAmP,IAGAkhF,EAAAxjC,EAAAC,EAAAwjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,OAEA,CACA,IAEAh0B,EAFAwpB,EAAA,IAAA/lC,EAAAskB,QAGA,IAAA3kE,EAAA,EAAAA,EAAAmP,EAAAnP,IACA48D,EAAAjhD,EAAA2gE,kBAAAlZ,EAAAvG,SAAA78D,IACAomF,EAAAzpB,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,GAGA,IAGA4V,EAHA5uB,EAAAsR,EAAAshC,2BAAAhmE,EAAAtU,GACAo2D,EAAApd,EAAA8uB,mBAAAiX,EAAAr3C,GACA,GAAA,OAAA0uB,EAEA,IAAAz9D,EAAA,EAAAA,EAAAy9D,EAAA39D,OAAAE,IACA29D,EAAAF,EAAAz9D,GACA6sD,EAAAlxC,EAAA2gE,kBAAAlZ,EAAAqW,eAAA9b,EAAA,KACA7Q,EAAAnxC,EAAA2gE,kBAAAlZ,EAAAqW,eAAA9b,EAAA,KACA2yB,EAAA30E,EAAA2gE,kBAAAlZ,EAAAqW,eAAA9b,EAAA,KACA4yB,EAAAJ,EAAAa,cAAA3pF,GAAAs2D,EAAA,IACA6yB,EAAAL,EAAAa,cAAA3pF,GAAAs2D,EAAA,IACA8yB,EAAAN,EAAAa,cAAA3pF,GAAAs2D,EAAA,IACA+yB,EAAA,KACAC,EAAA,KACAC,EAAA,KACA,OAAAT,EAAAc,gBACAP,EAAAP,EAAAc,cAAA5pF,GAAAs2D,EAAA,IACAgzB,EAAAR,EAAAc,cAAA5pF,GAAAs2D,EAAA,IACAizB,EAAAT,EAAAc,cAAA5pF,GAAAs2D,EAAA,KAGA0yB,EAAAxjC,EAAAC,EAAAwjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,QAGAvwC,EAAAmB,QAAA,2BAKA,GAAA,IAAA0uC,EAAApwF,OAAA,CAIA,IAKAE,EALAi5E,EAAAH,EAAAI,YAAAgW,GAMA,SALA7rF,IAAAqrF,EAAAwC,iBAAA,OAAAxC,EAAAwC,iBACAxC,EAAAwC,gBAAAjY,GAIAj5E,EAAA,EAAAA,EAAAkwF,EAAApwF,OAAAE,IACAowF,EAAAF,EAAAlwF,GAAAmwF,EAAAzB,QAGArrF,IAAAqrF,EAAAyC,eAAA,OAAAzC,EAAAyC,eACAzC,EAAAyC,cAAAlY,IAIA,GAAA,IAAAt9D,EAAAk7D,eACA,OAGA,IAAAua,KACAC,KACA1C,EAAA7V,EAAAsY,EAAAC,GACAvC,UAAA,WACA,OAAAnzE,EAAAk7D,gBAEAkY,YAAA,SAAA1nF,GACA,IAAA+7D,EAAAznD,EAAAm7D,WAAAzvE,GACA,OAAA+7D,EAAAwW,sBAIA,IACA55E,EADAmwF,EA7JA,SAAAx0E,EAAAm9D,GAEA,IAEA94E,EAAA2J,EAFAqnF,EAAA3wC,EAAAyhC,2BAAAnmE,GAGA21E,GAAA,EACA,QAAAjuF,IAAAy1E,GAAA,OAAAA,EACA,IAAA94E,EAAA,EAAAA,EAAA84E,EAAAM,QAAAp5E,IACA,GAAA,OAAA84E,EAAAI,YAAAl5E,GAAA04E,QAAA,CACA4Y,GAAA,EACA,MAKA,IACAluB,EAAA6V,EADAgY,EAAA,KAEA,GAAAK,EAEA,IADAL,EAAA5wC,EAAAklC,2BAAA5pE,GACA3b,EAAA,EAAAA,EAAAixF,EAAAnxF,OAAAE,IAEA,IADAojE,EAAAznD,EAAAm7D,WAAA92E,IACA25E,mBAEA,IADAV,EAAAH,EAAAI,YAAA9V,EAAAwW,oBACAjwE,EAAA,EAAAA,EAAAsnF,EAAAjxF,GAAAF,OAAA6J,IACAsnF,EAAAjxF,GAAA2J,GAAA8+B,GAAAwwC,EAAAN,aACAsY,EAAAjxF,GAAA2J,GAAA++B,IAAAuwC,EAAAL,cAMA,OACAoY,cAAAA,EACAC,cAAAA,GA4HAM,CAAA51E,EAAAm9D,GAEA,IAAA94E,EAAA,EAAAA,EAAAoxF,EAAAtxF,OAAAE,IACAiwF,EAAAmB,EAAApxF,GAAAA,EAAAmwF,EAAAzB,GAEAuB,EAAAoB,GAAA,EAAAlB,EAAAzB,GAaA8C,CAAA71E,EAAAm9D,EAAA4V,IACA,IAGAruC,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GAidA,OAtcAA,EAAAoxC,uBAAA,SAAA91E,EAAA1b,EAAA8wF,GAEA,SAAAW,EAAAh2E,GAEAi2E,GAAAj2E,EAAA,KAGA,SAAAk2E,EAAA7iD,EAAA8d,EAAAC,EAAAwjC,GAEAoB,EAAA,kBAAA3iD,EAAAtG,EAAA,IAAAsG,EAAArG,EAAA,IAAAqG,EAAAgZ,GACA2pC,EAAA,kBACAA,EAAA,gBAAA7kC,EAAApkB,EAAA,IAAAokB,EAAAnkB,EAAA,IAAAmkB,EAAA9E,GACA2pC,EAAA,gBAAA5kC,EAAArkB,EAAA,IAAAqkB,EAAApkB,EAAA,IAAAokB,EAAA/E,GACA2pC,EAAA,gBAAApB,EAAA7nD,EAAA,IAAA6nD,EAAA5nD,EAAA,IAAA4nD,EAAAvoC,GACA2pC,EAAA,eACAA,EAAA,cAGA,SAAArgB,EAAAhqE,GAEA,IAAA+7D,EAAAznD,EAAAm7D,WAAAzvE,GACA8H,EAAAi0D,EAAAwX,mBACA,KAAAzrE,EAAA,GAAA,CAIA,IAAA09C,EAAAC,EAAAwjC,EACAvhD,EAAA,KACA,GAAA,IAAA5/B,EACA4/B,EAAAsR,EAAAshC,2BAAAhmE,EAAAtU,GACAwlD,EAAAlxC,EAAAukD,UAAAkD,EAAAqW,eAAA,IAAApxD,SACAykC,EAAAnxC,EAAAukD,UAAAkD,EAAAqW,eAAA,IAAApxD,SACAioE,EAAA30E,EAAAukD,UAAAkD,EAAAqW,eAAA,IAAApxD,SACAupE,EAAA7iD,EAAA8d,EAAAC,EAAAwjC,OACA,CACA,IAKAtwF,EALA6xF,GAAA,EAOA,QANAxuF,IAAA0tF,GAAAA,IACAc,GAAA,GAIA9iD,EAAAsR,EAAAshC,2BAAAhmE,EAAAtU,GACAwqF,EAAA,CACA,IAEAj1B,EAFAwpB,EAAA,IAAA/lC,EAAAskB,QAGA,IAAA3kE,EAAA,EAAAA,EAAAmP,EAAAnP,IACA48D,EAAAjhD,EAAAukD,UAAAkD,EAAAvG,SAAA78D,IACAomF,EAAAzpB,UAAAC,EAAAv0C,SAAAogB,EAAAm0B,EAAAv0C,SAAAqgB,EAAAk0B,EAAAv0C,SAAA0/B,GAGA,IAEA4V,EAFAF,EAAApd,EAAA8uB,mBAAAiX,EAAAr3C,GACA,GAAA,OAAA0uB,EAEA,IAAAz9D,EAAA,EAAAA,EAAAy9D,EAAA39D,OAAAE,IACA29D,EAAAF,EAAAz9D,GACA6sD,EAAAlxC,EAAAukD,UAAAkD,EAAAqW,eAAA9b,EAAA,KAAAt1C,SACAykC,EAAAnxC,EAAAukD,UAAAkD,EAAAqW,eAAA9b,EAAA,KAAAt1C,SACAioE,EAAA30E,EAAAukD,UAAAkD,EAAAqW,eAAA9b,EAAA,KAAAt1C,SACAupE,EAAA7iD,EAAA8d,EAAAC,EAAAwjC,QAIA,IAAAtwF,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACA6sD,EAAAlxC,EAAAukD,UAAAkD,EAAAqW,eAAA,IAAApxD,SACAykC,EAAAnxC,EAAAukD,UAAAkD,EAAAqW,gBAAAz5E,EAAA,GAAAmP,IAAAkZ,SACAioE,EAAA30E,EAAAukD,UAAAkD,EAAAqW,gBAAAz5E,EAAA,GAAAmP,IAAAkZ,SACAupE,EAAA7iD,EAAA8d,EAAAC,EAAAwjC,KAMA,IAEAtwF,EAFA2xF,EAAA,GAGA,IAAA3xF,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACAqxE,EAAArxE,GAGA,OAAA2xF,GAaAtxC,EAAAyxC,gBAAA,SAAAn2E,EAAA1b,EAAA8wF,GAEA,SAAAW,EAAAh2E,GAEAi2E,GAAAj2E,EAAA,KAGA,IAAAi2E,EAAA,GAMA,OAJAD,EAAA,SAAAzxF,GACA0xF,GAAAtxC,EAAAoxC,uBAAA91E,EAAA1b,EAAA8wF,GACAW,EAAA,YAAAzxF,GAEA0xF,GAaAtxC,EAAA0xC,iBAAA,SAAAC,EAAA/xF,EAAA8wF,GAEA,SAAAW,EAAAh2E,GAEAi2E,GAAAj2E,EAAA,KAGA,IAGA1b,EAAA2b,EAHAg2E,EAAA,GAIA,IAFAD,EAAA,SAAAzxF,GAEAD,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IACA2b,EAAAq2E,EAAAxT,QAAAx+E,GACA2xF,GAAAtxC,EAAAoxC,uBAAA91E,EAAA1b,GAAAD,EAAA,GAAAQ,WAAAuwF,GAIA,OAFAW,EAAA,YAAAzxF,GAEA0xF,GAaAtxC,EAAA4xC,uBAAA,SAAAt2E,EAAAu2E,EAAAC,GAEA,SAAAC,EAAA12E,GAEA22E,GAAA32E,EAGA,SAAAg2E,EAAAh2E,GAEA22E,GAAA32E,EAAA,KASA,SAAA42E,EAAAjrF,GAEA,IAAAkrF,EAAAlyC,EAAAshC,2BAAAhmE,EAAAtU,GACAqqF,EAAA,MAAAa,EAAA9pD,EAAA,IAAA8pD,EAAA7pD,EAAA,IAAA6pD,EAAAxqC,GAGA,SAAAspB,EAAAhqE,GAEA,IAIArH,EAJAojE,EAAAznD,EAAAm7D,WAAAzvE,GAKA,IAHA+qF,EAAA,MAGApyF,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACAoyF,EAAAF,EAAA9uB,EAAAqW,eAAAz5E,GAAA,EAAA,MAAAmyF,EAAA9qF,EAAA,GAAA,KAGAqqF,EAAA,IAGA,IAEA1xF,EA5BAqH,EAEAmrF,EAwBAH,EAAA,GAGA,IAAAryF,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IA7BAqH,EA8BArH,OA5BAwyF,EACAd,EAAA,MADAc,EAAA72E,EAAAukD,UAAA74D,GAAAghB,UACAogB,EAAA,IAAA+pD,EAAA9pD,EAAA,IAAA8pD,EAAAzqC,GA8BA,IAAA/nD,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACAsyF,EAAAtyF,GAGA,IAAAA,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACAqxE,EAAArxE,GAGA,OAAAqyF,GAWAhyC,EAAAoyC,gBAAA,SAAA92E,GAEA,OAAA0kC,EAAA4xC,uBAAAt2E,EAAA,EAAA,IAWA0kC,EAAAqyC,iBAAA,SAAAV,GAEA,IAKAhyF,EAAA2b,EALA02E,EAAA,GAEAH,EAAA,EACAC,EAAA,EAGA,IAAAnyF,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IACA2b,EAAAq2E,EAAAxT,QAAAx+E,GACAqyF,GAAAhyC,EAAA4xC,uBAAAt2E,EAAAu2E,EAAAC,GACAD,GAAAv2E,EAAAykD,cACA+xB,GAAAx2E,EAAAk7D,eAGA,OAAAwb,GAWAhyC,EAAAsyC,qBAAA,SAAA7Z,GAcA,SAAAE,EAAAC,EAAA5xE,GAEA,IAdA+vE,EAEAK,EAYAmb,GAdAxb,EAcA6B,EAAAb,SAZAX,EAAAp3B,EAAA82B,wBAAAC,IACA,GAAA,IAAA,IAAAK,EAAA,GAAA,IAAA,IAAAA,EAAA,GAAA,KAMAob,GAMA,4BAAAxrF,EAAA,QAAAurF,EAAA,MAAAvrF,EANA,KASA,IAMArH,EANA6yF,EAAA,GACAC,GAAA,EAMA,QALAzvF,IAAAy1E,GAAA,OAAAA,IACAga,GAAA,GAIAA,EAEA,IADA9Z,EAAAF,EAAAK,qBAAA,GACAn5E,EAAA,EAAAA,EAAA84E,EAAAM,QAAAp5E,IACAg5E,EAAAF,EAAAI,YAAAl5E,GAAAA,EAAA,GAIA,OAAA6yF,GAYAxyC,EAAA0yC,wBAAA,SAAAp3E,EAAAm3E,GAEA,SAAAV,EAAA12E,GAGA,GAAAA,EAAA5b,OADA,IACA,CACA,IACAE,EAAAgzF,EADAj0E,EAAA,EAEA,IAAA/e,EAAA,EAAAA,EAAA0b,EAAA5b,OAAAE,IACAgzF,EAAAt3E,EAAA1b,GACA6yF,GAAAG,IACAj0E,EAPA,KAQA,KAAAi0E,IACAH,GAAA,KACA9zE,EAAA,QAIA8zE,GAAAn3E,EAIA,SAAAg2E,EAAAh2E,GAEA02E,EAAA12E,EAAA,MASA,SAAAohD,EAAAyiB,EAAAl4E,GAEA,IAAAk2D,EAAAgiB,EAAAtiB,MAAA51D,GACA8uC,EAAA,GACA,GAAAonB,EAAAwhB,QAAA,GAAAxhB,EAAAyhB,OACArjE,EAAAm7D,WAAAvZ,EAAAwhB,OAAAlE,iBAAAl/D,EAAAm7D,WAAAvZ,EAAAyhB,OAAAnE,iBACAl/D,EAAAm7D,WAAAvZ,EAAAwhB,OAAAjE,iBAAAn/D,EAAAm7D,WAAAvZ,EAAAyhB,OAAAlE,kBACA3kC,EAAA,GAIAu7C,EAAA,SAAAn0B,EAAAL,MAAA,GAAA,MAAAK,EAAAJ,MAAA,GAAA,aAAAhnB,EAAA,OAAA9uC,EAAA,IAGA,SAAAgqE,EAAAkO,EAAAl4E,EAAA4rF,GAEA,IAAA/D,GAAA,EACA4D,IACA5D,EAAAvzE,EAAAm7D,WAAAzvE,GAAAuyE,mBAAA,IACAqZ,GACAvB,EAAA,yBAAAxC,EAAA,KAIA,IAAAjP,EAAAV,EAAAV,MAAAx3E,GACA8uC,EAAA,EACAx6B,EAAAm7D,WAAAzvE,GAAAwzE,kBACA1kC,EAAA,GAEAi8C,EAAA,QAAAnS,EAAAb,OAAAt/E,OAAA,QAAAq2C,EAAA,MACA,IACAn2C,EAAA2/E,EADAuT,EAAA,GAEA,IAAAlzF,EAAA,EAAAA,EAAAigF,EAAAb,OAAAt/E,OAAAE,KACA2/E,EAAAM,EAAAb,OAAAp/E,IACAqd,QAGA61E,KAAAvT,EAAAt4E,MAAA,GAFA6rF,GAAAvT,EAAAt4E,MAAA,EAIArH,EAAAigF,EAAAb,OAAAt/E,OAAA,IACAozF,GAAA,MAOA,OAJAd,EAAAc,GACAd,EAAA,OAAA/qF,EAAA,IACAqqF,EAAA,IAEAxC,EAGA,IAAA2D,EAAA,GAEAnB,EAAA,QACA,IAEA1xF,EA7DAqH,EAEAmrF,EAyDAjT,EAAA,IAAAl/B,EAAAg/B,cAAA1jE,GAGA,IAAA3b,EAAA,EAAAA,EAAAu/E,EAAAJ,MAAAr/E,OAAAE,IA9DAqH,EA+DArH,OA7DAwyF,EACAd,EAAA,SADAc,EAAA72E,EAAAukD,UAAA74D,GAAAghB,UACAogB,EAAA,KAAA+pD,EAAA9pD,EAAA,KAAA8pD,EAAAzqC,EAAA,OAAA1gD,EAAA,IA+DA,IAAArH,EAAA,EAAAA,EAAAu/E,EAAAtiB,MAAAn9D,OAAAE,IACA88D,EAAAyiB,EAAAv/E,GAGA,IAAAizF,GAAA,EACA,IAAAjzF,EAAA,EAAAA,EAAAu/E,EAAAV,MAAA/+E,OAAAE,IACAizF,EAAA5hB,EAAAkO,EAAAv/E,EAAAizF,GAIA,OADAvB,EAAA,WACAmB,GAYAxyC,EAAA8yC,gBAAA,SAAAx3E,EAAAm9D,GAEA,IAAA+Z,EAAA,GAEAC,GAAA,EAOA,YANAzvF,IAAAy1E,GAAA,OAAAA,IACA+Z,GAAAxyC,EAAAsyC,qBAAA7Z,GACAga,GAAA,GAGAD,GAAAxyC,EAAA0yC,wBAAAp3E,EAAAm3E,IAaAzyC,EAAA+yC,iBAAA,SAAApB,EAAAlZ,GAEA,IAOA94E,EAAA2b,EAPAk3E,EAAA,GACAC,GAAA,EAOA,SANAzvF,IAAAy1E,GAAA,OAAAA,IACA+Z,GAAAxyC,EAAAsyC,qBAAA7Z,GACAga,GAAA,GAIA9yF,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IACA2b,EAAAq2E,EAAAxT,QAAAx+E,GACA6yF,GAAAxyC,EAAA0yC,wBAAAp3E,EAAAm3E,GAGA,OAAAD,GAGAxyC,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GA4dA,OAvdAA,EAAAgzC,aAAA,SAAApzF,GAEAsG,KAAAtG,KAAAA,EACAsG,KAAAs2D,YACAt2D,KAAA+sF,WACA/sF,KAAAgtF,OACAhtF,KAAAk3D,aACAl3D,KAAAitF,gBAAA,GASAnzC,EAAAgzC,aAAA9wF,UAAAkxF,QAAA,SAAAxzF,GAEAsG,KAAAtG,KAAAA,GASAogD,EAAAgzC,aAAA9wF,UAAAmxF,QAAA,WAEA,OAAAntF,KAAAtG,MAWAogD,EAAAgzC,aAAA9wF,UAAAo6D,UAAA,SAAAl0B,EAAAC,EAAAqf,GAGA,OADAxhD,KAAAs2D,SAAAt3D,KAAA,IAAA86C,EAAAyH,MAAArf,EAAAC,EAAAqf,IACAxhD,KAAAs2D,SAAA/8D,OAAA,GAWAugD,EAAAgzC,aAAA9wF,UAAA29D,UAAA,SAAA74D,GAEA,OAAAd,KAAAs2D,SAAAx1D,IAUAg5C,EAAAgzC,aAAA9wF,UAAAoxF,UAAA,SAAAtsF,EAAAohC,EAAAC,EAAAqf,GAEAxhD,KAAAs2D,SAAAx1D,GAAA,IAAAg5C,EAAAyH,MAAArf,EAAAC,EAAAqf,IASA1H,EAAAgzC,aAAA9wF,UAAA69D,YAAA,WAEA,OAAA75D,KAAAs2D,SAAA/8D,QAWAugD,EAAAgzC,aAAA9wF,UAAA+vF,UAAA,SAAA7pD,EAAAC,EAAAqf,GAGA,OADAxhD,KAAA+sF,QAAA/tF,KAAA,IAAA86C,EAAAoI,OAAAhgB,EAAAC,EAAAqf,IACAxhD,KAAA+sF,QAAAxzF,OAAA,GAWAugD,EAAAgzC,aAAA9wF,UAAA83D,UAAA,SAAAhzD,GAEA,OAAAd,KAAA+sF,QAAAjsF,IAaAg5C,EAAAgzC,aAAA9wF,UAAAqxF,kBAAA,SAAA72B,EAAA82B,GAEA,IAAA9kD,EAAA,KACA4uB,EAAAp3D,KAAAk3D,UAAAV,GACA,IAAA,GAAAY,EAAAm2B,MACA/kD,EAAAxoC,KAAA8zD,UAAAsD,EAAAo2B,QACA,CACA,IAAAznC,EAAA/lD,KAAA25D,UAAAvC,EAAArR,IACAC,EAAAhmD,KAAA25D,UAAAvC,EAAApR,IACAC,EAAAjmD,KAAA25D,UAAAvC,EAAAnR,IACAunC,EAAAxtF,KAAA8zD,UAAAsD,EAAAo2B,IACAC,EAAAztF,KAAA8zD,UAAAsD,EAAAq2B,IACAC,EAAA1tF,KAAA8zD,UAAAsD,EAAAs2B,IACAllD,EAAAsR,EAAAsM,yBAAAL,EAAAC,EAAAC,EAAAunC,EAAAC,EAAAC,EAAAJ,GAEA,OAAA9kD,GASAsR,EAAAgzC,aAAA9wF,UAAA2xF,YAAA,WAEA,OAAA3tF,KAAA+sF,QAAAxzF,QAWAugD,EAAAgzC,aAAA9wF,UAAA4xF,MAAA,SAAA1rD,EAAAC,GAGA,OADAniC,KAAAgtF,IAAAhuF,KAAA,IAAA86C,EAAAwF,QAAApd,EAAAC,IACAniC,KAAAgtF,IAAAzzF,OAAA,GAWAugD,EAAAgzC,aAAA9wF,UAAA6xF,aAAA,WAEA,OAAA,GAAA7tF,KAAAitF,eACAjtF,KAAAitF,gBAGAjtF,KAAAitF,eAAAjtF,KAAA4tF,MAAA,EAAA,GACA5tF,KAAAitF,iBAWAnzC,EAAAgzC,aAAA9wF,UAAA8xF,MAAA,SAAAhtF,GAEA,OAAAd,KAAAgtF,IAAAlsF,IASAg5C,EAAAgzC,aAAA9wF,UAAA+xF,QAAA,WAEA,OAAA/tF,KAAAgtF,IAAAzzF,QAeAugD,EAAAgzC,aAAA9wF,UAAAi7D,YAAA,SAAAlR,EAAAC,EAAAC,EAAAunC,EAAAC,EAAAC,EAAAM,EAAAC,EAAApjC,EAAAqjC,EAAAX,GAeA,OAbAvtF,KAAAk3D,UAAAl4D,MACA+mD,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAunC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAM,GAAAA,EACAC,GAAAA,EACApjC,GAAAA,EACAqjC,IAAAA,EACAX,MAAAA,IAEAvtF,KAAAk3D,UAAA39D,OAAA,GAWAugD,EAAAgzC,aAAA9wF,UAAAmyF,YAAA,SAAArtF,GAEA,OAAAd,KAAAk3D,UAAAp2D,IASAg5C,EAAAgzC,aAAA9wF,UAAAoyF,cAAA,WAEA,OAAApuF,KAAAk3D,UAAA39D,QASAugD,EAAAgzC,aAAA9wF,UAAAmhE,eAAA,WAEA,IAGA1jE,EAAA+lD,EAHAsO,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAoE,IAAApE,EAAAoE,IAAApE,EAAAoE,KACA5yB,EAAA,IAAAwuB,EAAAyH,OAAAzH,EAAAoE,KAAApE,EAAAoE,KAAApE,EAAAoE,KAGA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA+lD,EAAAx/C,KAAAs2D,SAAA78D,GACAq0D,EAAA5rB,EAAA4X,EAAAiF,QAAA+O,EAAA5rB,EAAAsd,EAAAtd,GACA4rB,EAAA3rB,EAAA2X,EAAAiF,QAAA+O,EAAA3rB,EAAAqd,EAAArd,GACA2rB,EAAAtM,EAAA1H,EAAAiF,QAAA+O,EAAAtM,EAAAhC,EAAAgC,GACAl2B,EAAA4W,EAAA4X,EAAAkF,QAAA1zB,EAAA4W,EAAAsd,EAAAtd,GACA5W,EAAA6W,EAAA2X,EAAAkF,QAAA1zB,EAAA6W,EAAAqd,EAAArd,GACA7W,EAAAk2B,EAAA1H,EAAAkF,QAAA1zB,EAAAk2B,EAAAhC,EAAAgC,GAGA,OAAA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IASAwuB,EAAAgzC,aAAA9wF,UAAA01D,UAAA,WAEA,IAAA0L,EAAAp9D,KAAAm9D,iBACA,OAAAC,EAAA1L,aASA5X,EAAAgzC,aAAA9wF,UAAAs7E,kBAAA,WAEA,IAGA79E,EAAA+e,EAHA05C,EAAAlyD,KAAA0xD,YACAhN,EAAA,EAGA,IAAAjrD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA+e,EAAA05C,EAAAzS,WAAAz/C,KAAAs2D,SAAA78D,IACAqgD,EAAA2E,UAAAjmC,EAAAksC,KACAA,EAAAlsC,GAIA,IAAAra,EAAA,IAAA27C,EAAAmY,OAAAC,EAAAxN,GACA,OAAAvmD,GAWA27C,EAAAgzC,aAAA9wF,UAAAqyF,SAAA,SAAA5C,GAEA,SAAA6C,EAAAl5E,EAAAohD,EAAA+3B,EAAAC,GAEA,SAAAC,EAAAr5E,EAAA4oD,EAAAxH,EAAA+3B,EAAAC,GAEA,IAKA/0F,EAAAi1F,EAAAC,EALAC,EAAA,IAAA90C,EAAAoI,OAAA,EAAA,EAAA,GACA2sC,EAAA,EAEAz3B,EAAAhiD,EAAA+4E,YAAA33B,GACAs4B,EAAAN,EAAAxwB,GAEA,IAAAvkE,EAAA,EAAAA,EAAAq1F,EAAAv1F,OAAAE,IACAi1F,EAAAI,EAAAr1F,GACAk1F,EAAAv5E,EAAA+4E,YAAAO,GACAt3B,EAAAm2B,OAAAoB,EAAApB,QACAqB,EAAA90C,EAAAyI,SAAAqsC,EAAAL,EAAAG,IACAG,GAAA,GAMA,OAFAD,EAAAzuC,eAAA,EAAA0uC,GACAD,EAAA9uC,YACA1qC,EAAA22E,UAAA6C,EAAA1sD,EAAA0sD,EAAAzsD,EAAAysD,EAAAptC,GAGA,IAKAhZ,EAAAumD,EALA33B,EAAAhiD,EAAA8hD,UAAAV,SACA15D,IAAAs6D,EAAA82B,KAAA92B,EAAA82B,IAAA,KACA92B,EAAA82B,IAAAzC,EAAAuD,gCAIAlyF,IAAAs6D,EAAAo2B,SAAA1wF,IAAAs6D,EAAAq2B,SAAA3wF,IAAAs6D,EAAAs2B,UACA5wF,IAAAs6D,EAAAm2B,OAAAn2B,EAAAm2B,MAAA,GACA/kD,EAAA+lD,EAAA/3B,GACAu4B,EAAA35E,EAAA22E,UAAAvjD,EAAAtG,EAAAsG,EAAArG,EAAAqG,EAAAgZ,GACA4V,EAAAo2B,GAAAuB,EACA33B,EAAAq2B,GAAAsB,EACA33B,EAAAs2B,GAAAqB,EACA33B,EAAAm2B,OAAA,IAEAn2B,EAAAo2B,GAAAiB,EAAAr5E,EAAAgiD,EAAArR,GAAAyQ,EAAA+3B,EAAAC,GACAp3B,EAAAq2B,GAAAgB,EAAAr5E,EAAAgiD,EAAApR,GAAAwQ,EAAA+3B,EAAAC,GACAp3B,EAAAs2B,GAAAe,EAAAr5E,EAAAgiD,EAAAnR,GAAAuQ,EAAA+3B,EAAAC,UAIA1xF,IAAAs6D,EAAA42B,SAAAlxF,IAAAs6D,EAAA62B,SAAAnxF,IAAAs6D,EAAAvM,KACAuM,EAAA42B,GAAA54E,EAAAy4E,eACAz2B,EAAA62B,GAAA74E,EAAAy4E,eACAz2B,EAAAvM,GAAAz1C,EAAAy4E,gBAIA,IAGAp0F,EAKA29D,EAAA5uB,EARA+lD,KACAC,KAGA,IAAA/0F,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA+0F,EAAA/0F,MAIA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAk3D,UAAA39D,OAAAE,IACA29D,EAAAp3D,KAAAk3D,UAAAz9D,GACA+uC,EAAAsR,EAAAgM,wBAAA9lD,KAAAs2D,SAAAc,EAAArR,IAAA/lD,KAAAs2D,SAAAc,EAAApR,IAAAhmD,KAAAs2D,SAAAc,EAAAnR,KACAsoC,EAAAvvF,KAAAwpC,GACAgmD,EAAAp3B,EAAArR,IAAA/mD,KAAAvF,GACA+0F,EAAAp3B,EAAApR,IAAAhnD,KAAAvF,GACA+0F,EAAAp3B,EAAAnR,IAAAjnD,KAAAvF,GAGA,IAAAA,EAAA,EAAAA,EAAAuG,KAAAk3D,UAAA39D,OAAAE,IACA60F,EAAAtuF,KAAAvG,EAAA80F,EAAAC,IAUA10C,EAAAgzC,aAAA9wF,UAAA6jD,MAAA,WAEA,IAEApmD,EAAA29D,EAFAj5D,EAAA,IAAA27C,EAAAgzC,aAAA9sF,KAAAtG,MAIA,IAAAD,EAAA,EAAAA,EAAAuG,KAAAs2D,SAAA/8D,OAAAE,IACA0E,EAAAm4D,SAAAt3D,KAAAgB,KAAAs2D,SAAA78D,GAAAomD,SAGA,IAAApmD,EAAA,EAAAA,EAAAuG,KAAA+sF,QAAAxzF,OAAAE,IACA0E,EAAA4uF,QAAA/tF,KAAAgB,KAAA+sF,QAAAtzF,GAAAomD,SAGA,IAAApmD,EAAA,EAAAA,EAAAuG,KAAAgtF,IAAAzzF,OAAAE,IACA0E,EAAA6uF,IAAAhuF,KAAAgB,KAAAgtF,IAAAvzF,GAAAomD,SAGA,IAAApmD,EAAA,EAAAA,EAAAuG,KAAAk3D,UAAA39D,OAAAE,IACA29D,EAAAp3D,KAAAk3D,UAAAz9D,GACA0E,EAAA+4D,UAAAl4D,MACA+mD,GAAAqR,EAAArR,GACAC,GAAAoR,EAAApR,GACAC,GAAAmR,EAAAnR,GACAunC,GAAAp2B,EAAAo2B,GACAC,GAAAr2B,EAAAq2B,GACAC,GAAAt2B,EAAAs2B,GACAM,GAAA52B,EAAA42B,GACAC,GAAA72B,EAAA62B,GACApjC,GAAAuM,EAAAvM,GACAqjC,IAAA92B,EAAA82B,IACAX,MAAAn2B,EAAAm2B,QAIA,OAAApvF,GAWA27C,EAAAm1C,4BAAA,SAAA75E,GAEA,IACA3b,EAAA29D,EAAArR,EAAAC,EAAAC,EADA9nD,EAAA,IAAA27C,EAAA4wB,eAAAt1D,EAAA+nD,kBAEA,IAAA1jE,EAAA,EAAAA,EAAA2b,EAAAg5E,gBAAA30F,IACA29D,EAAAhiD,EAAA+4E,YAAA10F,GACAssD,EAAA3wC,EAAAukD,UAAAvC,EAAArR,IACAC,EAAA5wC,EAAAukD,UAAAvC,EAAApR,IACAC,EAAA7wC,EAAAukD,UAAAvC,EAAAnR,IACA9nD,EAAA84D,YAAAlR,EAAAC,EAAAC,GACAuQ,cAAA/8D,IAGA,OAAA0E,GAGA27C,IAGA5gD,OAAA,2CAAA,eAAA,SAAA4gD,GAsNA,OAjNAA,EAAAo1C,cAAA,WAEAlvF,KAAAuyE,aACAvyE,KAAA83E,UACA93E,KAAAwyE,iBAAA,GAWA14B,EAAAo1C,cAAAlzF,UAAAy2E,YAAA,SAAAC,GAGA,OADA1yE,KAAAuyE,UAAAvzE,KAAA0zE,GACA1yE,KAAAuyE,UAAAh5E,OAAA,GAWAugD,EAAAo1C,cAAAlzF,UAAA22E,YAAA,SAAA7xE,GAEA,OAAAd,KAAAuyE,UAAAzxE,IASAg5C,EAAAo1C,cAAAlzF,UAAAmzF,mBAAA,WAKA,OAHA,GAAAnvF,KAAAwyE,kBACAxyE,KAAAwyE,gBAAAxyE,KAAAyyE,iBAEAzyE,KAAAwyE,iBASA14B,EAAAo1C,cAAAlzF,UAAAgzF,wBAAA,WAEA,OAAAhvF,KAAAmvF,sBASAr1C,EAAAo1C,cAAAlzF,UAAAo8E,cAAA,WAEA,OAAAp4E,KAAAuyE,UAAAh5E,QAWAugD,EAAAo1C,cAAAlzF,UAAA+7E,QAAA,SAAA3iE,GAGA,OADApV,KAAA83E,OAAA94E,KAAAoW,GACApV,KAAA83E,OAAAv+E,OAAA,GAYAugD,EAAAo1C,cAAAlzF,UAAAozF,eAAA,SAAAh6E,EAAAtU,GAGA,OADAd,KAAA83E,OAAAt1E,OAAA1B,EAAA,EAAAsU,GACAtU,GAWAg5C,EAAAo1C,cAAAlzF,UAAAi8E,QAAA,SAAAn3E,GAEA,OAAAd,KAAA83E,OAAAh3E,IASAg5C,EAAAo1C,cAAAlzF,UAAA69D,YAAA,WAEA,IACApgE,EAAA2b,EADAjX,EAAA,EAEA,IAAA1E,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACA2b,EAAApV,KAAA83E,OAAAr+E,GACA0E,GAAAiX,EAAAykD,cAEA,OAAA17D,GASA27C,EAAAo1C,cAAAlzF,UAAAoyF,cAAA,WAEA,IACA30F,EAAA2b,EADAjX,EAAA,EAEA,IAAA1E,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACA2b,EAAApV,KAAA83E,OAAAr+E,GACA0E,GAAAiX,EAAAg5E,gBAEA,OAAAjwF,GASA27C,EAAAo1C,cAAAlzF,UAAAk8E,UAAA,WAEA,OAAAl4E,KAAA83E,OAAAv+E,QASAugD,EAAAo1C,cAAAlzF,UAAAqzF,kBAAA,WAEA,IAcA51F,EAAAi5E,EAdA4c,GACA51F,KAAA,UACAk4E,SAAA,GAAA,GAAA,IACAC,SAAA,GAAA,GAAA,IACAC,UAAA,GAAA,GAAA,IACAC,UAAA,EACA51C,QAAA,EACA61C,WAAA,EACAG,QAAA,KACAtuE,OAAA,KACAglC,MAAA,KACA0mD,SAAA,MAIA,IAAA91F,EAAA,EAAAA,EAAAuG,KAAAuyE,UAAAh5E,OAAAE,IACAi5E,EAAA1yE,KAAAuyE,UAAA94E,GACAqgD,EAAAc,qBAAA00C,EAAA5c,GAAA,IAQA54B,EAAAo1C,cAAAlzF,UAAAwzF,eAAA,WAEA,IAAA/1F,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACAuG,KAAA83E,OAAAr+E,GACA40F,SAAAruF,OAQA85C,EAAAo1C,cAAAlzF,UAAAqyF,SAAA,WAEAruF,KAAAwvF,iBACAxvF,KAAAqvF,qBAGAv1C,IAGA5gD,OAAA,uCAAA,eAAA,SAAA4gD,GA+TA,OAtTAA,EAAA21C,0BAAA,SAAAr6E,GAEA,SAAA6hD,EAAA94D,EAAA0+D,EAAA9W,EAAAC,EAAAC,GAEA,IAAAuQ,EAAAr4D,EAAA84D,YAAAlR,EAAAC,EAAAC,GACAmR,EAAAj5D,EAAAgwF,YAAA33B,GACAqG,EAAAuW,qBACAhc,EAAA82B,IAAArxB,EAAAwW,oBAEAxW,EAAAyX,kBACAld,EAAAm2B,MAAA1wB,EAAA0X,iBAIA,IAEA96E,EAAA2J,EAAAizD,EAMAwG,EAAAZ,EACA4jB,EAAAr3C,EAAA4uB,EAAAF,EACAnR,EAAAC,EAAAC,EAVA9nD,EAAA,IAAA27C,EAAAgzC,aAGA,IAAArzF,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACA48D,EAAAjhD,EAAA2gE,kBAAAt8E,GACA0E,EAAAi4D,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,GAMA,IAAA/nD,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAGA,GAFAojE,EAAAznD,EAAAm7D,WAAA92E,MACAwiE,EAAAY,EAAAwX,oBACA,GAGA,GAAA,GAAApY,EACAlW,EAAA8W,EAAAqW,eAAA,GACAltB,EAAA6W,EAAAqW,eAAA,GACAjtB,EAAA4W,EAAAqW,eAAA,GACAjc,EAAA94D,EAAA0+D,EAAA9W,EAAAC,EAAAC,OACA,CAEA,IADA45B,EAAA,IAAA/lC,EAAAskB,QACAh7D,EAAA,EAAAA,EAAA64D,EAAA74D,IACAizD,EAAAjhD,EAAA2gE,kBAAAlZ,EAAAqW,eAAA9vE,IACAy8E,EAAAzpB,UAAAC,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,GAKA,GAFAhZ,EAAAsR,EAAAshC,2BAAAhmE,EAAA3b,GAEA,QADAy9D,EAAApd,EAAA8uB,mBAAAiX,EAAAr3C,IAEA,IAAAplC,EAAA,EAAAA,EAAA8zD,EAAA39D,OAAA6J,IACAg0D,EAAAF,EAAA9zD,GACA2iD,EAAA8W,EAAAqW,eAAA9b,EAAA,IACApR,EAAA6W,EAAAqW,eAAA9b,EAAA,IACAnR,EAAA4W,EAAAqW,eAAA9b,EAAA,IACAH,EAAA94D,EAAA0+D,EAAA9W,EAAAC,EAAAC,GAMA,OAAA9nD,GAWA27C,EAAA41C,4BAAA,SAAAjE,GAEA,IAEAhyF,EAAAi5E,EAcAt9D,EAAAu6E,EAhBAxxF,EAAA,IAAA27C,EAAAo1C,cACA3c,EAAAkZ,EAAAtT,iBAEA,IAAA1+E,EAAA,EAAAA,EAAA84E,EAAAM,QAAAp5E,IACAi5E,EAAAH,EAAAI,YAAAl5E,GACA0E,EAAAs0E,aACA/4E,KAAA,WAAAD,EACAm4E,QAAA93B,EAAAm3B,kCAAAyB,EAAAd,SACAC,QAAA/3B,EAAAm3B,kCAAAyB,EAAAb,SACAC,SAAAh4B,EAAAm3B,kCAAAyB,EAAAZ,UACAC,UAAAW,EAAAX,UACA51C,QAAAu2C,EAAAv2C,QACA61C,WAAAU,EAAAV,aAKA,IAAAv4E,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IACA2b,EAAAq2E,EAAAxT,QAAAx+E,GACAk2F,EAAA71C,EAAA21C,0BAAAr6E,GACAjX,EAAA45E,QAAA4X,GAGA,OADAxxF,EAAAkwF,WACAlwF,GAWA27C,EAAA81C,+BAAA,SAAAnE,GAyBA,SAAAoE,EAAApE,EAAAr2E,EAAA06E,GAEA,IAGAr2F,EAAA2J,EAAAo8C,EAoBA4X,EAvBA24B,KACAC,EAAAvE,EAAArT,gBAGA,IAAA3+E,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACA+lD,EAAApqC,EAAAukD,UAAAlgE,GACAq2F,EAAAx5B,SAAAt3D,KAAAwgD,EAAAtd,EAAAsd,EAAArd,EAAAqd,EAAAgC,GAGA,IAAA/nD,EAAA,EAAAA,EAAA2b,EAAAu4E,cAAAl0F,IACA+lD,EAAApqC,EAAA0+C,UAAAr6D,GACAq2F,EAAA/C,QAAA/tF,KAAAwgD,EAAAtd,EAAAsd,EAAArd,EAAAqd,EAAAgC,GAGA,IAAA/nD,EAAA,EAAAA,EAAA2b,EAAA24E,UAAAt0F,IACA+lD,EAAApqC,EAAA04E,MAAAr0F,GACAq2F,EAAA9C,IAAAhuF,KAAAwgD,EAAAtd,EAAAsd,EAAArd,GAGA,IAAA1oC,EAAA,EAAAA,EAAAu2F,EAAAv2F,IACAs2F,EAAA/wF,SAIA,IAAAvF,EAAA,EAAAA,EAAA2b,EAAAg5E,gBAAA30F,SAEAqD,KADAs6D,EAAAhiD,EAAA+4E,YAAA10F,IACAy0F,KAAA92B,EAAA82B,IAAA,GAAA92B,EAAA82B,KAAA8B,GAGAD,EAAA34B,EAAA82B,KAAAlvF,KAAAvF,GAGA,IACAy9D,EAAA+4B,EACA,IAAAx2F,EAAA,EAAAA,EAAAs2F,EAAAx2F,OAAAE,IAEA,GAAA,KADAy9D,EAAA64B,EAAAt2F,IACAF,OAAA,CAQA,IAJA02F,GACAvd,SAAAj5E,EACAk4E,eAEAvuE,EAAA,EAAAA,EAAA8zD,EAAA39D,OAAA6J,IACAg0D,EAAAhiD,EAAA+4E,YAAAj3B,EAAA9zD,IACA6sF,EAAAte,WAAA3yE,KACAo4D,EAAArR,GAAAqR,EAAApR,GAAAoR,EAAAnR,GACAmR,EAAAo2B,GAAAp2B,EAAAq2B,GAAAr2B,EAAAs2B,GACAt2B,EAAA42B,GAAA52B,EAAA62B,GAAA72B,EAAAvM,IAGAqM,EAAA39D,OACAu2F,EAAA54B,UAAAl4D,KAAAixF,IAIA,IAQAx2F,EAAA2b,EAAA06E,EARA3xF,GACA2V,QAAA,EACAy+D,aACA2d,WAMA,IA3FA,SAAAzE,EAAAlZ,GAEA,IAAA94E,EAAAi5E,EAAAyd,EACA,IAAA12F,EAAA,EAAAA,EAAAgyF,EAAArT,gBAAA3+E,IACAi5E,EAAA+Y,EAAA9Y,YAAAl5E,GACA02F,GACAz2F,KAAAogD,EAAAU,eAAAk4B,EAAAh5E,KAAA,IACAk4E,QAAAc,EAAAd,QACAC,QAAAa,EAAAb,QACAC,SAAAY,EAAAZ,SACAC,UAAAW,EAAAX,UACA51C,QAAAu2C,EAAAv2C,cAEAr/B,IAAA41E,EAAAP,SAAA,OAAAO,EAAAP,UACAge,EAAAhe,QAAAr4B,EAAAU,eAAAk4B,EAAAP,QAAA,MACAge,EAAAtsF,OAAA6uE,EAAA7uE,OACAssF,EAAAtnD,MAAA6pC,EAAA7pC,MACAsnD,EAAAZ,SAAA7c,EAAA6c,UAEAhd,EAAAvzE,KAAAmxF,GAqEAC,CAAA3E,EAAAttF,EAAAo0E,WAGA94E,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IAEA,KADA2b,EAAAq2E,EAAAxT,QAAAx+E,IACA20F,kBAGA0B,GACAp2F,KAAA0b,EAAA+3E,UACA72B,YACAy2B,WACAC,OACA91B,cAEA24B,EAAApE,EAAAr2E,EAAA06E,GACA3xF,EAAA+xF,OAAAlxF,KAAA8wF,IAGA,OAAA3xF,GAWA27C,EAAAu2C,oBAAA,SAAAryC,GAEA,SAAAsyC,EAAAR,EAAAS,EAAAC,GAgBA,SAAAC,EAAAX,EAAAY,EAAAF,EAAA7E,EAAAC,EAAA+E,GAEA,IAAAje,EAAAge,EAAAhe,SACAke,EAAAJ,EAAA9d,QACA51E,IAAA8zF,IACAd,EAAA54B,UAAAl4D,MACA0zE,SAAAA,EACAf,gBAEAif,EAAAd,EAAA54B,UAAA39D,OAAA,EACAi3F,EAAA9d,GAAAke,GAGA,IAEAn3F,EAFAy9D,EAAA44B,EAAA54B,UAAA05B,GACAC,EAAA35B,EAAAya,WAEA,IAAAl4E,EAAA,EAAAA,EAAAi3F,EAAA/e,WAAAp4E,OAAAE,GAAA,EACAo3F,EAAA7xF,KACA0xF,EAAA/e,WAAAl4E,GAAAkyF,EACA+E,EAAA/e,WAAAl4E,EAAA,GAAAkyF,EACA+E,EAAA/e,WAAAl4E,EAAA,GAAAkyF,EACA+E,EAAA/e,WAAAl4E,EAAA,GAAAmyF,EACA8E,EAAA/e,WAAAl4E,EAAA,GAAAmyF,EACA8E,EAAA/e,WAAAl4E,EAAA,GAAAmyF,EACA8E,EAAA/e,WAAAl4E,EAAA,GAAAk3F,EACAD,EAAA/e,WAAAl4E,EAAA,GAAAk3F,EACAD,EAAA/e,WAAAl4E,EAAA,GAAAk3F,GAKA,IAKAl3F,EAAAi3F,EALA/E,EAAAmE,EAAAx5B,SAAA/8D,OAAA,EACAqyF,EAAAkE,EAAA/C,QAAAxzF,OAAA,EACAo3F,EAAAb,EAAA9C,IAAAzzF,OAAA,EAIA,IAnDA,SAAAu2F,EAAAS,GAEA,IAAA92F,EACA,IAAAA,EAAA,EAAAA,EAAA82F,EAAAj6B,SAAA/8D,OAAAE,IACAq2F,EAAAx5B,SAAAt3D,KAAAuxF,EAAAj6B,SAAA78D,IAEA,IAAAA,EAAA,EAAAA,EAAA82F,EAAAxD,QAAAxzF,OAAAE,IACAq2F,EAAA/C,QAAA/tF,KAAAuxF,EAAAxD,QAAAtzF,IAEA,IAAAA,EAAA,EAAAA,EAAA82F,EAAAvD,IAAAzzF,OAAAE,IACAq2F,EAAA9C,IAAAhuF,KAAAuxF,EAAAvD,IAAAvzF,IAsCAq3F,CAAAhB,EAAAS,GAGA92F,EAAA,EAAAA,EAAA82F,EAAAr5B,UAAA39D,OAAAE,IACAi3F,EAAAH,EAAAr5B,UAAAz9D,GACAg3F,EAAAX,EAAAY,EAAAF,EAAA7E,EAAAC,EAAA+E,GAIA,IAeAl3F,EAAA82F,EAfApyF,GACA2V,QAAAkqC,EAAAlqC,QACAy+D,UAAAv0B,EAAAu0B,UACA2d,WAGAJ,GACAp2F,KAAA,SACA48D,YACAy2B,WACAC,OACA91B,cAGAs5B,KAEA,IAAA/2F,EAAA,EAAAA,EAAAukD,EAAAkyC,OAAA32F,OAAAE,IACA82F,EAAAvyC,EAAAkyC,OAAAz2F,GACA62F,EAAAR,EAAAS,EAAAC,GAIA,OADAryF,EAAA+xF,OAAAlxF,KAAA8wF,GACA3xF,GAGA27C,IAGA5gD,OAAA,sCAAA,eAAA,SAAA4gD,GAqVA,OA3UAA,EAAAi3C,wBAAA,SAAAC,EAAAjrC,EAAAC,EAAAC,GAEA,IAAAgrC,EAAAD,EAAApiB,YACAsiB,EAAAF,EAAAniB,eAEAsiB,EAAAr3C,EAAA0I,SAAAwD,EAAAD,GACAqrC,EAAAt3C,EAAA0I,SAAAyD,EAAAF,GACAsrC,EAAAv3C,EAAAqI,YAAA+uC,EAAAE,GAEA9sC,EAAAxK,EAAA2H,UAAA0vC,EAAAE,GACA,GAAAv3C,EAAAuE,OAAAiG,GACA,OAAA,KAGA,IAAAgtC,EAAAx3C,EAAAwE,WAAAgG,GACA,IAAAgtC,EACA,OAAA,KAGA,IAAAC,EAAA,EAAAjtC,EAEAktC,EAAA13C,EAAA0I,SAAAyuC,EAAAlrC,GACAhE,EAAAjI,EAAA2H,UAAA+vC,EAAAH,GAAAE,EACA,GAAAz3C,EAAA0E,QAAAuD,EAAA,IAAAjI,EAAA2E,UAAAsD,EAAA,GACA,OAAA,KAGA,IAAA0vC,EAAA33C,EAAAqI,YAAAqvC,EAAAL,GACAj7E,EAAA4jC,EAAA2H,UAAAyvC,EAAAO,GAAAF,EACA,GAAAz3C,EAAA0E,QAAAtoC,EAAA,IAAA4jC,EAAA2E,UAAAsD,EAAA7rC,EAAA,GACA,OAAA,KAGA,IAAAuqC,EAAA3G,EAAA2H,UAAA2vC,EAAAK,GAAAF,EACA,IAAAz3C,EAAAwE,WAAAmC,GACA,OAAA,KAGA,GAAAuwC,EAAAliB,gBAAAruB,GACA,OAAA,KAGA,IAAAixC,EAAAR,EAAArxC,QAAAM,eAAAM,GACAmN,GACA9rC,SAAAg4B,EAAAyI,SAAA0uC,EAAAS,GACAjxC,SAAAA,GAEA,OAAAmN,GAYA9T,EAAA63C,mBAAA,SAAAX,EAAAljC,EAAAxiC,GAEA,IAWA7xB,EAXAm4F,EAAAZ,EAAApiB,YACAijB,EAAAb,EAAAniB,eAEAoiB,EAAAn3C,EAAAwI,aAAAsvC,GACAV,EAAAp3C,EAAAwI,aAAAuvC,GACAC,EAAAh4C,EAAAwI,aAAAwL,GACAikC,EAAAj4C,EAAAwI,aAAAh3B,GACA0mE,GAAA,EAAA,EAAA,GACAC,GAAA,EAAA,EAAA,GAEAC,GAAA,EAEA,IAAAz4F,EAAA,EAAAA,EAAA,EAAAA,IACAqgD,EAAA0E,QAAAyyC,EAAAx3F,GAAAq4F,EAAAr4F,KACAu4F,EAAAv4F,IAAA,EACAw4F,EAAAx4F,GAAAq4F,EAAAr4F,GACAy4F,GAAA,GACAp4C,EAAA2E,UAAAwyC,EAAAx3F,GAAAs4F,EAAAt4F,KACAu4F,EAAAv4F,GAAA,EACAw4F,EAAAx4F,GAAAs4F,EAAAt4F,GACAy4F,GAAA,GAEAF,EAAAv4F,GAAA,EAKA,GAAAy4F,EAKA,OAHApwE,SAAA8vE,EACAnxC,SAAA,GAKA,IAAA0xC,GAAA,EAAA,EAAA,GACA,IAAA14F,EAAA,EAAAA,EAAA,EAAAA,IACA,IAAAu4F,EAAAv4F,IAAAqgD,EAAAuE,OAAA6yC,EAAAz3F,IAGA04F,EAAA14F,IAAA,EAFA04F,EAAA14F,IAAAw4F,EAAAx4F,GAAAw3F,EAAAx3F,IAAAy3F,EAAAz3F,GAMA,IAAA24F,EAAA,EACA,IAAA34F,EAAA,EAAAA,EAAA,EAAAA,IACAqgD,EAAA0E,QAAA2zC,EAAAC,GAAAD,EAAA14F,MACA24F,EAAA34F,GAIA,GAAAqgD,EAAAyE,WAAA4zC,EAAAC,IACA,OAAA,KAGA,IAAAC,GAAA,EAAA,EAAA,GACA,IAAA54F,EAAA,EAAAA,EAAA,EAAAA,IACA,GAAA24F,GAAA34F,GAEA,GADA44F,EAAA54F,GAAAw3F,EAAAx3F,GAAA04F,EAAAC,GAAAlB,EAAAz3F,GACAqgD,EAAA0E,QAAA6zC,EAAA54F,GAAAq4F,EAAAr4F,KAAAqgD,EAAA2E,UAAA4zC,EAAA54F,GAAAs4F,EAAAt4F,IACA,OAAA,UAGA44F,EAAA54F,GAAAw4F,EAAAx4F,GAIA,IAAA64F,EAAAx4C,EAAAuI,eAAAgwC,GACA5xC,EAAAmxC,EAAAnyC,WAAA6yC,GACA,OAAAtB,EAAAliB,gBAAAruB,GACA,MAIA3+B,SAAAwwE,EACA7xC,SAAAA,IAeA3G,EAAAy4C,sBAAA,SAAAvB,EAAAjoB,EAAAnb,GAEA,IAAA4kC,EAAA,KACAC,GAAA,EACAC,EAAA,OAAA9kC,QAAA9wD,IAAA8wD,EAmCA,OAjCA9T,EAAAgvB,oBAAAC,EAAA,SAAA51D,GACA,IAAAu/E,GAAAD,EACA,OAAA,EAEA,IAAA34C,EAAA63C,mBAAAX,EAAA79E,EAAAs2D,IAAA3b,IAAA36C,EAAAs2D,IAAAn+C,KACA,OAAA,EAEA,IAAA7xB,EACA,IAAAA,EAAA,EAAAA,EAAA0Z,EAAA+jD,UAAA39D,OAAAE,IAAA,CACA,IAAA29D,EAAAjkD,EAAA+jD,UAAAz9D,GACAssD,EAAAqR,EAAArR,GACAC,EAAAoR,EAAApR,GACAC,EAAAmR,EAAAnR,GACA0sC,EAAA74C,EAAAi3C,wBAAAC,EAAAjrC,EAAAC,EAAAC,GACA,GAAA,OAAA0sC,EAAA,CAEA,GADAF,GAAA,GACAC,EACA,OAAA,GAEA,OAAAF,GAAAG,EAAAlyC,SAAA+xC,EAAA/xC,aACA+xC,EAAAG,GACAj2C,SAAA0a,EAAA1a,WAIA,OAAA,IAGAg2C,GAAA,OAAAF,IACA5kC,EAAA9rC,SAAA0wE,EAAA1wE,SACA8rC,EAAAnN,SAAA+xC,EAAA/xC,SACAmN,EAAAlR,SAAA81C,EAAA91C,UAEA+1C,GAaA34C,EAAA84C,4BAAA,SAAA5B,EAAA57E,EAAAw4C,GAEA,IAIAn0D,EAAA29D,EAAArR,EAAAC,EAAAC,EAAA0sC,EAJAH,EAAA,KACAC,GAAA,EACAC,EAAA,OAAA9kC,QAAA9wD,IAAA8wD,EAGA,IAAAn0D,EAAA,EAAAA,EAAA2b,EAAAg5E,gBAAA30F,IAMA,GALA29D,EAAAhiD,EAAA+4E,YAAA10F,GACAssD,EAAA3wC,EAAAukD,UAAAvC,EAAArR,IACAC,EAAA5wC,EAAAukD,UAAAvC,EAAApR,IACAC,EAAA7wC,EAAAukD,UAAAvC,EAAAnR,IAEA,QADA0sC,EAAA74C,EAAAi3C,wBAAAC,EAAAjrC,EAAAC,EAAAC,IACA,CAEA,GADAwsC,GAAA,GACAC,EACA,OAEA,OAAAF,GAAAG,EAAAlyC,SAAA+xC,EAAA/xC,aACA+xC,EAAAG,GACAn8B,cAAA/8D,GAUA,OALAi5F,GAAA,OAAAF,IACA5kC,EAAA9rC,SAAA0wE,EAAA1wE,SACA8rC,EAAAnN,SAAA+xC,EAAA/xC,SACAmN,EAAA4I,cAAAg8B,EAAAh8B,eAEAi8B,GAaA34C,EAAA+4C,6BAAA,SAAA7B,EAAAvF,EAAA79B,GAEA,IAGAn0D,EAAA2b,EAAAu9E,EAHAH,EAAA,KACAC,GAAA,EACAC,EAAA,OAAA9kC,QAAA9wD,IAAA8wD,EAEA,IAAAn0D,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IAGA,GAFA2b,EAAAq2E,EAAAxT,QAAAx+E,GACAk5F,EAAAD,KAAA,KACA54C,EAAA84C,4BAAA5B,EAAA57E,EAAAu9E,GAAA,CAEA,GADAF,GAAA,GACAC,EACA,OAEA,OAAAF,GAAAG,EAAAlyC,SAAA+xC,EAAA/xC,aACA+xC,EAAAG,GACAG,UAAAr5F,GAWA,OANAi5F,GAAA,OAAAF,IACA5kC,EAAA9rC,SAAA0wE,EAAA1wE,SACA8rC,EAAAnN,SAAA+xC,EAAA/xC,SACAmN,EAAA4I,cAAAg8B,EAAAh8B,cACA5I,EAAAklC,UAAAN,EAAAM,WAEAL,GAeA34C,EAAAi5C,uCAAA,SAAA/B,EAAAvF,EAAA79B,GAEA,IAGAn0D,EAAA2b,EAAA49E,EAAAL,EAHAH,EAAA,KACAC,GAAA,EACAC,EAAA,OAAA9kC,QAAA9wD,IAAA8wD,EAEA,IAAAn0D,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IAaA,GAZA2b,EAAAq2E,EAAAxT,QAAAx+E,GACAu5F,GAAA,EACAL,EAAAD,KAAA,KACAt9E,EAAAg5E,gBAAA,SACAtxF,IAAAsY,EAAA2zD,SACA3zD,EAAA2zD,OAAAjvB,EAAAm1C,4BAAA75E,IAEA49E,EAAAl5C,EAAAy4C,sBAAAvB,EAAA57E,EAAA2zD,OAAA4pB,IAEAK,EAAAl5C,EAAA84C,4BAAA5B,EAAA57E,EAAAu9E,GAGAK,EAAA,CAEA,GADAP,GAAA,GACAC,EACA,OAEA,OAAAF,GAAAG,EAAAlyC,SAAA+xC,EAAA/xC,YACA+xC,EAAAG,OACA71F,IAAA61F,EAAAj2C,WACA81C,EAAAh8B,cAAAm8B,EAAAj2C,SAAA8Z,eAEAg8B,EAAAM,UAAAr5F,GAWA,OANAi5F,GAAA,OAAAF,IACA5kC,EAAA9rC,SAAA0wE,EAAA1wE,SACA8rC,EAAAnN,SAAA+xC,EAAA/xC,SACAmN,EAAA4I,cAAAg8B,EAAAh8B,cACA5I,EAAAklC,UAAAN,EAAAM,WAEAL,GAGA34C,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GA4FA,OA3FAA,EAAAm5C,aAAA,SAAAC,EAAAC,GAEAnzF,KAAAkzF,YAAAA,EACAlzF,KAAAozF,SAAA,IAAAC,SAAAH,GACAlzF,KAAAmzF,eAAAA,EACAnzF,KAAA8hB,SAAA,GAGAg4B,EAAAm5C,aAAAj3F,UAAA+2E,YAAA,WAEA,OAAA/yE,KAAA8hB,UAGAg4B,EAAAm5C,aAAAj3F,UAAAs3F,cAAA,WAEA,OAAAtzF,KAAAkzF,YAAAK,YAGAz5C,EAAAm5C,aAAAj3F,UAAAw3F,KAAA,SAAAC,GAEAzzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA2xE,GAGA35C,EAAAm5C,aAAAj3F,UAAA03F,IAAA,WAEA,OAAA1zF,KAAA8hB,UAAA9hB,KAAAkzF,YAAAK,YAGAz5C,EAAAm5C,aAAAj3F,UAAA23F,YAAA,WAEA,IAAAx1F,EAAA6B,KAAAozF,SAAAQ,QAAA5zF,KAAA8hB,UAEA,OADA9hB,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,IACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAA63F,cAAA,WAEA,IAAA11F,EAAA6B,KAAAozF,SAAAQ,QAAA5zF,KAAA8hB,UAEA,OADA9hB,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAA83F,sBAAA,WAEA,IAAA31F,EAAA6B,KAAAozF,SAAAW,SAAA/zF,KAAA8hB,UAEA,OADA9hB,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAAg4F,cAAA,WAEA,IAAA71F,EAAA6B,KAAAozF,SAAAa,SAAAj0F,KAAA8hB,SAAA9hB,KAAAmzF,gBAEA,OADAnzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAAk4F,sBAAA,WAEA,IAAA/1F,EAAA6B,KAAAozF,SAAAe,UAAAn0F,KAAA8hB,SAAA9hB,KAAAmzF,gBAEA,OADAnzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAAo4F,cAAA,WAEA,IAAAj2F,EAAA6B,KAAAozF,SAAAiB,SAAAr0F,KAAA8hB,SAAA9hB,KAAAmzF,gBAEA,OADAnzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAAs4F,sBAAA,WAEA,IAAAn2F,EAAA6B,KAAAozF,SAAAmB,UAAAv0F,KAAA8hB,SAAA9hB,KAAAmzF,gBAEA,OADAnzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAAw4F,YAAA,WAEA,IAAAr2F,EAAA6B,KAAAozF,SAAAqB,WAAAz0F,KAAA8hB,SAAA9hB,KAAAmzF,gBAEA,OADAnzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,EAAAm5C,aAAAj3F,UAAA04F,aAAA,WAEA,IAAAv2F,EAAA6B,KAAAozF,SAAAuB,WAAA30F,KAAA8hB,SAAA9hB,KAAAmzF,gBAEA,OADAnzF,KAAA8hB,SAAA9hB,KAAA8hB,SAAA,EACA3jB,GAGA27C,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GA8HA,OA7HAA,EAAA86C,sBAAA,SAAA76E,EAAAyiC,GAEA,IAAA9L,EAAA,IAAA9B,eACA8B,EAAAH,KAAA,MAAAx2B,GAAA,GACA22B,EAAAmkD,aAAA,cAEAnkD,EAAAokD,OAAA,WACA,IAAA5B,EAAAxiD,EAAAP,SACA+iD,GAAA12C,EAAAsB,SACAtB,EAAAsB,QAAAo1C,IAIAxiD,EAAAqkD,QAAA,WACAv4C,EAAAw4C,SACAx4C,EAAAw4C,WAIAtkD,EAAAD,KAAA,OAGAqJ,EAAAm7C,uBAAA,SAAA3tE,EAAAk1B,GAEA,IAAA04C,EAAA,IAAAx3C,WAEAw3C,EAAA1lD,UAAA,SAAA1+B,GACAA,EAAA3R,OAAAs4B,YAAAimB,WAAAy3C,MAAA34C,EAAAsB,SACAtB,EAAAsB,QAAAhtC,EAAA3R,OAAAhB,SAIA+2F,EAAAH,QAAA,WACAv4C,EAAAw4C,SACAx4C,EAAAw4C,WAIAE,EAAAE,kBAAA9tE,IAGAwyB,EAAAu7C,uBAAA,SAAAt7E,EAAAyiC,GAEA,IAAA9L,EAAA,IAAA9B,eACA8B,EAAAH,KAAA,MAAAx2B,GAAA,GACA22B,EAAAmkD,aAAA,OAEAnkD,EAAAokD,OAAA,WACA,IAAAQ,EAAA5kD,EAAAP,SACAmlD,GAAA94C,EAAAsB,SACAtB,EAAAsB,QAAAw3C,IAIA5kD,EAAAqkD,QAAA,WACAv4C,EAAAw4C,SACAx4C,EAAAw4C,WAIAtkD,EAAAD,KAAA,OAGAqJ,EAAAy7C,wBAAA,SAAAjuE,EAAAk1B,GAEA,IAAA04C,EAAA,IAAAx3C,WAEAw3C,EAAA1lD,UAAA,SAAA1+B,GACAA,EAAA3R,OAAAs4B,YAAAimB,WAAAy3C,MAAA34C,EAAAsB,SACAtB,EAAAsB,QAAAhtC,EAAA3R,OAAAhB,SAIA+2F,EAAAH,QAAA,WACAv4C,EAAAw4C,SACAx4C,EAAAw4C,WAIAE,EAAAM,WAAAluE,IAGAwyB,EAAA27C,oBAAA,SAAAC,EAAA53C,IAEA,SAAA63C,EAAAD,EAAA50F,EAAA3C,EAAA2/C,GAEA,GAAAh9C,GAAA40F,EAAAn8F,OAEA,YADAukD,EAAA3/C,GAIA,IAAAy3F,EAAAF,EAAA50F,GACA,IAAA+0F,EAAA,KAGAA,EAFAD,EAAAE,OACAF,EAAAG,cACAj8C,EAAAm7C,uBAEAn7C,EAAAy7C,wBAGAK,EAAAG,cACAj8C,EAAA86C,sBAEA96C,EAAAu7C,uBAIAQ,EAAAD,EAAAI,gBACAl4C,QAAA,SAAAm4C,GACA93F,EAAAa,KAAAi3F,GACAN,EAAAD,EAAA50F,EAAA,EAAA3C,EAAA2/C,IAEAk3C,QAAA,WACA72F,EAAAa,KAAA,MACA22F,EAAAD,EAAA50F,EAAA,EAAA3C,EAAA2/C,MAMA63C,CAAAD,EAAA,KAAA,SAAAv3F,GACA2/C,EAAA3/C,MAIA27C,IAGA5gD,OAAA,wCAAA,eAAA,SAAA4gD,GA87BA,OA77BAA,EAAAo8C,YAAA,SAAAhD,EAAA12C,GAEA,SAAA25C,EAAAC,EAAAC,QAEAv5F,IAAA0/C,EAAA85C,OAAA,OAAA95C,EAAA85C,OACA95C,EAAA85C,MAAAF,EAAAC,GAgCA,SAAAv9B,EAAA52B,EAAAC,EAAAqf,QAEA1kD,IAAA0/C,EAAA+5C,UAAA,OAAA/5C,EAAA+5C,UACA/5C,EAAA+5C,SAAAr0D,EAAAC,EAAAqf,GAIA,SAAAg1C,EAAAt0D,EAAAC,QAEArlC,IAAA0/C,EAAAi6C,iBAAA,OAAAj6C,EAAAi6C,iBACAj6C,EAAAi6C,gBAAAv0D,EAAAC,GAIA,SAAAu0D,EAAA3wC,EAAAC,EAAAC,EAAA0wC,QAEA75F,IAAA0/C,EAAAo6C,QAAA,OAAAp6C,EAAAo6C,QACAp6C,EAAAo6C,OAAA7wC,EAAAC,EAAAC,EAAA0wC,GAIA,SAAAE,EAAAC,EAAAC,QAEAj6F,IAAA0/C,EAAAw6C,gBAAA,OAAAx6C,EAAAw6C,gBACAx6C,EAAAw6C,eAAAF,EAAAC,GAIA,SAAAE,EAAAH,EAAAI,QAEAp6F,IAAA0/C,EAAA26C,sBAAA,OAAA36C,EAAA26C,sBACA36C,EAAA26C,qBAAAL,EAAAI,GAIA,SAAAE,EAAAlC,EAAAp3C,GAEA,IAAAu5C,EAAAnC,EAAAhB,wBACAoD,EAAApC,EAAAZ,wBACAx2C,EAAAu5C,EAAAC,GAGA,SAAAC,EAAArC,EAAA37F,GAEA27F,EAAA1B,KAAAj6F,EAAA,GAGA,SAAAi+F,EAAAtC,EAAA37F,GAEA,OAAA27F,EAAAniB,cAAAx5E,EAAA,EAGA,SAAAk+F,EAAAvC,GAKA,IAHA,IAAAx7F,EAAA,GACAg+F,EAAA,EACA9uF,EAAA,EACAA,EAAA,IAEA,KADA8uF,EAAAxC,EAAArB,kBAIAn6F,GAAAW,OAAAs9F,aAAAD,GACA9uF,GAAA,EAEA,OAAAlP,EAGA,SAAAk+F,EAAA1C,GAEA,IACAz7F,EADA0E,KAEA,IAAA1E,EAAA,EAAAA,EAAA,EAAAA,IACA0E,EAAA1E,GAAAy7F,EAAAV,cAEA,OAAAr2F,EAGA,SAAA05F,EAAA3C,EAAA4C,EAAAh6C,GAEA,KAAAo3C,EAAAniB,eAAA+kB,EAAA,GACAV,EAAAlC,EAAAp3C,QAmZAhhD,IAAA0/C,GAAA,OAAAA,IACAA,MAGA,IA4CA04C,EAAA,IAAAp7C,EAAAm5C,aAAAC,GAAA,IA/bA,SAAAgC,EAAA6C,GAEA,SAAAC,EAAA9C,EAAAjsF,EAAA1P,GAEA,IAAA4jF,GAAA,EAAA,EAAA,GACA2a,EAAAN,EAAAtC,EAAA37F,GACA0+F,GAAA,EA4BA,OA3BAJ,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAG,UACAD,IACA9a,EAAA,GAAA+X,EAAApB,wBAAA,IACA3W,EAAA,GAAA+X,EAAApB,wBAAA,IACA3W,EAAA,GAAA+X,EAAApB,wBAAA,KAEAuD,GAAAU,EAAAI,eACAhb,EAAA,GAAA+X,EAAApB,wBAAA,IACA3W,EAAA,GAAA+X,EAAApB,wBAAA,IACA3W,EAAA,GAAA+X,EAAApB,wBAAA,IACAmE,GAAA,GACAZ,GAAAU,EAAAK,YACAH,IACA9a,EAAA,GAAA+X,EAAAV,cACArX,EAAA,GAAA+X,EAAAV,cACArX,EAAA,GAAA+X,EAAAV,eAEA6C,GAAAU,EAAAM,iBACAlb,EAAA,GAAA+X,EAAAV,cACArX,EAAA,GAAA+X,EAAAV,cACArX,EAAA,GAAA+X,EAAAV,cACAyD,GAAA,GAEAV,EAAArC,EAAAoC,KAGAna,EAGA,SAAAmb,EAAApD,EAAAjsF,EAAA1P,GAEA,IAAAg/F,EAAA,EACAT,EAAAN,EAAAtC,EAAA37F,GAUA,OATAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAS,WACAD,EAAArD,EAAAhB,wBAAA,IACAmD,GAAAU,EAAAU,aACAF,EAAArD,EAAAV,cAEA+C,EAAArC,EAAAoC,KAGAiB,EA8BA,SAAAG,EAAAxD,EAAAjsF,EAAA1P,GAEA48F,EAAA,wBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAAAm5E,KACAolB,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAY,UACAxC,EAAA,6BAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAh5E,KAAA+9F,EAAAvC,IACAmC,GAAAU,EAAAa,aACAzC,EAAA,gCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAd,QAAAomB,EAAA9C,EAAAmC,EAAAC,IACAD,GAAAU,EAAAc,aACA1C,EAAA,gCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAb,QAAAmmB,EAAA9C,EAAAmC,EAAAC,IACAD,GAAAU,EAAAe,cACA3C,EAAA,iCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAZ,SAAAkmB,EAAA9C,EAAAmC,EAAAC,IACAD,GAAAU,EAAAgB,eACA5C,EAAA,kCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAX,UAAAumB,EAAApD,EAAAmC,EAAAC,IACAD,GAAAU,EAAAiB,wBACA7C,EAAA,2CAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAumB,kBAAAX,EAAApD,EAAAmC,EAAAC,IACAD,GAAAU,EAAAmB,kBACA/C,EAAA,qCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAm5E,EAAAymB,aAAAb,EAAApD,EAAAmC,EAAAC,IACAD,GAAAU,EAAAqB,YACAjD,EAAA,oCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAxDA,SAAA27F,EAAAjsF,EAAA1P,EAAAm5E,GAEAA,EAAAP,QAAA,KACAO,EAAA7uE,QAAA,EAAA,GACA6uE,EAAA7pC,OAAA,EAAA,GACA6pC,EAAA6c,SAAA,EAEA,IAAAuI,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAsB,gBACA3mB,EAAAP,QAAAslB,EAAAvC,GACAmC,GAAAU,EAAAuB,mBACA5mB,EAAA7uE,OAAA,GAAAqxF,EAAAV,cACA6C,GAAAU,EAAAwB,mBACA7mB,EAAA7uE,OAAA,GAAAqxF,EAAAV,cACA6C,GAAAU,EAAAyB,kBACA9mB,EAAA7pC,MAAA,GAAAqsD,EAAAV,cACA6C,GAAAU,EAAA0B,kBACA/mB,EAAA7pC,MAAA,GAAAqsD,EAAAV,cACA6C,GAAAU,EAAA2B,oBACAhnB,EAAA6c,SAAA2F,EAAAV,cAEA+C,EAAArC,EAAAoC,KAmCAqC,CAAAzE,EAAAmC,EAAAC,EAAA5kB,KAEAyjB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAlOA,SAAA5kB,QAEA51E,IAAA0/C,EAAAo9C,YAAA,OAAAp9C,EAAAo9C,YACAp9C,EAAAo9C,WAAAlnB,GAmOAmnB,CAAAnnB,GAsDA,SAAAonB,EAAA5E,EAAAjsF,EAAA1P,GAEA48F,EAAA,qBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAEAE,EAAAssD,EAAAC,EAAAC,EAAA0wC,EAFAmB,EAAAN,EAAAtC,EAAA37F,GACAwgG,EAAA7E,EAAAhB,wBAEA,IAAAz6F,EAAA,EAAAA,EAAAsgG,EAAAtgG,IACAssD,EAAAmvC,EAAAhB,wBACAluC,EAAAkvC,EAAAhB,wBACAjuC,EAAAivC,EAAAhB,wBACAyC,EAAAzB,EAAAhB,wBACAwC,EAAA3wC,EAAAC,EAAAC,EAAA0wC,GAGAkB,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAiC,aAxCA,SAAA9E,EAAAjsF,EAAA1P,GAEA48F,EAAA,8BAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAEAE,EAFAs9F,EAAAU,EAAAvC,GACA6E,EAAA7E,EAAAhB,wBAEA,IAAAz6F,EAAA,EAAAA,EAAAsgG,EAAAtgG,IAEAo9F,EADA3B,EAAAhB,wBACA6C,GAgCAkD,CAAA/E,EAAAmC,EAAAC,GACAD,GAAAU,EAAAmC,WA7BA,SAAAhF,EAAA6E,EAAA9wF,EAAA1P,GAIA,IAAAE,EAAAy9F,EACA,IAHAf,EAAA,qCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAGAE,EAAA,EAAAA,EAAAsgG,EAAAtgG,IACAy9F,EAAAhC,EAAAZ,wBACA2C,EAAAx9F,EAAAy9F,GAuBAiD,CAAAjF,EAAA6E,EAAA1C,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAKA,SAAA8C,EAAAlF,EAAAjsF,EAAA1P,GAEA48F,EAAA,8BAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACA,IACAE,EAAA2J,EADAwkD,KAEA,IAAAnuD,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAA2J,EAAA,EAAAA,EAAA,EAAAA,IACAwkD,EAAA5oD,KAAAk2F,EAAAV,eAEA/6F,EAAA,EACAmuD,EAAA5oD,KAAA,GAEA4oD,EAAA5oD,KAAA,IArTA,SAAA4oD,QAEA9qD,IAAA0/C,EAAA69C,kBAAA,OAAA79C,EAAA69C,kBACA79C,EAAA69C,iBAAAzyC,GAsTA0yC,CAAA1yC,GAGA,SAAA2yC,EAAArF,EAAAsF,EAAAvxF,EAAA1P,GAEA48F,EAAA,oBAAAqE,EAAA,KAAAvxF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GArUA,SAAAihG,QAEA19F,IAAA0/C,EAAAi+C,QAAA,OAAAj+C,EAAAi+C,QACAj+C,EAAAi+C,OAAAD,GAoUAE,CAAAF,GACA,IAAA1C,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAA4C,WAxGA,SAAAzF,EAAAjsF,EAAA1P,GAEA48F,EAAA,wBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IACAE,EAAAyoC,EAAAC,EAAAqf,EADAya,EAAAi5B,EAAAhB,wBAEA,IAAAz6F,EAAA,EAAAA,EAAAwiE,EAAAxiE,IACAyoC,EAAAgzD,EAAAV,cACAryD,EAAA+yD,EAAAV,cACAhzC,EAAA0zC,EAAAV,cACA17B,EAAA52B,EAAAC,EAAAqf,GA+FAo5C,CAAA1F,EAAAmC,EAAAC,GACAD,GAAAU,EAAA8C,cA5FA,SAAA3F,EAAAjsF,EAAA1P,GAEA48F,EAAA,gCAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IACAE,EAAAyoC,EAAAC,EADA24D,EAAA5F,EAAAhB,wBAEA,IAAAz6F,EAAA,EAAAA,EAAAqhG,EAAArhG,IACAyoC,EAAAgzD,EAAAV,cACAryD,EAAA+yD,EAAAV,cACAgC,EAAAt0D,EAAAC,GAoFA44D,CAAA7F,EAAAmC,EAAAC,GACAD,GAAAU,EAAAiD,SACAlB,EAAA5E,EAAAmC,EAAAC,GACAD,GAAAU,EAAAkD,mBACAb,EAAAlF,EAAAmC,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAiBA,SAAA4D,EAAAhG,EAAAjsF,EAAA1P,GAEA48F,EAAA,sBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAAAu+F,EAAAN,EAAAtC,EAAA37F,GACAihG,EAAA/C,EAAAvC,GACA2C,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAoD,YACAZ,EAAArF,EAAAsF,EAAAnD,EAAAC,GACAD,GAAAU,EAAAqD,UArBA,SAAAlG,EAAAsF,EAAAvxF,EAAA1P,GAEA48F,EAAA,qBAAAqE,EAAA,KAAAvxF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAg+F,EAAArC,EAAA37F,GAmBA8hG,CAAAnG,EAAAsF,EAAAnD,EAAAC,GACAD,GAAAU,EAAAuD,WAjBA,SAAApG,EAAAsF,EAAAvxF,EAAA1P,GAEA48F,EAAA,sBAAAqE,EAAA,KAAAvxF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GACAg+F,EAAArC,EAAA37F,GAeAgiG,CAAArG,EAAAsF,EAAAnD,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAsBA,SAAAkE,EAAAtG,EAAAjsF,EAAA1P,GAEA,SAAAkiG,EAAAvG,EAAAh7F,GAEA,IAGAT,EAAA+e,EAAA9R,EAHAvI,KACA+2F,EAAA1B,KAAA,IAGA,IAAAkI,EAAAxG,EAAAd,gBACA,IAAA36F,EAAA,EAAAA,EAAAiiG,EAAAjiG,IACAy7F,EAAAd,gBAEA,IADAc,EAAAhB,yBAEAgB,EAAAV,cAGAh8E,EAAA,KACAte,GAAA69F,EAAA4D,iBACAj1F,EAAAwuF,EAAAV,eACAh8E,EAAAo/E,EAAA1C,IACA,GAAAxuF,GAEA8R,EAAAo/E,EAAA1C,GAEA/2F,EAAAa,KAAAwZ,GAGA,OAAAra,EAGAg4F,EAAA,2BAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAAAqiG,GACAliG,KAAA,GACAmiG,QAAA,EACAlF,OAAA,EACAmF,QAAA,EACAC,OAAA,EAAA,EAAA,GACA14D,aACA24D,aACAC,WAGAnE,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAmE,kBACAN,EAAAliG,KAAA+9F,EAAAvC,GACA0G,EAAAjF,MAAAzB,EAAAZ,wBACAsH,EAAAE,OAAA5G,EAAAhB,yBACAmD,GAAAU,EAAAoE,aACAP,EAAAG,MAAAnE,EAAA1C,GACAmC,GAAAU,EAAAqE,gBACAR,EAAAv4D,UAAAo4D,EAAAvG,EAAA6C,EAAAqE,iBACA/E,GAAAU,EAAA4D,gBACAC,EAAAI,UAAAP,EAAAvG,EAAA6C,EAAA4D,iBACAtE,GAAAU,EAAAsE,aACAT,EAAAK,OAAAR,EAAAvG,EAAA6C,EAAAsE,cACAhF,GAAAU,EAAAuE,UACAV,EAAAC,OAAA3G,EAAAhB,yBAEAiC,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAzbA,SAAAsE,QAEA9+F,IAAA0/C,EAAA+/C,cAAA,OAAA//C,EAAA+/C,cACA//C,EAAA+/C,aAAAX,GA0bAY,CAAAZ,GAkBA,SAAAa,EAAAvH,EAAAjsF,EAAA1P,GAEA48F,EAAA,oBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAAAu+F,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAA2E,QA1GA,SAAAxH,EAAAjsF,EAAA1P,GAEA48F,EAAA,sBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAAAu+F,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAA4E,cACAjE,EAAAxD,EAAAmC,EAAAC,GACAD,GAAAU,EAAA6E,YACA1B,EAAAhG,EAAAmC,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MA+FAuF,CAAA3H,EAAAmC,EAAAC,GACAD,GAAAU,EAAA+E,MAvBA,SAAA5H,EAAAjsF,EAAA1P,GAEA48F,EAAA,wBAAAltF,EAAAhP,SAAA,IAAA,KAAAV,EAAA,IAAA,GAEA,IAAAu+F,EAAAN,EAAAtC,EAAA37F,GACAs+F,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAgF,YACAvB,EAAAtG,EAAAmC,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAcA0F,CAAA9H,EAAAmC,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAKA,IAAAQ,EAAA5C,EAAA5B,gBACAuE,EAAA3C,EAAA4C,EAAA,SAAAT,EAAAC,GACAD,GAAAU,EAAAkF,QACAR,EAAAvH,EAAAmC,EAAAC,IAEAnB,EAAA,eAAAkB,EAAAp9F,SAAA,IAAA,KAAAq9F,EAAA,IAAA,GACAC,EAAArC,EAAAoC,MAsDA4F,CAAAhI,GA5CA+H,QAAA,MACAP,QAAA,MACAC,cAAA,MACAhE,SAAA,MACAC,YAAA,MACAC,YAAA,MACAC,aAAA,MACAC,cAAA,MACAC,uBAAA,MACAE,iBAAA,MACAd,YAAA,GACAF,UAAA,GACAC,cAAA,GACAE,gBAAA,GACAe,WAAA,MACAC,gBAAA,MACAC,mBAAA,MACAC,mBAAA,MACAC,kBAAA,MACAC,kBAAA,MACAC,oBAAA,MACAlB,WAAA,GACAC,aAAA,GACAmE,YAAA,MACAzB,YAAA,MACAC,UAAA,MACAE,WAAA,MACAX,WAAA,MACAE,cAAA,MACAG,SAAA,MACAC,mBAAA,MACAjB,aAAA,MACAE,WAAA,MACA4C,MAAA,MACAC,YAAA,MACAb,iBAAA,MACAC,aAAA,MACAC,gBAAA,MACAT,gBAAA,MACAU,aAAA,MACAC,UAAA,SAOAxiD,EAAAqjD,qBAAA,SAAAjK,EAAA12C,GAEA,SAAA4gD,EAAAv/C,GAEA,YAAA/gD,IAAA0/C,EAAA6gD,iBAAA,OAAA7gD,EAAA6gD,gBACA7gD,EAAA6gD,gBAAAx/C,GAEA,UAgPA/gD,IAAA0/C,GAAA,OAAAA,IACAA,MAGA,IAAA8gD,EAAA,IAAAxjD,EAAAo1C,cACAqO,EAAA,KAEAC,KACAC,KAEAC,GACA9/E,SACA+/E,kBAGA7jD,EAAAo8C,YAAAhD,GACA0G,WAAA,SAAAlnB,GAoBA,QAAA51E,IAAA0gG,EAAA9qB,EAAAh5E,MAAA,CAIA,IAAAoH,EAAAw8F,EAAA7qB,aACA/4E,KAAAg5E,EAAAh5E,KACAk4E,QAAAc,EAAAd,QACAC,QAAAa,EAAAb,QACAC,SAAAY,EAAAZ,SACAC,UApBA,SAAAA,EAAAknB,GAEA,QAAAn8F,IAAAi1E,GAAA,OAAAA,EACA,OAAA,EAEA,QAAAj1E,IAAAm8F,GAAA,OAAAA,EACA,OAAA,EAEA,OAAAlnB,EAAAknB,EAYA2E,CAAAlrB,EAAAX,UAAAW,EAAAumB,mBACA98D,QA7BA,SAAAg9D,GAEA,QAAAr8F,IAAAq8F,GAAA,OAAAA,EACA,OAAA,EAEA,OAAA,EAAAA,EAwBA0E,CAAAnrB,EAAAymB,gBAGA2E,EAAAR,EAAA3qB,YAAA7xE,GACA,QAAAhE,IAAA41E,EAAAP,SAAA,OAAAO,EAAAP,QAAA,CACA,IAAA4rB,EAAAX,EAAA1qB,EAAAP,SACA,GAAA,OAAA4rB,EAAA,CACA,IAAAC,EAAA,IAAAhjG,OAAAi1C,MAAA8tD,IACAE,EAAAjjG,OAAAqf,IAAA6jF,gBAAAF,GACAF,EAAA3rB,QAAA8rB,EACAH,EAAAj6F,OAAA6uE,EAAA7uE,OACAi6F,EAAAj1D,MAAA6pC,EAAA7pC,MACAi1D,EAAAvO,UAAA7c,EAAA6c,UAIAiO,EAAA9qB,EAAAh5E,MAAAoH,IAEA25F,OAAA,SAAA0D,GACA,QAAArhG,IAAA2gG,EAAAU,GAAA,CAIA,IAAAr9F,EAAAw8F,EAAAvlB,QAAA,IAAAj+B,EAAAgzC,aAAAqR,KACAZ,EAAAD,EAAArlB,QAAAn3E,IACAs9F,UACAC,kBACAC,wBACAC,eACA7rC,eAAA,MAEA+qC,EAAAU,GAAAr9F,IAEAu5F,iBAAA,SAAAzyC,GACA,OAAA21C,IAGAA,EAAAa,SAAA1rC,eAAA9K,IAEA20C,aAAA,SAAAX,GACA,IAAA4C,EAAAd,EAAA9/E,MAAArkB,OACAmkG,EAAA9/E,MAAA5e,KAAA48F,GACA8B,EAAAC,cAAA/B,EAAAC,QAAA2C,EAEA,IAAA1L,EAAA2K,EAAA7B,EAAAliG,MACA,QAAAoD,IAAAg2F,EAAA,CAGA,IAAA19E,EAAAkoF,EAAArlB,QAAA6a,GACA19E,EAAAgpF,SAAAG,YAAAv/F,KAAAw/F,KAEAjI,SAAA,SAAAr0D,EAAAC,EAAAqf,GACA,OAAA+7C,GAGAA,EAAAnnC,UAAAl0B,EAAAC,EAAAqf,IAEAi1C,gBAAA,SAAAv0D,EAAAC,GACA,OAAAo7D,GAGAA,EAAA3P,MAAA1rD,EAAAC,IAEAy0D,OAAA,SAAA7wC,EAAAC,EAAAC,GACA,OAAAs3C,GAGAA,EAAAtmC,YAAAlR,EAAAC,EAAAC,IAEA+wC,eAAA,SAAAF,EAAAC,GACA,OAAAwG,IAGAA,EAAAa,SAAAC,eAAAvH,GAAAC,IAEAI,qBAAA,SAAAL,EAAAI,GACA,OAAAqG,IAGAA,EAAAa,SAAAE,qBAAAxH,GAAAI,IAEAmG,gBAAAD,IA5WA,SAAAM,EAAAJ,EAAAE,GAEA,SAAAzxC,EAAA32C,EAAAjC,EAAAuqF,GAEA,SAAAe,EAAA72C,EAAA/e,GAEA,IAIApvC,EAJAyoC,EAAA2G,EAAA,GACA1G,EAAA0G,EAAA,GACA2Y,EAAA3Y,EAAA,GAGA,IAAApvC,EAAA,EAAAA,EAAA,EAAAA,IACAmuD,EAAA,EAAAnuD,IAAAyoC,EACA0lB,EAAA,EAAAnuD,IAAA0oC,EACAylB,EAAA,EAAAnuD,IAAA+nD,EAGA,OAAAoG,EAGA,SAAA82C,EAAA92C,EAAAgL,GAEA,IAIAn5D,EAJAyoC,EAAA0wB,EAAA,GACAzwB,EAAAywB,EAAA,GACApR,EAAAoR,EAAA,GAGA,IAAAn5D,EAAA,EAAAA,EAAA,EAAAA,IACAmuD,EAAA,GAAAnuD,IAAAmuD,EAAA,EAAAnuD,GAAAyoC,EAAA0lB,EAAA,EAAAnuD,GAAA0oC,EAAAylB,EAAA,EAAAnuD,GAAA+nD,EAGA,OAAAoG,EASA,SAAA+2C,EAAAvpF,EAAAwyC,GAEA,IAAAnuD,EAAA48D,EAAAuoC,EACA,IAAAnlG,EAAA,EAAAA,EAAA2b,EAAAykD,cAAApgE,IACA48D,EAAAjhD,EAAAukD,UAAAlgE,GACAmlG,EAAA9kD,EAAAiS,oBAAAnE,EAAAyO,GACAjhD,EAAAg4E,UAAA3zF,EAAAmlG,EAAA18D,EAAA08D,EAAAz8D,EAAAy8D,EAAAp9C,GAgGA,IAAAq9C,EAAAzpF,EAAAgpF,SACAU,EATA,SAAAhP,GAEA,QAAAhzF,IAAAgzF,GAAA,OAAAA,EACA,OAAA,KAEA,OAAAA,EAAAp9B,eAIAqsC,CAAAF,GACA,GAAA,OAAAC,EAAA,CAIA,IAAAE,EAAA,KAEAA,EADA,OAAA7rF,EArFA,SAAA8rF,EAAA9rF,EAAAuqF,GAwCA,QAAA5gG,IAAAqW,EAAAy0C,OACA,OAAAz0C,EAAAy0C,OAGA,IAAAzpD,EAAA27C,EAAA4N,iBACAvpD,EAAAugG,EAAAvgG,EA3CA,SAAAgV,GAEA,GAAA,IAAAA,EAAAkwB,UAAA9pC,OACA,OAAA,EAAA,EAAA,GAEA,OAAA4Z,EAAAkwB,UAAA,GAsCA67D,CAAA/rF,IA3EAy0C,EA4EAzpD,EA5EA4sD,EAwCA,SAAA53C,GAcA,GAAA,IAAAA,EAAA6oF,UAAAziG,OACA,OAAA,EAAA,EAAA,EAAA,GAIA,OAjBA,SAAA4lG,GAEA,IAAAhhG,GAAA,EAAA,EAAA,EAAA,GACA5E,EAAA8P,KAAAq2C,KAAAy/C,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,GAAArlD,EAAAwE,WAAA/kD,GAAA,CACA,IAAA6lG,GAAA,GAAAD,EAAA,GACAp+C,EAAA13C,KAAA23C,IAAAo+C,GAAA7lG,EACA4E,GAAA4iD,EAAAo+C,EAAA,GAAAp+C,EAAAo+C,EAAA,GAAAp+C,EAAAo+C,EAAA,GAAA91F,KAAAy3C,IAAAs+C,IAEA,OAAAjhG,EAQAkhG,CADAlsF,EAAA6oF,UAAA,IAkBAsD,CAAAnsF,GA1EAo8E,EAAAz1C,EAAAgR,yBAAAC,GA0EA5sD,EAzEA27C,EAAAsP,eAAAmmC,EAAA3nC,GAHA,IAAAA,EAAAmD,EAEAwkC,EA2EApxF,EAAAsgG,EAAAtgG,EAfA,SAAAgV,GAEA,GAAA,IAAAA,EAAA8oF,OAAA1iG,OACA,OAAA,EAAA,EAAA,EAAA,GAEA,OAAA4Z,EAAA8oF,OAAA,GAUAsD,CAAApsF,IAEA,GAAA,OAAAA,EAAA2oF,OAAA,CACA,IAAA0D,EAAA9B,EAAAC,cAAAxqF,EAAA2oF,QACA,QAAAh/F,IAAA0iG,EAAA,CACA,IAAAlhF,EAAAo/E,EAAA9/E,MAAA4hF,GACAC,EAAAR,EAAA3gF,EAAAo/E,GACAv/F,EAAA27C,EAAAsP,eAAAjrD,EAAAshG,IAIAtsF,EAAAy0C,OAAAzpD,EACA,OAAAA,EA2BA8gG,CAAA9rF,EAAAuqF,GAEAoB,EAGA,IAAAl3C,EAAA9N,EAAA6N,YAAAq3C,GACAU,EAAA5lD,EAAA6N,YAAAm3C,GACAa,EAAA7lD,EAAA4Q,aAAAg1C,GACA,GAAA,OAAAC,EAAA,EA5GA,SAAAvqF,EAAAwyC,EAAAg4C,GAEA,IAAAt7C,EAAAxK,EAAAqQ,kBAAAvC,GACA,IAAA9N,EAAAyE,WAAA+F,GACA,OAGA,IAAAu7C,EAAA/lD,EAAA6N,YAAAC,GACA62C,EAAAoB,IAAA,EAAA,EAAA,IAEA,IAAAC,EAAAhmD,EAAAsP,eAAAw2C,EAAAC,GACAlB,EAAAvpF,EAAA0qF,GAqGAC,CAAA3qF,EAAAsqF,EAAAC,GAEA,IAAAK,EAtCA,SAAA7sF,GAEA,QAAArW,IAAAqW,GAAA,OAAAA,EACA,OAAA,EAAA,EAAA,GAEA,OAAAA,EAAA4oF,MAiCAkE,CAAA9sF,GACAurF,EAAA92C,IAAAo4C,EAAA,IAAAA,EAAA,IAAAA,EAAA,KACA,IAAAF,EAAAhmD,EAAAsP,eAAAu2C,EAAA/3C,GACA+2C,EAAAvpF,EAAA0qF,KA+BA,SAAAI,EAAA9qF,EAAAjC,EAAAqqF,EAAAE,GAEA3xC,EAAA32C,EAAAjC,EAAAuqF,GA9BA,SAAAtoF,EAAAooF,GAEA,IAEA/jG,EAAA29D,EAAA2/B,EAAApO,EAAAuO,EAFAiJ,EAAA/qF,EAAA24E,WAAA34E,EAAAykD,cACAglC,EAAAzpF,EAAAgpF,SAEA,IAAA3kG,EAAA,EAAAA,EAAA2b,EAAAg5E,gBAAA30F,IACA29D,EAAAhiD,EAAA+4E,YAAA10F,GACA0mG,IACA/oC,EAAA42B,GAAA52B,EAAArR,GACAqR,EAAA62B,GAAA72B,EAAApR,GACAoR,EAAAvM,GAAAuM,EAAAnR,SAIAnpD,KADAi6F,EAAA8H,EAAAR,eAAA5kG,UAGAqD,KADA6rF,EAAA6U,EAAAzG,MAEA3/B,EAAA82B,IAAAvF,QAKA7rF,KADAo6F,EAAA2H,EAAAP,qBAAA7kG,KACAy9F,EAAA,IACA9/B,EAAAm2B,MAAA2J,GAQA7H,CAAAj6E,EAAAooF,GAGA,SAAA4C,EAAA3U,EAAAr2E,EAAA09E,EAAAuN,GAEA,IAAAC,EAAAlrF,EAAAyqC,QAOA,OANAygD,EAAApT,QAAAoT,EAAAnT,UAAA,KAAAkT,EAAA,KACAvN,EAAArH,EAAAvT,YACAuT,EAAA2D,eAAAkR,EAAAxN,GAEArH,EAAA1T,QAAAuoB,GAEAA,EAGA,IAAA7mG,EAAA2J,EAAAm6F,EAAAsB,EAAA0B,EACAC,EAAAC,EACA,IAAAhnG,EAAA,EAAAA,EAAA6jG,EAAAplB,YAAAz+E,IAGA,GAFA8jG,EAAAD,EAAArlB,QAAAx+E,GAEA,KADAolG,EAAAtB,EAAAa,UACAG,YAAAhlG,OACA2mG,EAAA3C,EAAA,KAAAC,EAAAE,OACA,CAEA,IADA8C,EAAA9C,EAAA9/E,MAAAihF,EAAAN,YAAA,IACAn7F,EAAA,EAAAA,EAAAy7F,EAAAN,YAAAhlG,OAAA6J,IACAm9F,EAAA7C,EAAA9/E,MAAAihF,EAAAN,YAAAn7F,KACAq9F,EAAAL,EAAA9C,EAAAC,EAAA9jG,EAAA,EAAA2J,EAAA,IACAg7F,SAAAb,EAAAa,SACA8B,EAAAO,EAAAF,EAAA/C,EAAAE,GACAjkG,GAAA,EAEAymG,EAAA3C,EAAAiD,EAAAhD,EAAAE,IAuIAgD,CAAAhD,EAAAJ,EAAAE,GACAF,EAAAjP,WAEA,IAAArwC,EAAAlE,EAAA81C,+BAAA0N,GACA,OAAAt/C,GAGAlE,IAGA5gD,OAAA,wCAAA,eAAA,SAAA4gD,GAmZA,OAlZAA,EAAA6mD,YAAA,SAAArL,EAAA94C,GAgFA,SAAAokD,EAAAzrF,EAAA0rF,GAEA,SAAAC,EAAAhgG,EAAA8H,GAEA,OAAA9H,EAAA,EACAA,EAAA,EAEA8H,EAAA9H,EAIA,SAAAigG,EAAA5rF,EAAA6rF,GAEA,IAAAC,EAAA9rF,EAAAxT,QAAAq/F,GAAAA,EAAAznG,OACAskD,EAAA1oC,EAAA47D,OAAAkwB,EAAA9rF,EAAA5b,OAAA0nG,GACA,OAAApjD,EAAAltC,OAGA,GAAA,IAAAwE,EAAA5b,QAIA,KAAA4b,EAAA,GAAA,CAIA,IAKA1b,EAAAokD,EAxFAqjD,EAOAxnG,EAcAwoC,EAAAC,EAAAqf,EA8DA2/C,EAAAhsF,EAAA7b,MAAA,OACA,GAAA,IAAA6nG,EAAA5nG,QAAA,KAAA4nG,EAAA,GAAA,GAKA,GAAA,KAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAEA,IAAA4kG,EAAA,GACA,IAAA1kG,EAAA,EAAAA,EAAA0nG,EAAA5nG,OAAAE,IACA0kG,GAAAgD,EAAA1nG,GACAA,EAAA0nG,EAAA5nG,OAAA,IACA4kG,GAAA,MAnFA,SAAAA,QAEArhG,IAAA0/C,EAAAi+C,QAAA,OAAAj+C,EAAAi+C,QACAj+C,EAAAi+C,OAAA0D,GAmFAzD,CAAAyD,QACA,GAAA,KAAAgD,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAEAsnG,EAAA5kC,aAAA,EApFA/5B,EAqFA/nB,WAAAgnF,EAAA,IArFAh/D,EAqFAhoB,WAAAgnF,EAAA,IArFA3/C,EAqFArnC,WAAAgnF,EAAA,SAnFArkG,IAAA0/C,EAAA+5C,UAAA,OAAA/5C,EAAA+5C,UACA/5C,EAAA+5C,SAAAr0D,EAAAC,EAAAqf,QAmFA,GAAA,MAAA2/C,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAEAsnG,EAAAO,aAAA,EAnFA,SAAAl/D,EAAAC,EAAAqf,QAEA1kD,IAAA0/C,EAAA6kD,UAAA,OAAA7kD,EAAA6kD,UACA7kD,EAAA6kD,SAAAn/D,EAAAC,EAAAqf,GAiFA8/C,CAAAnnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,UACA,GAAA,MAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAEAsnG,EAAAU,SAAA,EAlFA,SAAAr/D,EAAAC,QAEArlC,IAAA0/C,EAAAglD,YAAA,OAAAhlD,EAAAglD,YACAhlD,EAAAglD,WAAAt/D,EAAAC,GAgFAs/D,CAAAtnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,UACA,GAAA,KAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAGA,IAIAmoG,EAJAprC,KACAy2B,KACAC,KAGA,IAAAvzF,EAAA,EAAAA,EAAA0nG,EAAA5nG,OAAAE,IACAioG,EAAAP,EAAA1nG,GAAAH,MAAA,KACAg9D,EAAAt3D,KAAA8hG,EAAAtjG,SAAAkkG,EAAA,GAAA,IAAAb,EAAA5kC,cACAylC,EAAAnoG,OAAA,GAAAmoG,EAAA,GAAAnoG,OAAA,GACAyzF,EAAAhuF,KAAA8hG,EAAAtjG,SAAAkkG,EAAA,GAAA,IAAAb,EAAAU,UAEAG,EAAAnoG,OAAA,GAAAmoG,EAAA,GAAAnoG,OAAA,GACAwzF,EAAA/tF,KAAA8hG,EAAAtjG,SAAAkkG,EAAA,GAAA,IAAAb,EAAAO,eA9FA,SAAA9qC,EAAAy2B,EAAAC,QAEAlwF,IAAA0/C,EAAAo6C,QAAA,OAAAp6C,EAAAo6C,QACAp6C,EAAAo6C,OAAAtgC,EAAAy2B,EAAAC,GA8FA0J,CAAApgC,EAAAy2B,EAAAC,QACA,GAAA,UAAAmU,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAvIAG,EA0IAynG,EAAA,QAxIArkG,IAAA0/C,EAAAmlD,eAAA,OAAAnlD,EAAAmlD,eACAnlD,EAAAmlD,cAAAjoG,QAwIA,GAAA,UAAAynG,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,QAzKA,SAAAG,QAEAoD,IAAA0/C,EAAAolD,eAAA,OAAAplD,EAAAolD,eACAplD,EAAAolD,cAAAloG,GAyKAmoG,CAAAV,EAAA,SACA,GAAA,MAAAA,EAAA,IAAA,MAAAA,EAAA,IAAA,MAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,QAxKA,SAAAG,EAAA23E,EAAAC,EAAAC,QAEAz0E,IAAA0/C,EAAAslD,qBAAA,OAAAtlD,EAAAslD,qBACAtlD,EAAAslD,oBAAApoG,EAAA23E,EAAAC,EAAAC,GAwKAwwB,CAAAZ,EAAA,GAAAhnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,UACA,GAAA,MAAAA,EAAA,IAAA,MAAAA,EAAA,IAAA,KAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,QAvKA,SAAAG,EAAAe,QAEAqC,IAAA0/C,EAAAwlD,qBAAA,OAAAxlD,EAAAwlD,qBACAxlD,EAAAwlD,oBAAAtoG,EAAAe,GAuKAwnG,CAAAd,EAAA,GAAAA,EAAA,SACA,GAAA,UAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAGAskD,EAAAkjD,EAAA5rF,EAAA,UAzKA+rF,EA0KArjD,OAxKA/gD,IAAA0/C,EAAA0lD,mBAAA,OAAA1lD,EAAA0lD,mBACA1lD,EAAA0lD,kBAAAhB,QAwKA,GAAA,UAAAC,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAIA,IAAA4oG,EAhIA,SAAAtkD,GAEA,QAAA/gD,IAAA0/C,EAAA6gD,iBAAA,OAAA7gD,EAAA6gD,gBACA,OAAA7gD,EAAA6gD,gBAAAx/C,GAEA,OAAA,KA2HAu/C,EADAv/C,EAAAkjD,EAAA5rF,EAAA,WACAxE,QACA,GAAA,OAAAwxF,EACA,OAEAC,EAAAD,KAIA,SAAAC,EAAA9M,EAAAuL,GAEA,IACApnG,EADAq8E,EAAAwf,EAAAh8F,MAAA,MAEA,IAAAG,EAAA,EAAAA,EAAAq8E,EAAAv8E,OAAAE,IAEAmnG,EADA9qB,EAAAr8E,GAAAkX,OACAkwF,QAIA/jG,IAAA0/C,GAAA,OAAAA,IACAA,MASA4lD,EAAA9M,GALAr5B,YAAA,EACAmlC,YAAA,EACAG,QAAA,KAMAznD,EAAAuoD,qBAAA,SAAA/M,EAAA94C,GAEA,SAAA4gD,EAAAv/C,GAEA,YAAA/gD,IAAA0/C,EAAA6gD,iBAAA,OAAA7gD,EAAA6gD,gBACA7gD,EAAA6gD,gBAAAx/C,GAEA,UAGA/gD,IAAA0/C,GAAA,OAAAA,IACAA,MAGA,IAAA8gD,EAAA,IAAAxjD,EAAAo1C,cACApuF,EAAAw8F,EAAAvlB,QAAA,IAAAj+B,EAAAgzC,aAAA,YACAyQ,EAAAD,EAAArlB,QAAAn3E,GAEA08F,KACAM,EAAA,KACAwE,EAAA,KAEAC,KACAC,KACAC,KAEAC,KACAC,KACAC,KAEA9oD,EAAA6mD,YAAArL,GACAsM,cAAA,SAAAloG,GACA,IAAAoH,EAAAw8F,EAAA7qB,aACA/4E,KAAAA,IAEAokG,EAAAR,EAAA3qB,YAAA7xE,GACA08F,EAAA9jG,GAAAoH,GAEAghG,oBAAA,SAAApoG,EAAA23E,EAAAC,EAAAC,GACA,OAAAusB,IAGA,MAAApkG,EACAokG,EAAAlsB,SAAAP,EAAAC,EAAAC,GACA,MAAA73E,EACAokG,EAAAjsB,SAAAR,EAAAC,EAAAC,GACA,MAAA73E,IACAokG,EAAAhsB,UAAAT,EAAAC,EAAAC,MAGAywB,oBAAA,SAAAtoG,EAAAe,GACA,OAAAqjG,IAGA,MAAApkG,GACAokG,EAAA/rB,UAAA,EACAj4B,EAAAwE,WAAA7jD,KACAqjG,EAAA/rB,WAAA1oE,KAAAw5F,KAAA1oF,WAAA1f,IAAA,GAAA,KAEA,MAAAf,EACAokG,EAAA3hE,QAAA,EAAAhiB,WAAA1f,GACA,KAAAf,IACAokG,EAAA3hE,QAAAhiB,WAAA1f,MAGAynG,kBAAA,SAAAhB,GACA,GAAA,OAAApD,EAAA,CAIA,IAAAC,EAAAX,EAAA8D,GACA,GAAA,OAAAnD,EAAA,CAIA,IAAAC,EAAA,IAAAhjG,OAAAi1C,MAAA8tD,IACAE,EAAAjjG,OAAAqf,IAAA6jF,gBAAAF,GACAF,EAAA3rB,QAAA8rB,KAEA0D,cAAA,SAAAjoG,GACA,IAAAivF,EAAA6U,EAAA9jG,QACAoD,IAAA6rF,IACA2Z,EAAA3Z,IAGA8R,OAAA,SAAA0D,GACA,IAAAr9F,EAAAw8F,EAAAvlB,QAAA,IAAAj+B,EAAAgzC,aAAAqR,IACAZ,EAAAD,EAAArlB,QAAAn3E,GACA4hG,KACAC,KACAC,MAEArM,SAAA,SAAAr0D,EAAAC,EAAAqf,GACA+gD,EAAAvjG,KAAA,IAAA86C,EAAAyH,MAAArf,EAAAC,EAAAqf,KAEA6/C,SAAA,SAAAn/D,EAAAC,EAAAqf,GACAghD,EAAAxjG,KAAA,IAAA86C,EAAAyH,MAAArf,EAAAC,EAAAqf,KAEAggD,WAAA,SAAAt/D,EAAAC,GACAsgE,EAAAzjG,KAAA,IAAA86C,EAAAwF,QAAApd,EAAAC,KAEAy0D,OAAA,SAAAtgC,EAAAy2B,EAAAC,GACA,SAAA8V,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,KAAAD,EAAA,GAAAA,GAAAF,EAAAxpG,QAAA,CAGA,IAAA4E,EAAA6kG,EAAAC,GACA,QAAAnmG,IAAAqB,EAAA,CACA,IAAAglG,EAAAJ,EAAAE,GACA9kG,EAAA+kG,EAAAC,GACAH,EAAAC,GAAA9kG,EAEA,OAAAA,GAGA,SAAAilG,EAAAzT,EAAAoT,EAAAC,EAAAC,GAEA,OAAAH,EAAAC,EAAAC,EAAAC,EAAA,SAAAjrF,GACA,OAAA23E,EAAAv5B,UAAAp+C,EAAAkqB,EAAAlqB,EAAAmqB,EAAAnqB,EAAAwpC,KAIA,SAAA6hD,EAAA1T,EAAAoT,EAAAC,EAAAC,GAEA,OAAAH,EAAAC,EAAAC,EAAAC,EAAA,SAAAjrF,GACA,OAAA23E,EAAA5D,UAAA/zE,EAAAkqB,EAAAlqB,EAAAmqB,EAAAnqB,EAAAwpC,KAIA,SAAA8hD,EAAA3T,EAAAoT,EAAAC,EAAAC,GAEA,OAAAH,EAAAC,EAAAC,EAAAC,EAAA,SAAAjrF,GACA,OAAA23E,EAAA/B,MAAA51E,EAAAkqB,EAAAlqB,EAAAmqB,KAIA,IAAA1oC,EAAAssD,EAAAC,EAAAC,EAAAmR,EAAAZ,EACA+sC,EAAAxW,EAAAxzF,QAAA+8D,EAAA/8D,OACAiqG,EAAAxW,EAAAzzF,QAAA+8D,EAAA/8D,OACAqP,EAAA0tD,EAAA/8D,OACA,IAAAE,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACAssD,EAAAq9C,EAAA7F,EAAAgF,EAAAG,EAAApsC,EAAA,IACAtQ,EAAAo9C,EAAA7F,EAAAgF,EAAAG,EAAApsC,GAAA78D,EAAA,GAAAmP,IACAq9C,EAAAm9C,EAAA7F,EAAAgF,EAAAG,EAAApsC,GAAA78D,EAAA,GAAAmP,IACA4tD,EAAA+mC,EAAAtmC,YAAAlR,EAAAC,EAAAC,GACAmR,EAAAmmC,EAAApP,YAAA33B,GACA+sC,IACAnsC,EAAAo2B,GAAA6V,EAAA9F,EAAAiF,EAAAG,EAAA5V,EAAA,IACA31B,EAAAq2B,GAAA4V,EAAA9F,EAAAiF,EAAAG,EAAA5V,GAAAtzF,EAAA,GAAAmP,IACAwuD,EAAAs2B,GAAA2V,EAAA9F,EAAAiF,EAAAG,EAAA5V,GAAAtzF,EAAA,GAAAmP,KAEA46F,IACApsC,EAAA42B,GAAAsV,EAAA/F,EAAAkF,EAAAG,EAAA5V,EAAA,IACA51B,EAAA62B,GAAAqV,EAAA/F,EAAAkF,EAAAG,EAAA5V,GAAAvzF,EAAA,GAAAmP,IACAwuD,EAAAvM,GAAAy4C,EAAA/F,EAAAkF,EAAAG,EAAA5V,GAAAvzF,EAAA,GAAAmP,KAEA,OAAA05F,IACAlrC,EAAA82B,IAAAoU,IAIAjF,gBAAAD,IAGAE,EAAAjP,WAEA,IAAArwC,EAAAlE,EAAA81C,+BAAA0N,GACA,OAAAt/C,GAGAlE,IAGA5gD,OAAA,wCAAA,eAAA,SAAA4gD,GAiLA,OAhLAA,EAAA2pD,kBAAA,SAAAvQ,EAAA12C,GAEA,SAAAk6C,EAAA3wC,EAAAC,EAAAC,EAAAzd,QAEA1rC,IAAA0/C,EAAAo6C,QAAA,OAAAp6C,EAAAo6C,QACAp6C,EAAAo6C,OAAA7wC,EAAAC,EAAAC,EAAAzd,GAIA,SAAAovD,EAAA1C,GAEA,IACAz7F,EADA0E,KAEA,IAAA1E,EAAA,EAAAA,EAAA,EAAAA,IACA0E,EAAA1E,GAAAy7F,EAAAV,cAEA,OAAAr2F,OAGArB,IAAA0/C,GAAA,OAAAA,IACAA,MAGA,IAAA04C,EAAA,IAAAp7C,EAAAm5C,aAAAC,GAAA,GACAgC,EAAA1B,KAAA,IAEA,IACA/5F,EAAAssD,EAAAC,EAAAC,EAAAzd,EADAk7D,EAAAxO,EAAAZ,wBAEA,IAAA76F,EAAA,EAAAA,EAAAiqG,EAAAjqG,IACA+uC,EAAAovD,EAAA1C,GACAnvC,EAAA6xC,EAAA1C,GACAlvC,EAAA4xC,EAAA1C,GACAjvC,EAAA2xC,EAAA1C,GACAA,EAAA1B,KAAA,GACAkD,EAAA3wC,EAAAC,EAAAC,EAAAzd,IAIAsR,EAAA6pD,iBAAA,SAAArO,EAAA94C,GASA,SAAAokD,EAAA9qB,EAAA8tB,GAEA,SAAA1tB,EAAAJ,EAAA8tB,GAEA,OAAA9tB,EAAA8tB,GAAAjzF,OA6BA,IAAAwE,EAAA+gE,EAAAJ,EAAA8tB,GACA,GAAA,IAAAzuF,EAAA5b,OACA,OAAAqqG,EAAA,EAGA,IAAAzC,EAAAhsF,EAAA7b,MAAA,OACA,GAAA,IAAA6nG,EAAA5nG,OACA,OAAAqqG,EAAA,EAGA,GAAA,SAAAzC,EAAA,GACA,OAAAyC,EAAA,EACA,GAAA,SAAAzC,EAAA,IAAA,UAAAA,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,OAAA,EAGA,IAAAivC,GAAAruB,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,KACA7qC,KACAutC,EA7CA,SAAA/tB,EAAA8tB,EAAAttC,GAEA,IAAAwtC,EAAAC,EAAA5C,EAAA9qC,EACA,IAAAytC,EAAAF,EAAAE,EAAAhuB,EAAAv8E,QAAA+8D,EAAA/8D,OAAA,EAAAuqG,IAEA,GAAA,KADAC,EAAA7tB,EAAAJ,EAAAguB,IACAvqG,QAKA,KADA4nG,EAAA4C,EAAAzqG,MAAA,QACAC,QAIA,UAAA4nG,EAAA,GAAA,CACA,GAAAA,EAAA5nG,OAAA,EACA,MAEA88D,GAAAl8C,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,IAAAhnF,WAAAgnF,EAAA,KACA7qC,EAAAt3D,KAAAq3D,GAIA,OAAAytC,EAAA,EAsBAE,CAAAluB,EAAA8tB,EAAA,EAAAttC,GACA,OAAA,GAAAA,EAAA/8D,QACA,GA7DA,SAAAwsD,EAAAC,EAAAC,EAAAzd,QAEA1rC,IAAA0/C,EAAAo6C,QAAA,OAAAp6C,EAAAo6C,QACAp6C,EAAAo6C,OAAA7wC,EAAAC,EAAAC,EAAAzd,GA6DAkuD,CAAApgC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAA9tB,GACAq7D,GAGA,OAAAD,EAAA,OAGA9mG,IAAA0/C,GAAA,OAAAA,IACAA,MAKA,IAFA,IAAAonD,EAAA,EACA9tB,EAAAwf,EAAAh8F,MAAA,MACAsqG,EAAA9tB,EAAAv8E,SAAA,GAAAqqG,GACAA,EAAAhD,EAAA9qB,EAAA8tB,IAIA9pD,EAAAmqD,gBAAA,SAAA/Q,GAEA,IAAAK,EAAAL,EAAAK,WACA,GAAAA,EAAA,GACA,OAAA,EAGA,IAAA2B,EAAA,IAAAp7C,EAAAm5C,aAAAC,GAAA,GACAgC,EAAA1B,KAAA,IAEA,IAAAkQ,EAAAxO,EAAAZ,wBACA,OAAAf,GAAA,GAAAmQ,EAAA,IAOA5pD,EAAAoqD,qBAAA,SAAAhR,EAAAoC,GAEA,IAAAgI,EAAA,IAAAxjD,EAAAo1C,cACApuF,EAAAw8F,EAAAvlB,QAAA,IAAAj+B,EAAAgzC,aAAA,YACAyQ,EAAAD,EAAArlB,QAAAn3E,GAEA,OAAAoyF,EACAp5C,EAAA2pD,kBAAAvQ,GACA0D,OAAA,SAAA7wC,EAAAC,EAAAC,EAAAzd,GACA,IAAA27D,EAAA5G,EAAAnnC,UAAArQ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq+C,EAAA7G,EAAAnnC,UAAApQ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq+C,EAAA9G,EAAAnnC,UAAAnQ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq+C,EAAA,IAAAxqD,EAAAoI,OAAA1Z,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAsX,YACAivC,EAAAwO,EAAAxR,UAAAuY,EAAApiE,EAAAoiE,EAAAniE,EAAAmiE,EAAA9iD,GACA+7C,EAAAtmC,YAAAktC,EAAAC,EAAAC,EAAAtV,EAAAA,EAAAA,MAGA,OAAAuG,GACAx7C,EAAA6pD,iBAAArO,GACAsB,OAAA,SAAA7wC,EAAAC,EAAAC,EAAAzd,GACA,IAAA27D,EAAA5G,EAAAnnC,UAAArQ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq+C,EAAA7G,EAAAnnC,UAAApQ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq+C,EAAA9G,EAAAnnC,UAAAnQ,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq+C,EAAA,IAAAxqD,EAAAoI,OAAA1Z,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAsX,YACAivC,EAAAwO,EAAAxR,UAAAuY,EAAApiE,EAAAoiE,EAAAniE,EAAAmiE,EAAA9iD,GACA+7C,EAAAtmC,YAAAktC,EAAAC,EAAAC,EAAAtV,EAAAA,EAAAA,MAKAuO,EAAAjP,WAEA,IAAArwC,EAAAlE,EAAA81C,+BAAA0N,GACA,OAAAt/C,GAGAlE,IAGA5gD,OAAA,wCAAA,eAAA,SAAA4gD,GA8HA,OA7HAA,EAAAyqD,YAAA,SAAAjP,EAAA94C,GAgBA,SAAAokD,EAAAzrF,EAAAqvF,GAEA,GAAA,IAAArvF,EAAA5b,QAIA,KAAA4b,EAAA,GAAA,CAIA,IAxBA+sB,EAAAC,EAAAqf,EAwBA2/C,EAAAhsF,EAAA7b,MAAA,OACA,GAAA,IAAA6nG,EAAA5nG,QAAA,KAAA4nG,EAAA,GAAA,GAIA,GAAAqD,EAAAC,eAOA,GAAAD,EAAAE,UASA,GAAAF,EAAAG,aAAAH,EAAAvoC,YACA,GAAAklC,EAAA5nG,SA9CA2oC,EA+CA/nB,WAAAgnF,EAAA,IA/CAh/D,EA+CAhoB,WAAAgnF,EAAA,IA/CA3/C,EA+CArnC,WAAAgnF,EAAA,SA7CArkG,IAAA0/C,EAAA+5C,UAAA,OAAA/5C,EAAA+5C,UACA/5C,EAAA+5C,SAAAr0D,EAAAC,EAAAqf,GA6CAgjD,EAAAG,cAAA,QAKA,GAAAH,EAAAI,UAAAJ,EAAAzK,UAAA,CACA,IAAA99B,EAAAz+D,SAAA2jG,EAAA,IACA,GAAAA,EAAA5nG,QAAA0iE,EAAA,EAAA,CACA,IACAxiE,EAAA48D,EADAC,KAEA,IAAA78D,EAAA,EAAAA,EAAAwiE,EAAA,EAAAxiE,IACA48D,EAAA74D,SAAA2jG,EAAA1nG,IACA68D,EAAAt3D,KAAAq3D,IArDA,SAAAC,QAEAx5D,IAAA0/C,EAAAo6C,QAAA,OAAAp6C,EAAAo6C,QACAp6C,EAAAo6C,OAAAtgC,GAoDAogC,CAAApgC,GACAkuC,EAAAI,WAAA,aA1BA,GAAAzD,EAAA5nG,SACAirG,EAAAvoC,YAAAz+D,SAAA2jG,EAAA,IACAqD,EAAAzK,UAAAv8F,SAAA2jG,EAAA,IACAqD,EAAAE,WAAA,QAVA,GAAAvD,EAAA5nG,QAAA,OAAA4nG,EAAA,KACAqD,EAAAC,gBAAA,SAyDA3nG,IAAA0/C,GAAA,OAAAA,IACAA,MApBA,SAAA84C,GAEA,IAUA77F,EAVA+qG,GACAC,gBAAA,EACAC,WAAA,EACAzoC,YAAA,EACA89B,UAAA,EACA4K,aAAA,EACAC,UAAA,GAGA9uB,EAAAwf,EAAAh8F,MAAA,MAEA,IAAAG,EAAA,EAAAA,EAAAq8E,EAAAv8E,OAAAE,IAEAmnG,EADA9qB,EAAAr8E,GAAAkX,OACA6zF,GAQApC,CAAA9M,IAGAx7C,EAAA+qD,qBAAA,SAAAvP,GAEA,IAAAgI,EAAA,IAAAxjD,EAAAo1C,cACApuF,EAAAw8F,EAAAvlB,QAAA,IAAAj+B,EAAAgzC,aAAA,YACAyQ,EAAAD,EAAArlB,QAAAn3E,GAEAg5C,EAAAyqD,YAAAjP,GACAiB,SAAA,SAAAr0D,EAAAC,EAAAqf,GACA+7C,EAAAnnC,UAAAl0B,EAAAC,EAAAqf,IAEAo1C,OAAA,SAAAtgC,GACA,IAAA78D,EAAAssD,EAAAC,EAAAC,EACAr9C,EAAA0tD,EAAA/8D,OACA,IAAAE,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACAssD,EAAAuQ,EAAA,GACAtQ,EAAAsQ,EAAA78D,EAAA,GACAwsD,EAAAqQ,EAAA78D,EAAA,GACA8jG,EAAAtmC,YAAAlR,EAAAC,EAAAC,MAKAq3C,EAAAjP,WAEA,IAAArwC,EAAAlE,EAAA81C,+BAAA0N,GACA,OAAAt/C,GAGAlE,IAGA5gD,OAAA,2CAAA,eAAA,SAAA4gD,GAiQA,OAhQAA,EAAAgrD,eAAA,WAEA9kG,KAAA+kG,YAAA,KACA/kG,KAAA81F,OAAA,MAGAh8C,EAAAgrD,eAAA9oG,UAAAgpG,cAAA,SAAAC,GAGA,IAAAxrG,EAAA6tB,EAAAusB,EACA,IAFA7zC,KAAA+kG,eAEAtrG,EAAA,EAAAA,EAAAwrG,EAAA1rG,OAAAE,IACA6tB,EAAA29E,EAAAxrG,GACAo6C,GACAmiD,eAAA1uE,EACA49E,iBAAA59E,EAAA5tB,KACAmkD,SAAAv2B,EAAA5tB,KAAAkc,cACAuvF,UAAAnlG,KAAAolG,iBAAA99E,EAAA5tB,MAAAkc,eAEA5V,KAAA+kG,YAAA/lG,KAAA60C,GAEA7zC,KAAA81F,QAAA,GAGAh8C,EAAAgrD,eAAA9oG,UAAAqpG,aAAA,SAAAC,GAGA,IAAA7rG,EAAAsgB,EAAA8jC,EAAAhK,EACA,IAFA7zC,KAAA+kG,eAEAtrG,EAAA,EAAAA,EAAA6rG,EAAA/rG,OAAAE,IACAsgB,EAAAurF,EAAA7rG,GACAokD,EAAA79C,KAAA+gG,YAAAhnF,GACA85B,GACAmiD,eAAAj8E,EACAmrF,iBAAArnD,EACAA,SAAAA,EAAAjoC,cACAuvF,UAAAnlG,KAAAolG,iBAAAvnD,GAAAjoC,eAEA5V,KAAA+kG,YAAA/lG,KAAA60C,GAEA7zC,KAAA81F,QAAA,GAGAh8C,EAAAgrD,eAAA9oG,UAAAupG,aAAA,WAEA,SAAAC,EAAA3xD,GAEA,MAAA,QAAAA,EAAAsxD,WAAA,QAAAtxD,EAAAsxD,WAAA,QAAAtxD,EAAAsxD,UAMA,IACA1rG,EAAAo6C,EAAA4xD,EADAtnG,KAEA,IAAA1E,EAAA,EAAAA,EAAAuG,KAAA+kG,YAAAxrG,OAAAE,IACAo6C,EAAA7zC,KAAA+kG,YAAAtrG,GACAgsG,GACAzP,eAAAniD,EAAAmiD,eACAF,OAAA91F,KAAA81F,OACAC,cAAAyP,EAAA3xD,IAEA11C,EAAAa,KAAAymG,GAEA,OAAAtnG,GAGA27C,EAAAgrD,eAAA9oG,UAAA+kG,YAAA,SAAA2E,GAEA,IAAAC,EAAAD,EAAApsG,MAAA,KAIA,GAHA,GAAAqsG,EAAApsG,SACAosG,EAAAD,EAAApsG,MAAA,OAEA,IAAAqsG,EAAApsG,OACA,MAAA,GAEA,IAAAskD,EAAA8nD,EAAAA,EAAApsG,OAAA,GACA,OAAAqsG,UAAA/nD,IAGA/D,EAAAgrD,eAAA9oG,UAAA6pG,kBAAA,SAAA/kG,GAEA,OAAAd,KAAA+kG,YAAAjkG,IAGAg5C,EAAAgrD,eAAA9oG,UAAA8pG,iBAAA,WAEA,IAAArsG,EAAAo6C,EACA,IAAAp6C,EAAA,EAAAA,EAAAuG,KAAA+kG,YAAAxrG,OAAAE,IAEA,GADAo6C,EAAA7zC,KAAA+kG,YAAAtrG,GACAuG,KAAA+lG,qBAAAlyD,EAAAsxD,WACA,OAAA1rG,EAGA,OAAA,GAGAqgD,EAAAgrD,eAAA9oG,UAAAgqG,mBAAA,SAAAnoD,GAEA,IAAApkD,EAAAo6C,EAAAoyD,EACA,IAAAxsG,EAAA,EAAAA,EAAAuG,KAAA+kG,YAAAxrG,OAAAE,IAGA,GAFAo6C,EAAA7zC,KAAA+kG,YAAAtrG,GACAwsG,EAAAjmG,KAAA+gG,YAAAljD,GACAhK,EAAAgK,UAAAooD,EAAArwF,cACA,OAAAnc,EAGA,OAAA,GAGAqgD,EAAAgrD,eAAA9oG,UAAA+pG,qBAAA,SAAAZ,GAEA,MAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAAA,QAAAA,GAMArrD,EAAAgrD,eAAA9oG,UAAAopG,iBAAA,SAAAvnD,GAEA,IAAAqoD,EAAAroD,EAAAsoD,YAAA,KACA,IAAA,GAAAD,EACA,MAAA,GAEA,IAAAf,EAAAtnD,EAAAkzB,OAAAm1B,GACA,OAAAf,GAGArrD,EAAAssD,gCAAA,SAAAC,EAAA7pD,GAEA,SAAA8pD,SAEAxpG,IAAA0/C,EAAAw4C,SAAA,OAAAx4C,EAAAw4C,SACAx4C,EAAAw4C,UAIA,SAAAuR,EAAAC,EAAAxoD,QAEAlhD,IAAA0/C,EAAAsB,SAAA,OAAAtB,EAAAsB,SACAtB,EAAAsB,QAAA0oD,EAAAxoD,GAIA,SAAAyoD,EAAAJ,EAAAK,EAAA7oD,EAAA2oD,GAEA,IAAAG,EAAAN,EAAAL,mBAAAnoD,GACAooD,EAAAI,EAAAtF,YAAAljD,GACA,OAAA,GAAA8oD,GACAH,EAAAI,QAAA5nG,KAAAinG,GACA,QAEA,GAAAO,EAAAK,UAAAllG,QAAAskG,IACAO,EAAAK,UAAA7nG,KAAAinG,GAEAS,EAAAC,IAGA,IAAAG,EAAAT,EAAAP,mBACA,IAAA,IAAAgB,EAAA,CAKA,IAAAC,EAAAV,EAAAR,kBAAAiB,GACAN,GACAzsG,KAAAgtG,EAAA7B,iBACA2B,aACAD,YAGAlR,EAAA2Q,EAAAd,eACA,IACA,QAAAwB,EAAA5B,UACArrD,EAAA27C,oBAAAC,EAAA,SAAAgR,GACA,IAAAM,EAAAN,EAAAI,GACA,GAAA,OAAAE,EACAV,QACA,CACA,IAAAtoD,EAAAlE,EAAAqjD,qBAAA6J,GACA3J,gBAAA,SAAAx/C,GACA,OAAA4oD,EAAAJ,EAAAK,EAAA7oD,EAAA2oD,MAGAD,EAAAC,EAAAxoD,MAGA,QAAA+oD,EAAA5B,UACArrD,EAAA27C,oBAAAC,EAAA,SAAAgR,GACA,IAAAM,EAAAN,EAAAI,GACA,GAAA,OAAAE,EACAV,QACA,CACA,IAAAtoD,EAAAlE,EAAAuoD,qBAAA2E,GACA3J,gBAAA,SAAAx/C,GACA,OAAA4oD,EAAAJ,EAAAK,EAAA7oD,EAAA2oD,MAGAD,EAAAC,EAAAxoD,MAGA,QAAA+oD,EAAA5B,UACArrD,EAAA27C,oBAAAC,EAAA,SAAAgR,GACA,IAAAM,EAAAN,EAAAI,GACA,GAAA,OAAAE,EACAV,SAEA,GAAAxsD,EAAAmqD,gBAAA+C,GAAA,CACA,IAAAhpD,EAAAlE,EAAAoqD,qBAAA8C,EAAA,MACAT,EAAAC,EAAAxoD,OACA,CACA,IAAAvkD,EACA,IAAAA,EAAA,EAAAA,EAAAi8F,EAAAn8F,OAAAE,IACAi8F,EAAAj8F,GAAAs8F,eAAA,EAEAj8C,EAAA27C,oBAAAC,EAAA,SAAAgR,GACA,IAAAM,EAAAN,EAAAI,GACA,GAAA,OAAAE,EACAV,QACA,CACA,IAAAtoD,EAAAlE,EAAAoqD,qBAAA,KAAA8C,GACAT,EAAAC,EAAAxoD,SAMA,QAAA+oD,EAAA5B,WACArrD,EAAA27C,oBAAAC,EAAA,SAAAgR,GACA,IAAAM,EAAAN,EAAAI,GACA,GAAA,OAAAE,EACAV,QACA,CACA,IAAAtoD,EAAAlE,EAAA+qD,qBAAAmC,GACAT,EAAAC,EAAAxoD,MAIA,MAAAT,GAEA,YADA+oD,UA/EAA,KAoFAxsD,EAAAmtD,0BAAA,SAAAhC,EAAAzoD,GAEA,IAAA6pD,EAAA,IAAAvsD,EAAAgrD,eACAuB,EAAArB,cAAAC,GACAnrD,EAAAssD,gCAAAC,EAAA7pD,IAGA1C,EAAAotD,yBAAA,SAAA5B,EAAA9oD,GAEA,IAAA6pD,EAAA,IAAAvsD,EAAAgrD,eACAuB,EAAAhB,aAAAC,GACAxrD,EAAAssD,gCAAAC,EAAA7pD,IAGA1C,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GA8HA,OA7HAA,EAAAqtD,aAAA,SAAAjlE,GAEA,OAAAA,EAAAA,EAAA,GAAA,GAGA4X,EAAAstD,eAAA,SAAAllE,GAEA,GAAA4X,EAAAqtD,aAAAjlE,GACA,OAAAA,EAIA,IADA,IAAA/jC,EAAA,EACAA,EAAA+jC,GACA/jC,GAAA,EAEA,OAAAA,GAGA27C,EAAAutD,6BAAA,SAAA7/E,GAEA,GAAAsyB,EAAAqtD,aAAA3/E,EAAAkY,SAAAoa,EAAAqtD,aAAA3/E,EAAAmY,QACA,OAAAnY,EAGA,IAAAkY,EAAAoa,EAAAstD,eAAA5/E,EAAAkY,OACAC,EAAAma,EAAAstD,eAAA5/E,EAAAmY,QAEA0d,EAAA3pC,SAAA2H,cAAA,UACAgiC,EAAA3d,MAAAA,EACA2d,EAAA1d,OAAAA,EAEA,IAAAt0B,EAAAgyC,EAAAC,WAAA,MAEA,OADAjyC,EAAAi8F,UAAA9/E,EAAA,EAAA,EAAAkY,EAAAC,GACAt0B,EAAAk8F,aAAA,EAAA,EAAA7nE,EAAAC,IAGAma,EAAA0tD,iBAAA,SAAAnqD,GAEA,GAAA,OAAAA,EACA,OAAA,KAGA,QAAAvgD,IAAAugD,EAAAC,WACA,OAAA,KAGA,IAAAjyC,EAAAgyC,EAAAC,WAAA,UAAAD,EAAAC,WAAA,sBACA,OAAA,OAAAjyC,EACA,MAGAA,EAAAo8F,SAAA,EAAA,EAAApqD,EAAA3d,MAAA2d,EAAA1d,QACAt0B,EAAAq8F,WAAA,EAAA,EAAA,EAAA,GACAr8F,IAGAyuC,EAAA6tD,uBAAA,SAAAt8F,EAAAu8F,EAAAC,EAAA7S,GAEA,SAAA8S,EAAAz8F,EAAAsiC,EAAAzzC,EAAA86F,GAEA,IAAA+S,EAAA18F,EAAA28F,aAAA9tG,GAGA,OAFAmR,EAAA48F,aAAAF,EAAAp6D,GACAtiC,EAAA68F,cAAAH,GACA18F,EAAA88F,mBAAAJ,EAAA18F,EAAA+8F,gBAMAL,QALAjrG,IAAAk4F,GAAA,OAAAA,GACAA,EAAA3pF,EAAAg9F,iBAAAN,IAEA,MAwBA,IAAAA,EAnBA,SAAA18F,EAAAi9F,EAAAC,EAAAvT,GAEA,IAAA6S,EAAAC,EAAAz8F,EAAAi9F,EAAAj9F,EAAAm9F,gBAAAxT,GACA4S,EAAAE,EAAAz8F,EAAAk9F,EAAAl9F,EAAAo9F,cAAAzT,GACA,GAAA,OAAA6S,GAAA,OAAAD,EACA,OAAA,KAGA,IAAAc,EAAAr9F,EAAAs9F,gBAIA,GAHAt9F,EAAAu9F,aAAAF,EAAAd,GACAv8F,EAAAu9F,aAAAF,EAAAb,GACAx8F,EAAAw9F,YAAAH,IACAr9F,EAAAy9F,oBAAAJ,EAAAr9F,EAAA09F,aACA,OAAA,KAGA,OAAAL,EAGAM,CAAA39F,EAAAw8F,EAAAD,EAAA5S,GACA,OAAA,OAAA+S,EACA,MAGA18F,EAAA49F,WAAAlB,GACAA,IAGAjuD,EAAAovD,+BAAA,SAAAnmG,GAEA,OAAA+2C,EAAAstD,eAAA/9F,KAAA8/F,KAAA9/F,KAAAq2C,KAAA38C,EAAAxJ,OAAA,MAGAugD,EAAAsvD,8BAAA,SAAA/9F,EAAAtI,EAAAkrB,GAEA,IAAAo7E,EAAA,KACA,GAAA,OAAAtmG,EAAA,CACA,KAAAA,EAAAxJ,OAAA00B,EAAAA,EAAA,GACAlrB,EAAA/D,KAAA,GAEAqqG,EAAA,IAAAC,aAAAvmG,GAEA,IAAAg7F,EAAA1yF,EAAAk+F,gBAQA,OAPAl+F,EAAAm+F,YAAAn+F,EAAAo+F,WAAA1L,GACA1yF,EAAAq+F,cAAAr+F,EAAAo+F,WAAAp+F,EAAAs+F,mBAAAt+F,EAAAu+F,SACAv+F,EAAAq+F,cAAAr+F,EAAAo+F,WAAAp+F,EAAAw+F,mBAAAx+F,EAAAu+F,SACAv+F,EAAAq+F,cAAAr+F,EAAAo+F,WAAAp+F,EAAAy+F,eAAAz+F,EAAA0+F,eACA1+F,EAAAq+F,cAAAr+F,EAAAo+F,WAAAp+F,EAAA2+F,eAAA3+F,EAAA0+F,eACA1+F,EAAA4+F,WAAA5+F,EAAAo+F,WAAA,EAAAp+F,EAAA6+F,KAAAj8E,EAAAA,EAAA,EAAA5iB,EAAA6+F,KAAA7+F,EAAA8+F,MAAAd,GACAh+F,EAAAm+F,YAAAn+F,EAAAo+F,WAAA,MACA1L,GAGAjkD,IAGA5gD,OAAA,0CAAA,eAAA,SAAA4gD,GAaA,OAZAA,EAAAswD,mBAAA,SAAAjtB,GAEAn9E,KAAAm9E,MAAArjC,EAAAm3B,kCAAAkM,IAGArjC,EAAAuwD,uBAAA,SAAAx4B,EAAAC,EAAAtxB,GAEAxgD,KAAA6xE,QAAA/3B,EAAAm3B,kCAAAY,GACA7xE,KAAA8xE,SAAAh4B,EAAAm3B,kCAAAa,GACA9xE,KAAAwgD,UAAAA,EAAAX,SAGA/F,IAGA5gD,OAAA,6CAAA,eAAA,SAAA4gD,GAmCA,OAlCAA,EAAAwwD,qBACAC,MAAA,EACAl6C,KAAA,EACAm6C,SAAA,EACAC,SAAA,EACAC,YAAA,IAGA5wD,EAAA6wD,eAAA,SAAAzwG,EAAAy3E,GAEA3xE,KAAA9F,KAAAA,EACA8F,KAAA4xE,SAAA,EAAA,GAAA,GACA5xE,KAAA6xE,SAAA,EAAA,GAAA,GACA7xE,KAAA8xE,UAAA,EAAA,EAAA,GACA9xE,KAAA+xE,UAAA,EACA/xE,KAAAm8B,QAAA,EACAn8B,KAAAgyE,WAAA,EACAhyE,KAAAiyE,aAAA,EACAjyE,KAAAkyE,UAAA,GACAlyE,KAAAmyE,QAAA,KACAr4B,EAAAc,qBAAA+2B,EAAA3xE,MAAA,IAGA85C,EAAA6wD,eAAA3uG,UAAAm5E,QAAA,SAAAj7E,GAEA8F,KAAA9F,KAAAA,GAGA4/C,EAAA6wD,eAAA3uG,UAAA4uG,WAAA,SAAA7M,EAAA8M,GAEA7qG,KAAA+9F,cAAAA,EACA/9F,KAAA6qG,aAAAA,GAGA/wD,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GAqHA,OApHAA,EAAAgxD,WAAA,SAAAp4B,GAEA1yE,KAAA0yE,SAAAA,EAEA1yE,KAAA+qG,YAAA,KACA/qG,KAAAgrG,YAAA,KACAhrG,KAAAirG,QAAA,KAEAjrG,KAAAkrG,aAAA,KACAlrG,KAAAmrG,aAAA,KACAnrG,KAAAorG,SAAA,MAGAtxD,EAAAgxD,WAAA9uG,UAAAqvG,YAAA,SAAA34B,GAEA1yE,KAAA0yE,SAAAA,GAGA54B,EAAAgxD,WAAA9uG,UAAA22E,YAAA,WAEA,OAAA3yE,KAAA0yE,UAGA54B,EAAAgxD,WAAA9uG,UAAAsvG,eAAA,SAAAh1C,GAEAt2D,KAAA+qG,YAAA,IAAAzB,aAAAhzC,IAGAxc,EAAAgxD,WAAA9uG,UAAAuvG,eAAA,SAAAxe,GAEA/sF,KAAAgrG,YAAA,IAAA1B,aAAAvc,IAGAjzC,EAAAgxD,WAAA9uG,UAAAwvG,WAAA,SAAAxe,GAEAhtF,KAAAirG,QAAA,IAAA3B,aAAAtc,IAGAlzC,EAAAgxD,WAAA9uG,UAAAyvG,eAAA,WAEA,OAAA,OAAAzrG,KAAA+qG,aAGAjxD,EAAAgxD,WAAA9uG,UAAA0vG,eAAA,WAEA,OAAA,OAAA1rG,KAAAgrG,aAGAlxD,EAAAgxD,WAAA9uG,UAAA2vG,WAAA,WAEA,OAAA,OAAA3rG,KAAAirG,SAGAnxD,EAAAgxD,WAAA9uG,UAAA4vG,eAAA,WAEA,OAAA5rG,KAAA+qG,aAGAjxD,EAAAgxD,WAAA9uG,UAAA6vG,eAAA,WAEA,OAAA7rG,KAAAgrG,aAGAlxD,EAAAgxD,WAAA9uG,UAAA8vG,WAAA,WAEA,OAAA9rG,KAAAirG,SAGAnxD,EAAAgxD,WAAA9uG,UAAA4uG,WAAA,SAAAM,EAAAC,EAAAC,GAEAprG,KAAAkrG,aAAAA,EACAlrG,KAAAmrG,aAAAA,EACAnrG,KAAAorG,SAAAA,GAGAtxD,EAAAgxD,WAAA9uG,UAAA+vG,gBAAA,WAEA,OAAA/rG,KAAAkrG,cAGApxD,EAAAgxD,WAAA9uG,UAAAgwG,gBAAA,WAEA,OAAAhsG,KAAAmrG,cAGArxD,EAAAgxD,WAAA9uG,UAAAiwG,YAAA,WAEA,OAAAjsG,KAAAorG,UAGAtxD,EAAAgxD,WAAA9uG,UAAA69D,YAAA,WAEA,OAAAr8D,SAAAwC,KAAA+qG,YAAAxxG,OAAA,EAAA,KAGAugD,EAAAgxD,WAAA9uG,UAAA2xF,YAAA,WAEA,OAAAnwF,SAAAwC,KAAAgrG,YAAAzxG,OAAA,EAAA,KAGAugD,EAAAgxD,WAAA9uG,UAAA+xF,QAAA,WAEA,OAAAvwF,SAAAwC,KAAAirG,QAAA1xG,OAAA,EAAA,KAGAugD,EAAAgxD,WAAA9uG,UAAA29D,UAAA,SAAA74D,GAEA,OAAA,IAAAg5C,EAAAyH,MAAAvhD,KAAA+qG,YAAA,EAAAjqG,GAAAd,KAAA+qG,YAAA,EAAAjqG,EAAA,GAAAd,KAAA+qG,YAAA,EAAAjqG,EAAA,KAGAg5C,EAAAgxD,WAAA9uG,UAAAkwG,qBAAA,SAAAprG,EAAA4xD,GAEA,IAAA2D,EAAAr2D,KAAA25D,UAAA74D,GACA,OAAA4xD,EAAAF,MAAA6D,IAGAvc,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GA0EA,OAzEAA,EAAAqyD,WAAA,WAEAnsG,KAAA0yD,eAAA,IAAA5Y,EAAAsY,eACApyD,KAAAkwF,WAGAp2C,EAAAqyD,WAAAnwG,UAAAowG,QAAA,SAAAtc,QAEAhzF,IAAAkD,KAAAkwF,OAAAJ,EAAApd,SAAAx4E,QACA8F,KAAAkwF,OAAAJ,EAAApd,SAAAx4E,UAEA8F,KAAAkwF,OAAAJ,EAAApd,SAAAx4E,MAAA8E,KAAA8wF,IAGAh2C,EAAAqyD,WAAAnwG,UAAAqwG,gBAAA,SAAAC,GAEA,IAAAC,EACA,IAAAA,KAAAvsG,KAAAkwF,OACAlwF,KAAAkwF,OAAA1xF,eAAA+tG,IACAvsG,KAAAwsG,qBAAAD,EAAAD,IAKAxyD,EAAAqyD,WAAAnwG,UAAAywG,eAAA,SAAAF,GAEA,YAAAzvG,IAAAkD,KAAAkwF,OAAAqc,IAGAzyD,EAAAqyD,WAAAnwG,UAAAwwG,qBAAA,SAAAD,EAAAD,GAEA,GAAAtsG,KAAAysG,eAAAF,GAAA,CAIA,IACA9yG,EAAAizG,EADAC,EAAA3sG,KAAAkwF,OAAAqc,GAEA,IAAA9yG,EAAA,EAAAA,EAAAkzG,EAAApzG,OAAAE,IACAizG,EAAAC,EAAAlzG,GACA6yG,EAAAI,KAIA5yD,EAAAqyD,WAAAnwG,UAAA4wG,wBAAA,SAAAC,EAAAP,GAEA,IAAAC,EACA,IAAAA,KAAAvsG,KAAAkwF,OACAlwF,KAAAkwF,OAAA1xF,eAAA+tG,IAAAA,EAAAM,GACA7sG,KAAAwsG,qBAAAD,EAAAD,IAKAxyD,EAAAqyD,WAAAnwG,UAAA8wG,kBAAA,WAEA,OAAA9sG,KAAA0yD,gBAGA5Y,EAAAqyD,WAAAnwG,UAAA+wG,wBAAA,WAEA,OAAA/sG,KAAA0yD,eAAA9K,QAGA9N,EAAAqyD,WAAAnwG,UAAAgxG,kBAAA,SAAAt6C,GAEA1yD,KAAA0yD,eAAAA,GAGA5Y,EAAAqyD,WAAAnwG,UAAAixG,qBAAA,SAAAv6C,GAEA1yD,KAAA0yD,eAAAH,OAAAG,IAGA5Y,IAGA5gD,OAAA,4CAAA,eAAA,SAAA4gD,GAgeA,OA/dAA,EAAAozD,YACA3C,MAAA,EACAl6C,KAAA,EACAm6C,SAAA,EACA2C,iBAAA,GAGArzD,EAAAszD,cAAA,SAAA/hG,GAEArL,KAAAqL,QAAAA,EACArL,KAAAqtG,aAAA,KACArtG,KAAAstG,QAAA,KACAttG,KAAAutG,cAAA,KACAvtG,KAAAwtG,YAAA,KACAxtG,KAAAytG,YAAA,MAGA3zD,EAAAszD,cAAApxG,UAAA0xG,KAAA,WAEA,QAAA1tG,KAAA2tG,sBAIA3tG,KAAA4tG,eAOA9zD,EAAAszD,cAAApxG,UAAA6xG,iBAAA,WAEA,OAAA7tG,KAAAqtG,aAAAS,eAGAh0D,EAAAszD,cAAApxG,UAAA2xG,iBAAA,WAEA,IAAAI,EAAA,IAAAj0D,EAAAuwD,uBAAA,EAAA,EAAA,IAAAvwD,EAAAoI,OAAA,EAAA,EAAA,IAKA,OAJAliD,KAAAqtG,cACAU,mBAAAA,EACAD,cAAA,IAEA,GAGAh0D,EAAAszD,cAAApxG,UAAA4xG,YAAA,WA0NA,SAAAI,EAAA3iG,EAAAiiG,EAAAD,EAAAY,GAEA,IAAA1F,EAxHA,SAAA0F,GAEA,IAAAtgE,EAAA,KACAsgE,GAAAn0D,EAAAozD,WAAA1C,UAAAyD,GAAAn0D,EAAAozD,WAAAC,iBACAx/D,GACA,YAAAsgE,GAAAn0D,EAAAozD,WAAA1C,SAAA,YAAA,cACA,0CACA,wCAEA,oCACA,0CACA,8CAEA,gCACA,gCAEA,oBACA,oCACA,4BACA,SAEA,qBACA,gEACA,oEACA,8EACA,oBACA,qBACA,SACA,2DACA,KACAh+F,KAAA,MACAyhG,GAAAn0D,EAAAozD,WAAA3C,OAAA0D,GAAAn0D,EAAAozD,WAAA78C,OACA1iB,GACA,YAAAsgE,GAAAn0D,EAAAozD,WAAA3C,MAAA,QAAA,QACA,0CAEA,oCACA,0CACA,8CACA,eACA,oCACA,SAEA,gCAEA,qBACA,gEACA,oEACA,eACA,uCACA,4DACA,SACA,2DACA,KACA/9F,KAAA,OAEA,OAAAmhC,EAgEAugE,CAAAD,GACA3F,EA3NA,SAAA2F,EAAAZ,GAEA,IAAA1/D,EAAA,KACAsgE,GAAAn0D,EAAAozD,WAAA3C,OAAA0D,GAAAn0D,EAAAozD,WAAA78C,KACA1iB,GACA,sBAAA0/D,EAAAS,cAEA,eACA,IACA,+BACA,KAEA,kBACA,IACA,+BACA,+BACA,KAEA,2CACA,qCACA,8BAEA,qBACA,iFACA,0DACA,2CACA,4EACA,MACA,oEACA,KACAthG,KAAA,MACAyhG,GAAAn0D,EAAAozD,WAAA1C,UAAAyD,GAAAn0D,EAAAozD,WAAAC,mBACAx/D,GACA,YAAAsgE,GAAAn0D,EAAAozD,WAAA1C,SAAA,YAAA,cACA,sBAAA6C,EAAAS,cAEA,eACA,IACA,+BACA,gCACA,4BACA,KAEA,kBACA,IACA,+BACA,+BACA,gCACA,6BACA,2BACA,KAEA,2CACA,qCACA,8BAEA,gCACA,gCAEA,oBACA,4BACA,8BACA,SAEA,qBACA,0CACA,2BACA,cACA,MACA,iFACA,0DACA,2DACA,2CAEA,2CACA,0DACA,oDACA,oGACA,kIACA,MAEA,oBACA,+EACA,wDACA,wDACA,0DACA,SAEA,2DACA,2DACA,6DACA,sGACA,KACAthG,KAAA,OAEA,OAAAmhC,EA4HAwgE,CAAAF,EAAAZ,GACA,GAAA,OAAA9E,GAAA,OAAAD,EACA,OAAA,EAEA,IAAAP,EAAAjuD,EAAA6tD,uBAAAt8F,EAAAk9F,EAAAD,EAAA,SAAAn0E,GACA2lB,EAAAmB,QAAA9mB,KAEA,OAAA,OAAA4zE,IAIA18F,EAAA49F,WAAAlB,GAzEA,SAAA18F,EAAA08F,EAAAsF,EAAAY,GAEA,GAAAA,GAAAn0D,EAAAozD,WAAA1C,UAAAyD,GAAAn0D,EAAAozD,WAAAC,iBAAA,CAMA,IAAA1zG,EACA,IANAsuG,EAAAqG,wBAAA/iG,EAAAgjG,kBAAAtG,EAAA,mBACAA,EAAAuG,sBAAAjjG,EAAAgjG,kBAAAtG,EAAA,iBAEAA,EAAAwG,yBAAAljG,EAAAmjG,mBAAAzG,EAAA,sBACAA,EAAA0G,iBAEAh1G,EAAA,EAAAA,EAAA4zG,EAAAS,cAAAr0G,IACAsuG,EAAA0G,cAAAzvG,MACA0vG,aAAArjG,EAAAmjG,mBAAAzG,EAAA,WAAAtuG,EAAA,kBACAk1G,cAAAtjG,EAAAmjG,mBAAAzG,EAAA,WAAAtuG,EAAA,mBACA+mD,UAAAn1C,EAAAmjG,mBAAAzG,EAAA,WAAAtuG,EAAA,iBAIAsuG,EAAA6G,kBACAC,aAAAxjG,EAAAmjG,mBAAAzG,EAAA,0BACA2G,aAAArjG,EAAAmjG,mBAAAzG,EAAA,0BACA4G,cAAAtjG,EAAAmjG,mBAAAzG,EAAA,2BACAh2B,UAAA1mE,EAAAmjG,mBAAAzG,EAAA,uBACA5rE,QAAA9wB,EAAAmjG,mBAAAzG,EAAA,sBAGAA,EAAA+G,eAAAzjG,EAAAmjG,mBAAAzG,EAAA,eACAA,EAAAgH,eAAA1jG,EAAAmjG,mBAAAzG,EAAA,qBACAA,EAAAiH,eAAA3jG,EAAAmjG,mBAAAzG,EAAA,yBAEAkG,GAAAn0D,EAAAozD,WAAAC,mBACApF,EAAAkH,kBAAA5jG,EAAAgjG,kBAAAtG,EAAA,aACAA,EAAAmH,eAAA7jG,EAAAmjG,mBAAAzG,EAAA,kBAEA,GAAAkG,GAAAn0D,EAAAozD,WAAA3C,OAAA0D,GAAAn0D,EAAAozD,WAAA78C,KAAA,CAKA,IAJA03C,EAAAqG,wBAAA/iG,EAAAgjG,kBAAAtG,EAAA,mBAEAA,EAAAwG,yBAAAljG,EAAAmjG,mBAAAzG,EAAA,sBACAA,EAAA0G,iBACAh1G,EAAA,EAAAA,EAAA4zG,EAAAS,cAAAr0G,IACAsuG,EAAA0G,cAAAzvG,MACA0vG,aAAArjG,EAAAmjG,mBAAAzG,EAAA,WAAAtuG,EAAA,oBAIAsuG,EAAA6G,kBACAC,aAAAxjG,EAAAmjG,mBAAAzG,EAAA,0BACA2G,aAAArjG,EAAAmjG,mBAAAzG,EAAA,2BAGAA,EAAA+G,eAAAzjG,EAAAmjG,mBAAAzG,EAAA,eACAA,EAAAgH,eAAA1jG,EAAAmjG,mBAAAzG,EAAA,qBACAA,EAAAiH,eAAA3jG,EAAAmjG,mBAAAzG,EAAA,yBAEAkG,GAAAn0D,EAAAozD,WAAA3C,QACAxC,EAAAoH,iBAAA9jG,EAAAmjG,mBAAAzG,EAAA,gBAoBAqH,CAAA/jG,EAAA08F,EAAAsF,EAAAY,GACAX,EAAAW,GAAAlG,GACA,GAKA,OAFA/nG,KAAAstG,aAEAU,EAAAhuG,KAAAqL,QAAArL,KAAAstG,QAAAttG,KAAAqtG,aAAAvzD,EAAAozD,WAAA3C,WAIAyD,EAAAhuG,KAAAqL,QAAArL,KAAAstG,QAAAttG,KAAAqtG,aAAAvzD,EAAAozD,WAAA78C,UAIA29C,EAAAhuG,KAAAqL,QAAArL,KAAAstG,QAAAttG,KAAAqtG,aAAAvzD,EAAAozD,WAAA1C,cAIAwD,EAAAhuG,KAAAqL,QAAArL,KAAAstG,QAAAttG,KAAAqtG,aAAAvzD,EAAAozD,WAAAC,oBAIAntG,KAAAqL,QAAAiuC,OAAAt5C,KAAAqL,QAAAgkG,YACArvG,KAAAqL,QAAAikG,UAAAtvG,KAAAqL,QAAAkkG,QAEAvvG,KAAAqL,QAAAiuC,OAAAt5C,KAAAqL,QAAAmkG,OACAxvG,KAAAqL,QAAAokG,cAAAzvG,KAAAqL,QAAAqkG,UACA1vG,KAAAqL,QAAAskG,UAAA3vG,KAAAqL,QAAAukG,UAAA5vG,KAAAqL,QAAAwkG,qBAEA7vG,KAAAqL,QAAA6nC,QAAAlzC,KAAAqL,QAAAykG,WACA9vG,KAAAytG,aAAA,GAEA,OAGA3zD,EAAAszD,cAAApxG,UAAA+zG,gBAAA,SAAAr9B,EAAAs9B,GAEA,GAAA,OAAAt9B,EAAAP,QAAA,CACA,IAAA9mE,EAAArL,KAAAqL,QACA0yF,EAAA1yF,EAAAk+F,gBACAsB,EAAA,IAAAoF,MACApF,EAAAlqG,IAAA+xE,EAAAP,QACA04B,EAAA/V,OAAA,WACA,IAAAob,EAAAp2D,EAAAutD,6BAAAwD,GACAx/F,EAAAm+F,YAAAn+F,EAAAo+F,WAAA1L,GACA1yF,EAAAq+F,cAAAr+F,EAAAo+F,WAAAp+F,EAAAw+F,mBAAAx+F,EAAA8kG,QACA9kG,EAAAq+F,cAAAr+F,EAAAo+F,WAAAp+F,EAAAs+F,mBAAAt+F,EAAA+kG,sBACA/kG,EAAA4+F,WAAA5+F,EAAAo+F,WAAA,EAAAp+F,EAAA6+F,KAAA7+F,EAAA6+F,KAAA7+F,EAAAglG,cAAAH,GACA7kG,EAAAilG,eAAAjlG,EAAAo+F,YACAp+F,EAAAm+F,YAAAn+F,EAAAo+F,WAAA,WACA3sG,IAAAkzG,GAAA,OAAAA,GACAA,KAGAt9B,EAAAk4B,WAAA7M,EAAA8M,KAIA/wD,EAAAszD,cAAApxG,UAAAu0G,YAAA,SAAAzgB,GAEA,IAAAzkF,EAAArL,KAAAqL,QACA6/F,EAAA7/F,EAAAmlG,eACAnlG,EAAAolG,WAAAplG,EAAAqlG,aAAAxF,GACA7/F,EAAAslG,WAAAtlG,EAAAqlG,aAAA5gB,EAAA8b,iBAAAvgG,EAAAulG,aACA1F,EAAA2F,SAAA,EACA3F,EAAA4F,SAAAhhB,EAAAj2B,cAEA,IAAAsxC,EAAA,KACArb,EAAA4b,mBACAP,EAAA9/F,EAAAmlG,eACAnlG,EAAAolG,WAAAplG,EAAAqlG,aAAAvF,GACA9/F,EAAAslG,WAAAtlG,EAAAqlG,aAAA5gB,EAAA+b,iBAAAxgG,EAAAulG,aACAzF,EAAA0F,SAAA,EACA1F,EAAA2F,SAAAhhB,EAAAnC,eAGA,IAAAyd,EAAA,KACAtb,EAAA6b,eACAP,EAAA//F,EAAAmlG,eACAnlG,EAAAolG,WAAAplG,EAAAqlG,aAAAtF,GACA//F,EAAAslG,WAAAtlG,EAAAqlG,aAAA5gB,EAAAgc,aAAAzgG,EAAAulG,aACAxF,EAAAyF,SAAA,EACAzF,EAAA0F,SAAAhhB,EAAA/B,WAGA+B,EAAA8a,WAAAM,EAAAC,EAAAC,IAGAtxD,EAAAszD,cAAApxG,UAAA+0G,UAAA,SAAA9C,GAEA,OAAAjuG,KAAAstG,QAAAW,IAGAn0D,EAAAszD,cAAApxG,UAAAg1G,UAAA,SAAA/C,GAEAjuG,KAAAutG,cAAAvtG,KAAA+wG,UAAA9C,GACAjuG,KAAAwtG,YAAAS,EACAjuG,KAAAqL,QAAA49F,WAAAjpG,KAAAutG,gBAGAzzD,EAAAszD,cAAApxG,UAAAi1G,cAAA,SAAAC,EAAAC,EAAA37C,EAAAE,GAEA,SAAA07C,EAAAD,EAAArwG,EAAAitG,GAEA,OAAAjtG,EAAAqwG,EAAA53G,OACA43G,EAAArwG,GAGAitG,EAGA,IAGAt0G,EAAA43G,EAAAC,EAHAjmG,EAAArL,KAAAqL,QACA08F,EAAA/nG,KAAAutG,cAGA,GAAAvtG,KAAAwtG,aAAA1zD,EAAAozD,WAAA1C,UAAAxqG,KAAAwtG,aAAA1zD,EAAAozD,WAAAC,iBAAA,CAEA,IADA9hG,EAAAkmG,UAAAxJ,EAAAwG,yBAAA2C,EAAA/zB,MAAA,GAAA+zB,EAAA/zB,MAAA,GAAA+zB,EAAA/zB,MAAA,IACA1jF,EAAA,EAAAA,EAAAuG,KAAAqtG,aAAAS,cAAAr0G,IACA43G,EAAAD,EAAAD,EAAA13G,EAAAuG,KAAAqtG,aAAAU,oBACAuD,EAAAx3D,EAAAmS,cAAAuJ,EAAA67C,EAAA7wD,WACAn1C,EAAAkmG,UAAAxJ,EAAA0G,cAAAh1G,GAAAi1G,aAAA2C,EAAAx/B,QAAA,GAAAw/B,EAAAx/B,QAAA,GAAAw/B,EAAAx/B,QAAA,IACAxmE,EAAAkmG,UAAAxJ,EAAA0G,cAAAh1G,GAAAk1G,cAAA0C,EAAAv/B,SAAA,GAAAu/B,EAAAv/B,SAAA,GAAAu/B,EAAAv/B,SAAA,IACAzmE,EAAAkmG,UAAAxJ,EAAA0G,cAAAh1G,GAAA+mD,UAAA8wD,EAAApvE,EAAAovE,EAAAnvE,EAAAmvE,EAAA9vD,GAEAn2C,EAAAmmG,iBAAAzJ,EAAAgH,gBAAA,EAAAr5C,GACArqD,EAAAmmG,iBAAAzJ,EAAA+G,gBAAA,EAAAt5C,QACA,GAAAx1D,KAAAwtG,aAAA1zD,EAAAozD,WAAA3C,OAAAvqG,KAAAwtG,aAAA1zD,EAAAozD,WAAA78C,KAAA,CAEA,IADAhlD,EAAAkmG,UAAAxJ,EAAAwG,yBAAA2C,EAAA/zB,MAAA,GAAA+zB,EAAA/zB,MAAA,GAAA+zB,EAAA/zB,MAAA,IACA1jF,EAAA,EAAAA,EAAAuG,KAAAqtG,aAAAS,cAAAr0G,IACA43G,EAAAD,EAAAD,EAAA13G,EAAAuG,KAAAqtG,aAAAU,oBACA1iG,EAAAkmG,UAAAxJ,EAAA0G,cAAAh1G,GAAAi1G,aAAA2C,EAAAx/B,QAAA,GAAAw/B,EAAAx/B,QAAA,GAAAw/B,EAAAx/B,QAAA,IAEAxmE,EAAAmmG,iBAAAzJ,EAAAgH,gBAAA,EAAAr5C,GACArqD,EAAAmmG,iBAAAzJ,EAAA+G,gBAAA,EAAAt5C,KAIA1b,EAAAszD,cAAApxG,UAAAy1G,eAAA,SAAAn4D,GAEAA,IAAAt5C,KAAAytG,aACAztG,KAAAqL,QAAAiuC,OAAAt5C,KAAAqL,QAAAykG,WACA9vG,KAAAytG,aAAA,IACAn0D,GAAAt5C,KAAAytG,cACAztG,KAAAqL,QAAA6nC,QAAAlzC,KAAAqL,QAAAykG,WACA9vG,KAAAytG,aAAA,IAIA3zD,EAAAszD,cAAApxG,UAAA01G,WAAA,SAAAh/B,EAAA9qB,EAAAsjD,EAAAC,EAAAC,GAEA,IAAA//F,EAAArL,KAAAqL,QACA08F,EAAA/nG,KAAAutG,cACAvtG,KAAAyxG,eAAA/+B,EAAAT,aAEAjyE,KAAAwtG,aAAA1zD,EAAAozD,WAAA1C,UAAAxqG,KAAAwtG,aAAA1zD,EAAAozD,WAAAC,kBACA9hG,EAAAkmG,UAAAxJ,EAAA6G,iBAAAC,aAAAn8B,EAAAd,QAAA,GAAAc,EAAAd,QAAA,GAAAc,EAAAd,QAAA,IACAvmE,EAAAkmG,UAAAxJ,EAAA6G,iBAAAF,aAAAh8B,EAAAb,QAAA,GAAAa,EAAAb,QAAA,GAAAa,EAAAb,QAAA,IACAxmE,EAAAkmG,UAAAxJ,EAAA6G,iBAAAD,cAAAj8B,EAAAZ,SAAA,GAAAY,EAAAZ,SAAA,GAAAY,EAAAZ,SAAA,IACAzmE,EAAAsmG,UAAA5J,EAAA6G,iBAAA78B,UAAAW,EAAAX,WACA1mE,EAAAsmG,UAAA5J,EAAA6G,iBAAAzyE,QAAAu2C,EAAAv2C,SAEA9wB,EAAAmmG,iBAAAzJ,EAAAiH,gBAAA,EAAApnD,GAEAv8C,EAAAolG,WAAAplG,EAAAqlG,aAAAxF,GACA7/F,EAAAumG,wBAAA7J,EAAAqG,yBACA/iG,EAAAwmG,oBAAA9J,EAAAqG,wBAAAlD,EAAA2F,SAAAxlG,EAAA8+F,OAAA,EAAA,EAAA,GAEA9+F,EAAAolG,WAAAplG,EAAAqlG,aAAAvF,GACA9/F,EAAAumG,wBAAA7J,EAAAuG,uBACAjjG,EAAAwmG,oBAAA9J,EAAAuG,sBAAAnD,EAAA0F,SAAAxlG,EAAA8+F,OAAA,EAAA,EAAA,GAEAnqG,KAAAwtG,aAAA1zD,EAAAozD,WAAAC,mBACA9hG,EAAAymG,cAAAzmG,EAAA0mG,UACA1mG,EAAAm+F,YAAAn+F,EAAAo+F,WAAA/2B,EAAAqrB,eACA1yF,EAAAolG,WAAAplG,EAAAqlG,aAAAtF,GACA//F,EAAAumG,wBAAA7J,EAAAkH,mBACA5jG,EAAAwmG,oBAAA9J,EAAAkH,kBAAA7D,EAAAyF,SAAAxlG,EAAA8+F,OAAA,EAAA,EAAA,GACA9+F,EAAA2mG,UAAAjK,EAAAmH,eAAA,IAGA7jG,EAAA4mG,WAAA5mG,EAAA6mG,UAAA,EAAAhH,EAAA4F,WACA9wG,KAAAwtG,aAAA1zD,EAAAozD,WAAA3C,OAAAvqG,KAAAwtG,aAAA1zD,EAAAozD,WAAA78C,OACAhlD,EAAAkmG,UAAAxJ,EAAA6G,iBAAAC,aAAAn8B,EAAAd,QAAA,GAAAc,EAAAd,QAAA,GAAAc,EAAAd,QAAA,IACAvmE,EAAAkmG,UAAAxJ,EAAA6G,iBAAAF,aAAAh8B,EAAAb,QAAA,GAAAa,EAAAb,QAAA,GAAAa,EAAAb,QAAA,IAEAxmE,EAAAmmG,iBAAAzJ,EAAAiH,gBAAA,EAAApnD,GAEAv8C,EAAAolG,WAAAplG,EAAAqlG,aAAAxF,GACA7/F,EAAAumG,wBAAA7J,EAAAqG,yBACA/iG,EAAAwmG,oBAAA9J,EAAAqG,wBAAAlD,EAAA2F,SAAAxlG,EAAA8+F,OAAA,EAAA,EAAA,GAEAnqG,KAAAwtG,aAAA1zD,EAAAozD,WAAA3C,OACAl/F,EAAAsmG,UAAA5J,EAAAoH,iBAAAz8B,EAAAR,WACA7mE,EAAA4mG,WAAA5mG,EAAA8mG,OAAA,EAAAjH,EAAA4F,WACA9wG,KAAAwtG,aAAA1zD,EAAAozD,WAAA78C,MACAhlD,EAAA4mG,WAAA5mG,EAAA+mG,MAAA,EAAAlH,EAAA4F,YAKAh3D,IAGA5gD,OAAA,uCAAA,eAAA,SAAA4gD,GAiRA,OAhRAA,EAAAu4D,SAAA,WAEAryG,KAAAq9C,OAAA,KACAr9C,KAAAqL,QAAA,KACArL,KAAA+nG,OAAA,KAEA/nG,KAAAkxG,aAAA,KACAlxG,KAAAmxG,kBAAA,KACAnxG,KAAA83E,OAAA,MAGAh+B,EAAAu4D,SAAAr2G,UAAA0xG,KAAA,SAAArwD,GAEA,QAAAvD,EAAAqD,qBAIAn9C,KAAAsyG,YAAAj1D,OAIAr9C,KAAAuyG,eAIAvyG,KAAA4tG,kBAIA5tG,KAAAwyG,gBAIAxyG,KAAAyyG,kBAOA34D,EAAAu4D,SAAAr2G,UAAAs2G,YAAA,SAAAj1D,GAGA,OADAr9C,KAAAq9C,OAAAA,EACA,OAAAr9C,KAAAq9C,cAIAvgD,IAAAkD,KAAAq9C,OAAAC,aAIAt9C,KAAAqL,QAAArL,KAAAq9C,OAAAC,WAAA,UAAAt9C,KAAAq9C,OAAAC,WAAA,sBACA,OAAAt9C,KAAAqL,UAIArL,KAAAqL,QAAAyuC,EAAA0tD,iBAAAnqD,GACA,OAAAr9C,KAAAqL,YAOAyuC,EAAAu4D,SAAAr2G,UAAA4xG,YAAA,WAGA,OADA5tG,KAAA+nG,OAAA,IAAAjuD,EAAAszD,cAAAptG,KAAAqL,SACArL,KAAA+nG,OAAA2F,QAGA5zD,EAAAu4D,SAAAr2G,UAAAw2G,WAAA,WAIA,OAFAxyG,KAAAkxG,aAAA,IAAAp3D,EAAAswD,mBAAA,GACApqG,KAAAmxG,sBACA,GAGAr3D,EAAAu4D,SAAAr2G,UAAAy2G,WAAA,WAGA,OADAzyG,KAAA83E,WACA,GAGAh+B,EAAAu4D,SAAAr2G,UAAAu2G,SAAA,WAGA,OADAvyG,KAAAmxG,sBACA,GAGAr3D,EAAAu4D,SAAAr2G,UAAA02G,cAAA,SAAArhC,EAAAC,EAAAC,GAEAvxE,KAAAqL,QAAAq8F,WAAAr2B,EAAAC,EAAAC,EAAA,IAGAz3B,EAAAu4D,SAAAr2G,UAAA22G,gBAAA,SAAAtB,GAEArxG,KAAAkxG,aAAAG,GAGAv3D,EAAAu4D,SAAAr2G,UAAA42G,SAAA,SAAAvB,GAEA,IAAAvD,EAAA9tG,KAAA+nG,OAAA8F,mBACA,OAAA7tG,KAAAmxG,kBAAA53G,QAAAu0G,GACA,GAEA9tG,KAAAmxG,kBAAAnyG,KAAAqyG,GACArxG,KAAAmxG,kBAAA53G,OAAA,IAGAugD,EAAAu4D,SAAAr2G,UAAA62G,YAAA,SAAAxB,GAEA,IAAAvwG,EAAAd,KAAAmxG,kBAAAxvG,QAAA0vG,IACA,GAAAvwG,GACAd,KAAAmxG,kBAAA3uG,OAAA1B,EAAA,IAIAg5C,EAAAu4D,SAAAr2G,UAAA82G,aAAA,WAEA9yG,KAAAmxG,sBAGAr3D,EAAAu4D,SAAAr2G,UAAAo1G,SAAA,SAAAtwG,GAEA,OAAAd,KAAAmxG,kBAAArwG,IAGAg5C,EAAAu4D,SAAAr2G,UAAA+7E,QAAA,SAAAg7B,EAAA/C,GAEA,IAAAjI,EAAA/nG,KAAA+nG,OACAgL,EAAA1G,gBAAA,SAAAvc,GACAiY,EAAAgI,gBAAAjgB,EAAAnd,cAAAq9B,GACAjI,EAAAwI,YAAAzgB,KAEA9vF,KAAA83E,OAAA94E,KAAA+zG,IAGAj5D,EAAAu4D,SAAAr2G,UAAAg8E,UAAA,SAAAg7B,EAAAhD,GAEA,IAAAv2G,EAAA2b,EACA,IAAA3b,EAAA,EAAAA,EAAAu5G,EAAAz5G,OAAAE,IACA2b,EAAA49F,EAAAv5G,GACAuG,KAAA+3E,QAAA3iE,EAAA46F,IAIAl2D,EAAAu4D,SAAAr2G,UAAAi3G,gBAAA,SAAAC,GAEA,IAAAz5G,EACA,IAAAA,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACAy5G,EAAAlzG,KAAA83E,OAAAr+E,KAIAqgD,EAAAu4D,SAAAr2G,UAAAm3G,WAAA,SAAA/9F,GAEA,IAAAtU,EAAAd,KAAA83E,OAAAn2E,QAAAyT,IACA,GAAAtU,GACAd,KAAA83E,OAAAt1E,OAAA1B,EAAA,IAIAg5C,EAAAu4D,SAAAr2G,UAAAo3G,aAAA,WAEApzG,KAAA83E,WAGAh+B,EAAAu4D,SAAAr2G,UAAAi8E,QAAA,SAAAn3E,GAEA,OAAAd,KAAA83E,OAAAh3E,IAGAg5C,EAAAu4D,SAAAr2G,UAAAq3G,OAAA,WAEArzG,KAAAqL,QAAAo8F,SAAA,EAAA,EAAAznG,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,SAGAma,EAAAu4D,SAAAr2G,UAAAs3G,YAAA,SAAAC,EAAAC,EAAAC,GAEA,IAAAC,EAAA,IAAA55D,EAAAyH,MAAAiyD,EAAAxzG,KAAAq9C,OAAA1d,OAAA8zE,EAAA,IACAz+C,EAAAh1D,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,OACA41B,GAAA,EAAA,EAAAv1D,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,QACAg0E,EAAA75D,EAAA8b,UAAA89C,EAAAH,EAAA1+C,IAAA0+C,EAAArhD,OAAAqhD,EAAA/6E,GAAA+6E,EAAAx+C,YAAAjb,EAAAsE,OAAA4W,EAAAu+C,EAAAvrB,kBAAAurB,EAAAtrB,iBAAA1yB,GACAy7B,EAAA,IAAAl3C,EAAA60B,IAAA4kC,EAAA1+C,IAAA/a,EAAA0I,SAAAmxD,EAAAJ,EAAA1+C,KAAA,MAEA12D,KAyBA,OAxBA6B,KAAAizG,gBAAA,SAAA79F,GACA,IAAAs9C,EAAAt9C,EAAA03F,oBACA13F,EAAAw3F,wBAAA9yD,EAAAwwD,oBAAAE,SAAA,SAAA1a,GACA,IACAr2F,EAAAssD,EAAAC,EAAAC,EAAA2H,EADAqO,EAAA6zB,EAAAj2B,cAEA,IAAApgE,EAAA,EAAAA,EAAAwiE,EAAAxiE,GAAA,EACAssD,EAAA+pC,EAAAoc,qBAAAzyG,EAAA,EAAAi5D,GACA1M,EAAA8pC,EAAAoc,qBAAAzyG,EAAA,EAAAi5D,GACAzM,EAAA6pC,EAAAoc,qBAAAzyG,EAAA,EAAAi5D,GAEA,QADA9E,EAAA9T,EAAAi3C,wBAAAC,EAAAjrC,EAAAC,EAAAC,KAEA9nD,EAAAa,MACA+zG,WAAA39F,EACAw+F,WAAA9jB,EACAt5B,cAAAh5D,SAAA/D,EAAA,EAAA,IACAm0D,aAAAA,QAMAzvD,EAAAmK,KAAA,SAAApI,EAAAC,GACA,OAAAD,EAAA0tD,aAAAnN,SAAAtgD,EAAAytD,aAAAnN,WAEAtiD,GAGA27C,EAAAu4D,SAAAr2G,UAAA63G,OAAA,SAAAN,GAEA,SAAAO,EAAAC,EAAAC,EAAAx+C,EAAAE,GAwBA,IAAAu4C,EAAA,KACA8F,EAAAd,gBAAA,SAAA79F,GACA,GAAAA,EAAAq3F,eAAAuH,GAAA,CACA,IAAApsD,EAAAxyC,EAAA23F,0BACA33F,EAAAo3F,qBAAAwH,EAAA,SAAAlkB,GACA,OAAAme,IACAA,EA5BA,SAAA+F,GAEA,SAAAC,EAAA/5G,EAAA2yG,GAEA,OAAA3yG,EAAA2yG,EAGA,GAAAoH,EAAAD,EAAAl6D,EAAAwwD,oBAAAE,UAAA,CACA,GAAAyJ,EAAAD,EAAAl6D,EAAAwwD,oBAAAG,UACA,OAAA3wD,EAAAozD,WAAAC,iBACA,IAAA8G,EAAAD,EAAAl6D,EAAAwwD,oBAAAG,UACA,OAAA3wD,EAAAozD,WAAA1C,aAEA,CAAA,GAAAyJ,EAAAD,EAAAl6D,EAAAwwD,oBAAAj6C,MACA,OAAAvW,EAAAozD,WAAA78C,KACA,GAAA4jD,EAAAD,EAAAl6D,EAAAwwD,oBAAAC,OACA,OAAAzwD,EAAAozD,WAAA3C,MAGA,OAAA,KASA2J,CAAAF,GACAD,EAAAhM,OAAAiJ,UAAA/C,GACA8F,EAAAhM,OAAAkJ,cAAA8C,EAAA7C,aAAA6C,EAAA5C,kBAAA37C,EAAAE,IAEA,IAAAgd,EAAAod,EAAAnd,cACAu4B,EAAApb,EAAAic,kBACAZ,EAAArb,EAAAkc,kBACAZ,EAAAtb,EAAAmc,cACA8H,EAAAhM,OAAA2J,WAAAh/B,EAAA9qB,EAAAsjD,EAAAC,EAAAC,QAMAprG,KAAAqL,QAAAsN,MAAA3Y,KAAAqL,QAAA8oG,iBAAAn0G,KAAAqL,QAAA+oG,kBAEA,IAAA5+C,EAAA1b,EAAA8a,WAAA2+C,EAAA1+C,IAAA0+C,EAAArhD,OAAAqhD,EAAA/6E,IACAk9B,EAAA5b,EAAAgb,kBAAAy+C,EAAAx+C,YAAAjb,EAAAsE,OAAAp+C,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,OAAA4zE,EAAAvrB,kBAAAurB,EAAAtrB,kBAEA6rB,EAAA9zG,KAAA85C,EAAAwwD,oBAAAE,SAAAh1C,EAAAE,GACAo+C,EAAA9zG,KAAA85C,EAAAwwD,oBAAAE,SAAA1wD,EAAAwwD,oBAAAG,SAAAj1C,EAAAE,GACAo+C,EAAA9zG,KAAA85C,EAAAwwD,oBAAAj6C,KAAAmF,EAAAE,GACAo+C,EAAA9zG,KAAA85C,EAAAwwD,oBAAAC,MAAA/0C,EAAAE,GACAo+C,EAAA9zG,KAAA85C,EAAAwwD,oBAAAE,SAAA1wD,EAAAwwD,oBAAAI,YAAAl1C,EAAAE,GACAo+C,EAAA9zG,KAAA85C,EAAAwwD,oBAAAE,SAAA1wD,EAAAwwD,oBAAAI,YAAA5wD,EAAAwwD,oBAAAG,SAAAj1C,EAAAE,IAGA5b,IAGA5gD,OAAA,iDAAA,eAAA,SAAA4gD,GAgNA,OA/MAA,EAAAu6D,mBAAA,WAEAr0G,KAAAq9C,OAAA,KACAr9C,KAAAqL,QAAA,KACArL,KAAA+nG,OAAA,KAEA/nG,KAAAuzG,OAAA,KACAvzG,KAAA4tE,OAAA,KACA5tE,KAAAkyE,UAAA,MAGAp4B,EAAAu6D,mBAAAr4G,UAAA0xG,KAAA,SAAArwD,EAAAk2D,GAEA,QAAAz5D,EAAAqD,qBAIAn9C,KAAAsyG,YAAAj1D,OAIAr9C,KAAA4tG,kBAIA5tG,KAAAs0G,iBAIAt0G,KAAAuyG,SAAAgB,OAOAz5D,EAAAu6D,mBAAAr4G,UAAAs2G,YAAA,SAAAj1D,GAGA,OADAr9C,KAAAq9C,OAAAA,EACA,OAAAr9C,KAAAq9C,cAIAvgD,IAAAkD,KAAAq9C,OAAAC,aAIAt9C,KAAAqL,QAAArL,KAAAq9C,OAAAC,WAAA,sBACA,OAAAt9C,KAAAqL,UAIArL,KAAAqL,QAAAq8F,WAAA,EAAA,EAAA,EAAA,GACA1nG,KAAAqL,QAAAiuC,OAAAt5C,KAAAqL,QAAAgkG,aAEA,MAGAv1D,EAAAu6D,mBAAAr4G,UAAA4xG,YAAA,WAEA,SAAA2G,EAAAlpG,EAAAsiC,EAAAzzC,GAEA,IAAA6tG,EAAA18F,EAAA28F,aAAA9tG,GAGA,OAFAmR,EAAA48F,aAAAF,EAAAp6D,GACAtiC,EAAA68F,cAAAH,GACA18F,EAAA88F,mBAAAJ,EAAA18F,EAAA+8F,gBAGAL,EAFA,KAKA,IAAAO,GACA,6BACA,qBACA,uCACA,KACA97F,KAAA,MAEA+7F,GACA,wCACA,qCAEA,kCACA,wCAEA,kCAEA,6BAEA,qBACA,2BACA,+BACA,iFACA,KACA/7F,KAAA,MAEAq7F,EAAA0M,EAAAv0G,KAAAqL,QAAAi9F,EAAAtoG,KAAAqL,QAAAm9F,iBACAZ,EAAA2M,EAAAv0G,KAAAqL,QAAAk9F,EAAAvoG,KAAAqL,QAAAo9F,eACA,OAAA,OAAAZ,GAAA,OAAAD,IAIA5nG,KAAA+nG,OAAA/nG,KAAAqL,QAAAs9F,gBACA3oG,KAAAqL,QAAAu9F,aAAA5oG,KAAA+nG,OAAAH,GACA5nG,KAAAqL,QAAAu9F,aAAA5oG,KAAA+nG,OAAAF,GACA7nG,KAAAqL,QAAAw9F,YAAA7oG,KAAA+nG,UACA/nG,KAAAqL,QAAAy9F,oBAAA9oG,KAAA+nG,OAAA/nG,KAAAqL,QAAA09F,eAGA/oG,KAAAqL,QAAA49F,WAAAjpG,KAAA+nG,QAEA/nG,KAAA+nG,OAAAqG,wBAAApuG,KAAAqL,QAAAgjG,kBAAAruG,KAAA+nG,OAAA,mBACA/nG,KAAAqL,QAAAumG,wBAAA5xG,KAAA+nG,OAAAqG,yBAEApuG,KAAA+nG,OAAAyM,qBAAAx0G,KAAAqL,QAAAgjG,kBAAAruG,KAAA+nG,OAAA,gBACA/nG,KAAAqL,QAAAumG,wBAAA5xG,KAAA+nG,OAAAyM,sBAEAx0G,KAAA+nG,OAAAgH,eAAA/uG,KAAAqL,QAAAmjG,mBAAAxuG,KAAA+nG,OAAA,qBACA/nG,KAAA+nG,OAAA+G,eAAA9uG,KAAAqL,QAAAmjG,mBAAAxuG,KAAA+nG,OAAA,eAEA/nG,KAAA+nG,OAAAoH,iBAAAnvG,KAAAqL,QAAAmjG,mBAAAxuG,KAAA+nG,OAAA,eAEA,KAGAjuD,EAAAu6D,mBAAAr4G,UAAAs4G,YAAA,WAIA,OAFAt0G,KAAA4tE,UACA5tE,KAAAkyE,UAAA,GACA,GAGAp4B,EAAAu6D,mBAAAr4G,UAAAu2G,SAAA,SAAAgB,GAGA,OADAvzG,KAAAuzG,OAAAz5D,EAAAU,eAAA+4D,EAAA,IAAAz5D,EAAAiuC,UACA/nF,KAAAuzG,QAOAz5D,EAAAu6D,mBAAAr4G,UAAA02G,cAAA,SAAArhC,EAAAC,EAAAC,GAEAvxE,KAAAqL,QAAAq8F,WAAAr2B,EAAAC,EAAAC,EAAA,IAGAz3B,EAAAu6D,mBAAAr4G,UAAAy4G,aAAA,SAAAviC,GAEAlyE,KAAAkyE,UAAAA,GAGAp4B,EAAAu6D,mBAAAr4G,UAAA04G,UAAA,SAAA9mC,EAAA+mC,GAEA,IAAAC,EAAA50G,KAAAqL,QAAAmlG,eACAqE,EAAA,IAAAvL,aAAA17B,GAEA5tE,KAAAqL,QAAAolG,WAAAzwG,KAAAqL,QAAAqlG,aAAAkE,GACA50G,KAAAqL,QAAAslG,WAAA3wG,KAAAqL,QAAAqlG,aAAAmE,EAAA70G,KAAAqL,QAAAulG,aACAgE,EAAA/D,SAAA,EACA+D,EAAA9D,SAAAtzG,SAAAq3G,EAAAt7G,OAAA,EAAA,IAEA,IAAAu7G,EAAA90G,KAAAqL,QAAAmlG,eACAuE,EAAA,IAAAzL,aAAAqL,GAEA30G,KAAAqL,QAAAolG,WAAAzwG,KAAAqL,QAAAqlG,aAAAoE,GACA90G,KAAAqL,QAAAslG,WAAA3wG,KAAAqL,QAAAqlG,aAAAqE,EAAA/0G,KAAAqL,QAAAulG,aACAkE,EAAAjE,SAAA,EACAiE,EAAAhE,SAAAtzG,SAAAu3G,EAAAx7G,OAAA,EAAA,IAEAyG,KAAA4tE,OAAA5uE,MAAA61G,WAAAA,EAAAD,YAAAA,EAAAE,YAAAA,KAGAh7D,EAAAu6D,mBAAAr4G,UAAAg5G,aAAA,WAEAh1G,KAAA4tE,WAGA9zB,EAAAu6D,mBAAAr4G,UAAAq3G,OAAA,WAEArzG,KAAAqL,QAAAo8F,SAAA,EAAA,EAAAznG,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,SAGAma,EAAAu6D,mBAAAr4G,UAAA63G,OAAA,WAEA7zG,KAAAqL,QAAAsN,MAAA3Y,KAAAqL,QAAA8oG,iBAAAn0G,KAAAqL,QAAA+oG,kBAEA,IAAA1+C,EAAA5b,EAAAgb,kBAAA90D,KAAAuzG,OAAAx+C,YAAAjb,EAAAsE,OAAAp+C,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,OAAA3/B,KAAAuzG,OAAAvrB,kBAAAhoF,KAAAuzG,OAAAtrB,kBACAjoF,KAAAqL,QAAAmmG,iBAAAxxG,KAAA+nG,OAAAgH,gBAAA,EAAAr5C,GAEA,IAKAj8D,EAAAm7G,EAAAE,EALAt/C,EAAA1b,EAAA8a,WAAA50D,KAAAuzG,OAAA1+C,IAAA70D,KAAAuzG,OAAArhD,OAAAlyD,KAAAuzG,OAAA/6E,IAMA,IALAx4B,KAAAqL,QAAAmmG,iBAAAxxG,KAAA+nG,OAAA+G,gBAAA,EAAAt5C,GAEAx1D,KAAAqL,QAAAsmG,UAAA3xG,KAAA+nG,OAAAoH,iBAAAnvG,KAAAkyE,WAGAz4E,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,IACAm7G,EAAA50G,KAAA4tE,OAAAn0E,GAAAm7G,YACAE,EAAA90G,KAAA4tE,OAAAn0E,GAAAq7G,YACA90G,KAAAqL,QAAAolG,WAAAzwG,KAAAqL,QAAAqlG,aAAAkE,GACA50G,KAAAqL,QAAAwmG,oBAAA7xG,KAAA+nG,OAAAqG,wBAAAwG,EAAA/D,SAAA7wG,KAAAqL,QAAA8+F,OAAA,EAAA,EAAA,GACAnqG,KAAAqL,QAAAolG,WAAAzwG,KAAAqL,QAAAqlG,aAAAoE,GACA90G,KAAAqL,QAAAwmG,oBAAA7xG,KAAA+nG,OAAAyM,qBAAAM,EAAAjE,SAAA7wG,KAAAqL,QAAA8+F,OAAA,EAAA,EAAA,GACAnqG,KAAAqL,QAAA4mG,WAAAjyG,KAAAqL,QAAA8mG,OAAA,EAAAyC,EAAA9D,WAIAh3D,IAGA5gD,OAAA,8CAAA,eAAA,SAAA4gD,GAqPA,OApPAA,EAAAm7D,wBAAA,SAAA7/F,EAAAm9D,EAAAZ,GAEA,SAAAujC,EAAAxiC,EAAAshC,GAEA,IAAAmB,EAAAr7D,EAAAm3B,kCAAAyB,EAAAd,SACAwjC,EAAAt7D,EAAAm3B,kCAAAyB,EAAAb,SACAwjC,EAAAv7D,EAAAm3B,kCAAAyB,EAAAZ,UACAwjC,EAAA,IAAAx7D,EAAA6wD,eAAAqJ,GACApiC,QAAAujC,EACAtjC,QAAAujC,EACAtjC,SAAAujC,EACAtjC,UAAAW,EAAAX,UACA51C,QAAAu2C,EAAAv2C,QACA81C,YAAAS,EAAAT,YACAC,UAAAQ,EAAAR,UACAC,QAAAO,EAAAP,UAEA,OAAAmjC,EAGA,IAAA9qB,GAAA,OACA1tF,IAAA60E,GAAA,OAAAA,QACA70E,IAAA60E,EAAA6Y,mBAAA,OAAA7Y,EAAA6Y,oBACAA,EAAA7Y,EAAA6Y,mBAIA,IAAAuoB,EAAA,IAAAj5D,EAAAqyD,WAEA71C,EAAA,KACAy2B,EAAA,KACAC,EAAA,KAEA7E,GACAqC,kBAAAA,EACA5B,qBAAA,WACAtyB,KACAy2B,EAAA,KACAC,EAAA,MAEAlE,mBAAA,SAAApW,GACA,IAAAshC,EAAAl6D,EAAAwwD,oBAAAC,MACA+K,EAAAJ,EAAAxiC,EAAAshC,GACAlkB,EAAA,IAAAh2C,EAAAgxD,WAAAwK,GACAxlB,EAAAwb,eAAAh1C,GACAy8C,EAAA3G,QAAAtc,IAEAjH,QAAA,SAAAxyB,GACAC,EAAAt3D,KAAAq3D,EAAAn0B,EAAAm0B,EAAAl0B,EAAAk0B,EAAA7U,IAEA4nC,oBAAA,WACA9yB,KACAy2B,EAAA,KACAC,EAAA,MAEA1D,kBAAA,SAAA5W,GACA,IAAAshC,EAAAl6D,EAAAwwD,oBAAAj6C,KACAilD,EAAAJ,EAAAxiC,EAAAshC,GACAlkB,EAAA,IAAAh2C,EAAAgxD,WAAAwK,GACAxlB,EAAAwb,eAAAh1C,GACAy8C,EAAA3G,QAAAtc,IAEAzG,OAAA,SAAAksB,EAAAC,GACAl/C,EAAAt3D,KAAAu2G,EAAArzE,EAAAqzE,EAAApzE,EAAAozE,EAAA/zD,GACA8U,EAAAt3D,KAAAw2G,EAAAtzE,EAAAszE,EAAArzE,EAAAqzE,EAAAh0D,IAEAmpC,gBAAA,WACAr0B,KACAy2B,KACAC,MAEApC,cAAA,SAAAlY,GACA,IAAAshC,EAAAl6D,EAAAwwD,oBAAAE,SACA,OAAA93B,EAAAP,UACA6hC,GAAAl6D,EAAAwwD,oBAAAG,UAEA/3B,EAAAv2C,QAAA,IACA63E,GAAAl6D,EAAAwwD,oBAAAI,aAGA,IAAA4K,EAAAJ,EAAAxiC,EAAAshC,GACAlkB,EAAA,IAAAh2C,EAAAgxD,WAAAwK,GACAxlB,EAAAwb,eAAAh1C,GACAw5B,EAAAyb,eAAAxe,GACA,OAAAra,EAAAP,SACA2d,EAAA0b,WAAAxe,GAGA+lB,EAAA3G,QAAAtc,IAEAxF,WAAA,SAAAhkC,EAAAC,EAAAwjC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA/zB,EAAAt3D,KAAAsnD,EAAApkB,EAAAokB,EAAAnkB,EAAAmkB,EAAA9E,GACA8U,EAAAt3D,KAAAunD,EAAArkB,EAAAqkB,EAAApkB,EAAAokB,EAAA/E,GACA8U,EAAAt3D,KAAA+qF,EAAA7nD,EAAA6nD,EAAA5nD,EAAA4nD,EAAAvoC,GAEAurC,EAAA/tF,KAAAgrF,EAAA9nD,EAAA8nD,EAAA7nD,EAAA6nD,EAAAxoC,GACAurC,EAAA/tF,KAAAirF,EAAA/nD,EAAA+nD,EAAA9nD,EAAA8nD,EAAAzoC,GACAurC,EAAA/tF,KAAAkrF,EAAAhoD,EAAAgoD,EAAA/nD,EAAA+nD,EAAA1oC,GAEA,OAAA2oC,GAAA,OAAAC,GAAA,OAAAC,IACA2C,EAAAhuF,KAAAmrF,EAAAjoD,EAAAioD,EAAAhoD,GACA6qD,EAAAhuF,KAAAorF,EAAAloD,EAAAkoD,EAAAjoD,GACA6qD,EAAAhuF,KAAAqrF,EAAAnoD,EAAAmoD,EAAAloD,MAMA,OADA2X,EAAAouC,YAAA9yE,EAAAm9D,EAAA4V,GACA4qB,GAGAj5D,EAAA27D,2BAAA,SAAAhqB,EAAA9Z,GAEA,IAEAl4E,EAAA2b,EAAA29F,EAFAj7B,KACAvF,EAAAkZ,EAAAtT,iBAEA,IAAA1+E,EAAA,EAAAA,EAAAgyF,EAAAvT,YAAAz+E,IACA2b,EAAAq2E,EAAAxT,QAAAx+E,GACAs5G,EAAAj5D,EAAAm7D,wBAAA7/F,EAAAm9D,EAAAZ,GACAmG,EAAA94E,KAAA+zG,GAEA,OAAAj7B,GAGAh+B,EAAA47D,8BAAA,SAAA13D,EAAA23D,GAwFA,SAAAvJ,EAAAlc,EAAA3d,EAAAqjC,EAAAC,GAEA,IAAA9C,EAxFA,SAAAjjB,EAAAvd,GAEA,SAAAujC,EAAAhmB,EAAA54B,EAAAqb,GAEA,SAAAwjC,EAAAh0D,EAAA7rC,EAAArS,EAAAglC,EAAA0mD,GAEA,IAAApxF,EAAA,IAAA27C,EAAAoH,SAAAa,EAAA7rC,GACA,IAAA4jC,EAAAuE,OAAAkxC,GAAA,CACA,IAAAxuC,EAAA13C,KAAA23C,IAAAuuC,EAAAz1C,EAAAsE,QACAyC,EAAAx3C,KAAAy3C,IAAAyuC,EAAAz1C,EAAAsE,QACAjgD,EAAA+jC,EAAA2e,EAAAkB,EAAAhB,EAAA7qC,EACA/X,EAAAgkC,EAAA4e,EAAAgB,EAAAlB,EAAA3qC,EAIA,OAFA/X,EAAA+jC,EAAAr+B,EAAA,GAAA1F,EAAA+jC,EAAA2G,EAAA,GACA1qC,EAAAgkC,EAAAt+B,EAAA,GAAA1F,EAAAgkC,EAAA0G,EAAA,GACA1qC,EAGA,SAAA63G,EAAAC,EAAAC,EAAAC,EAAApzC,EAAAqzC,GAEA,IAAAp4C,EAAAq4C,EAAAC,EACA,IAAAt4C,EAAA,EAAAA,EAAA,EAAAA,IAEA,IADAq4C,EAAAF,EAAApzC,EAAA/E,GACAs4C,EAAA,EAAAA,EAAAF,EAAAE,IACAL,EAAAj3G,KAAAk3G,EAAAG,EAAAD,EAAAE,IAKA,IAAA5jC,EAAAH,EAAArb,EAAAwb,UACA4iC,EAAA,IAAAx7D,EAAA6wD,eAAA7wD,EAAAwwD,oBAAAE,UACA54B,QAAAc,EAAAd,UAAA,EAAA,EAAA,GACAC,QAAAa,EAAAb,UAAA,EAAA,EAAA,GACAC,SAAAY,EAAAZ,WAAA,EAAA,EAAA,GACAC,UAAAW,EAAAX,WAAA,EACA51C,QAAAu2C,EAAAv2C,SAAA,IAGAo6E,OAAAz5G,IAAA41E,EAAAP,SAAA,OAAAO,EAAAP,QACAokC,IACAjB,EAAAngC,QAAAr7B,EAAAwwD,oBAAAE,SAAA1wD,EAAAwwD,oBAAAG,UACA6K,EAAAnjC,QAAAO,EAAAP,QACAmjC,EAAA1jC,SAAA,EAAA,EAAA,GACA0jC,EAAAzjC,SAAA,EAAA,EAAA,IAGA,IAKAp4E,EALAm6G,EAAA,IAAA95D,EAAAgxD,WAAAwK,GACAvK,KACAC,KACAC,KAGA,IAAAxxG,EAAA,EAAAA,EAAAy9D,EAAAya,WAAAp4E,OAAAE,GAAA,EACAu8G,EAAAjL,EAAAjb,EAAAx5B,SAAAY,EAAAya,WAAAl4E,EAAA,GACAu8G,EAAAhL,EAAAlb,EAAA/C,QAAA71B,EAAAya,WAAAl4E,EAAA,EAAA,GACAu8G,EAAA/K,EAAAnb,EAAA9C,IAAA91B,EAAAya,WAAAl4E,EAAA,EAAA,GAGA,GAAA88G,EAAA,CACA,IAGAC,EAHA3yG,EAAA6uE,EAAA7uE,SAAA,EAAA,GACAglC,EAAA6pC,EAAA7pC,QAAA,EAAA,GACA0mD,EAAA7c,EAAA6c,UAAA,EAEA,IAAA91F,EAAA,EAAAA,EAAAwxG,EAAA1xG,OAAAE,GAAA,EACA+8G,EAAAT,EAAA9K,EAAAxxG,EAAA,GAAAwxG,EAAAxxG,EAAA,GAAAoK,EAAAglC,EAAA0mD,GACA0b,EAAAxxG,EAAA,GAAA+8G,EAAAt0E,EACA+oE,EAAAxxG,EAAA,IAAA+8G,EAAAr0E,EAOA,OAHAyxE,EAAAtI,eAAAP,GACA6I,EAAArI,eAAAP,GACA4I,EAAApI,WAAAP,GACA2I,EAGA,IACAn6G,EAAAy9D,EAAA08C,EADAb,EAAA,IAAAj5D,EAAAqyD,WAEA,IAAA1yG,EAAA,EAAAA,EAAAq2F,EAAA54B,UAAA39D,OAAAE,IACAy9D,EAAA44B,EAAA54B,UAAAz9D,GACAm6G,EAAAkC,EAAAhmB,EAAA54B,EAAAqb,GACAwgC,EAAA3G,QAAAwH,GAEA,OAAAb,EAKA0D,CAAAvmB,EAAA0lB,GAAArjC,GACAsjC,EAAA72G,KAAA+zG,GAGA,IAAA8C,KAEAtjC,EAAAv0B,EAAAu0B,UACA,QAAAz1E,IAAAy1E,EACA,OAAAsjC,EAGA,IAAA3lB,EAAAlyC,EAAAkyC,OACA,QAAApzF,IAAAozF,EACA,OAAA2lB,EAGA,IAAAD,EAAA,EAWA,OAVA97D,EAAAwC,aACA,WAGA,OAFA8vD,EAAAlc,EAAA3d,EAAAqjC,EAAAC,GACAD,GAAA,GACA,GAEAD,EACAzlB,EAAA32F,OAAA,EAAAs8G,GAGAA,GAGA/7D,IAGA5gD,OAAA,kCAAA,eAAA,SAAA4gD,GAwEA,OAvEAA,EAAA48D,MAAA,WAEA12G,KAAA83B,MAAA,EACA93B,KAAA6lB,OAAA,EACA7lB,KAAAL,OAAA,EACAK,KAAAk5B,MAAA,EACAl5B,KAAAm5B,KAAA,EACAn5B,KAAAyY,KAAA,IAAAqhC,EAAAwF,QAAA,EAAA,GACAt/C,KAAAo6D,KAAA,IAAAtgB,EAAAwF,QAAA,EAAA,GACAt/C,KAAA8Y,KAAA,IAAAghC,EAAAwF,QAAA,EAAA,IAGAxF,EAAA48D,MAAA16G,UAAA26G,KAAA,SAAA7lG,EAAAgM,GAEA,IAAA85F,EAAA9lG,GAAA9V,OAAA8V,MAEA9Q,KAAA83B,MAAA,EACA93B,KAAA6lB,OAAA/U,EAAA+lG,MACA72G,KAAAL,MAAAmR,EAAAuoB,SACAr5B,KAAAk5B,KAAApoB,EAAAmoB,QACAj5B,KAAAm5B,IAAAroB,EAAAsoB,OAEAp5B,KAAA82G,WAAAF,EAAA95F,GACA9c,KAAAyY,KAAAzY,KAAAo6D,KAAAva,SAGA/F,EAAA48D,MAAA16G,UAAA+6G,KAAA,SAAAjmG,EAAAgM,GAEA,IAAA85F,EAAA9lG,GAAA9V,OAAA8V,MAEA9Q,KAAAL,MAAAmR,EAAAuoB,SACAr5B,KAAAk5B,KAAApoB,EAAAmoB,QACAj5B,KAAAm5B,IAAAroB,EAAAsoB,OAEAp5B,KAAA82G,WAAAF,EAAA95F,GACA9c,KAAA8Y,KAAAghC,EAAAwH,WAAAthD,KAAAo6D,KAAAp6D,KAAAyY,MACAzY,KAAAyY,KAAAzY,KAAAo6D,KAAAva,SAGA/F,EAAA48D,MAAA16G,UAAAg7G,GAAA,SAAAlmG,EAAAgM,GAEA,IAAA85F,EAAA9lG,GAAA9V,OAAA8V,MAEA9Q,KAAA83B,MAAA,EACA93B,KAAA82G,WAAAF,EAAA95F,IAGAg9B,EAAA48D,MAAA16G,UAAAi7G,IAAA,SAAAnmG,EAAAgM,GAEA,IAAA85F,EAAA9lG,GAAA9V,OAAA8V,MAEA9Q,KAAA83B,MAAA,EACA93B,KAAA82G,WAAAF,EAAA95F,IAGAg9B,EAAA48D,MAAA16G,UAAA86G,WAAA,SAAAF,EAAA95F,GAEA,IAAAo6F,EAAAN,EAAAO,QACAC,EAAAR,EAAAS,QACA,QAAAv6G,IAAAggB,EAAAmiB,sBAAA,CACA,IAAAq4E,EAAAx6F,EAAAmiB,wBACAi4E,GAAAI,EAAAr/E,KACAm/E,GAAAE,EAAA94E,SAEA1hC,IAAA9B,OAAA8lC,kBAAAhkC,IAAA9B,OAAA+lC,cACAm2E,GAAAl8G,OAAA8lC,YACAs2E,GAAAp8G,OAAA+lC,aAEA/gC,KAAAo6D,KAAA,IAAAtgB,EAAAwF,QAAA43D,EAAAE,IAGAt9D,IAGA5gD,OAAA,kCAAA,eAAA,SAAA4gD,GAwEA,OAvEAA,EAAAy9D,MAAA,WAEAv3G,KAAA83B,MAAA,EACA93B,KAAAw3G,QAAA,EACAx3G,KAAAyY,KAAA,IAAAqhC,EAAAwF,QACAt/C,KAAAo6D,KAAA,IAAAtgB,EAAAwF,QACAt/C,KAAA8Y,KAAA,IAAAghC,EAAAwF,SAGAxF,EAAAy9D,MAAAv7G,UAAAo/C,MAAA,SAAAtqC,EAAAgM,GAEA,IAAAhM,EAAA2mG,QAAAl+G,SAIAyG,KAAA83B,MAAA,EACA93B,KAAAw3G,QAAA1mG,EAAA2mG,QAAAl+G,OAEAyG,KAAA82G,WAAAhmG,EAAAgM,GACA9c,KAAAyY,KAAAzY,KAAAo6D,KAAAva,UAGA/F,EAAAy9D,MAAAv7G,UAAA+6G,KAAA,SAAAjmG,EAAAgM,GAEA,IAAAhM,EAAA2mG,QAAAl+G,SAIAyG,KAAAw3G,QAAA1mG,EAAA2mG,QAAAl+G,OAEAyG,KAAA82G,WAAAhmG,EAAAgM,GACA9c,KAAA8Y,KAAAghC,EAAAwH,WAAAthD,KAAAo6D,KAAAp6D,KAAAyY,MACAzY,KAAAyY,KAAAzY,KAAAo6D,KAAAva,UAGA/F,EAAAy9D,MAAAv7G,UAAA03F,IAAA,SAAA5iF,EAAAgM,GAEA,IAAAhM,EAAA2mG,QAAAl+G,SAIAyG,KAAA83B,MAAA,EACA93B,KAAA82G,WAAAhmG,EAAAgM,KAGAg9B,EAAAy9D,MAAAv7G,UAAA86G,WAAA,SAAAhmG,EAAAgM,GAEA,SAAA46F,EAAAC,EAAA76F,GAEA,IAAAo6F,EAAAS,EAAA1xE,MACAmxE,EAAAO,EAAA3xE,MACA,QAAAlpC,IAAAggB,EAAAmiB,sBAAA,CACA,IAAAq4E,EAAAx6F,EAAAmiB,wBACAi4E,GAAAI,EAAAr/E,KACAm/E,GAAAE,EAAA94E,IAMA,YAJA1hC,IAAA9B,OAAA8lC,kBAAAhkC,IAAA9B,OAAA+lC,cACAm2E,GAAAl8G,OAAA8lC,YACAs2E,GAAAp8G,OAAA+lC,aAEA,IAAA+Y,EAAAwF,QAAA43D,EAAAE,GAGA,GAAA,GAAAtmG,EAAA2mG,QAAAl+G,QAAA,GAAAuX,EAAA2mG,QAAAl+G,OACAyG,KAAAo6D,KAAAs9C,EAAA5mG,EAAA2mG,QAAA,GAAA36F,QACA,GAAA,GAAAhM,EAAA2mG,QAAAl+G,OAAA,CACA,IAAAknD,EAAAi3D,EAAA5mG,EAAA2mG,QAAA,GAAA36F,GAAA2iC,WAAAi4D,EAAA5mG,EAAA2mG,QAAA,GAAA36F,IACA9c,KAAAo6D,KAAA,IAAAtgB,EAAAwF,QAAAmB,EAAAA,KAIA3G,IAGA5gD,OAAA,oCAAA,eAAA,SAAA4gD,GAgNA,OArMAA,EAAA89D,cAAA,SAAAxiG,EAAAy/C,EAAA3C,GAEA,SAAApW,EAAA/4C,EAAAkU,EAAAijC,GAEA,IAAA6B,EAAAh5C,EAAAkU,GACAlU,EAAAkU,GAAAlU,EAAAm3C,GACAn3C,EAAAm3C,GAAA6B,EAGA,SAAA87D,EAAAnqG,GAEA,IAGAjU,EAAA+lD,EAHAqd,EAAAznD,EAAAm7D,WAAA7iE,GACAvP,EAAA,IAAA27C,EAAAyH,MAAA,EAAA,EAAA,GAGA,IAAA9nD,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACA+lD,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,IACA0E,EAAA27C,EAAAyI,SAAApkD,EAAAqhD,GAIA,OADArhD,EAAAgiD,eAAA,EAAA0c,EAAAwX,oBACAl2E,EAyFA,SAAA25G,EAAAp5E,EAAAhxB,GAEA,QAAAosC,EAAA0E,QAAAu5D,EAAAr5E,GAAAq5E,EAAArqG,QAEAosC,EAAA4E,QAAAq5D,EAAAr5E,GAAAq5E,EAAArqG,MACAosC,EAAA0E,QAAAw5D,EAAAt5E,GAAAs5E,EAAAtqG,KAsBA,SAAAuqG,EAAAv5E,EAAAhxB,GAEA,OAAA,OAAAwqG,EAAAx5E,GAAAhxB,GACAwqG,EAAAx5E,GAAAhxB,GAzEA,SAAAgxB,EAAAhxB,GAEA,OAAAosC,EAAA+E,eAAAs5D,EAAAz5E,GAAAq5E,EAAArqG,IA0EA0qG,CAAA15E,EAAAhxB,IAvEA,SAAAgxB,EAAAhxB,GAEA,IAGAjU,EAAA+lD,EAHA64D,EAAAC,EAAA55E,GACA65E,EAAAD,EAAA5qG,GAIA8qG,GAAA,EACAC,EAAArjG,EAAAm7D,WAAA7xC,GACA,IAAAjlC,EAAA,EAAAA,EAAAg/G,EAAApkC,mBAAA56E,IAEA,GADA+lD,EAAApqC,EAAA2gE,kBAAA0iC,EAAAvlC,eAAAz5E,IACA8+G,EAAAlrD,cAAA7N,KAAA1F,EAAAwZ,mBAAAE,oBAAA,CACAglD,GAAA,EACA,MAIA,GAAAA,EACA,OAAA,EAGA,IAAAE,GAAA,EACAC,EAAAvjG,EAAAm7D,WAAA7iE,GACA,IAAAjU,EAAA,EAAAA,EAAAk/G,EAAAtkC,mBAAA56E,IAEA,GADA+lD,EAAApqC,EAAA2gE,kBAAA4iC,EAAAzlC,eAAAz5E,IACA4+G,EAAAhrD,cAAA7N,KAAA1F,EAAAwZ,mBAAAG,mBAAA,CACAilD,GAAA,EACA,MAIA,GAAAA,EACA,OAAA,EAGA,OAAA,EAqCAE,CAAAl6E,EAAAhxB,IACAwqG,EAAAx5E,GAAAhxB,IAAA,GACA,IAIAwqG,EAAAx5E,GAAAhxB,IAAA,GACA,GAiBA,IAYAjU,EAAA2J,EAVA+0G,KACAJ,KACAc,KACAb,KACAM,KAEAQ,KACAZ,KACAtvG,EAAAwM,EAAAk7D,eAGA,IAAA72E,EAAA,EAAAA,EAAAmP,EAAAnP,IAGA,IAFAq/G,EAAA95G,KAAAvF,GACAy+G,EAAAl5G,SACAoE,EAAA,EAAAA,EAAAwF,EAAAxF,IACA80G,EAAAz+G,GAAAuF,KAAA,MASA,OA1KA,WAEA,IAGAvF,EAAA2J,EAAAy5D,EAAArd,EAAAiB,EAAAs4D,EAAAC,EACAC,EAAAC,EACAl1C,EAAAm1C,EAAAC,EAAAC,EALAC,EAAAx/D,EAAA0I,SAAA0P,EAAA2C,GAAA/U,YACAy5D,EAAAz/D,EAAAqa,8BAAAU,EAAAykD,GAKA,IAAA7/G,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAAA,CAIA,IAHAs/G,EAAAj/D,EAAAoE,IACA86D,GAAAl/D,EAAAoE,IACA2e,EAAAznD,EAAAm7D,WAAA92E,GACA2J,EAAA,EAAAA,EAAAy5D,EAAAwX,mBAAAjxE,IACAo8C,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAA9vE,IACAq9C,EAAA84D,EAAAxlD,cAAAvU,GACA1F,EAAA0E,QAAAiC,EAAAs4D,KACAA,EAAAt4D,GAEA3G,EAAA2E,UAAAgC,EAAAu4D,KACAA,EAAAv4D,GAIA03D,EAAAn5G,KAAA+5G,GACAhB,EAAA/4G,KAAAg6G,GAEAC,EAAApB,EAAAp+G,GACAy/G,EAAAK,EAAAxlD,cAAAklD,GACAJ,EAAA75G,KAAAi6G,GACAjB,EAAAh5G,KAAAk6G,GAEAl1C,EAAAlqB,EAAAshC,2BAAAhmE,EAAA3b,GACA0/G,EAAAr/D,EAAA0I,SAAAy2D,EAAApkD,GAAA/U,YACAs5D,EAAAt/D,EAAA2H,UAAAuiB,EAAAm1C,GACAr/D,EAAAgF,iBAAAs6D,EAAA,IACAp1C,EAAA7jB,gBAAA,GAGAk5D,EAAAv/D,EAAAqa,8BAAA8kD,EAAAj1C,GACAs0C,EAAAt5G,KAAAq6G,IA8HAG,GAlEA,WAEA,IAEA//G,EAAA2J,EAFAwF,EAAAkwG,EAAAv/G,OAGA,IAAAE,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACA,IAAA2J,EAAA,EAAAA,EAAAwF,EAAAnP,EAAA,EAAA2J,IACA00G,EAAAgB,EAAA11G,GAAA01G,EAAA11G,EAAA,KACA04C,EAAAg9D,EAAA11G,EAAAA,EAAA,GA2DAq2G,GApCA,WAEA,IAEAhgH,EAAA2J,EAFAwF,EAAAkwG,EAAAv/G,OAGA,IAAAE,EAAA,EAAAA,EAAAmP,EAAA,EAAAnP,IACA,IAAA2J,EAAA,EAAAA,EAAAwF,EAAAnP,EAAA,EAAA2J,IACA60G,EAAAa,EAAA11G,GAAA01G,EAAA11G,EAAA,KACA04C,EAAAg9D,EAAA11G,EAAAA,EAAA,GA6BAs2G,GAEAZ,GAIAh/D,IAGA5gD,OAAA,oCAAA,eAAA,SAAA4gD,GAyUA,OAlUAA,EAAA6/D,aAAA,SAAAt8D,GAEAr9C,KAAAq9C,OAAAA,EACAr9C,KAAAqL,QAAArL,KAAAq9C,OAAAC,WAAA,OASAxD,EAAA6/D,aAAA39G,UAAA49G,SAAA,WAEA,OAAA55G,KAAAq9C,OAAA3d,OASAoa,EAAA6/D,aAAA39G,UAAA69G,UAAA,WAEA,OAAA75G,KAAAq9C,OAAA1d,QAOAma,EAAA6/D,aAAA39G,UAAAw9D,MAAA,WAEAx5D,KAAAqL,QAAAyuG,UAAA,EAAA,EAAA95G,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,QACA3/B,KAAAqL,QAAA0uG,UAAA,UACA/5G,KAAAqL,QAAA2uG,SAAA,EAAA,EAAAh6G,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,SAUAma,EAAA6/D,aAAA39G,UAAAi+G,SAAA,SAAAhjG,EAAAijC,GAEAl6C,KAAAqL,QAAA6uG,YACAl6G,KAAAqL,QAAA8uG,OAAAljG,EAAAirB,EAAAliC,KAAAq9C,OAAA1d,OAAA1oB,EAAAkrB,GACAniC,KAAAqL,QAAA+uG,OAAAlgE,EAAAhY,EAAAliC,KAAAq9C,OAAA1d,OAAAua,EAAA/X,GACAniC,KAAAqL,QAAAgvG,UAWAvgE,EAAA6/D,aAAA39G,UAAAs+G,YAAA,SAAAz9C,EAAAsgB,EAAAtf,GAEA,IAAAgT,EAEAK,EAQAz3E,EAAA48D,EAAAsI,EACA,IAJA3+D,KAAAqL,QAAA0uG,WAPAlpC,EAOAsM,EAJA,QADAjM,EAAAp3B,EAAA82B,wBAAAC,IACA,GAAA,IAAAK,EAAA,GAAA,IAAAA,EAAA,GAAA,KAKAlxE,KAAAqL,QAAA6uG,YAGAzgH,EAAA,EAAAA,EAAAojE,EAAAhD,cAAApgE,IACA48D,EAAAwG,EAAAlD,UAAAlgE,GACA,IAAAA,EACAuG,KAAAqL,QAAA8uG,OAAA9jD,EAAAn0B,EAAAliC,KAAAq9C,OAAA1d,OAAA02B,EAAAl0B,GAEAniC,KAAAqL,QAAA+uG,OAAA/jD,EAAAn0B,EAAAliC,KAAAq9C,OAAA1d,OAAA02B,EAAAl0B,GAOA,GAHAniC,KAAAqL,QAAAkvG,YACAv6G,KAAAqL,QAAAmvG,OAEA38C,EACA,IAAApkE,EAAA,EAAAA,EAAAojE,EAAAhD,cAAApgE,IACA48D,EAAAwG,EAAAlD,UAAAlgE,GACAklE,EAAA9B,EAAAlD,UAAAlgE,EAAAojE,EAAAhD,cAAA,EAAApgE,EAAA,EAAA,GACAuG,KAAAi6G,SAAA5jD,EAAAsI,IAWA7kB,EAAA2gE,UAAA,SAAAC,GAEA16G,KAAA06G,UAAAA,EACA16G,KAAA26G,aAAA,8BASA7gE,EAAA2gE,UAAAz+G,UAAA49G,SAAA,WAEA,OAAA55G,KAAA06G,UAAAzxF,aAAA,UASA6wB,EAAA2gE,UAAAz+G,UAAA69G,UAAA,WAEA,OAAA75G,KAAA06G,UAAAzxF,aAAA,WAOA6wB,EAAA2gE,UAAAz+G,UAAAw9D,MAAA,WAEA,KAAAx5D,KAAA06G,UAAAvyF,WACAnoB,KAAA06G,UAAAx6F,YAAAlgB,KAAA06G,UAAAvyF,YAWA2xB,EAAA2gE,UAAAz+G,UAAAi+G,SAAA,SAAAhjG,EAAAijC,GAEA,IAAA0gE,EAAAlnG,SAAAmnG,gBAAA76G,KAAA26G,aAAA,QACAh7E,EAAA3/B,KAAA65G,YACAe,EAAAE,eAAA,KAAA,SAAA,SACAF,EAAAE,eAAA,KAAA,KAAA7jG,EAAAirB,GACA04E,EAAAE,eAAA,KAAA,KAAAn7E,EAAA1oB,EAAAkrB,GACAy4E,EAAAE,eAAA,KAAA,KAAA5gE,EAAAhY,GACA04E,EAAAE,eAAA,KAAA,KAAAn7E,EAAAua,EAAA/X,GACAniC,KAAA06G,UAAAn8F,YAAAq8F,IAWA9gE,EAAA2gE,UAAAz+G,UAAAs+G,YAAA,SAAAz9C,EAAAsgB,GASA,IAGA1jF,EAAA48D,EAHA0kD,EAAA,GACAp7E,EAAA3/B,KAAA65G,YAGA,IAAApgH,EAAA,EAAAA,EAAAojE,EAAAhD,cAAApgE,IACA48D,EAAAwG,EAAAlD,UAAAlgE,GACAshH,EAAAA,EAAA1kD,EAAAn0B,EAAA,MAAAvC,EAAA02B,EAAAl0B,GACA1oC,EAAAojE,EAAAhD,cAAA,IACAkhD,GAAA,MAIA,IAnBAlqC,EAEAK,EAiBA8pC,EAAAtnG,SAAAmnG,gBAAA76G,KAAA26G,aAAA,WACAK,EAAAF,eAAA,KAAA,SAAAC,GACAC,EAAAF,eAAA,KAAA,QArBAjqC,EAqBAsM,EAlBA,QADAjM,EAAAp3B,EAAA82B,wBAAAC,IACA,GAAA,IAAAK,EAAA,GAAA,IAAAA,EAAA,GAAA,MAmBA8pC,EAAAF,eAAA,KAAA,eAAA,OACAE,EAAAF,eAAA,KAAA,SAAA,SACA96G,KAAA06G,UAAAn8F,YAAAy8F,IAcAlhE,EAAAmhE,kBAAA,SAAA7lG,EAAAm9D,EAAAghC,EAAA2H,EAAAC,EAAAC,GAEA,SAAAC,EAAAC,EAAA97D,GAEA,IAAA8Q,EAAAxW,EAAAwb,QAAA9V,EAAAqV,EAAA3C,EAAA15B,EAAAu8B,EAAAjb,EAAAsE,OAAA4W,EAAAC,EAAAC,EAAAK,GACA+lD,EAAAllD,UAAA9F,EAAApuB,EAAAouB,EAAAnuB,GAGA,SAAAo5E,EAAA1+C,GAEA,IACApjE,EAAA+lD,EADA87D,EAAA,IAAAxhE,EAAAyf,UAEA,IAAA9/D,EAAA,EAAAA,EAAAojE,EAAAwX,mBAAA56E,IACA+lD,EAAApqC,EAAA2gE,kBAAAlZ,EAAAqW,eAAAz5E,IACA4hH,EAAAC,EAAA97D,GAEA,OAAA87D,EAcAH,GACAC,EAAA5hD,QAGA,IAYA//D,EAAA2J,EAAAy5D,EAAArd,EAAA8Q,EAAAq4B,EAAAxL,EAZAz9C,EAAA07E,EAAAxB,WACAj6E,EAAAy7E,EAAAvB,YAEAhlD,EAAA0+C,EAAA1+C,IACA3C,EAAAqhD,EAAArhD,OACA15B,EAAA+6E,EAAA/6E,GACAu8B,EAAAw+C,EAAAx+C,YACAC,EAAAt1B,EAAAC,EACAs1B,EAAAs+C,EAAAvrB,kBACA9yB,EAAAq+C,EAAAtrB,iBACA1yB,GAAA,EAAA,EAAA71B,EAAAC,GAGA,GAAA,qBAAAu7E,EAAA,CACA,IAAAM,EAAA1hE,EAAA89D,cAAAxiG,EAAAy/C,EAAA3C,GAIA,SAHAp1D,IAAAy1E,GAAA,OAAAA,IACAA,EAAA,IAAAz4B,EAAAw4B,aAEA74E,EAAA,EAAAA,EAAA+hH,EAAAjiH,OAAAE,IACAojE,EAAAznD,EAAAm7D,WAAAirC,EAAA/hH,IACA62D,EAAAirD,EAAA1+C,GACA8rB,EAAA9rB,EAAAwW,mBACA8J,EAAA5K,EAAAI,YAAAgW,GAAA9W,QACAupC,EAAAd,YAAAhqD,EAAA6sB,GAAA,QAEA,GAAA,qBAAA+9B,EAAA,MACAp+G,IAAAy1E,GAAA,OAAAA,IACAA,EAAA,IAAAz4B,EAAAw4B,aAGA,IAAA3G,EAAA,IAAA7xB,EAAA+wB,QACA/wB,EAAAsjC,iBAAAhoE,EAAAu2D,GAEA7xB,EAAA0yB,8BAAAb,EAAA4nC,EAAA1+C,IAAA,SAAA1hD,GACAm9C,EAjDA,SAAAuM,GAEA,IACApjE,EAAA+lD,EADA87D,EAAA,IAAAxhE,EAAAyf,UAEA,IAAA9/D,EAAA,EAAAA,EAAAojE,EAAAhD,cAAApgE,IACA+lD,EAAAqd,EAAAlD,UAAAlgE,GACA4hH,EAAAC,EAAA97D,GAEA,OAAA87D,EAyCAG,CAAAtoG,EAAA0pD,SACAA,EAAAznD,EAAAm7D,WAAAp9D,EAAAupC,SAAAmjB,iBACA8oB,EAAA9rB,EAAAwW,mBACA8J,EAAA5K,EAAAI,YAAAgW,GAAA9W,QACAupC,EAAAd,YAAAhqD,EAAA6sB,GAAA,UAEA,GAAA,yBAAA+9B,EAKA,SAJAp+G,IAAAy1E,GAAA,OAAAA,IACAA,EAAA,IAAAz4B,EAAAw4B,aAGA74E,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IACAojE,EAAAznD,EAAAm7D,WAAA92E,IACA62D,EAAAirD,EAAA1+C,IACAnC,kBAAA5gB,EAAAkK,YAAAE,mBACAykC,EAAA9rB,EAAAwW,mBACA8J,EAAA5K,EAAAI,YAAAgW,GAAA9W,QACAupC,EAAAd,YAAAhqD,EAAA6sB,GAAA,SAGA,GAAA,aAAA+9B,EAAA,CACA,IAAAj/C,EAAAy/C,EAAAj8B,EAAAppB,EACAslD,KACA,IAAAliH,EAAA,EAAAA,EAAA2b,EAAAk7D,eAAA72E,IAKA,IAJAiiH,EAAA,KACAj8B,EAAA,KACA5iB,EAAAznD,EAAAm7D,WAAA92E,GACAwiE,EAAAY,EAAAwX,mBACAjxE,EAAA,EAAAA,GAAA64D,EAAA74D,IACAizD,EAAAwG,EAAAqW,eAAA9vE,EAAA64D,GACAzc,EAAApqC,EAAA2gE,kBAAA1f,GACA/F,EAAAxW,EAAAwb,QAAA9V,EAAAqV,EAAA3C,EAAA15B,EAAAu8B,EAAAjb,EAAAsE,OAAA4W,EAAAC,EAAAC,EAAAK,GACA,OAAAmmD,GAAA,OAAAj8B,QAAA3iF,IAAA6+G,GAAAl8B,EAAAppB,MACA+kD,EAAAnB,SAAAyB,EAAAprD,GACAqrD,GAAAl8B,EAAAppB,KAAA,EACAslD,GAAAtlD,EAAAopB,KAAA,GAEAA,EAAAppB,EACAqlD,EAAAprD,EAKA,OAAA,GAGAxW,IAGA5gD,OAAA,uCAAA,eAAA,SAAA4gD,GAgVA,OA/UAA,EAAA8hE,WAAA,WAEA57G,KAAAq9C,OAAA,KACAr9C,KAAAuzG,OAAA,KACAvzG,KAAA67G,aAAA,KACA77G,KAAA87G,eAAA,KAEA97G,KAAA+7G,MAAA,KACA/7G,KAAA23G,MAAA,KAEA33G,KAAAg8G,YAAA,KACAh8G,KAAAi8G,kBAAA,KACAj8G,KAAAk8G,gBAAA,KACAl8G,KAAAm8G,iBAAA,KACAn8G,KAAAo8G,wBAAA,KACAp8G,KAAAq8G,uBAAA,KAEAr8G,KAAAs8G,YAAA,KACAt8G,KAAAu8G,WAAA,MAGAziE,EAAA8hE,WAAA5/G,UAAA0xG,KAAA,SAAArwD,EAAAk2D,EAAAsI,EAAAC,GAEA97G,KAAAq9C,OAAAA,EACAr9C,KAAAuzG,OAAAA,EACAvzG,KAAA67G,aAAAA,EACA77G,KAAA87G,eAAAA,EAEA97G,KAAA+7G,MAAA,IAAAjiE,EAAA48D,MACA12G,KAAA23G,MAAA,IAAA79D,EAAAy9D,MAEAv3G,KAAAg8G,aAAA,EACAh8G,KAAAi8G,mBAAA,EACAj8G,KAAAk8G,iBAAA,EACAl8G,KAAAm8G,kBAAA,EAEAn8G,KAAAs8G,YAAAt8G,KAAAuzG,OAAArhD,OAAArS,QACA7/C,KAAAu8G,YAAA,EAEA,IAAAjyC,EAAAtqE,KAkBA,OAjBA0T,SAAAmjB,mBACAnjB,SAAAmjB,iBAAA,YAAA,SAAA/lB,GAAAw5D,EAAAkyC,YAAA1rG,KACA4C,SAAAmjB,iBAAA,UAAA,SAAA/lB,GAAAw5D,EAAAmyC,UAAA3rG,MAEA9Q,KAAAq9C,OAAAxmB,mBACA72B,KAAAq9C,OAAAxmB,iBAAA,YAAA,SAAA/lB,GAAAw5D,EAAAoyC,YAAA5rG,KAAA,GACA9Q,KAAAq9C,OAAAxmB,iBAAA,iBAAA,SAAA/lB,GAAAw5D,EAAAqyC,aAAA7rG,KAAA,GACA9Q,KAAAq9C,OAAAxmB,iBAAA,aAAA,SAAA/lB,GAAAw5D,EAAAqyC,aAAA7rG,KAAA,GACA9Q,KAAAq9C,OAAAxmB,iBAAA,aAAA,SAAA/lB,GAAAw5D,EAAAsyC,aAAA9rG,KAAA,GACA9Q,KAAAq9C,OAAAxmB,iBAAA,YAAA,SAAA/lB,GAAAw5D,EAAAuyC,YAAA/rG,KAAA,GACA9Q,KAAAq9C,OAAAxmB,iBAAA,WAAA,SAAA/lB,GAAAw5D,EAAAwyC,WAAAhsG,KAAA,GACA9Q,KAAAq9C,OAAAxmB,iBAAA,cAAA,SAAA/lB,GAAAw5D,EAAAyyC,cAAAjsG,KAAA,IAEA9V,OAAA67B,kBACA77B,OAAA67B,iBAAA,SAAA,SAAA/lB,GAAAw5D,EAAA0yC,SAAAlsG,KAAA,IAGA,GAGAgpC,EAAA8hE,WAAA5/G,UAAAihH,UAAA,SAAApoD,EAAA3C,EAAA15B,GAEAx4B,KAAAuzG,OAAAh0D,IAAAsV,EAAA3C,EAAA15B,GACAx4B,KAAAs8G,YAAAt8G,KAAAuzG,OAAArhD,OAAArS,SAGA/F,EAAA8hE,WAAA5/G,UAAAkhH,YAAA,SAAA5jE,GAEAt5C,KAAAg8G,YAAA1iE,GAGAQ,EAAA8hE,WAAA5/G,UAAAmhH,YAAA,SAAA7jE,GAEAt5C,KAAAi8G,kBAAA3iE,GAGAQ,EAAA8hE,WAAA5/G,UAAAohH,UAAA,SAAA9jE,GAEAt5C,KAAAk8G,gBAAA5iE,GAGAQ,EAAA8hE,WAAA5/G,UAAAqhH,WAAA,SAAA/jE,GAEAt5C,KAAAm8G,iBAAA7iE,GAGAQ,EAAA8hE,WAAA5/G,UAAAshH,qBAAA,SAAAC,GAEAv9G,KAAAo8G,wBAAAmB,GAGAzjE,EAAA8hE,WAAA5/G,UAAAwhH,oBAAA,SAAAD,GAEAv9G,KAAAq8G,uBAAAkB,GAGAzjE,EAAA8hE,WAAA5/G,UAAAyhH,eAAA,SAAAnB,GAEAt8G,KAAAs8G,YAAAA,GAGAxiE,EAAA8hE,WAAA5/G,UAAA0hH,YAAA,SAAAxrD,EAAAxN,GAEA,IAAA5K,EAAAuE,OAAAqG,GAAA,CAIA,IAAAi5D,EAAA7jE,EAAA0I,SAAAxiD,KAAAuzG,OAAArhD,OAAAA,GACAlyD,KAAAuzG,OAAArhD,OAAAA,EACAlyD,KAAAuzG,OAAA1+C,IAAA/a,EAAA0I,SAAAxiD,KAAAuzG,OAAA1+C,IAAA8oD,GAEA,IAAAC,EAAA9jE,EAAA0I,SAAAxiD,KAAAuzG,OAAA1+C,IAAA70D,KAAAuzG,OAAArhD,QAAApS,YACAiV,EAAA/0D,KAAAuzG,OAAAx+C,YAAA,EACA/0D,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,SACAo1B,EAAAA,EAAA/0D,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,QAEA,IAAA8gB,EAAAiE,EAAAr7C,KAAA23C,IAAA+T,EAAAjb,EAAAsE,QAEAp+C,KAAAuzG,OAAA1+C,IAAA70D,KAAAuzG,OAAArhD,OAAArS,QAAAU,OAAAq9D,EAAAn9D,GACAzgD,KAAAs8G,YAAAt8G,KAAAuzG,OAAArhD,OAAArS,UAGA/F,EAAA8hE,WAAA5/G,UAAA6hH,cAAA,SAAAtB,GAEAv8G,KAAAu8G,WAAAA,EACAv8G,KAAA89G,kBAGAhkE,EAAA8hE,WAAA5/G,UAAA+hH,MAAA,SAAAC,EAAAC,GAEA,IAAAC,EAAAF,EAAAlkE,EAAAsE,OACA+/D,EAAAF,EAAAnkE,EAAAsE,OAEAk7D,EAAAx/D,EAAA0I,SAAAxiD,KAAAuzG,OAAArhD,OAAAlyD,KAAAuzG,OAAA1+C,KAAA/U,YACAs+D,EAAAtkE,EAAAqI,YAAAm3D,EAAAt5G,KAAAuzG,OAAA/6E,IAAAsnB,YACAu+D,GAAAr+G,KAAAs8G,YAAA59D,QAAA1+C,KAAAuzG,OAAArhD,QAEA,GAAAlyD,KAAAg8G,YAAA,CACA,IAAAsC,EAAAhF,EAAA35D,QAAA3/C,KAAAuzG,OAAA/6E,IACA+lF,EAAAD,EAAAH,EACArkE,EAAA2E,UAAA8/D,EAAA,IAAAzkE,EAAA0E,QAAA+/D,EAAAl1G,KAAA61C,MACAl/C,KAAAuzG,OAAA1+C,IAAAnU,OAAA09D,GAAAD,EAAAn+G,KAAAs8G,aACA+B,GACAr+G,KAAAuzG,OAAArhD,OAAAxR,OAAA09D,GAAAD,EAAAn+G,KAAAs8G,cAGAt8G,KAAAuzG,OAAA1+C,IAAAnU,OAAA1gD,KAAAuzG,OAAA/6E,IAAA0lF,EAAAl+G,KAAAs8G,aACA+B,GACAr+G,KAAAuzG,OAAArhD,OAAAxR,OAAA1gD,KAAAuzG,OAAA/6E,IAAA0lF,EAAAl+G,KAAAs8G,iBAEA,CACA,IAAAkC,EAAA1kE,EAAAqI,YAAAi8D,EAAA9E,GAAAx5D,YACA9/C,KAAAuzG,OAAA1+C,IAAAnU,OAAA09D,GAAAD,EAAAn+G,KAAAs8G,aACAt8G,KAAAuzG,OAAA1+C,IAAAnU,OAAA89D,GAAAN,EAAAl+G,KAAAs8G,aACA+B,IACAr+G,KAAAuzG,OAAArhD,OAAAxR,OAAA09D,GAAAD,EAAAn+G,KAAAs8G,aACAt8G,KAAAuzG,OAAArhD,OAAAxR,OAAA89D,GAAAN,EAAAl+G,KAAAs8G,cAEAt8G,KAAAuzG,OAAA/6E,GAAAgmF,IAIA1kE,EAAA8hE,WAAA5/G,UAAAyiH,IAAA,SAAAC,EAAAC,GAEA,IAAArF,EAAAx/D,EAAA0I,SAAAxiD,KAAAuzG,OAAArhD,OAAAlyD,KAAAuzG,OAAA1+C,KAAA/U,YACAs+D,EAAAtkE,EAAAqI,YAAAm3D,EAAAt5G,KAAAuzG,OAAA/6E,IAAAsnB,YACA0+D,EAAA1kE,EAAAqI,YAAAi8D,EAAA9E,GAAAx5D,YAEA9/C,KAAAuzG,OAAA1+C,IAAAtU,OAAA69D,GAAAM,GACA1+G,KAAAuzG,OAAArhD,OAAA3R,OAAA69D,GAAAM,GAEA1+G,KAAAuzG,OAAA1+C,IAAAtU,OAAAi+D,EAAAG,GACA3+G,KAAAuzG,OAAArhD,OAAA3R,OAAAi+D,EAAAG,IAGA7kE,EAAA8hE,WAAA5/G,UAAA4iH,KAAA,SAAAC,GAEA,IAAAr+D,EAAA1G,EAAA0I,SAAAxiD,KAAAuzG,OAAArhD,OAAAlyD,KAAAuzG,OAAA1+C,KACApU,EAAAD,EAAAN,SACA4+D,EAAAD,EAAA,EACA,GAAAC,GAAA,OAAA9+G,KAAAo8G,yBAAA37D,EAAAzgD,KAAAo8G,wBACA,OAAA,EACA,IAAA0C,GAAA,OAAA9+G,KAAAq8G,wBAAA57D,EAAAzgD,KAAAq8G,uBACA,OAAA,EAGA,IAAA0C,EAAAt+D,EAAAo+D,EACA7+G,KAAAuzG,OAAA1+C,IAAAtU,OAAAC,EAAAu+D,IAGAjlE,EAAA8hE,WAAA5/G,UAAAgjH,aAAA,gBAEAliH,IAAAkD,KAAA67G,cAAA,OAAA77G,KAAA67G,cACA77G,KAAA67G,gBAIA/hE,EAAA8hE,WAAA5/G,UAAA8hH,eAAA,gBAEAhhH,IAAAkD,KAAA87G,gBAAA,OAAA97G,KAAA87G,iBACA97G,KAAAu8G,aACAv8G,KAAAq9C,OAAA3d,MAAA1kC,OAAAwmC,WACAxhC,KAAAq9C,OAAA1d,OAAA3kC,OAAAymC,aAEAzhC,KAAA87G,mBAIAhiE,EAAA8hE,WAAA5/G,UAAA0gH,YAAA,SAAA5rG,GAEAA,EAAAggB,iBACA9wB,KAAA+7G,MAAApF,KAAA7lG,EAAA9Q,KAAAq9C,SAGAvD,EAAA8hE,WAAA5/G,UAAAwgH,YAAA,SAAA1rG,GAIA,GAFAA,EAAAggB,iBACA9wB,KAAA+7G,MAAAhF,KAAAjmG,EAAA9Q,KAAAq9C,QACAr9C,KAAA+7G,MAAAjkF,KAAA,CAIA,IAAA+mF,EAAA,EACA,GAAA,GAAA7+G,KAAA+7G,MAAAl2F,OAAA,CACA,IAAA7lB,KAAAi8G,kBACA,OAEA4C,EAAA,GACA7+G,KAAA+9G,MAAA/9G,KAAA+7G,MAAAjjG,KAAAopB,EAAA28E,EAAA7+G,KAAA+7G,MAAAjjG,KAAAqpB,EAAA08E,QACA,GAAA,GAAA7+G,KAAA+7G,MAAAl2F,OAAA,CACA,IAAA7lB,KAAAk8G,gBACA,OAEA,IAAA+C,EAAAj/G,KAAAuzG,OAAA1+C,IAAApV,WAAAz/C,KAAAuzG,OAAArhD,QACA2sD,EAAA,KAAAI,EACAj/G,KAAAy+G,IAAAz+G,KAAA+7G,MAAAjjG,KAAAopB,EAAA28E,EAAA7+G,KAAA+7G,MAAAjjG,KAAAqpB,EAAA08E,GAEA7+G,KAAAg/G,iBAGAllE,EAAA8hE,WAAA5/G,UAAAygH,UAAA,SAAA3rG,GAEAA,EAAAggB,iBACA9wB,KAAA+7G,MAAA/E,GAAAlmG,EAAA9Q,KAAAq9C,SAGAvD,EAAA8hE,WAAA5/G,UAAAkjH,WAAA,SAAApuG,GAEAA,EAAAggB,iBACA9wB,KAAA+7G,MAAA9E,IAAAnmG,EAAA9Q,KAAAq9C,SAGAvD,EAAA8hE,WAAA5/G,UAAA2gH,aAAA,SAAA7rG,GAGA,GADAA,EAAAggB,iBACA9wB,KAAAm8G,iBAAA,CAIA,IAAAvF,EAAA9lG,EACA,OAAA8lG,IACAA,EAAA57G,OAAA8V,OAGA,IAAAquG,EAAA,EACAvI,EAAAwI,OACAD,GAAAvI,EAAAwI,OACAxI,EAAAyI,aACAF,EAAAvI,EAAAyI,WAAA,IAGA,IAAAR,EAAA,GACAM,EAAA,IACAN,IAAA,GAGA7+G,KAAA4+G,KAAAC,GACA7+G,KAAAg/G,iBAGAllE,EAAA8hE,WAAA5/G,UAAA4gH,aAAA,SAAA9rG,GAEAA,EAAAggB,iBACA9wB,KAAA23G,MAAAv8D,MAAAtqC,EAAA9Q,KAAAq9C,SAGAvD,EAAA8hE,WAAA5/G,UAAA6gH,YAAA,SAAA/rG,GAIA,GAFAA,EAAAggB,iBACA9wB,KAAA23G,MAAAZ,KAAAjmG,EAAA9Q,KAAAq9C,QACAr9C,KAAA23G,MAAA7/E,KAAA,CAIA,IAAA+mF,EAAA,EACA,GAAA,GAAA7+G,KAAA23G,MAAAH,QAAA,CACA,IAAAx3G,KAAAi8G,kBACA,OAEA4C,EAAA,GACA7+G,KAAA+9G,MAAA/9G,KAAA23G,MAAA7+F,KAAAopB,EAAA28E,EAAA7+G,KAAA23G,MAAA7+F,KAAAqpB,EAAA08E,QACA,GAAA,GAAA7+G,KAAA23G,MAAAH,QAAA,CACA,IAAAx3G,KAAAm8G,iBACA,OAEA0C,EAAA,KACA7+G,KAAA4+G,KAAA5+G,KAAA23G,MAAA7+F,KAAAopB,EAAA28E,QACA,GAAA,GAAA7+G,KAAA23G,MAAAH,QAAA,CACA,IAAAx3G,KAAAk8G,gBACA,OAEA,IAAA+C,EAAAj/G,KAAAuzG,OAAA1+C,IAAApV,WAAAz/C,KAAAuzG,OAAArhD,QACA2sD,EAAA,KAAAI,EACAj/G,KAAAy+G,IAAAz+G,KAAA23G,MAAA7+F,KAAAopB,EAAA28E,EAAA7+G,KAAA23G,MAAA7+F,KAAAqpB,EAAA08E,GAEA7+G,KAAAg/G,iBAGAllE,EAAA8hE,WAAA5/G,UAAA8gH,WAAA,SAAAhsG,GAEAA,EAAAggB,iBACA9wB,KAAA23G,MAAAjkB,IAAA5iF,EAAA9Q,KAAAq9C,SAGAvD,EAAA8hE,WAAA5/G,UAAA+gH,cAAA,SAAAjsG,GAEAA,EAAAggB,kBAGAgpB,EAAA8hE,WAAA5/G,UAAAghH,SAAA,SAAAlsG,GAEAA,EAAAggB,iBACA9wB,KAAA89G,kBAGAhkE,IAGA5gD,OAAA,2CAAA,eAAA,SAAA4gD,GAiJA,OAhJAA,EAAAwlE,eAAA,WAEAt/G,KAAAq9C,OAAA,KACAr9C,KAAAuzG,OAAA,KACAvzG,KAAA83E,OAAA,KACA93E,KAAAo7G,OAAA,KACAp7G,KAAAk7G,SAAA,KACAl7G,KAAAu/G,WAAA,MAGAzlE,EAAAwlE,eAAAtjH,UAAAo/C,MAAA,SAAAiC,EAAAk2D,GAEA,QAAAvzG,KAAAw/G,WAAAniE,MAIAr9C,KAAAy/G,WAAAlM,IAOAz5D,EAAAwlE,eAAAtjH,UAAAwjH,WAAA,SAAAniE,GAIA,OAFAr9C,KAAA83E,UACA93E,KAAAq9C,OAAAA,IACAr9C,KAAAq9C,SAIAr9C,KAAAq9C,kBAAA,kBACAr9C,KAAAo7G,OAAA,IAAAthE,EAAA6/D,aAAA35G,KAAAq9C,QACAr9C,KAAAq9C,kBAAA,gBACAr9C,KAAAo7G,OAAA,IAAAthE,EAAA2gE,UAAAz6G,KAAAq9C,WAGAr9C,KAAAo7G,SAIAp7G,KAAAk7G,SAAA,aACA,KAGAphE,EAAAwlE,eAAAtjH,UAAAyjH,WAAA,SAAAlM,GAGA,OADAvzG,KAAAuzG,OAAAz5D,EAAAU,eAAA+4D,EAAA,IAAAz5D,EAAAiuC,UACA/nF,KAAAuzG,SAIAvzG,KAAAu/G,WAAA,IAAAzlE,EAAA8hE,aACA57G,KAAAu/G,WAAA7R,KAAA1tG,KAAAq9C,OAAAr9C,KAAAuzG,OAAAvzG,KAAA0/G,KAAAnwG,KAAAvP,MAAAA,KAAAqzG,OAAA9jG,KAAAvP,SAOA85C,EAAAwlE,eAAAtjH,UAAA+7E,QAAA,SAAA3iE,EAAAm9D,GAEAvyE,KAAA83E,OAAA94E,MAAAoW,EAAAm9D,KAGAz4B,EAAAwlE,eAAAtjH,UAAAo3G,aAAA,WAEApzG,KAAA83E,WAGAh+B,EAAAwlE,eAAAtjH,UAAA0hH,YAAA,WAEA,IAAAiC,EAAA3/G,KAAAs3E,oBACAt3E,KAAAu/G,WAAA7B,YAAAiC,EAAAjuD,YAAAiuD,EAAAxtD,aACAnyD,KAAA0/G,QAGA5lE,EAAAwlE,eAAAtjH,UAAA01D,UAAA,WAEA,IAAA0L,EAAAp9D,KAAAm9D,iBACA,OAAAC,EAAA1L,aAGA5X,EAAAwlE,eAAAtjH,UAAAmhE,eAAA,WAEA,IAGA1jE,EAAA2J,EAAAgS,EAAAihD,EAHAvI,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAoE,IAAApE,EAAAoE,IAAApE,EAAAoE,KACA5yB,EAAA,IAAAwuB,EAAAyH,OAAAzH,EAAAoE,KAAApE,EAAAoE,KAAApE,EAAAoE,KAGA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IAEA,IADA2b,EAAApV,KAAA83E,OAAAr+E,GAAA,GACA2J,EAAA,EAAAA,EAAAgS,EAAAykD,cAAAz2D,IACAizD,EAAAjhD,EAAAukD,UAAAv2D,GACA0qD,EAAA5rB,EAAA4X,EAAAiF,QAAA+O,EAAA5rB,EAAAm0B,EAAAv0C,SAAAogB,GACA4rB,EAAA3rB,EAAA2X,EAAAiF,QAAA+O,EAAA3rB,EAAAk0B,EAAAv0C,SAAAqgB,GACA2rB,EAAAtM,EAAA1H,EAAAiF,QAAA+O,EAAAtM,EAAA6U,EAAAv0C,SAAA0/B,GACAl2B,EAAA4W,EAAA4X,EAAAkF,QAAA1zB,EAAA4W,EAAAm0B,EAAAv0C,SAAAogB,GACA5W,EAAA6W,EAAA2X,EAAAkF,QAAA1zB,EAAA6W,EAAAk0B,EAAAv0C,SAAAqgB,GACA7W,EAAAk2B,EAAA1H,EAAAkF,QAAA1zB,EAAAk2B,EAAA6U,EAAAv0C,SAAA0/B,GAIA,OAAA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IAGAwuB,EAAAwlE,eAAAtjH,UAAAs7E,kBAAA,WAEA,IAGA79E,EAAA2J,EAAAgS,EAAAihD,EAAA5V,EAHAyR,EAAAlyD,KAAA0xD,YACAhN,EAAA,EAGA,IAAAjrD,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IAEA,IADA2b,EAAApV,KAAA83E,OAAAr+E,GAAA,GACA2J,EAAA,EAAAA,EAAAgS,EAAAykD,cAAAz2D,IACAizD,EAAAjhD,EAAAukD,UAAAv2D,GACAq9C,EAAAyR,EAAAzS,WAAA4W,EAAAv0C,UACAg4B,EAAA2E,UAAAgC,EAAAiE,KACAA,EAAAjE,GAKA,IAAAk/D,EAAA,IAAA7lE,EAAAmY,OAAAC,EAAAxN,GACA,OAAAi7D,GAGA7lE,EAAAwlE,eAAAtjH,UAAAq3G,OAAA,WAEArzG,KAAA0/G,QAGA5lE,EAAAwlE,eAAAtjH,UAAA0jH,KAAA,WAEA,IAAAjmH,EAAAmmH,EAGA,IAFA5/G,KAAAo7G,OAAA5hD,QAEA//D,EAAA,EAAAA,EAAAuG,KAAA83E,OAAAv+E,OAAAE,IACAmmH,EAAA5/G,KAAA83E,OAAAr+E,GACAqgD,EAAAmhE,kBAAA2E,EAAA,GAAAA,EAAA,GAAA5/G,KAAAuzG,OAAAvzG,KAAAk7G,UAAA,EAAAl7G,KAAAo7G,QAGA,OAAA,GAGAthE,IAGA5gD,OAAA,yCAAA,eAAA,SAAA4gD,GA4MA,OA3MAA,EAAA+lE,aAAA,WAEA7/G,KAAAq9C,OAAA,KACAr9C,KAAAuzG,OAAA,KACAvzG,KAAAw8C,UAAA,KACAx8C,KAAA4tE,OAAA,KACA5tE,KAAAswD,UAAA,KACAtwD,KAAAu/G,WAAA,MAGAzlE,EAAA+lE,aAAA7jH,UAAAo/C,MAAA,SAAAiC,EAAAk2D,EAAA/2D,GAEA,QAAAx8C,KAAAw/G,WAAAniE,OAIAr9C,KAAAy/G,WAAAlM,MAIAvzG,KAAA8/G,cAAAtjE,KAOA1C,EAAA+lE,aAAA7jH,UAAAwjH,WAAA,SAAAniE,GAIA,OAFAr9C,KAAA4tE,UACA5tE,KAAAq9C,OAAAA,IACAr9C,KAAAq9C,QAOAvD,EAAA+lE,aAAA7jH,UAAAyjH,WAAA,SAAAlM,GAGA,OADAvzG,KAAAuzG,OAAAz5D,EAAAU,eAAA+4D,EAAA,IAAAz5D,EAAAiuC,UACA/nF,KAAAuzG,SAIAvzG,KAAAu/G,WAAA,IAAAzlE,EAAA8hE,aACA57G,KAAAu/G,WAAA7R,KAAA1tG,KAAAq9C,OAAAr9C,KAAAuzG,OAAAvzG,KAAA0/G,KAAAnwG,KAAAvP,SAOA85C,EAAA+lE,aAAA7jH,UAAA8jH,cAAA,SAAAtjE,GAYA,OAVAx8C,KAAAw8C,WACAujE,YAAA,WAGAjjH,IAAA0/C,SACA1/C,IAAA0/C,EAAAwjE,cAAAhgH,KAAAw8C,UAAAwjE,YAAAxjE,EAAAwjE,kBACAljH,IAAA0/C,EAAAujE,cAAA//G,KAAAw8C,UAAAujE,YAAAvjE,EAAAujE,kBACAjjH,IAAA0/C,EAAAyjE,YAAAjgH,KAAAw8C,UAAAyjE,UAAAzjE,EAAAyjE,aAGA,GAGAnmE,EAAA+lE,aAAA7jH,UAAA45E,SAAA,SAAA/H,GAEA7tE,KAAA4tE,OAAA5uE,KAAA6uE,IAGA/zB,EAAA+lE,aAAA7jH,UAAAg5G,aAAA,WAEAh1G,KAAA4tE,WAGA9zB,EAAA+lE,aAAA7jH,UAAAq3G,OAAA,WAEArzG,KAAA0/G,QAGA5lE,EAAA+lE,aAAA7jH,UAAAkkH,0BAAA,SAAAlH,EAAA92E,EAAAC,GAEA,IAIA1oC,EAAA62D,EAAA7P,EAJA3+B,EAAA,IAAAg4B,EAAAwF,QAAApd,EAAAC,GAEA8zB,GAAA,EACA8iD,EAAAj/D,EAAAoE,IAEA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAAswD,UAAA/2D,OAAAE,IACA62D,EAAAtwD,KAAAswD,UAAA72D,GACAgnD,EAAA3+B,EAAA29B,WAAA,IAAA3F,EAAAwF,QAAAgR,EAAAxuC,SAAAogB,EAAAouB,EAAAxuC,SAAAqgB,IACA2X,EAAA0E,QAAAiC,EAAAu4D,IAAAl/D,EAAA0E,QAAAiC,EAAAs4D,KACA9iD,EAAA3F,EAAAwQ,cACAi4C,EAAAt4D,GAIA,OAAAwV,GAGAnc,EAAA+lE,aAAA7jH,UAAAmkH,uBAAA,SAAAnH,GAEA,OAAAh5G,KAAAkgH,0BAAAlH,EAAAh5G,KAAAu/G,WAAAxD,MAAA3hD,KAAAl4B,EAAAliC,KAAAu/G,WAAAxD,MAAA3hD,KAAAj4B,IAGA2X,EAAA+lE,aAAA7jH,UAAAokH,uBAAA,SAAApH,GAEA,OAAAh5G,KAAAkgH,0BAAAlH,EAAAh5G,KAAAu/G,WAAA5H,MAAAv9C,KAAAl4B,EAAAliC,KAAAu/G,WAAA5H,MAAAv9C,KAAAj4B,IAGA2X,EAAA+lE,aAAA7jH,UAAA0hH,YAAA,WAEA,IAAAiC,EAAA3/G,KAAAs3E,oBACAt3E,KAAAu/G,WAAA7B,YAAAiC,EAAAjuD,YAAAiuD,EAAAxtD,aACAnyD,KAAA0/G,QAGA5lE,EAAA+lE,aAAA7jH,UAAA01D,UAAA,WAEA,IAAA0L,EAAAp9D,KAAAm9D,iBACA,OAAAC,EAAA1L,aAGA5X,EAAA+lE,aAAA7jH,UAAAmhE,eAAA,WAEA,IAGA1jE,EAAA+lD,EAHAsO,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAoE,IAAApE,EAAAoE,IAAApE,EAAAoE,KACA5yB,EAAA,IAAAwuB,EAAAyH,OAAAzH,EAAAoE,KAAApE,EAAAoE,KAAApE,EAAAoE,KAGA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,IACA+lD,EAAAx/C,KAAA4tE,OAAAn0E,GACAq0D,EAAA5rB,EAAA4X,EAAAiF,QAAA+O,EAAA5rB,EAAAsd,EAAAtd,GACA4rB,EAAA3rB,EAAA2X,EAAAiF,QAAA+O,EAAA3rB,EAAAqd,EAAArd,GACA2rB,EAAAtM,EAAA1H,EAAAiF,QAAA+O,EAAAtM,EAAAhC,EAAAgC,GACAl2B,EAAA4W,EAAA4X,EAAAkF,QAAA1zB,EAAA4W,EAAAsd,EAAAtd,GACA5W,EAAA6W,EAAA2X,EAAAkF,QAAA1zB,EAAA6W,EAAAqd,EAAArd,GACA7W,EAAAk2B,EAAA1H,EAAAkF,QAAA1zB,EAAAk2B,EAAAhC,EAAAgC,GAGA,OAAA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IAGAwuB,EAAA+lE,aAAA7jH,UAAAs7E,kBAAA,WAEA,IAGA79E,EAAA+lD,EAAAiB,EAHAyR,EAAAlyD,KAAA0xD,YACAhN,EAAA,EAGA,IAAAjrD,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,IACA+lD,EAAAx/C,KAAA4tE,OAAAn0E,GACAgnD,EAAAyR,EAAAzS,WAAAD,GACA1F,EAAA2E,UAAAgC,EAAAiE,KACAA,EAAAjE,GAIA,IAAAk/D,EAAA,IAAA7lE,EAAAmY,OAAAC,EAAAxN,GACA,OAAAi7D,GAGA7lE,EAAA+lE,aAAA7jH,UAAA0jH,KAAA,WAEA,OAAA1/G,KAAAw8C,UAAAwjE,aACAhgH,KAAAw8C,UAAAwjE,YAAAhgH,KAAAq9C,QAGA,IAIA5jD,EAAA+lD,EAAA8Q,EAJA0E,EAAAh1D,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,OACA41B,GAAA,EAAA,EAAAv1D,KAAAq9C,OAAA3d,MAAA1/B,KAAAq9C,OAAA1d,QAIA,IAHA3/B,KAAAswD,aAGA72D,EAAA,EAAAA,EAAAuG,KAAA4tE,OAAAr0E,OAAAE,IACA+lD,EAAAx/C,KAAA4tE,OAAAn0E,IACA62D,EAAAxW,EAAAwb,QAAA9V,EAAAx/C,KAAAuzG,OAAA1+C,IAAA70D,KAAAuzG,OAAArhD,OAAAlyD,KAAAuzG,OAAA/6E,GAAAx4B,KAAAuzG,OAAAx+C,YAAAjb,EAAAsE,OAAA4W,EAAAh1D,KAAAuzG,OAAAvrB,kBAAAhoF,KAAAuzG,OAAAtrB,iBAAA1yB,IACApzB,EAAAniC,KAAAq9C,OAAA1d,OAAA2wB,EAAAnuB,EACA,OAAAmuB,GACAtwD,KAAAswD,UAAAtxD,MAAA8iB,SAAAwuC,EAAAwQ,cAAArnE,IAaA,IATAuG,KAAAswD,UAAAhoD,KAAA,SAAApI,EAAAC,GACA,OAAAD,EAAA4hB,SAAA0/B,EAAArhD,EAAA2hB,SAAA0/B,GACA,EACAthD,EAAA4hB,SAAA0/B,EAAArhD,EAAA2hB,SAAA0/B,EACA,EAEA,IAGA/nD,EAAA,EAAAA,EAAAuG,KAAAswD,UAAA/2D,OAAAE,IACA,OAAAuG,KAAAw8C,UAAAujE,aACA//G,KAAAw8C,UAAAujE,YAAA//G,KAAAq9C,OAAAr9C,KAAAswD,UAAA72D,GAAAqnE,cAAA9gE,KAAAswD,UAAA72D,GAAAqoB,UAOA,OAHA,OAAA9hB,KAAAw8C,UAAAyjE,WACAjgH,KAAAw8C,UAAAyjE,UAAAjgH,KAAAq9C,SAEA,GAGAvD,IAGA5gD,OAAA,mCAAA,eAAA,SAAA4gD,GA2NA,OA1NAA,EAAAumE,OAAA,WAEArgH,KAAAuzG,OAAA,KACAvzG,KAAA+zG,SAAA,KACA/zG,KAAAu/G,WAAA,KACAv/G,KAAAsgH,YAAA,MAGAxmE,EAAAumE,OAAArkH,UAAA0xG,KAAA,SAAArwD,EAAAk2D,GAEA,QAAAvzG,KAAAugH,aAAAljE,OAIAr9C,KAAAwgH,eAAAjN,MAIAvzG,KAAAwyG,eAOA14D,EAAAumE,OAAArkH,UAAAmjE,MAAA,WAEAn/D,KAAAozG,eACApzG,KAAA8yG,eACA9yG,KAAA2yG,gBAAA,IAAA74D,EAAAswD,mBAAA,UACApqG,KAAAygH,qBAGA3mE,EAAAumE,OAAArkH,UAAAukH,aAAA,SAAAljE,GAGA,OADAr9C,KAAA+zG,SAAA,IAAAj6D,EAAAu4D,WACAryG,KAAA+zG,SAAArG,KAAArwD,IAMAvD,EAAAumE,OAAArkH,UAAAwkH,eAAA,SAAAjN,GAGA,OADAvzG,KAAAuzG,OAAAz5D,EAAAU,eAAA+4D,EAAA,IAAAz5D,EAAAiuC,UACA/nF,KAAAuzG,SAIAvzG,KAAAu/G,WAAA,IAAAzlE,EAAA8hE,aACA57G,KAAAu/G,WAAA7R,KAAA1tG,KAAA+zG,SAAA12D,OAAAr9C,KAAAuzG,OAAAvzG,KAAA0/G,KAAAnwG,KAAAvP,MAAAA,KAAAqzG,OAAA9jG,KAAAvP,SAOA85C,EAAAumE,OAAArkH,UAAAw2G,WAAA,WAIA,OAFAxyG,KAAA2yG,gBAAA,IAAA74D,EAAAswD,mBAAA,UACApqG,KAAAygH,qBACA,GAGA3mE,EAAAumE,OAAArkH,UAAA02G,cAAA,SAAArhC,EAAAC,EAAAC,GAEAvxE,KAAA+zG,SAAArB,cAAArhC,EAAAC,EAAAC,IAGAz3B,EAAAumE,OAAArkH,UAAAykH,kBAAA,WAEA,OAAAzgH,KAAAsgH,cAGAtgH,KAAAsgH,YAAA,IAAAxmE,EAAAuwD,uBAAA,QAAA,SAAA,IAAAvwD,EAAAoI,OAAA,EAAA,EAAA,IACAliD,KAAA4yG,SAAA5yG,KAAAsgH,eAGAxmE,EAAAumE,OAAArkH,UAAA0kH,mBAAA,WAEA,OAAA1gH,KAAAsgH,cAGAtgH,KAAA6yG,YAAA7yG,KAAAsgH,aACAtgH,KAAAsgH,YAAA,OAGAxmE,EAAAumE,OAAArkH,UAAA2kH,eAAA,WAEA,OAAA3gH,KAAAsgH,aAGAxmE,EAAAumE,OAAArkH,UAAA22G,gBAAA,SAAAtB,GAEArxG,KAAA+zG,SAAApB,gBAAAtB,IAGAv3D,EAAAumE,OAAArkH,UAAA42G,SAAA,SAAAvB,GAEArxG,KAAA+zG,SAAAnB,SAAAvB,IAGAv3D,EAAAumE,OAAArkH,UAAA62G,YAAA,SAAAxB,GAEArxG,KAAA+zG,SAAAlB,YAAAxB,IAGAv3D,EAAAumE,OAAArkH,UAAA82G,aAAA,WAEA9yG,KAAA+zG,SAAAjB,eACA9yG,KAAAsgH,YAAA,MAGAxmE,EAAAumE,OAAArkH,UAAA+7E,QAAA,SAAAg7B,GAEA/yG,KAAA+zG,SAAAh8B,QAAAg7B,EAAA/yG,KAAA0/G,KAAAnwG,KAAAvP,QAGA85C,EAAAumE,OAAArkH,UAAAg8E,UAAA,SAAAg7B,GAEAhzG,KAAA+zG,SAAA/7B,UAAAg7B,EAAAhzG,KAAA0/G,KAAAnwG,KAAAvP,QAGA85C,EAAAumE,OAAArkH,UAAAm3G,WAAA,SAAA/9F,GAEApV,KAAA+zG,SAAAZ,WAAA/9F,IAGA0kC,EAAAumE,OAAArkH,UAAAo3G,aAAA,WAEApzG,KAAA+zG,SAAAX,gBAGAt5D,EAAAumE,OAAArkH,UAAA0hH,YAAA,WAEA,IAAAiC,EAAA3/G,KAAAs3E,oBACAt3E,KAAAu/G,WAAA7B,YAAAiC,EAAAjuD,YAAAiuD,EAAAxtD,cAGArY,EAAAumE,OAAArkH,UAAA6hH,cAAA,SAAAtB,GAEAv8G,KAAAu/G,WAAA1B,cAAAtB,IAGAziE,EAAAumE,OAAArkH,UAAA01D,UAAA,WAEA,IAAA0L,EAAAp9D,KAAAm9D,iBACA,OAAAC,EAAA1L,aAGA5X,EAAAumE,OAAArkH,UAAAmhE,eAAA,WAEA,IAAArP,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAoE,IAAApE,EAAAoE,IAAApE,EAAAoE,KACA5yB,EAAA,IAAAwuB,EAAAyH,OAAAzH,EAAAoE,KAAApE,EAAAoE,KAAApE,EAAAoE,KAkBA,OAhBAl+C,KAAA+zG,SAAAd,gBAAA,SAAA79F,GACA,IAAAs9C,EAAAt9C,EAAA03F,oBACA13F,EAAAi3F,gBAAA,SAAAvc,GACA,IAAAr2F,EAAA48D,EACA,IAAA58D,EAAA,EAAAA,EAAAq2F,EAAAj2B,cAAApgE,IACA48D,EAAAy5B,EAAAoc,qBAAAzyG,EAAAi5D,GACA5E,EAAA5rB,EAAA4X,EAAAiF,QAAA+O,EAAA5rB,EAAAm0B,EAAAn0B,GACA4rB,EAAA3rB,EAAA2X,EAAAiF,QAAA+O,EAAA3rB,EAAAk0B,EAAAl0B,GACA2rB,EAAAtM,EAAA1H,EAAAiF,QAAA+O,EAAAtM,EAAA6U,EAAA7U,GACAl2B,EAAA4W,EAAA4X,EAAAkF,QAAA1zB,EAAA4W,EAAAm0B,EAAAn0B,GACA5W,EAAA6W,EAAA2X,EAAAkF,QAAA1zB,EAAA6W,EAAAk0B,EAAAl0B,GACA7W,EAAAk2B,EAAA1H,EAAAkF,QAAA1zB,EAAAk2B,EAAA6U,EAAA7U,OAKA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IAGAwuB,EAAAumE,OAAArkH,UAAAs7E,kBAAA,WAEA,IAAAplB,EAAAlyD,KAAA0xD,YACAhN,EAAA,EAEA1kD,KAAA+zG,SAAAd,gBAAA,SAAA79F,GACA,IAAAs9C,EAAAt9C,EAAA03F,oBACA13F,EAAAi3F,gBAAA,SAAAvc,GACA,IAAAr2F,EAAA48D,EAAA5V,EACA,IAAAhnD,EAAA,EAAAA,EAAAq2F,EAAAj2B,cAAApgE,IACA48D,EAAAy5B,EAAAoc,qBAAAzyG,EAAAi5D,GACAjS,EAAAyR,EAAAzS,WAAA4W,GACAvc,EAAA2E,UAAAgC,EAAAiE,KACAA,EAAAjE,OAMA,IAAAk/D,EAAA,IAAA7lE,EAAAmY,OAAAC,EAAAxN,GACA,OAAAi7D,GAGA7lE,EAAAumE,OAAArkH,UAAAs3G,YAAA,SAAAE,EAAAC,GAEA,OAAAzzG,KAAA+zG,SAAAT,YAAAtzG,KAAAuzG,OAAAC,EAAAC,IAGA35D,EAAAumE,OAAArkH,UAAAq3G,OAAA,WAEArzG,KAAA+zG,SAAAV,SACArzG,KAAA0/G,QAGA5lE,EAAAumE,OAAArkH,UAAA0jH,KAAA,WAEA,IAAAnM,EAAAvzG,KAAAuzG,OACA+M,EAAAtgH,KAAA2gH,iBACA,OAAAL,IACAA,EAAA9/D,UAAA1G,EAAA0I,SAAA+wD,EAAArhD,OAAAqhD,EAAA1+C,KAAA/U,aAEA9/C,KAAA+zG,SAAAF,OAAAN,IAGAz5D,IAGA5gD,OAAA,6CAAA,eAAA,SAAA4gD,GA8HA,OA7HAA,EAAA8mE,iBAAA,WAEA5gH,KAAAq9C,OAAA,KACAr9C,KAAA+zG,SAAA,KACA/zG,KAAAu/G,WAAA,MAGAzlE,EAAA8mE,iBAAA5kH,UAAA0xG,KAAA,SAAArwD,EAAAk2D,GAEA,QAAAvzG,KAAAugH,aAAAljE,EAAAk2D,MAIAvzG,KAAAwgH,kBAOA1mE,EAAA8mE,iBAAA5kH,UAAAukH,aAAA,SAAAljE,EAAAk2D,GAGA,OADAvzG,KAAA+zG,SAAA,IAAAj6D,EAAAu6D,qBACAr0G,KAAA+zG,SAAArG,KAAArwD,EAAAk2D,IAMAz5D,EAAA8mE,iBAAA5kH,UAAAwkH,eAAA,WAGA,OADAxgH,KAAAu/G,WAAA,IAAAzlE,EAAA8hE,aACA57G,KAAAu/G,WAAA7R,KAAA1tG,KAAA+zG,SAAA12D,OAAAr9C,KAAA+zG,SAAAR,OAAAvzG,KAAA0/G,KAAAnwG,KAAAvP,MAAAA,KAAAqzG,OAAA9jG,KAAAvP,QAMA85C,EAAA8mE,iBAAA5kH,UAAA02G,cAAA,SAAArhC,EAAAC,EAAAC,GAEAvxE,KAAA+zG,SAAArB,cAAArhC,EAAAC,EAAAC,IAGAz3B,EAAA8mE,iBAAA5kH,UAAAy4G,aAAA,SAAAviC,GAEAlyE,KAAA+zG,SAAAU,aAAAviC,IAGAp4B,EAAA8mE,iBAAA5kH,UAAA04G,UAAA,SAAA9mC,EAAA+mC,GAEA30G,KAAA+zG,SAAAW,UAAA9mC,EAAA+mC,IAGA76D,EAAA8mE,iBAAA5kH,UAAAg5G,aAAA,WAEAh1G,KAAA+zG,SAAAiB,gBAGAl7D,EAAA8mE,iBAAA5kH,UAAA0hH,YAAA,WAEA,IAAAiC,EAAA3/G,KAAAs3E,oBACAt3E,KAAAu/G,WAAA7B,YAAAiC,EAAAjuD,YAAAiuD,EAAAxtD,aACAnyD,KAAA0/G,QAGA5lE,EAAA8mE,iBAAA5kH,UAAA01D,UAAA,WAEA,IAAA0L,EAAAp9D,KAAAm9D,iBACA,OAAAC,EAAA1L,aAGA5X,EAAA8mE,iBAAA5kH,UAAAmhE,eAAA,WAEA,IAGA1jE,EAAA2J,EAAAwqE,EAAAC,EAHA/f,EAAA,IAAAhU,EAAAyH,MAAAzH,EAAAoE,IAAApE,EAAAoE,IAAApE,EAAAoE,KACA5yB,EAAA,IAAAwuB,EAAAyH,OAAAzH,EAAAoE,KAAApE,EAAAoE,KAAApE,EAAAoE,KAGA,IAAAzkD,EAAA,EAAAA,EAAAuG,KAAA+zG,SAAAnmC,OAAAr0E,OAAAE,IAEA,IADAm0E,EAAA5tE,KAAA+zG,SAAAnmC,OAAAn0E,GAAAo7G,WACAzxG,EAAA,EAAAA,EAAAwqE,EAAAr0E,OAAA6J,GAAA,EACAyqE,EAAA,IAAA/zB,EAAAyH,MAAAqsB,EAAAxqE,GAAAwqE,EAAAxqE,EAAA,GAAAwqE,EAAAxqE,EAAA,IACA0qD,EAAA5rB,EAAA4X,EAAAiF,QAAA+O,EAAA5rB,EAAA2rC,EAAA3rC,GACA4rB,EAAA3rB,EAAA2X,EAAAiF,QAAA+O,EAAA3rB,EAAA0rC,EAAA1rC,GACA2rB,EAAAtM,EAAA1H,EAAAiF,QAAA+O,EAAAtM,EAAAqsB,EAAArsB,GACAl2B,EAAA4W,EAAA4X,EAAAkF,QAAA1zB,EAAA4W,EAAA2rC,EAAA3rC,GACA5W,EAAA6W,EAAA2X,EAAAkF,QAAA1zB,EAAA6W,EAAA0rC,EAAA1rC,GACA7W,EAAAk2B,EAAA1H,EAAAkF,QAAA1zB,EAAAk2B,EAAAqsB,EAAArsB,GAIA,OAAA,IAAA1H,EAAA6X,IAAA7D,EAAAxiC,IAGAwuB,EAAA8mE,iBAAA5kH,UAAAs7E,kBAAA,WAEA,IAGA79E,EAAA2J,EAAAwqE,EAAAC,EAAAptB,EAHAyR,EAAAlyD,KAAA0xD,YACAhN,EAAA,EAGA,IAAAjrD,EAAA,EAAAA,EAAAuG,KAAA+zG,SAAAnmC,OAAAr0E,OAAAE,IAEA,IADAm0E,EAAA5tE,KAAA+zG,SAAAnmC,OAAAn0E,GAAAo7G,WACAzxG,EAAA,EAAAA,EAAAwqE,EAAAr0E,OAAA6J,GAAA,EACAyqE,EAAA,IAAA/zB,EAAAyH,MAAAqsB,EAAAxqE,GAAAwqE,EAAAxqE,EAAA,GAAAwqE,EAAAxqE,EAAA,IACAq9C,EAAAyR,EAAAzS,WAAAouB,GACA/zB,EAAA2E,UAAAgC,EAAAiE,KACAA,EAAAjE,GAKA,IAAAk/D,EAAA,IAAA7lE,EAAAmY,OAAAC,EAAAxN,GACA,OAAAi7D,GAGA7lE,EAAA8mE,iBAAA5kH,UAAAq3G,OAAA,WAEArzG,KAAA+zG,SAAAV,SACArzG,KAAA0/G,QAGA5lE,EAAA8mE,iBAAA5kH,UAAA0jH,KAAA,WAEA1/G,KAAA+zG,SAAAF,UAGA/5D,IAGA5gD,OAAA,2CAAA,eAAA,SAAA4gD,GAgiEA,OAthEAA,EAAA+mE,wBAAA,SAAAC,EAAAp8D,GAEA,IAAAvmD,EAAA,IAAA27C,EAAA67B,KACAorC,GAAA,EAsEA,GApEA,gBAAAD,EACA3iH,EAAA27C,EAAAknE,sBACA,eAAAF,EACA3iH,EAAA27C,EAAAmnE,qBACA,eAAAH,EACA3iH,EAAA27C,EAAAonE,qBACA,iBAAAJ,EACA3iH,EAAA27C,EAAAqnE,uBACA,gBAAAL,EACA3iH,EAAA27C,EAAAmpC,sBACA,yBAAA69B,EACA3iH,EAAA27C,EAAAsnE,+BACA,kBAAAN,EACA3iH,EAAA27C,EAAAunE,wBACA,kBAAAP,EACA3iH,EAAA27C,EAAAwnE,wBACA,wBAAAR,EACA3iH,EAAA27C,EAAAynE,8BACA,wBAAAT,EACA3iH,EAAA27C,EAAA0nE,8BACA,2BAAAV,EACA3iH,EAAA27C,EAAA2nE,iCACA,aAAAX,EACA3iH,EAAA27C,EAAA4nE,mBACA,sBAAAZ,EACA3iH,EAAA27C,EAAA6nE,4BACA,0BAAAb,EACA3iH,EAAA27C,EAAA8nE,gCACA,yBAAAd,EACA3iH,EAAA27C,EAAA+nE,+BACA,2BAAAf,EACA3iH,EAAA27C,EAAAgoE,iCACA,+BAAAhB,EACA3iH,EAAA27C,EAAAioE,qCACA,qBAAAjB,EACA3iH,EAAA27C,EAAAkoE,2BACA,uBAAAlB,GACA3iH,EAAA27C,EAAAmoE,6BACAlB,GAAA,GACA,wBAAAD,GACA3iH,EAAA27C,EAAAooE,8BACAnB,GAAA,GACA,yBAAAD,GACA3iH,EAAA27C,EAAAqoE,+BACApB,GAAA,GACA,+BAAAD,GACA3iH,EAAA27C,EAAAsoE,qCACArB,GAAA,GACA,sBAAAD,GACA3iH,EAAA27C,EAAAuoE,4BACAtB,GAAA,GACA,6BAAAD,GACA3iH,EAAA27C,EAAAwoE,mCACAvB,GAAA,GACA,+BAAAD,GACA3iH,EAAA27C,EAAAyoE,qCACAxB,GAAA,GACA,2BAAAD,GACA3iH,EAAA27C,EAAA0oE,iCACAzB,GAAA,GACA,oBAAAD,GACA3iH,EAAA27C,EAAA2oE,0BACA1B,GAAA,GACA,uBAAAD,IACA3iH,EAAA27C,EAAA4oE,6BACA3B,GAAA,GAGA5iH,EAAA07D,cAAA,EAAA,CACA,IAAApgE,EAMAypF,EAJAy/B,EAAA,EACA,GAAA5B,EACA4B,EAAAxkH,EAAA43E,kBAAA,GAAA71B,cAGA,IAAAzmD,EAAA,EAAAA,EAAA0E,EAAA07D,cAAApgE,IACAypF,EAAA/kF,EAAA43E,kBAAAt8E,GAAAymD,SACApG,EAAA2E,UAAAykC,EAAAy/B,KACAA,EAAAz/B,GAKA,IAAAr6C,EAAA6b,EAAAi+D,EAGA,IAAAlpH,EAAA,EAAAA,EAAA0E,EAAA07D,cAAApgE,IACA0E,EAAAw7D,UAAAlgE,GACAqoB,SAAAq+B,eAAAtX,GAIA,OAAA1qC,GASA27C,EAAAknE,oBAAA,WAEA,IAAA7iH,EAAA,IAAA27C,EAAA67B,KAcA,OAVAx3E,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAA,EAAA,EAAA,KACApjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAHA,GAAA,EAGA,KACApjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,OAJA,EAIA,GAJA,KAKApjD,EAAAi4D,UAAA,IAAAtc,EAAAg5B,WAAA,IAAAh5B,EAAAyH,MAAA,GALA,GAAA,KAOApjD,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,KACA11E,EAAA2sE,WAAA,IAAAhxB,EAAA+5B,aAAA,EAAA,EAAA,KAEA11E,GASA27C,EAAAmnE,mBAAA,WAEA,IAAA9iH,EAAA,IAAA27C,EAAA67B,KAoBA,OAhBA77B,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GAHA,GAIA27C,EAAAihC,gBAAA58E,EAAA,GAJA,EAIA,GACA27C,EAAAihC,gBAAA58E,EAAA,GALA,GAAA,GAMA27C,EAAAihC,gBAAA58E,GANA,EAMA,EAAA,GACA27C,EAAAihC,gBAAA58E,GAPA,EAOA,GAPA,GAQA27C,EAAAihC,gBAAA58E,GARA,GAAA,EAQA,GACA27C,EAAAihC,gBAAA58E,GATA,GAAA,GAAA,GAWA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IAEAA,GASA27C,EAAAonE,mBAAA,WAEA,IAAA/iH,EAAA,IAAA27C,EAAA67B,KAqBA,OAhBA77B,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,GAJA,EAIA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GANA,EAMA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GARA,GAUA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IAEAA,GASA27C,EAAAqnE,qBAAA,WAEA,IAAAhjH,EAAA,IAAA27C,EAAA67B,KAIA5gE,GAAA,EAAA1L,KAAAq2C,KAAA,IAAA,EACAzxC,EAAA,EAAA8G,EAwCA,OAtCA+kC,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GANA,GAOA27C,EAAAihC,gBAAA58E,EAAA,GAPA,EAOA,GACA27C,EAAAihC,gBAAA58E,GARA,EAQA,EAAA,GAEA27C,EAAAihC,gBAAA58E,EAAA,GAVA,GAAA,GAWA27C,EAAAihC,gBAAA58E,GAXA,EAWA,GAXA,GAYA27C,EAAAihC,gBAAA58E,GAZA,GAAA,EAYA,GACA27C,EAAAihC,gBAAA58E,GAbA,GAAA,GAAA,GAeA27C,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA8G,GAEA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,EAAA,GAEA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA9G,GAEA6rC,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,EAAA,KAEAA,GASA27C,EAAAmpC,oBAAA,WAEA,IAAA9kF,EAAA,IAAA27C,EAAA67B,KAIA5gE,GAAA,EAAA1L,KAAAq2C,KAAA,IAAA,EAsCA,OApCA5F,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA4W,GACA+kC,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA4W,GACA+kC,EAAAihC,gBAAA58E,EAAA,GANA,GAMA4W,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAPA,GAOA4W,GAEA+kC,EAAAihC,gBAAA58E,EAAA,GAAA4W,EAAA,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA4W,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAXA,GAWA4W,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAZA,GAYA4W,EAAA,GAEA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAfA,GAgBA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAjBA,GAmBA+kC,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KAEAA,GASA27C,EAAAsnE,6BAAA,WAEA,IAAAjjH,EAAA,IAAA27C,EAAA67B,KA8BA,OAzBA77B,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GAJA,GACA,GAIA27C,EAAAihC,gBAAA58E,GALA,GAAA,EAKA,GACA27C,EAAAihC,gBAAA58E,GANA,EAMA,GALA,GAOA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GARA,GADA,GAUA27C,EAAAihC,gBAAA58E,GAVA,GACA,EASA,GACA27C,EAAAihC,gBAAA58E,GAXA,EAWA,GAXA,GAaA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GAdA,GAAA,GAeA27C,EAAAihC,gBAAA58E,GAdA,GADA,EAeA,GACA27C,EAAAihC,gBAAA58E,GAfA,EAeA,GAhBA,GAkBA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,GAAA,GAAA,IAEAA,GASA27C,EAAAunE,sBAAA,WAEA,IAAAljH,EAAA,IAAA27C,EAAA67B,KAoCA,OA/BA77B,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GAJA,EAIA,GACA27C,EAAAihC,gBAAA58E,GALA,GAAA,EAKA,GACA27C,EAAAihC,gBAAA58E,GANA,EAMA,EAAA,GAEA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GATA,GAUA27C,EAAAihC,gBAAA58E,GAVA,EAUA,EAAA,GACA27C,EAAAihC,gBAAA58E,GAXA,EAWA,GAXA,GAaA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GAdA,GAAA,GAeA27C,EAAAihC,gBAAA58E,EAAA,GAfA,EAeA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GAhBA,GAkBA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,KAEAA,GASA27C,EAAAwnE,sBAAA,WAEA,IAAAnjH,EAAA,IAAA27C,EAAA67B,KAGAx1E,EAAAkJ,KAAAq2C,KAAA,GAAA,EA6CA,OA3CA5F,EAAAihC,gBAAA58E,EAAA,EAAA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,EAAA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,GALA,GAKAgC,GACA25C,EAAAihC,gBAAA58E,GANA,EAMA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,GAPA,GAOAgC,GACA25C,EAAAihC,gBAAA58E,GARA,EAQA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,GATA,GAAA,GASAgC,GACA25C,EAAAihC,gBAAA58E,GAVA,GAAA,GAUAgC,GAEA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAbA,GAcA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,GAfA,GAeAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAhBA,GAiBA25C,EAAAihC,gBAAA58E,GAjBA,GAiBAgC,GAjBA,GAkBA25C,EAAAihC,gBAAA58E,GAlBA,GAkBAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,GAnBA,GAmBAgC,GAnBA,GAqBA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAtBA,GAuBA25C,EAAAihC,gBAAA58E,GAAAgC,GAvBA,EAuBA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,GAzBA,GAAA,GA0BA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GA1BA,GA2BA25C,EAAAihC,gBAAA58E,GAAAgC,GA3BA,EA2BA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,GA5BA,GAAA,GA8BA25C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAAynE,4BAAA,WAEA,IAAApjH,EAAA,IAAA27C,EAAA67B,KAoDA,OA9CA77B,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GAHA,GAIA27C,EAAAihC,gBAAA58E,EAAA,GANA,EAMA,GACA27C,EAAAihC,gBAAA58E,EAAA,GAPA,GAEA,GAOA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GARA,EAQA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GAXA,GAYA27C,EAAAihC,gBAAA58E,EAAA,GAVA,GAFA,GAcA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GAbA,GAcA27C,EAAAihC,gBAAA58E,GAhBA,EAgBA,EAAA,GACA27C,EAAAihC,gBAAA58E,GAjBA,EAiBA,GAfA,GAiBA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GAlBA,EAkBA,GACA27C,EAAAihC,gBAAA58E,GArBA,EAqBA,EAAA,GACA27C,EAAAihC,gBAAA58E,GAtBA,GAEA,EAoBA,GAEA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,GAvBA,EAuBA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,EAAA,GA1BA,GA2BA27C,EAAAihC,gBAAA58E,GAzBA,EAyBA,GA3BA,GA6BA27C,EAAAihC,gBAAA58E,EAAA,EAAA,EAAA,GACA27C,EAAAihC,gBAAA58E,GA5BA,EA4BA,EAAA,GACA27C,EAAAihC,gBAAA58E,EAAA,GA/BA,EA+BA,GACA27C,EAAAihC,gBAAA58E,GA9BA,GAFA,EAgCA,GAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IAEAA,GASA27C,EAAA0nE,4BAAA,WAEA,IAAArjH,EAAA,IAAA27C,EAAA67B,KAGAx1E,EAAA,EAAAkJ,KAAAq2C,KAAA,GAyDA,OAvDA5F,EAAAihC,gBAAA58E,EAAA,EAAA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,EAAA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,GALA,GAKAgC,GACA25C,EAAAihC,gBAAA58E,GANA,EAMA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,GAPA,GAOAgC,GACA25C,EAAAihC,gBAAA58E,GARA,EAQA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,GATA,GAAA,GASAgC,GACA25C,EAAAihC,gBAAA58E,GAVA,GAAA,GAUAgC,GAEA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAbA,GAcA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,GAfA,GAeAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAhBA,GAiBA25C,EAAAihC,gBAAA58E,GAjBA,GAiBAgC,GAjBA,GAkBA25C,EAAAihC,gBAAA58E,GAlBA,GAkBAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,GAnBA,GAmBAgC,GAnBA,GAqBA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAtBA,GAuBA25C,EAAAihC,gBAAA58E,GAAAgC,GAvBA,EAuBA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,GAzBA,GAAA,GA0BA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GA1BA,GA2BA25C,EAAAihC,gBAAA58E,GAAAgC,GA3BA,EA2BA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,GA5BA,GAAA,GA8BA25C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAA2nE,+BAAA,WAEA,IAAAtjH,EAAA,IAAA27C,EAAA67B,KAGAx1E,EAAA,EAAAkJ,KAAAq2C,KAAA,GACA3qC,EAAA,EAAA,EAAA1L,KAAAq2C,KAAA,GAqFA,OAnFA5F,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAPA,GAOAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GATA,GASAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAVA,GAUAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAXA,GAWAgC,GAAA4U,GAEA+kC,EAAAihC,gBAAA58E,EAAA,GAAA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAhBA,GAgBA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAlBA,GAkBA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAnBA,GAmBA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GApBA,GAoBA4W,GAAA5U,GAEA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAzBA,GAyBA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GA3BA,GA2BA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GA5BA,GA4BA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GA7BA,GA6BA4U,GAEA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,GAlCA,GAmCA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,GApCA,GAqCA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,GArCA,GAsCA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,GAtCA,GAwCA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GA3CA,GA2CA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GA7CA,GA6CA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GA9CA,GA8CA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GA/CA,GA+CA5U,GAEA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,GApDA,GAqDA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,GAtDA,GAuDA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,GAvDA,GAwDA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,GAxDA,GA0DA25C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAA4nE,iBAAA,WAEA,IAAAvjH,EAAA,IAAA27C,EAAA67B,KAGAx1E,EAAA,EAAA,GAAAkJ,KAAAqkE,IAAA,GAAA,EAAArkE,KAAAq2C,KAAA,IAAA,EAAA,GAAAr2C,KAAAqkE,IAAA,EAAArkE,KAAAq2C,KAAA,IAAA,GAAA,EAAA,GAAA,GACA3qC,EAAA,EAAA5U,EAwEA,OAtEA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GANA,GAMAgC,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAPA,GAOAgC,GAAA4U,GAEA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,GAXA,GAYA+kC,EAAAihC,gBAAA58E,GAAAgC,GAAA4U,GAZA,GAcA+kC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAhBA,GAgBA5U,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAjBA,GAiBA5U,GAEA25C,EAAAihC,gBAAA58E,EAAA,GAAA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GArBA,GAqBA4W,GAAA5U,GACA25C,EAAAihC,gBAAA58E,GAtBA,GAsBA4W,GAAA5U,GAEA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GA1BA,GA0BA4U,GACA+kC,EAAAihC,gBAAA58E,GAAAgC,GA3BA,GA2BA4U,GAEA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,GA/BA,GAgCA25C,EAAAihC,gBAAA58E,GAAA4W,GAAA5U,GAhCA,GAkCA25C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KAEAA,GASA27C,EAAA6nE,0BAAA,WAEA,IAAAxjH,EAAA,IAAA27C,EAAA67B,KAGAx1E,GAAA,EAAAkJ,KAAAq2C,KAAA,IAAA,EACA3qC,EAAA,GACA9G,EAAA9N,EAAA,EACA0M,GAAA,EAAA1M,GAAA,EAsEA,OApEA25C,EAAAihC,gBAAA58E,EAAA,EAAA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,EAAA,GAAAgC,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAAgC,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAAgC,EAAA,EAAA,GAEA25C,EAAAihC,gBAAA58E,EAAA,IAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,EAAA,IAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,EAAA,IAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAApB,GACAitC,EAAAihC,gBAAA58E,EAAA,IAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAApB,GACAitC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAApB,GACAitC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAApB,GAEAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,IACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,IACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,IACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,GAAAkI,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,IACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,GAAAkI,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,GAAAkI,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,GAAAkI,GAEA+kC,EAAAihC,gBAAA58E,GAAA0O,EAAA,IAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,EAAA,IAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,EAAA,IAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,GAAAkI,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,EAAA,IAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,GAAAkI,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,GAAAkI,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,GAAAkI,GAAA9G,GAEA6rC,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAA8nE,8BAAA,WAEA,IAAAzjH,EAAA,IAAA27C,EAAA67B,KAIA5gE,GAAA,EAAA1L,KAAAq2C,KAAA,IAAA,EACAzxC,EAAA,EAAA8G,EACAlI,EAAA,EAAAkI,EACAogD,EAAA,EAAApgD,EACAi8D,EAAA3nE,KAAAqkE,IAAA34D,EAAA,GAyGA,OAvGA+kC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAApB,GACAitC,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAApB,GAEAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GAAAoB,GACA6rC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GAAAoB,GAEA6rC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA8P,GAAApB,EAAA,GAEAitC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GAEArb,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GAEA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GAEA6rC,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,GAnDA,GAmDAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,GArDA,GAqDAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,EAAA,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,GAvDA,GAuDAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAA4W,GAxDA,GAwDAi8D,GAEAl3B,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,GA3DA,GA4DA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,GA9DA,GA+DA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,GA/DA,GAgEA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,EAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAAj8D,GAjEA,GAmEA+kC,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,GAtEA,GAsEA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,GAxEA,GAwEA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,GAzEA,GAyEA6yE,GAAAj8D,GACA+kC,EAAAihC,gBAAA58E,GA1EA,GA0EA6yE,GAAAj8D,GAEA+kC,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAA+nE,6BAAA,WAEA,IAAA1jH,EAAA,IAAA27C,EAAA67B,KAKA1nE,GAAA,EAAA5E,KAAAq2C,KAAA,IAAA,EACA7yC,EAAA,EAAAoB,EACAknD,EAAA,EAAA,EAAAlnD,EACA+iE,EAAA,EAAA/iE,EACA20G,EAAA,EAAA30G,EAyGA,OAvGA6rC,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA0O,GACAitC,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA0O,GACAitC,EAAAihC,gBAAA58E,EAAA,GAVA,GAUA0O,GACAitC,EAAAihC,gBAAA58E,EAAA,GAXA,GAWA0O,GAEAitC,EAAAihC,gBAAA58E,EAAA,GAAA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,EAAA,GAAA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,GAfA,GAeA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,GAhBA,GAgBA0O,EAAA,GAEAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GApBA,GAqBAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GArBA,GAuBAitC,EAAAihC,gBAAA58E,EAAA,GAAAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,EAAA,GAAAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,EAAA,GAAAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAzBA,GAyBAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,EAAA,GAAAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GA3BA,GA2BAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GA5BA,GA4BAg3D,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GA7BA,GA6BAg3D,GAAAlnD,GAEA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,EAAA,GACA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,EAAA,GACA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,EAAA,GACA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAlCA,GAmCA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,EAAA,GACA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GApCA,GAqCA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GArCA,GAsCA6rC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAtCA,GAwCA6rC,EAAAihC,gBAAA58E,GAAA8P,EAAA,GAAAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,EAAA,GAAAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,EAAA,GAAAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GA3CA,GA2CAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,EAAA,GAAAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GA7CA,GA6CAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GA9CA,GA8CAknD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GA/CA,GA+CAknD,GAEArb,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GArDA,GAqDA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,EAAA,GAAA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAvDA,GAuDA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAxDA,GAwDA6yE,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAzDA,GAyDA6yE,GAAA4xC,GAEA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,EAAA,GACA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,EAAA,GACA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,EAAA,GACA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GA9DA,GA+DA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,EAAA,GACA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAhEA,GAiEA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAjEA,GAkEA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAlEA,GAoEA9oE,EAAAihC,gBAAA58E,GAAAykH,EAAA,GAAA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,EAAA,GAAA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,EAAA,GAAA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAvEA,GAuEA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,EAAA,GAAA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAzEA,GAyEA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GA1EA,GA0EA5xC,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GA3EA,GA2EA5xC,GAEAl3B,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAAgoE,+BAAA,WAEA,IAAA3jH,EAAA,IAAA27C,EAAA67B,KAIA5gE,GAAA,EAAA1L,KAAAq2C,KAAA,IAAA,EACAzxC,EAAA5E,KAAAqkE,IAAA34D,EAAA,GACAlI,EAAAxD,KAAAqkE,IAAA34D,EAAA,GACAogD,EAAA,EAAApgD,EACAi8D,EAAA,EAAAj8D,EAwIA,OAtIA+kC,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA0O,GACAitC,EAAAihC,gBAAA58E,EAAA,EAAA,GAAA0O,GACAitC,EAAAihC,gBAAA58E,EAAA,GATA,GASA0O,GACAitC,EAAAihC,gBAAA58E,GAVA,EAUA,GAAA0O,GACAitC,EAAAihC,gBAAA58E,EAAA,GAXA,GAWA0O,GACAitC,EAAAihC,gBAAA58E,GAZA,EAYA,GAAA0O,GACAitC,EAAAihC,gBAAA58E,GAbA,GAAA,GAaA0O,GACAitC,EAAAihC,gBAAA58E,GAdA,GAAA,GAcA0O,GAEAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GAjBA,GAkBAitC,EAAAihC,gBAAA58E,GAAA0O,GAlBA,EAkBA,GACAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,EAAA,GACAitC,EAAAihC,gBAAA58E,GAAA0O,GApBA,GAAA,GAqBAitC,EAAAihC,gBAAA58E,GAAA0O,EAAA,GArBA,GAsBAitC,EAAAihC,gBAAA58E,GAAA0O,GAtBA,EAsBA,GACAitC,EAAAihC,gBAAA58E,GAAA0O,GAvBA,GAAA,GAyBAitC,EAAAihC,gBAAA58E,EAAA,GAAA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,EAAA,GAAA0O,GA1BA,GA2BAitC,EAAAihC,gBAAA58E,EAAA,GAAA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,GA5BA,GA4BA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,EAAA,GAAA0O,GA7BA,GA8BAitC,EAAAihC,gBAAA58E,GA9BA,GA8BA0O,GA9BA,GA+BAitC,EAAAihC,gBAAA58E,GA/BA,GA+BA0O,EAAA,GACAitC,EAAAihC,gBAAA58E,GAhCA,GAgCA0O,GAhCA,GAkCAitC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GACArb,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAogD,GAEArb,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAAg3D,GAAAlnD,GAAA8G,GAEA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAogD,GAAAlnD,GAEA6rC,EAAAihC,gBAAA58E,GAAA6yE,EAAA,GAAA/iE,GACA6rC,EAAAihC,gBAAA58E,GAAA6yE,EAAA,GAAA/iE,GACA6rC,EAAAihC,gBAAA58E,GAAA6yE,EAAA,GAAA/iE,GACA6rC,EAAAihC,gBAAA58E,GAAA6yE,EAAA,GAAA/iE,GAEA6rC,EAAAihC,gBAAA58E,GAAA8P,GAAA+iE,EAAA,GACAl3B,EAAAihC,gBAAA58E,GAAA8P,GAAA+iE,EAAA,GACAl3B,EAAAihC,gBAAA58E,GAAA8P,GAAA+iE,EAAA,GACAl3B,EAAAihC,gBAAA58E,GAAA8P,GAAA+iE,EAAA,GAEAl3B,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA+iE,GACAl3B,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA+iE,GACAl3B,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA+iE,GACAl3B,EAAAihC,gBAAA58E,EAAA,GAAA8P,GAAA+iE,GAEAl3B,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,KAEAA,GASA27C,EAAAioE,mCAAA,WAEA,IAAA5jH,EAAA,IAAA27C,EAAA67B,KAGAx1E,GAAA,EAAAkJ,KAAAq2C,KAAA,IAAA,EACA3qC,EAAA,EAAA5U,EACA8N,EAAA,EAAA9N,EACA0M,EAAA,EAAA1M,EACAg1D,EAAA,EAAA,EAAAh1D,EACA6wE,EAAA3nE,KAAAqkE,IAAAvtE,EAAA,GACAyiH,EAAA,EAAAziH,EAAA,EACA1G,EAAA,EAAA0G,EAAA,EACAiD,EAAA,EAAAjD,EAEAY,EAAA,EAAAZ,EA0MA,OAxMA25C,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GACA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAAA,GAAA9G,GAEA6rC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GACA+kC,EAAAihC,gBAAA58E,GAAA4W,GAAA9G,GAAA8G,GAEA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GACA+kC,EAAAihC,gBAAA58E,GAAA8P,GAAA8G,GAAAA,GAEA+kC,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GACArb,EAAAihC,gBAAA58E,GAAA0O,GAAA1M,GAAAg1D,GAEArb,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GACAitC,EAAAihC,gBAAA58E,GAAAgC,GAAAg1D,GAAAtoD,GAEAitC,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GACA25C,EAAAihC,gBAAA58E,GAAAg3D,GAAAtoD,GAAA1M,GAEA25C,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GACA9oE,EAAAihC,gBAAA58E,GAAA4W,GAAAi8D,GAAA4xC,GAEA9oE,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GACA+kC,EAAAihC,gBAAA58E,GAAA6yE,GAAA4xC,GAAA7tG,GAEA+kC,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GACAl3B,EAAAihC,gBAAA58E,GAAAykH,GAAA7tG,GAAAi8D,GAEAl3B,EAAAihC,gBAAA58E,GAAA1E,EAAA,GAAA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,EAAA,GAAA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,GAhGA,GAgGA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,EAAA,GAAA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,GAlGA,GAkGA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,EAAA,GAAA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,GApGA,GAoGA2J,GACA02C,EAAAihC,gBAAA58E,GAAA1E,GArGA,GAqGA2J,GAEA02C,EAAAihC,gBAAA58E,EAAA,GAAAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,EAAA,GAAAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,GAzGA,GAyGAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,EAAA,GAAAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,GA3GA,GA2GAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,EAAA,GAAAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,GA7GA,GA6GAiF,GAAA3J,GACAqgD,EAAAihC,gBAAA58E,GA9GA,GA8GAiF,GAAA3J,GAEAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,EAAA,GACAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,EAAA,GACAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,GAlHA,GAmHAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,EAAA,GACAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,GApHA,GAqHAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,EAAA,GACAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,GAtHA,GAuHAqgD,EAAAihC,gBAAA58E,GAAAiF,GAAA3J,GAvHA,GAyHAqgD,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,GAjHA,GAiHAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,GAnHA,GAmHAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,EAAA,GAAAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,GArHA,GAqHAY,GACA+4C,EAAAihC,gBAAA58E,GAAAgC,GAtHA,GAsHAY,GAEA+4C,EAAAihC,gBAAA58E,EAAA,GAAA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,GA1HA,GA0HA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,GA5HA,GA4HA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,EAAA,GAAA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,GA9HA,GA8HA4C,GAAAZ,GACA25C,EAAAihC,gBAAA58E,GA/HA,GA+HA4C,GAAAZ,GAEA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,GAnIA,GAoIA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,GArIA,GAsIA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,EAAA,GACA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,GAvIA,GAwIA25C,EAAAihC,gBAAA58E,GAAA4C,GAAAZ,GAxIA,GA0IA25C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,EAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,IAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,IAAA,GAAA,IAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,MACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,MACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,MACA27C,EAAAohC,iBAAA/8E,GAAA,GAA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C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,EAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,IACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,GAAA,GAAA,KAEA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27C,EAAAohC,iBAAA/8E,GAAA,EAAA,GAAA,GAAA,GAAA,KACA27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","file":"../skylark-online3dviewer-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-langx-types/types',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n    var toString = {}.toString;\r\n    \r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function/string/element and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * isArrayLike([1, 2, 3])\r\n     * // => true\r\n     *\r\n     * isArrayLike(document.body.children)\r\n     * // => false\r\n     *\r\n     * isArrayLike('abc')\r\n     * // => true\r\n     *\r\n     * isArrayLike(Function)\r\n     * // => false\r\n     */    \r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * isBoolean(false)\r\n     * // => true\r\n     *\r\n     * isBoolean(null)\r\n     * // => false\r\n     */\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * isFunction(parseInt)\r\n     * // => true\r\n     *\r\n     * isFunction(/abc/)\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && obj.nodeType; // obj instanceof Node; //Consider the elements in IFRAME\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNull(value) {\r\n      return type(value) === \"null\";\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n    }\r\n\r\n    function isUndefined(value) {\r\n      return value === undefined\r\n    }\r\n\r\n    return skylark.attach(\"langx.types\",{\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmpty : isEmptyObject,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNull: isNull,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isNumeric: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isSymbol : isSymbol,\r\n\r\n        isUndefined: isUndefined,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    });\r\n\r\n});\ndefine('skylark-langx-types/main',[\r\n\t\"./types\"\r\n],function(types){\r\n\treturn types;\r\n});\ndefine('skylark-langx-types', ['skylark-langx-types/main'], function (main) { return main; });\n\ndefine('skylark-langx-numbers/numbers',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n\tvar isObject = types.isObject,\r\n\t\tisSymbol = types.isSymbol;\r\n\r\n\tvar INFINITY = 1 / 0,\r\n\t    MAX_SAFE_INTEGER = 9007199254740991,\r\n\t    MAX_INTEGER = 1.7976931348623157e+308,\r\n\t    NAN = 0 / 0;\r\n\r\n\t/** Used to match leading and trailing whitespace. */\r\n\tvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n\t/** Used to detect bad signed hexadecimal string values. */\r\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n\t/** Used to detect binary string values. */\r\n\tvar reIsBinary = /^0b[01]+$/i;\r\n\r\n\t/** Used to detect octal string values. */\r\n\tvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n\t/** Used to detect unsigned integer values. */\r\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n\t/** Built-in method references without a dependency on `root`. */\r\n\tvar freeParseInt = parseInt;\r\n\r\n\t/**\r\n\t * Converts `value` to a finite number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.12.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted number.\r\n\t * @example\r\n\t *\r\n\t * _.toFinite(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toFinite(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toFinite(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toFinite('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toFinite(value) {\r\n\t  if (!value) {\r\n\t    return value === 0 ? value : 0;\r\n\t  }\r\n\t  value = toNumber(value);\r\n\t  if (value === INFINITY || value === -INFINITY) {\r\n\t    var sign = (value < 0 ? -1 : 1);\r\n\t    return sign * MAX_INTEGER;\r\n\t  }\r\n\t  return value === value ? value : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts `value` to an integer.\r\n\t *\r\n\t * **Note:** This method is loosely based on\r\n\t * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted integer.\r\n\t * @example\r\n\t *\r\n\t * _.toInteger(3.2);\r\n\t * // => 3\r\n\t *\r\n\t * _.toInteger(Number.MIN_VALUE);\r\n\t * // => 0\r\n\t *\r\n\t * _.toInteger(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toInteger('3.2');\r\n\t * // => 3\r\n\t */\r\n\tfunction toInteger(value) {\r\n\t  var result = toFinite(value),\r\n\t      remainder = result % 1;\r\n\r\n\t  return result === result ? (remainder ? result - remainder : result) : 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Converts `value` to a number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.0.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to process.\r\n\t * @returns {number} Returns the number.\r\n\t * @example\r\n\t *\r\n\t * _.toNumber(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toNumber(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toNumber(Infinity);\r\n\t * // => Infinity\r\n\t *\r\n\t * _.toNumber('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toNumber(value) {\r\n\t  if (typeof value == 'number') {\r\n\t    return value;\r\n\t  }\r\n\t  if (isSymbol(value)) {\r\n\t    return NAN;\r\n\t  }\r\n\t  if (isObject(value)) {\r\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n\t    value = isObject(other) ? (other + '') : other;\r\n\t  }\r\n\t  if (typeof value != 'string') {\r\n\t    return value === 0 ? value : +value;\r\n\t  }\r\n\t  value = value.replace(reTrim, '');\r\n\t  var isBinary = reIsBinary.test(value);\r\n\t  return (isBinary || reIsOctal.test(value))\r\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n\t    : (reIsBadHex.test(value) ? NAN : +value);\r\n\t}\r\n\r\n\treturn  skylark.attach(\"langx.numbers\",{\r\n\t\ttoFinite : toFinite,\r\n\t\ttoNumber : toNumber,\r\n\t\ttoInteger : toInteger\r\n\t});\r\n});\ndefine('skylark-langx-numbers/main',[\r\n\t\"./numbers\"\r\n],function(numbers){\r\n\treturn numbers;\r\n});\ndefine('skylark-langx-numbers', ['skylark-langx-numbers/main'], function (main) { return main; });\n\ndefine('skylark-langx-objects/objects',[\r\n    \"skylark-langx-ns/ns\",\r\n    \"skylark-langx-ns/_attach\",\r\n\t\"skylark-langx-types\",\r\n    \"skylark-langx-numbers\"\r\n],function(skylark,_attach,types,numbers){\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n\t\tisObject = types.isObject,\r\n\t\tisPlainObject = types.isPlainObject,\r\n\t\tisArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = numbers.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if (callback.call(value, key, value) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if (callback.call(value, i, value) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                if (isArray(source[key]) && !isArray(target[key])) {\r\n                    target[key] = [];\r\n                }\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n   // Return a copy of the object without the blacklisted properties.\r\n    function omit(obj, prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = mixin({},obj);\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                delete result[pn];\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n   // Return a copy of the object only containing the whitelisted properties.\r\n    function pick(obj,prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = {};\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                result[pn] = obj[pn];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = allKeys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    return skylark.attach(\"langx.objects\",{\r\n        allKeys: allKeys,\r\n\r\n        attach : _attach,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        isEqual: isEqual,   \r\n\r\n        includes: includes,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        omit: omit,\r\n\r\n        pick: pick,\r\n\r\n        removeItem: removeItem,\r\n\r\n        result : result,\r\n        \r\n        safeMixin: safeMixin,\r\n\r\n        values: values\r\n    });\r\n\r\n\r\n});\ndefine('skylark-langx-objects/main',[\r\n\t\"./objects\"\r\n],function(objects){\r\n\treturn objects;\r\n});\ndefine('skylark-langx-objects', ['skylark-langx-objects/main'], function (main) { return main; });\n\ndefine('skylark-langx-arrays/arrays',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n\tvar filter = Array.prototype.filter,\r\n\t\tisArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function filter2(array,func) {\r\n      return filter.call(array,func);\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    return skylark.attach(\"langx.arrays\",{\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        filter : filter2,\r\n        \r\n        flatten: flatten,\r\n\r\n        grep: grep,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        reduce : reduce,\r\n\r\n        uniq : uniq\r\n\r\n    });\r\n});\ndefine('skylark-langx-arrays/main',[\r\n\t\"./arrays\"\r\n],function(arrays){\r\n\treturn arrays;\r\n});\ndefine('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });\n\ndefine('skylark-langx/arrays',[\r\n\t\"skylark-langx-arrays\"\r\n],function(arrays){\r\n  return arrays;\r\n});\ndefine('skylark-langx-klass/klass',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n],function(skylark,types,objects,arrays){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return skylark.attach(\"langx.klass\",createClass);\r\n});\ndefine('skylark-langx-klass/main',[\r\n\t\"./klass\"\r\n],function(klass){\r\n\treturn klass;\r\n});\ndefine('skylark-langx-klass', ['skylark-langx-klass/main'], function (main) { return main; });\n\ndefine('skylark-langx/klass',[\r\n    \"skylark-langx-klass\"\r\n],function(klass){\r\n    return klass;\r\n});\ndefine('skylark-langx/ArrayStore',[\r\n    \"./klass\"\r\n],function(klass){\r\n    var SimpleQueryEngine = function(query, options){\r\n        // summary:\r\n        //      Simple query engine that matches using filter functions, named filter\r\n        //      functions or objects by name-value on a query object hash\r\n        //\r\n        // description:\r\n        //      The SimpleQueryEngine provides a way of getting a QueryResults through\r\n        //      the use of a simple object hash as a filter.  The hash will be used to\r\n        //      match properties on data objects with the corresponding value given. In\r\n        //      other words, only exact matches will be returned.\r\n        //\r\n        //      This function can be used as a template for more complex query engines;\r\n        //      for example, an engine can be created that accepts an object hash that\r\n        //      contains filtering functions, or a string that gets evaluated, etc.\r\n        //\r\n        //      When creating a new dojo.store, simply set the store's queryEngine\r\n        //      field as a reference to this function.\r\n        //\r\n        // query: Object\r\n        //      An object hash with fields that may match fields of items in the store.\r\n        //      Values in the hash will be compared by normal == operator, but regular expressions\r\n        //      or any object that provides a test() method are also supported and can be\r\n        //      used to match strings by more complex expressions\r\n        //      (and then the regex's or object's test() method will be used to match values).\r\n        //\r\n        // options: dojo/store/api/Store.QueryOptions?\r\n        //      An object that contains optional information such as sort, start, and count.\r\n        //\r\n        // returns: Function\r\n        //      A function that caches the passed query under the field \"matches\".  See any\r\n        //      of the \"query\" methods on dojo.stores.\r\n        //\r\n        // example:\r\n        //      Define a store with a reference to this engine, and set up a query method.\r\n        //\r\n        //  |   var myStore = function(options){\r\n        //  |       //  ...more properties here\r\n        //  |       this.queryEngine = SimpleQueryEngine;\r\n        //  |       //  define our query method\r\n        //  |       this.query = function(query, options){\r\n        //  |           return QueryResults(this.queryEngine(query, options)(this.data));\r\n        //  |       };\r\n        //  |   };\r\n\r\n        // create our matching query function\r\n        switch(typeof query){\r\n            default:\r\n                throw new Error(\"Can not query with a \" + typeof query);\r\n            case \"object\": case \"undefined\":\r\n                var queryObject = query;\r\n                query = function(object){\r\n                    for(var key in queryObject){\r\n                        var required = queryObject[key];\r\n                        if(required && required.test){\r\n                            // an object can provide a test method, which makes it work with regex\r\n                            if(!required.test(object[key], object)){\r\n                                return false;\r\n                            }\r\n                        }else if(required != object[key]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                };\r\n                break;\r\n            case \"string\":\r\n                // named query\r\n                if(!this[query]){\r\n                    throw new Error(\"No filter function \" + query + \" was found in store\");\r\n                }\r\n                query = this[query];\r\n                // fall through\r\n            case \"function\":\r\n                // fall through\r\n        }\r\n        \r\n        function filter(arr, callback, thisObject){\r\n            // summary:\r\n            //      Returns a new Array with those items from arr that match the\r\n            //      condition implemented by callback.\r\n            // arr: Array\r\n            //      the array to iterate over.\r\n            // callback: Function|String\r\n            //      a function that is invoked with three arguments (item,\r\n            //      index, array). The return of this function is expected to\r\n            //      be a boolean which determines whether the passed-in item\r\n            //      will be included in the returned array.\r\n            // thisObject: Object?\r\n            //      may be used to scope the call to callback\r\n            // returns: Array\r\n            // description:\r\n            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when\r\n            //      run over sparse arrays, this implementation passes the \"holes\" in the sparse array to\r\n            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.\r\n            //      For more details, see:\r\n            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\r\n            // example:\r\n            //  | // returns [2, 3, 4]\r\n            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });\r\n\r\n            // TODO: do we need \"Ctr\" here like in map()?\r\n            var i = 0, l = arr && arr.length || 0, out = [], value;\r\n            if(l && typeof arr == \"string\") arr = arr.split(\"\");\r\n            if(typeof callback == \"string\") callback = cache[callback] || buildFn(callback);\r\n            if(thisObject){\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback.call(thisObject, value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }else{\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback(value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return out; // Array\r\n        }\r\n\r\n        function execute(array){\r\n            // execute the whole query, first we filter\r\n            var results = filter(array, query);\r\n            // next we sort\r\n            var sortSet = options && options.sort;\r\n            if(sortSet){\r\n                results.sort(typeof sortSet == \"function\" ? sortSet : function(a, b){\r\n                    for(var sort, i=0; sort = sortSet[i]; i++){\r\n                        var aValue = a[sort.attribute];\r\n                        var bValue = b[sort.attribute];\r\n                        // valueOf enables proper comparison of dates\r\n                        aValue = aValue != null ? aValue.valueOf() : aValue;\r\n                        bValue = bValue != null ? bValue.valueOf() : bValue;\r\n                        if (aValue != bValue){\r\n                            // modified by lwf 2016/07/09\r\n                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            // now we paginate\r\n            if(options && (options.start || options.count)){\r\n                var total = results.length;\r\n                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));\r\n                results.total = total;\r\n            }\r\n            return results;\r\n        }\r\n        execute.matches = query;\r\n        return execute;\r\n    };\r\n\r\n    var QueryResults = function(results){\r\n        // summary:\r\n        //      A function that wraps the results of a store query with additional\r\n        //      methods.\r\n        // description:\r\n        //      QueryResults is a basic wrapper that allows for array-like iteration\r\n        //      over any kind of returned data from a query.  While the simplest store\r\n        //      will return a plain array of data, other stores may return deferreds or\r\n        //      promises; this wrapper makes sure that *all* results can be treated\r\n        //      the same.\r\n        //\r\n        //      Additional methods include `forEach`, `filter` and `map`.\r\n        // results: Array|dojo/promise/Promise\r\n        //      The result set as an array, or a promise for an array.\r\n        // returns:\r\n        //      An array-like object that can be used for iterating over.\r\n        // example:\r\n        //      Query a store and iterate over the results.\r\n        //\r\n        //  |   store.query({ prime: true }).forEach(function(item){\r\n        //  |       //  do something\r\n        //  |   });\r\n\r\n        if(!results){\r\n            return results;\r\n        }\r\n\r\n        var isPromise = !!results.then;\r\n        // if it is a promise it may be frozen\r\n        if(isPromise){\r\n            results = Object.delegate(results);\r\n        }\r\n        function addIterativeMethod(method){\r\n            // Always add the iterative methods so a QueryResults is\r\n            // returned whether the environment is ES3 or ES5\r\n            results[method] = function(){\r\n                var args = arguments;\r\n                var result = Deferred.when(results, function(results){\r\n                    //Array.prototype.unshift.call(args, results);\r\n                    return QueryResults(Array.prototype[method].apply(results, args));\r\n                });\r\n                // forEach should only return the result of when()\r\n                // when we're wrapping a promise\r\n                if(method !== \"forEach\" || isPromise){\r\n                    return result;\r\n                }\r\n            };\r\n        }\r\n\r\n        addIterativeMethod(\"forEach\");\r\n        addIterativeMethod(\"filter\");\r\n        addIterativeMethod(\"map\");\r\n        if(results.total == null){\r\n            results.total = Deferred.when(results, function(results){\r\n                return results.length;\r\n            });\r\n        }\r\n        return results; // Object\r\n    };\r\n\r\n    var ArrayStore = klass({\r\n        \"klassName\": \"ArrayStore\",\r\n\r\n        \"queryEngine\": SimpleQueryEngine,\r\n        \r\n        \"idProperty\": \"id\",\r\n\r\n\r\n        get: function(id){\r\n            // summary:\r\n            //      Retrieves an object by its identity\r\n            // id: Number\r\n            //      The identity to use to lookup the object\r\n            // returns: Object\r\n            //      The object in the store that matches the given id.\r\n            return this.data[this.index[id]];\r\n        },\r\n\r\n        getIdentity: function(object){\r\n            return object[this.idProperty];\r\n        },\r\n\r\n        put: function(object, options){\r\n            var data = this.data,\r\n                index = this.index,\r\n                idProperty = this.idProperty;\r\n            var id = object[idProperty] = (options && \"id\" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();\r\n            if(id in index){\r\n                // object exists\r\n                if(options && options.overwrite === false){\r\n                    throw new Error(\"Object already exists\");\r\n                }\r\n                // replace the entry in data\r\n                data[index[id]] = object;\r\n            }else{\r\n                // add the new object\r\n                index[id] = data.push(object) - 1;\r\n            }\r\n            return id;\r\n        },\r\n\r\n        add: function(object, options){\r\n            (options = options || {}).overwrite = false;\r\n            // call put with overwrite being false\r\n            return this.put(object, options);\r\n        },\r\n\r\n        remove: function(id){\r\n            // summary:\r\n            //      Deletes an object by its identity\r\n            // id: Number\r\n            //      The identity to use to delete the object\r\n            // returns: Boolean\r\n            //      Returns true if an object was removed, falsy (undefined) if no object matched the id\r\n            var index = this.index;\r\n            var data = this.data;\r\n            if(id in index){\r\n                data.splice(index[id], 1);\r\n                // now we have to reindex\r\n                this.setData(data);\r\n                return true;\r\n            }\r\n        },\r\n        query: function(query, options){\r\n            // summary:\r\n            //      Queries the store for objects.\r\n            // query: Object\r\n            //      The query to use for retrieving objects from the store.\r\n            // options: dojo/store/api/Store.QueryOptions?\r\n            //      The optional arguments to apply to the resultset.\r\n            // returns: dojo/store/api/Store.QueryResults\r\n            //      The results of the query, extended with iterative methods.\r\n            //\r\n            // example:\r\n            //      Given the following store:\r\n            //\r\n            //  |   var store = new Memory({\r\n            //  |       data: [\r\n            //  |           {id: 1, name: \"one\", prime: false },\r\n            //  |           {id: 2, name: \"two\", even: true, prime: true},\r\n            //  |           {id: 3, name: \"three\", prime: true},\r\n            //  |           {id: 4, name: \"four\", even: true, prime: false},\r\n            //  |           {id: 5, name: \"five\", prime: true}\r\n            //  |       ]\r\n            //  |   });\r\n            //\r\n            //  ...find all items where \"prime\" is true:\r\n            //\r\n            //  |   var results = store.query({ prime: true });\r\n            //\r\n            //  ...or find all items where \"even\" is true:\r\n            //\r\n            //  |   var results = store.query({ even: true });\r\n            return QueryResults(this.queryEngine(query, options)(this.data));\r\n        },\r\n\r\n        setData: function(data){\r\n            // summary:\r\n            //      Sets the given data as the source for this store, and indexes it\r\n            // data: Object[]\r\n            //      An array of objects to use as the source of data.\r\n            if(data.items){\r\n                // just for convenience with the data format IFRS expects\r\n                this.idProperty = data.identifier || this.idProperty;\r\n                data = this.data = data.items;\r\n            }else{\r\n                this.data = data;\r\n            }\r\n            this.index = {};\r\n            for(var i = 0, l = data.length; i < l; i++){\r\n                this.index[data[i][this.idProperty]] = i;\r\n            }\r\n        },\r\n\r\n        init: function(options) {\r\n            for(var i in options){\r\n                this[i] = options[i];\r\n            }\r\n            this.setData(this.data || []);\r\n        }\r\n\r\n    });\r\n\r\n\treturn ArrayStore;\r\n});\ndefine('skylark-langx-aspect/aspect',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n\r\n  var undefined, nextId = 0;\r\n    function advise(dispatcher, type, advice, receiveArguments){\r\n        var previous = dispatcher[type];\r\n        var around = type == \"around\";\r\n        var signal;\r\n        if(around){\r\n            var advised = advice(function(){\r\n                return previous.advice(this, arguments);\r\n            });\r\n            signal = {\r\n                remove: function(){\r\n                    if(advised){\r\n                        advised = dispatcher = advice = null;\r\n                    }\r\n                },\r\n                advice: function(target, args){\r\n                    return advised ?\r\n                        advised.apply(target, args) :  // called the advised function\r\n                        previous.advice(target, args); // cancelled, skip to next one\r\n                }\r\n            };\r\n        }else{\r\n            // create the remove handler\r\n            signal = {\r\n                remove: function(){\r\n                    if(signal.advice){\r\n                        var previous = signal.previous;\r\n                        var next = signal.next;\r\n                        if(!next && !previous){\r\n                            delete dispatcher[type];\r\n                        }else{\r\n                            if(previous){\r\n                                previous.next = next;\r\n                            }else{\r\n                                dispatcher[type] = next;\r\n                            }\r\n                            if(next){\r\n                                next.previous = previous;\r\n                            }\r\n                        }\r\n\r\n                        // remove the advice to signal that this signal has been removed\r\n                        dispatcher = advice = signal.advice = null;\r\n                    }\r\n                },\r\n                id: nextId++,\r\n                advice: advice,\r\n                receiveArguments: receiveArguments\r\n            };\r\n        }\r\n        if(previous && !around){\r\n            if(type == \"after\"){\r\n                // add the listener to the end of the list\r\n                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug\r\n                while(previous.next && (previous = previous.next)){}\r\n                previous.next = signal;\r\n                signal.previous = previous;\r\n            }else if(type == \"before\"){\r\n                // add to beginning\r\n                dispatcher[type] = signal;\r\n                signal.next = previous;\r\n                previous.previous = signal;\r\n            }\r\n        }else{\r\n            // around or first one just replaces\r\n            dispatcher[type] = signal;\r\n        }\r\n        return signal;\r\n    }\r\n    function aspect(type){\r\n        return function(target, methodName, advice, receiveArguments){\r\n            var existing = target[methodName], dispatcher;\r\n            if(!existing || existing.target != target){\r\n                // no dispatcher in place\r\n                target[methodName] = dispatcher = function(){\r\n                    var executionId = nextId;\r\n                    // before advice\r\n                    var args = arguments;\r\n                    var before = dispatcher.before;\r\n                    while(before){\r\n                        args = before.advice.apply(this, args) || args;\r\n                        before = before.next;\r\n                    }\r\n                    // around advice\r\n                    if(dispatcher.around){\r\n                        var results = dispatcher.around.advice(this, args);\r\n                    }\r\n                    // after advice\r\n                    var after = dispatcher.after;\r\n                    while(after && after.id < executionId){\r\n                        if(after.receiveArguments){\r\n                            var newResults = after.advice.apply(this, args);\r\n                            // change the return value only if a new value was returned\r\n                            results = newResults === undefined ? results : newResults;\r\n                        }else{\r\n                            results = after.advice.call(this, results, args);\r\n                        }\r\n                        after = after.next;\r\n                    }\r\n                    return results;\r\n                };\r\n                if(existing){\r\n                    dispatcher.around = {advice: function(target, args){\r\n                        return existing.apply(target, args);\r\n                    }};\r\n                }\r\n                dispatcher.target = target;\r\n            }\r\n            var results = advise((dispatcher || existing), type, advice, receiveArguments);\r\n            advice = null;\r\n            return results;\r\n        };\r\n    }\r\n\r\n    return skylark.attach(\"langx.aspect\",{\r\n        after: aspect(\"after\"),\r\n \r\n        around: aspect(\"around\"),\r\n        \r\n        before: aspect(\"before\")\r\n    });\r\n});\ndefine('skylark-langx-aspect/main',[\r\n\t\"./aspect\"\r\n],function(aspect){\r\n\treturn aspect;\r\n});\ndefine('skylark-langx-aspect', ['skylark-langx-aspect/main'], function (main) { return main; });\n\ndefine('skylark-langx/aspect',[\r\n    \"skylark-langx-aspect\"\r\n],function(aspect){\r\n  return aspect;\r\n});\ndefine('skylark-langx-funcs/funcs',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n\tvar mixin = objects.mixin,\r\n        slice = Array.prototype.slice,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString;\r\n\r\n    function defer(fn) {\r\n        if (requestAnimationFrame) {\r\n            requestAnimationFrame(fn);\r\n        } else {\r\n            setTimeoutout(fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function noop() {\r\n    }\r\n\r\n    function proxy(fn, context) {\r\n        var args = (2 in arguments) && slice.call(arguments, 2)\r\n        if (isFunction(fn)) {\r\n            var proxyFn = function() {\r\n                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);\r\n            }\r\n            return proxyFn;\r\n        } else if (isString(context)) {\r\n            if (args) {\r\n                args.unshift(fn[context], fn)\r\n                return proxy.apply(null, args)\r\n            } else {\r\n                return proxy(fn[context], fn);\r\n            }\r\n        } else {\r\n            throw new TypeError(\"expected function\");\r\n        }\r\n    }\r\n\r\n    function debounce(fn, wait) {\r\n        var timeout;\r\n        return function () {\r\n            var context = this, args = arguments;\r\n            var later = function () {\r\n                timeout = null;\r\n                fn.apply(context, args);\r\n            };\r\n            if (timeout) clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n   \r\n    var delegate = (function() {\r\n        // boodman/crockford delegation w/ cornford optimization\r\n        function TMP() {}\r\n        return function(obj, props) {\r\n            TMP.prototype = obj;\r\n            var tmp = new TMP();\r\n            TMP.prototype = null;\r\n            if (props) {\r\n                mixin(tmp, props);\r\n            }\r\n            return tmp; // Object\r\n        };\r\n    })();\r\n\r\n  var templateSettings = {\r\n    evaluate: /<%([\\s\\S]+?)%>/g,\r\n    interpolate: /<%=([\\s\\S]+?)%>/g,\r\n    escape: /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n\r\n  function template(text, settings, oldSettings) {\r\n    if (!settings && oldSettings) settings = oldSettings;\r\n    settings = objects.defaults({}, settings,templateSettings);\r\n\r\n    // Combine delimiters into one regular expression via alternation.\r\n    var matcher = RegExp([\r\n      (settings.escape || noMatch).source,\r\n      (settings.interpolate || noMatch).source,\r\n      (settings.evaluate || noMatch).source\r\n    ].join('|') + '|$', 'g');\r\n\r\n    // Compile the template source, escaping string literals appropriately.\r\n    var index = 0;\r\n    var source = \"__p+='\";\r\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\r\n      index = offset + match.length;\r\n\r\n      if (escape) {\r\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n      } else if (interpolate) {\r\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n      } else if (evaluate) {\r\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n      }\r\n\r\n      // Adobe VMs need the match returned to produce the correct offset.\r\n      return match;\r\n    });\r\n    source += \"';\\n\";\r\n\r\n    // If a variable is not specified, place data values in local scope.\r\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n      source + 'return __p;\\n';\r\n\r\n    var render;\r\n    try {\r\n      render = new Function(settings.variable || 'obj', '_', source);\r\n    } catch (e) {\r\n      e.source = source;\r\n      throw e;\r\n    }\r\n\r\n    var template = function(data) {\r\n      return render.call(this, data, _);\r\n    };\r\n\r\n    // Provide the compiled source as a convenience for precompilation.\r\n    var argument = settings.variable || 'obj';\r\n    template.source = 'function(' + argument + '){\\n' + source + '}';\r\n\r\n    return template;\r\n  };\r\n\r\n    return skylark.attach(\"langx.funcs\",{\r\n        debounce: debounce,\r\n\r\n        delegate: delegate,\r\n\r\n        defer: defer,\r\n\r\n        noop : noop,\r\n\r\n        proxy: proxy,\r\n\r\n        returnTrue: function() {\r\n            return true;\r\n        },\r\n\r\n        returnFalse: function() {\r\n            return false;\r\n        },\r\n\r\n        templateSettings : templateSettings,\r\n        template : template\r\n    });\r\n});\ndefine('skylark-langx-funcs/main',[\r\n\t\"./funcs\"\r\n],function(funcs){\r\n\treturn funcs;\r\n});\ndefine('skylark-langx-funcs', ['skylark-langx-funcs/main'], function (main) { return main; });\n\ndefine('skylark-langx-async/Deferred',[\r\n    \"skylark-langx-arrays\",\r\n\t\"skylark-langx-funcs\",\r\n    \"skylark-langx-objects\"\r\n],function(arrays,funcs,objects){\r\n    \"use strict\";\r\n    \r\n    var  PGLISTENERS = Symbol ? Symbol() : '__pglisteners',\r\n         PGNOTIFIES = Symbol ? Symbol() : '__pgnotifies';\r\n\r\n    var slice = Array.prototype.slice,\r\n        proxy = funcs.proxy,\r\n        makeArray = arrays.makeArray,\r\n        result = objects.result,\r\n        mixin = objects.mixin;\r\n\r\n    mixin(Promise.prototype,{\r\n        always: function(handler) {\r\n            //this.done(handler);\r\n            //this.fail(handler);\r\n            this.then(handler,handler);\r\n            return this;\r\n        },\r\n        done : function() {\r\n            for (var i = 0;i<arguments.length;i++) {\r\n                this.then(arguments[i]);\r\n            }\r\n            return this;\r\n        },\r\n        fail : function(handler) { \r\n            //return mixin(Promise.prototype.catch.call(this,handler),added);\r\n            //return this.then(null,handler);\r\n            this.catch(handler);\r\n            return this;\r\n         }\r\n    });\r\n\r\n\r\n    var Deferred = function() {\r\n        var self = this,\r\n            p = this.promise = new Promise(function(resolve, reject) {\r\n                self._resolve = resolve;\r\n                self._reject = reject;\r\n            });\r\n\r\n        wrapPromise(p,self);\r\n\r\n        this[PGLISTENERS] = [];\r\n        this[PGNOTIFIES] = [];\r\n\r\n        //this.resolve = Deferred.prototype.resolve.bind(this);\r\n        //this.reject = Deferred.prototype.reject.bind(this);\r\n        //this.progress = Deferred.prototype.progress.bind(this);\r\n\r\n    };\r\n\r\n    function wrapPromise(p,d) {\r\n        var   added = {\r\n                state : function() {\r\n                    if (d.isResolved()) {\r\n                        return 'resolved';\r\n                    }\r\n                    if (d.isRejected()) {\r\n                        return 'rejected';\r\n                    }\r\n                    return 'pending';\r\n                },\r\n                then : function(onResolved,onRejected,onProgress) {\r\n                    if (onProgress) {\r\n                        this.progress(onProgress);\r\n                    }\r\n                    return wrapPromise(Promise.prototype.then.call(this,\r\n                            onResolved && function(args) {\r\n                                if (args && args.__ctx__ !== undefined) {\r\n                                    return onResolved.apply(args.__ctx__,args);\r\n                                } else {\r\n                                    return onResolved(args);\r\n                                }\r\n                            },\r\n                            onRejected && function(args){\r\n                                if (args && args.__ctx__ !== undefined) {\r\n                                    return onRejected.apply(args.__ctx__,args);\r\n                                } else {\r\n                                    return onRejected(args);\r\n                                }\r\n                            }));\r\n                },\r\n                progress : function(handler) {\r\n                    d[PGNOTIFIES].forEach(function (value) {\r\n                        handler(value);\r\n                    });\r\n                    d[PGLISTENERS].push(handler);\r\n                    return this;\r\n                }\r\n\r\n            };\r\n\r\n        added.pipe = added.then;\r\n        return mixin(p,added);\r\n\r\n    }\r\n\r\n    Deferred.prototype.resolve = function(value) {\r\n        var args = slice.call(arguments);\r\n        return this.resolveWith(null,args);\r\n    };\r\n\r\n    Deferred.prototype.resolveWith = function(context,args) {\r\n        args = args ? makeArray(args) : []; \r\n        args.__ctx__ = context;\r\n        this._resolve(args);\r\n        this._resolved = true;\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.notify = function(value) {\r\n        try {\r\n            this[PGNOTIFIES].push(value);\r\n\r\n            return this[PGLISTENERS].forEach(function (listener) {\r\n                return listener(value);\r\n            });\r\n        } catch (error) {\r\n          this.reject(error);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.reject = function(reason) {\r\n        var args = slice.call(arguments);\r\n        return this.rejectWith(null,args);\r\n    };\r\n\r\n    Deferred.prototype.rejectWith = function(context,args) {\r\n        args = args ? makeArray(args) : []; \r\n        args.__ctx__ = context;\r\n        this._reject(args);\r\n        this._rejected = true;\r\n        return this;\r\n    };\r\n\r\n    Deferred.prototype.isResolved = function() {\r\n        return !!this._resolved;\r\n    };\r\n\r\n    Deferred.prototype.isRejected = function() {\r\n        return !!this._rejected;\r\n    };\r\n\r\n    Deferred.prototype.then = function(callback, errback, progback) {\r\n        var p = result(this,\"promise\");\r\n        return p.then(callback, errback, progback);\r\n    };\r\n\r\n    Deferred.prototype.progress = function(progback){\r\n        var p = result(this,\"promise\");\r\n        return p.progress(progback);\r\n    };\r\n   \r\n    Deferred.prototype.catch = function(errback) {\r\n        var p = result(this,\"promise\");\r\n        return p.catch(errback);\r\n    };\r\n\r\n\r\n    Deferred.prototype.done  = function() {\r\n        var p = result(this,\"promise\");\r\n        return p.done.apply(p,arguments);\r\n    };\r\n\r\n    Deferred.prototype.fail = function(errback) {\r\n        var p = result(this,\"promise\");\r\n        return p.fail(errback);\r\n    };\r\n\r\n\r\n    Deferred.all = function(array) {\r\n        //return wrapPromise(Promise.all(array));\r\n        var d = new Deferred();\r\n        Promise.all(array).then(d.resolve.bind(d),d.reject.bind(d));\r\n        return result(d,\"promise\");\r\n    };\r\n\r\n    Deferred.first = function(array) {\r\n        return wrapPromise(Promise.race(array));\r\n    };\r\n\r\n\r\n    Deferred.when = function(valueOrPromise, callback, errback, progback) {\r\n        var receivedPromise = valueOrPromise && typeof valueOrPromise.then === \"function\";\r\n        var nativePromise = receivedPromise && valueOrPromise instanceof Promise;\r\n\r\n        if (!receivedPromise) {\r\n            if (arguments.length > 1) {\r\n                return callback ? callback(valueOrPromise) : valueOrPromise;\r\n            } else {\r\n                return new Deferred().resolve(valueOrPromise);\r\n            }\r\n        } else if (!nativePromise) {\r\n            var deferred = new Deferred(valueOrPromise.cancel);\r\n            valueOrPromise.then(proxy(deferred.resolve,deferred), proxy(deferred.reject,deferred), deferred.notify);\r\n            valueOrPromise = deferred.promise;\r\n        }\r\n\r\n        if (callback || errback || progback) {\r\n            return valueOrPromise.then(callback, errback, progback);\r\n        }\r\n        return valueOrPromise;\r\n    };\r\n\r\n    Deferred.reject = function(err) {\r\n        var d = new Deferred();\r\n        d.reject(err);\r\n        return d.promise;\r\n    };\r\n\r\n    Deferred.resolve = function(data) {\r\n        var d = new Deferred();\r\n        d.resolve.apply(d,arguments);\r\n        return d.promise;\r\n    };\r\n\r\n    Deferred.immediate = Deferred.resolve;\r\n\r\n    return Deferred;\r\n});\ndefine('skylark-langx-async/async',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-objects\",\r\n    \"./Deferred\"\r\n],function(skylark,objects,Deferred){\r\n    var each = objects.each;\r\n    \r\n    var async = {\r\n        Deferred : Deferred,\r\n\r\n        parallel : function(arr,args,ctx) {\r\n            var rets = [];\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            each(arr,function(i,func){\r\n                rets.push(func.apply(ctx,args));\r\n            });\r\n\r\n            return Deferred.all(rets);\r\n        },\r\n\r\n        series : function(arr,args,ctx) {\r\n            var rets = [],\r\n                d = new Deferred(),\r\n                p = d.promise;\r\n\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            d.resolve();\r\n            each(arr,function(i,func){\r\n                p = p.then(function(){\r\n                    return func.apply(ctx,args);\r\n                });\r\n                rets.push(p);\r\n            });\r\n\r\n            return Deferred.all(rets);\r\n        },\r\n\r\n        waterful : function(arr,args,ctx) {\r\n            var d = new Deferred(),\r\n                p = d.promise;\r\n\r\n            ctx = ctx || null;\r\n            args = args || [];\r\n\r\n            d.resolveWith(ctx,args);\r\n\r\n            each(arr,function(i,func){\r\n                p = p.then(func);\r\n            });\r\n            return p;\r\n        }\r\n    };\r\n\r\n\treturn skylark.attach(\"langx.async\",async);\t\r\n});\ndefine('skylark-langx-async/main',[\r\n\t\"./async\"\r\n],function(async){\r\n\treturn async;\r\n});\ndefine('skylark-langx-async', ['skylark-langx-async/main'], function (main) { return main; });\n\ndefine('skylark-langx/async',[\r\n    \"skylark-langx-async\"\r\n],function(async){\r\n    return async;\r\n});\ndefine('skylark-langx-datetimes/datetimes',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n     function parseMilliSeconds(str) {\r\n\r\n        var strs = str.split(' ');\r\n        var number = parseInt(strs[0]);\r\n\r\n        if (isNaN(number)){\r\n            return 0;\r\n        }\r\n\r\n        var min = 60000 * 60;\r\n\r\n        switch (strs[1].trim().replace(/\\./g, '')) {\r\n            case 'minutes':\r\n            case 'minute':\r\n            case 'min':\r\n            case 'mm':\r\n            case 'm':\r\n                return 60000 * number;\r\n            case 'hours':\r\n            case 'hour':\r\n            case 'HH':\r\n            case 'hh':\r\n            case 'h':\r\n            case 'H':\r\n                return min * number;\r\n            case 'seconds':\r\n            case 'second':\r\n            case 'sec':\r\n            case 'ss':\r\n            case 's':\r\n                return 1000 * number;\r\n            case 'days':\r\n            case 'day':\r\n            case 'DD':\r\n            case 'dd':\r\n            case 'd':\r\n                return (min * 24) * number;\r\n            case 'months':\r\n            case 'month':\r\n            case 'MM':\r\n            case 'M':\r\n                return (min * 24 * 28) * number;\r\n            case 'weeks':\r\n            case 'week':\r\n            case 'W':\r\n            case 'w':\r\n                return (min * 24 * 7) * number;\r\n            case 'years':\r\n            case 'year':\r\n            case 'yyyy':\r\n            case 'yy':\r\n            case 'y':\r\n                return (min * 24 * 365) * number;\r\n            default:\r\n                return 0;\r\n        }\r\n    };\r\n\t\r\n\treturn skylark.attach(\"langx.datetimes\",{\r\n\t\tparseMilliSeconds\r\n\t});\r\n});\ndefine('skylark-langx-datetimes/main',[\r\n\t\"./datetimes\"\r\n],function(datetimes){\r\n\treturn datetimes;\r\n});\ndefine('skylark-langx-datetimes', ['skylark-langx-datetimes/main'], function (main) { return main; });\n\ndefine('skylark-langx/datetimes',[\r\n    \"skylark-langx-datetimes\"\r\n],function(datetimes){\r\n    return datetimes;\r\n});\ndefine('skylark-langx/Deferred',[\r\n    \"skylark-langx-async/Deferred\"\r\n],function(Deferred){\r\n    return Deferred;\r\n});\ndefine('skylark-langx-emitter/Emitter',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-klass\"\r\n],function(skylark,types,objects,arrays,klass){\r\n    var slice = Array.prototype.slice,\r\n        compact = arrays.compact,\r\n        isDefined = types.isDefined,\r\n        isPlainObject = types.isPlainObject,\r\n        isFunction = types.isFunction,\r\n        isString = types.isString,\r\n        isEmptyObject = types.isEmptyObject,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin;\r\n\r\n    function parse(event) {\r\n        var segs = (\"\" + event).split(\".\");\r\n        return {\r\n            name: segs[0],\r\n            ns: segs.slice(1).join(\" \")\r\n        };\r\n    }\r\n\r\n    var Emitter = klass({\r\n        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {\r\n            var self = this,\r\n                _hub = this._hub || (this._hub = {});\r\n\r\n            if (isPlainObject(events)) {\r\n                ctx = callback;\r\n                each(events, function(type, fn) {\r\n                    self.on(type, selector, data, fn, ctx, one);\r\n                });\r\n                return this;\r\n            }\r\n\r\n            if (!isString(selector) && !isFunction(callback)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = selector;\r\n                selector = undefined;\r\n            }\r\n\r\n            if (isFunction(data)) {\r\n                ctx = callback;\r\n                callback = data;\r\n                data = null;\r\n            }\r\n\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(event) {\r\n                var parsed = parse(event),\r\n                    name = parsed.name,\r\n                    ns = parsed.ns;\r\n\r\n                (_hub[name] || (_hub[name] = [])).push({\r\n                    fn: callback,\r\n                    selector: selector,\r\n                    data: data,\r\n                    ctx: ctx,\r\n                    ns : ns,\r\n                    one: one\r\n                });\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        one: function(events, selector, data, callback, ctx) {\r\n            return this.on(events, selector, data, callback, ctx, 1);\r\n        },\r\n\r\n        emit: function(e /*,argument list*/ ) {\r\n            if (!this._hub) {\r\n                return this;\r\n            }\r\n\r\n            var self = this;\r\n\r\n            if (isString(e)) {\r\n                e = new CustomEvent(e);\r\n            }\r\n\r\n            Object.defineProperty(e,\"target\",{\r\n                value : this\r\n            });\r\n\r\n            var args = slice.call(arguments, 1);\r\n            if (isDefined(args)) {\r\n                args = [e].concat(args);\r\n            } else {\r\n                args = [e];\r\n            }\r\n            [e.type || e.name, \"all\"].forEach(function(eventName) {\r\n                var parsed = parse(eventName),\r\n                    name = parsed.name,\r\n                    ns = parsed.ns;\r\n\r\n                var listeners = self._hub[name];\r\n                if (!listeners) {\r\n                    return;\r\n                }\r\n\r\n                var len = listeners.length,\r\n                    reCompact = false;\r\n\r\n                for (var i = 0; i < len; i++) {\r\n                    var listener = listeners[i];\r\n                    if (ns && (!listener.ns ||  !listener.ns.startsWith(ns))) {\r\n                        continue;\r\n                    }\r\n                    if (e.data) {\r\n                        if (listener.data) {\r\n                            e.data = mixin({}, listener.data, e.data);\r\n                        }\r\n                    } else {\r\n                        e.data = listener.data || null;\r\n                    }\r\n                    listener.fn.apply(listener.ctx, args);\r\n                    if (listener.one) {\r\n                        listeners[i] = null;\r\n                        reCompact = true;\r\n                    }\r\n                }\r\n\r\n                if (reCompact) {\r\n                    self._hub[eventName] = compact(listeners);\r\n                }\r\n\r\n            });\r\n            return this;\r\n        },\r\n\r\n        listened: function(event) {\r\n            var evtArr = ((this._hub || (this._events = {}))[event] || []);\r\n            return evtArr.length > 0;\r\n        },\r\n\r\n        listenTo: function(obj, event, callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                obj.one(event, callback, this);\r\n            } else {\r\n                obj.on(event, callback, this);\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event, callback) {\r\n            return this.listenTo(obj, event, callback, 1);\r\n        },\r\n\r\n        off: function(events, callback) {\r\n            var _hub = this._hub || (this._hub = {});\r\n            if (isString(events)) {\r\n                events = events.split(/\\s/)\r\n            }\r\n\r\n            events.forEach(function(event) {\r\n                var parsed = parse(event),\r\n                    name = parsed.name,\r\n                    ns = parsed.ns;\r\n\r\n                var evts = _hub[name];\r\n\r\n                if (evts) {\r\n                    var liveEvents = [];\r\n\r\n                    if (callback || ns) {\r\n                        for (var i = 0, len = evts.length; i < len; i++) {\r\n                            \r\n                            if (callback && evts[i].fn !== callback && evts[i].fn._ !== callback) {\r\n                                liveEvents.push(evts[i]);\r\n                                continue;\r\n                            } \r\n\r\n                            if (ns && (!evts[i].ns || evts[i].ns.indexOf(ns)!=0)) {\r\n                                liveEvents.push(evts[i]);\r\n                                continue;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (liveEvents.length) {\r\n                        _hub[name] = liveEvents;\r\n                    } else {\r\n                        delete _hub[name];\r\n                    }\r\n\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    var listeningEvent = listeningEvents[eventName];\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        trigger  : function() {\r\n            return this.emit.apply(this,arguments);\r\n        }\r\n    });\r\n\r\n    Emitter.createEvent = function (type,props) {\r\n        var e = new CustomEvent(type,props);\r\n        return safeMixin(e, props);\r\n    };\r\n\r\n    return skylark.attach(\"langx.Emitter\",Emitter);\r\n\r\n});\ndefine('skylark-langx-emitter/Evented',[\r\n  \"skylark-langx-ns/ns\",\r\n\t\"./Emitter\"\r\n],function(skylark,Emitter){\r\n\treturn skylark.attach(\"langx.Evented\",Emitter);\r\n});\ndefine('skylark-langx-emitter/main',[\r\n\t\"./Emitter\",\r\n\t\"./Evented\"\r\n],function(Emitter){\r\n\treturn Emitter;\r\n});\ndefine('skylark-langx-emitter', ['skylark-langx-emitter/main'], function (main) { return main; });\n\ndefine('skylark-langx/Emitter',[\r\n    \"skylark-langx-emitter\"\r\n],function(Evented){\r\n    return Evented;\r\n});\ndefine('skylark-langx/Evented',[\r\n    \"skylark-langx-emitter\"\r\n],function(Evented){\r\n    return Evented;\r\n});\ndefine('skylark-langx/funcs',[\r\n    \"skylark-langx-funcs\"\r\n],function(funcs){\r\n    return funcs;\r\n});\ndefine('skylark-langx-hoster/hoster',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n\t// The javascript host environment, brower and nodejs are supported.\r\n\tvar hoster = {\r\n\t\t\"isBrowser\" : true, // default\r\n\t\t\"isNode\" : null,\r\n\t\t\"global\" : this,\r\n\t\t\"browser\" : null,\r\n\t\t\"node\" : null\r\n\t};\r\n\r\n\tif (typeof process == \"object\" && process.versions && process.versions.node && process.versions.v8) {\r\n\t\thoster.isNode = true;\r\n\t\thoster.isBrowser = false;\r\n\t}\r\n\r\n\thoster.global = (function(){\r\n\t\tif (typeof global !== 'undefined' && typeof global !== 'function') {\r\n\t\t\t// global spec defines a reference to the global object called 'global'\r\n\t\t\t// https://github.com/tc39/proposal-global\r\n\t\t\t// `global` is also defined in NodeJS\r\n\t\t\treturn global;\r\n\t\t} else if (typeof window !== 'undefined') {\r\n\t\t\t// window is defined in browsers\r\n\t\t\treturn window;\r\n\t\t}\r\n\t\telse if (typeof self !== 'undefined') {\r\n\t\t\t// self is defined in WebWorkers\r\n\t\t\treturn self;\r\n\t\t}\r\n\t\treturn this;\r\n\t})();\r\n\r\n\tvar _document = null;\r\n\r\n\tObject.defineProperty(hoster,\"document\",function(){\r\n\t\tif (!_document) {\r\n\t\t\tvar w = typeof window === 'undefined' ? require('html-element') : window;\r\n\t\t\t_document = w.document;\r\n\t\t}\r\n\r\n\t\treturn _document;\r\n\t});\r\n\r\n\tif (hoster.isBrowser) {\r\n\t    function uaMatch( ua ) {\r\n\t\t    ua = ua.toLowerCase();\r\n\r\n\t\t    var match = /(chrome)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t      /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t      /(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec( ua ) ||\r\n\t\t      /(msie) ([\\w.]+)/.exec( ua ) ||\r\n\t\t      ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\\w.]+)|)/.exec( ua ) ||\r\n\t\t      [];\r\n\r\n\t\t    return {\r\n\t\t      browser: match[ 1 ] || '',\r\n\t\t      version: match[ 2 ] || '0'\r\n\t\t    };\r\n\t  \t};\r\n\r\n\t    var matched = uaMatch( navigator.userAgent );\r\n\r\n\t    var browser = hoster.browser = {};\r\n\r\n\t    if ( matched.browser ) {\r\n\t      browser[ matched.browser ] = true;\r\n\t      browser.version = matched.version;\r\n\t    }\r\n\r\n\t    // Chrome is Webkit, but Webkit is also Safari.\r\n\t    if ( browser.chrome ) {\r\n\t      browser.webkit = true;\r\n\t    } else if ( browser.webkit ) {\r\n\t      browser.safari = true;\r\n\t    }\r\n\t}\r\n\r\n\treturn  skylark.attach(\"langx.hoster\",hoster);\r\n});\ndefine('skylark-langx-hoster/main',[\r\n\t\"./hoster\"\r\n],function(hoster){\r\n\treturn hoster;\r\n});\ndefine('skylark-langx-hoster', ['skylark-langx-hoster/main'], function (main) { return main; });\n\ndefine('skylark-langx/hoster',[\r\n\t\"skylark-langx-hoster\"\r\n],function(hoster){\r\n\treturn hoster;\r\n});\ndefine('skylark-langx/numbers',[\r\n\t\"skylark-langx-numbers\"\r\n],function(numbers){\r\n\treturn numbers;\r\n});\ndefine('skylark-langx/objects',[\r\n    \"skylark-langx-objects\"\r\n],function(objects){\r\n    return objects;\r\n});\ndefine('skylark-langx-strings/strings',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n    // add default escape function for escaping HTML entities\r\n    var escapeCharMap = Object.freeze({\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#x27;',\r\n        '`': '&#x60;',\r\n        '=': '&#x3D;',\r\n    });\r\n    function replaceChar(c) {\r\n        return escapeCharMap[c];\r\n    }\r\n    var escapeChars = /[&<>\"'`=]/g;\r\n\r\n\r\n     /*\r\n     * Converts camel case into dashes.\r\n     * @param {String} str\r\n     * @return {String}\r\n     * @exapmle marginTop -> margin-top\r\n     */\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function escapeHTML(str) {\r\n        if (str == null) {\r\n            return '';\r\n        }\r\n        if (!str) {\r\n            return String(str);\r\n        }\r\n\r\n        return str.toString().replace(escapeChars, replaceChar);\r\n    }\r\n\r\n    function generateUUID() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0;\r\n            var v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n    var idCounter = 0;\r\n    function uniqueId (prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n\r\n    /**\r\n     * https://github.com/cho45/micro-template.js\r\n     * (c) cho45 http://cho45.github.com/mit-license\r\n     */\r\n    function template (id, data) {\r\n\r\n        function include(name, args) {\r\n            var stash = {};\r\n            for (var key in template.context.stash) if (template.context.stash.hasOwnProperty(key)) {\r\n                stash[key] = template.context.stash[key];\r\n            }\r\n            if (args) for (var key in args) if (args.hasOwnProperty(key)) {\r\n                stash[key] = args[key];\r\n            }\r\n            var context = template.context;\r\n            context.ret += template(name, stash);\r\n            template.context = context;\r\n        }\r\n\r\n        function wrapper(name, fun) {\r\n            var current = template.context.ret;\r\n            template.context.ret = '';\r\n            fun.apply(template.context);\r\n            var content = template.context.ret;\r\n            var orig_content = template.context.stash.content;\r\n            template.context.stash.content = content;\r\n            template.context.ret = current + template(name, template.context.stash);\r\n            template.context.stash.content = orig_content;\r\n        }\r\n\r\n        var me = arguments.callee;\r\n        if (!me.cache[id]) me.cache[id] = (function () {\r\n            var name = id, string = /^[\\w\\-]+$/.test(id) ? me.get(id): (name = 'template(string)', id); // no warnings\r\n            var line = 1, body = (\r\n                \"try { \" +\r\n                    (me.variable ?  \"var \" + me.variable + \" = this.stash;\" : \"with (this.stash) { \") +\r\n                        \"this.ret += '\"  +\r\n                        string.\r\n                            replace(/<%/g, '\\x11').replace(/%>/g, '\\x13'). // if you want other tag, just edit this line\r\n                            replace(/'(?![^\\x11\\x13]+?\\x13)/g, '\\\\x27').\r\n                            replace(/^\\s*|\\s*$/g, '').\r\n                            replace(/\\n|\\r\\n/g, function () { return \"';\\nthis.line = \" + (++line) + \"; this.ret += '\\\\n\" }).\r\n                            replace(/\\x11=raw(.+?)\\x13/g, \"' + ($1) + '\").\r\n                            replace(/\\x11=(.+?)\\x13/g, \"' + this.escapeHTML($1) + '\").\r\n                            replace(/\\x11(.+?)\\x13/g, \"'; $1; this.ret += '\") +\r\n                    \"'; \" + (me.variable ? \"\" : \"}\") + \"return this.ret;\" +\r\n                \"} catch (e) { throw 'TemplateError: ' + e + ' (on \" + name + \"' + ' line ' + this.line + ')'; } \" +\r\n                \"//@ sourceURL=\" + name + \"\\n\" // source map\r\n            ).replace(/this\\.ret \\+= '';/g, '');\r\n            var func = new Function(body);\r\n            var map  = { '&' : '&amp;', '<' : '&lt;', '>' : '&gt;', '\\x22' : '&#x22;', '\\x27' : '&#x27;' };\r\n            var escapeHTML = function (string) { return (''+string).replace(/[&<>\\'\\\"]/g, function (_) { return map[_] }) };\r\n            return function (stash) { return func.call(me.context = { escapeHTML: escapeHTML, line: 1, ret : '', stash: stash }) };\r\n        })();\r\n        return data ? me.cache[id](data) : me.cache[id];\r\n    }\r\n\r\n    template.cache = {};\r\n    \r\n\r\n    template.get = function (id) {\r\n        return document.getElementById(id).innerHTML;\r\n    };\r\n\r\n    function rtrim(str) {\r\n        return str.replace(/\\s+$/g, '');\r\n    }\r\n\r\n    // Slugify a string\r\n    function slugify(str) {\r\n        str = str.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        // Make the string lowercase\r\n        str = str.toLowerCase();\r\n\r\n        // Remove accents, swap ñ for n, etc\r\n        var from = \"ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;\";\r\n        var to   = \"AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------\";\r\n        for (var i=0, l=from.length ; i<l ; i++) {\r\n            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\r\n        }\r\n\r\n        // Remove invalid chars\r\n        //str = str.replace(/[^a-z0-9 -]/g, '') \r\n        // Collapse whitespace and replace by -\r\n        str = str.replace(/\\s+/g, '-') \r\n        // Collapse dashes\r\n        .replace(/-+/g, '-'); \r\n\r\n        return str;\r\n    }    \r\n\r\n    // return boolean if string 'true' or string 'false', or if a parsable string which is a number\r\n    // also supports JSON object and/or arrays parsing\r\n    function toType(str) {\r\n        var type = typeof str;\r\n        if (type !== 'string') {\r\n            return str;\r\n        }\r\n        var nb = parseFloat(str);\r\n        if (!isNaN(nb) && isFinite(str)) {\r\n            return nb;\r\n        }\r\n        if (str === 'false') {\r\n            return false;\r\n        }\r\n        if (str === 'true') {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            str = JSON.parse(str);\r\n        } catch (e) {}\r\n\r\n        return str;\r\n    }\r\n\r\n\treturn skylark.attach(\"langx.strings\",{\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n        dasherize: dasherize,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        escapeHTML : escapeHTML,\r\n\r\n        generateUUID : generateUUID,\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        rtrim : rtrim,\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n\r\n        substitute: substitute,\r\n\r\n        slugify : slugify,\r\n\r\n        template : template,\r\n\r\n        trim: trim,\r\n\r\n        uniqueId: uniqueId,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }\r\n\t}) ; \r\n\r\n});\ndefine('skylark-langx-strings/main',[\r\n\t\"./strings\"\r\n],function(strings){\r\n\treturn strings;\r\n});\ndefine('skylark-langx-strings', ['skylark-langx-strings/main'], function (main) { return main; });\n\ndefine('skylark-langx/strings',[\r\n    \"skylark-langx-strings\"\r\n],function(strings){\r\n    return strings;\r\n});\ndefine('skylark-langx/Stateful',[\r\n\t\"./Evented\",\r\n  \"./strings\",\r\n  \"./objects\"\r\n],function(Evented,strings,objects){\r\n    var isEqual = objects.isEqual,\r\n        mixin = objects.mixin,\r\n        result = objects.result,\r\n        isEmptyObject = objects.isEmptyObject,\r\n        clone = objects.clone,\r\n        uniqueId = strings.uniqueId;\r\n\r\n    var Stateful = Evented.inherit({\r\n        _construct : function(attributes, options) {\r\n            var attrs = attributes || {};\r\n            options || (options = {});\r\n            this.cid = uniqueId(this.cidPrefix);\r\n            this.attributes = {};\r\n            if (options.collection) this.collection = options.collection;\r\n            if (options.parse) attrs = this.parse(attrs, options) || {};\r\n            var defaults = result(this, 'defaults');\r\n            attrs = mixin({}, defaults, attrs);\r\n            this.set(attrs, options);\r\n            this.changed = {};\r\n        },\r\n\r\n        // A hash of attributes whose current and previous value differ.\r\n        changed: null,\r\n\r\n        // The value returned during the last failed validation.\r\n        validationError: null,\r\n\r\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n        // CouchDB users may want to set this to `\"_id\"`.\r\n        idAttribute: 'id',\r\n\r\n        // The prefix is used to create the client id which is used to identify models locally.\r\n        // You may want to override this if you're experiencing name clashes with model ids.\r\n        cidPrefix: 'c',\r\n\r\n\r\n        // Return a copy of the model's `attributes` object.\r\n        toJSON: function(options) {\r\n          return clone(this.attributes);\r\n        },\r\n\r\n\r\n        // Get the value of an attribute.\r\n        get: function(attr) {\r\n          return this.attributes[attr];\r\n        },\r\n\r\n        // Returns `true` if the attribute contains a value that is not null\r\n        // or undefined.\r\n        has: function(attr) {\r\n          return this.get(attr) != null;\r\n        },\r\n\r\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\r\n        // the core primitive operation of a model, updating the data and notifying\r\n        // anyone who needs to know about the change in state. The heart of the beast.\r\n        set: function(key, val, options) {\r\n          if (key == null) return this;\r\n\r\n          // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n          var attrs;\r\n          if (typeof key === 'object') {\r\n            attrs = key;\r\n            options = val;\r\n          } else {\r\n            (attrs = {})[key] = val;\r\n          }\r\n\r\n          options || (options = {});\r\n\r\n          // Run validation.\r\n          if (!this._validate(attrs, options)) return false;\r\n\r\n          // Extract attributes and options.\r\n          var unset      = options.unset;\r\n          var silent     = options.silent;\r\n          var changes    = [];\r\n          var changing   = this._changing;\r\n          this._changing = true;\r\n\r\n          if (!changing) {\r\n            this._previousAttributes = clone(this.attributes);\r\n            this.changed = {};\r\n          }\r\n\r\n          var current = this.attributes;\r\n          var changed = this.changed;\r\n          var prev    = this._previousAttributes;\r\n\r\n          // For each `set` attribute, update or delete the current value.\r\n          for (var attr in attrs) {\r\n            val = attrs[attr];\r\n            if (!isEqual(current[attr], val)) changes.push(attr);\r\n            if (!isEqual(prev[attr], val)) {\r\n              changed[attr] = val;\r\n            } else {\r\n              delete changed[attr];\r\n            }\r\n            unset ? delete current[attr] : current[attr] = val;\r\n          }\r\n\r\n          // Update the `id`.\r\n          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\r\n\r\n          // Trigger all relevant attribute changes.\r\n          if (!silent) {\r\n            if (changes.length) this._pending = options;\r\n            for (var i = 0; i < changes.length; i++) {\r\n              this.trigger('change:' + changes[i], this, current[changes[i]], options);\r\n            }\r\n          }\r\n\r\n          // You might be wondering why there's a `while` loop here. Changes can\r\n          // be recursively nested within `\"change\"` events.\r\n          if (changing) return this;\r\n          if (!silent) {\r\n            while (this._pending) {\r\n              options = this._pending;\r\n              this._pending = false;\r\n              this.trigger('change', this, options);\r\n            }\r\n          }\r\n          this._pending = false;\r\n          this._changing = false;\r\n          return this;\r\n        },\r\n\r\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\r\n        // if the attribute doesn't exist.\r\n        unset: function(attr, options) {\r\n          return this.set(attr, void 0, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Clear all attributes on the model, firing `\"change\"`.\r\n        clear: function(options) {\r\n          var attrs = {};\r\n          for (var key in this.attributes) attrs[key] = void 0;\r\n          return this.set(attrs, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Determine if the model has changed since the last `\"change\"` event.\r\n        // If you specify an attribute name, determine if that attribute has changed.\r\n        hasChanged: function(attr) {\r\n          if (attr == null) return !isEmptyObject(this.changed);\r\n          return this.changed[attr] !== undefined;\r\n        },\r\n\r\n        // Return an object containing all the attributes that have changed, or\r\n        // false if there are no changed attributes. Useful for determining what\r\n        // parts of a view need to be updated and/or what attributes need to be\r\n        // persisted to the server. Unset attributes will be set to undefined.\r\n        // You can also pass an attributes object to diff against the model,\r\n        // determining if there *would be* a change.\r\n        changedAttributes: function(diff) {\r\n          if (!diff) return this.hasChanged() ? clone(this.changed) : false;\r\n          var old = this._changing ? this._previousAttributes : this.attributes;\r\n          var changed = {};\r\n          for (var attr in diff) {\r\n            var val = diff[attr];\r\n            if (isEqual(old[attr], val)) continue;\r\n            changed[attr] = val;\r\n          }\r\n          return !isEmptyObject(changed) ? changed : false;\r\n        },\r\n\r\n        // Get the previous value of an attribute, recorded at the time the last\r\n        // `\"change\"` event was fired.\r\n        previous: function(attr) {\r\n          if (attr == null || !this._previousAttributes) return null;\r\n          return this._previousAttributes[attr];\r\n        },\r\n\r\n        // Get all of the attributes of the model at the time of the previous\r\n        // `\"change\"` event.\r\n        previousAttributes: function() {\r\n          return clone(this._previousAttributes);\r\n        },\r\n\r\n        // Create a new model with identical attributes to this one.\r\n        clone: function() {\r\n          return new this.constructor(this.attributes);\r\n        },\r\n\r\n        // A model is new if it has never been saved to the server, and lacks an id.\r\n        isNew: function() {\r\n          return !this.has(this.idAttribute);\r\n        },\r\n\r\n        // Check if the model is currently in a valid state.\r\n        isValid: function(options) {\r\n          return this._validate({}, mixin({}, options, {validate: true}));\r\n        },\r\n\r\n        // Run validation against the next complete set of model attributes,\r\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\r\n        _validate: function(attrs, options) {\r\n          if (!options.validate || !this.validate) return true;\r\n          attrs = mixin({}, this.attributes, attrs);\r\n          var error = this.validationError = this.validate(attrs, options) || null;\r\n          if (!error) return true;\r\n          this.trigger('invalid', this, error, mixin(options, {validationError: error}));\r\n          return false;\r\n        }\r\n    });\r\n\r\n\treturn Stateful;\r\n});\ndefine('skylark-langx-topic/topic',[\r\n\t\"skylark-langx-ns\",\r\n\t\"skylark-langx-emitter/Evented\"\r\n],function(skylark,Evented){\r\n\tvar hub = new Evented();\r\n\r\n\treturn skylark.attach(\"langx.topic\",{\r\n\t    publish: function(name, arg1,argn) {\r\n\t        var data = [].slice.call(arguments, 1);\r\n\r\n\t        return hub.trigger({\r\n\t            type : name,\r\n\t            data : data\r\n\t        });\r\n\t    },\r\n\r\n        subscribe: function(name, listener,ctx) {\r\n        \tvar handler = function(e){\r\n                listener.apply(ctx,e.data);\r\n            };\r\n            hub.on(name, handler);\r\n            return {\r\n            \tremove : function(){\r\n            \t\thub.off(name,handler);\r\n            \t}\r\n            }\r\n\r\n        }\r\n\r\n\t});\r\n});\ndefine('skylark-langx-topic/main',[\r\n\t\"./topic\"\r\n],function(topic){\r\n\treturn topic;\r\n});\ndefine('skylark-langx-topic', ['skylark-langx-topic/main'], function (main) { return main; });\n\ndefine('skylark-langx/topic',[\r\n\t\"skylark-langx-topic\"\r\n],function(topic){\r\n\treturn topic;\r\n});\ndefine('skylark-langx/types',[\r\n    \"skylark-langx-types\"\r\n],function(types){\r\n    return types;\r\n});\ndefine('skylark-langx/langx',[\r\n    \"./skylark\",\r\n    \"./arrays\",\r\n    \"./ArrayStore\",\r\n    \"./aspect\",\r\n    \"./async\",\r\n    \"./datetimes\",\r\n    \"./Deferred\",\r\n    \"./Emitter\",\r\n    \"./Evented\",\r\n    \"./funcs\",\r\n    \"./hoster\",\r\n    \"./klass\",\r\n    \"./numbers\",\r\n    \"./objects\",\r\n    \"./Stateful\",\r\n    \"./strings\",\r\n    \"./topic\",\r\n    \"./types\"\r\n], function(skylark,arrays,ArrayStore,aspect,async,datetimes,Deferred,Emitter,Evented,funcs,hoster,klass,numbers,objects,Stateful,strings,topic,types) {\r\n    \"use strict\";\r\n    var toString = {}.toString,\r\n        concat = Array.prototype.concat,\r\n        indexOf = Array.prototype.indexOf,\r\n        slice = Array.prototype.slice,\r\n        filter = Array.prototype.filter,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin,\r\n        isFunction = types.isFunction;\r\n\r\n\r\n    function funcArg(context, arg, idx, payload) {\r\n        return isFunction(arg) ? arg.call(context, idx, payload) : arg;\r\n    }\r\n\r\n    function getQueryParams(url) {\r\n        var url = url || window.location.href,\r\n            segs = url.split(\"?\"),\r\n            params = {};\r\n\r\n        if (segs.length > 1) {\r\n            segs[1].split(\"&\").forEach(function(queryParam) {\r\n                var nv = queryParam.split('=');\r\n                params[nv[0]] = nv[1];\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n\r\n    function toPixel(value) {\r\n        // style values can be floats, client code may want\r\n        // to round for integer pixels.\r\n        return parseFloat(value) || 0;\r\n    }\r\n\r\n\r\n    var _uid = 1;\r\n\r\n    function uid(obj) {\r\n        return obj._uid || (obj._uid = _uid++);\r\n    }\r\n\r\n    function langx() {\r\n        return langx;\r\n    }\r\n\r\n    mixin(langx, {\r\n        createEvent : Emitter.createEvent,\r\n\r\n        funcArg: funcArg,\r\n\r\n        getQueryParams: getQueryParams,\r\n\r\n        toPixel: toPixel,\r\n\r\n        uid: uid,\r\n\r\n        URL: typeof window !== \"undefined\" ? window.URL || window.webkitURL : null\r\n\r\n    });\r\n\r\n\r\n    mixin(langx, arrays,aspect,datetimes,funcs,numbers,objects,strings,types,{\r\n        ArrayStore : ArrayStore,\r\n\r\n        async : async,\r\n        \r\n        Deferred: Deferred,\r\n\r\n        Emitter: Emitter,\r\n\r\n        Evented: Evented,\r\n\r\n        hoster : hoster,\r\n\r\n        klass : klass,\r\n       \r\n        Stateful: Stateful,\r\n\r\n        topic : topic\r\n    });\r\n\r\n    return skylark.langx = langx;\r\n});\ndefine('skylark-domx-browser/browser',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark,langx) {\r\n    \"use strict\";\r\n\r\n    var browser = langx.hoster.browser;\r\n \r\n    var checkedCssProperties = {\r\n            \"transitionproperty\": \"TransitionProperty\",\r\n        },\r\n        transEndEventNames = {\r\n          WebkitTransition : 'webkitTransitionEnd',\r\n          MozTransition    : 'transitionend',\r\n          OTransition      : 'oTransitionEnd otransitionend',\r\n          transition       : 'transitionend'\r\n        },\r\n        transEndEventName = null;\r\n\r\n\r\n    var css3PropPrefix = \"\",\r\n        css3StylePrefix = \"\",\r\n        css3EventPrefix = \"\",\r\n\r\n        cssStyles = {},\r\n        cssProps = {},\r\n\r\n        vendorPrefix,\r\n        vendorPrefixRE,\r\n        vendorPrefixesRE = /^(Webkit|webkit|O|Moz|moz|ms)(.*)$/,\r\n\r\n        document = window.document,\r\n        testEl = document.createElement(\"div\"),\r\n\r\n        matchesSelector = testEl.webkitMatchesSelector ||\r\n                          testEl.mozMatchesSelector ||\r\n                          testEl.oMatchesSelector ||\r\n                          testEl.matchesSelector,\r\n\r\n        requestFullScreen = testEl.requestFullscreen || \r\n                            testEl.webkitRequestFullscreen || \r\n                            testEl.mozRequestFullScreen || \r\n                            testEl.msRequestFullscreen,\r\n\r\n        exitFullScreen =  document.exitFullscreen ||\r\n                          document.webkitCancelFullScreen ||\r\n                          document.mozCancelFullScreen ||\r\n                          document.msExitFullscreen,\r\n\r\n        testStyle = testEl.style;\r\n\r\n    for (var name in testStyle) {\r\n        var matched = name.match(vendorPrefixRE || vendorPrefixesRE);\r\n        if (matched) {\r\n            if (!vendorPrefixRE) {\r\n                vendorPrefix = matched[1];\r\n                vendorPrefixRE = new RegExp(\"^(\" + vendorPrefix + \")(.*)$\");\r\n\r\n                css3StylePrefix = vendorPrefix;\r\n                css3PropPrefix = '-' + vendorPrefix.toLowerCase() + '-';\r\n                css3EventPrefix = vendorPrefix.toLowerCase();\r\n            }\r\n\r\n            cssStyles[langx.lowerFirst(matched[2])] = name;\r\n            var cssPropName = langx.dasherize(matched[2]);\r\n            cssProps[cssPropName] = css3PropPrefix + cssPropName;\r\n\r\n            if (transEndEventNames[name]) {\r\n              transEndEventName = transEndEventNames[name];\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!transEndEventName) {\r\n        if (testStyle[\"transition\"] !== undefined) {\r\n            transEndEventName = transEndEventNames[\"transition\"];\r\n        }\r\n    }\r\n\r\n    function normalizeCssEvent(name) {\r\n        return css3EventPrefix ? css3EventPrefix + name : name.toLowerCase();\r\n    }\r\n\r\n    function normalizeCssProperty(name) {\r\n        return cssProps[name] || name;\r\n    }\r\n\r\n    function normalizeStyleProperty(name) {\r\n        return cssStyles[name] || name;\r\n    }\r\n\r\n    langx.mixin(browser, {\r\n        css3PropPrefix: css3PropPrefix,\r\n\r\n        isIE : !!/msie/i.exec( window.navigator.userAgent ),\r\n\r\n        normalizeStyleProperty: normalizeStyleProperty,\r\n\r\n        normalizeCssProperty: normalizeCssProperty,\r\n\r\n        normalizeCssEvent: normalizeCssEvent,\r\n\r\n        matchesSelector: matchesSelector,\r\n\r\n        requestFullScreen : requestFullScreen,\r\n\r\n        exitFullscreen : requestFullScreen,\r\n\r\n        location: function() {\r\n            return window.location;\r\n        },\r\n\r\n        support : {\r\n\r\n        }\r\n\r\n    });\r\n\r\n    if  (transEndEventName) {\r\n        browser.support.transition = {\r\n            end : transEndEventName\r\n        };\r\n    }\r\n\r\n    testEl = null;\r\n\r\n    return skylark.attach(\"domx.browser\",browser);\r\n});\r\n\ndefine('skylark-domx-browser/main',[\r\n\t\"./browser\"\r\n],function(browser){\r\n\treturn browser;\r\n});\ndefine('skylark-domx-browser', ['skylark-domx-browser/main'], function (main) { return main; });\n\ndefine('skylark-domx-noder/noder',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\"\r\n], function(skylark, langx, browser) {\r\n    var isIE = !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g),\r\n        fragmentRE = /^\\s*<(\\w+|!)[^>]*>/,\r\n        singleTagRE = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,\r\n        div = document.createElement(\"div\"),\r\n        table = document.createElement('table'),\r\n        tableBody = document.createElement('tbody'),\r\n        tableRow = document.createElement('tr'),\r\n        containers = {\r\n            'tr': tableBody,\r\n            'tbody': table,\r\n            'thead': table,\r\n            'tfoot': table,\r\n            'td': tableRow,\r\n            'th': tableRow,\r\n            '*': div\r\n        },\r\n        rootNodeRE = /^(?:body|html)$/i,\r\n        map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n\r\n    function ensureNodes(nodes, copyByClone) {\r\n        if (!langx.isArrayLike(nodes)) {\r\n            nodes = [nodes];\r\n        }\r\n        if (copyByClone) {\r\n            nodes = map.call(nodes, function(node) {\r\n                return node.cloneNode(true);\r\n            });\r\n        }\r\n        return langx.flatten(nodes);\r\n    }\r\n\r\n    function nodeName(elm, chkName) {\r\n        var name = elm.nodeName && elm.nodeName.toLowerCase();\r\n        if (chkName !== undefined) {\r\n            return name === chkName.toLowerCase();\r\n        }\r\n        return name;\r\n    };\r\n\r\n\r\n    function activeElement(doc) {\r\n        doc = doc || document;\r\n        var el;\r\n\r\n        // Support: IE 9 only\r\n        // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\r\n        try {\r\n            el = doc.activeElement;\r\n        } catch ( error ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 9 - 11 only\r\n        // IE may return null instead of an element\r\n        // Interestingly, this only seems to occur when NOT in an iframe\r\n        if ( !el ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        // Support: IE 11 only\r\n        // IE11 returns a seemingly empty object in some cases when accessing\r\n        // document.activeElement from an <iframe>\r\n        if ( !el.nodeName ) {\r\n            el = doc.body;\r\n        }\r\n\r\n        return el;\r\n    };\r\n\r\n    function enhancePlaceContent(placing,node) {\r\n        if (langx.isFunction(placing)) {\r\n            return placing.apply(node,[]);\r\n        }\r\n        if (langx.isArrayLike(placing)) {\r\n            var neddsFlattern;\r\n            for (var i=0;i<placing.length;i++) {\r\n                if (langx.isFunction(placing[i])) {\r\n                    placing[i] = placing[i].apply(node,[]);\r\n                    if (langx.isArrayLike(placing[i])) {\r\n                        neddsFlattern = true;\r\n                    }\r\n                }\r\n            }\r\n            if (neddsFlattern) {\r\n                placing = langx.flatten(placing);\r\n            }\r\n        }\r\n        return placing;\r\n    }\r\n    function after(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone),\r\n                refNode = refNode.nextSibling;\r\n\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                if (refNode) {\r\n                    parent.insertBefore(nodes[i], refNode);\r\n                } else {\r\n                    parent.appendChild(nodes[i]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function append(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var parentNode = node,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            parentNode.appendChild(nodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function before(node, placing, copyByClone) {\r\n        placing = enhancePlaceContent(placing,node);\r\n        var refNode = node,\r\n            parent = refNode.parentNode;\r\n        if (parent) {\r\n            var nodes = ensureNodes(placing, copyByClone);\r\n            for (var i = 0; i < nodes.length; i++) {\r\n                parent.insertBefore(nodes[i], refNode);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Get the children of the specified node, including text and comment nodes.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contents(elm) {\r\n        if (nodeName(elm, \"iframe\")) {\r\n            return elm.contentDocument;\r\n        }\r\n        return elm.childNodes;\r\n    }\r\n\r\n    /*   \r\n     * Create a element and set attributes on it.\r\n     * @param {HTMLElement} tag\r\n     * @param {props} props\r\n     * @param } parent\r\n     */\r\n    function createElement(tag, props, parent) {\r\n        var node = document.createElement(tag);\r\n        if (props) {\r\n            for (var name in props) {\r\n                node.setAttribute(name, props[name]);\r\n            }\r\n        }\r\n        if (parent) {\r\n            append(parent, node);\r\n        }\r\n        return node;\r\n    }\r\n\r\n    /*   \r\n     * Create a DocumentFragment from the HTML fragment.\r\n     * @param {String} html\r\n     */\r\n    function createFragment(html) {\r\n        // A special case optimization for a single tag\r\n        html = langx.trim(html);\r\n        if (singleTagRE.test(html)) {\r\n            return [createElement(RegExp.$1)];\r\n        }\r\n\r\n        var name = fragmentRE.test(html) && RegExp.$1\r\n        if (!(name in containers)) {\r\n            name = \"*\"\r\n        }\r\n        var container = containers[name];\r\n        container.innerHTML = \"\" + html;\r\n        dom = slice.call(container.childNodes);\r\n\r\n        dom.forEach(function(node) {\r\n            container.removeChild(node);\r\n        })\r\n\r\n        return dom;\r\n    }\r\n\r\n    /*   \r\n     * Create a deep copy of the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {Boolean} deep\r\n     */\r\n    function clone(node, deep) {\r\n        var self = this,\r\n            clone;\r\n\r\n        // TODO: Add feature detection here in the future\r\n        if (!isIE || node.nodeType !== 1 || deep) {\r\n            return node.cloneNode(deep);\r\n        }\r\n\r\n        // Make a HTML5 safe shallow copy\r\n        if (!deep) {\r\n            clone = document.createElement(node.nodeName);\r\n\r\n            // Copy attribs\r\n            each(self.getAttribs(node), function(attr) {\r\n                self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));\r\n            });\r\n\r\n            return clone;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node .\r\n     * @param {String} node\r\n     * @param {Node} child\r\n     */\r\n    function contains(node, child) {\r\n        return isChildOf(child, node);\r\n    }\r\n\r\n    /*   \r\n     * Create a new Text node.\r\n     * @param {String} text\r\n     * @param {Node} child\r\n     */\r\n    function createTextNode(text) {\r\n        return document.createTextNode(text);\r\n    }\r\n\r\n    /*   \r\n     * Get the current document object.\r\n     */\r\n    function doc() {\r\n        return document;\r\n    }\r\n\r\n    /*   \r\n     * Remove all child nodes of the set of matched elements from the DOM.\r\n     * @param {Object} node\r\n     */\r\n    function empty(node) {\r\n        while (node.hasChildNodes()) {\r\n            var child = node.firstChild;\r\n            node.removeChild(child);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    var fulledEl = null;\r\n\r\n    function fullScreen(el) {\r\n        if (el === false) {\r\n            browser.exitFullScreen.apply(document);\r\n        } else if (el) {\r\n            browser.requestFullScreen.apply(el);\r\n            fulledEl = el;\r\n        } else {\r\n            return (\r\n                document.fullscreenElement ||\r\n                document.webkitFullscreenElement ||\r\n                document.mozFullScreenElement ||\r\n                document.msFullscreenElement\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    // Selectors\r\n    function focusable( element, hasTabindex ) {\r\n        var map, mapName, img, focusableIfVisible, fieldset,\r\n            nodeName = element.nodeName.toLowerCase();\r\n\r\n        if ( \"area\" === nodeName ) {\r\n            map = element.parentNode;\r\n            mapName = map.name;\r\n            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== \"map\" ) {\r\n                return false;\r\n            }\r\n            img = $( \"img[usemap='#\" + mapName + \"']\" );\r\n            return img.length > 0 && img.is( \":visible\" );\r\n        }\r\n\r\n        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {\r\n            focusableIfVisible = !element.disabled;\r\n\r\n            if ( focusableIfVisible ) {\r\n\r\n                // Form controls within a disabled fieldset are disabled.\r\n                // However, controls within the fieldset's legend do not get disabled.\r\n                // Since controls generally aren't placed inside legends, we skip\r\n                // this portion of the check.\r\n                fieldset = $( element ).closest( \"fieldset\" )[ 0 ];\r\n                if ( fieldset ) {\r\n                    focusableIfVisible = !fieldset.disabled;\r\n                }\r\n            }\r\n        } else if ( \"a\" === nodeName ) {\r\n            focusableIfVisible = element.href || hasTabindex;\r\n        } else {\r\n            focusableIfVisible = hasTabindex;\r\n        }\r\n\r\n        return focusableIfVisible && $( element ).is( \":visible\" ) && visible( $( element ) );\r\n    };\r\n\r\n\r\n   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi;\r\n \r\n    /*   \r\n     * Get the HTML contents of the first element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} html\r\n     */\r\n    function html(node, html) {\r\n        if (html === undefined) {\r\n            return node.innerHTML;\r\n        } else {\r\n            this.empty(node);\r\n            html = html || \"\";\r\n            if (langx.isString(html)) {\r\n                html = html.replace( rxhtmlTag, \"<$1></$2>\" );\r\n            }\r\n            if (langx.isString(html) || langx.isNumber(html)) {               \r\n                node.innerHTML = html;\r\n            } else if (langx.isArrayLike(html)) {\r\n                for (var i = 0; i < html.length; i++) {\r\n                    node.appendChild(html[i]);\r\n                }\r\n            } else {\r\n                node.appendChild(html);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*   \r\n     * Check to see if a dom node is a descendant of another dom node.\r\n     * @param {Node} node\r\n     * @param {Node} parent\r\n     * @param {Node} directly\r\n     */\r\n    function isChildOf(node, parent, directly) {\r\n        if (directly) {\r\n            return node.parentNode === parent;\r\n        }\r\n        if (document.documentElement.contains) {\r\n            return parent.contains(node);\r\n        }\r\n        while (node) {\r\n            if (parent === node) {\r\n                return true;\r\n            }\r\n\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is a document.\r\n     * @param {Node} node\r\n     */\r\n    function isDocument(node) {\r\n        return node != null && node.nodeType == node.DOCUMENT_NODE\r\n    }\r\n\r\n    /*   \r\n     * Check to see if a dom node is in the document\r\n     * @param {Node} node\r\n     */\r\n    function isInDocument(node) {\r\n      return (node === document.body) ? true : document.body.contains(node);\r\n    }        \r\n\r\n    var blockNodes = [\"div\", \"p\", \"ul\", \"ol\", \"li\", \"blockquote\", \"hr\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"table\"];\r\n\r\n    function isBlockNode(node) {\r\n        if (!node || node.nodeType === 3) {\r\n          return false;\r\n        }\r\n        return new RegExp(\"^(\" + (blockNodes.join('|')) + \")$\").test(node.nodeName.toLowerCase());\r\n    }\r\n\r\n\r\n    /*   \r\n     * Get the owner document object for the specified element.\r\n     * @param {Node} elm\r\n     */\r\n    function ownerDoc(elm) {\r\n        if (!elm) {\r\n            return document;\r\n        }\r\n\r\n        if (elm.nodeType == 9) {\r\n            return elm;\r\n        }\r\n\r\n        return elm.ownerDocument;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function ownerWindow(elm) {\r\n        var doc = ownerDoc(elm);\r\n        return doc.defaultView || doc.parentWindow;\r\n    }\r\n\r\n    /*   \r\n     * insert one or more nodes as the first children of the specified node.\r\n     * @param {Node} node\r\n     * @param {Node or ArrayLike} placing\r\n     * @param {Boolean Optional} copyByClone\r\n     */\r\n    function prepend(node, placing, copyByClone) {\r\n        var parentNode = node,\r\n            refNode = parentNode.firstChild,\r\n            nodes = ensureNodes(placing, copyByClone);\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            if (refNode) {\r\n                parentNode.insertBefore(nodes[i], refNode);\r\n            } else {\r\n                parentNode.appendChild(nodes[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     */\r\n    function offsetParent(elm) {\r\n        var parent = elm.offsetParent || document.body;\r\n        while (parent && !rootNodeRE.test(parent.nodeName) && document.defaultView.getComputedStyle(parent).position == \"static\") {\r\n            parent = parent.offsetParent;\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    /*   \r\n     * Remove the set of matched elements from the DOM.\r\n     * @param {Node} node\r\n     */\r\n    function remove(node) {\r\n        if (node && node.parentNode) {\r\n            try {\r\n                node.parentNode.removeChild(node);\r\n            } catch (e) {\r\n                console.warn(\"The node is already removed\", e);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function removeChild(node,children) {\r\n        if (!langx.isArrayLike(children)) {\r\n            children = [children];\r\n        }\r\n        for (var i=0;i<children.length;i++) {\r\n            node.removeChild(children[i]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function scrollParent( elm, includeHidden ) {\r\n        var position = document.defaultView.getComputedStyle(elm).position,\r\n            excludeStaticParent = position === \"absolute\",\r\n            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n            scrollParent = this.parents().filter( function() {\r\n                var parent = $( this );\r\n                if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                    return false;\r\n                }\r\n                return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                    parent.css( \"overflow-x\" ) );\r\n            } ).eq( 0 );\r\n\r\n        return position === \"fixed\" || !scrollParent.length ?\r\n            $( this[ 0 ].ownerDocument || document ) :\r\n            scrollParent;\r\n    };\r\n\r\n\r\n    function reflow(elm) {\r\n        if (el == null) {\r\n          elm = document;\r\n        }\r\n        elm.offsetHeight;\r\n\r\n        return this;      \r\n    }\r\n\r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {Node} node\r\n     * @param {Node} oldNode\r\n     */\r\n    function replace(node, oldNode) {\r\n        oldNode.parentNode.replaceChild(node, oldNode);\r\n        return this;\r\n    }\r\n\r\n\r\n    /*   \r\n     * traverse the specified node and its descendants, perform the callback function on each\r\n     * @param {Node} node\r\n     * @param {Function} fn\r\n     */\r\n    function traverse(node, fn) {\r\n        fn(node)\r\n        for (var i = 0, len = node.childNodes.length; i < len; i++) {\r\n            traverse(node.childNodes[i], fn);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     *\r\n     * @param {Node} node\r\n     */\r\n    function reverse(node) {\r\n        var firstChild = node.firstChild;\r\n        for (var i = node.children.length - 1; i > 0; i--) {\r\n            if (i > 0) {\r\n                var child = node.children[i];\r\n                node.insertBefore(child, firstChild);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around each element in the set of matched elements.\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapper(node, wrapperNode) {\r\n        if (langx.isString(wrapperNode)) {\r\n            wrapperNode = this.createFragment(wrapperNode).firstChild;\r\n        }\r\n        node.parentNode.insertBefore(wrapperNode, node);\r\n        wrapperNode.appendChild(node);\r\n    }\r\n\r\n    /*   \r\n     * Wrap an HTML structure around the content of each element in the set of matched\r\n     * @param {Node} node\r\n     * @param {Node} wrapperNode\r\n     */\r\n    function wrapperInner(node, wrapperNode) {\r\n        var childNodes = slice.call(node.childNodes);\r\n        node.appendChild(wrapperNode);\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            wrapperNode.appendChild(childNodes[i]);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Remove the parents of the set of matched elements from the DOM, leaving the matched\r\n     * @param {Node} node\r\n     */\r\n    function unwrap(node) {\r\n        var child, parent = node.parentNode;\r\n        if (parent) {\r\n            if (this.isDoc(parent.parentNode)) return;\r\n            parent.parentNode.insertBefore(node, parent);\r\n        }\r\n    }\r\n\r\n    function noder() {\r\n        return noder;\r\n    }\r\n\r\n    langx.mixin(noder, {\r\n        active  : activeElement,\r\n\r\n        blur : function(el) {\r\n            el.blur();\r\n        },\r\n\r\n        body: function() {\r\n            return document.body;\r\n        },\r\n\r\n        clone: clone,\r\n        contents: contents,\r\n\r\n        createElement: createElement,\r\n\r\n        createFragment: createFragment,\r\n\r\n        contains: contains,\r\n\r\n        createTextNode: createTextNode,\r\n\r\n        doc: doc,\r\n\r\n        empty: empty,\r\n\r\n        fullScreen: fullScreen,\r\n\r\n        focusable: focusable,\r\n\r\n        html: html,\r\n\r\n        isChildOf: isChildOf,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isInDocument: isInDocument,\r\n\r\n        isWindow: langx.isWindow,\r\n\r\n        nodeName : nodeName,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        ownerDoc: ownerDoc,\r\n\r\n        ownerWindow: ownerWindow,\r\n\r\n        after: after,\r\n\r\n        before: before,\r\n\r\n        prepend: prepend,\r\n\r\n        append: append,\r\n\r\n        reflow: reflow,\r\n\r\n        remove: remove,\r\n\r\n        removeChild : removeChild,\r\n\r\n        replace: replace,\r\n\r\n        traverse: traverse,\r\n\r\n        reverse: reverse,\r\n\r\n        wrapper: wrapper,\r\n\r\n        wrapperInner: wrapperInner,\r\n\r\n        unwrap: unwrap\r\n    });\r\n\r\n    return skylark.attach(\"domx.noder\" , noder);\r\n});\ndefine('skylark-domx-noder/main',[\r\n\t\"./noder\"\r\n],function(noder){\r\n\treturn noder;\r\n});\ndefine('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });\n\ndefine('skylark-domx-finder/finder',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\"\r\n], function(skylark, langx, browser, noder) {\r\n    var local = {},\r\n        filter = Array.prototype.filter,\r\n        slice = Array.prototype.slice,\r\n        nativeMatchesSelector = browser.matchesSelector;\r\n\r\n    /*\r\n    ---\r\n    name: Slick.Parser\r\n    description: Standalone CSS3 Selector parser\r\n    provides: Slick.Parser\r\n    ...\r\n    */\r\n    ;\r\n    (function() {\r\n\r\n        var parsed,\r\n            separatorIndex,\r\n            combinatorIndex,\r\n            reversed,\r\n            cache = {},\r\n            reverseCache = {},\r\n            reUnescape = /\\\\/g;\r\n\r\n        var parse = function(expression, isReversed) {\r\n            if (expression == null) return null;\r\n            if (expression.Slick === true) return expression;\r\n            expression = ('' + expression).replace(/^\\s+|\\s+$/g, '');\r\n            reversed = !!isReversed;\r\n            var currentCache = (reversed) ? reverseCache : cache;\r\n            if (currentCache[expression]) return currentCache[expression];\r\n            parsed = {\r\n                Slick: true,\r\n                expressions: [],\r\n                raw: expression,\r\n                reverse: function() {\r\n                    return parse(this.raw, true);\r\n                }\r\n            };\r\n            separatorIndex = -1;\r\n            while (expression != (expression = expression.replace(regexp, parser)));\r\n            parsed.length = parsed.expressions.length;\r\n            return currentCache[parsed.raw] = (reversed) ? reverse(parsed) : parsed;\r\n        };\r\n\r\n        var reverseCombinator = function(combinator) {\r\n            if (combinator === '!') return ' ';\r\n            else if (combinator === ' ') return '!';\r\n            else if ((/^!/).test(combinator)) return combinator.replace(/^!/, '');\r\n            else return '!' + combinator;\r\n        };\r\n\r\n        var reverse = function(expression) {\r\n            var expressions = expression.expressions;\r\n            for (var i = 0; i < expressions.length; i++) {\r\n                var exp = expressions[i];\r\n                var last = {\r\n                    parts: [],\r\n                    tag: '*',\r\n                    combinator: reverseCombinator(exp[0].combinator)\r\n                };\r\n\r\n                for (var j = 0; j < exp.length; j++) {\r\n                    var cexp = exp[j];\r\n                    if (!cexp.reverseCombinator) cexp.reverseCombinator = ' ';\r\n                    cexp.combinator = cexp.reverseCombinator;\r\n                    delete cexp.reverseCombinator;\r\n                }\r\n\r\n                exp.reverse().push(last);\r\n            }\r\n            return expression;\r\n        };\r\n\r\n        var escapeRegExp = (function() {\r\n            // Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan <http://stevenlevithan.com/regex/xregexp/> MIT License\r\n            var from = /(?=[\\-\\[\\]{}()*+?.\\\\\\^$|,#\\s])/g,\r\n                to = '\\\\';\r\n            return function(string) {\r\n                return string.replace(from, to)\r\n            }\r\n        }())\r\n\r\n        var regexp = new RegExp(\r\n            \"^(?:\\\\s*(,)\\\\s*|\\\\s*(<combinator>+)\\\\s*|(\\\\s+)|(<unicode>+|\\\\*)|\\\\#(<unicode>+)|\\\\.(<unicode>+)|\\\\[\\\\s*(<unicode1>+)(?:\\\\s*([*^$!~|]?=)(?:\\\\s*(?:([\\\"']?)(.*?)\\\\9)))?\\\\s*\\\\](?!\\\\])|(:+)(<unicode>+)(?:\\\\((?:(?:([\\\"'])([^\\\\13]*)\\\\13)|((?:\\\\([^)]+\\\\)|[^()]*)+))\\\\))?)\"\r\n            .replace(/<combinator>/, '[' + escapeRegExp(\">+~`!@$%^&={}\\\\;</\") + ']')\r\n            .replace(/<unicode>/g, '(?:[\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n            .replace(/<unicode1>/g, '(?:[:\\\\w\\\\u00a1-\\\\uFFFF-]|\\\\\\\\[^\\\\s0-9a-f])')\r\n        );\r\n\r\n        function parser(\r\n            rawMatch,\r\n\r\n            separator,\r\n            combinator,\r\n            combinatorChildren,\r\n\r\n            tagName,\r\n            id,\r\n            className,\r\n\r\n            attributeKey,\r\n            attributeOperator,\r\n            attributeQuote,\r\n            attributeValue,\r\n\r\n            pseudoMarker,\r\n            pseudoClass,\r\n            pseudoQuote,\r\n            pseudoClassQuotedValue,\r\n            pseudoClassValue\r\n        ) {\r\n            if (separator || separatorIndex === -1) {\r\n                parsed.expressions[++separatorIndex] = [];\r\n                combinatorIndex = -1;\r\n                if (separator) return '';\r\n            }\r\n\r\n            if (combinator || combinatorChildren || combinatorIndex === -1) {\r\n                combinator = combinator || ' ';\r\n                var currentSeparator = parsed.expressions[separatorIndex];\r\n                if (reversed && currentSeparator[combinatorIndex])\r\n                    currentSeparator[combinatorIndex].reverseCombinator = reverseCombinator(combinator);\r\n                currentSeparator[++combinatorIndex] = {\r\n                    combinator: combinator,\r\n                    tag: '*'\r\n                };\r\n            }\r\n\r\n            var currentParsed = parsed.expressions[separatorIndex][combinatorIndex];\r\n\r\n            if (tagName) {\r\n                currentParsed.tag = tagName.replace(reUnescape, '');\r\n\r\n            } else if (id) {\r\n                currentParsed.id = id.replace(reUnescape, '');\r\n\r\n            } else if (className) {\r\n                className = className.replace(reUnescape, '');\r\n\r\n                if (!currentParsed.classList) currentParsed.classList = [];\r\n                if (!currentParsed.classes) currentParsed.classes = [];\r\n                currentParsed.classList.push(className);\r\n                currentParsed.classes.push({\r\n                    value: className,\r\n                    regexp: new RegExp('(^|\\\\s)' + escapeRegExp(className) + '(\\\\s|$)')\r\n                });\r\n\r\n            } else if (pseudoClass) {\r\n                pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;\r\n                pseudoClassValue = pseudoClassValue ? pseudoClassValue.replace(reUnescape, '') : null;\r\n\r\n                if (!currentParsed.pseudos) currentParsed.pseudos = [];\r\n                currentParsed.pseudos.push({\r\n                    key: pseudoClass.replace(reUnescape, ''),\r\n                    value: pseudoClassValue,\r\n                    type: pseudoMarker.length == 1 ? 'class' : 'element'\r\n                });\r\n\r\n            } else if (attributeKey) {\r\n                attributeKey = attributeKey.replace(reUnescape, '');\r\n                attributeValue = (attributeValue || '').replace(reUnescape, '');\r\n\r\n                var test, regexp;\r\n\r\n                switch (attributeOperator) {\r\n                    case '^=':\r\n                        regexp = new RegExp('^' + escapeRegExp(attributeValue));\r\n                        break;\r\n                    case '$=':\r\n                        regexp = new RegExp(escapeRegExp(attributeValue) + '$');\r\n                        break;\r\n                    case '~=':\r\n                        regexp = new RegExp('(^|\\\\s)' + escapeRegExp(attributeValue) + '(\\\\s|$)');\r\n                        break;\r\n                    case '|=':\r\n                        regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');\r\n                        break;\r\n                    case '=':\r\n                        test = function(value) {\r\n                            return attributeValue == value;\r\n                        };\r\n                        break;\r\n                    case '*=':\r\n                        test = function(value) {\r\n                            return value && value.indexOf(attributeValue) > -1;\r\n                        };\r\n                        break;\r\n                    case '!=':\r\n                        test = function(value) {\r\n                            return attributeValue != value;\r\n                        };\r\n                        break;\r\n                    default:\r\n                        test = function(value) {\r\n                            return !!value;\r\n                        };\r\n                }\r\n\r\n                if (attributeValue == '' && (/^[*$^]=$/).test(attributeOperator)) test = function() {\r\n                    return false;\r\n                };\r\n\r\n                if (!test) test = function(value) {\r\n                    return value && regexp.test(value);\r\n                };\r\n\r\n                if (!currentParsed.attributes) currentParsed.attributes = [];\r\n                currentParsed.attributes.push({\r\n                    key: attributeKey,\r\n                    operator: attributeOperator,\r\n                    value: attributeValue,\r\n                    test: test\r\n                });\r\n\r\n            }\r\n\r\n            return '';\r\n        };\r\n\r\n        // Slick NS\r\n\r\n        var Slick = (this.Slick || {});\r\n\r\n        Slick.parse = function(expression) {\r\n            return parse(expression);\r\n        };\r\n\r\n        Slick.escapeRegExp = escapeRegExp;\r\n\r\n        if (!this.Slick) this.Slick = Slick;\r\n\r\n    }).apply(local);\r\n\r\n\r\n    var simpleClassSelectorRE = /^\\.([\\w-]*)$/,\r\n        simpleIdSelectorRE = /^#([\\w-]*)$/,\r\n        rinputs = /^(?:input|select|textarea|button)$/i,\r\n        rheader = /^h\\d$/i,\r\n        slice = Array.prototype.slice;\r\n\r\n\r\n    local.parseSelector = local.Slick.parse;\r\n\r\n\r\n    var pseudos = local.pseudos = {\r\n        // custom pseudos\r\n        \"button\": function(elem) {\r\n            var name = elem.nodeName.toLowerCase();\r\n            return name === \"input\" && elem.type === \"button\" || name === \"button\";\r\n        },\r\n\r\n        'checked': function(elm) {\r\n            return !!elm.checked;\r\n        },\r\n\r\n        'contains': function(elm, idx, nodes, text) {\r\n            if ($(this).text().indexOf(text) > -1) return this\r\n        },\r\n\r\n        'disabled': function(elm) {\r\n            return !!elm.disabled;\r\n        },\r\n\r\n        'enabled': function(elm) {\r\n            return !elm.disabled;\r\n        },\r\n\r\n        'eq': function(elm, idx, nodes, value) {\r\n            return (idx == value);\r\n        },\r\n\r\n        'even': function(elm, idx, nodes, value) {\r\n            return (idx % 2) === 0;\r\n        },\r\n\r\n        'focus': function(elm) {\r\n            return document.activeElement === elm && (elm.href || elm.type || elm.tabindex);\r\n        },\r\n\r\n        'focusable': function( elm ) {\r\n            return noder.focusable(elm, elm.tabindex != null );\r\n        },\r\n\r\n        'first': function(elm, idx) {\r\n            return (idx === 0);\r\n        },\r\n\r\n        'gt': function(elm, idx, nodes, value) {\r\n            return (idx > value);\r\n        },\r\n\r\n        'has': function(elm, idx, nodes, sel) {\r\n            return find(elm, sel);\r\n        },\r\n\r\n        // Element/input types\r\n        \"header\": function(elem) {\r\n            return rheader.test(elem.nodeName);\r\n        },\r\n\r\n        'hidden': function(elm) {\r\n            return !local.pseudos[\"visible\"](elm);\r\n        },\r\n\r\n        \"input\": function(elem) {\r\n            return rinputs.test(elem.nodeName);\r\n        },\r\n\r\n        'last': function(elm, idx, nodes) {\r\n            return (idx === nodes.length - 1);\r\n        },\r\n\r\n        'lt': function(elm, idx, nodes, value) {\r\n            return (idx < value);\r\n        },\r\n\r\n        'not': function(elm, idx, nodes, sel) {\r\n            return !matches(elm, sel);\r\n        },\r\n\r\n        'odd': function(elm, idx, nodes, value) {\r\n            return (idx % 2) === 1;\r\n        },\r\n\r\n        /*   \r\n         * Get the parent of each element in the current set of matched elements.\r\n         * @param {Object} elm\r\n         */\r\n        'parent': function(elm) {\r\n            return !!elm.parentNode;\r\n        },\r\n\r\n        'selected': function(elm) {\r\n            return !!elm.selected;\r\n        },\r\n\r\n        'tabbable': function(elm) {\r\n            var tabIndex = elm.tabindex,\r\n                hasTabindex = tabIndex != null;\r\n            return ( !hasTabindex || tabIndex >= 0 ) && noder.focusable( element, hasTabindex );\r\n        },\r\n\r\n        'text': function(elm) {\r\n            return elm.type === \"text\";\r\n        },\r\n\r\n        'visible': function(elm) {\r\n            return elm.offsetWidth && elm.offsetWidth\r\n        },\r\n        'empty': function(elm) {\r\n            return !elm.hasChildNodes();\r\n        }\r\n    };\r\n\r\n    [\"first\", \"eq\", \"last\"].forEach(function(item) {\r\n        pseudos[item].isArrayFilter = true;\r\n    });\r\n\r\n\r\n\r\n    pseudos[\"nth\"] = pseudos[\"eq\"];\r\n\r\n    function createInputPseudo(type) {\r\n        return function(elem) {\r\n            var name = elem.nodeName.toLowerCase();\r\n            return name === \"input\" && elem.type === type;\r\n        };\r\n    }\r\n\r\n    function createButtonPseudo(type) {\r\n        return function(elem) {\r\n            var name = elem.nodeName.toLowerCase();\r\n            return (name === \"input\" || name === \"button\") && elem.type === type;\r\n        };\r\n    }\r\n\r\n    // Add button/input type pseudos\r\n    for (i in {\r\n        radio: true,\r\n        checkbox: true,\r\n        file: true,\r\n        password: true,\r\n        image: true\r\n    }) {\r\n        pseudos[i] = createInputPseudo(i);\r\n    }\r\n    for (i in {\r\n        submit: true,\r\n        reset: true\r\n    }) {\r\n        pseudos[i] = createButtonPseudo(i);\r\n    }\r\n\r\n\r\n    local.divide = function(cond) {\r\n        var nativeSelector = \"\",\r\n            customPseudos = [],\r\n            tag,\r\n            id,\r\n            classes,\r\n            attributes,\r\n            pseudos;\r\n\r\n\r\n        if (id = cond.id) {\r\n            nativeSelector += (\"#\" + id);\r\n        }\r\n        if (classes = cond.classes) {\r\n            for (var i = classes.length; i--;) {\r\n                nativeSelector += (\".\" + classes[i].value);\r\n            }\r\n        }\r\n        if (attributes = cond.attributes) {\r\n            for (var i = 0; i < attributes.length; i++) {\r\n                if (attributes[i].operator) {\r\n                    nativeSelector += (\"[\" + attributes[i].key + attributes[i].operator + JSON.stringify(attributes[i].value) + \"]\");\r\n                } else {\r\n                    nativeSelector += (\"[\" + attributes[i].key + \"]\");\r\n                }\r\n            }\r\n        }\r\n        if (pseudos = cond.pseudos) {\r\n            for (i = pseudos.length; i--;) {\r\n                part = pseudos[i];\r\n                if (this.pseudos[part.key]) {\r\n                    customPseudos.push(part);\r\n                } else {\r\n                    if (part.value !== undefined) {\r\n                        nativeSelector += (\":\" + part.key + \"(\" + JSON.stringify(part))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tag = cond.tag) {\r\n            if (tag !== \"*\") {\r\n                nativeSelector = tag.toUpperCase() + nativeSelector;\r\n            }\r\n        }\r\n\r\n        if (!nativeSelector) {\r\n            nativeSelector = \"*\";\r\n        }\r\n\r\n        return {\r\n            nativeSelector: nativeSelector,\r\n            customPseudos: customPseudos\r\n        }\r\n\r\n    };\r\n\r\n    local.check = function(node, cond, idx, nodes, arrayFilte) {\r\n        var tag,\r\n            id,\r\n            classes,\r\n            attributes,\r\n            pseudos,\r\n\r\n            i, part, cls, pseudo;\r\n\r\n        if (!arrayFilte) {\r\n            if (tag = cond.tag) {\r\n                var nodeName = node.nodeName.toUpperCase();\r\n                if (tag == '*') {\r\n                    if (nodeName < '@') return false; // Fix for comment nodes and closed nodes\r\n                } else {\r\n                    if (nodeName != (tag || \"\").toUpperCase()) return false;\r\n                }\r\n            }\r\n\r\n            if (id = cond.id) {\r\n                if (node.getAttribute('id') != id) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n\r\n            if (classes = cond.classes) {\r\n                for (i = classes.length; i--;) {\r\n                    cls = node.getAttribute('class');\r\n                    if (!(cls && classes[i].regexp.test(cls))) return false;\r\n                }\r\n            }\r\n\r\n            if (attributes = cond.attributes) {\r\n                for (i = attributes.length; i--;) {\r\n                    part = attributes[i];\r\n                    if (part.operator ? !part.test(node.getAttribute(part.key)) : !node.hasAttribute(part.key)) return false;\r\n                }\r\n            }\r\n\r\n        }\r\n        if (pseudos = cond.pseudos) {\r\n            for (i = pseudos.length; i--;) {\r\n                part = pseudos[i];\r\n                if (pseudo = this.pseudos[part.key]) {\r\n                    if ((arrayFilte && pseudo.isArrayFilter) || (!arrayFilte && !pseudo.isArrayFilter)) {\r\n                        if (!pseudo(node, idx, nodes, part.value)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (!arrayFilte && !nativeMatchesSelector.call(node, part.key)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    local.match = function(node, selector) {\r\n\r\n        var parsed;\r\n\r\n        if (langx.isString(selector)) {\r\n            parsed = local.Slick.parse(selector);\r\n        } else {\r\n            parsed = selector;\r\n        }\r\n\r\n        if (!parsed) {\r\n            return true;\r\n        }\r\n\r\n        // simple (single) selectors\r\n        var expressions = parsed.expressions,\r\n            simpleExpCounter = 0,\r\n            i,\r\n            currentExpression;\r\n        for (i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            if (currentExpression.length == 1) {\r\n                var exp = currentExpression[0];\r\n                if (this.check(node, exp)) {\r\n                    return true;\r\n                }\r\n                simpleExpCounter++;\r\n            }\r\n        }\r\n\r\n        if (simpleExpCounter == parsed.length) {\r\n            return false;\r\n        }\r\n\r\n        var nodes = this.query(document, parsed),\r\n            item;\r\n        for (i = 0; item = nodes[i++];) {\r\n            if (item === node) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n\r\n    local.filterSingle = function(nodes, exp) {\r\n        var matchs = filter.call(nodes, function(node, idx) {\r\n            return local.check(node, exp, idx, nodes, false);\r\n        });\r\n\r\n        matchs = filter.call(matchs, function(node, idx) {\r\n            return local.check(node, exp, idx, matchs, true);\r\n        });\r\n        return matchs;\r\n    };\r\n\r\n    local.filter = function(nodes, selector) {\r\n        var parsed;\r\n\r\n        if (langx.isString(selector)) {\r\n            parsed = local.Slick.parse(selector);\r\n        } else {\r\n            return local.filterSingle(nodes, selector);\r\n        }\r\n\r\n        // simple (single) selectors\r\n        var expressions = parsed.expressions,\r\n            i,\r\n            currentExpression,\r\n            ret = [];\r\n        for (i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            if (currentExpression.length == 1) {\r\n                var exp = currentExpression[0];\r\n\r\n                var matchs = local.filterSingle(nodes, exp);\r\n\r\n                ret = langx.uniq(ret.concat(matchs));\r\n            } else {\r\n                throw new Error(\"not supported selector:\" + selector);\r\n            }\r\n        }\r\n\r\n        return ret;\r\n\r\n    };\r\n\r\n    local.combine = function(elm, bit) {\r\n        var op = bit.combinator,\r\n            cond = bit,\r\n            node1,\r\n            nodes = [];\r\n\r\n        switch (op) {\r\n            case '>': // direct children\r\n                nodes = children(elm, cond);\r\n                break;\r\n            case '+': // next sibling\r\n                node1 = nextSibling(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '^': // first child\r\n                node1 = firstChild(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '~': // next siblings\r\n                nodes = nextSiblings(elm, cond);\r\n                break;\r\n            case '++': // next sibling and previous sibling\r\n                var prev = previousSibling(elm, cond, true),\r\n                    next = nextSibling(elm, cond, true);\r\n                if (prev) {\r\n                    nodes.push(prev);\r\n                }\r\n                if (next) {\r\n                    nodes.push(next);\r\n                }\r\n                break;\r\n            case '~~': // next siblings and previous siblings\r\n                nodes = siblings(elm, cond);\r\n                break;\r\n            case '!': // all parent nodes up to document\r\n                nodes = ancestors(elm, cond);\r\n                break;\r\n            case '!>': // direct parent (one level)\r\n                node1 = parent(elm, cond);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '!+': // previous sibling\r\n                nodes = previousSibling(elm, cond, true);\r\n                break;\r\n            case '!^': // last child\r\n                node1 = lastChild(elm, cond, true);\r\n                if (node1) {\r\n                    nodes.push(node1);\r\n                }\r\n                break;\r\n            case '!~': // previous siblings\r\n                nodes = previousSiblings(elm, cond);\r\n                break;\r\n            default:\r\n                var divided = this.divide(bit);\r\n                nodes = slice.call(elm.querySelectorAll(divided.nativeSelector));\r\n                if (divided.customPseudos) {\r\n                    for (var i = divided.customPseudos.length - 1; i >= 0; i--) {\r\n                        nodes = filter.call(nodes, function(item, idx) {\r\n                            return local.check(item, {\r\n                                pseudos: [divided.customPseudos[i]]\r\n                            }, idx, nodes, false)\r\n                        });\r\n\r\n                        nodes = filter.call(nodes, function(item, idx) {\r\n                            return local.check(item, {\r\n                                pseudos: [divided.customPseudos[i]]\r\n                            }, idx, nodes, true)\r\n                        });\r\n                    }\r\n                }\r\n                break;\r\n\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    local.query = function(node, selector, single) {\r\n\r\n\r\n        var parsed = this.Slick.parse(selector);\r\n\r\n        var\r\n            founds = [],\r\n            currentExpression, currentBit,\r\n            expressions = parsed.expressions;\r\n\r\n        for (var i = 0;\r\n            (currentExpression = expressions[i]); i++) {\r\n            var currentItems = [node],\r\n                found;\r\n            for (var j = 0;\r\n                (currentBit = currentExpression[j]); j++) {\r\n                found = langx.map(currentItems, function(item, i) {\r\n                    return local.combine(item, currentBit)\r\n                });\r\n                if (found) {\r\n                    currentItems = found;\r\n                }\r\n            }\r\n            if (found) {\r\n                founds = founds.concat(found);\r\n            }\r\n        }\r\n\r\n        return founds;\r\n    }\r\n\r\n    /*\r\n     * Get the nearest ancestor of the specified element,optional matched by a selector.\r\n     * @param {HTMLElement} node\r\n     * @param {String Optional } selector\r\n     * @param {Object} root\r\n     */\r\n    function ancestor(node, selector, root) {\r\n        var rootIsSelector = root && langx.isString(root);\r\n        while (node = node.parentNode) {\r\n            if (matches(node, selector)) {\r\n                return node;\r\n            }\r\n            if (root) {\r\n                if (rootIsSelector) {\r\n                    if (matches(node, root)) {\r\n                        break;\r\n                    }\r\n                } else if (node == root) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Get the ancestors of the specitied element , optionally filtered by a selector.\r\n     * @param {HTMLElement} node\r\n     * @param {String Optional } selector\r\n     * @param {Object} root\r\n     */\r\n    function ancestors(node, selector, root) {\r\n        var ret = [],\r\n            rootIsSelector = root && langx.isString(root);\r\n        while ((node = node.parentNode) && (node.nodeType !== 9)) {\r\n            if (root) {\r\n                if (rootIsSelector) {\r\n                    if (matches(node, root)) {\r\n                        break;\r\n                    }\r\n                } else if (langx.isArrayLike(root)) {\r\n                    if (langx.inArray(node,root)>-1) {\r\n                        break;\r\n                    }\r\n                } else if (node == root) {\r\n                    break;\r\n                }\r\n            }\r\n            ret.push(node); // TODO\r\n        }\r\n\r\n        if (selector) {\r\n            ret = local.filter(ret, selector);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * Returns a element by its ID.\r\n     * @param {string} id\r\n     */\r\n    function byId(id, doc) {\r\n        doc = doc || noder.doc();\r\n        return doc.getElementById(id);\r\n    }\r\n\r\n    /*\r\n     * Get the children of the specified element , optionally filtered by a selector.\r\n     * @param {string} node\r\n     * @param {String optionlly} selector\r\n     */\r\n    function children(node, selector) {\r\n        var childNodes = node.childNodes,\r\n            ret = [];\r\n        for (var i = 0; i < childNodes.length; i++) {\r\n            var node = childNodes[i];\r\n            if (node.nodeType == 1) {\r\n                ret.push(node);\r\n            }\r\n        }\r\n        if (selector) {\r\n            ret = local.filter(ret, selector);\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function closest(node, selector) {\r\n        while (node && !(matches(node, selector))) {\r\n            node = node.parentNode;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    /*\r\n     * Get the decendant of the specified element , optionally filtered by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function descendants(elm, selector) {\r\n        // Selector\r\n        try {\r\n            return slice.call(elm.querySelectorAll(selector));\r\n        } catch (matchError) {\r\n            //console.log(matchError);\r\n        }\r\n        return local.query(elm, selector);\r\n    }\r\n\r\n    /*\r\n     * Get the nearest decendent of the specified element,optional matched by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function descendant(elm, selector) {\r\n        // Selector\r\n        try {\r\n            return elm.querySelector(selector);\r\n        } catch (matchError) {\r\n            //console.log(matchError);\r\n        }\r\n        var nodes = local.query(elm, selector);\r\n        if (nodes.length > 0) {\r\n            return nodes[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function find(elm, selector) {\r\n        if (!selector) {\r\n            selector = elm;\r\n            elm = document.body;\r\n        }\r\n        if (matches(elm, selector)) {\r\n            return elm;\r\n        } else {\r\n            return descendant(elm, selector);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the findAll of the specified element , optionally filtered by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function findAll(elm, selector) {\r\n        if (!selector) {\r\n            selector = elm;\r\n            elm = document.body;\r\n        }\r\n        return descendants(elm, selector);\r\n    }\r\n\r\n    /*\r\n     * Get the first child of the specified element , optionally filtered by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     * @param {String} first\r\n     */\r\n    function firstChild(elm, selector, first) {\r\n        var childNodes = elm.childNodes,\r\n            node = childNodes[0];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (first) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Get the last child of the specified element , optionally filtered by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     * @param {String } last\r\n     */\r\n    function lastChild(elm, selector, last) {\r\n        var childNodes = elm.childNodes,\r\n            node = childNodes[childNodes.length - 1];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (last) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Check the specified element against a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function matches(elm, selector) {\r\n        if (!selector || !elm || elm.nodeType !== 1) {\r\n            return false\r\n        }\r\n\r\n        if (langx.isString(selector)) {\r\n            try {\r\n                return nativeMatchesSelector.call(elm, selector.replace(/\\[([^=]+)=\\s*([^'\"\\]]+?)\\s*\\]/g, '[$1=\"$2\"]'));\r\n            } catch (matchError) {\r\n                //console.log(matchError);\r\n            }\r\n            return local.match(elm, selector);\r\n        } else if (langx.isArrayLike(selector)) {\r\n            return langx.inArray(elm, selector) > -1;\r\n        } else if (langx.isPlainObject(selector)) {\r\n            return local.check(elm, selector);\r\n        } else {\r\n            return elm === selector;\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Get the nearest next sibing of the specitied element , optional matched by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     * @param {Boolean Optional} adjacent\r\n     */\r\n    function nextSibling(elm, selector, adjacent) {\r\n        var node = elm.nextSibling;\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (adjacent) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Get the next siblings of the specified element , optional filtered by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function nextSiblings(elm, selector) {\r\n        var node = elm.nextSibling,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * Get the parent element of the specified element. if a selector is provided, it retrieves the parent element only if it matches that selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function parent(elm, selector) {\r\n        var node = elm.parentNode;\r\n        if (node && (!selector || matches(node, selector))) {\r\n            return node;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Get hte nearest previous sibling of the specified element ,optional matched by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     * @param {Boolean Optional } adjacent\r\n     */\r\n    function previousSibling(elm, selector, adjacent) {\r\n        var node = elm.previousSibling;\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    return node;\r\n                }\r\n                if (adjacent) {\r\n                    break;\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function previousSiblings(elm, selector) {\r\n        var node = elm.previousSibling,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector.\r\n     * @param {HTMLElement} elm\r\n     * @param {String optionlly} selector\r\n     */\r\n    function siblings(elm, selector) {\r\n        var node = elm.parentNode.firstChild,\r\n            ret = [];\r\n        while (node) {\r\n            if (node.nodeType == 1 && node !== elm) {\r\n                if (!selector || matches(node, selector)) {\r\n                    ret.push(node);\r\n                }\r\n            }\r\n            node = node.nextSibling;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    var finder = function() {\r\n        return finder;\r\n    };\r\n\r\n    langx.mixin(finder, {\r\n\r\n        ancestor: ancestor,\r\n\r\n        ancestors: ancestors,\r\n\r\n        byId: byId,\r\n\r\n        children: children,\r\n\r\n        closest: closest,\r\n\r\n        descendant: descendant,\r\n\r\n        descendants: descendants,\r\n\r\n        find: find,\r\n\r\n        findAll: findAll,\r\n\r\n        firstChild: firstChild,\r\n\r\n        lastChild: lastChild,\r\n\r\n        matches: matches,\r\n\r\n        nextSibling: nextSibling,\r\n\r\n        nextSiblings: nextSiblings,\r\n\r\n        parent: parent,\r\n\r\n        previousSibling,\r\n\r\n        previousSiblings,\r\n\r\n        pseudos: local.pseudos,\r\n\r\n        siblings: siblings\r\n    });\r\n\r\n    return skylark.attach(\"domx.finder\", finder);\r\n});\ndefine('skylark-domx-finder/main',[\r\n\t\"./finder\"\r\n],function(finder){\r\n\r\n\treturn finder;\r\n});\ndefine('skylark-domx-finder', ['skylark-domx-finder/main'], function (main) { return main; });\n\ndefine('skylark-domx-data/data',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\"\r\n], function(skylark, langx, finder,noder) {\r\n    var map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        camelCase = langx.camelCase,\r\n        deserializeValue = langx.deserializeValue,\r\n\r\n        capitalRE = /([A-Z])/g,\r\n        propMap = {\r\n            'tabindex': 'tabIndex',\r\n            'readonly': 'readOnly',\r\n            'for': 'htmlFor',\r\n            'class': 'className',\r\n            'maxlength': 'maxLength',\r\n            'cellspacing': 'cellSpacing',\r\n            'cellpadding': 'cellPadding',\r\n            'rowspan': 'rowSpan',\r\n            'colspan': 'colSpan',\r\n            'usemap': 'useMap',\r\n            'frameborder': 'frameBorder',\r\n            'contenteditable': 'contentEditable'\r\n        };\r\n\r\n    // Strip and collapse whitespace according to HTML spec\r\n    function stripAndCollapse( value ) {\r\n      var tokens = value.match( /[^\\x20\\t\\r\\n\\f]+/g ) || [];\r\n      return tokens.join( \" \" );\r\n    }\r\n\r\n\r\n    var valHooks = {\r\n      option: {\r\n        get: function( elem ) {\r\n          var val = elem.getAttribute( \"value\" );\r\n          return val != null ?  val :  stripAndCollapse(text( elem ) );\r\n        }\r\n      },\r\n      select: {\r\n        get: function( elem ) {\r\n          var value, option, i,\r\n            options = elem.options,\r\n            index = elem.selectedIndex,\r\n            one = elem.type === \"select-one\",\r\n            values = one ? null : [],\r\n            max = one ? index + 1 : options.length;\r\n\r\n          if ( index < 0 ) {\r\n            i = max;\r\n\r\n          } else {\r\n            i = one ? index : 0;\r\n          }\r\n\r\n          // Loop through all the selected options\r\n          for ( ; i < max; i++ ) {\r\n            option = options[ i ];\r\n\r\n            if ( option.selected &&\r\n\r\n                // Don't return options that are disabled or in a disabled optgroup\r\n                !option.disabled &&\r\n                ( !option.parentNode.disabled ||\r\n                  !noder.nodeName( option.parentNode, \"optgroup\" ) ) ) {\r\n\r\n              // Get the specific value for the option\r\n              value = val(option);\r\n\r\n              // We don't need an array for one selects\r\n              if ( one ) {\r\n                return value;\r\n              }\r\n\r\n              // Multi-Selects return an array\r\n              values.push( value );\r\n            }\r\n          }\r\n\r\n          return values;\r\n        },\r\n\r\n        set: function( elem, value ) {\r\n          var optionSet, option,\r\n            options = elem.options,\r\n            values = langx.makeArray( value ),\r\n            i = options.length;\r\n\r\n          while ( i-- ) {\r\n            option = options[ i ];\r\n\r\n            /* eslint-disable no-cond-assign */\r\n\r\n            if ( option.selected =\r\n              langx.inArray( valHooks.option.get( option ), values ) > -1\r\n            ) {\r\n              optionSet = true;\r\n            }\r\n\r\n            /* eslint-enable no-cond-assign */\r\n          }\r\n\r\n          // Force browsers to behave consistently when non-matching value is set\r\n          if ( !optionSet ) {\r\n            elem.selectedIndex = -1;\r\n          }\r\n          return values;\r\n        }\r\n      }\r\n    };\r\n\r\n\r\n    // Radios and checkboxes getter/setter\r\n    langx.each( [ \"radio\", \"checkbox\" ], function() {\r\n      valHooks[ this ] = {\r\n        set: function( elem, value ) {\r\n          if ( langx.isArray( value ) ) {\r\n            return ( elem.checked = langx.inArray( val(elem), value ) > -1 );\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function setAttribute(elm, name, value) {\r\n        if (value == null) {\r\n            elm.removeAttribute(name);\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n        }\r\n    }\r\n\r\n    function aria(elm, name, value) {\r\n        return this.attr(elm, \"aria-\" + name, value);\r\n    }\r\n\r\n    /*\r\n     * Set property values\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n\r\n    function attr(elm, name, value) {\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var attrName in name) {\r\n                    attr(elm, attrName, name[attrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                if (elm.hasAttribute && elm.hasAttribute(name)) {\r\n                    return elm.getAttribute(name);\r\n                }\r\n            }\r\n        } else {\r\n            elm.setAttribute(name, value);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     *  Read all \"data-*\" attributes from a node\r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function _attributeData(elm) {\r\n        var store = {}\r\n        langx.each(elm.attributes || [], function(i, attr) {\r\n            if (attr.name.indexOf('data-') == 0) {\r\n                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);\r\n            }\r\n        })\r\n        return store;\r\n    }\r\n\r\n    function _store(elm, confirm) {\r\n        var store = elm[\"_$_store\"];\r\n        if (!store && confirm) {\r\n            store = elm[\"_$_store\"] = _attributeData(elm);\r\n        }\r\n        return store;\r\n    }\r\n\r\n    function _getData(elm, name) {\r\n        if (name === undefined) {\r\n            return _store(elm, true);\r\n        } else {\r\n            var store = _store(elm);\r\n            if (store) {\r\n                if (name in store) {\r\n                    return store[name];\r\n                }\r\n                var camelName = camelCase(name);\r\n                if (camelName in store) {\r\n                    return store[camelName];\r\n                }\r\n            }\r\n            var attrName = 'data-' + name.replace(capitalRE, \"-$1\").toLowerCase()\r\n            return attr(elm, attrName);\r\n        }\r\n\r\n    }\r\n\r\n    function _setData(elm, name, value) {\r\n        var store = _store(elm, true);\r\n        store[camelCase(name)] = value;\r\n    }\r\n\r\n\r\n    /*\r\n     * xxx\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function data(elm, name, value) {\r\n\r\n        if (value === undefined) {\r\n            if (typeof name === \"object\") {\r\n                for (var dataAttrName in name) {\r\n                    _setData(elm, dataAttrName, name[dataAttrName]);\r\n                }\r\n                return this;\r\n            } else {\r\n                return _getData(elm, name);\r\n            }\r\n        } else {\r\n            _setData(elm, name, value);\r\n            return this;\r\n        }\r\n    } \r\n    /*\r\n     * Remove from the element all items that have not yet been run. \r\n     * @param {Object} elm  \r\n     */\r\n\r\n    function cleanData(elm) {\r\n        if (elm[\"_$_store\"]) {\r\n            delete elm[\"_$_store\"];\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Remove a previously-stored piece of data. \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function removeData(elm, names) {\r\n        if (names) {\r\n            if (langx.isString(names)) {\r\n                names = names.split(/\\s+/);\r\n            }\r\n            var store = _store(elm, true);\r\n            names.forEach(function(name) {\r\n                delete store[name];\r\n            });            \r\n        } else {\r\n            cleanData(elm);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * xxx \r\n     * @param {Object} elm  \r\n     * @param {Array} names\r\n     */\r\n    function pluck(nodes, property) {\r\n        return map.call(nodes, function(elm) {\r\n            return elm[property];\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Get or set the value of an property for the specified element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     * @param {String} value\r\n     */\r\n    function prop(elm, name, value) {\r\n        name = propMap[name] || name;\r\n        if (value === undefined) {\r\n            return elm[name];\r\n        } else {\r\n            elm[name] = value;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * remove Attributes  \r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeAttr(elm, name) {\r\n        name.split(' ').forEach(function(attr) {\r\n            setAttribute(elm, attr);\r\n        });\r\n        return this;\r\n    }\r\n\r\n\r\n    /*\r\n     * Remove the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} name\r\n     */\r\n    function removeProp(elm, name) {\r\n        name.split(' ').forEach(function(prop) {\r\n            delete elm[prop];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.  \r\n     * @param {Object} elm  \r\n     * @param {String} txt\r\n     */\r\n    function text(elm, txt) {\r\n        if (txt === undefined) {\r\n            return elm.textContent;\r\n        } else {\r\n            elm.textContent = txt == null ? '' : '' + txt;\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Get the current value of the first element in the set of matched elements or set the value of every matched element.\r\n     * @param {Object} elm  \r\n     * @param {String} value\r\n     */\r\n    function val(elm, value) {\r\n        var hooks = valHooks[ elm.type ] || valHooks[ elm.nodeName.toLowerCase() ];\r\n        if (value === undefined) {\r\n/*\r\n            if (elm.multiple) {\r\n                // select multiple values\r\n                var selectedOptions = filter.call(finder.find(elm, \"option\"), (function(option) {\r\n                    return option.selected;\r\n                }));\r\n                return pluck(selectedOptions, \"value\");\r\n            } else {\r\n                if (/input|textarea/i.test(elm.tagName)) {\r\n                  return elm.value;\r\n                }\r\n                return text(elm);\r\n            }\r\n*/\r\n\r\n          if ( hooks &&  \"get\" in hooks &&  ( ret = hooks.get( elm, \"value\" ) ) !== undefined ) {\r\n            return ret;\r\n          }\r\n\r\n          ret = elm.value;\r\n\r\n          // Handle most common string cases\r\n          if ( typeof ret === \"string\" ) {\r\n            return ret.replace( /\\r/g, \"\" );\r\n          }\r\n\r\n          // Handle cases where value is null/undef or number\r\n          return ret == null ? \"\" : ret;\r\n\r\n        } else {\r\n/*          \r\n            if (/input|textarea/i.test(elm.tagName)) {\r\n              elm.value = value;\r\n            } else {\r\n              text(elm,value);\r\n            }\r\n            return this;\r\n*/\r\n          // Treat null/undefined as \"\"; convert numbers to string\r\n          if ( value == null ) {\r\n            value = \"\";\r\n\r\n          } else if ( typeof value === \"number\" ) {\r\n            value += \"\";\r\n\r\n          } else if ( langx.isArray( value ) ) {\r\n            value = langx.map( value, function( value1 ) {\r\n              return value1 == null ? \"\" : value1 + \"\";\r\n            } );\r\n          }\r\n\r\n          // If set returns undefined, fall back to normal setting\r\n          if ( !hooks || !( \"set\" in hooks ) || hooks.set( elm, value, \"value\" ) === undefined ) {\r\n            elm.value = value;\r\n          }\r\n        }      \r\n    }\r\n\r\n\r\n    finder.pseudos.data = function( elem, i, match,dataName ) {\r\n        return !!data( elem, dataName || match[3]);\r\n    };\r\n   \r\n\r\n    function datax() {\r\n        return datax;\r\n    }\r\n\r\n    langx.mixin(datax, {\r\n        aria: aria,\r\n\r\n        attr: attr,\r\n\r\n        cleanData: cleanData,\r\n\r\n        data: data,\r\n\r\n        pluck: pluck,\r\n\r\n        prop: prop,\r\n\r\n        removeAttr: removeAttr,\r\n\r\n        removeData: removeData,\r\n\r\n        removeProp: removeProp,\r\n\r\n        text: text,\r\n\r\n        val: val,\r\n\r\n        valHooks : valHooks\r\n    });\r\n\r\n    return skylark.attach(\"domx.data\", datax);\r\n});\ndefine('skylark-domx-query/query',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\"\r\n], function(skylark, langx, noder, finder) {\r\n    var some = Array.prototype.some,\r\n        push = Array.prototype.push,\r\n        every = Array.prototype.every,\r\n        concat = Array.prototype.concat,\r\n        slice = Array.prototype.slice,\r\n        map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        forEach = Array.prototype.forEach,\r\n        indexOf = Array.prototype.indexOf,\r\n        sort = Array.prototype.sort,\r\n        isQ;\r\n\r\n    var rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n    var funcArg = langx.funcArg,\r\n        isArrayLike = langx.isArrayLike,\r\n        isString = langx.isString,\r\n        uniq = langx.uniq,\r\n        isFunction = langx.isFunction;\r\n\r\n    var type = langx.type,\r\n        isArray = langx.isArray,\r\n\r\n        isWindow = langx.isWindow,\r\n\r\n        isDocument = langx.isDocument,\r\n\r\n        isObject = langx.isObject,\r\n\r\n        isPlainObject = langx.isPlainObject,\r\n\r\n        compact = langx.compact,\r\n\r\n        flatten = langx.flatten,\r\n\r\n        camelCase = langx.camelCase,\r\n\r\n        dasherize = langx.dasherize,\r\n        children = finder.children;\r\n\r\n    function wrapper_node_operation(func, context, oldValueFunc) {\r\n        return function(html) {\r\n            var argType, nodes = langx.map(arguments, function(arg) {\r\n                argType = type(arg)\r\n                return argType == \"function\" || argType == \"object\" || argType == \"array\" || arg == null ?\r\n                    arg : noder.createFragment(arg)\r\n            });\r\n            if (nodes.length < 1) {\r\n                return this\r\n            }\r\n            this.each(function(idx) {\r\n                func.apply(context, [this, nodes, idx > 0]);\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function wrapper_map(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = langx.map(self, function(elem, idx) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n            return query(uniq(result));\r\n        }\r\n    }\r\n\r\n    function wrapper_selector(func, context, last) {\r\n        return function(selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) {\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem] : [elem, selector]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector_until(func, context, last) {\r\n        return function(util, selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            //if (selector === undefined) { //TODO : needs confirm?\r\n            //    selector = util;\r\n            //    util = undefined;\r\n            //}\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) { // TODO\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function wrapper_every_act(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            this.each(function(idx,node) {\r\n                func.apply(context, [this].concat(params));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {\r\n        return function(arg1) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            forEach.call(self, function(elem, idx) {\r\n                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));\r\n                func.apply(context, [elem, arg1].concat(params.slice(1)));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_some_chk(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            return some.call(self, function(elem) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n        }\r\n    }\r\n\r\n    function wrapper_name_value(func, context, oldValueFunc) {\r\n        return function(name, value) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n\r\n            if (langx.isPlainObject(name) || langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem].concat(params));\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0], name]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function wrapper_value(func, context, oldValueFunc) {\r\n        return function(value) {\r\n            var self = this;\r\n\r\n            if (langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem, newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0]]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    var NodeList = langx.klass({\r\n        klassName: \"SkNodeList\",\r\n        init: function(selector, context) {\r\n            var self = this,\r\n                match, nodes, node, props;\r\n\r\n            if (selector) {\r\n                self.context = context = context || noder.doc();\r\n\r\n                if (isString(selector)) {\r\n                    // a html string or a css selector is expected\r\n                    self.selector = selector;\r\n\r\n                    if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                        match = [null, selector, null];\r\n                    } else {\r\n                        match = rquickExpr.exec(selector);\r\n                    }\r\n\r\n                    if (match) {\r\n                        if (match[1]) {\r\n                            // if selector is html\r\n                            nodes = noder.createFragment(selector);\r\n\r\n                            if (langx.isPlainObject(context)) {\r\n                                props = context;\r\n                            }\r\n\r\n                        } else {\r\n                            node = finder.byId(match[2], noder.ownerDoc(context));\r\n\r\n                            if (node) {\r\n                                // if selector is id\r\n                                nodes = [node];\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        // if selector is css selector\r\n                        if (langx.isString(context)) {\r\n                            context = finder.find(context);\r\n                        }\r\n\r\n                        nodes = finder.descendants(context, selector);\r\n                    }\r\n                } else {\r\n                    if (selector !== window && isArrayLike(selector)) {\r\n                        // a dom node array is expected\r\n                        nodes = selector;\r\n                    } else {\r\n                        // a dom node is expected\r\n                        nodes = [selector];\r\n                    }\r\n                    //self.add(selector, false);\r\n                }\r\n            }\r\n\r\n\r\n            if (nodes) {\r\n\r\n                push.apply(self, nodes);\r\n\r\n                if (props) {\r\n                    for ( var name  in props ) {\r\n                        // Properties of context are called as methods if possible\r\n                        if ( langx.isFunction( this[ name ] ) ) {\r\n                            this[ name ]( props[ name ] );\r\n                        } else {\r\n                            this.attr( name, props[ name ] );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self;\r\n        }\r\n    });\r\n\r\n    var query = (function() {\r\n        isQ = function(object) {\r\n            return object instanceof NodeList;\r\n        }\r\n        init = function(selector, context) {\r\n            return new NodeList(selector, context);\r\n        }\r\n\r\n        var $ = function(selector, context) {\r\n            if (isFunction(selector)) {\r\n                $.ready(function() {\r\n                    selector($);\r\n                });\r\n            } else if (isQ(selector)) {\r\n                return selector;\r\n            } else {\r\n                if (context && isQ(context) && isString(selector)) {\r\n                    return context.find(selector);\r\n                }\r\n                return init(selector, context);\r\n            }\r\n        };\r\n\r\n        $.fn = NodeList.prototype;\r\n        langx.mixin($.fn, {\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            length : 0,\r\n\r\n            map: function(fn) {\r\n                return $(uniq(langx.map(this, function(el, i) {\r\n                    return fn.call(el, i, el)\r\n                })));\r\n            },\r\n\r\n            slice: function() {\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            forEach: function() {\r\n                return forEach.apply(this,arguments);\r\n            },\r\n\r\n            get: function(idx) {\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n\r\n            indexOf: function() {\r\n                return indexOf.apply(this,arguments);\r\n            },\r\n\r\n            sort : function() {\r\n                return sort.apply(this,arguments);\r\n            },\r\n\r\n            toArray: function() {\r\n                return slice.call(this);\r\n            },\r\n\r\n            size: function() {\r\n                return this.length\r\n            },\r\n\r\n            //remove: wrapper_every_act(noder.remove, noder),\r\n            remove : function(selector) {\r\n                if (selector) {\r\n                    return this.find(selector).remove();\r\n                }\r\n                this.each(function(i,node){\r\n                    noder.remove(node);\r\n                });\r\n                return this;\r\n            },\r\n\r\n            each: function(callback) {\r\n                langx.each(this, callback);\r\n                return this;\r\n            },\r\n\r\n            filter: function(selector) {\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element) {\r\n                    return finder.matches(element, selector)\r\n                }))\r\n            },\r\n\r\n            add: function(selector, context) {\r\n                return $(uniq(this.toArray().concat($(selector, context).toArray())));\r\n            },\r\n\r\n            is: function(selector) {\r\n                if (this.length > 0) {\r\n                    var self = this;\r\n                    if (langx.isString(selector)) {\r\n                        return some.call(self,function(elem) {\r\n                            return finder.matches(elem, selector);\r\n                        });\r\n                    } else if (langx.isArrayLike(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return langx.inArray(elem, selector) > -1;\r\n                        });\r\n                    } else if (langx.isHtmlNode(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return elem ==  selector;\r\n                        });\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            not: function(selector) {\r\n                var nodes = []\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx,node) {\r\n                        if (!selector.call(this, idx,node)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el) {\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n\r\n            has: function(selector) {\r\n                return this.filter(function() {\r\n                    return isObject(selector) ?\r\n                        noder.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n\r\n            eq: function(idx) {\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\r\n            },\r\n\r\n            first: function() {\r\n                return this.eq(0);\r\n            },\r\n\r\n            last: function() {\r\n                return this.eq(-1);\r\n            },\r\n\r\n            find: wrapper_selector(finder.descendants, finder),\r\n\r\n            closest: wrapper_selector(finder.closest, finder),\r\n            /*\r\n                        closest: function(selector, context) {\r\n                            var node = this[0],\r\n                                collection = false\r\n                            if (typeof selector == 'object') collection = $(selector)\r\n                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))\r\n                                node = node !== context && !isDocument(node) && node.parentNode\r\n                            return $(node)\r\n                        },\r\n            */\r\n\r\n\r\n            parents: wrapper_selector(finder.ancestors, finder),\r\n\r\n            parentsUntil: wrapper_selector_until(finder.ancestors, finder),\r\n\r\n\r\n            parent: wrapper_selector(finder.parent, finder),\r\n\r\n            children: wrapper_selector(finder.children, finder),\r\n\r\n            contents: wrapper_map(noder.contents, noder),\r\n\r\n            empty: wrapper_every_act(noder.empty, noder),\r\n\r\n            html: wrapper_value(noder.html, noder),\r\n\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property) {\r\n                return langx.map(this, function(el) {\r\n                    return el[property]\r\n                })\r\n            },\r\n\r\n            pushStack : function(elms) {\r\n                var ret = $(elms);\r\n                ret.prevObject = this;\r\n                return ret;\r\n            },\r\n            \r\n            replaceWith: function(newContent) {\r\n                return this.before(newContent).remove();\r\n            },\r\n\r\n            wrap: function(html) {\r\n                /*\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index,node) {\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index,node) :\r\n                        clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n                */\r\n                var htmlIsFunction = typeof html === \"function\";\r\n\r\n                return this.each( function( i ) {\r\n                    $( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\r\n                } );                \r\n            },\r\n\r\n            wrapAll: function(html) {\r\n                /*\r\n                if (this[0]) {\r\n                    $(this[0]).before(wrappingElement = $(wrappingElement));\r\n                    var children;\r\n                    // drill down to the inmost element\r\n                    while ((children = wrappingElement.children()).length) {\r\n                        wrappingElement = children.first();\r\n                    }\r\n                    $(wrappingElement).append(this);\r\n                }\r\n                return this\r\n                */\r\n                var wrap;\r\n\r\n                if ( this[ 0 ] ) {\r\n                    if ( typeof html === \"function\" ) {\r\n                        html = html.call( this[ 0 ] );\r\n                    }\r\n\r\n                    // The elements to wrap the target around\r\n                    wrap = $( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\r\n\r\n                    if ( this[ 0 ].parentNode ) {\r\n                        wrap.insertBefore( this[ 0 ] );\r\n                    }\r\n\r\n                    wrap.map( function() {\r\n                        var elem = this;\r\n\r\n                        while ( elem.firstElementChild ) {\r\n                            elem = elem.firstElementChild;\r\n                        }\r\n\r\n                        return elem;\r\n                    } ).append( this );\r\n                }\r\n\r\n                return this;\r\n\r\n            },\r\n\r\n            wrapInner: function(html) {\r\n                /*\r\n                var func = isFunction(wrappingElement)\r\n                return this.each(function(index,node) {\r\n                    var self = $(this),\r\n                        contents = self.contents(),\r\n                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n                */\r\n                if ( typeof html === \"function\" ) {\r\n                    return this.each( function( i ) {\r\n                        $( this ).wrapInner( html.call( this, i ) );\r\n                    } );\r\n                }\r\n\r\n                return this.each( function() {\r\n                    var self = $( this ),\r\n                        contents = self.contents();\r\n\r\n                    if ( contents.length ) {\r\n                        contents.wrapAll( html );\r\n\r\n                    } else {\r\n                        self.append( html );\r\n                    }\r\n                } );\r\n\r\n            },\r\n\r\n            unwrap: function(selector) {\r\n                /*\r\n                if (this.parent().children().length === 0) {\r\n                    // remove dom without text\r\n                    this.parent(selector).not(\"body\").each(function() {\r\n                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));\r\n                    });\r\n                } else {\r\n                    this.parent().each(function() {\r\n                        $(this).replaceWith($(this).children())\r\n                    });\r\n                }\r\n                return this\r\n                */\r\n                this.parent(selector).not(\"body\").each( function() {\r\n                    $(this).replaceWith(this.childNodes);\r\n                });\r\n                return this;\r\n\r\n            },\r\n\r\n            clone: function() {\r\n                return this.map(function() {\r\n                    return this.cloneNode(true)\r\n                })\r\n            },\r\n\r\n\r\n            toggle: function(setting) {\r\n                return this.each(function() {\r\n                    var el = $(this);\r\n                    (setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show(): el.hide()\r\n                })\r\n            },\r\n\r\n            prev: function(selector) {\r\n                return $(this.pluck('previousElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            prevAll: wrapper_selector(finder.previousSiblings, finder),\r\n\r\n            next: function(selector) {\r\n                return $(this.pluck('nextElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            nextAll: wrapper_selector(finder.nextSiblings, finder),\r\n\r\n            siblings: wrapper_selector(finder.siblings, finder),\r\n\r\n            index: function(elem) {\r\n                if (elem) {\r\n                    return this.indexOf($(elem)[0]);\r\n                } else {\r\n                    return this.parent().children().indexOf(this[0]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove;\r\n\r\n        $.fn.hover = function(fnOver, fnOut) {\r\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\r\n        };\r\n\r\n\r\n        var traverseNode = noder.traverse;\r\n\r\n\r\n        $.fn.after = wrapper_node_operation(noder.after, noder);\r\n\r\n        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);\r\n\r\n        $.fn.before = wrapper_node_operation(noder.before, noder);\r\n\r\n        $.fn.append = wrapper_node_operation(noder.append, noder);\r\n\r\n\r\n        langx.each( {\r\n            appendTo: \"append\",\r\n            prependTo: \"prepend\",\r\n            insertBefore: \"before\",\r\n            insertAfter: \"after\",\r\n            replaceAll: \"replaceWith\"\r\n        }, function( name, original ) {\r\n            $.fn[ name ] = function( selector ) {\r\n                var elems,\r\n                    ret = [],\r\n                    insert = $( selector ),\r\n                    last = insert.length - 1,\r\n                    i = 0;\r\n\r\n                for ( ; i <= last; i++ ) {\r\n                    elems = i === last ? this : this.clone( true );\r\n                    $( insert[ i ] )[ original ]( elems );\r\n\r\n                    // Support: Android <=4.0 only, PhantomJS 1 only\r\n                    // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n                    push.apply( ret, elems.get() );\r\n                }\r\n\r\n                return this.pushStack( ret );\r\n            };\r\n        } );\r\n\r\n/*\r\n        $.fn.insertAfter = function(html) {\r\n            $(html).after(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.insertBefore = function(html) {\r\n            $(html).before(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.appendTo = function(html) {\r\n            $(html).append(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.prependTo = function(html) {\r\n            $(html).prepend(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceAll = function(selector) {\r\n            $(selector).replaceWith(this);\r\n            return this;\r\n        };\r\n*/\r\n        return $;\r\n    })();\r\n\r\n    (function($) {\r\n        $.fn.scrollParent = function( includeHidden ) {\r\n            var position = this.css( \"position\" ),\r\n                excludeStaticParent = position === \"absolute\",\r\n                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n                scrollParent = this.parents().filter( function() {\r\n                    var parent = $( this );\r\n                    if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                        return false;\r\n                    }\r\n                    return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                        parent.css( \"overflow-x\" ) );\r\n                } ).eq( 0 );\r\n\r\n            return position === \"fixed\" || !scrollParent.length ?\r\n                $( this[ 0 ].ownerDocument || document ) :\r\n                scrollParent;\r\n        };\r\n\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.end = function() {\r\n            return this.prevObject || $()\r\n        }\r\n\r\n        $.fn.andSelf = function() {\r\n            return this.add(this.prevObject || $())\r\n        }\r\n\r\n        $.fn.addBack = function(selector) {\r\n            if (this.prevObject) {\r\n                if (selector) {\r\n                    return this.add(this.prevObject.filter(selector));\r\n                } else {\r\n                    return this.add(this.prevObject);\r\n                }\r\n            } else {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {\r\n            var fn = $.fn[property]\r\n            $.fn[property] = function() {\r\n                var ret = fn.apply(this, arguments)\r\n                ret.prevObject = this\r\n                return ret\r\n            }\r\n        })\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.query = $.fn.find;\r\n\r\n        $.fn.place = function(refNode, position) {\r\n            // summary:\r\n            //      places elements of this node list relative to the first element matched\r\n            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n            // queryOrNode:\r\n            //      may be a string representing any valid CSS3 selector or a DOM node.\r\n            //      In the selector case, only the first matching element will be used\r\n            //      for relative positioning.\r\n            // position:\r\n            //      can be one of:\r\n            //\r\n            //      -   \"last\" (default)\r\n            //      -   \"first\"\r\n            //      -   \"before\"\r\n            //      -   \"after\"\r\n            //      -   \"only\"\r\n            //      -   \"replace\"\r\n            //\r\n            //      or an offset in the childNodes\r\n            if (langx.isString(refNode)) {\r\n                refNode = finder.descendant(refNode);\r\n            } else if (isQ(refNode)) {\r\n                refNode = refNode[0];\r\n            }\r\n            return this.each(function(i, node) {\r\n                switch (position) {\r\n                    case \"before\":\r\n                        noder.before(refNode, node);\r\n                        break;\r\n                    case \"after\":\r\n                        noder.after(refNode, node);\r\n                        break;\r\n                    case \"replace\":\r\n                        noder.replace(refNode, node);\r\n                        break;\r\n                    case \"only\":\r\n                        noder.empty(refNode);\r\n                        noder.append(refNode, node);\r\n                        break;\r\n                    case \"first\":\r\n                        noder.prepend(refNode, node);\r\n                        break;\r\n                        // else fallthrough...\r\n                    default: // aka: last\r\n                        noder.append(refNode, node);\r\n                }\r\n            });\r\n        };\r\n\r\n        $.fn.addContent = function(content, position) {\r\n            if (content.template) {\r\n                content = langx.substitute(content.template, content);\r\n            }\r\n            return this.append(content);\r\n        };\r\n\r\n\r\n\r\n        $.fn.disableSelection = ( function() {\r\n            var eventType = \"onselectstart\" in document.createElement( \"div\" ) ?\r\n                \"selectstart\" :\r\n                \"mousedown\";\r\n\r\n            return function() {\r\n                return this.on( eventType + \".ui-disableSelection\", function( event ) {\r\n                    event.preventDefault();\r\n                } );\r\n            };\r\n        } )();\r\n\r\n        $.fn.enableSelection = function() {\r\n            return this.off( \".ui-disableSelection\" );\r\n        };\r\n\r\n        $.fn.reflow = function() {\r\n            return noder.flow(this[0]);\r\n        };\r\n\r\n        $.fn.isBlockNode = function() {\r\n            return noder.isBlockNode(this[0]);\r\n        };\r\n       \r\n\r\n    })(query);\r\n\r\n    query.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n\r\n    query.wraps = {\r\n        wrapper_node_operation,\r\n        wrapper_map,\r\n        wrapper_value,\r\n        wrapper_selector,\r\n        wrapper_some_chk,\r\n        wrapper_selector_until,\r\n        wrapper_every_act_firstArgFunc,\r\n        wrapper_every_act,\r\n        wrapper_name_value\r\n\r\n    };\r\n\r\n    return skylark.attach(\"domx.query\", query);\r\n\r\n});\ndefine('skylark-domx-query/main',[\r\n\t\"./query\"\r\n],function(query){\r\n\treturn query;\r\n});\ndefine('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });\n\ndefine('skylark-domx-velm/velm',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\"\r\n], function(skylark, langx, noder, finder, $) {\r\n    var map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n    /*\r\n     * VisualElement is a skylark class type wrapping a visule dom node,\r\n     * provides a number of prototype methods and supports chain calls.\r\n     */\r\n    var VisualElement = langx.klass({\r\n        klassName: \"VisualElement\",\r\n\r\n        \"_construct\": function(node) {\r\n            if (langx.isString(node)) {\r\n                if (node.charAt(0) === \"<\") {\r\n                    //html\r\n                    node = noder.createFragment(node)[0];\r\n                } else {\r\n                    // id\r\n                    node = document.getElementById(node);\r\n                }\r\n            }\r\n            this._elm = node;\r\n        }\r\n    });\r\n\r\n    VisualElement.prototype.$ = VisualElement.prototype.query = function(selector) {\r\n        return $(selector,this._elm);\r\n    };\r\n\r\n    VisualElement.prototype.elm = function() {\r\n        return this._elm;\r\n    };\r\n\r\n    /*\r\n     * the VisualElement object wrapping document.body\r\n     */\r\n    var root = new VisualElement(document.body),\r\n        velm = function(node) {\r\n            if (node) {\r\n                return new VisualElement(node);\r\n            } else {\r\n                return root;\r\n            }\r\n        };\r\n    /*\r\n     * Extend VisualElement prototype with wrapping the specified methods.\r\n     * @param {ArrayLike} fn\r\n     * @param {Object} context\r\n     */\r\n    function _delegator(fn, context) {\r\n        return function() {\r\n            var self = this,\r\n                elem = self._elm,\r\n                ret = fn.apply(context, [elem].concat(slice.call(arguments)));\r\n\r\n            if (ret) {\r\n                if (ret === context) {\r\n                    return self;\r\n                } else {\r\n                    if (ret instanceof HTMLElement) {\r\n                        ret = new VisualElement(ret);\r\n                    } else if (langx.isArrayLike(ret)) {\r\n                        ret = map.call(ret, function(el) {\r\n                            if (el instanceof HTMLElement) {\r\n                                return new VisualElement(el);\r\n                            } else {\r\n                                return el;\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n    }\r\n\r\n    langx.mixin(velm, {\r\n        batch: function(nodes, action, args) {\r\n            nodes.forEach(function(node) {\r\n                var elm = (node instanceof VisualElement) ? node : velm(node);\r\n                elm[action].apply(elm, args);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        root: new VisualElement(document.body),\r\n\r\n        VisualElement: VisualElement,\r\n\r\n        partial: function(name, fn) {\r\n            var props = {};\r\n\r\n            props[name] = fn;\r\n\r\n            VisualElement.partial(props);\r\n        },\r\n\r\n        delegate: function(names, context) {\r\n            var props = {};\r\n\r\n            names.forEach(function(name) {\r\n                props[name] = _delegator(context[name], context);\r\n            });\r\n\r\n            VisualElement.partial(props);\r\n        }\r\n    });\r\n\r\n    // from ./finder\r\n    velm.delegate([\r\n        \"ancestor\",\r\n        \"ancestors\",\r\n        \"children\",\r\n        \"descendant\",\r\n        \"find\",\r\n        \"findAll\",\r\n        \"firstChild\",\r\n        \"lastChild\",\r\n        \"matches\",\r\n        \"nextSibling\",\r\n        \"nextSiblings\",\r\n        \"parent\",\r\n        \"previousSibling\",\r\n        \"previousSiblings\",\r\n        \"siblings\"\r\n    ], finder);\r\n\r\n    /*\r\n     * find a dom element matched by the specified selector.\r\n     * @param {String} selector\r\n     */\r\n    velm.find = function(selector) {\r\n        if (selector === \"body\") {\r\n            return this.root;\r\n        } else {\r\n            return this.root.descendant(selector);\r\n        }\r\n    };\r\n\r\n\r\n    // from ./noder\r\n    velm.delegate([\r\n        \"after\",\r\n        \"append\",\r\n        \"before\",\r\n        \"clone\",\r\n        \"contains\",\r\n        \"contents\",\r\n        \"empty\",\r\n        \"html\",\r\n        \"isChildOf\",\r\n        \"isDocument\",\r\n        \"isInDocument\",\r\n        \"isWindow\",\r\n        \"ownerDoc\",\r\n        \"prepend\",\r\n        \"remove\",\r\n        \"removeChild\",\r\n        \"replace\",\r\n        \"reverse\",\r\n        \"throb\",\r\n        \"traverse\",\r\n        \"wrapper\",\r\n        \"wrapperInner\",\r\n        \"unwrap\"\r\n    ], noder);\r\n\r\n\r\n    return skylark.attach(\"domx.velm\", velm);\r\n});\ndefine('skylark-domx-velm/main',[\r\n\t\"./velm\"\r\n],function(velm){\r\n\treturn velm;\r\n});\ndefine('skylark-domx-velm', ['skylark-domx-velm/main'], function (main) { return main; });\n\ndefine('skylark-domx-data/main',[\r\n    \"./data\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"    \r\n],function(data,velm,$){\r\n    // from ./data\r\n    velm.delegate([\r\n        \"attr\",\r\n        \"data\",\r\n        \"prop\",\r\n        \"removeAttr\",\r\n        \"removeData\",\r\n        \"text\",\r\n        \"val\"\r\n    ], data);\r\n\r\n    $.fn.text = $.wraps.wrapper_value(data.text, data, data.text);\r\n\r\n    $.fn.attr = $.wraps.wrapper_name_value(data.attr, data, data.attr);\r\n\r\n    $.fn.removeAttr = $.wraps.wrapper_every_act(data.removeAttr, data);\r\n\r\n    $.fn.prop = $.wraps.wrapper_name_value(data.prop, data, data.prop);\r\n\r\n    $.fn.removeProp = $.wraps.wrapper_every_act(data.removeProp, data);\r\n\r\n    $.fn.data = $.wraps.wrapper_name_value(data.data, data, data.data);\r\n\r\n    $.fn.removeData = $.wraps.wrapper_every_act(data.removeData, data);\r\n\r\n    $.fn.val = $.wraps.wrapper_value(data.val, data, data.val);\r\n\r\n\r\n    return data;\r\n});\ndefine('skylark-domx-data', ['skylark-domx-data/main'], function (main) { return main; });\n\ndefine('skylark-domx-eventer/eventer',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\"\r\n], function(skylark, langx, browser, finder, noder, datax) {\r\n    var mixin = langx.mixin,\r\n        each = langx.each,\r\n        slice = Array.prototype.slice,\r\n        uid = langx.uid,\r\n        ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,\r\n        eventMethods = {\r\n            preventDefault: \"isDefaultPrevented\",\r\n            stopImmediatePropagation: \"isImmediatePropagationStopped\",\r\n            stopPropagation: \"isPropagationStopped\"\r\n        },\r\n        readyRE = /complete|loaded|interactive/;\r\n\r\n    function compatible(event, source) {\r\n        if (source || !event.isDefaultPrevented) {\r\n            if (!source) {\r\n                source = event;\r\n            }\r\n\r\n            langx.each(eventMethods, function(name, predicate) {\r\n                var sourceMethod = source[name];\r\n                event[name] = function() {\r\n                    this[predicate] = langx.returnTrue;\r\n                    return sourceMethod && sourceMethod.apply(source, arguments);\r\n                }\r\n                event[predicate] = langx.returnFalse;\r\n            });\r\n        }\r\n        return event;\r\n    }\r\n\r\n    function parse(event) {\r\n        var segs = (\"\" + event).split(\".\");\r\n        return {\r\n            type: segs[0],\r\n            ns: segs.slice(1).sort().join(\" \")\r\n        };\r\n    }\r\n\r\n\r\n    var NativeEventCtors = [\r\n            window[\"CustomEvent\"], // 0 default\r\n            window[\"CompositionEvent\"], // 1\r\n            window[\"DragEvent\"], // 2\r\n            window[\"Event\"], // 3\r\n            window[\"FocusEvent\"], // 4\r\n            window[\"KeyboardEvent\"], // 5\r\n            window[\"MessageEvent\"], // 6\r\n            window[\"MouseEvent\"], // 7\r\n            window[\"MouseScrollEvent\"], // 8\r\n            window[\"MouseWheelEvent\"], // 9\r\n            window[\"MutationEvent\"], // 10\r\n            window[\"ProgressEvent\"], // 11\r\n            window[\"TextEvent\"], // 12\r\n            window[\"TouchEvent\"], // 13\r\n            window[\"UIEvent\"], // 14\r\n            window[\"WheelEvent\"], // 15\r\n            window[\"ClipboardEvent\"] // 16\r\n        ],\r\n        NativeEvents = {\r\n            \"compositionstart\": 1, // CompositionEvent\r\n            \"compositionend\": 1, // CompositionEvent\r\n            \"compositionupdate\": 1, // CompositionEvent\r\n\r\n            \"beforecopy\": 16, // ClipboardEvent\r\n            \"beforecut\": 16, // ClipboardEvent\r\n            \"beforepaste\": 16, // ClipboardEvent\r\n            \"copy\": 16, // ClipboardEvent\r\n            \"cut\": 16, // ClipboardEvent\r\n            \"paste\": 16, // ClipboardEvent\r\n\r\n            \"drag\": 2, // DragEvent\r\n            \"dragend\": 2, // DragEvent\r\n            \"dragenter\": 2, // DragEvent\r\n            \"dragexit\": 2, // DragEvent\r\n            \"dragleave\": 2, // DragEvent\r\n            \"dragover\": 2, // DragEvent\r\n            \"dragstart\": 2, // DragEvent\r\n            \"drop\": 2, // DragEvent\r\n\r\n            \"abort\": 3, // Event\r\n            \"change\": 3, // Event\r\n            \"error\": 3, // Event\r\n            \"selectionchange\": 3, // Event\r\n            \"submit\": 3, // Event\r\n            \"reset\": 3, // Event\r\n\r\n            \"focus\": 4, // FocusEvent\r\n            \"blur\": 4, // FocusEvent\r\n            \"focusin\": 4, // FocusEvent\r\n            \"focusout\": 4, // FocusEvent\r\n\r\n            \"keydown\": 5, // KeyboardEvent\r\n            \"keypress\": 5, // KeyboardEvent\r\n            \"keyup\": 5, // KeyboardEvent\r\n\r\n            \"message\": 6, // MessageEvent\r\n\r\n            \"click\": 7, // MouseEvent\r\n            \"contextmenu\": 7, // MouseEvent\r\n            \"dblclick\": 7, // MouseEvent\r\n            \"mousedown\": 7, // MouseEvent\r\n            \"mouseup\": 7, // MouseEvent\r\n            \"mousemove\": 7, // MouseEvent\r\n            \"mouseover\": 7, // MouseEvent\r\n            \"mouseout\": 7, // MouseEvent\r\n            \"mouseenter\": 7, // MouseEvent\r\n            \"mouseleave\": 7, // MouseEvent\r\n\r\n\r\n            \"textInput\": 12, // TextEvent\r\n\r\n            \"touchstart\": 13, // TouchEvent\r\n            \"touchmove\": 13, // TouchEvent\r\n            \"touchend\": 13, // TouchEvent\r\n\r\n            \"load\": 14, // UIEvent\r\n            \"resize\": 14, // UIEvent\r\n            \"select\": 14, // UIEvent\r\n            \"scroll\": 14, // UIEvent\r\n            \"unload\": 14, // UIEvent,\r\n\r\n            \"wheel\": 15 // WheelEvent\r\n        };\r\n\r\n    //create a custom dom event\r\n    var createEvent = (function() {\r\n\r\n        function getEventCtor(type) {\r\n            var idx = NativeEvents[type];\r\n            if (!idx) {\r\n                idx = 0;\r\n            }\r\n            return NativeEventCtors[idx];\r\n        }\r\n\r\n        return function(type, props) {\r\n            //create a custom dom event\r\n\r\n            if (langx.isString(type)) {\r\n                props = props || {};\r\n            } else {\r\n                props = type || {};\r\n                type = props.type || \"\";\r\n            }\r\n            var parsed = parse(type);\r\n            type = parsed.type;\r\n\r\n            props = langx.mixin({\r\n                bubbles: true,\r\n                cancelable: true\r\n            }, props);\r\n\r\n            if (parsed.ns) {\r\n                props.namespace = parsed.ns;\r\n            }\r\n\r\n            var ctor = getEventCtor(type),\r\n                e = new ctor(type, props);\r\n\r\n            langx.safeMixin(e, props);\r\n\r\n            return compatible(e);\r\n        };\r\n    })();\r\n\r\n    function createProxy(src, props) {\r\n        var key,\r\n            proxy = {\r\n                originalEvent: src\r\n            };\r\n        for (key in src) {\r\n            if (key !== \"keyIdentifier\" && !ignoreProperties.test(key) && src[key] !== undefined) {\r\n                proxy[key] = src[key];\r\n            }\r\n        }\r\n        if (props) {\r\n            langx.mixin(proxy, props);\r\n        }\r\n        return compatible(proxy, src);\r\n    }\r\n\r\n    var\r\n        specialEvents = {},\r\n        focusinSupported = \"onfocusin\" in window,\r\n        focus = { focus: \"focusin\", blur: \"focusout\" },\r\n        hover = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" },\r\n        realEvent = function(type) {\r\n            return hover[type] || (focusinSupported && focus[type]) || type;\r\n        },\r\n        handlers = {},\r\n        EventBindings = langx.klass({\r\n            init: function(target, event) {\r\n                this._target = target;\r\n                this._event = event;\r\n                this._bindings = [];\r\n            },\r\n\r\n            add: function(fn, options) {\r\n                var bindings = this._bindings,\r\n                    binding = {\r\n                        fn: fn,\r\n                        options: langx.mixin({}, options)\r\n                    };\r\n\r\n                bindings.push(binding);\r\n\r\n                var self = this;\r\n                if (!self._listener) {\r\n                    self._listener = function(domEvt) {\r\n                        var elm = this,\r\n                            e = createProxy(domEvt),\r\n                            args = domEvt._args,\r\n                            bindings = self._bindings,\r\n                            ns = e.namespace;\r\n\r\n                        if (langx.isDefined(args)) {\r\n                            args = [e].concat(args);\r\n                        } else {\r\n                            args = [e];\r\n                        }\r\n\r\n                        langx.each(bindings, function(idx, binding) {\r\n                            var match = elm;\r\n                            if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\r\n                                return false;\r\n                            }\r\n                            var fn = binding.fn,\r\n                                options = binding.options || {},\r\n                                selector = options.selector,\r\n                                one = options.one,\r\n                                data = options.data;\r\n\r\n                            if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {\r\n                                return;\r\n                            }\r\n                            if (selector) {\r\n                                match = finder.closest(e.target, selector);\r\n                                if (match && match !== elm) {\r\n                                    langx.mixin(e, {\r\n                                        currentTarget: match,\r\n                                        liveFired: elm\r\n                                    });\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            var originalEvent = self._event;\r\n                            if (originalEvent in hover) {\r\n                                var related = e.relatedTarget;\r\n                                if (related && (related === match || noder.contains(match, related))) {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            if (langx.isDefined(data)) {\r\n                                e.data = data;\r\n                            }\r\n\r\n                            if (one) {\r\n                                self.remove(fn, options);\r\n                            }\r\n\r\n                            var result = fn.apply(match, args);\r\n\r\n                            if (result === false) {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                            }\r\n                        });;\r\n                    };\r\n\r\n                    var event = self._event;\r\n                    /*\r\n                                        if (event in hover) {\r\n                                            var l = self._listener;\r\n                                            self._listener = function(e) {\r\n                                                var related = e.relatedTarget;\r\n                                                if (!related || (related !== this && !noder.contains(this, related))) {\r\n                                                    return l.apply(this, arguments);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                    */\r\n\r\n                    if (self._target.addEventListener) {\r\n                        self._target.addEventListener(realEvent(event), self._listener, false);\r\n                    } else {\r\n                        console.warn(\"invalid eventer object\", self._target);\r\n                    }\r\n                }\r\n\r\n            },\r\n            remove: function(fn, options) {\r\n                options = langx.mixin({}, options);\r\n\r\n                function matcherFor(ns) {\r\n                    return new RegExp(\"(?:^| )\" + ns.replace(\" \", \" .* ?\") + \"(?: |$)\");\r\n                }\r\n                var matcher;\r\n                if (options.ns) {\r\n                    matcher = matcherFor(options.ns);\r\n                }\r\n\r\n                this._bindings = this._bindings.filter(function(binding) {\r\n                    var removing = (!fn || fn === binding.fn) &&\r\n                        (!matcher || matcher.test(binding.options.ns)) &&\r\n                        (!options.selector || options.selector == binding.options.selector);\r\n\r\n                    return !removing;\r\n                });\r\n                if (this._bindings.length == 0) {\r\n                    if (this._target.removeEventListener) {\r\n                        this._target.removeEventListener(realEvent(this._event), this._listener, false);\r\n                    }\r\n                    this._listener = null;\r\n                }\r\n            }\r\n        }),\r\n        EventsHandler = langx.klass({\r\n            init: function(elm) {\r\n                this._target = elm;\r\n                this._handler = {};\r\n            },\r\n\r\n            // add a event listener\r\n            // selector Optional\r\n            register: function(event, callback, options) {\r\n                // Seperate the event from the namespace\r\n                var parsed = parse(event),\r\n                    event = parsed.type,\r\n                    specialEvent = specialEvents[event],\r\n                    bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);\r\n\r\n                var events = this._handler;\r\n\r\n                // Check if there is already a handler for this event\r\n                if (events[event] === undefined) {\r\n                    events[event] = new EventBindings(this._target, bindingEvent || event);\r\n                }\r\n\r\n                // Register the new callback function\r\n                events[event].add(callback, langx.mixin({\r\n                    ns: parsed.ns\r\n                }, options)); // options:{selector:xxx}\r\n            },\r\n\r\n            // remove a event listener\r\n            unregister: function(event, fn, options) {\r\n                // Check for parameter validtiy\r\n                var events = this._handler,\r\n                    parsed = parse(event);\r\n                event = parsed.type;\r\n\r\n                if (event) {\r\n                    var listener = events[event];\r\n\r\n                    if (listener) {\r\n                        listener.remove(fn, langx.mixin({\r\n                            ns: parsed.ns\r\n                        }, options));\r\n                    }\r\n                } else {\r\n                    //remove all events\r\n                    for (event in events) {\r\n                        var listener = events[event];\r\n                        listener.remove(fn, langx.mixin({\r\n                            ns: parsed.ns\r\n                        }, options));\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n\r\n        findHandler = function(elm) {\r\n            var id = uid(elm),\r\n                handler = handlers[id];\r\n            if (!handler) {\r\n                handler = handlers[id] = new EventsHandler(elm);\r\n            }\r\n            return handler;\r\n        };\r\n\r\n    /*   \r\n     * Remove an event handler for one or more events from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional } selector\r\n     * @param {Function} callback\r\n     */\r\n    function off(elm, events, selector, callback) {\r\n        var $this = this\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                off(elm, type, selector, fn);\r\n            })\r\n            return $this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !langx.isFunction(callback) && callback !== false) {\r\n            callback = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        if (events) events.forEach(function(event) {\r\n\r\n            handler.unregister(event, callback, {\r\n                selector: selector,\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Attach an event handler function for one or more events to the selected elements.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     * @param {Boolean　Optional} one\r\n     */\r\n    function on(elm, events, selector, data, callback, one) {\r\n\r\n        var autoRemove, delegator;\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                on(elm, type, selector, data, fn, one);\r\n            });\r\n            return this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n            callback = data;\r\n            data = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (langx.isFunction(data)) {\r\n            callback = data;\r\n            data = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        events.forEach(function(event) {\r\n            if (event == \"ready\") {\r\n                return ready(callback);\r\n            }\r\n            handler.register(event, callback, {\r\n                data: data,\r\n                selector: selector,\r\n                one: !!one\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Attach a handler to an event for the elements. The handler is executed at most once per \r\n     * @param {HTMLElement} elm  \r\n     * @param {String} event\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     */\r\n    function one(elm, events, selector, data, callback) {\r\n        on(elm, events, selector, data, callback, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Prevents propagation and clobbers the default action of the passed event. The same as calling event.preventDefault() and event.stopPropagation(). \r\n     * @param {String} event\r\n     */\r\n    function stop(event) {\r\n        if (window.document.all) {\r\n            event.keyCode = 0;\r\n        }\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Execute all handlers and behaviors attached to the matched elements for the given event  \r\n     * @param {String} evented\r\n     * @param {String} type\r\n     * @param {Array or PlainObject } args\r\n     */\r\n    function trigger(evented, type, args) {\r\n        var e;\r\n        if (type instanceof Event) {\r\n            e = type;\r\n        } else {\r\n            e = createEvent(type, args);\r\n        }\r\n        e._args = args;\r\n\r\n        var fn = (evented.dispatchEvent || evented.trigger);\r\n        if (fn) {\r\n            fn.call(evented, e);\r\n        } else {\r\n            console.warn(\"The evented parameter is not a eventable object\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n    /*   \r\n     * Specify a function to execute when the DOM is fully loaded.  \r\n     * @param {Function} callback\r\n     */\r\n    function ready(callback) {\r\n        // need to check if document.body exists for IE as that browser reports\r\n        // document ready when it hasn't yet created the body elm\r\n        if (readyRE.test(document.readyState) && document.body) {\r\n            langx.defer(callback);\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', callback, false);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    var keyCodeLookup = {\r\n        \"backspace\": 8,\r\n        \"comma\": 188,\r\n        \"delete\": 46,\r\n        \"down\": 40,\r\n        \"end\": 35,\r\n        \"enter\": 13,\r\n        \"escape\": 27,\r\n        \"home\": 36,\r\n        \"left\": 37,\r\n        \"page_down\": 34,\r\n        \"page_up\": 33,\r\n        \"period\": 190,\r\n        \"right\": 39,\r\n        \"space\": 32,\r\n        \"tab\": 9,\r\n        \"up\": 38\r\n    };\r\n    //example:\r\n    //shortcuts(elm).add(\"CTRL+ALT+SHIFT+X\",function(){console.log(\"test!\")});\r\n    function shortcuts(elm) {\r\n\r\n        var registry = datax.data(elm, \"shortcuts\");\r\n        if (!registry) {\r\n            registry = {};\r\n            datax.data(elm, \"shortcuts\", registry);\r\n            var run = function(shortcut, event) {\r\n                var n = event.metaKey || event.ctrlKey;\r\n                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {\r\n                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {\r\n                        event.preventDefault();\r\n                        if (\"keydown\" == event.type) {\r\n                            shortcut.fn(event);\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            };\r\n            on(elm, \"keyup keypress keydown\", function(event) {\r\n                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {\r\n                    for (var key in registry) {\r\n                        run(registry[key], event);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        return {\r\n            add: function(pattern, fn) {\r\n                var shortcutKeys;\r\n                if (pattern.indexOf(\",\") > -1) {\r\n                    shortcutKeys = pattern.toLowerCase().split(\",\");\r\n                } else {\r\n                    shortcutKeys = pattern.toLowerCase().split(\" \");\r\n                }\r\n                shortcutKeys.forEach(function(shortcutKey) {\r\n                    var setting = {\r\n                        fn: fn,\r\n                        alt: false,\r\n                        ctrl: false,\r\n                        shift: false\r\n                    };\r\n                    shortcutKey.split(\"+\").forEach(function(key) {\r\n                        switch (key) {\r\n                            case \"alt\":\r\n                            case \"ctrl\":\r\n                            case \"shift\":\r\n                                setting[key] = true;\r\n                                break;\r\n                            default:\r\n                                setting.charCode = key.charCodeAt(0);\r\n                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);\r\n                        }\r\n                    });\r\n                    var regKey = (setting.ctrl ? \"ctrl\" : \"\") + \",\" + (setting.alt ? \"alt\" : \"\") + \",\" + (setting.shift ? \"shift\" : \"\") + \",\" + setting.keyCode;\r\n                    registry[regKey] = setting;\r\n                })\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    if (browser.support.transition) {\r\n        specialEvents.transitionEnd = {\r\n//          handle: function (e) {\r\n//            if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n//          },\r\n          bindType: browser.support.transition.end,\r\n          delegateType: browser.support.transition.end\r\n        }        \r\n    }\r\n\r\n    function eventer() {\r\n        return eventer;\r\n    }\r\n\r\n    langx.mixin(eventer, {\r\n        NativeEvents : NativeEvents,\r\n        \r\n        create: createEvent,\r\n\r\n        keys: keyCodeLookup,\r\n\r\n        off: off,\r\n\r\n        on: on,\r\n\r\n        one: one,\r\n\r\n        proxy: createProxy,\r\n\r\n        ready: ready,\r\n\r\n        shortcuts: shortcuts,\r\n\r\n        special: specialEvents,\r\n\r\n        stop: stop,\r\n\r\n        trigger: trigger\r\n\r\n    });\r\n\r\n    each(NativeEvents,function(name){\r\n        eventer[name] = function(elm,selector,data,callback) {\r\n            if (arguments.length>1) {\r\n                return this.on(elm,name,selector,data,callback);\r\n            } else {\r\n                if (name == \"focus\") {\r\n                    if (elm.focus) {\r\n                        elm.focus();\r\n                    }\r\n                } else if (name == \"blur\") {\r\n                    if (elm.blur) {\r\n                        elm.blur();\r\n                    }\r\n                } else if (name == \"click\") {\r\n                    if (elm.click) {\r\n                        elm.click();\r\n                    }\r\n                } else {\r\n                    this.trigger(elm,name);\r\n                }\r\n\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n\r\n    return skylark.attach(\"domx.eventer\",eventer);\r\n});\ndefine('skylark-domx-eventer/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./eventer\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"        \r\n],function(langx,eventer,velm,$){\r\n\r\n    var delegateMethodNames = [\r\n        \"off\",\r\n        \"on\",\r\n        \"one\",\r\n        \"trigger\"\r\n    ];\r\n\r\n    langx.each(eventer.NativeEvents,function(name){\r\n        delegateMethodNames.push(name);\r\n    });\r\n\r\n    // from ./eventer\r\n    velm.delegate(delegateMethodNames, eventer);\r\n\r\n    langx.each(delegateMethodNames,function(i,name){\r\n        $.fn[name] = $.wraps.wrapper_every_act(eventer[name],eventer);\r\n    });\r\n\r\n\r\n    /*\r\n    $.fn.on = $.wraps.wrapper_every_act(eventer.on, eventer);\r\n\r\n    $.fn.off = $.wraps.wrapper_every_act(eventer.off, eventer);\r\n\r\n    $.fn.trigger = $.wraps.wrapper_every_act(eventer.trigger, eventer);\r\n\r\n    ('focusin focusout focus blur load resize scroll unload click dblclick ' +\r\n        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +\r\n        'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {\r\n        $.fn[event] = $.wraps.wrapper_every_act(eventer[event],eventer);\r\n    });\r\n\r\n    $.fn.one = function(event, selector, data, callback) {\r\n        if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n            callback = data;\r\n            data = selector;\r\n            selector = null;\r\n        }\r\n\r\n        if (langx.isFunction(data)) {\r\n            callback = data;\r\n            data = null;\r\n        }\r\n\r\n        return this.on(event, selector, data, callback, 1)\r\n    }; \r\n    */\r\n\r\n    $.ready = eventer.ready;\r\n\r\n    return eventer;\r\n});\ndefine('skylark-domx-eventer', ['skylark-domx-eventer/main'], function (main) { return main; });\n\ndefine('skylark-domx-forms/forms',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.forms\",{});\r\n});\ndefine('skylark-domx-forms/deserialize',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./forms\"\r\n],function(langx,$,forms){\r\n  /**\r\n   * Updates a key/valueArray with the given property and value. Values will always be stored as arrays.\r\n   *\r\n   * @param prop The property to add the value to.\r\n   * @param value The value to add.\r\n   * @param obj The object to update.\r\n   * @returns {object} Updated object.\r\n   */\r\n  function updateKeyValueArray( prop, value, obj ) {\r\n    var current = obj[ prop ];\r\n\r\n    if ( current === undefined ) {\r\n      obj[ prop ] = [ value ];\r\n    } else {\r\n      current.push( value );\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Get all of the fields contained within the given elements by name.\r\n   *\r\n   * @param formElm The form element.\r\n   * @param filter Custom filter to apply to the list of fields.\r\n   * @returns {object} All of the fields contained within the given elements, keyed by name.\r\n   */\r\n  function getFieldsByName(formElm, filter ) {\r\n    var elementsByName = {};\r\n\r\n    // Extract fields from elements\r\n    var fields = $(formElm)\r\n      .map(function convertFormToElements() {\r\n        return this.elements ? langx.makeArray( this.elements ) : this;\r\n      })\r\n      .filter( filter || \":input:not(:disabled)\" )\r\n      .get();\r\n\r\n    langx.each( fields, function( index, field ) {\r\n      updateKeyValueArray( field.name, field, elementsByName );\r\n    });\r\n\r\n    return elementsByName;\r\n  }\r\n\r\n  /**\r\n   * Figure out the type of an element. Input type will be used first, falling back to nodeName.\r\n   *\r\n   * @param element DOM element to check type of.\r\n   * @returns {string} The element's type.\r\n   */\r\n  function getElementType( element ) {\r\n    return ( element.type || element.nodeName ).toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Normalize the provided data into a key/valueArray store.\r\n   *\r\n   * @param data The data provided by the user to the plugin.\r\n   * @returns {object} The data normalized into a key/valueArray store.\r\n   */\r\n  function normalizeData( data ) {\r\n    var normalized = {};\r\n    var rPlus = /\\+/g;\r\n\r\n    // Convert data from .serializeObject() notation\r\n    if ( langx.isPlainObject( data ) ) {\r\n      langx.extend( normalized, data );\r\n\r\n      // Convert non-array values into an array\r\n      langx.each( normalized, function( name, value ) {\r\n        if ( !langx.isArray( value ) ) {\r\n          normalized[ name ] = [ value ];\r\n        }\r\n      });\r\n\r\n    // Convert data from .serializeArray() notation\r\n    } else if ( langx.isArray( data ) ) {\r\n      langx.each( data, function( index, field ) {\r\n        updateKeyValueArray( field.name, field.value, normalized );\r\n      });\r\n\r\n    // Convert data from .serialize() notation\r\n    } else if ( typeof data === \"string\" ) {\r\n      langx.each( data.split( \"&\" ), function( index, field ) {\r\n        var current = field.split( \"=\" );\r\n        var name = decodeURIComponent( current[ 0 ].replace( rPlus, \"%20\" ) );\r\n        var value = decodeURIComponent( current[ 1 ].replace( rPlus, \"%20\" ) );\r\n        updateKeyValueArray( name, value, normalized );\r\n      });\r\n    }\r\n\r\n    return normalized;\r\n  }\r\n\r\n  /**\r\n   * Map of property name -> element types.\r\n   *\r\n   * @type {object}\r\n   */\r\n  var updateTypes = {\r\n    checked: [\r\n      \"radio\",\r\n      \"checkbox\"\r\n    ],\r\n    selected: [\r\n      \"option\",\r\n      \"select-one\",\r\n      \"select-multiple\"\r\n    ],\r\n    value: [\r\n      \"button\",\r\n      \"color\",\r\n      \"date\",\r\n      \"datetime\",\r\n      \"datetime-local\",\r\n      \"email\",\r\n      \"hidden\",\r\n      \"month\",\r\n      \"number\",\r\n      \"password\",\r\n      \"range\",\r\n      \"reset\",\r\n      \"search\",\r\n      \"submit\",\r\n      \"tel\",\r\n      \"text\",\r\n      \"textarea\",\r\n      \"time\",\r\n      \"url\",\r\n      \"week\"\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Get the property to update on an element being updated.\r\n   *\r\n   * @param element The DOM element to get the property for.\r\n   * @returns The name of the property to update if element is supported, otherwise `undefined`.\r\n   */\r\n  function getPropertyToUpdate( element ) {\r\n    var type = getElementType( element );\r\n    var elementProperty = undefined;\r\n\r\n    langx.each( updateTypes, function( property, types ) {\r\n      if ( langx.inArray( type, types ) > -1 ) {\r\n        elementProperty = property;\r\n        return false;\r\n      }\r\n    });\r\n\r\n    return elementProperty;\r\n  }\r\n\r\n  /**\r\n   * Update the element based on the provided data.\r\n   *\r\n   * @param element The DOM element to update.\r\n   * @param elementIndex The index of this element in the list of elements with the same name.\r\n   * @param value The serialized element value.\r\n   * @param valueIndex The index of the value in the list of values for elements with the same name.\r\n   * @param callback A function to call if the value of an element was updated.\r\n   */\r\n  function update( element, elementIndex, value, valueIndex, callback ) {\r\n    var property = getPropertyToUpdate( element );\r\n\r\n    // Handle value inputs\r\n    // If there are multiple value inputs with the same name, they will be populated by matching indexes.\r\n    if ( property == \"value\" && elementIndex == valueIndex ) {\r\n      element.value = value;\r\n      callback.call( element, value );\r\n\r\n    // Handle select menus, checkboxes and radio buttons\r\n    } else if ( property == \"checked\" || property == \"selected\" ) {\r\n      var fields = [];\r\n\r\n      // Extract option fields from select menus\r\n      if ( element.options ) {\r\n        langx.each( element.options, function( index, option ) {\r\n          fields.push( option );\r\n        });\r\n\r\n      } else {\r\n        fields.push( element );\r\n      }\r\n\r\n      // #37: Remove selection from multiple select menus before deserialization\r\n      if ( element.multiple && valueIndex == 0 ) {\r\n        element.selectedIndex = -1;\r\n      }\r\n\r\n      langx.each( fields, function( index, field ) {\r\n        if ( field.value == value ) {\r\n          field[ property ] = true;\r\n          callback.call( field, value );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default plugin options.\r\n   *\r\n   * @type {object}\r\n   */\r\n  var defaultOptions = {\r\n    change: langx.noop,\r\n    complete: langx.noop\r\n  };\r\n\r\n  /**\r\n   * The $.deserialize function.\r\n   *\r\n   * @param data The data to deserialize.\r\n   * @param options Additional options.\r\n   * @returns {jQuery} The jQuery object that was provided to the plugin.\r\n   */\r\n  function deserialize(formElm,data, options ) {\r\n\r\n    // Backwards compatible with old arguments: data, callback\r\n    if ( langx.isFunction( options ) ) {\r\n      options = { complete: options };\r\n    }\r\n\r\n    options = langx.extend( defaultOptions, options || {} );\r\n    data = normalizeData( data );\r\n\r\n    var elementsByName = getFieldsByName( formElm, options.filter );\r\n\r\n    langx.each( data, function( name, values ) {\r\n      langx.each( elementsByName[ name ], function( elementIndex, element ) {\r\n        langx.each( values, function( valueIndex, value ) {\r\n          update( element, elementIndex, value, valueIndex, options.change );\r\n        });\r\n      });\r\n    });\r\n\r\n    options.complete.call( formElm );\r\n\r\n    return this;\r\n  };\r\n\r\n  return forms.deserialize = deserialize;\r\n});\ndefine('skylark-domx-forms/serializeArray',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-data\",\r\n  \"./forms\"\r\n],function(langx,datax,forms){\r\n    function serializeArray(formElm) {\r\n        var name, type, result = [],\r\n            add = function(value) {\r\n                if (value.forEach) return value.forEach(add)\r\n                result.push({ name: name, value: value })\r\n            }\r\n        langx.each(formElm.elements, function(_, field) {\r\n            type = field.type, name = field.name\r\n            if (name && field.nodeName.toLowerCase() != 'fieldset' &&\r\n                !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&\r\n                ((type != 'radio' && type != 'checkbox') || field.checked))\r\n                add(datax.val(field))\r\n        })\r\n        return result\r\n    };\r\n\r\n    return forms.serializeArray = serializeArray;\r\n});\r\n\ndefine('skylark-domx-forms/serializeObject',[\r\n  \"skylark-langx/langx\",\r\n  \"./forms\",\r\n  \"./serializeArray\"\r\n],function(langx,forms,serializeArray){\r\n\r\n  function serializeObject(formElm){\r\n    var obj = {};\r\n    \r\n    langx.each(serializeArray(formElm), function(i,o){\r\n      var n = o.name,\r\n        v = o.value;\r\n        \r\n        obj[n] = obj[n] === undefined ? v\r\n          : langx.isArray( obj[n] ) ? obj[n].concat( v )\r\n          : [ obj[n], v ];\r\n    });\r\n    \r\n    return obj;\r\n  }\r\n\r\n  return forms.serializeObject = serializeObject;\r\n});  \ndefine('skylark-domx-forms/serialize',[\r\n  \"skylark-langx/langx\",\r\n  \"./forms\",\r\n  \"./serializeArray\"\r\n],function(langx,forms,serializeArray){\r\n    function serialize(formElm) {\r\n        var result = []\r\n        serializeArray(formElm).forEach(function(elm) {\r\n            result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))\r\n        })\r\n        return result.join('&')\r\n    }\r\n\r\n    return forms.serialize = serialize;\r\n});\ndefine('skylark-domx-forms/main',[\r\n\t\"./forms\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",\r\n    \"./deserialize\",\r\n    \"./serializeArray\",\r\n    \"./serializeObject\",\r\n    \"./serialize\"\r\n],function(forms,velm,$){\r\n\r\n    // from ./data\r\n    velm.delegate([\r\n        \"deserialize\",\r\n        \"serializeArray\",\r\n        \"serializeObject\",\r\n        \"serialize\"\r\n    ], forms);\r\n\r\n    $.fn.deserialize = $.wraps.wrapper_value(forms.deserialize, forms, forms.deserialize);\r\n    $.fn.serializeArray = $.wraps.wrapper_value(forms.serializeArray, forms, forms.serializeArray);\r\n    $.fn.serializeObject = $.wraps.wrapper_value(forms.serializeObject, forms, forms.serializeObject);\r\n    $.fn.serialize = $.wraps.wrapper_value(forms.serialize, forms, forms.serialize);\r\n\r\n\r\n\treturn forms;\r\n});\ndefine('skylark-domx-forms', ['skylark-domx-forms/main'], function (main) { return main; });\n\ndefine('skylark-domx-styler/styler',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getStyles(element).getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0;\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n\r\n    function getStyles( elem ) {\r\n\r\n        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\r\n        // IE throws on elements created in popups\r\n        // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\r\n        var view = elem.ownerDocument.defaultView;\r\n\r\n        if ( !view || !view.opener ) {\r\n            view = window;\r\n        }\r\n\r\n        return view.getComputedStyle( elem);\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        if (arguments.length < 3) {\r\n            var computedStyle,\r\n                computedStyle = getStyles(elm)\r\n            if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !self.hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                self.addClass(elm, klass);\r\n            } else {\r\n                self.removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.attach(\"domx.styler\", styler);\r\n});\ndefine('skylark-domx-styler/main',[\r\n\t\"./styler\",\r\n\t\"skylark-domx-velm\",\r\n\t\"skylark-domx-query\"\t\r\n],function(styler,velm,$){\r\n\t\r\n    // from ./styler\r\n    velm.delegate([\r\n        \"addClass\",\r\n        \"className\",\r\n        \"css\",\r\n        \"hasClass\",\r\n        \"hide\",\r\n        \"isInvisible\",\r\n        \"removeClass\",\r\n        \"show\",\r\n        \"toggleClass\"\r\n    ], styler);\r\n\r\n    // properties\r\n\r\n    var properties = [ 'position', 'left', 'top', 'right', 'bottom', 'width', 'height', 'border', 'borderLeft',\r\n    'borderTop', 'borderRight', 'borderBottom', 'borderColor', 'display', 'overflow', 'margin', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom', 'padding', 'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom', 'color',\r\n    'background', 'backgroundColor', 'opacity', 'fontSize', 'fontWeight', 'textAlign', 'textDecoration', 'textTransform', 'cursor', 'zIndex' ];\r\n\r\n    properties.forEach( function ( property ) {\r\n\r\n        var method = property;\r\n\r\n        velm.VisualElement.prototype[method ] = function (value) {\r\n\r\n            this.css( property, value );\r\n\r\n            return this;\r\n\r\n        };\r\n\r\n    });\r\n\r\n\r\n    $.fn.style = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    $.fn.css = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    //hasClass(name)\r\n    $.fn.hasClass = $.wraps.wrapper_some_chk(styler.hasClass, styler);\r\n\r\n    //addClass(name)\r\n    $.fn.addClass = $.wraps.wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className);\r\n\r\n    //removeClass(name)\r\n    $.fn.removeClass = $.wraps.wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className);\r\n\r\n    //toogleClass(name,when)\r\n    $.fn.toggleClass = $.wraps.wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className);\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n        \r\n\treturn styler;\r\n});\ndefine('skylark-domx-styler', ['skylark-domx-styler/main'], function (main) { return main; });\n\ndefine('skylark-domx-geom/geom',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n    //viewport coordinate\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            return elm.getBoundingClientRect()\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth,\r\n                height: elm.clientHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function height(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).height;\r\n        } else {\r\n            size(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = size(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect()\r\n            return {\r\n                left: obj.left + window.pageXOffset,\r\n                top: obj.top + window.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect()\r\n            return {\r\n                left: obj.left + window.pageXOffset,\r\n                top: obj.top + window.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left\r\n            }\r\n        } else {\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            }\r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        }\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function size(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function width(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).width;\r\n        } else {\r\n            size(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n        //viewport coordinate\r\n        boundingPosition: boundingPosition,\r\n\r\n        boundingRect: boundingRect,\r\n\r\n        clientHeight: clientHeight,\r\n\r\n        clientSize: clientSize,\r\n\r\n        clientWidth: clientWidth,\r\n\r\n        contentRect: contentRect,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        height: height,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect: marginRect,\r\n\r\n        marginSize: marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        size: size,\r\n\r\n        width: width\r\n    });\r\n\r\n    ( function() {\r\n        var max = Math.max,\r\n            abs = Math.abs,\r\n            rhorizontal = /left|center|right/,\r\n            rvertical = /top|center|bottom/,\r\n            roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\r\n            rposition = /^\\w+/,\r\n            rpercent = /%$/;\r\n\r\n        function getOffsets( offsets, width, height ) {\r\n            return [\r\n                parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),\r\n                parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )\r\n            ];\r\n        }\r\n\r\n        function parseCss( element, property ) {\r\n            return parseInt( styler.css( element, property ), 10 ) || 0;\r\n        }\r\n\r\n        function getDimensions( raw ) {\r\n            if ( raw.nodeType === 9 ) {\r\n                return {\r\n                    size: size(raw),\r\n                    offset: { top: 0, left: 0 }\r\n                };\r\n            }\r\n            if ( noder.isWindow( raw ) ) {\r\n                return {\r\n                    size: size(raw),\r\n                    offset: { \r\n                        top: scrollTop(raw), \r\n                        left: scrollLeft(raw) \r\n                    }\r\n                };\r\n            }\r\n            if ( raw.preventDefault ) {\r\n                return {\r\n                    size : {\r\n                        width: 0,\r\n                        height: 0\r\n                    },\r\n                    offset: { \r\n                        top: raw.pageY, \r\n                        left: raw.pageX \r\n                    }\r\n                };\r\n            }\r\n            return {\r\n                size: size(raw),\r\n                offset: pagePosition(raw)\r\n            };\r\n        }\r\n\r\n        function getScrollInfo( within ) {\r\n            var overflowX = within.isWindow || within.isDocument ? \"\" :\r\n                    styler.css(within.element,\"overflow-x\" ),\r\n                overflowY = within.isWindow || within.isDocument ? \"\" :\r\n                    styler.css(within.element,\"overflow-y\" ),\r\n                hasOverflowX = overflowX === \"scroll\" ||\r\n                    ( overflowX === \"auto\" && within.width < scrollWidth(within.element) ),\r\n                hasOverflowY = overflowY === \"scroll\" ||\r\n                    ( overflowY === \"auto\" && within.height < scrollHeight(within.element));\r\n            return {\r\n                width: hasOverflowY ? scrollbarWidth() : 0,\r\n                height: hasOverflowX ? scrollbarWidth() : 0\r\n            };\r\n        }\r\n\r\n        function getWithinInfo( element ) {\r\n            var withinElement = element || window,\r\n                isWindow = noder.isWindow( withinElement),\r\n                isDocument = !!withinElement && withinElement.nodeType === 9,\r\n                hasOffset = !isWindow && !isDocument,\r\n                msize = marginSize(withinElement);\r\n            return {\r\n                element: withinElement,\r\n                isWindow: isWindow,\r\n                isDocument: isDocument,\r\n                offset: hasOffset ? pagePosition(element) : { left: 0, top: 0 },\r\n                scrollLeft: scrollLeft(withinElement),\r\n                scrollTop: scrollTop(withinElement),\r\n                width: msize.width,\r\n                height: msize.height\r\n            };\r\n        }\r\n\r\n        function posit(elm,options ) {\r\n            // Make a copy, we don't want to modify arguments\r\n            options = langx.extend( {}, options );\r\n\r\n            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,\r\n                target = options.of,\r\n                within = getWithinInfo( options.within ),\r\n                scrollInfo = getScrollInfo( within ),\r\n                collision = ( options.collision || \"flip\" ).split( \" \" ),\r\n                offsets = {};\r\n\r\n            dimensions = getDimensions( target );\r\n            if ( target.preventDefault ) {\r\n\r\n                // Force left top to allow flipping\r\n                options.at = \"left top\";\r\n            }\r\n            targetWidth = dimensions.size.width;\r\n            targetHeight = dimensions.size.height;\r\n            targetOffset = dimensions.offset;\r\n\r\n            // Clone to reuse original targetOffset later\r\n            basePosition = langx.extend( {}, targetOffset );\r\n\r\n            // Force my and at to have valid horizontal and vertical positions\r\n            // if a value is missing or invalid, it will be converted to center\r\n            langx.each( [ \"my\", \"at\" ], function() {\r\n                var pos = ( options[ this ] || \"\" ).split( \" \" ),\r\n                    horizontalOffset,\r\n                    verticalOffset;\r\n\r\n                if ( pos.length === 1 ) {\r\n                    pos = rhorizontal.test( pos[ 0 ] ) ?\r\n                        pos.concat( [ \"center\" ] ) :\r\n                        rvertical.test( pos[ 0 ] ) ?\r\n                            [ \"center\" ].concat( pos ) :\r\n                            [ \"center\", \"center\" ];\r\n                }\r\n                pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : \"center\";\r\n                pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : \"center\";\r\n\r\n                // Calculate offsets\r\n                horizontalOffset = roffset.exec( pos[ 0 ] );\r\n                verticalOffset = roffset.exec( pos[ 1 ] );\r\n                offsets[ this ] = [\r\n                    horizontalOffset ? horizontalOffset[ 0 ] : 0,\r\n                    verticalOffset ? verticalOffset[ 0 ] : 0\r\n                ];\r\n\r\n                // Reduce to just the positions without the offsets\r\n                options[ this ] = [\r\n                    rposition.exec( pos[ 0 ] )[ 0 ],\r\n                    rposition.exec( pos[ 1 ] )[ 0 ]\r\n                ];\r\n            } );\r\n\r\n            // Normalize collision option\r\n            if ( collision.length === 1 ) {\r\n                collision[ 1 ] = collision[ 0 ];\r\n            }\r\n\r\n            if ( options.at[ 0 ] === \"right\" ) {\r\n                basePosition.left += targetWidth;\r\n            } else if ( options.at[ 0 ] === \"center\" ) {\r\n                basePosition.left += targetWidth / 2;\r\n            }\r\n\r\n            if ( options.at[ 1 ] === \"bottom\" ) {\r\n                basePosition.top += targetHeight;\r\n            } else if ( options.at[ 1 ] === \"center\" ) {\r\n                basePosition.top += targetHeight / 2;\r\n            }\r\n\r\n            atOffset = getOffsets( offsets.at, targetWidth, targetHeight );\r\n            basePosition.left += atOffset[ 0 ];\r\n            basePosition.top += atOffset[ 1 ];\r\n\r\n            return ( function(elem) {\r\n                var collisionPosition, using,\r\n                    msize = marginSize(elem),\r\n                    elemWidth = msize.width,\r\n                    elemHeight = msize.height,\r\n                    marginLeft = parseCss( elem, \"marginLeft\" ),\r\n                    marginTop = parseCss( elem, \"marginTop\" ),\r\n                    collisionWidth = elemWidth + marginLeft + parseCss( elem, \"marginRight\" ) +\r\n                        scrollInfo.width,\r\n                    collisionHeight = elemHeight + marginTop + parseCss( elem, \"marginBottom\" ) +\r\n                        scrollInfo.height,\r\n                    position = langx.extend( {}, basePosition ),\r\n                    myOffset = getOffsets( offsets.my, msize.width, msize.height);\r\n\r\n                if ( options.my[ 0 ] === \"right\" ) {\r\n                    position.left -= elemWidth;\r\n                } else if ( options.my[ 0 ] === \"center\" ) {\r\n                    position.left -= elemWidth / 2;\r\n                }\r\n\r\n                if ( options.my[ 1 ] === \"bottom\" ) {\r\n                    position.top -= elemHeight;\r\n                } else if ( options.my[ 1 ] === \"center\" ) {\r\n                    position.top -= elemHeight / 2;\r\n                }\r\n\r\n                position.left += myOffset[ 0 ];\r\n                position.top += myOffset[ 1 ];\r\n\r\n                collisionPosition = {\r\n                    marginLeft: marginLeft,\r\n                    marginTop: marginTop\r\n                };\r\n\r\n                langx.each( [ \"left\", \"top\" ], function( i, dir ) {\r\n                    if ( positions[ collision[ i ] ] ) {\r\n                        positions[ collision[ i ] ][ dir ]( position, {\r\n                            targetWidth: targetWidth,\r\n                            targetHeight: targetHeight,\r\n                            elemWidth: elemWidth,\r\n                            elemHeight: elemHeight,\r\n                            collisionPosition: collisionPosition,\r\n                            collisionWidth: collisionWidth,\r\n                            collisionHeight: collisionHeight,\r\n                            offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],\r\n                            my: options.my,\r\n                            at: options.at,\r\n                            within: within,\r\n                            elem: elem\r\n                        } );\r\n                    }\r\n                } );\r\n\r\n                if ( options.using ) {\r\n\r\n                    // Adds feedback as second argument to using callback, if present\r\n                    using = function( props ) {\r\n                        var left = targetOffset.left - position.left,\r\n                            right = left + targetWidth - elemWidth,\r\n                            top = targetOffset.top - position.top,\r\n                            bottom = top + targetHeight - elemHeight,\r\n                            feedback = {\r\n                                target: {\r\n                                    element: target,\r\n                                    left: targetOffset.left,\r\n                                    top: targetOffset.top,\r\n                                    width: targetWidth,\r\n                                    height: targetHeight\r\n                                },\r\n                                element: {\r\n                                    element: elem,\r\n                                    left: position.left,\r\n                                    top: position.top,\r\n                                    width: elemWidth,\r\n                                    height: elemHeight\r\n                                },\r\n                                horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\r\n                                vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\r\n                            };\r\n                        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {\r\n                            feedback.horizontal = \"center\";\r\n                        }\r\n                        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {\r\n                            feedback.vertical = \"middle\";\r\n                        }\r\n                        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {\r\n                            feedback.important = \"horizontal\";\r\n                        } else {\r\n                            feedback.important = \"vertical\";\r\n                        }\r\n                        options.using.call( this, props, feedback );\r\n                    };\r\n                }\r\n\r\n                pagePosition(elem, langx.extend( position, { using: using } ));\r\n            })(elm);\r\n        }\r\n\r\n        var positions = {\r\n            fit: {\r\n                left: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                        outerWidth = within.width,\r\n                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                        overLeft = withinOffset - collisionPosLeft,\r\n                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\r\n                        newOverRight;\r\n\r\n                    // Element is wider than within\r\n                    if ( data.collisionWidth > outerWidth ) {\r\n\r\n                        // Element is initially over the left side of within\r\n                        if ( overLeft > 0 && overRight <= 0 ) {\r\n                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -\r\n                                withinOffset;\r\n                            position.left += overLeft - newOverRight;\r\n\r\n                        // Element is initially over right side of within\r\n                        } else if ( overRight > 0 && overLeft <= 0 ) {\r\n                            position.left = withinOffset;\r\n\r\n                        // Element is initially over both left and right sides of within\r\n                        } else {\r\n                            if ( overLeft > overRight ) {\r\n                                position.left = withinOffset + outerWidth - data.collisionWidth;\r\n                            } else {\r\n                                position.left = withinOffset;\r\n                            }\r\n                        }\r\n\r\n                    // Too far left -> align with left edge\r\n                    } else if ( overLeft > 0 ) {\r\n                        position.left += overLeft;\r\n\r\n                    // Too far right -> align with right edge\r\n                    } else if ( overRight > 0 ) {\r\n                        position.left -= overRight;\r\n\r\n                    // Adjust based on position and margin\r\n                    } else {\r\n                        position.left = max( position.left - collisionPosLeft, position.left );\r\n                    }\r\n                },\r\n                top: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\r\n                        outerHeight = data.within.height,\r\n                        collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                        overTop = withinOffset - collisionPosTop,\r\n                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\r\n                        newOverBottom;\r\n\r\n                    // Element is taller than within\r\n                    if ( data.collisionHeight > outerHeight ) {\r\n\r\n                        // Element is initially over the top of within\r\n                        if ( overTop > 0 && overBottom <= 0 ) {\r\n                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -\r\n                                withinOffset;\r\n                            position.top += overTop - newOverBottom;\r\n\r\n                        // Element is initially over bottom of within\r\n                        } else if ( overBottom > 0 && overTop <= 0 ) {\r\n                            position.top = withinOffset;\r\n\r\n                        // Element is initially over both top and bottom of within\r\n                        } else {\r\n                            if ( overTop > overBottom ) {\r\n                                position.top = withinOffset + outerHeight - data.collisionHeight;\r\n                            } else {\r\n                                position.top = withinOffset;\r\n                            }\r\n                        }\r\n\r\n                    // Too far up -> align with top\r\n                    } else if ( overTop > 0 ) {\r\n                        position.top += overTop;\r\n\r\n                    // Too far down -> align with bottom edge\r\n                    } else if ( overBottom > 0 ) {\r\n                        position.top -= overBottom;\r\n\r\n                    // Adjust based on position and margin\r\n                    } else {\r\n                        position.top = max( position.top - collisionPosTop, position.top );\r\n                    }\r\n                }\r\n            },\r\n            flip: {\r\n                left: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.offset.left + within.scrollLeft,\r\n                        outerWidth = within.width,\r\n                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                        overLeft = collisionPosLeft - offsetLeft,\r\n                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\r\n                        myOffset = data.my[ 0 ] === \"left\" ?\r\n                            -data.elemWidth :\r\n                            data.my[ 0 ] === \"right\" ?\r\n                                data.elemWidth :\r\n                                0,\r\n                        atOffset = data.at[ 0 ] === \"left\" ?\r\n                            data.targetWidth :\r\n                            data.at[ 0 ] === \"right\" ?\r\n                                -data.targetWidth :\r\n                                0,\r\n                        offset = -2 * data.offset[ 0 ],\r\n                        newOverRight,\r\n                        newOverLeft;\r\n\r\n                    if ( overLeft < 0 ) {\r\n                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -\r\n                            outerWidth - withinOffset;\r\n                        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {\r\n                            position.left += myOffset + atOffset + offset;\r\n                        }\r\n                    } else if ( overRight > 0 ) {\r\n                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +\r\n                            atOffset + offset - offsetLeft;\r\n                        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {\r\n                            position.left += myOffset + atOffset + offset;\r\n                        }\r\n                    }\r\n                },\r\n                top: function( position, data ) {\r\n                    var within = data.within,\r\n                        withinOffset = within.offset.top + within.scrollTop,\r\n                        outerHeight = within.height,\r\n                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\r\n                        collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                        overTop = collisionPosTop - offsetTop,\r\n                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\r\n                        top = data.my[ 1 ] === \"top\",\r\n                        myOffset = top ?\r\n                            -data.elemHeight :\r\n                            data.my[ 1 ] === \"bottom\" ?\r\n                                data.elemHeight :\r\n                                0,\r\n                        atOffset = data.at[ 1 ] === \"top\" ?\r\n                            data.targetHeight :\r\n                            data.at[ 1 ] === \"bottom\" ?\r\n                                -data.targetHeight :\r\n                                0,\r\n                        offset = -2 * data.offset[ 1 ],\r\n                        newOverTop,\r\n                        newOverBottom;\r\n                    if ( overTop < 0 ) {\r\n                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -\r\n                            outerHeight - withinOffset;\r\n                        if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {\r\n                            position.top += myOffset + atOffset + offset;\r\n                        }\r\n                    } else if ( overBottom > 0 ) {\r\n                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +\r\n                            offset - offsetTop;\r\n                        if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {\r\n                            position.top += myOffset + atOffset + offset;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            flipfit: {\r\n                left: function() {\r\n                    positions.flip.left.apply( this, arguments );\r\n                    positions.fit.left.apply( this, arguments );\r\n                },\r\n                top: function() {\r\n                    positions.flip.top.apply( this, arguments );\r\n                    positions.fit.top.apply( this, arguments );\r\n                }\r\n            }\r\n        };\r\n\r\n        geom.posit = posit;\r\n    })();\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});\ndefine('skylark-domx-geom/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"        \r\n],function(langx,geom,velm,$){\r\n   // from ./geom\r\n    velm.delegate([\r\n        \"borderExtents\",\r\n        \"boundingPosition\",\r\n        \"boundingRect\",\r\n        \"clientHeight\",\r\n        \"clientSize\",\r\n        \"clientWidth\",\r\n        \"contentRect\",\r\n        \"height\",\r\n        \"marginExtents\",\r\n        \"offsetParent\",\r\n        \"paddingExtents\",\r\n        \"pagePosition\",\r\n        \"pageRect\",\r\n        \"relativePosition\",\r\n        \"relativeRect\",\r\n        \"scrollIntoView\",\r\n        \"scrollLeft\",\r\n        \"scrollTop\",\r\n        \"size\",\r\n        \"width\"\r\n    ], geom);\r\n\r\n    $.fn.offset = $.wraps.wrapper_value(geom.pagePosition, geom, geom.pagePosition);\r\n\r\n    $.fn.scrollTop = $.wraps.wrapper_value(geom.scrollTop, geom);\r\n\r\n    $.fn.scrollLeft = $.wraps.wrapper_value(geom.scrollLeft, geom);\r\n\r\n    $.fn.position =  function(options) {\r\n        if (!this.length) {\r\n            return this;\r\n        }\r\n\r\n        if (options) {\r\n            if (options.of && options.of.length) {\r\n                options = langx.clone(options);\r\n                options.of = options.of[0];\r\n            }\r\n            return this.each( function() {\r\n                geom.posit(this,options);\r\n            });\r\n        } else {\r\n            var elem = this[0];\r\n\r\n            return geom.relativePosition(elem);\r\n\r\n        }             \r\n    };\r\n\r\n    $.fn.offsetParent = $.wraps.wrapper_map(geom.offsetParent, geom);\r\n\r\n\r\n    $.fn.size = $.wraps.wrapper_value(geom.size, geom);\r\n\r\n    $.fn.width = $.wraps.wrapper_value(geom.width, geom, geom.width);\r\n\r\n    $.fn.height = $.wraps.wrapper_value(geom.height, geom, geom.height);\r\n\r\n    $.fn.clientSize = $.wraps.wrapper_value(geom.clientSize, geom.clientSize);\r\n    \r\n    ['width', 'height'].forEach(function(dimension) {\r\n        var offset, Dimension = dimension.replace(/./, function(m) {\r\n            return m[0].toUpperCase()\r\n        });\r\n\r\n        $.fn['outer' + Dimension] = function(margin, value) {\r\n            if (arguments.length) {\r\n                if (typeof margin !== 'boolean') {\r\n                    value = margin;\r\n                    margin = false;\r\n                }\r\n            } else {\r\n                margin = false;\r\n                value = undefined;\r\n            }\r\n\r\n            if (value === undefined) {\r\n                var el = this[0];\r\n                if (!el) {\r\n                    return undefined;\r\n                }\r\n                var cb = geom.size(el);\r\n                if (margin) {\r\n                    var me = geom.marginExtents(el);\r\n                    cb.width = cb.width + me.left + me.right;\r\n                    cb.height = cb.height + me.top + me.bottom;\r\n                }\r\n                return dimension === \"width\" ? cb.width : cb.height;\r\n            } else {\r\n                return this.each(function(idx, el) {\r\n                    var mb = {};\r\n                    var me = geom.marginExtents(el);\r\n                    if (dimension === \"width\") {\r\n                        mb.width = value;\r\n                        if (margin) {\r\n                            mb.width = mb.width - me.left - me.right\r\n                        }\r\n                    } else {\r\n                        mb.height = value;\r\n                        if (margin) {\r\n                            mb.height = mb.height - me.top - me.bottom;\r\n                        }\r\n                    }\r\n                    geom.size(el, mb);\r\n                })\r\n\r\n            }\r\n        };\r\n    })\r\n\r\n    $.fn.innerWidth = $.wraps.wrapper_value(geom.clientWidth, geom, geom.clientWidth);\r\n\r\n    $.fn.innerHeight = $.wraps.wrapper_value(geom.clientHeight, geom, geom.clientHeight);\r\n\r\n    return geom;\r\n});\ndefine('skylark-domx-geom', ['skylark-domx-geom/main'], function (main) { return main; });\n\ndefine('skylark-domx-fx/fx',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-eventer\"\r\n], function(skylark, langx, browser, noder, geom, styler, eventer) {\r\n    var animationName,\r\n        animationDuration,\r\n        animationTiming,\r\n        animationDelay,\r\n        transitionProperty,\r\n        transitionDuration,\r\n        transitionTiming,\r\n        transitionDelay,\r\n\r\n        animationEnd = browser.normalizeCssEvent('AnimationEnd'),\r\n        transitionEnd = browser.normalizeCssEvent('TransitionEnd'),\r\n\r\n        supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,\r\n        transform = browser.css3PropPrefix + \"transform\",\r\n        cssReset = {};\r\n\r\n\r\n    cssReset[animationName = browser.normalizeCssProperty(\"animation-name\")] =\r\n        cssReset[animationDuration = browser.normalizeCssProperty(\"animation-duration\")] =\r\n        cssReset[animationDelay = browser.normalizeCssProperty(\"animation-delay\")] =\r\n        cssReset[animationTiming = browser.normalizeCssProperty(\"animation-timing-function\")] = \"\";\r\n\r\n    cssReset[transitionProperty = browser.normalizeCssProperty(\"transition-property\")] =\r\n        cssReset[transitionDuration = browser.normalizeCssProperty(\"transition-duration\")] =\r\n        cssReset[transitionDelay = browser.normalizeCssProperty(\"transition-delay\")] =\r\n        cssReset[transitionTiming = browser.normalizeCssProperty(\"transition-timing-function\")] = \"\";\r\n\r\n\r\n\r\n    /*   \r\n     * Perform a custom animation of a set of CSS properties.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} properties\r\n     * @param {String} ease\r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     * @param {Number or String} delay\r\n     */\r\n    function animate(elm, properties, duration, ease, callback, delay) {\r\n        var key,\r\n            cssValues = {},\r\n            cssProperties = [],\r\n            transforms = \"\",\r\n            that = this,\r\n            endEvent,\r\n            wrappedCallback,\r\n            fired = false,\r\n            hasScrollTop = false,\r\n            resetClipAuto = false;\r\n\r\n        if (langx.isPlainObject(duration)) {\r\n            ease = duration.easing;\r\n            callback = duration.complete;\r\n            delay = duration.delay;\r\n            duration = duration.duration;\r\n        }\r\n\r\n        if (langx.isString(duration)) {\r\n            duration = fx.speeds[duration];\r\n        }\r\n        if (duration === undefined) {\r\n            duration = fx.speeds.normal;\r\n        }\r\n        duration = duration / 1000;\r\n        if (fx.off) {\r\n            duration = 0;\r\n        }\r\n\r\n        if (langx.isFunction(ease)) {\r\n            callback = ease;\r\n            eace = \"swing\";\r\n        } else {\r\n            ease = ease || \"swing\";\r\n        }\r\n\r\n        if (delay) {\r\n            delay = delay / 1000;\r\n        } else {\r\n            delay = 0;\r\n        }\r\n\r\n        if (langx.isString(properties)) {\r\n            // keyframe animation\r\n            cssValues[animationName] = properties;\r\n            cssValues[animationDuration] = duration + \"s\";\r\n            cssValues[animationTiming] = ease;\r\n            endEvent = animationEnd;\r\n        } else {\r\n            // CSS transitions\r\n            for (key in properties) {\r\n                var v = properties[key];\r\n                if (supportedTransforms.test(key)) {\r\n                    transforms += key + \"(\" + v + \") \";\r\n                } else {\r\n                    if (key === \"scrollTop\") {\r\n                        hasScrollTop = true;\r\n                    }\r\n                    if (key == \"clip\" && langx.isPlainObject(v)) {\r\n                        cssValues[key] = \"rect(\" + v.top+\"px,\"+ v.right +\"px,\"+ v.bottom +\"px,\"+ v.left+\"px)\";\r\n                        if (styler.css(elm,\"clip\") == \"auto\") {\r\n                            var size = geom.size(elm);\r\n                            styler.css(elm,\"clip\",\"rect(\"+\"0px,\"+ size.width +\"px,\"+ size.height +\"px,\"+\"0px)\");  \r\n                            resetClipAuto = true;\r\n                        }\r\n\r\n                    } else {\r\n                        cssValues[key] = v;\r\n                    }\r\n                    cssProperties.push(langx.dasherize(key));\r\n                }\r\n            }\r\n            endEvent = transitionEnd;\r\n        }\r\n\r\n        if (transforms) {\r\n            cssValues[transform] = transforms;\r\n            cssProperties.push(transform);\r\n        }\r\n\r\n        if (duration > 0 && langx.isPlainObject(properties)) {\r\n            cssValues[transitionProperty] = cssProperties.join(\", \");\r\n            cssValues[transitionDuration] = duration + \"s\";\r\n            cssValues[transitionDelay] = delay + \"s\";\r\n            cssValues[transitionTiming] = ease;\r\n        }\r\n\r\n        wrappedCallback = function(event) {\r\n            fired = true;\r\n            if (event) {\r\n                if (event.target !== event.currentTarget) {\r\n                    return // makes sure the event didn't bubble from \"below\"\r\n                }\r\n                eventer.off(event.target, endEvent, wrappedCallback)\r\n            } else {\r\n                eventer.off(elm, animationEnd, wrappedCallback) // triggered by setTimeout\r\n            }\r\n            styler.css(elm, cssReset);\r\n            if (resetClipAuto) {\r\n //               styler.css(elm,\"clip\",\"auto\");\r\n            }\r\n            callback && callback.call(this);\r\n        };\r\n\r\n        if (duration > 0) {\r\n            eventer.on(elm, endEvent, wrappedCallback);\r\n            // transitionEnd is not always firing on older Android phones\r\n            // so make sure it gets fired\r\n            langx.debounce(function() {\r\n                if (fired) {\r\n                    return;\r\n                }\r\n                wrappedCallback.call(that);\r\n            }, ((duration + delay) * 1000) + 25)();\r\n        }\r\n\r\n        // trigger page reflow so new elements can animate\r\n        elm.clientLeft;\r\n\r\n        styler.css(elm, cssValues);\r\n\r\n        if (duration <= 0) {\r\n            langx.debounce(function() {\r\n                if (fired) {\r\n                    return;\r\n                }\r\n                wrappedCallback.call(that);\r\n            }, 0)();\r\n        }\r\n\r\n        if (hasScrollTop) {\r\n            scrollToTop(elm, properties[\"scrollTop\"], duration, callback);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Display an element.\r\n     * @param {Object} elm  \r\n     * @param {String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function show(elm, speed, callback) {\r\n        styler.show(elm);\r\n        if (speed) {\r\n            if (!callback && langx.isFunction(speed)) {\r\n                callback = speed;\r\n                speed = \"normal\";\r\n            }\r\n            styler.css(elm, \"opacity\", 0)\r\n            animate(elm, { opacity: 1, scale: \"1,1\" }, speed, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    /*   \r\n     * Hide an element.\r\n     * @param {Object} elm  \r\n     * @param {String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function hide(elm, speed, callback) {\r\n        if (speed) {\r\n            if (!callback && langx.isFunction(speed)) {\r\n                callback = speed;\r\n                speed = \"normal\";\r\n            }\r\n            animate(elm, { opacity: 0, scale: \"0,0\" }, speed, function() {\r\n                styler.hide(elm);\r\n                if (callback) {\r\n                    callback.call(elm);\r\n                }\r\n            });\r\n        } else {\r\n            styler.hide(elm);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Set the vertical position of the scroll bar for an element.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} pos\r\n     * @param {Number or String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function scrollToTop(elm, pos, speed, callback) {\r\n        var scrollFrom = parseInt(elm.scrollTop),\r\n            i = 0,\r\n            runEvery = 5, // run every 5ms\r\n            freq = speed * 1000 / runEvery,\r\n            scrollTo = parseInt(pos);\r\n\r\n        var interval = setInterval(function() {\r\n            i++;\r\n\r\n            if (i <= freq) elm.scrollTop = (scrollTo - scrollFrom) / freq * i + scrollFrom;\r\n\r\n            if (i >= freq + 1) {\r\n                clearInterval(interval);\r\n                if (callback) langx.debounce(callback, 1000)();\r\n            }\r\n        }, runEvery);\r\n    }\r\n\r\n    /*   \r\n     * Display or hide an element.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function toggle(elm, speed, callback) {\r\n        if (styler.isInvisible(elm)) {\r\n            show(elm, speed, callback);\r\n        } else {\r\n            hide(elm, speed, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Adjust the opacity of an element.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {Number or String} opacity\r\n     * @param {String} easing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeTo(elm, speed, opacity, easing, callback) {\r\n        animate(elm, { opacity: opacity }, speed, easing, callback);\r\n        return this;\r\n    }\r\n\r\n\r\n    /*   \r\n     * Display an element by fading them to opaque.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {String} easing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeIn(elm, speed, easing, callback) {\r\n        var target = styler.css(elm, \"opacity\");\r\n        if (target > 0) {\r\n            styler.css(elm, \"opacity\", 0);\r\n        } else {\r\n            target = 1;\r\n        }\r\n        styler.show(elm);\r\n\r\n        fadeTo(elm, speed, target, easing, callback);\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Hide an element by fading them to transparent.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {String} easing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeOut(elm, speed, easing, callback) {\r\n        var _elm = elm,\r\n            complete,\r\n            opacity = styler.css(elm,\"opacity\"),\r\n            options = {};\r\n\r\n        if (langx.isPlainObject(speed)) {\r\n            options.easing = speed.easing;\r\n            options.duration = speed.duration;\r\n            complete = speed.complete;\r\n        } else {\r\n            options.duration = speed;\r\n            if (callback) {\r\n                complete = callback;\r\n                options.easing = easing;\r\n            } else {\r\n                complete = easing;\r\n            }\r\n        }\r\n        options.complete = function() {\r\n            styler.css(elm,\"opacity\",opacity);\r\n            styler.hide(elm);\r\n            if (complete) {\r\n                complete.call(elm);\r\n            }\r\n        }\r\n\r\n        fadeTo(elm, options, 0);\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Display or hide an element by animating its opacity.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {String} ceasing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeToggle(elm, speed, ceasing, allback) {\r\n        if (styler.isInvisible(elm)) {\r\n            fadeIn(elm, speed, easing, callback);\r\n        } else {\r\n            fadeOut(elm, speed, easing, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Display an element with a sliding motion.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     */\r\n    function slideDown(elm, duration, callback) {\r\n\r\n        // get the element position to restore it then\r\n        var position = styler.css(elm, 'position');\r\n\r\n        // show element if it is hidden\r\n        show(elm);\r\n\r\n        // place it so it displays as usually but hidden\r\n        styler.css(elm, {\r\n            position: 'absolute',\r\n            visibility: 'hidden'\r\n        });\r\n\r\n        // get naturally height, margin, padding\r\n        var marginTop = styler.css(elm, 'margin-top');\r\n        var marginBottom = styler.css(elm, 'margin-bottom');\r\n        var paddingTop = styler.css(elm, 'padding-top');\r\n        var paddingBottom = styler.css(elm, 'padding-bottom');\r\n        var height = styler.css(elm, 'height');\r\n\r\n        // set initial css for animation\r\n        styler.css(elm, {\r\n            position: position,\r\n            visibility: 'visible',\r\n            overflow: 'hidden',\r\n            height: 0,\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            paddingTop: 0,\r\n            paddingBottom: 0\r\n        });\r\n\r\n        // animate to gotten height, margin and padding\r\n        animate(elm, {\r\n            height: height,\r\n            marginTop: marginTop,\r\n            marginBottom: marginBottom,\r\n            paddingTop: paddingTop,\r\n            paddingBottom: paddingBottom\r\n        }, {\r\n            duration: duration,\r\n            complete: function() {\r\n                if (callback) {\r\n                    callback.apply(elm);\r\n                }\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Hide an element with a sliding motion.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     */\r\n    function slideUp(elm, duration, callback) {\r\n        // active the function only if the element is visible\r\n        if (geom.height(elm) > 0) {\r\n\r\n            // get the element position to restore it then\r\n            var position = styler.css(elm, 'position');\r\n\r\n            // get the element height, margin and padding to restore them then\r\n            var height = styler.css(elm, 'height');\r\n            var marginTop = styler.css(elm, 'margin-top');\r\n            var marginBottom = styler.css(elm, 'margin-bottom');\r\n            var paddingTop = styler.css(elm, 'padding-top');\r\n            var paddingBottom = styler.css(elm, 'padding-bottom');\r\n\r\n            // set initial css for animation\r\n            styler.css(elm, {\r\n                visibility: 'visible',\r\n                overflow: 'hidden',\r\n                height: height,\r\n                marginTop: marginTop,\r\n                marginBottom: marginBottom,\r\n                paddingTop: paddingTop,\r\n                paddingBottom: paddingBottom\r\n            });\r\n\r\n            // animate element height, margin and padding to zero\r\n            animate(elm, {\r\n                height: 0,\r\n                marginTop: 0,\r\n                marginBottom: 0,\r\n                paddingTop: 0,\r\n                paddingBottom: 0\r\n            }, {\r\n                // callback : restore the element position, height, margin and padding to original values\r\n                duration: duration,\r\n                queue: false,\r\n                complete: function() {\r\n                    hide(elm);\r\n                    styler.css(elm, {\r\n                        visibility: 'visible',\r\n                        overflow: 'hidden',\r\n                        height: height,\r\n                        marginTop: marginTop,\r\n                        marginBottom: marginBottom,\r\n                        paddingTop: paddingTop,\r\n                        paddingBottom: paddingBottom\r\n                    });\r\n                    if (callback) {\r\n                        callback.apply(elm);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    /*   \r\n     * Display or hide an element with a sliding motion.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     */\r\n    function slideToggle(elm, duration, callback) {\r\n\r\n        // if the element is hidden, slideDown !\r\n        if (geom.height(elm) == 0) {\r\n            slideDown(elm, duration, callback);\r\n        }\r\n        // if the element is visible, slideUp !\r\n        else {\r\n            slideUp(elm, duration, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function emulateTransitionEnd(elm,duration) {\r\n        var called = false;\r\n        eventer.one(elm,'transitionEnd', function () { \r\n            called = true;\r\n        })\r\n        var callback = function () { \r\n            if (!called) {\r\n                eventer.trigger(elm,browser.support.transition.end) \r\n            }\r\n        };\r\n        setTimeout(callback, duration);\r\n        \r\n        return this;\r\n    } \r\n\r\n    /*   \r\n     *\r\n     * @param {Node} elm\r\n     * @param {Node} params\r\n     */\r\n    function overlay(elm, params) {\r\n        var overlayDiv = noder.createElement(\"div\", params);\r\n        styler.css(overlayDiv, {\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            zIndex: 0x7FFFFFFF,\r\n            opacity: 0.7\r\n        });\r\n        elm.appendChild(overlayDiv);\r\n        return overlayDiv;\r\n\r\n    }\r\n    \r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {HTMLElement} elm\r\n     * @param {Node} params\r\n     */\r\n    function throb(elm, params) {\r\n        params = params || {};\r\n        var self = this,\r\n            text = params.text,\r\n            style = params.style,\r\n            time = params.time,\r\n            callback = params.callback,\r\n            timer,\r\n\r\n            throbber = noder.createElement(\"div\", {\r\n                \"class\": params.className || \"throbber\"\r\n            }),\r\n            _overlay = overlay(throbber, {\r\n                \"class\": 'overlay fade'\r\n            }),\r\n            throb = noder.createElement(\"div\", {\r\n                \"class\": \"throb\"\r\n            }),\r\n            textNode = noder.createTextNode(text || \"\"),\r\n            remove = function() {\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                    timer = null;\r\n                }\r\n                if (throbber) {\r\n                    noder.remove(throbber);\r\n                    throbber = null;\r\n                }\r\n            },\r\n            update = function(params) {\r\n                if (params && params.text && throbber) {\r\n                    textNode.nodeValue = params.text;\r\n                }\r\n            };\r\n        if (params.style) {\r\n            styler.css(throbber,params.style);\r\n        }\r\n        throb.appendChild(textNode);\r\n        throbber.appendChild(throb);\r\n        elm.appendChild(throbber);\r\n        var end = function() {\r\n            remove();\r\n            if (callback) callback();\r\n        };\r\n        if (time) {\r\n            timer = setTimeout(end, time);\r\n        }\r\n\r\n        return {\r\n            remove: remove,\r\n            update: update\r\n        };\r\n    }\r\n\r\n    function fx() {\r\n        return fx;\r\n    }\r\n\r\n    langx.mixin(fx, {\r\n        off: false,\r\n\r\n        speeds: {\r\n            normal: 400,\r\n            fast: 200,\r\n            slow: 600\r\n        },\r\n\r\n        animate,\r\n        emulateTransitionEnd,\r\n        fadeIn,\r\n        fadeOut,\r\n        fadeTo,\r\n        fadeToggle,\r\n        hide,\r\n        scrollToTop,\r\n\r\n        slideDown,\r\n        slideToggle,\r\n        slideUp,\r\n        show,\r\n        throb,\r\n        toggle\r\n    });\r\n\r\n    return skylark.attach(\"domx.fx\", fx);\r\n});\ndefine('skylark-domx-fx/main',[\r\n\t\"./fx\",\r\n\t\"skylark-domx-velm\",\r\n\t\"skylark-domx-query\"\t\r\n],function(fx,velm,$){\r\n    // from ./fx\r\n    velm.delegate([\r\n        \"animate\",\r\n        \"emulateTransitionEnd\",\r\n        \"fadeIn\",\r\n        \"fadeOut\",\r\n        \"fadeTo\",\r\n        \"fadeToggle\",\r\n        \"hide\",\r\n        \"scrollToTop\",\r\n        \"slideDown\",\r\n        \"slideToggle\",\r\n        \"slideUp\",\r\n        \"show\",\r\n        \"toggle\"\r\n    ], fx);\r\n\r\n    $.fn.hide =  $.wraps.wrapper_every_act(fx.hide, fx);\r\n\r\n    $.fn.animate = $.wraps.wrapper_every_act(fx.animate, fx);\r\n    $.fn.emulateTransitionEnd = $.wraps.wrapper_every_act(fx.emulateTransitionEnd, fx);\r\n\r\n    $.fn.show = $.wraps.wrapper_every_act(fx.show, fx);\r\n    $.fn.hide = $.wraps.wrapper_every_act(fx.hide, fx);\r\n    $.fn.toogle = $.wraps.wrapper_every_act(fx.toogle, fx);\r\n    $.fn.fadeTo = $.wraps.wrapper_every_act(fx.fadeTo, fx);\r\n    $.fn.fadeIn = $.wraps.wrapper_every_act(fx.fadeIn, fx);\r\n    $.fn.fadeOut = $.wraps.wrapper_every_act(fx.fadeOut, fx);\r\n    $.fn.fadeToggle = $.wraps.wrapper_every_act(fx.fadeToggle, fx);\r\n\r\n    $.fn.slideDown = $.wraps.wrapper_every_act(fx.slideDown, fx);\r\n    $.fn.slideToggle = $.wraps.wrapper_every_act(fx.slideToggle, fx);\r\n    $.fn.slideUp = $.wraps.wrapper_every_act(fx.slideUp, fx);\r\n\r\n\treturn fx;\r\n});\ndefine('skylark-domx-fx', ['skylark-domx-fx/main'], function (main) { return main; });\n\ndefine('skylark-jquery/core',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-domx-browser\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-data\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-finder\",\r\n\t\"skylark-domx-forms\",\r\n\t\"skylark-domx-fx\",\r\n\t\"skylark-domx-styler\",\r\n\t\"skylark-domx-query\"\r\n],function(skylark,langx,browser,noder,datax,eventer,finder,forms,fx,styler,query){\r\n\tvar filter = Array.prototype.filter,\r\n\t\tslice = Array.prototype.slice;\r\n\r\n    (function($){\r\n\t    $.fn.jquery = '2.2.0';\r\n\r\n\t    $.browser = browser;\r\n\t    \r\n\t    $.camelCase = langx.camelCase;\r\n\r\n\t\t$.cleanData = function( elems ) {\r\n\t\t\tvar elem,\r\n\t\t\t\ti = 0;\r\n\r\n\t\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\r\n\t\t\t\tdatax.cleanData(elem);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t$.removeData = function(elm,name) {\r\n\t\t\tdatax.removeData(elm,name);\r\n\t\t}\r\n\t\r\n\t    $.each = langx.each;\r\n\r\n\t    $.extend = langx.extend;\r\n\r\n\t    $.grep = function(elements, callback) {\r\n\t        return filter.call(elements, callback)\r\n\t    };\r\n\r\n\t    $.attr = function(elm,name) {\r\n\t    \treturn datax.attr(elm,name);\r\n\t    };\r\n\r\n\t    $.isArray = langx.isArray;\r\n\t    $.isEmptyObject = langx.isEmptyObject;\r\n\t    $.isFunction = langx.isFunction;\r\n\t    $.isWindow = langx.isWindow;\r\n\t    $.isPlainObject = langx.isPlainObject;\r\n        $.isNumeric = langx.isNumber;\r\n\r\n\t    $.inArray = langx.inArray;\r\n\r\n\t    $.makeArray = langx.makeArray;\r\n\t    $.map = langx.map;  // The behavior is somewhat different from the original jquery.\r\n\r\n\t    $.noop = function() {\r\n\t    };\r\n\r\n\t    $.parseJSON = window.JSON.parse;\r\n\r\n\t    $.proxy = langx.proxy;\r\n\r\n\t    $.trim = langx.trim;\r\n\t    $.type = langx.type;\r\n\r\n\t    $.fn.extend = function(props) {\r\n\t        langx.mixin($.fn, props);\r\n\t    };\r\n\r\n\r\n    })(query);\r\n\r\n    (function($){\r\n        $.Event = function Event(src, props) {\r\n            if (langx.isString(src)) {\r\n            \tvar type = src;\r\n            \treturn eventer.create(type, props);\r\n\t        }\r\n            return eventer.proxy(src, props);\r\n        };\r\n\r\n        $.event = {};\r\n\r\n\t    $.event.special = eventer.special;\r\n\r\n\t    $.fn.submit = function(callback) {\r\n\t        if (0 in arguments) this.bind('submit', callback)\r\n\t        else if (this.length) {\r\n\t            var event = $.Event('submit')\r\n\t            this.eq(0).trigger(event)\r\n\t            if (!event.isDefaultPrevented()) this.get(0).submit()\r\n\t        }\r\n\t        return this\r\n\t    };\r\n\r\n\t    // event\r\n\t    $.fn.triggerHandler = $.fn.trigger;\r\n\r\n\t    $.fn.delegate = function(selector, event, callback) {\r\n\t        return this.on(event, selector, callback)\r\n\t    };\r\n\r\n\t    $.fn.undelegate = function(selector, event, callback) {\r\n\t        return this.off(event, selector, callback)\r\n\t    };\r\n\r\n\t    $.fn.live = function(event, callback) {\r\n\t        $(document.body).delegate(this.selector, event, callback)\r\n\t        return this\r\n\t    };\r\n\r\n\t    $.fn.die = function(event, callback) {\r\n\t        $(document.body).undelegate(this.selector, event, callback)\r\n\t        return this\r\n\t    };\r\n\r\n\t    $.fn.bind = function(event, selector, data, callback) {\r\n\t        return this.on(event, selector, data, callback)\r\n\t    };\r\n\r\n\t    $.fn.unbind = function(event, callback) {\r\n\t        return this.off(event, callback)\r\n\t    };\r\n\r\n\t    $.fn.ready = function(callback) {\r\n\t        eventer.ready(callback);\r\n\t        return this;\r\n\t    };\r\n\r\n\t    $.fn.stop = function() {\r\n\t        // todo\r\n\t        return this;\r\n\t    };\r\n\r\n\t    $.fn.moveto = function(x, y) {\r\n\t        return this.animate({\r\n\t            left: x + \"px\",\r\n\t            top: y + \"px\"\r\n\t        }, 0.4);\r\n\r\n\t    };\r\n\r\n\t    $.ready = eventer.ready;\r\n\r\n\t    $.on = eventer.on;\r\n\r\n\t    $.off = eventer.off;\r\n    })(query);\r\n\r\n    (function($){\r\n\t    // plugin compatibility\r\n\t    $.uuid = 0;\r\n\t    $.support = browser.support;\r\n\t    $.expr = {};\r\n\r\n\t    $.expr[\":\"] = $.expr.pseudos = $.expr.filters = finder.pseudos;\r\n\r\n\t    $.expr.createPseudo = function(fn) {\r\n\t    \treturn fn;\r\n\t    };\r\n\r\n\t    $.cssHooks = styler.cssHooks;\r\n\r\n\t    $.contains = noder.contains;\r\n\r\n\t    $.css = styler.css;\r\n\r\n\t    $.data = datax.data;\r\n\r\n\t    $.fx = fx;\r\n\t    $.fx.step = {\r\n\r\n        };\r\n\r\n        $.speed = function( speed, easing, fn ) {\r\n            var opt = speed && typeof speed === \"object\" ? $.extend( {}, speed ) : {\r\n                complete: fn || !fn && easing ||\r\n                    $.isFunction( speed ) && speed,\r\n                duration: speed,\r\n                easing: fn && easing || easing && !$.isFunction( easing ) && easing\r\n            };\r\n\r\n            // Go to the end state if fx are off\r\n            if ( $.fx.off ) {\r\n                opt.duration = 0;\r\n\r\n            } else {\r\n                if ( typeof opt.duration !== \"number\" ) {\r\n                    if ( opt.duration in $.fx.speeds ) {\r\n                        opt.duration = $.fx.speeds[ opt.duration ];\r\n\r\n                    } else {\r\n                        opt.duration = $.fx.speeds._default;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Normalize opt.queue - true/undefined/null -> \"fx\"\r\n            if ( opt.queue == null || opt.queue === true ) {\r\n                opt.queue = \"fx\";\r\n            }\r\n\r\n            // Queueing\r\n            opt.old = opt.complete;\r\n\r\n            opt.complete = function() {\r\n                if ( $.isFunction( opt.old ) ) {\r\n                    opt.old.call( this );\r\n                }\r\n\r\n                if ( opt.queue ) {\r\n                    $.dequeue( this, opt.queue );\r\n                }\r\n            };\r\n\r\n            return opt;\r\n        };\r\n\r\n        $.easing = {};\r\n\r\n\t    $.offset = {};\r\n\t    $.offset.setOffset = function(elem, options, i) {\r\n\t        var position = $.css(elem, \"position\");\r\n\r\n\t        // set position first, in-case top/left are set even on static elem\r\n\t        if (position === \"static\") {\r\n\t            elem.style.position = \"relative\";\r\n\t        }\r\n\r\n\t        var curElem = $(elem),\r\n\t            curOffset = curElem.offset(),\r\n\t            curCSSTop = $.css(elem, \"top\"),\r\n\t            curCSSLeft = $.css(elem, \"left\"),\r\n\t            calculatePosition = (position === \"absolute\" || position === \"fixed\") && $.inArray(\"auto\", [curCSSTop, curCSSLeft]) > -1,\r\n\t            props = {},\r\n\t            curPosition = {},\r\n\t            curTop, curLeft;\r\n\r\n\t        // need to be able to calculate position if either top or left is auto and position is either absolute or fixed\r\n\t        if (calculatePosition) {\r\n\t            curPosition = curElem.position();\r\n\t            curTop = curPosition.top;\r\n\t            curLeft = curPosition.left;\r\n\t        } else {\r\n\t            curTop = parseFloat(curCSSTop) || 0;\r\n\t            curLeft = parseFloat(curCSSLeft) || 0;\r\n\t        }\r\n\r\n\t        if ($.isFunction(options)) {\r\n\t            options = options.call(elem, i, curOffset);\r\n\t        }\r\n\r\n\t        if (options.top != null) {\r\n\t            props.top = (options.top - curOffset.top) + curTop;\r\n\t        }\r\n\t        if (options.left != null) {\r\n\t            props.left = (options.left - curOffset.left) + curLeft;\r\n\t        }\r\n\r\n\t        if (\"using\" in options) {\r\n\t            options.using.call(elem, props);\r\n\t        } else {\r\n\t            curElem.css(props);\r\n\t        }\r\n\t    };\r\n\r\n        $._data = function(elm,propName) {\r\n            if (elm.hasAttribute) {\r\n                return datax.data(elm,propName);\r\n            } else {\r\n                return {};\r\n            }\r\n        };\r\n\r\n     \tvar t = $.fn.text;  \r\n\t    $.fn.text = function(v) {\r\n\t        var r = t.apply(this,arguments);\r\n\t        if (r === undefined) {\r\n\t            r = \"\";\r\n\t        }  \r\n\t        return r;\r\n\t    };       \r\n\r\n\t    $.fn.pos = $.fn.position;\r\n        \t    \r\n    })(query);\r\n\r\n    query.parseHTML = function(html) {\r\n        return  noder.createFragment(html);\r\n    };\r\n\r\n    query.uniqueSort = query.unique = langx.uniq;\r\n\r\n    query.skylark = skylark;\r\n\r\n    return window.jQuery = window.$ = query;\r\n});\r\n\ndefine('skylark-net-http/http',[\r\n  \"skylark-langx-ns/ns\",\r\n],function(skylark){\r\n\treturn skylark.attach(\"net.http\",{});\r\n});\ndefine('skylark-net-http/Xhr',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-funcs\",\r\n  \"skylark-langx-async/Deferred\",\r\n  \"skylark-langx-emitter/Evented\",\r\n  \"./http\"\r\n],function(skylark,types,objects,arrays,funcs,Deferred,Evented,http){\r\n\r\n    var each = objects.each,\r\n        mixin = objects.mixin,\r\n        noop = funcs.noop,\r\n        isArray = types.isArray,\r\n        isFunction = types.isFunction,\r\n        isPlainObject = types.isPlainObject,\r\n        type = types.type;\r\n \r\n     var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n   \r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: false,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            xhrFields : {\r\n                withCredentials : true\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n\r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) {\r\n                  value = value();\r\n                }\r\n                if (value == null) {\r\n                  value = \"\";\r\n                }\r\n                this.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n            };\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                if (options.beforeSend) {\r\n                    options.beforeSend.call(this, xhr, options);\r\n                }                \r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = isFormData ? false : 'application/x-www-form-urlencoded';\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                //if (dataType) {\r\n                //    xhr.responseType = dataType;\r\n                //}\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(result);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(result) ? null : JSON.parse(result);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = Blob([xhrObj.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.reponse;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n\r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.notify(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = value;\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n\treturn http.Xhr = Xhr;\t\r\n});\ndefine('skylark-jquery/ajax',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-net-http/Xhr\",\r\n    \"./core\",\r\n], function(langx,Xhr,$) {\r\n    var jsonpID = 0;\r\n\r\n     // Attach a bunch of functions for handling common AJAX events\r\n    $.each( [\r\n        \"ajaxStart\",\r\n        \"ajaxStop\",\r\n        \"ajaxComplete\",\r\n        \"ajaxError\",\r\n        \"ajaxSuccess\",\r\n        \"ajaxSend\"\r\n    ], function( i, type ) {\r\n        $.fn[ type ] = function( fn ) {\r\n            return this.on( type, fn );\r\n        };\r\n    } );\r\n   \r\n\r\n    function appendQuery(url, query) {\r\n        if (query == '') return url\r\n        return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n    }\r\n    \r\n    $.ajaxJSONP = function(options) {\r\n        var deferred = new langx.Deferred();\r\n        var _callbackName = options.jsonpCallback,\r\n            callbackName = ($.isFunction(_callbackName) ?\r\n                _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),\r\n            script = document.createElement('script'),\r\n            originalCallback = window[callbackName],\r\n            responseData,\r\n            abort = function(errorType) {\r\n                $(script).triggerHandler('error', errorType || 'abort')\r\n            },\r\n            xhr = { abort: abort },\r\n            abortTimeout;\r\n\r\n        for (var key in options.data) {\r\n            options.url = appendQuery(options.url, key + \"=\" + options.data[key]);\r\n        }\r\n         \r\n//        if (deferred) deferred.promise(xhr)\r\n\r\n        $(script).on('load error', function(e, errorType) {\r\n            clearTimeout(abortTimeout)\r\n            $(script).off().remove()\r\n\r\n            if (e.type == 'error' || !responseData) {\r\n                deferred.reject(e);\r\n            } else {\r\n                deferred.resolve(responseData[0],200,xhr);\r\n            }\r\n\r\n            window[callbackName] = originalCallback\r\n            if (responseData && $.isFunction(originalCallback))\r\n                originalCallback(responseData[0])\r\n\r\n            originalCallback = responseData = undefined\r\n        })\r\n\r\n        window[callbackName] = function() {\r\n            responseData = arguments\r\n        }\r\n\r\n        script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName)\r\n        document.head.appendChild(script)\r\n\r\n        if (options.timeout > 0) abortTimeout = setTimeout(function() {\r\n            abort('timeout')\r\n        }, options.timeout)\r\n\r\n        return deferred;\r\n    }\r\n\r\n    //$.ajaxSettings = Xhr.defaultOptions;\r\n    //$.ajaxSettings.xhr = function() {\r\n    //    return new window.XMLHttpRequest()\r\n    //};\r\n\r\n    $.ajaxSettings = {\r\n        processData : true\r\n    };\r\n\r\n\r\n    $.ajax = function(url,options) {\r\n        if (!url) {\r\n            options = {\r\n                url :  \"./\"\r\n            };\r\n        } else if (!options) {\r\n            if (langx.isString(url)) {\r\n                options = {\r\n                    url :  url\r\n                };\r\n            } else {\r\n                options = url;\r\n            }\r\n        } else {\r\n            options.url = url;\r\n        }\r\n\r\n        options = langx.mixin({},$.ajaxSettings,options);\r\n\r\n        if ('jsonp' == options.dataType) {\r\n            var hasPlaceholder = /\\?.+=\\?/.test(options.url);\r\n\r\n            if (!hasPlaceholder)\r\n                options.url = appendQuery(options.url,\r\n                    options.jsonp ? (options.jsonp + '=?') : options.jsonp === false ? '' : 'callback=?')\r\n            return $.ajaxJSONP(options);\r\n        }\r\n\r\n        function ajaxSuccess(data,status,xhr) {\r\n            $(document).trigger(\"ajaxSucess\");\r\n            if (options.success) {\r\n                options.success.apply(this,arguments);\r\n            }\r\n            if (options.complete) {\r\n                options.complete.apply(this,arguments);\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function ajaxError() {\r\n            $(document).trigger(\"ajaxError\");\r\n            if (options.error) {\r\n                options.error.apply(this,arguments);\r\n            }\r\n        }\r\n\r\n        var p = Xhr.request(options.url,options);\r\n        p = p.then(ajaxSuccess,ajaxError);\r\n        p.success = p.done;\r\n        p.error = p.fail;\r\n        p.complete = p.always;\r\n        \r\n        return p;\r\n    };\r\n\r\n    // handle optional data/success arguments\r\n    function parseArguments(url, data, success, dataType) {\r\n        if ($.isFunction(url)) {\r\n            dataType = data, success = url, data = undefined,url = undefined;\r\n        } else if ($.isFunction(data)) {\r\n            dataType = success, success = data, data = undefined;\r\n        } \r\n        if (!$.isFunction(success)) dataType = success, success = undefined\r\n        return {\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            dataType: dataType\r\n        }\r\n    }\r\n\r\n    $.get = function( /* url, data, success, dataType */ ) {\r\n        return $.ajax(parseArguments.apply(null, arguments))\r\n    }\r\n\r\n    $.post = function( /* url, data, success, dataType */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.type = 'POST'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    $.getJSON = function( /* url, data, success */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.dataType = 'json'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    var originalLoad = $.fn.load;\r\n\r\n    $.fn.load = function(url, data, success) {\r\n        if (\"string\" != typeof url && originalLoad) {\r\n            return originalLoad.apply(this, arguments);\r\n        }\r\n        if (!this.length) return this\r\n        var self = this,\r\n            options = parseArguments(url, data, success),\r\n            parts = options.url && options.url.split(/\\s/),\r\n            selector,\r\n            callback = options.success\r\n        if (parts && parts.length > 1) options.url = parts[0], selector = parts[1]\r\n\r\n        if (options.data && typeof options.data === \"object\") {\r\n            options.type = \"POST\";\r\n        }\r\n        options.success = function(response) {\r\n            self.html(selector ?\r\n                $('<div>').html(response.replace(rscript, \"\")).find(selector) : response)\r\n            callback && callback.apply(self, arguments)\r\n        }\r\n        $.ajax(options)\r\n        return this\r\n    }\r\n\r\n    $.param = Xhr.param;\r\n\r\n\r\n    // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\n    function addToPrefiltersOrTransports(structure) {\r\n\r\n        // dataTypeExpression is optional and defaults to \"*\"\r\n        return function(dataTypeExpression, func) {\r\n\r\n            if (typeof dataTypeExpression !== \"string\") {\r\n                func = dataTypeExpression;\r\n                dataTypeExpression = \"*\";\r\n            }\r\n\r\n            var dataType,\r\n                i = 0,\r\n                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\r\n\r\n            if (jQuery.isFunction(func)) {\r\n\r\n                // For each dataType in the dataTypeExpression\r\n                while ((dataType = dataTypes[i++])) {\r\n\r\n                    // Prepend if requested\r\n                    if (dataType[0] === \"+\") {\r\n                        dataType = dataType.slice(1) || \"*\";\r\n                        (structure[dataType] = structure[dataType] || []).unshift(func);\r\n\r\n                        // Otherwise append\r\n                    } else {\r\n                        (structure[dataType] = structure[dataType] || []).push(func);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    var\r\n        prefilters = {},\r\n        transports = {},\r\n        rnotwhite = (/\\S+/g);\r\n\r\n    $.ajaxPrefilter = addToPrefiltersOrTransports(prefilters);\r\n    $.ajaxTransport = addToPrefiltersOrTransports(transports);\r\n    $.ajaxSetup = function(target, settings) {\r\n        langx.mixin(Xhr.defaultOptions,target,settings);\r\n    };\r\n\r\n    $.getScript = function( url, callback ) {\r\n        return $.get( url, undefined, callback, \"script\" );\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-jquery/callbacks',[\r\n    \"./core\"\r\n], function($) {\r\n\r\n    //     This module is borrow from zepto.callback.js\r\n    //     (c) 2010-2014 Thomas Fuchs\r\n    //     Zepto.js may be freely distributed under the MIT license.\r\n\r\n    // Create a collection of callbacks to be fired in a sequence, with configurable behaviour\r\n    // Option flags:\r\n    //   - once: Callbacks fired at most one time.\r\n    //   - memory: Remember the most recent context and arguments\r\n    //   - stopOnFalse: Cease iterating over callback list\r\n    //   - unique: Permit adding at most one instance of the same callback\r\n    $.Callbacks = function(options) {\r\n        options = $.extend({}, options)\r\n\r\n        var memory, // Last fire value (for non-forgettable lists)\r\n            fired, // Flag to know if list was already fired\r\n            firing, // Flag to know if list is currently firing\r\n            firingStart, // First callback to fire (used internally by add and fireWith)\r\n            firingLength, // End of the loop when firing\r\n            firingIndex, // Index of currently firing callback (modified by remove if needed)\r\n            list = [], // Actual callback list\r\n            stack = !options.once && [], // Stack of fire calls for repeatable lists\r\n            fire = function(data) {\r\n                memory = options.memory && data\r\n                fired = true\r\n                firingIndex = firingStart || 0\r\n                firingStart = 0\r\n                firingLength = list.length\r\n                firing = true\r\n                for (; list && firingIndex < firingLength; ++firingIndex) {\r\n                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\r\n                        memory = false\r\n                        break\r\n                    }\r\n                }\r\n                firing = false\r\n                if (list) {\r\n                    if (stack) stack.length && fire(stack.shift())\r\n                    else if (memory) list.length = 0\r\n                    else Callbacks.disable()\r\n                }\r\n            },\r\n\r\n            Callbacks = {\r\n                add: function() {\r\n                    if (list) {\r\n                        var start = list.length,\r\n                            add = function(args) {\r\n                                $.each(args, function(_, arg) {\r\n                                    if (typeof arg === \"function\") {\r\n                                        if (!options.unique || !Callbacks.has(arg)) list.push(arg)\r\n                                    } else if (arg && arg.length && typeof arg !== 'string') add(arg)\r\n                                })\r\n                            }\r\n                        add(arguments)\r\n                        if (firing) firingLength = list.length\r\n                        else if (memory) {\r\n                            firingStart = start\r\n                            fire(memory)\r\n                        }\r\n                    }\r\n                    return this\r\n                },\r\n                remove: function() {\r\n                    if (list) {\r\n                        $.each(arguments, function(_, arg) {\r\n                            var index\r\n                            while ((index = $.inArray(arg, list, index)) > -1) {\r\n                                list.splice(index, 1)\r\n                                // Handle firing indexes\r\n                                if (firing) {\r\n                                    if (index <= firingLength) --firingLength\r\n                                    if (index <= firingIndex) --firingIndex\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    return this\r\n                },\r\n                has: function(fn) {\r\n                    return !!(list && (fn ? $.inArray(fn, list) > -1 : list.length))\r\n                },\r\n                empty: function() {\r\n                    firingLength = list.length = 0\r\n                    return this\r\n                },\r\n                disable: function() {\r\n                    list = stack = memory = undefined\r\n                    return this\r\n                },\r\n                disabled: function() {\r\n                    return !list\r\n                },\r\n                lock: function() {\r\n                    stack = undefined;\r\n                    if (!memory) Callbacks.disable()\r\n                    return this\r\n                },\r\n                locked: function() {\r\n                    return !stack\r\n                },\r\n                fireWith: function(context, args) {\r\n                    if (list && (!fired || stack)) {\r\n                        args = args || []\r\n                        args = [context, args.slice ? args.slice() : args]\r\n                        if (firing) stack.push(args)\r\n                        else fire(args)\r\n                    }\r\n                    return this\r\n                },\r\n                fire: function() {\r\n                    return Callbacks.fireWith(this, arguments)\r\n                },\r\n                fired: function() {\r\n                    return !!fired\r\n                }\r\n            }\r\n\r\n        return Callbacks\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-jquery/deferred',[\r\n    \"./core\",\r\n    \"skylark-langx/langx\"\r\n], function($,langx) {\r\n\r\n    $.Deferred = function() {\r\n        var d = new langx.Deferred(),\r\n            ret = {\r\n                promise : function() {\r\n                    return d.promise;\r\n                }\r\n            };\r\n\r\n        [\"resolve\",\"resolveWith\",\"reject\",\"rejectWith\",\"notify\",\"then\",\"done\",\"fail\",\"progress\"].forEach(function(name){\r\n            ret[name] = function() {\r\n              var ret2 =   d[name].apply(d,arguments);\r\n              if (ret2 == d) {\r\n                ret2 = ret;\r\n              }\r\n              return ret2;\r\n            }\r\n        });\r\n\r\n        return ret;\r\n    };\r\n    \r\n    $.when = function(){\r\n        var p = langx.Deferred.all(langx.makeArray(arguments)),\r\n            originThen = p.then;\r\n        p.then = function(onResolved,onRejected) {\r\n            var handler = function(results) {\r\n                //results = results.map(function(result){\r\n                //    return [result];\r\n                //});\r\n                return onResolved && onResolved.apply(null,results);\r\n            };\r\n            return originThen.call(p,handler,onRejected);\r\n        };\r\n        return p;\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n\ndefine('skylark-jquery/queue',[\r\n    \"skylark-langx/langx\",\r\n    \"./core\",\r\n    \"./callbacks\"\r\n], function(langx, $) {\r\n\r\n // jQuery Data object\r\n  var rbrace = /(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,\r\n      rmultiDash = /([A-Z])/g,\r\n      expando = \"Sky\" + ( '1.0' + Math.random() ).replace( /\\D/g, \"\"),\r\n      optionsCache = {},\r\n      core_rnotwhite = /\\S+/g,\r\n      core_deletedIds = [],\r\n      core_push = core_deletedIds.push;\r\n\r\n// Convert String-formatted options into Object-formatted ones and store in cache\r\n  function createOptions( options ) {\r\n    var object = optionsCache[ options ] = {};\r\n    $.each( options.match( core_rnotwhite ) || [], function( _, flag ) {\r\n      object[ flag ] = true;\r\n    });\r\n    return object;\r\n  }\r\n\r\n  function isArraylike( obj ) {\r\n    var length = obj.length,\r\n        type = $.type( obj );\r\n\r\n    if ( $.isWindow( obj ) ) {\r\n      return false;\r\n    }\r\n\r\n    if ( obj.nodeType === 1 && length ) {\r\n      return true;\r\n    }\r\n\r\n    return type === \"array\" || type !== \"function\" &&\r\n        ( length === 0 ||\r\n            typeof length === \"number\" && length > 0 && ( length - 1 ) in obj );\r\n  }\r\n\r\n  \r\n\r\n  function Data() {\r\n    // Support: Android < 4,\r\n    // Old WebKit does not have Object.preventExtensions/freeze method,\r\n    // return new empty object instead with no [[set]] accessor\r\n    Object.defineProperty( this.cache = {}, 0, {\r\n      get: function() {\r\n        return {};\r\n      }\r\n    });\r\n\r\n    this.expando = expando + Math.random();\r\n  }\r\n\r\n  Data.uid = 1;\r\n\r\n  Data.accepts = function( owner ) {\r\n    // Accepts only:\r\n    //  - Node\r\n    //    - Node.ELEMENT_NODE\r\n    //    - Node.DOCUMENT_NODE\r\n    //  - Object\r\n    //    - Any\r\n    return owner.nodeType ?\r\n        owner.nodeType === 1 || owner.nodeType === 9 : true;\r\n  };\r\n\r\n  Data.prototype = {\r\n    key: function( owner ) {\r\n      // We can accept data for non-element nodes in modern browsers,\r\n      // but we should not, see #8335.\r\n      // Always return the key for a frozen object.\r\n      if ( !Data.accepts( owner ) ) {\r\n        return 0;\r\n      }\r\n\r\n      var descriptor = {},\r\n      // Check if the owner object already has a cache key\r\n          unlock = owner[ this.expando ];\r\n\r\n      // If not, create one\r\n      if ( !unlock ) {\r\n        unlock = Data.uid++;\r\n\r\n        // Secure it in a non-enumerable, non-writable property\r\n        try {\r\n          descriptor[ this.expando ] = { value: unlock };\r\n          Object.defineProperties( owner, descriptor );\r\n\r\n          // Support: Android < 4\r\n          // Fallback to a less secure definition\r\n        } catch ( e ) {\r\n          descriptor[ this.expando ] = unlock;\r\n          $.extend( owner, descriptor );\r\n        }\r\n      }\r\n\r\n      // Ensure the cache object\r\n      if ( !this.cache[ unlock ] ) {\r\n        this.cache[ unlock ] = {};\r\n      }\r\n\r\n      return unlock;\r\n    },\r\n    set: function( owner, data, value ) {\r\n      var prop,\r\n      // There may be an unlock assigned to this node,\r\n      // if there is no entry for this \"owner\", create one inline\r\n      // and set the unlock as though an owner entry had always existed\r\n          unlock = this.key( owner ),\r\n          cache = this.cache[ unlock ];\r\n\r\n      // Handle: [ owner, key, value ] args\r\n      if ( typeof data === \"string\" ) {\r\n        cache[ data ] = value;\r\n\r\n        // Handle: [ owner, { properties } ] args\r\n      } else {\r\n        // Fresh assignments by object are shallow copied\r\n        if ( $.isEmptyObject( cache ) ) {\r\n          $.extend( this.cache[ unlock ], data );\r\n          // Otherwise, copy the properties one-by-one to the cache object\r\n        } else {\r\n          for ( prop in data ) {\r\n            cache[ prop ] = data[ prop ];\r\n          }\r\n        }\r\n      }\r\n      return cache;\r\n    },\r\n    get: function( owner, key ) {\r\n      // Either a valid cache is found, or will be created.\r\n      // New caches will be created and the unlock returned,\r\n      // allowing direct access to the newly created\r\n      // empty data object. A valid owner object must be provided.\r\n      var cache = this.cache[ this.key( owner ) ];\r\n\r\n      return key === undefined ?\r\n          cache : cache[ key ];\r\n    },\r\n    access: function( owner, key, value ) {\r\n      var stored;\r\n      // In cases where either:\r\n      //\r\n      //   1. No key was specified\r\n      //   2. A string key was specified, but no value provided\r\n      //\r\n      // Take the \"read\" path and allow the get method to determine\r\n      // which value to return, respectively either:\r\n      //\r\n      //   1. The entire cache object\r\n      //   2. The data stored at the key\r\n      //\r\n      if ( key === undefined ||\r\n          ((key && typeof key === \"string\") && value === undefined) ) {\r\n\r\n        stored = this.get( owner, key );\r\n\r\n        return stored !== undefined ?\r\n            stored : this.get( owner, $.camelCase(key) );\r\n      }\r\n\r\n      // [*]When the key is not a string, or both a key and value\r\n      // are specified, set or extend (existing objects) with either:\r\n      //\r\n      //   1. An object of properties\r\n      //   2. A key and value\r\n      //\r\n      this.set( owner, key, value );\r\n\r\n      // Since the \"set\" path can have two possible entry points\r\n      // return the expected data based on which path was taken[*]\r\n      return value !== undefined ? value : key;\r\n    },\r\n    remove: function( owner, key ) {\r\n      var i, name, camel,\r\n          unlock = this.key( owner ),\r\n          cache = this.cache[ unlock ];\r\n\r\n      if ( key === undefined ) {\r\n        this.cache[ unlock ] = {};\r\n\r\n      } else {\r\n        // Support array or space separated string of keys\r\n        if ( $.isArray( key ) ) {\r\n          // If \"name\" is an array of keys...\r\n          // When data is initially created, via (\"key\", \"val\") signature,\r\n          // keys will be converted to camelCase.\r\n          // Since there is no way to tell _how_ a key was added, remove\r\n          // both plain key and camelCase key. #12786\r\n          // This will only penalize the array argument path.\r\n          name = key.concat( key.map( $.camelCase ) );\r\n        } else {\r\n          camel = $.camelCase( key );\r\n          // Try the string as a key before any manipulation\r\n          if ( key in cache ) {\r\n            name = [ key, camel ];\r\n          } else {\r\n            // If a key with the spaces exists, use it.\r\n            // Otherwise, create an array by matching non-whitespace\r\n            name = camel;\r\n            name = name in cache ?\r\n                [ name ] : ( name.match( core_rnotwhite ) || [] );\r\n          }\r\n        }\r\n\r\n        i = name.length;\r\n        while ( i-- ) {\r\n          delete cache[ name[ i ] ];\r\n        }\r\n      }\r\n    },\r\n    hasData: function( owner ) {\r\n      return !$.isEmptyObject(\r\n          this.cache[ owner[ this.expando ] ] || {}\r\n      );\r\n    },\r\n    discard: function( owner ) {\r\n      if ( owner[ this.expando ] ) {\r\n        delete this.cache[ owner[ this.expando ] ];\r\n      }\r\n    }\r\n  };\r\n\r\n  var data_priv = new Data();\r\n\r\n  $.extend($, {\r\n    queue: function( elem, type, data ) {\r\n      var queue;\r\n\r\n      if ( elem ) {\r\n        type = ( type || \"fx\" ) + \"queue\";\r\n        queue = data_priv.get( elem, type );\r\n\r\n        // Speed up dequeue by getting out quickly if this is just a lookup\r\n        if ( data ) {\r\n          if ( !queue || $.isArray( data ) ) {\r\n            queue = data_priv.access( elem, type, $.makeArray(data) );\r\n          } else {\r\n            queue.push( data );\r\n          }\r\n        }\r\n        return queue || [];\r\n      }\r\n    },\r\n\r\n    dequeue: function( elem, type ) {\r\n      type = type || \"fx\";\r\n\r\n      var queue = $.queue( elem, type ),\r\n          startLength = queue.length,\r\n          fn = queue.shift(),\r\n          hooks = $._queueHooks( elem, type ),\r\n          next = function() {\r\n            $.dequeue( elem, type );\r\n          };\r\n\r\n      // If the fx queue is dequeued, always remove the progress sentinel\r\n      if ( fn === \"inprogress\" ) {\r\n        fn = queue.shift();\r\n        startLength--;\r\n      }\r\n\r\n      if ( fn ) {\r\n\r\n        // Add a progress sentinel to prevent the fx queue from being\r\n        // automatically dequeued\r\n        if ( type === \"fx\" ) {\r\n          queue.unshift( \"inprogress\" );\r\n        }\r\n\r\n        // clear up the last queue stop function\r\n        delete hooks.stop;\r\n        fn.call( elem, next, hooks );\r\n      }\r\n\r\n      if ( !startLength && hooks ) {\r\n        hooks.empty.fire();\r\n      }\r\n    },\r\n\r\n    // not intended for public consumption - generates a queueHooks object, or returns the current one\r\n    _queueHooks: function( elem, type ) {\r\n      var key = type + \"queueHooks\";\r\n      return data_priv.get( elem, key ) || data_priv.access( elem, key, {\r\n        empty: $.Callbacks(\"once memory\").add(function() {\r\n          data_priv.remove( elem, [ type + \"queue\", key ] );\r\n        })\r\n      });\r\n    },\r\n\r\n    // array operations\r\n    makeArray: function( arr, results ) {\r\n      var ret = results || [];\r\n\r\n      if ( arr != null ) {\r\n        if ( isArraylike( Object(arr) ) ) {\r\n          $.merge( ret,\r\n              typeof arr === \"string\" ?\r\n                  [ arr ] : arr\r\n          );\r\n        } else {\r\n          core_push.call( ret, arr );\r\n        }\r\n      }\r\n\r\n      return ret;\r\n    },\r\n    merge: function( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n  });\r\n\r\n  $.extend($.fn, {\r\n    queue: function( type, data ) {\r\n      var setter = 2;\r\n\r\n      if ( typeof type !== \"string\" ) {\r\n        data = type;\r\n        type = \"fx\";\r\n        setter--;\r\n      }\r\n\r\n      if ( arguments.length < setter ) {\r\n        return $.queue( this[0], type );\r\n      }\r\n\r\n      return data === undefined ?\r\n          this :\r\n          this.each(function() {\r\n            var queue = $.queue( this, type, data );\r\n\r\n            // ensure a hooks for this queue\r\n            $._queueHooks( this, type );\r\n\r\n            if ( type === \"fx\" && queue[0] !== \"inprogress\" ) {\r\n              $.dequeue( this, type );\r\n            }\r\n          });\r\n    },\r\n    dequeue: function( type ) {\r\n      return this.each(function() {\r\n        $.dequeue( this, type );\r\n      });\r\n    },\r\n    // Based off of the plugin by Clint Helfers, with permission.\r\n    // http://blindsignals.com/index.php/2009/07/jquery-delay/\r\n    delay: function( time, type ) {\r\n      time = $.fx ? $.fx.speeds[ time ] || time : time;\r\n      type = type || \"fx\";\r\n\r\n      return this.queue( type, function( next, hooks ) {\r\n        var timeout = setTimeout( next, time );\r\n        hooks.stop = function() {\r\n          clearTimeout( timeout );\r\n        };\r\n      });\r\n    },\r\n    clearQueue: function( type ) {\r\n      return this.queue( type || \"fx\", [] );\r\n    },\r\n    // Get a promise resolved when queues of a certain type\r\n    // are emptied (fx is the type by default)\r\n    promise: function( type, obj ) {\r\n      var tmp,\r\n          count = 1,\r\n          defer = $.Deferred(),\r\n          elements = this,\r\n          i = this.length,\r\n          resolve = function() {\r\n            if ( !( --count ) ) {\r\n              defer.resolveWith( elements, [ elements ] );\r\n            }\r\n          };\r\n\r\n      if ( typeof type !== \"string\" ) {\r\n        obj = type;\r\n        type = undefined;\r\n      }\r\n      type = type || \"fx\";\r\n\r\n      while( i-- ) {\r\n        tmp = data_priv.get( elements[ i ], type + \"queueHooks\" );\r\n        if ( tmp && tmp.empty ) {\r\n          count++;\r\n          tmp.empty.add( resolve );\r\n        }\r\n      }\r\n      resolve();\r\n      return defer.promise( obj );\r\n    }\r\n  });\r\n\r\n  return $;\r\n\r\n});\r\n\ndefine('skylark-domx-plugins/plugins',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-velm\"\r\n], function(skylark, langx, noder, datax, eventer, finder, geom, styler, fx, $, elmx) {\r\n    \"use strict\";\r\n\r\n    var slice = Array.prototype.slice,\r\n        concat = Array.prototype.concat,\r\n        pluginKlasses = {},\r\n        shortcuts = {};\r\n\r\n    /*\r\n     * Create or get or destory a plugin instance assocated with the element.\r\n     */\r\n    function instantiate(elm,pluginName,options) {\r\n        var pair = pluginName.split(\":\"),\r\n            instanceDataName = pair[1];\r\n        pluginName = pair[0];\r\n\r\n        if (!instanceDataName) {\r\n            instanceDataName = pluginName;\r\n        }\r\n\r\n        var pluginInstance = datax.data( elm, instanceDataName );\r\n\r\n        if (options === \"instance\") {\r\n            return pluginInstance;\r\n        } else if (options === \"destroy\") {\r\n            if (!pluginInstance) {\r\n                throw new Error (\"The plugin instance is not existed\");\r\n            }\r\n            pluginInstance.destroy();\r\n            datax.removeData( elm, pluginName);\r\n            pluginInstance = undefined;\r\n        } else {\r\n            if (!pluginInstance) {\r\n                if (options !== undefined && typeof options !== \"object\") {\r\n                    throw new Error (\"The options must be a plain object\");\r\n                }\r\n                var pluginKlass = pluginKlasses[pluginName]; \r\n                pluginInstance = new pluginKlass(elm,options);\r\n                datax.data( elm, instanceDataName,pluginInstance );\r\n            } else if (options) {\r\n                pluginInstance.reset(options);\r\n            }\r\n        }\r\n\r\n        return pluginInstance;\r\n    }\r\n\r\n\r\n    function shortcutter(pluginName,extfn) {\r\n       /*\r\n        * Create or get or destory a plugin instance assocated with the element,\r\n        * and also you can execute the plugin method directory;\r\n        */\r\n        return function (elm,options) {\r\n            var  plugin = instantiate(elm, pluginName,\"instance\");\r\n            if ( options === \"instance\" ) {\r\n              return plugin || null;\r\n            }\r\n\r\n            if (!plugin) {\r\n                plugin = instantiate(elm, pluginName,typeof options == 'object' && options || {});\r\n                if (typeof options != \"string\") {\r\n                  return this;\r\n                }\r\n            } \r\n            if (options) {\r\n                var args = slice.call(arguments,1); //2\r\n                if (extfn) {\r\n                    return extfn.apply(plugin,args);\r\n                } else {\r\n                    if (typeof options == 'string') {\r\n                        var methodName = options;\r\n\r\n                        if ( !plugin ) {\r\n                            throw new Error( \"cannot call methods on \" + pluginName +\r\n                                \" prior to initialization; \" +\r\n                                \"attempted to call method '\" + methodName + \"'\" );\r\n                        }\r\n\r\n                        if ( !langx.isFunction( plugin[ methodName ] ) || methodName.charAt( 0 ) === \"_\" ) {\r\n                            throw new Error( \"no such method '\" + methodName + \"' for \" + pluginName +\r\n                                \" plugin instance\" );\r\n                        }\r\n\r\n                        return plugin[methodName].apply(plugin,args);\r\n                    }                \r\n                }                \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n     * Register a plugin type\r\n     */\r\n    function register( pluginKlass,shortcutName,instanceDataName,extfn) {\r\n        var pluginName = pluginKlass.prototype.pluginName;\r\n        \r\n        pluginKlasses[pluginName] = pluginKlass;\r\n\r\n        if (shortcutName) {\r\n            if (instanceDataName && langx.isFunction(instanceDataName)) {\r\n                extfn = instanceDataName;\r\n                instanceDataName = null;\r\n            } \r\n            if (instanceDataName) {\r\n                pluginName = pluginName + \":\" + instanceDataName;\r\n            }\r\n\r\n            var shortcut = shortcuts[shortcutName] = shortcutter(pluginName,extfn);\r\n                \r\n            $.fn[shortcutName] = function(options) {\r\n                var returnValue = this;\r\n\r\n                if ( !this.length && options === \"instance\" ) {\r\n                  returnValue = undefined;\r\n                } else {\r\n                  var args = slice.call(arguments);\r\n                  this.each(function () {\r\n                    var args2 = slice.call(args);\r\n                    args2.unshift(this);\r\n                    var  ret  = shortcut.apply(undefined,args2);\r\n                    if (ret !== undefined) {\r\n                        returnValue = ret;\r\n                        return false;\r\n                    }\r\n                  });\r\n                }\r\n\r\n                return returnValue;\r\n            };\r\n\r\n            elmx.partial(shortcutName,function(options) {\r\n                var  ret  = shortcut(this._elm,options);\r\n                if (ret === undefined) {\r\n                    ret = this;\r\n                }\r\n                return ret;\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n \r\n    var Plugin =   langx.Evented.inherit({\r\n        klassName: \"Plugin\",\r\n\r\n        _construct : function(elm,options) {\r\n           this._elm = elm;\r\n           this._initOptions(options);\r\n        },\r\n\r\n        _initOptions : function(options) {\r\n          var ctor = this.constructor,\r\n              cache = ctor.cache = ctor.cache || {},\r\n              defaults = cache.defaults;\r\n          if (!defaults) {\r\n            var  ctors = [];\r\n            do {\r\n              ctors.unshift(ctor);\r\n              if (ctor === Plugin) {\r\n                break;\r\n              }\r\n              ctor = ctor.superclass;\r\n            } while (ctor);\r\n\r\n            defaults = cache.defaults = {};\r\n            for (var i=0;i<ctors.length;i++) {\r\n              ctor = ctors[i];\r\n              if (ctor.prototype.hasOwnProperty(\"options\")) {\r\n                langx.mixin(defaults,ctor.prototype.options,true);\r\n              }\r\n              if (ctor.hasOwnProperty(\"options\")) {\r\n                langx.mixin(defaults,ctor.options,true);\r\n              }\r\n            }\r\n          }\r\n          Object.defineProperty(this,\"options\",{\r\n            value :langx.mixin({},defaults,options,true)\r\n          });\r\n\r\n          //return this.options = langx.mixin({},defaults,options);\r\n          return this.options;\r\n        },\r\n\r\n\r\n        destroy: function() {\r\n            var that = this;\r\n\r\n            this._destroy();\r\n            // We can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            datax.removeData(this._elm,this.pluginName );\r\n        },\r\n\r\n        _destroy: langx.noop,\r\n\r\n        _delay: function( handler, delay ) {\r\n            function handlerProxy() {\r\n                return ( typeof handler === \"string\" ? instance[ handler ] : handler )\r\n                    .apply( instance, arguments );\r\n            }\r\n            var instance = this;\r\n            return setTimeout( handlerProxy, delay || 0 );\r\n        },\r\n\r\n        option: function( key, value ) {\r\n            var options = key;\r\n            var parts;\r\n            var curOption;\r\n            var i;\r\n\r\n            if ( arguments.length === 0 ) {\r\n\r\n                // Don't return a reference to the internal hash\r\n                return langx.mixin( {}, this.options );\r\n            }\r\n\r\n            if ( typeof key === \"string\" ) {\r\n\r\n                // Handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\r\n                options = {};\r\n                parts = key.split( \".\" );\r\n                key = parts.shift();\r\n                if ( parts.length ) {\r\n                    curOption = options[ key ] = langx.mixin( {}, this.options[ key ] );\r\n                    for ( i = 0; i < parts.length - 1; i++ ) {\r\n                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\r\n                        curOption = curOption[ parts[ i ] ];\r\n                    }\r\n                    key = parts.pop();\r\n                    if ( arguments.length === 1 ) {\r\n                        return curOption[ key ] === undefined ? null : curOption[ key ];\r\n                    }\r\n                    curOption[ key ] = value;\r\n                } else {\r\n                    if ( arguments.length === 1 ) {\r\n                        return this.options[ key ] === undefined ? null : this.options[ key ];\r\n                    }\r\n                    options[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._setOptions( options );\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOptions: function( options ) {\r\n            var key;\r\n\r\n            for ( key in options ) {\r\n                this._setOption( key, options[ key ] );\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        _setOption: function( key, value ) {\r\n\r\n            this.options[ key ] = value;\r\n\r\n            return this;\r\n        },\r\n\r\n        getUID : function (prefix) {\r\n            prefix = prefix || \"plugin\";\r\n            do prefix += ~~(Math.random() * 1000000)\r\n            while (document.getElementById(prefix))\r\n            return prefix;\r\n        },\r\n\r\n        elm : function() {\r\n            return this._elm;\r\n        }\r\n\r\n    });\r\n\r\n    $.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n    elmx.partial(\"plugin\",function(name,options) {\r\n        var args = slice.call( arguments, 1 );\r\n        return instantiate.apply(this,[this.domNode,name].concat(args));\r\n    }); \r\n\r\n\r\n    function plugins() {\r\n        return plugins;\r\n    }\r\n     \r\n    langx.mixin(plugins, {\r\n        instantiate,\r\n        Plugin,\r\n        register,\r\n        shortcuts\r\n    });\r\n\r\n    return  skylark.attach(\"domx.plugins\",plugins);\r\n});\ndefine('skylark-domx-plugins/main',[\r\n\t\"./plugins\"\r\n],function(plugins){\r\n\treturn plugins;\r\n});\ndefine('skylark-domx-plugins', ['skylark-domx-plugins/main'], function (main) { return main; });\n\ndefine('skylark-jquery/JqueryPlugin',[\r\n\t\"skylark-langx-types\",\r\n\t\"skylark-langx-objects\",\r\n\t\"skylark-langx-arrays\",\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-domx-data\",\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-plugins\",\r\n\t\"skylark-domx-query\",\r\n],function(types, objects, arrays, langx, datax, eventer, plugins, $){\r\n\r\n    var pluginUuid = 0;\r\n\r\n\tvar JqPlugin = plugins.Plugin.inherit({\r\n\t\tklassName : \"JqPlugin\",\r\n\r\n        pluginEventPrefix: \"\",\r\n\r\n        options: {\r\n            // Callbacks\r\n            create: null\r\n        },\r\n\r\n        destroy: function() {\r\n            this.overrided();\r\n\r\n            // We can probably remove the unbind calls in 2.0\r\n            // all event bindings should go through this._on()\r\n            this.element\r\n                .off( this.eventNamespace );\r\n\r\n            // Clean up events and states\r\n            this.bindings.off( this.eventNamespace );\r\n        },\r\n\r\n        _construct : function(element,options) {\r\n            //this.options = langx.mixin( {}, this.options );\r\n\r\n            element = $( element || this.defaultElement || this )[ 0 ];\r\n            this.element = $( element );\r\n            this.uuid = pluginUuid++;\r\n            this.eventNamespace = \".\" + this.pluginName + this.uuid;\r\n\r\n            this.bindings = $();\r\n            this.classesElementLookup = {};\r\n\r\n\t\t\tthis.hoverable = $();\r\n\t\t\tthis.focusable = $();\r\n\r\n            if ( element !== this ) {\r\n                datax.data( element, this.pluginName, this );\r\n                this._on( true, this.element, {\r\n                    remove: function( event ) {\r\n                        if ( event.target === element ) {\r\n                            this.destroy();\r\n                        }\r\n                    }\r\n                } );\r\n                this.document = $( element.style ?\r\n\r\n                    // Element within the document\r\n                    element.ownerDocument :\r\n\r\n                    // Element is window or document\r\n                    element.document || element );\r\n                this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );\r\n            }\r\n\r\n            this.overrided(element,options);\r\n\r\n//            this.options = langx.mixin( {},\r\n//                this.options,\r\n//                this._getCreateOptions(),\r\n//                options );\r\n\r\n            this._create();\r\n\r\n            this._trigger( \"create\", null, this._getCreateEventData() );\r\n\r\n            this._init();\r\n        },\r\n\r\n\r\n\t     _initOptions : function(options) {\r\n\t     \toptions = langx.mixin(this._getCreateOptions(),options);\r\n\r\n\t\t\tthis.overrided(options);\r\n\t\t},\r\n\r\n        _getCreateOptions: function() {\r\n            return {};\r\n        },\r\n\r\n        _getCreateEventData: langx.noop,\r\n\r\n\t\t_super : function() {\r\n\t\t\tif (this.overrided) {\r\n\t\t\t\treturn this.overrided.apply(this,arguments);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_superApply : function ( args ) {\r\n\t\t\tif (this.overrided) {\r\n\t\t\t\treturn this.overrided.apply(this,args);\r\n\t\t\t}\r\n\t\t},\r\n\r\n        _create: langx.noop,\r\n\r\n        _init: langx.noop,\r\n\r\n\t\t_classes: function( options ) {\r\n\t\t\tvar full = [];\r\n\t\t\tvar that = this;\r\n\r\n\t\t\toptions = objects.mixin( {\r\n\t\t\t\telement: this.element,\r\n\t\t\t\tclasses: this.options.classes || {}\r\n\t\t\t}, options );\r\n\r\n\r\n\t\t\tfunction bindRemoveEvent() {\r\n\t\t\t\toptions.element.each( function( _, element ) {\r\n\t\t\t\t\tvar isTracked = langx.map( that.classesElementLookup, function( elements ) {\r\n\t\t\t\t\t\treturn elements;\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t\t.some( function(elements ) {\r\n\t\t\t\t\t\t\treturn $(elements).is( element );\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif ( !isTracked ) {\r\n\t\t\t\t\t\tthat._on( $( element ), {\r\n\t\t\t\t\t\t\tremove: \"_untrackClassesElement\"\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tfunction processClassString( classes, checkOption ) {\r\n\t\t\t\tvar current, i;\r\n\t\t\t\tfor ( i = 0; i < classes.length; i++ ) {\r\n\t\t\t\t\tcurrent = that.classesElementLookup[ classes[ i ] ] || $();\r\n\t\t\t\t\tif ( options.add ) {\r\n\t\t\t\t\t\tbindRemoveEvent();\r\n\t\t\t\t\t\tcurrent = $( langx.uniq( current.get().concat( options.element.get() ) ) );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrent = $( current.not( options.element ).get() );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthat.classesElementLookup[ classes[ i ] ] = current;\r\n\t\t\t\t\tfull.push( classes[ i ] );\r\n\t\t\t\t\tif ( checkOption && options.classes[ classes[ i ] ] ) {\r\n\t\t\t\t\t\tfull.push( options.classes[ classes[ i ] ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ( options.keys ) {\r\n\t\t\t\tprocessClassString( options.keys.match( /\\S+/g ) || [], true );\r\n\t\t\t}\r\n\t\t\tif ( options.extra ) {\r\n\t\t\t\tprocessClassString( options.extra.match( /\\S+/g ) || [] );\r\n\t\t\t}\r\n\r\n\t\t\treturn full.join( \" \" );\r\n\t\t},\r\n\r\n\t\t_untrackClassesElement: function( event ) {\r\n\t\t\tvar that = this;\r\n\t\t\tlangx.each( that.classesElementLookup, function( key, value ) {\r\n\t\t\t\tif ( arrays.inArray( event.target, value ) !== -1 ) {\r\n\t\t\t\t\tthat.classesElementLookup[ key ] = $( value.not( event.target ).get() );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tthis._off( $( event.target ) );\r\n\t\t},\r\n\r\n\t\t_removeClass: function( element, keys, extra ) {\r\n\t\t\treturn this._toggleClass( element, keys, extra, false );\r\n\t\t},\r\n\r\n\t\t_addClass: function( element, keys, extra ) {\r\n\t\t\treturn this._toggleClass( element, keys, extra, true );\r\n\t\t},\r\n\r\n\t\t_toggleClass: function( element, keys, extra, add ) {\r\n\t\t\tadd = ( typeof add === \"boolean\" ) ? add : extra;\r\n\t\t\tvar shift = ( typeof element === \"string\" || element === null ),\r\n\t\t\t\toptions = {\r\n\t\t\t\t\textra: shift ? keys : extra,\r\n\t\t\t\t\tkeys: shift ? element : keys,\r\n\t\t\t\t\telement: shift ? this.element : element,\r\n\t\t\t\t\tadd: add\r\n\t\t\t\t};\r\n\t\t\toptions.element.toggleClass( this._classes( options ), add );\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t_on: function( suppressDisabledCheck, element, handlers ) {\r\n\t\t\tvar delegateElement;\r\n\t\t\tvar instance = this;\r\n\r\n\t\t\t// No suppressDisabledCheck flag, shuffle arguments\r\n\t\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\r\n\t\t\t\thandlers = element;\r\n\t\t\t\telement = suppressDisabledCheck;\r\n\t\t\t\tsuppressDisabledCheck = false;\r\n\t\t\t}\r\n\r\n\t\t\t// No element argument, shuffle and use this.element\r\n\t\t\tif ( !handlers ) {\r\n\t\t\t\thandlers = element;\r\n\t\t\t\telement = this.element;\r\n\t\t\t\tdelegateElement = this.widget();\r\n\t\t\t} else {\r\n\t\t\t\telement = delegateElement = $( element );\r\n\t\t\t\tthis.bindings = this.bindings.add( element );\r\n\t\t\t}\r\n\r\n\t\t\tobjects.each( handlers, function( event, handler ) {\r\n\t\t\t\tfunction handlerProxy() {\r\n\r\n\t\t\t\t\t// Allow widgets to customize the disabled handling\r\n\t\t\t\t\t// - disabled as an array instead of boolean\r\n\t\t\t\t\t// - disabled class as method for disabling individual parts\r\n\t\t\t\t\tif ( !suppressDisabledCheck &&\r\n\t\t\t\t\t\t\t( instance.options.disabled === true ||\r\n\t\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\r\n\t\t\t\t\t\t.apply( instance, arguments );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Copy the guid so direct unbinding works\r\n\t\t\t\tif ( typeof handler !== \"string\" ) {\r\n\t\t\t\t\thandlerProxy.guid = handler.guid =\r\n\t\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ );\r\n\t\t\t\tvar eventName = match[ 1 ] + instance.eventNamespace;\r\n\t\t\t\tvar selector = match[ 2 ];\r\n\r\n\t\t\t\tif ( selector ) {\r\n\t\t\t\t\tdelegateElement.on( eventName, selector, handlerProxy );\r\n\t\t\t\t} else {\r\n\t\t\t\t\telement.on( eventName, handlerProxy );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\t_off: function( element, eventName ) {\r\n\t\t\teventName = ( eventName || \"\" ).split( \" \" ).join( this.eventNamespace + \" \" ) +\r\n\t\t\t\tthis.eventNamespace;\r\n\t\t\telement.off( eventName );\r\n\r\n\t\t\t// Clear the stack to avoid memory leaks (#10056)\r\n\t\t\tthis.bindings = $( this.bindings.not( element ).get() );\r\n\t\t\tthis.focusable = $( this.focusable.not( element ).get() );\r\n\t\t\tthis.hoverable = $( this.hoverable.not( element ).get() );\r\n\t\t},\r\n\r\n\t\t_trigger: function( type, event, data ) {\r\n\t\t\tvar prop, orig;\r\n\t\t\tvar callback = this.options[ type ];\r\n\r\n\t\t\tdata = data || {};\r\n\t\t\tevent = eventer.proxy( event );\r\n\t\t\tevent.type = ( type === this.widgetEventPrefix ?\r\n\t\t\t\ttype :\r\n\t\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\r\n\r\n\t\t\t// The original event may come from any element\r\n\t\t\t// so we need to reset the target on the new event\r\n\t\t\tevent.target = this.element[ 0 ];\r\n\r\n\t\t\t// Copy original event properties over to the new event\r\n\t\t\torig = event.originalEvent;\r\n\t\t\tif ( orig ) {\r\n\t\t\t\tfor ( prop in orig ) {\r\n\t\t\t\t\tif ( !( prop in event ) ) {\r\n\t\t\t\t\t\tevent[ prop ] = orig[ prop ];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.element.trigger( event, data );\r\n\t\t\treturn !( types.isFunction( callback ) &&\r\n\t\t\t\tcallback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||\r\n\t\t\t\tevent.isDefaultPrevented() );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn JqPlugin;\r\n});\n/*!\r\n * jQuery UI Widget @VERSION\r\n * http://jqueryui.com\r\n *\r\n * Copyright jQuery Foundation and other contributors\r\n * Released under the MIT license.\r\n * http://jquery.org/license\r\n */\r\n\r\n//>>label: Widget\r\n//>>group: Core\r\n//>>description: Provides a factory for creating stateful widgets with a common API.\r\n//>>docs: http://api.jqueryui.com/jQuery.widget/\r\n//>>demos: http://jqueryui.com/widget/\r\n\r\ndefine( 'skylark-jquery/widget',[ \r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-domx-plugins\",\r\n\t\"./core\",\r\n\t\"./JqueryPlugin\"\r\n],  function(langx,splugins, $,JqPlugin ) {\r\n\r\n\tvar widgetUuid = 0;\r\n\tvar widgetHasOwnProperty = Array.prototype.hasOwnProperty;\r\n\tvar widgetSlice = Array.prototype.slice;\r\n\r\n\t$.cleanData = ( function( orig ) {\r\n\t\treturn function( elems ) {\r\n\t\t\tvar events, elem, i;\r\n\t\t\tfor ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {\r\n\r\n\t\t\t\t// Only trigger remove when necessary to save time\r\n\t\t\t\tevents = $._data( elem, \"events\" );\r\n\t\t\t\tif ( events && events.remove ) {\r\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\torig( elems );\r\n\t\t};\r\n\t} )( $.cleanData );\r\n\t\r\n\t$.widget = function( name, base, prototype ) {\r\n\t\tvar existingConstructor, constructor, basePrototype;\r\n\r\n\t\t// ProxiedPrototype allows the provided prototype to remain unmodified\r\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)\r\n\t\tvar proxiedPrototype = {};\r\n\r\n\t\tvar namespace = name.split( \".\" )[ 0 ];\r\n\t\tname = name.split( \".\" )[ 1 ];\r\n\t\tvar fullName = namespace + \"-\" + name;\r\n\r\n\t\tif ( !prototype ) {\r\n\t\t\tprototype = base;\r\n\t\t\tbase = $.Widget;\r\n\t\t}\r\n\r\n\t\tif ( $.isArray( prototype ) ) {\r\n\t\t\tprototype = $.extend.apply( null, [ {} ].concat( prototype ) );\r\n\t\t}\r\n\r\n\t\t// Create selector for plugin\r\n\t\t$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {\r\n\t\t\treturn !!$.data( elem, fullName );\r\n\t\t};\r\n\r\n\t\t$[ namespace ] = $[ namespace ] || {};\r\n\r\n\t\texistingConstructor = $[ namespace ][ name ];\r\n\r\n\t\tvar basePrototype = base.prototype,\r\n\t\t\tnewPrototype = {};\r\n\r\n\t\tfor (var key in prototype) {\r\n\t\t\tvar value = prototype[key];\r\n\r\n\t\t\tif ( $.isPlainObject( value ) ) {\r\n\t\t\t\tnewPrototype[ key ] = $.isPlainObject( basePrototype[ key ] ) ?\r\n\t\t\t\t\t$.widget.extend( {}, basePrototype[ key ], value ) :\r\n\r\n\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\r\n\t\t\t\t\t$.widget.extend( {}, value );\r\n\t\t\t} else {\r\n\t\t\t\tnewPrototype[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar _proto = $.widget.extend({\r\n\r\n\t\t\t// TODO: remove support for widgetEventPrefix\r\n\t\t\t// always use the name + a colon as the prefix, e.g., draggable:start\r\n\t\t\t// don't prefix for widgets that aren't DOM-based\r\n\t\t\twidgetEventPrefix: existingConstructor ? ( base.prototype.widgetEventPrefix || name ) : name\r\n\t\t}, {\r\n\t\t\toptions : base.prototype.options\r\n\t\t},newPrototype, {\r\n\t\t\tname : fullName,\r\n\t\t\tnamespace: namespace,\r\n\t\t\twidgetName: name,\r\n\t\t\tpluginName : \"jqueryui.\" + (namespace ? namespace + \".\" : \"\") + name,\r\n\t\t\twidgetFullName: fullName\r\n\t\t} );\r\n\r\n\t\tconstructor = $[ namespace ][ name ] = base.inherit(_proto);\r\n\t\t/*\r\n\r\n\t\tconstructor = $[ namespace ][ name ] = function( options, element ) {\r\n\r\n\t\t\t// Allow instantiation without \"new\" keyword\r\n\t\t\tif ( !this._createWidget ) {\r\n\t\t\t\treturn new constructor( options, element );\r\n\t\t\t}\r\n\r\n\t\t\t// Allow instantiation without initializing for simple inheritance\r\n\t\t\t// must use \"new\" keyword (the code above always passes args)\r\n\t\t\tif ( arguments.length ) {\r\n\t\t\t\tthis._createWidget( options, element );\r\n\t\t\t}\r\n\t\t};\r\n\t\t*/\r\n\t\t// Extend with the existing constructor to carry over any static properties\r\n\t\t$.extend( constructor, existingConstructor, {\r\n\t\t\tversion: prototype.version,\r\n\r\n\t\t\t// Copy the object used to create the prototype in case we need to\r\n\t\t\t// redefine the widget later\r\n\t\t\t_proto: _proto,\r\n\r\n\t\t\t// Track widgets that inherit from this widget in case this widget is\r\n\t\t\t// redefined after a widget inherits from it\r\n\t\t\t_childConstructors: []\r\n\t\t} );\r\n\r\n\t\t/*\r\n\t\tbasePrototype = new base();\r\n\r\n\t\t// We need to make the options hash a property directly on the new instance\r\n\t\t// otherwise we'll modify the options hash on the prototype that we're\r\n\t\t// inheriting from\r\n\t\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\r\n\t\t$.each( prototype, function( prop, value ) {\r\n\t\t\tif ( !$.isFunction( value ) ) {\r\n\t\t\t\tproxiedPrototype[ prop ] = value;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tproxiedPrototype[ prop ] = ( function() {\r\n\t\t\t\tfunction _super() {\r\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction _superApply( args ) {\r\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, args );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn function() {\r\n\t\t\t\t\tvar __super = this._super;\r\n\t\t\t\t\tvar __superApply = this._superApply;\r\n\t\t\t\t\tvar returnValue;\r\n\r\n\t\t\t\t\tthis._super = _super;\r\n\t\t\t\t\tthis._superApply = _superApply;\r\n\r\n\t\t\t\t\treturnValue = value.apply( this, arguments );\r\n\r\n\t\t\t\t\tthis._super = __super;\r\n\t\t\t\t\tthis._superApply = __superApply;\r\n\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t} )();\r\n\t\t} );\r\n\t\tconstructor.prototype = $.widget.extend( basePrototype, {\r\n\r\n\t\t\t// TODO: remove support for widgetEventPrefix\r\n\t\t\t// always use the name + a colon as the prefix, e.g., draggable:start\r\n\t\t\t// don't prefix for widgets that aren't DOM-based\r\n\t\t\twidgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name\r\n\t\t}, proxiedPrototype, {\r\n\t\t\tconstructor: constructor,\r\n\t\t\tnamespace: namespace,\r\n\t\t\twidgetName: name,\r\n\t\t\twidgetFullName: fullName\r\n\t\t} );\r\n\t\t*/\r\n\t\t// If this widget is being redefined then we need to find all widgets that\r\n\t\t// are inheriting from it and redefine all of them so that they inherit from\r\n\t\t// the new version of this widget. We're essentially trying to replace one\r\n\t\t// level in the prototype chain.\r\n\t\tif ( existingConstructor ) {\r\n\t\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\r\n\t\t\t\tvar childPrototype = child.prototype;\r\n\r\n\t\t\t\t// Redefine the child widget using the same prototype that was\r\n\t\t\t\t// originally used, but inherit from the new version of the base\r\n\t\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor,\r\n\t\t\t\t\tchild._proto );\r\n\t\t\t} );\r\n\r\n\t\t\t// Remove the list of existing child constructors from the old constructor\r\n\t\t\t// so the old child constructors can be garbage collected\r\n\t\t\tdelete existingConstructor._childConstructors;\r\n\t\t} else {\r\n\t\t\tif (base._childConstructors) {\r\n\t\t\t\tbase._childConstructors.push( constructor );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//$.widget.bridge( name, constructor );\r\n\r\n\t\tsplugins.register(constructor,name,fullName);\r\n\r\n\t\treturn constructor;\r\n\t};\r\n\r\n\t$.widget.extend = function( target ) {\r\n\t\tvar input = widgetSlice.call( arguments, 1 );\r\n\t\tvar inputIndex = 0;\r\n\t\tvar inputLength = input.length;\r\n\t\tvar key;\r\n\t\tvar value;\r\n\r\n\t\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\r\n\t\t\tfor ( key in input[ inputIndex ] ) {\r\n\t\t\t\tvalue = input[ inputIndex ][ key ];\r\n\t\t\t\tif ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {\r\n\r\n\t\t\t\t\t// Clone objects\r\n\t\t\t\t\tif ( $.isPlainObject( value ) ) {\r\n\t\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\r\n\t\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\r\n\r\n\t\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\r\n\t\t\t\t\t\t\t$.widget.extend( {}, value );\r\n\r\n\t\t\t\t\t// Copy everything else by reference\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttarget[ key ] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t};\r\n\r\n\r\n\t$.Widget = \t JqPlugin.inherit({\r\n\t\twidgetName: \"widget\",\r\n\t\twidgetEventPrefix: \"\",\r\n\t\tdefaultElement: \"<div>\",\r\n\r\n\t\toptions: {\r\n\t\t\tclasses: {},\r\n\t\t\tdisabled: false,\r\n\r\n\t\t\t// Callbacks\r\n\t\t\tcreate: null\r\n\t\t},\r\n\r\n\t\twidget: function() {\r\n\t\t\treturn this.element;\r\n\t\t},\r\n\r\n\t\t_setOption: function( key, value ) {\r\n\t\t\tif ( key === \"classes\" ) {\r\n\t\t\t\tthis._setOptionClasses( value );\r\n\t\t\t}\r\n\r\n\t\t\tthis.options[ key ] = value;\r\n\r\n\t\t\tif ( key === \"disabled\" ) {\r\n\t\t\t\tthis._setOptionDisabled( value );\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t_setOptionClasses: function( value ) {\r\n\t\t\tvar classKey, elements, currentElements;\r\n\r\n\t\t\tfor ( classKey in value ) {\r\n\t\t\t\tcurrentElements = this.classesElementLookup[ classKey ];\r\n\t\t\t\tif ( value[ classKey ] === this.options.classes[ classKey ] ||\r\n\t\t\t\t\t\t!currentElements ||\r\n\t\t\t\t\t\t!currentElements.length ) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// We are doing this to create a new jQuery object because the _removeClass() call\r\n\t\t\t\t// on the next line is going to destroy the reference to the current elements being\r\n\t\t\t\t// tracked. We need to save a copy of this collection so that we can add the new classes\r\n\t\t\t\t// below.\r\n\t\t\t\telements = $( currentElements.get() );\r\n\t\t\t\tthis._removeClass( currentElements, classKey );\r\n\r\n\t\t\t\t// We don't use _addClass() here, because that uses this.options.classes\r\n\t\t\t\t// for generating the string of classes. We want to use the value passed in from\r\n\t\t\t\t// _setOption(), this is the new value of the classes option which was passed to\r\n\t\t\t\t// _setOption(). We pass this value directly to _classes().\r\n\t\t\t\telements.addClass( this._classes( {\r\n\t\t\t\t\telement: elements,\r\n\t\t\t\t\tkeys: classKey,\r\n\t\t\t\t\tclasses: value,\r\n\t\t\t\t\tadd: true\r\n\t\t\t\t} ));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setOptionDisabled: function( value ) {\r\n\t\t\tthis._toggleClass( this.widget(), this.widgetFullName + \"-disabled\", null, !!value );\r\n\r\n\t\t\t// If the widget is becoming disabled, then nothing is interactive\r\n\t\t\tif ( value ) {\r\n\t\t\t\tthis._removeClass( this.hoverable, null, \"ui-state-hover\" );\r\n\t\t\t\tthis._removeClass( this.focusable, null, \"ui-state-focus\" );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tenable: function() {\r\n\t\t\treturn this._setOptions( { disabled: false } );\r\n\t\t},\r\n\r\n\t\tdisable: function() {\r\n\t\t\treturn this._setOptions( { disabled: true } );\r\n\t\t},\r\n\r\n\r\n\t\t_delay: function( handler, delay ) {\r\n\t\t\tfunction handlerProxy() {\r\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\r\n\t\t\t\t\t.apply( instance, arguments );\r\n\t\t\t}\r\n\t\t\tvar instance = this;\r\n\t\t\treturn setTimeout( handlerProxy, delay || 0 );\r\n\t\t},\r\n\r\n\t\t_hoverable: function( element ) {\r\n\t\t\tthis.hoverable = this.hoverable.add( element );\r\n\t\t\tthis._on( element, {\r\n\t\t\t\tmouseenter: function( event ) {\r\n\t\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-hover\" );\r\n\t\t\t\t},\r\n\t\t\t\tmouseleave: function( event ) {\r\n\t\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-hover\" );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\t_focusable: function( element ) {\r\n\t\t\tthis.focusable = this.focusable.add( element );\r\n\t\t\tthis._on( element, {\r\n\t\t\t\tfocusin: function( event ) {\r\n\t\t\t\t\tthis._addClass( $( event.currentTarget ), null, \"ui-state-focus\" );\r\n\t\t\t\t},\r\n\t\t\t\tfocusout: function( event ) {\r\n\t\t\t\t\tthis._removeClass( $( event.currentTarget ), null, \"ui-state-focus\" );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t$.Widget._childConstructors = [];\r\n\r\n\t$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\r\n\t\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\r\n\t\t\tif ( typeof options === \"string\" ) {\r\n\t\t\t\toptions = { effect: options };\r\n\t\t\t}\r\n\r\n\t\t\tvar hasOptions;\r\n\t\t\tvar effectName = !options ?\r\n\t\t\t\tmethod :\r\n\t\t\t\toptions === true || typeof options === \"number\" ?\r\n\t\t\t\t\tdefaultEffect :\r\n\t\t\t\t\toptions.effect || defaultEffect;\r\n\r\n\t\t\toptions = options || {};\r\n\t\t\tif ( typeof options === \"number\" ) {\r\n\t\t\t\toptions = { duration: options };\r\n\t\t\t}\r\n\r\n\t\t\thasOptions = !$.isEmptyObject( options );\r\n\t\t\toptions.complete = callback;\r\n\r\n\t\t\tif ( options.delay ) {\r\n\t\t\t\telement.delay( options.delay );\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\r\n\t\t\t\telement[ method ]( options );\r\n\t\t\t} else if ( effectName !== method && element[ effectName ] ) {\r\n\t\t\t\telement[ effectName ]( options.duration, options.easing, callback );\r\n\t\t\t} else {\r\n\t\t\t\telement.queue( function( next ) {\r\n\t\t\t\t\t$( this )[ method ]();\r\n\t\t\t\t\tif ( callback ) {\r\n\t\t\t\t\t\tcallback.call( element[ 0 ] );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnext();\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t};\r\n\t} );\r\n\r\n\treturn $.widget;\r\n\r\n});\r\n\ndefine('skylark-jquery/main',[\r\n    \"./core\",\r\n    \"./ajax\",\r\n    \"./callbacks\",\r\n    \"./deferred\",\r\n    \"./queue\",\r\n    \"./JqueryPlugin\",\r\n    \"./widget\"\r\n], function($) {\r\n    return $;\r\n});\r\n\ndefine('skylark-jquery', ['skylark-jquery/main'], function (main) { return main; });\n\ndefine('skylark-jsmodeler/core/jsm',[],function(){\r\n\tvar JSM = function ()\r\n\t{\r\n\t\tthis.mainVersion = 0;\r\n\t\tthis.subVersion = 45;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RandomNumber\r\n\t* Description: Generates a random number between two numbers.\r\n\t* Parameters:\r\n\t*\tfrom {number} lowest random result\r\n\t*\tto {number} highest random result\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.RandomNumber = function (from, to)\r\n\t{\r\n\t\treturn Math.random () * (to - from) + from;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RandomInt\r\n\t* Description: Generates a random integer between two integers.\r\n\t* Parameters:\r\n\t*\tfrom {integer} lowest random result\r\n\t*\tto {integer} highest random result\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.RandomInt = function (from, to)\r\n\t{\r\n\t\treturn Math.floor ((Math.random () * (to - from + 1)) + from);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RandomBoolean\r\n\t* Description: Generates a random boolean value.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.RandomBoolean = function ()\r\n\t{\r\n\t\treturn JSM.RandomInt (0, 1) === 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SeededRandomInt\r\n\t* Description: Generates a random integer between two integers. A seed number can be specified.\r\n\t* Parameters:\r\n\t*\tfrom {integer} lowest random result\r\n\t*\tto {integer} highest random result\r\n\t*\tseed {integer} seed value\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.SeededRandomInt = function (from, to, seed)\r\n\t{\r\n\t    var random = ((seed * 9301 + 49297) % 233280) / 233280;\r\n\t\treturn Math.floor ((random * (to - from + 1)) + from);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ValueOrDefault\r\n\t* Description: Returns the given value, or a default if it is undefined.\r\n\t* Parameters:\r\n\t*\tval {anything} new value\r\n\t*\tdef {anything} default value\r\n\t* Returns:\r\n\t*\t{anything} the result\r\n\t*/\r\n\tJSM.ValueOrDefault = function (val, def)\r\n\t{\r\n\t\tif (val === undefined || val === null) {\r\n\t\t\treturn def;\r\n\t\t}\r\n\t\treturn val;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: PrevIndex\r\n\t* Description: Returns the circular previous index for an array with the given length.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index\r\n\t*\tlength {integer} the number of indices\r\n\t*/\r\n\tJSM.PrevIndex = function (index, length)\r\n\t{\r\n\t\treturn index > 0 ? index - 1 : length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: NextIndex\r\n\t* Description: Returns the circular next index for an array with the given length.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index\r\n\t*\tlength {integer} the number of indices\r\n\t*/\r\n\tJSM.NextIndex = function (index, length)\r\n\t{\r\n\t\treturn index < length - 1 ? index + 1 : 0;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CopyObjectProperties\r\n\t* Description: Copies one object properties to another object.\r\n\t* Parameters:\r\n\t*\tsource {anything} source object\r\n\t*\ttarget {anything} target object\r\n\t*\toverwrite {boolean} overwrite existing properties\r\n\t*/\r\n\tJSM.CopyObjectProperties = function (source, target, overwrite)\r\n\t{\r\n\t\tif (source === undefined || source === null ||\r\n\t\t\ttarget === undefined || target === null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar property;\r\n\t\tfor (property in source) {\r\n\t\t\tif (source.hasOwnProperty (property)) {\r\n\t\t\t\tif (overwrite || target[property] === undefined || target[property] === null) {\r\n\t\t\t\t\ttarget[property] = source[property];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetObjectProperty\r\n\t* Description: Returns the given property of the object. If it doesn't exist, returns the given default value.\r\n\t* Parameters:\r\n\t*\tobject {anything} the object\r\n\t*\tpropertyName {string} the name of the property\r\n\t*\tdefaultValue {anything} the default value\r\n\t*/\r\n\tJSM.GetObjectProperty = function (object, propertyName, defaultValue)\r\n\t{\r\n\t\tif (object === undefined || object === null) {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\r\n\t\tvar propertyValue = object[propertyName];\r\n\t\tif (propertyValue === undefined || propertyValue === null) {\r\n\t\t\treturn defaultValue;\r\n\t\t}\r\n\t\t\r\n\t\treturn propertyValue;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Message\r\n\t* Description: Writes a message to the console.\r\n\t* Parameters:\r\n\t*\tmessage {string} the message\r\n\t*/\r\n\tJSM.Message = function (message)\r\n\t{\r\n\t\tconsole.log ('JSModeler: ' + message);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\r\n\r\n\ndefine('skylark-jsmodeler/core/timer',[\"./jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Timer\r\n\t* Description: Utility class for time measure.\r\n\t*/\r\n\tJSM.Timer = function ()\t{\r\n\t\tthis.start = 0;\r\n\t\tthis.stop = 0;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Timer.Start\r\n\t* Description: Starts the timer.\r\n\t*/\r\n\tJSM.Timer.prototype.Start = function ()\t{\r\n\t\tvar date = new Date ();\r\n\t\tthis.start = date.getTime ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Timer.Stop\r\n\t* Description: Stops the timer.\r\n\t*/\r\n\tJSM.Timer.prototype.Stop = function ()\t{\r\n\t\tvar date = new Date ();\r\n\t\tthis.end = date.getTime ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Timer.Result\r\n\t* Description: Returns the time between start and stop.\r\n\t* Returns:\r\n\t*\t{number} The result.\r\n\t*/\r\n\tJSM.Timer.prototype.Result = function (){\r\n\t\treturn (this.end - this.start);\r\n\t};\r\n\r\n\t/**\r\n\t* Class: FPSCounter\r\n\t* Description:\r\n\t*\tUtility class for FPS count. It calculates the frames and returns FPS count for the last interval\r\n\t*\twith the given length. The Get function should called in every frame.\r\n\t*/\r\n\tJSM.FPSCounter = function (){\r\n\t\tthis.start = null;\r\n\t\tthis.frames = null;\r\n\t\tthis.current = null;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: FPSCounter.Get\r\n\t* Description: Returns the FPS count for the last interval with the given length.\r\n\t* Parameters:\r\n\t*\tinterval {integer} the interval length in milliseconds\r\n\t* Returns:\r\n\t*\t{integer} The result.\r\n\t*/\r\n\tJSM.FPSCounter.prototype.Get = function (interval)\t{\r\n\t\tvar date = new Date ();\r\n\t\tvar end = date.getTime ();\r\n\t\tif (this.start === null) {\r\n\t\t\tthis.start = end;\r\n\t\t\tthis.frames = 0;\r\n\t\t\tthis.current = 0;\r\n\t\t}\r\n\r\n\t\tif (interval === null || interval === undefined) {\r\n\t\t\tinterval = 1000;\r\n\t\t}\r\n\t\t\r\n\t\tthis.frames = this.frames + 1;\r\n\t\tvar elapsed = end - this.start;\r\n\t\tif (elapsed >= interval) {\r\n\t\t\tthis.current = 1000 * (this.frames / elapsed);\r\n\t\t\tthis.start = end;\r\n\t\t\tthis.frames = 0;\r\n\t\t}\r\n\r\n\t\treturn parseInt (this.current, 10);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/core/algorithm',[\"./jsm\"],function(JSM){\r\n\r\n\t/**\r\n\t* Function: SwapArrayValues\r\n\t* Description: Swaps to array values.\r\n\t* Parameters:\r\n\t*\tarray {anything[]} the array\r\n\t*\tfrom {integer} from index\r\n\t*\tto {integer} to index\r\n\t*/\r\n\tJSM.SwapArrayValues = function (array, from, to){\r\n\t\tvar temp = array[from];\r\n\t\tarray[from] = array[to];\r\n\t\tarray[to] = temp;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BubbleSort\r\n\t* Description: Sorts an array with bubble sort.\r\n\t* Parameters:\r\n\t*\tarray {anything[]} the array to sort\r\n\t*\tonCompare {function} the compare function\r\n\t*\tonSwap {function} the swap function\r\n\t*/\r\n\tJSM.BubbleSort = function (array, onCompare, onSwap){\r\n\t\tif (array.length < 2) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar compareFunction = onCompare;\r\n\t\tif (compareFunction === undefined || compareFunction === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar swapFunction = onSwap;\r\n\t\tif (swapFunction === undefined || swapFunction === null) {\r\n\t\t\tswapFunction = function (i, j) {\r\n\t\t\t\tJSM.SwapArrayValues (array, i, j);\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i < array.length - 1; i++) {\r\n\t\t\tfor (j = 0; j < array.length - i - 1; j++) {\r\n\t\t\t\tif (!compareFunction (array[j], array[j + 1])) {\r\n\t\t\t\t\tswapFunction (j, j + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ShiftArray\r\n\t* Description: Shifts an array.\r\n\t* Parameters:\r\n\t*\tarray {anything[]} the array to shift\r\n\t*\tcount {integer} shift count\r\n\t*/\r\n\tJSM.ShiftArray = function (array, count){\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tarray.push (array.shift ());\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/core/async',[\"./jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: AsyncRunTask\r\n\t* Description:\r\n\t*\tCalls a function multiple times asynchronously. If the environment\r\n\t*\tis not specified, it will run synchronously.\r\n\t* Parameters:\r\n\t*\ttaskFunction {function} the function to run\r\n\t*\tcallbacks {object} callbacks for start, process, and finish\r\n\t*\trunCount {integer} the count of runs\r\n\t*\ttimeout {integer} the timeout between runs\r\n\t*\tuserData {anything} task specific data\r\n\t*/\r\n\tJSM.AsyncRunTask = function (taskFunction, callbacks, runCount, timeout, userData)\r\n\t{\r\n\t\tfunction OnStart (runCount, userData, callbacks)\r\n\t\t{\r\n\t\t\tif (callbacks.onStart !== undefined && callbacks.onStart !== null) {\r\n\t\t\t\tcallbacks.onStart (runCount, userData);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnProgress (currentCount, userData, callbacks)\r\n\t\t{\r\n\t\t\tif (callbacks.onProgress !== undefined && callbacks.onProgress !== null) {\r\n\t\t\t\tcallbacks.onProgress (currentCount, userData);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction OnFinished (userData, callbacks)\r\n\t\t{\r\n\t\t\tif (callbacks.onFinish !== undefined && callbacks.onFinish !== null) {\r\n\t\t\t\tcallbacks.onFinish (userData);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction RunTask (currentCount, userData, callbacks)\r\n\t\t{\r\n\t\t\tvar needContinue = taskFunction ();\r\n\t\t\tOnProgress (currentCount, userData, callbacks);\r\n\t\t\tif (needContinue && currentCount < runCount - 1) {\r\n\t\t\t\tsetTimeout (function () {\r\n\t\t\t\t\tRunTask (currentCount + 1, userData, callbacks);\r\n\t\t\t\t}, timeout);\r\n\t\t\t} else {\r\n\t\t\t\tsetTimeout (function () {\r\n\t\t\t\t\tOnFinished (userData, callbacks);\r\n\t\t\t\t}, timeout);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tvar i, needContinue;\r\n\t\t\tfor (i = 0; i < runCount; i++) {\r\n\t\t\t\tneedContinue = taskFunction ();\r\n\t\t\t\tif (!needContinue) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tOnStart (runCount, userData, callbacks);\r\n\t\tRunTask (0, userData, callbacks);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/core/check',[\"./jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: IsWebGLEnabled\r\n\t* Description: Returns if WebGL is enabled in the browser.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsWebGLEnabled = function (){\r\n\t\tif (!window.WebGLRenderingContext) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tvar canvas = document.createElement ('canvas');\r\n\t\t\tif (!canvas.getContext ('experimental-webgl') && !canvas.getContext ('webgl')) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (exception) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsFileApiEnabled\r\n\t* Description: Returns if file api is enabled in the browser.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsFileApiEnabled = function ()\t{\r\n\t\tif (!window.File || !window.FileReader || !window.FileList || !window.Blob || !window.URL) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/core/jsonloader',[\"./jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: LoadJsonFile\r\n\t* Description: Loads a json file, and calls a callback with the parsed json.\r\n\t* Parameters:\r\n\t*\tfileName {string} the name of the json\r\n\t*\tonReady {function} the callback\r\n\t*/\r\n\tJSM.LoadJsonFile = function (fileName, onReady)\t{\r\n\t\tvar request = new XMLHttpRequest ();\r\n\t\trequest.overrideMimeType ('application/json');\r\n\t\trequest.open ('GET', fileName, true);\r\n\t\trequest.onreadystatechange = function () {\r\n\t\t\tif (request.readyState == 4) {\r\n\t\t\t\tvar jsonData = JSON.parse (request.responseText);\r\n\t\t\t\tonReady (jsonData);\r\n\t\t\t}\r\n\t\t};\r\n\t\trequest.send (null);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/definitions',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Eps = 0.00000001;\r\n\tJSM.Inf = 9999999999;\r\n\tJSM.RadDeg = 57.29577951308232;\r\n\tJSM.DegRad = 0.017453292519943;\r\n\r\n\t/**\r\n\t* Function: IsZero\r\n\t* Description: Determines if the given value is near zero. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} the value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsZero = function (a)\r\n\t{\r\n\t\treturn Math.abs (a) < JSM.Eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsPositive\r\n\t* Description: Determines if the given value is positive. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} the value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsPositive = function (a)\r\n\t{\r\n\t\treturn a > JSM.Eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsNegative\r\n\t* Description: Determines if the given value is negative. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} the value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsNegative = function (a)\r\n\t{\r\n\t\treturn a < -JSM.Eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsLower\r\n\t* Description: Determines if a value is lower than an other. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsLower = function (a, b)\r\n\t{\r\n\t\treturn b - a > JSM.Eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsGreater\r\n\t* Description: Determines if a value is greater than an other. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsGreater = function (a, b)\r\n\t{\r\n\t\treturn a - b > JSM.Eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsEqual\r\n\t* Description: Determines if two values are equal. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsEqual = function (a, b)\r\n\t{\r\n\t\treturn Math.abs (b - a) < JSM.Eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsEqualWithEps\r\n\t* Description: Determines if two values are equal. Uses the given epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t*\teps {number} epsilon value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsEqualWithEps = function (a, b, eps)\r\n\t{\r\n\t\treturn Math.abs (b - a) < eps;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsLowerOrEqual\r\n\t* Description: Determines if a value is lower or equal to an other. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsLowerOrEqual = function (a, b)\r\n\t{\r\n\t\treturn JSM.IsLower (a, b) || JSM.IsEqual (a, b);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsGreaterOrEqual\r\n\t* Description: Determines if a value is greater or equal to an other. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsGreaterOrEqual = function (a, b)\r\n\t{\r\n\t\treturn JSM.IsGreater (a, b) || JSM.IsEqual (a, b);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Minimum\r\n\t* Description: Returns the minimum of two values. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Minimum = function (a, b)\r\n\t{\r\n\t\treturn JSM.IsLower (a, b) ? a : b;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Maximum\r\n\t* Description: Returns the maximum of two values. Uses epsilon for comparison.\r\n\t* Parameters:\r\n\t*\ta {number} first value\r\n\t*\tb {number} second value\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Maximum = function (a, b)\r\n\t{\r\n\t\treturn JSM.IsGreater (a, b) ? a : b;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ArcSin\r\n\t* Description: Calculates the arcus sinus value.\r\n\t* Parameters:\r\n\t*\tvalue {number} the value\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.ArcSin = function (value)\r\n\t{\r\n\t\tif (JSM.IsGreaterOrEqual (value, 1.0)) {\r\n\t\t\treturn Math.PI / 2.0;\r\n\t\t} else if (JSM.IsLowerOrEqual (value, -1.0)) {\r\n\t\t\treturn - Math.PI / 2.0;\r\n\t\t}\r\n\t\t\r\n\t\treturn Math.asin (value);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ArcCos\r\n\t* Description: Calculates the arcus cosinus value.\r\n\t* Parameters:\r\n\t*\tvalue {number} the value\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.ArcCos = function (value)\r\n\t{\r\n\t\tif (JSM.IsGreaterOrEqual (value, 1.0)) {\r\n\t\t\treturn 0.0;\r\n\t\t} else if (JSM.IsLowerOrEqual (value, -1.0)) {\r\n\t\t\treturn Math.PI;\r\n\t\t}\r\n\t\t\r\n\t\treturn Math.acos (value);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/coord2d',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Coord2D\r\n\t* Description: Represents a 2D coordinate.\r\n\t* Parameters:\r\n\t*\tx {number} the first component\r\n\t*\ty {number} the second component\r\n\t*/\r\n\tJSM.Coord2D = function (x, y)\r\n\t{\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.Set\r\n\t* Description: Sets the coordinate.\r\n\t* Parameters:\r\n\t*\tx {number} the first component\r\n\t*\ty {number} the second component\r\n\t*/\r\n\tJSM.Coord2D.prototype.Set = function (x, y)\r\n\t{\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.IsEqual\r\n\t* Description: Returns if the coordinate is equal with the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Coord2D.prototype.IsEqual = function (coord)\r\n\t{\r\n\t\treturn JSM.IsEqual (this.x, coord.x) && JSM.IsEqual (this.y, coord.y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.IsEqualWithEps\r\n\t* Description: Returns if the coordinate is equal with the given one. Uses the given epsilon for comparison.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t*\teps {number} the epsilon\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Coord2D.prototype.IsEqualWithEps = function (coord, eps)\r\n\t{\r\n\t\treturn JSM.IsEqualWithEps (this.x, coord.x, eps) && JSM.IsEqualWithEps (this.y, coord.y, eps);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.DistanceTo\r\n\t* Description: Calculates the coordinate distance to the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Coord2D.prototype.DistanceTo = function (coord)\r\n\t{\r\n\t\treturn Math.sqrt ((coord.x - this.x) * (coord.x - this.x) + (coord.y - this.y) * (coord.y - this.y));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.AngleTo\r\n\t* Description: Calculates the coordinate vector angle to the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Coord2D.prototype.AngleTo = function (coord)\r\n\t{\r\n\t\tvar aDirection = this.Clone ().Normalize ();\r\n\t\tvar bDirection = coord.Clone ().Normalize ();\r\n\t\tif (aDirection.IsEqual (bDirection)) {\r\n\t\t\treturn 0.0;\r\n\t\t}\r\n\t\tvar product = JSM.VectorDot2D (aDirection, bDirection);\r\n\t\treturn JSM.ArcCos (product);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.Length\r\n\t* Description: Calculates the length of the coordinate vector.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Coord2D.prototype.Length = function ()\r\n\t{\r\n\t\treturn Math.sqrt (this.x * this.x + this.y * this.y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.MultiplyScalar\r\n\t* Description: Multiplies the vector with a scalar.\r\n\t* Parameters:\r\n\t*\tscalar {number} the scalar\r\n\t* Returns:\r\n\t*\t{Coord2D} this pointer\r\n\t*/\r\n\tJSM.Coord2D.prototype.MultiplyScalar = function (scalar)\r\n\t{\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.Normalize\r\n\t* Description: Normalizes the coordinate vector.\r\n\t* Returns:\r\n\t*\t{Coord2D} this pointer\r\n\t*/\r\n\tJSM.Coord2D.prototype.Normalize = function ()\r\n\t{\r\n\t\tvar length = this.Length ();\r\n\t\tif (JSM.IsPositive (length)) {\r\n\t\t\tthis.MultiplyScalar (1.0 / length);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.SetLength\r\n\t* Description: Sets the length of the coordinate vector.\r\n\t* Parameters:\r\n\t*\tlength {number} the length\r\n\t* Returns:\r\n\t*\t{Coord2D} this pointer\r\n\t*/\r\n\tJSM.Coord2D.prototype.SetLength = function (length)\r\n\t{\r\n\t\tvar thisLength = this.Length ();\r\n\t\tif (JSM.IsPositive (thisLength)) {\r\n\t\t\tthis.MultiplyScalar (length / thisLength);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.Offset\r\n\t* Description: Offsets the coordinate.\r\n\t* Parameters:\r\n\t*\tdirection {Vector2D} the direction of the offset\r\n\t*\tdistance {number} the distance of the offset\r\n\t* Returns:\r\n\t*\t{Coord2D} this pointer\r\n\t*/\r\n\tJSM.Coord2D.prototype.Offset = function (direction, distance)\r\n\t{\r\n\t\tvar normal = direction.Clone ().Normalize ();\r\n\t\tthis.x += normal.x * distance;\r\n\t\tthis.y += normal.y * distance;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.Rotate\r\n\t* Description: Rotates the coordinate.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord2D} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Coord2D} this pointer\r\n\t*/\r\n\tJSM.Coord2D.prototype.Rotate = function (angle, origo)\r\n\t{\r\n\t\tvar x = this.x - origo.x;\r\n\t\tvar y = this.y - origo.y;\r\n\t\tvar co = Math.cos (angle);\r\n\t\tvar si = Math.sin (angle);\r\n\t\tthis.x = x * co - y * si + origo.x;\r\n\t\tthis.y = x * si + y * co + origo.y;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.ToString\r\n\t* Description: Converts the coordinate values to string.\r\n\t* Returns:\r\n\t*\t{string} the string representation of the coordinate\r\n\t*/\r\n\tJSM.Coord2D.prototype.ToString = function ()\r\n\t{\r\n\t\treturn ('(' + this.x + ', ' + this.y + ')');\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord2D.Clone\r\n\t* Description: Clones the coordinate.\r\n\t* Returns:\r\n\t*\t{Coord2D} a cloned instance\r\n\t*/\r\n\tJSM.Coord2D.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Coord2D (this.x, this.y);\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Vector2D\r\n\t* Description: Same as Coord2D.\r\n\t*/\r\n\tJSM.Vector2D = JSM.Coord2D;\r\n\r\n\t/**\r\n\t* Function: CoordFromArray2D\r\n\t* Description: Returns a coordinate from an array of components.\r\n\t* Parameters:\r\n\t*\tarray {number[2]} the array of components\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.CoordFromArray2D = function (array)\r\n\t{\r\n\t\treturn new JSM.Coord2D (array[0], array[1]);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordToArray2D\r\n\t* Description: Returns array of components from a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\tarray {number[2]} the result\r\n\t*/\r\n\tJSM.CoordToArray2D = function (coord)\r\n\t{\r\n\t\treturn [coord.x, coord.y];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordAdd2D\r\n\t* Description: Adds two coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord2D} the first coordinate\r\n\t*\tb {Coord2D} the second coordinate\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.CoordAdd2D = function (a, b)\r\n\t{\r\n\t\treturn new JSM.Coord2D (a.x + b.x, a.y + b.y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSub2D\r\n\t* Description: Subs two coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord2D} the first coordinate\r\n\t*\tb {Coord2D} the second coordinate\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.CoordSub2D = function (a, b)\r\n\t{\r\n\t\treturn new JSM.Coord2D (a.x - b.x, a.y - b.y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: VectorDot2D\r\n\t* Description: Calculates the dot product of two vectors.\r\n\t* Parameters:\r\n\t*\ta {Vector2D} the first vector\r\n\t*\tb {Vector2D} the second vector\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.VectorDot2D = function (a, b)\r\n\t{\r\n\t\treturn a.x * b.x + a.y * b.y;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/coord',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Coord\r\n\t* Description: Represents a 3D coordinate.\r\n\t* Parameters:\r\n\t*\tx {number} the first component\r\n\t*\ty {number} the second component\r\n\t*\tz {number} the third component\r\n\t*/\r\n\tJSM.Coord = function (x, y, z)\r\n\t{\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Set\r\n\t* Description: Sets the coordinate.\r\n\t* Parameters:\r\n\t*\tx {number} the first component\r\n\t*\ty {number} the second component\r\n\t*\tz {number} the third component\r\n\t*/\r\n\tJSM.Coord.prototype.Set = function (x, y, z)\r\n\t{\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.IsEqual\r\n\t* Description: Returns if the coordinate is equal with the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Coord.prototype.IsEqual = function (coord)\r\n\t{\r\n\t\treturn JSM.IsEqual (this.x, coord.x) && JSM.IsEqual (this.y, coord.y) && JSM.IsEqual (this.z, coord.z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.IsEqualWithEps\r\n\t* Description: Returns if the coordinate is equal with the given one. Uses the given epsilon for comparison.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\teps {number} the epsilon\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Coord.prototype.IsEqualWithEps = function (coord, eps)\r\n\t{\r\n\t\treturn JSM.IsEqualWithEps (this.x, coord.x, eps) && JSM.IsEqualWithEps (this.y, coord.y, eps) && JSM.IsEqualWithEps (this.z, coord.z, eps);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.DistanceTo\r\n\t* Description: Calculates the coordinate distance to the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Coord.prototype.DistanceTo = function (coord)\r\n\t{\r\n\t\treturn Math.sqrt ((coord.x - this.x) * (coord.x - this.x) + (coord.y - this.y) * (coord.y - this.y) + (coord.z - this.z) * (coord.z - this.z));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.AngleTo\r\n\t* Description: Calculates the coordinate vector angle to the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Coord.prototype.AngleTo = function (coord)\r\n\t{\r\n\t\tvar aDirection = this.Clone ().Normalize ();\r\n\t\tvar bDirection = coord.Clone ().Normalize ();\r\n\t\tif (aDirection.IsEqual (bDirection)) {\r\n\t\t\treturn 0.0;\r\n\t\t}\r\n\t\tvar product = JSM.VectorDot (aDirection, bDirection);\r\n\t\treturn JSM.ArcCos (product);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.IsCollinearWith\r\n\t* Description: Returns if the coordinate vector is collinear with the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Coord.prototype.IsCollinearWith = function (coord)\r\n\t{\r\n\t\tvar angle = this.AngleTo (coord);\r\n\t\treturn JSM.IsEqual (angle, 0.0) || JSM.IsEqual (angle, Math.PI);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.IsPerpendicularWith\r\n\t* Description: Returns if the coordinate vector is perpendicular with the given one.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Coord.prototype.IsPerpendicularWith = function (coord)\r\n\t{\r\n\t\tvar angle = this.AngleTo (coord);\r\n\t\treturn JSM.IsEqual (angle, Math.PI / 2.0);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Length\r\n\t* Description: Calculates the length of the coordinate vector.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Coord.prototype.Length = function ()\r\n\t{\r\n\t\treturn Math.sqrt (this.x * this.x + this.y * this.y + this.z * this.z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Add\r\n\t* Description: Adds the given coordinate to coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*/\r\n\tJSM.Coord.prototype.Add = function (coord)\r\n\t{\r\n\t\tthis.x += coord.x;\r\n\t\tthis.y += coord.y;\r\n\t\tthis.z += coord.z;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Sub\r\n\t* Description: Subs the given coordinate from coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*/\r\n\tJSM.Coord.prototype.Sub = function (coord)\r\n\t{\r\n\t\tthis.x -= coord.x;\r\n\t\tthis.y -= coord.y;\r\n\t\tthis.z -= coord.z;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.MultiplyScalar\r\n\t* Description: Multiplies the vector with a scalar.\r\n\t* Parameters:\r\n\t*\tscalar {number} the scalar\r\n\t* Returns:\r\n\t*\t{Coord} this pointer\r\n\t*/\r\n\tJSM.Coord.prototype.MultiplyScalar = function (scalar)\r\n\t{\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Normalize\r\n\t* Description: Normalizes the coordinate vector.\r\n\t* Returns:\r\n\t*\t{Coord} this pointer\r\n\t*/\r\n\tJSM.Coord.prototype.Normalize = function ()\r\n\t{\r\n\t\tvar length = this.Length ();\r\n\t\tif (JSM.IsPositive (length)) {\r\n\t\t\tthis.MultiplyScalar (1.0 / length);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.SetLength\r\n\t* Description: Sets the length of the coordinate vector.\r\n\t* Parameters:\r\n\t*\tlength {number} the length\r\n\t* Returns:\r\n\t*\t{Coord} this pointer\r\n\t*/\r\n\tJSM.Coord.prototype.SetLength = function (length)\r\n\t{\r\n\t\tvar thisLength = this.Length ();\r\n\t\tif (JSM.IsPositive (thisLength)) {\r\n\t\t\tthis.MultiplyScalar (length / thisLength);\r\n\t\t}\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Offset\r\n\t* Description: Offsets the coordinate.\r\n\t* Parameters:\r\n\t*\tdirection {Vector} the direction of the offset\r\n\t*\tdistance {number} the distance of the offset\r\n\t* Returns:\r\n\t*\t{Coord} this pointer\r\n\t*/\r\n\tJSM.Coord.prototype.Offset = function (direction, distance)\r\n\t{\r\n\t\tvar normal = direction.Clone ().Normalize ();\r\n\t\tthis.x += normal.x * distance;\r\n\t\tthis.y += normal.y * distance;\r\n\t\tthis.z += normal.z * distance;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Rotate\r\n\t* Description: Rotates the coordinate.\r\n\t* Parameters:\r\n\t*\taxis {Vector} the axis of the rotation\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Coord} this pointer\r\n\t*/\r\n\r\n\tJSM.Coord.prototype.Rotate = function (axis, angle, origo)\r\n\t{\r\n\t\tvar normal = axis.Clone ().Normalize ();\r\n\r\n\t\tvar u = normal.x;\r\n\t\tvar v = normal.y;\r\n\t\tvar w = normal.z;\r\n\r\n\t\tvar x = this.x - origo.x;\r\n\t\tvar y = this.y - origo.y;\r\n\t\tvar z = this.z - origo.z;\r\n\r\n\t\tvar si = Math.sin (angle);\r\n\t\tvar co = Math.cos (angle);\r\n\t\tthis.x = - u * (- u * x - v * y - w * z) * (1.0 - co) + x * co + (- w * y + v * z) * si;\r\n\t\tthis.y = - v * (- u * x - v * y - w * z) * (1.0 - co) + y * co + (w * x - u * z) * si;\r\n\t\tthis.z = - w * (- u * x - v * y - w * z) * (1.0 - co) + z * co + (- v * x + u * y) * si;\r\n\t\t\r\n\t\tthis.x += origo.x;\r\n\t\tthis.y += origo.y;\r\n\t\tthis.z += origo.z;\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.ToCoord2D\r\n\t* Description: Converts the coordinate to a 2D coordinate.\r\n\t* Parameters:\r\n\t*\tnormal {Vector} the normal vector for conversion\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.Coord.prototype.ToCoord2D = function (normal)\r\n\t{\r\n\t\tvar origo = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tvar zNormal = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\tvar axis = JSM.VectorCross (normal, zNormal);\r\n\t\tvar angle = normal.AngleTo (zNormal);\r\n\t\tvar rotated = this.Clone ().Rotate (axis, angle, origo);\r\n\t\treturn new JSM.Coord2D (rotated.x, rotated.y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.ToString\r\n\t* Description: Converts the coordinate values to string.\r\n\t* Returns:\r\n\t*\t{string} the string representation of the coordinate\r\n\t*/\r\n\tJSM.Coord.prototype.ToString = function ()\r\n\t{\r\n\t\treturn ('(' + this.x + ', ' + this.y + ', ' + this.z + ')');\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Coord.Clone\r\n\t* Description: Clones the coordinate.\r\n\t* Returns:\r\n\t*\t{Coord} a cloned instance\r\n\t*/\r\n\tJSM.Coord.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Coord (this.x, this.y, this.z);\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Vector\r\n\t* Description: Same as Coord.\r\n\t*/\r\n\tJSM.Vector = JSM.Coord;\r\n\r\n\t/**\r\n\t* Function: CoordFromArray\r\n\t* Description: Returns a coordinate from an array of components.\r\n\t* Parameters:\r\n\t*\tarray {number[3]} the array of components\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.CoordFromArray = function (array)\r\n\t{\r\n\t\treturn new JSM.Coord (array[0], array[1], array[2]);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordToArray\r\n\t* Description: Returns array of components from a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\tarray {number[3]} the result\r\n\t*/\r\n\tJSM.CoordToArray = function (coord)\r\n\t{\r\n\t\treturn [coord.x, coord.y, coord.z];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordAdd\r\n\t* Description: Adds two coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord} the first coordinate\r\n\t*\tb {Coord} the second coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.CoordAdd = function (a, b)\r\n\t{\r\n\t\treturn new JSM.Coord (a.x + b.x, a.y + b.y, a.z + b.z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSub\r\n\t* Description: Subs two coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord} the first coordinate\r\n\t*\tb {Coord} the second coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.CoordSub = function (a, b)\r\n\t{\r\n\t\treturn new JSM.Coord (a.x - b.x, a.y - b.y, a.z - b.z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: VectorDot\r\n\t* Description: Calculates the dot product of two vectors.\r\n\t* Parameters:\r\n\t*\ta {Vector} the first vector\r\n\t*\tb {Vector} the second vector\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.VectorDot = function (a, b)\r\n\t{\r\n\t\treturn a.x * b.x + a.y * b.y + a.z * b.z;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: VectorCross\r\n\t* Description: Calculates the cross product of two vectors.\r\n\t* Parameters:\r\n\t*\ta {Vector} the first vector\r\n\t*\tb {Vector} the second vector\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.VectorCross = function (a, b)\r\n\t{\r\n\t\tvar result = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\tresult.x = a.y * b.z - a.z * b.y;\r\n\t\tresult.y = a.z * b.x - a.x * b.z;\r\n\t\tresult.z = a.x * b.y - a.y * b.x;\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/determinant',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: MatrixDeterminant2x2\r\n\t* Description: Calculates the determinant of a 2x2 matrix.\r\n\t* Parameters:\r\n\t*\tm00..m11 {4 numbers} the matrix values\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.MatrixDeterminant2x2 = function (m00, m01,\r\n\t\t\t\t\t\t\t\t\t\tm10, m11)\r\n\t{\r\n\t\treturn m00 * m11 - m01 * m10;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixDeterminant3x3\r\n\t* Description: Calculates the determinant of a 3x3 matrix.\r\n\t* Parameters:\r\n\t*\tm00..m22 {9 numbers} the matrix values\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.MatrixDeterminant3x3 = function (m00, m01, m02,\r\n\t\t\t\t\t\t\t\t\t\tm10, m11, m12,\r\n\t\t\t\t\t\t\t\t\t\tm20, m21, m22)\r\n\t{\r\n\t\tvar subDet1 = JSM.MatrixDeterminant2x2 (m11, m12, m21, m22);\r\n\t\tvar subDet2 = JSM.MatrixDeterminant2x2 (m10, m12, m20, m22);\r\n\t\tvar subDet3 = JSM.MatrixDeterminant2x2 (m10, m11, m20, m21);\r\n\t\treturn m00 * subDet1 - m01 * subDet2 + m02 * subDet3;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixDeterminant4x4\r\n\t* Description: Calculates the determinant of a 4x4 matrix.\r\n\t* Parameters:\r\n\t*\tm00..m33 {16 numbers} the matrix values\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.MatrixDeterminant4x4 = function (m00, m01, m02, m03,\r\n\t\t\t\t\t\t\t\t\t\tm10, m11, m12, m13,\r\n\t\t\t\t\t\t\t\t\t\tm20, m21, m22, m23,\r\n\t\t\t\t\t\t\t\t\t\tm30, m31, m32, m33)\r\n\t{\r\n\t\tvar subDet1 = JSM.MatrixDeterminant3x3 (m11, m12, m13, m21, m22, m23, m31, m32, m33);\r\n\t\tvar subDet2 = JSM.MatrixDeterminant3x3 (m10, m12, m13, m20, m22, m23, m30, m32, m33);\r\n\t\tvar subDet3 = JSM.MatrixDeterminant3x3 (m10, m11, m13, m20, m21, m23, m30, m31, m33);\r\n\t\tvar subDet4 = JSM.MatrixDeterminant3x3 (m10, m11, m12, m20, m21, m22, m30, m31, m32);\r\n\t\treturn subDet1 * m00 - subDet2 * m01 + subDet3 * m02 - subDet4 * m03;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/coordutils',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Enum: Orientation\r\n\t* Description: Orientation of coordinates.\r\n\t* Values:\r\n\t*\t{Invalid} invalid orientation or collinear\r\n\t*\t{CounterClockwise} counter clockwise orientation\r\n\t*\t{Clockwise} clockwise orientation\r\n\t*/\r\n\tJSM.Orientation = {\r\n\t\tInvalid : 0,\r\n\t\tCounterClockwise : 1,\r\n\t\tClockwise : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MidCoord2D\r\n\t* Description: Calculates the coordinate in the middle of two coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord2D} first coordinate\r\n\t*\tb {Coord2D} second coordinate\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.MidCoord2D = function (a, b)\r\n\t{\r\n\t\treturn new JSM.Coord2D ((a.x + b.x) / 2.0, (a.y + b.y) / 2.0);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordOrientation2D\r\n\t* Description: Calculates the turn type of three coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord2D} the first coordinate\r\n\t*\tb {Coord2D} the second coordinate\r\n\t*\tc {Coord2D} the third coordinate\r\n\t* Returns:\r\n\t*\t{Orientation} the result\r\n\t*/\r\n\tJSM.CoordOrientation2D = function (a, b, c)\r\n\t{\r\n\t\tvar m00 = a.x;\r\n\t\tvar m01 = a.y;\r\n\t\tvar m10 = b.x;\r\n\t\tvar m11 = b.y;\r\n\t\tvar m20 = c.x;\r\n\t\tvar m21 = c.y;\r\n\t    \r\n\t\tvar determinant = m00 * m11 + m01 * m20 + m10 * m21 - m11 * m20 - m01 * m10 - m00 * m21;\r\n\t\tif (JSM.IsPositive (determinant)) {\r\n\t\t\treturn JSM.Orientation.CounterClockwise;\r\n\t\t} else if (JSM.IsNegative (determinant)) {\r\n\t\t\treturn JSM.Orientation.Clockwise;\r\n\t\t}\r\n\t\t\r\n\t\treturn JSM.Orientation.Invalid;\t\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSignedDistance2D\r\n\t* Description: Calculates the distance of two coordinates along a direction vector.\r\n\t* Parameters:\r\n\t*\ta {Coord2D} first coordinate\r\n\t*\tb {Coord2D} second coordinate\r\n\t*\tdirection {Vector2D} direction vector\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.CoordSignedDistance2D = function (a, b, direction)\r\n\t{\r\n\t\tvar abDirection = JSM.CoordSub2D (b, a);\r\n\t\tvar distance = a.DistanceTo (b);\r\n\t\t\r\n\t\tvar angle = abDirection.AngleTo (direction);\r\n\t\tif (JSM.IsPositive (angle)) {\r\n\t\t\tdistance = -distance;\r\n\t\t}\r\n\r\n\t\treturn distance;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: PolarToCartesian\r\n\t* Description: Converts a polar coordinate to a cartesian coordinate.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius component\r\n\t*\ttheta {number} the angle component\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.PolarToCartesian = function (radius, theta)\r\n\t{\r\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\r\n\t\tresult.x = radius * Math.cos (theta);\r\n\t\tresult.y = radius * Math.sin (theta);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetArcLengthFromAngle\r\n\t* Description: Calculates arc length from radius and angle.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the circle\r\n\t*\ttheta {number} the angle of rotation\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.GetArcLengthFromAngle = function (radius, theta)\r\n\t{\r\n\t\treturn theta * radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetAngleFromArcLength\r\n\t* Description: Calculates angle from arc length.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the circle\r\n\t*\tarcLength {number} the arc length\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.GetAngleFromArcLength = function (radius, arcLength)\r\n\t{\r\n\t\tif (JSM.IsEqual (radius, 0.0)) {\r\n\t\t\treturn 0.0;\r\n\t\t}\r\n\t\t\r\n\t\treturn arcLength / radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MidCoord\r\n\t* Description: Calculates the coordinate in the middle of two coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord} first coordinate\r\n\t*\tb {Coord} second coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.MidCoord = function (a, b)\r\n\t{\r\n\t\treturn new JSM.Coord ((a.x + b.x) / 2.0, (a.y + b.y) / 2.0, (a.z + b.z) / 2.0);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSignedDistance\r\n\t* Description: Calculates the distance of two coordinates along a direction vector.\r\n\t* Parameters:\r\n\t*\ta {Coord} first coordinate\r\n\t*\tb {Coord} second coordinate\r\n\t*\tdirection {Vector} direction vector\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.CoordSignedDistance = function (a, b, direction)\r\n\t{\r\n\t\tvar abDirection = JSM.CoordSub (b, a);\r\n\t\tvar distance = a.DistanceTo (b);\r\n\t\t\r\n\t\tvar angle = abDirection.AngleTo (direction);\r\n\t\tif (JSM.IsPositive (angle)) {\r\n\t\t\tdistance = -distance;\r\n\t\t}\r\n\r\n\t\treturn distance;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetVectorsFullAngle\r\n\t* Description: Calculates the full angle (0 to pi) of two vectors with the given normal vector.\r\n\t* Parameters:\r\n\t*\ta {Vector} the first vector\r\n\t*\tb {Vector} the second vector\r\n\t*\tnormal {Vector} the normal vector\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.GetVectorsFullAngle = function (a, b, normal)\r\n\t{\r\n\t\tvar angle = a.AngleTo (b);\r\n\t\tvar origo = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\r\n\t\tif (JSM.CoordOrientation (a, origo, b, normal) == JSM.Orientation.Clockwise) {\r\n\t\t\tangle = 2.0 * Math.PI - angle;\r\n\t\t}\r\n\t\t\r\n\t\treturn angle;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordOrientation\r\n\t* Description: Calculates the turn type of three coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord} the first coordinate\r\n\t*\tb {Coord} the second coordinate\r\n\t*\tc {Coord} the third coordinate\r\n\t*\tnormal {Vector} normal vector for calculation\r\n\t* Returns:\r\n\t*\t{Orientation} the result\r\n\t*/\r\n\tJSM.CoordOrientation = function (a, b, c, normal)\r\n\t{\r\n\t\tvar a2 = a.ToCoord2D (normal);\r\n\t\tvar b2 = b.ToCoord2D (normal);\r\n\t\tvar c2 = c.ToCoord2D (normal);\r\n\t\tvar orientation = JSM.CoordOrientation2D (a2, b2, c2);\r\n\r\n\t\tvar zNormal = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\tvar angle = normal.AngleTo (zNormal);\r\n\t\tif (JSM.IsEqual (angle, Math.PI)) {\r\n\t\t\tif (orientation == JSM.Orientation.CounterClockwise) {\r\n\t\t\t\torientation = JSM.Orientation.Clockwise;\r\n\t\t\t} else if (orientation == JSM.Orientation.Clockwise) {\r\n\t\t\t\torientation = JSM.Orientation.CounterClockwise;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn orientation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SphericalToCartesian\r\n\t* Description: Converts a spherical coordinate to a cartesian coordinate.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius component\r\n\t*\ttheta {number} the angle component\r\n\t*\tphi {number} the phi component\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.SphericalToCartesian = function (radius, theta, phi)\r\n\t{\r\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tresult.x = radius * Math.sin (theta) * Math.cos (phi);\r\n\t\tresult.y = radius * Math.sin (theta) * Math.sin (phi);\r\n\t\tresult.z = radius * Math.cos (theta);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CylindricalToCartesian\r\n\t* Description: Converts a cylindrical coordinate to a cartesian coordinate.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius component\r\n\t*\theight {number} the height component\r\n\t*\ttheta {number} the theta component\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.CylindricalToCartesian = function (radius, height, theta)\r\n\t{\r\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tresult.x = radius * Math.cos (theta);\r\n\t\tresult.y = radius * Math.sin (theta);\r\n\t\tresult.z = height;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetArcLength\r\n\t* Description: Calculates arc length between two vectors.\r\n\t* Parameters:\r\n\t*\ta {Vector} the first vector\r\n\t*\tb {Vector} the second vector\r\n\t*\tradius {number} the radius component\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.GetArcLength = function (a, b, radius)\r\n\t{\r\n\t\tvar angle = a.AngleTo (b);\r\n\t\treturn angle * radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetFullArcLength\r\n\t* Description: Calculates arc length between two vectors with the given normal vector.\r\n\t* Parameters:\r\n\t*\ta {Vector} the first vector\r\n\t*\tb {Vector} the second vector\r\n\t*\tradius {number} the radius component\r\n\t*\tnormal {Vector} the normal vector\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.GetFullArcLength = function (a, b, radius, normal)\r\n\t{\r\n\t\tvar angle = JSM.GetVectorsFullAngle (a, b, normal);\r\n\t\treturn angle * radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateCentroid\r\n\t* Description: Calculates center points of the given coordinates.\r\n\t* Parameters:\r\n\t*\tcoords {Coord[*]} the array of coordinates\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.CalculateCentroid = function (coords)\r\n\t{\r\n\t\tvar count = coords.length;\r\n\t\tvar centroid = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tif (count >= 1) {\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcentroid = JSM.CoordAdd (centroid, coords[i]);\r\n\t\t\t}\r\n\t\t\tcentroid.MultiplyScalar (1.0 / count);\r\n\t\t}\r\n\r\n\t\treturn centroid;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateTriangleNormal\r\n\t* Description: Calculates normal vector for the given triangle vertices.\r\n\t* Parameters:\r\n\t*\tv0 {Coord} the first vertex of the triangle\r\n\t*\tv1 {Coord} the second vertex of the triangle\r\n\t*\tv2 {Coord} the third vertex of the triangle\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.CalculateTriangleNormal = function (v0, v1, v2)\r\n\t{\r\n\t\tvar v = JSM.CoordSub (v1, v0);\r\n\t\tvar w = JSM.CoordSub (v2, v0);\r\n\t\t\r\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\tnormal.x = (v.y * w.z - v.z * w.y);\r\n\t\tnormal.y = (v.z * w.x - v.x * w.z);\r\n\t\tnormal.z = (v.x * w.y - v.y * w.x);\r\n\r\n\t\tnormal.Normalize ();\r\n\t\treturn normal;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateNormal\r\n\t* Description: Calculates normal vector for the given coordinates.\r\n\t* Parameters:\r\n\t*\tcoords {Coord[*]} the array of coordinates\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.CalculateNormal = function (coords)\r\n\t{\r\n\t\tvar count = coords.length;\r\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\tif (count >= 3) {\r\n\t\t\tvar i, currentIndex, nextIndex;\r\n\t\t\tvar current, next;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurrentIndex = i % count;\r\n\t\t\t\tnextIndex = (i + 1) % count;\r\n\t\t\r\n\t\t\t\tcurrent = coords[currentIndex];\r\n\t\t\t\tnext = coords[nextIndex];\r\n\t\t\r\n\t\t\t\tnormal.x += (current.y - next.y) * (current.z + next.z);\r\n\t\t\t\tnormal.y += (current.z - next.z) * (current.x + next.x);\r\n\t\t\t\tnormal.z += (current.x - next.x) * (current.y + next.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnormal.Normalize ();\r\n\t\treturn normal;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BarycentricInterpolation\r\n\t* Description: Calculates barycentric interpolation for the given values.\r\n\t* Parameters:\r\n\t*\tvertex0, vertex1, vertex2 {Coord} the vertices of interpolation\r\n\t*\tvalue0, value1, value2 {Coord} the values to interpolate\r\n\t*\tposition {Coord} the position of interpolation\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.BarycentricInterpolation = function (vertex0, vertex1, vertex2, value0, value1, value2, position)\r\n\t{\r\n\t\tfunction GetTriangleArea (a, b, c)\r\n\t\t{\r\n\t\t\tvar s = (a + b + c) / 2.0;\r\n\t\t\tvar areaSquare = s * (s - a) * (s - b) * (s - c);\r\n\t\t\tif (areaSquare < 0.0) {\r\n\t\t\t\treturn 0.0;\r\n\t\t\t}\r\n\t\t\treturn Math.sqrt (areaSquare);\r\n\t\t}\r\n\t\t\r\n\t\tvar edge0 = vertex0.DistanceTo (vertex1);\r\n\t\tvar edge1 = vertex1.DistanceTo (vertex2);\r\n\t\tvar edge2 = vertex2.DistanceTo (vertex0);\r\n\t\t\r\n\t\tvar distance0 = vertex0.DistanceTo (position);\r\n\t\tvar distance1 = vertex1.DistanceTo (position);\r\n\t\tvar distance2 = vertex2.DistanceTo (position);\r\n\t\t\r\n\t\tvar area = GetTriangleArea (edge0, edge1, edge2);\r\n\t\tif (JSM.IsZero (area)) {\r\n\t\t\treturn value0;\r\n\t\t}\r\n\t\t\r\n\t\tvar area0 = GetTriangleArea (edge0, distance0, distance1);\r\n\t\tvar area1 = GetTriangleArea (edge1, distance1, distance2);\r\n\t\tvar area2 = GetTriangleArea (edge2, distance0, distance2);\r\n\t\t\r\n\t\tvar interpolated0 = value0.Clone ().MultiplyScalar (area1);\r\n\t\tvar interpolated1 = value1.Clone ().MultiplyScalar (area2);\r\n\t\tvar interpolated2 = value2.Clone ().MultiplyScalar (area0);\r\n\t\tvar interpolated = JSM.CoordAdd (JSM.CoordAdd (interpolated0, interpolated1), interpolated2);\r\n\t\tinterpolated.MultiplyScalar (1.0 / area);\r\n\t\treturn interpolated;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/matrix',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: MatrixIdentity\r\n\t* Description: Generates an identity matrix.\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixIdentity = function ()\r\n\t{\r\n\t\tvar result = [];\r\n\t\tresult[0] = 1.0;\r\n\t\tresult[1] = 0.0;\r\n\t\tresult[2] = 0.0;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = 0.0;\r\n\t\tresult[5] = 1.0;\r\n\t\tresult[6] = 0.0;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = 0.0;\r\n\t\tresult[9] = 0.0;\r\n\t\tresult[10] = 1.0;\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = 0.0;\r\n\t\tresult[13] = 0.0;\r\n\t\tresult[14] = 0.0;\r\n\t\tresult[15] = 1.0;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixClone\r\n\t* Description: Clones a matrix.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the source matrix\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixClone = function (matrix)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tresult[0] = matrix[0];\r\n\t\tresult[1] = matrix[1];\r\n\t\tresult[2] = matrix[2];\r\n\t\tresult[3] = matrix[3];\r\n\t\tresult[4] = matrix[4];\r\n\t\tresult[5] = matrix[5];\r\n\t\tresult[6] = matrix[6];\r\n\t\tresult[7] = matrix[7];\r\n\t\tresult[8] = matrix[8];\r\n\t\tresult[9] = matrix[9];\r\n\t\tresult[10] = matrix[10];\r\n\t\tresult[11] = matrix[11];\r\n\t\tresult[12] = matrix[12];\r\n\t\tresult[13] = matrix[13];\r\n\t\tresult[14] = matrix[14];\r\n\t\tresult[15] = matrix[15];\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixTranspose\r\n\t* Description: Transposes a matrix.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the source matrix\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixTranspose = function (matrix)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tresult[0] = matrix[0];\r\n\t\tresult[1] = matrix[4];\r\n\t\tresult[2] = matrix[8];\r\n\t\tresult[3] = matrix[12];\r\n\t\tresult[4] = matrix[1];\r\n\t\tresult[5] = matrix[5];\r\n\t\tresult[6] = matrix[9];\r\n\t\tresult[7] = matrix[13];\r\n\t\tresult[8] = matrix[2];\r\n\t\tresult[9] = matrix[6];\r\n\t\tresult[10] = matrix[10];\r\n\t\tresult[11] = matrix[14];\r\n\t\tresult[12] = matrix[3];\r\n\t\tresult[13] = matrix[7];\r\n\t\tresult[14] = matrix[11];\r\n\t\tresult[15] = matrix[15];\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixVectorMultiply\r\n\t* Description: Multiplies a matrix with a vector.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the matrix\r\n\t*\tvector {number[4]} the vector\r\n\t* Returns:\r\n\t*\t{number[4]} the result vector\r\n\t*/\r\n\tJSM.MatrixVectorMultiply = function (matrix, vector)\r\n\t{\r\n\t\tvar a00 = vector[0];\r\n\t\tvar a01 = vector[1];\r\n\t\tvar a02 = vector[2];\r\n\t\tvar a03 = vector[3];\r\n\t\tvar b00 = matrix[0];\r\n\t\tvar b01 = matrix[1];\r\n\t\tvar b02 = matrix[2];\r\n\t\tvar b03 = matrix[3];\r\n\t\tvar b10 = matrix[4];\r\n\t\tvar b11 = matrix[5];\r\n\t\tvar b12 = matrix[6];\r\n\t\tvar b13 = matrix[7];\r\n\t\tvar b20 = matrix[8];\r\n\t\tvar b21 = matrix[9];\r\n\t\tvar b22 = matrix[10];\r\n\t\tvar b23 = matrix[11];\r\n\t\tvar b30 = matrix[12];\r\n\t\tvar b31 = matrix[13];\r\n\t\tvar b32 = matrix[14];\r\n\t\tvar b33 = matrix[15];\r\n\r\n\t\tvar result = [];\r\n\t\tresult[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n\t\tresult[1] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n\t\tresult[2] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n\t\tresult[3] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixMultiply\r\n\t* Description: Multiplies a two matrices.\r\n\t* Parameters:\r\n\t*\tmatrix1 {number[16]} first matrix\r\n\t*\tmatrix2 {number[16]} second matrix\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixMultiply = function (matrix1, matrix2)\r\n\t{\r\n\t\tvar a00 = matrix1[0];\r\n\t\tvar a01 = matrix1[1];\r\n\t\tvar a02 = matrix1[2];\r\n\t\tvar a03 = matrix1[3];\r\n\t\tvar a10 = matrix1[4];\r\n\t\tvar a11 = matrix1[5];\r\n\t\tvar a12 = matrix1[6];\r\n\t\tvar a13 = matrix1[7];\r\n\t\tvar a20 = matrix1[8];\r\n\t\tvar a21 = matrix1[9];\r\n\t\tvar a22 = matrix1[10];\r\n\t\tvar a23 = matrix1[11];\r\n\t\tvar a30 = matrix1[12];\r\n\t\tvar a31 = matrix1[13];\r\n\t\tvar a32 = matrix1[14];\r\n\t\tvar a33 = matrix1[15];\r\n\t\t\r\n\t\tvar b00 = matrix2[0];\r\n\t\tvar b01 = matrix2[1];\r\n\t\tvar b02 = matrix2[2];\r\n\t\tvar b03 = matrix2[3];\r\n\t\tvar b10 = matrix2[4];\r\n\t\tvar b11 = matrix2[5];\r\n\t\tvar b12 = matrix2[6];\r\n\t\tvar b13 = matrix2[7];\r\n\t\tvar b20 = matrix2[8];\r\n\t\tvar b21 = matrix2[9];\r\n\t\tvar b22 = matrix2[10];\r\n\t\tvar b23 = matrix2[11];\r\n\t\tvar b30 = matrix2[12];\r\n\t\tvar b31 = matrix2[13];\r\n\t\tvar b32 = matrix2[14];\r\n\t\tvar b33 = matrix2[15];\r\n\t\t\t\r\n\t\tvar result = [];\r\n\t\tresult[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n\t\tresult[1] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n\t\tresult[2] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n\t\tresult[3] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n\t\tresult[4] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\r\n\t\tresult[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\tresult[6] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\tresult[7] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\r\n\t\tresult[8] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\r\n\t\tresult[9] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\tresult[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\tresult[11] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\r\n\t\tresult[12] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\r\n\t\tresult[13] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\tresult[14] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\tresult[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixDeterminant\r\n\t* Description: Calculates the determinant of a matrix.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the source matrix\r\n\t* Returns:\r\n\t*\t{number} the determinant\r\n\t*/\r\n\tJSM.MatrixDeterminant = function (matrix)\r\n\t{\r\n\t\tvar a00 = matrix[0];\r\n\t\tvar a01 = matrix[1];\r\n\t\tvar a02 = matrix[2];\r\n\t\tvar a03 = matrix[3];\r\n\t\tvar a10 = matrix[4];\r\n\t\tvar a11 = matrix[5];\r\n\t\tvar a12 = matrix[6];\r\n\t\tvar a13 = matrix[7];\r\n\t\tvar a20 = matrix[8];\r\n\t\tvar a21 = matrix[9];\r\n\t\tvar a22 = matrix[10];\r\n\t\tvar a23 = matrix[11];\r\n\t\tvar a30 = matrix[12];\r\n\t\tvar a31 = matrix[13];\r\n\t\tvar a32 = matrix[14];\r\n\t\tvar a33 = matrix[15];\r\n\r\n\t\tvar b00 = a00 * a11 - a01 * a10;\r\n\t\tvar b01 = a00 * a12 - a02 * a10;\r\n\t\tvar b02 = a00 * a13 - a03 * a10;\r\n\t\tvar b03 = a01 * a12 - a02 * a11;\r\n\t\tvar b04 = a01 * a13 - a03 * a11;\r\n\t\tvar b05 = a02 * a13 - a03 * a12;\r\n\t\tvar b06 = a20 * a31 - a21 * a30;\r\n\t\tvar b07 = a20 * a32 - a22 * a30;\r\n\t\tvar b08 = a20 * a33 - a23 * a30;\r\n\t\tvar b09 = a21 * a32 - a22 * a31;\r\n\t\tvar b10 = a21 * a33 - a23 * a31;\r\n\t\tvar b11 = a22 * a33 - a23 * a32;\r\n\t\t\r\n\t\tvar determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\t\treturn determinant;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixInvert\r\n\t* Description: Inverts a matrix.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the source matrix\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixInvert = function (matrix)\r\n\t{\r\n\t\tvar a00 = matrix[0];\r\n\t\tvar a01 = matrix[1];\r\n\t\tvar a02 = matrix[2];\r\n\t\tvar a03 = matrix[3];\r\n\t\tvar a10 = matrix[4];\r\n\t\tvar a11 = matrix[5];\r\n\t\tvar a12 = matrix[6];\r\n\t\tvar a13 = matrix[7];\r\n\t\tvar a20 = matrix[8];\r\n\t\tvar a21 = matrix[9];\r\n\t\tvar a22 = matrix[10];\r\n\t\tvar a23 = matrix[11];\r\n\t\tvar a30 = matrix[12];\r\n\t\tvar a31 = matrix[13];\r\n\t\tvar a32 = matrix[14];\r\n\t\tvar a33 = matrix[15];\r\n\r\n\t\tvar b00 = a00 * a11 - a01 * a10;\r\n\t\tvar b01 = a00 * a12 - a02 * a10;\r\n\t\tvar b02 = a00 * a13 - a03 * a10;\r\n\t\tvar b03 = a01 * a12 - a02 * a11;\r\n\t\tvar b04 = a01 * a13 - a03 * a11;\r\n\t\tvar b05 = a02 * a13 - a03 * a12;\r\n\t\tvar b06 = a20 * a31 - a21 * a30;\r\n\t\tvar b07 = a20 * a32 - a22 * a30;\r\n\t\tvar b08 = a20 * a33 - a23 * a30;\r\n\t\tvar b09 = a21 * a32 - a22 * a31;\r\n\t\tvar b10 = a21 * a33 - a23 * a31;\r\n\t\tvar b11 = a22 * a33 - a23 * a32;\r\n\t\t\r\n\t\tvar determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\t\tif (JSM.IsZero (determinant)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar result = [];\r\n\t\t\r\n\t\tresult[0] = (a11 * b11 - a12 * b10 + a13 * b09) / determinant;\r\n\t\tresult[1] = (a02 * b10 - a01 * b11 - a03 * b09) / determinant;\r\n\t\tresult[2] = (a31 * b05 - a32 * b04 + a33 * b03) / determinant;\r\n\t\tresult[3] = (a22 * b04 - a21 * b05 - a23 * b03) / determinant;\r\n\t\tresult[4] = (a12 * b08 - a10 * b11 - a13 * b07) / determinant;\r\n\t\tresult[5] = (a00 * b11 - a02 * b08 + a03 * b07) / determinant;\r\n\t\tresult[6] = (a32 * b02 - a30 * b05 - a33 * b01) / determinant;\r\n\t\tresult[7] = (a20 * b05 - a22 * b02 + a23 * b01) / determinant;\r\n\t\tresult[8] = (a10 * b10 - a11 * b08 + a13 * b06) / determinant;\r\n\t\tresult[9] = (a01 * b08 - a00 * b10 - a03 * b06) / determinant;\r\n\t\tresult[10] = (a30 * b04 - a31 * b02 + a33 * b00) / determinant;\r\n\t\tresult[11] = (a21 * b02 - a20 * b04 - a23 * b00) / determinant;\r\n\t\tresult[12] = (a11 * b07 - a10 * b09 - a12 * b06) / determinant;\r\n\t\tresult[13] = (a00 * b09 - a01 * b07 + a02 * b06) / determinant;\r\n\t\tresult[14] = (a31 * b01 - a30 * b03 - a32 * b00) / determinant;\r\n\t\tresult[15] = (a20 * b03 - a21 * b01 + a22 * b00) / determinant;\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixTranslation\r\n\t* Description: Creates a translation matrix.\r\n\t* Parameters:\r\n\t*\tx {number} x offset of the transformation\r\n\t*\ty {number} y offset of the transformation\r\n\t*\tz {number} z offset of the transformation\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixTranslation = function (x, y, z)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tresult[0] = 1.0;\r\n\t\tresult[1] = 0.0;\r\n\t\tresult[2] = 0.0;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = 0.0;\r\n\t\tresult[5] = 1.0;\r\n\t\tresult[6] = 0.0;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = 0.0;\r\n\t\tresult[9] = 0.0;\r\n\t\tresult[10] = 1.0;\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = x;\r\n\t\tresult[13] = y;\r\n\t\tresult[14] = z;\r\n\t\tresult[15] = 1.0;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixRotation\r\n\t* Description: Creates a rotation matrix around the given axis.\r\n\t* Parameters:\r\n\t*\taxis {Vector} the axis of the rotation\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixRotation = function (axis, angle, origo)\r\n\t{\r\n\t\tvar normal = axis.Clone ().Normalize ();\r\n\r\n\t\tvar u = normal.x;\r\n\t\tvar v = normal.y;\r\n\t\tvar w = normal.z;\r\n\r\n\t\tvar u2 = u * u;\r\n\t\tvar v2 = v * v;\r\n\t\tvar w2 = w * w;\r\n\r\n\t\tvar si = Math.sin (angle);\r\n\t\tvar co = Math.cos (angle);\r\n\t\t\r\n\t\tvar result = [];\r\n\t\tif (origo === undefined || origo === null) {\r\n\t\t\tresult[0] = u2 + (v2 + w2) * co;\r\n\t\t\tresult[1] = u * v * (1.0 - co) + w * si;\r\n\t\t\tresult[2] = u * w * (1.0 - co) - v * si;\r\n\t\t\tresult[3] = 0.0;\r\n\t\t\tresult[4] = u * v * (1.0 - co) - w * si;\r\n\t\t\tresult[5] = v2 + (u2 + w2) * co;\r\n\t\t\tresult[6] = v * w * (1.0 - co) + u * si;\r\n\t\t\tresult[7] = 0.0;\r\n\t\t\tresult[8] = u * w * (1.0 - co) + v * si;\r\n\t\t\tresult[9] = v * w * (1.0 - co) - u * si;\r\n\t\t\tresult[10] = w2 + (u2 + v2) * co;\r\n\t\t\tresult[11] = 0.0;\r\n\t\t\tresult[12] = 0.0;\r\n\t\t\tresult[13] = 0.0;\r\n\t\t\tresult[14] = 0.0;\r\n\t\t\tresult[15] = 1.0;\r\n\t\t} else {\r\n\t\t\tvar a = origo.x;\r\n\t\t\tvar b = origo.y;\r\n\t\t\tvar c = origo.z;\r\n\t\t\r\n\t\t\tresult[0] = u2 + (v2 + w2) * co;\r\n\t\t\tresult[1] = u * v * (1.0 - co) + w * si;\r\n\t\t\tresult[2] = u * w * (1.0 - co) - v * si;\r\n\t\t\tresult[3] = 0.0;\r\n\t\t\tresult[4] = u * v * (1.0 - co) - w * si;\r\n\t\t\tresult[5] = v2 + (u2 + w2) * co;\r\n\t\t\tresult[6] = v * w * (1.0 - co) + u * si;\r\n\t\t\tresult[7] = 0.0;\r\n\t\t\tresult[8] = u * w * (1.0 - co) + v * si;\r\n\t\t\tresult[9] = v * w * (1.0 - co) - u * si;\r\n\t\t\tresult[10] = w2 + (u2 + v2) * co;\r\n\t\t\tresult[11] = 0.0;\r\n\t\t\tresult[12] = (a * (v2 + w2) - u * (b * v + c * w)) * (1.0 - co) + (b * w - c * v) * si;\r\n\t\t\tresult[13] = (b * (u2 + w2) - v * (a * u + c * w)) * (1.0 - co) + (c * u - a * w) * si;\r\n\t\t\tresult[14] = (c * (u2 + v2) - w * (a * u + b * v)) * (1.0 - co) + (a * v - b * u) * si;\r\n\t\t\tresult[15] = 1.0;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixRotationQuaternion\r\n\t* Description: Creates a rotation matrix from a given quaternion.\r\n\t* Parameters:\r\n\t*\tquaternion {number[4]} the quaternion\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixRotationQuaternion = function (quaternion)\r\n\t{\r\n\t\tvar x = quaternion[0];\r\n\t\tvar y = quaternion[1];\r\n\t\tvar z = quaternion[2];\r\n\t\tvar w = quaternion[3];\r\n\r\n\t\tvar x2 = x + x;\r\n\t\tvar y2 = y + y;\r\n\t\tvar z2 = z + z;\r\n\r\n\t\tvar xx = x * x2;\r\n\t\tvar xy = x * y2;\r\n\t\tvar xz = x * z2;\r\n\t\tvar yy = y * y2;\r\n\t\tvar yz = y * z2;\r\n\t\tvar zz = z * z2;\r\n\t\tvar wx = w * x2;\r\n\t\tvar wy = w * y2;\r\n\t\tvar wz = w * z2;\r\n\r\n\t\tvar result = [];\r\n\t\tresult[0] = 1.0 - (yy + zz);\r\n\t\tresult[1] = xy + wz;\r\n\t\tresult[2] = xz - wy;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = xy - wz;\r\n\t\tresult[5] = 1.0 - (xx + zz);\r\n\t\tresult[6] = yz + wx;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = xz + wy;\r\n\t\tresult[9] = yz - wx;\r\n\t\tresult[10] = 1.0 - (xx + yy);\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = 0.0;\r\n\t\tresult[13] = 0.0;\r\n\t\tresult[14] = 0.0;\r\n\t\tresult[15] = 1;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixRotationX\r\n\t* Description: Creates a rotation matrix around the x axis.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of rotation\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixRotationX = function (angle)\r\n\t{\r\n\t\tvar si = Math.sin (angle);\r\n\t\tvar co = Math.cos (angle);\r\n\r\n\t\tvar result = [];\r\n\t\tresult[0] = 1.0;\r\n\t\tresult[1] = 0.0;\r\n\t\tresult[2] = 0.0;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = 0.0;\r\n\t\tresult[5] = co;\r\n\t\tresult[6] = si;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = 0.0;\r\n\t\tresult[9] = -si;\r\n\t\tresult[10] = co;\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = 0.0;\r\n\t\tresult[13] = 0.0;\r\n\t\tresult[14] = 0.0;\r\n\t\tresult[15] = 1.0;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixRotationY\r\n\t* Description: Creates a rotation matrix around the y axis.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of rotation\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixRotationY = function (angle)\r\n\t{\r\n\t\tvar si = Math.sin (angle);\r\n\t\tvar co = Math.cos (angle);\r\n\r\n\t\tvar result = [];\r\n\t\tresult[0] = co;\r\n\t\tresult[1] = 0.0;\r\n\t\tresult[2] = -si;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = 0.0;\r\n\t\tresult[5] = 1.0;\r\n\t\tresult[6] = 0.0;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = si;\r\n\t\tresult[9] = 0.0;\r\n\t\tresult[10] = co;\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = 0.0;\r\n\t\tresult[13] = 0.0;\r\n\t\tresult[14] = 0.0;\r\n\t\tresult[15] = 1.0;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixRotationZ\r\n\t* Description: Creates a rotation matrix around the z axis.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of rotation\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixRotationZ = function (angle)\r\n\t{\r\n\t\tvar si = Math.sin (angle);\r\n\t\tvar co = Math.cos (angle);\r\n\r\n\t\tvar result = [];\r\n\t\tresult[0] = co;\r\n\t\tresult[1] = si;\r\n\t\tresult[2] = 0.0;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = -si;\r\n\t\tresult[5] = co;\r\n\t\tresult[6] = 0.0;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = 0.0;\r\n\t\tresult[9] = 0.0;\r\n\t\tresult[10] = 1.0;\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = 0.0;\r\n\t\tresult[13] = 0.0;\r\n\t\tresult[14] = 0.0;\r\n\t\tresult[15] = 1.0;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ApplyTransformation\r\n\t* Description: Applies a matrix transformation to a coordinate.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the matrix\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.ApplyTransformation = function (matrix, coord)\r\n\t{\r\n\t\tvar vector = [];\r\n\t\tvector[0] = coord.x;\r\n\t\tvector[1] = coord.y;\r\n\t\tvector[2] = coord.z;\r\n\t\tvector[3] = 1.0;\r\n\t\t\r\n\t\tvar resultVector = JSM.MatrixVectorMultiply (matrix, vector);\r\n\t\tvar result = new JSM.Coord (resultVector[0], resultVector[1], resultVector[2]);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ApplyRotation\r\n\t* Description: Applies the rotation part of a matrix transformation to a coordinate.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the matrix\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.ApplyRotation = function (matrix, coord)\r\n\t{\r\n\t\tvar vector = [];\r\n\t\tvector[0] = coord.x;\r\n\t\tvector[1] = coord.y;\r\n\t\tvector[2] = coord.z;\r\n\t\tvector[3] = 0.0;\r\n\t\t\r\n\t\tvar resultVector = JSM.MatrixVectorMultiply (matrix, vector);\r\n\t\tvar result = new JSM.Coord (resultVector[0], resultVector[1], resultVector[2]);\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/coordsystem',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: CoordSystem\r\n\t* Description: Represents coordinate system.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo\r\n\t*\te1 {Vector} first direction vector\r\n\t*\te2 {Vector} second direction vector\r\n\t*\te3 {Vector} third direction vector\r\n\t*/\r\n\tJSM.CoordSystem = function (origo, e1, e2, e3)\r\n\t{\r\n\t\tthis.origo = origo;\r\n\t\tthis.e1 = e1;\r\n\t\tthis.e2 = e2;\r\n\t\tthis.e3 = e3;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSystem.Set\r\n\t* Description: Sets the coordinate system.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo\r\n\t*\te1 {Vector} first direction vector\r\n\t*\te2 {Vector} second direction vector\r\n\t*\te3 {Vector} third direction vector\r\n\t*/\r\n\tJSM.CoordSystem.prototype.Set = function (origo, e1, e2, e3)\r\n\t{\r\n\t\tthis.origo = origo;\r\n\t\tthis.e1 = e1;\r\n\t\tthis.e2 = e2;\r\n\t\tthis.e3 = e3;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSystem.CoordSystemToDirectionVectors\r\n\t* Description: Converts coordinate system vectors to origo relative direction vectors.\r\n\t* Returns:\r\n\t*\t{CoordSystem} this pointer\r\n\t*/\r\n\tJSM.CoordSystem.prototype.ToDirectionVectors = function ()\r\n\t{\r\n\t\tthis.e1 = JSM.CoordSub (this.e1, this.origo);\r\n\t\tthis.e2 = JSM.CoordSub (this.e2, this.origo);\r\n\t\tthis.e3 = JSM.CoordSub (this.e3, this.origo);\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSystem.CoordSystemToAbsoluteCoords\r\n\t* Description: Converts the coordinate system vectors to absolute coordinates.\r\n\t* Returns:\r\n\t*\t{CoordSystem} this pointer\r\n\t*/\r\n\tJSM.CoordSystem.prototype.ToAbsoluteCoords = function ()\r\n\t{\r\n\t\tthis.e1 = JSM.CoordAdd (this.e1, this.origo);\r\n\t\tthis.e2 = JSM.CoordAdd (this.e2, this.origo);\r\n\t\tthis.e3 = JSM.CoordAdd (this.e3, this.origo);\r\n\t\treturn this;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordSystem.Clone\r\n\t* Description: Clones the coordinate system.\r\n\t* Returns:\r\n\t*\t{CoordSystem} a cloned instance\r\n\t*/\r\n\tJSM.CoordSystem.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.CoordSystem (this.origo.Clone (), this.e1.Clone (), this.e2.Clone (), this.e3.Clone ());\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/sector',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Enum: CoordSectorPosition2D\r\n\t* Description: Position of a coordinate and a sector.\r\n\t* Values:\r\n\t*\t{CoordInsideOfSector} coordinate lies inside of sector\r\n\t*\t{CoordOnSectorEndCoord} coordinate lies at the end of the sector\r\n\t*\t{CoordOutsideOfSector} coordinate lies outside of the sector\r\n\t*/\r\n\tJSM.CoordSectorPosition2D = {\r\n\t\tCoordInsideOfSector : 0,\r\n\t\tCoordOnSectorEndCoord : 1,\r\n\t\tCoordOutsideOfSector : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: SectorSectorPosition2D\r\n\t* Description: Position of two sectors.\r\n\t* Values:\r\n\t*\t{SectorsDontIntersect} sectors do not intersect\r\n\t*\t{SectorsIntersectCoincident} sectors intersect coincident\r\n\t*\t{SectorsIntersectEndPoint} sectors intersect at end point\r\n\t*\t{SectorsIntersectOnePoint} sectors intersect one point\r\n\t*/\r\n\tJSM.SectorSectorPosition2D = {\r\n\t\tSectorsDontIntersect : 0,\r\n\t\tSectorsIntersectCoincident : 1,\r\n\t\tSectorsIntersectEndPoint : 2,\r\n\t\tSectorsIntersectOnePoint : 3\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: CoordSectorPosition\r\n\t* Description: Position of a coordinate and a sector.\r\n\t* Values:\r\n\t*\t{CoordInsideOfSector} coordinate lies inside of sector\r\n\t*\t{CoordOnSectorEndCoord} coordinate lies at the end of the sector\r\n\t*\t{CoordOutsideOfSector} coordinate lies outside of the sector\r\n\t*/\r\n\tJSM.CoordSectorPosition = {\r\n\t\tCoordInsideOfSector : 0,\r\n\t\tCoordOnSectorEndCoord : 1,\r\n\t\tCoordOutsideOfSector : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Sector2D\r\n\t* Description: Represents a 2D sector.\r\n\t* Parameters:\r\n\t*\tbeg {Coord2D} the beginning coordinate\r\n\t*\tend {Coord2D} the ending coordinate\r\n\t*/\r\n\tJSM.Sector2D = function (beg, end)\r\n\t{\r\n\t\tthis.beg = beg;\r\n\t\tthis.end = end;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector2D.Set\r\n\t* Description: Sets the sector.\r\n\t* Parameters:\r\n\t*\tbeg {Coord2D} the beginning coordinate\r\n\t*\tend {Coord2D} the ending coordinate\r\n\t*/\r\n\tJSM.Sector2D.prototype.Set = function (beg, end)\r\n\t{\r\n\t\tthis.beg = beg;\r\n\t\tthis.end = end;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector.GetLength\r\n\t* Description: Returns the length of the sector.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Sector2D.prototype.GetLength = function ()\r\n\t{\r\n\t\treturn this.beg.DistanceTo (this.end);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector2D.CoordPosition\r\n\t* Description: Calculates the position of the sector and the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{CoordSectorPosition2D} the result\r\n\t*/\r\n\tJSM.Sector2D.prototype.CoordPosition = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar x1 = this.beg.x;\r\n\t\tvar y1 = this.beg.y;\r\n\t\tvar x2 = this.end.x;\r\n\t\tvar y2 = this.end.y;\r\n\r\n\t\tvar length = this.GetLength ();\r\n\t\tif (JSM.IsZero (length)) {\r\n\t\t\tif (coord.IsEqual (this.beg)) {\r\n\t\t\t\treturn JSM.CoordSectorPosition2D.CoordOnSectorEndCoord;\r\n\t\t\t}\r\n\r\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOutsideOfSector;\r\n\t\t}\r\n\r\n\t\tvar u = ((x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)) / (length * length);\r\n\t\tif (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {\r\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOutsideOfSector;\r\n\t\t}\r\n\r\n\t\tvar ux = x1 + u * (x2 - x1);\r\n\t\tvar uy = y1 + u * (y2 - y1);\r\n\t\tif (!JSM.IsEqual (ux, x) || !JSM.IsEqual (uy, y)) {\r\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOutsideOfSector;\r\n\t\t}\r\n\r\n\t\tif (JSM.IsEqual (u, 0.0) || JSM.IsEqual (u, 1.0)) {\r\n\t\t\treturn JSM.CoordSectorPosition2D.CoordOnSectorEndCoord;\r\n\t\t}\r\n\r\n\t\treturn JSM.CoordSectorPosition2D.CoordInsideOfSector;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector2D.SectorPosition\r\n\t* Description: Calculates the position of the sector and the given sector.\r\n\t* Parameters:\r\n\t*\tsector {Sector2D} the sector\r\n\t*\tintersection {Coord2D} (out) the intersection point if it exists\r\n\t* Returns:\r\n\t*\t{SectorSectorPosition2D} the result\r\n\t*/\r\n\tJSM.Sector2D.prototype.SectorPosition = function (sector, intersection)\r\n\t{\r\n\t\tfunction IsOnSegment (beg, end, coord)\r\n\t\t{\r\n\t\t\tif (!coord.IsEqual (beg) && !coord.IsEqual (end) &&\r\n\t\t\t\tJSM.IsLowerOrEqual (coord.x, Math.max (beg.x, end.x)) &&\r\n\t\t\t\tJSM.IsLowerOrEqual (coord.y, Math.max (beg.y, end.y)) &&\r\n\t\t\t\tJSM.IsGreaterOrEqual (coord.x, Math.min (beg.x, end.x)) &&\r\n\t\t\t\tJSM.IsGreaterOrEqual (coord.y, Math.min (beg.y, end.y)))\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar calcIntersection = (intersection !== undefined && intersection !== null);\r\n\t\t\r\n\t\tvar aBeg = this.beg;\r\n\t\tvar aEnd = this.end;\r\n\t\tvar bBeg = sector.beg;\r\n\t\tvar bEnd = sector.end;\r\n\t\t\r\n\t\tvar equalBeg = aBeg.IsEqual (bBeg) || aBeg.IsEqual (bEnd);\r\n\t\tvar equalEnd = aEnd.IsEqual (bBeg) || aEnd.IsEqual (bEnd);\r\n\t\tif (equalBeg && equalEnd) {\r\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectCoincident;\r\n\t\t}\r\n\r\n\t\tvar x1 = aBeg.x;\r\n\t\tvar y1 = aBeg.y;\r\n\t\tvar x2 = aEnd.x;\r\n\t\tvar y2 = aEnd.y;\r\n\t\tvar x3 = bBeg.x;\r\n\t\tvar y3 = bBeg.y;\r\n\t\tvar x4 = bEnd.x;\r\n\t\tvar y4 = bEnd.y;\r\n\r\n\t\tvar numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\r\n\t\tvar numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\r\n\t\tvar denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n\t\tif (JSM.IsZero (denominator)) {\r\n\t\t\tif (JSM.IsZero (numeratorA) && JSM.IsZero (numeratorB)) {\r\n\t\t\t\tif (IsOnSegment (aBeg, aEnd, bBeg) ||\r\n\t\t\t\t\tIsOnSegment (aBeg, aEnd, bEnd) ||\r\n\t\t\t\t\tIsOnSegment (bBeg, bEnd, aBeg) ||\r\n\t\t\t\t\tIsOnSegment (bBeg, bEnd, aEnd))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectCoincident;\r\n\t\t\t\t} else if (equalBeg) {\r\n\t\t\t\t\tif (calcIntersection) {\r\n\t\t\t\t\t\tintersection.x = aBeg.x;\r\n\t\t\t\t\t\tintersection.y = aBeg.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\r\n\t\t\t\t} else if (equalEnd) {\r\n\t\t\t\t\tif (calcIntersection) {\r\n\t\t\t\t\t\tintersection.x = aEnd.x;\r\n\t\t\t\t\t\tintersection.y = aEnd.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsDontIntersect;\r\n\t\t}\r\n\t\t\r\n\t\tvar distA = numeratorA / denominator;\r\n\t\tvar distB = numeratorB / denominator;\r\n\t\tif (JSM.IsLower (distA, 0.0) || JSM.IsGreater (distA, 1.0) ||\r\n\t\t\tJSM.IsLower (distB, 0.0) || JSM.IsGreater (distB, 1.0))\r\n\t\t{\r\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsDontIntersect;\r\n\t\t}\r\n\r\n\t\tif (equalBeg) {\r\n\t\t\tif (calcIntersection) {\r\n\t\t\t\tintersection.x = aBeg.x;\r\n\t\t\t\tintersection.y = aBeg.y;\r\n\t\t\t}\r\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\r\n\t\t} else if (equalEnd) {\r\n\t\t\tif (calcIntersection) {\r\n\t\t\t\tintersection.x = aEnd.x;\r\n\t\t\t\tintersection.y = aEnd.y;\r\n\t\t\t}\r\n\t\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;\r\n\t\t}\r\n\t\t\r\n\t\tif (calcIntersection) {\r\n\t\t\tintersection.x = x1 + distA * (x2 - x1);\r\n\t\t\tintersection.y = y1 + distA * (y2 - y1);\r\n\t\t}\r\n\t\treturn JSM.SectorSectorPosition2D.SectorsIntersectOnePoint;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector2D.ProjectCoord\r\n\t* Description: Calculates the projected coordinate of the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{Coord2D} the projected coordinate\r\n\t*/\r\n\tJSM.Sector2D.prototype.ProjectCoord = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\r\n\t\tvar beg = this.beg;\r\n\t\tvar end = this.end;\r\n\t\tvar x1 = beg.x;\r\n\t\tvar y1 = beg.y;\r\n\t\tvar x2 = end.x;\r\n\t\tvar y2 = end.y;\r\n\r\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn beg.Clone ();\r\n\t\t}\r\n\r\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1)) / denom;\r\n\t\tif (JSM.IsLower (u, 0.0)) {\r\n\t\t\treturn beg.Clone ();\r\n\t\t} else if (JSM.IsGreater (u, 1.0)) {\r\n\t\t\treturn end.Clone ();\r\n\t\t}\r\n\t\t\r\n\t\tvar dir = JSM.CoordSub2D (end, beg).MultiplyScalar (u);\r\n\t\tvar result = JSM.CoordAdd2D (beg, dir);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector2D.Clone\r\n\t* Description: Clones the sector.\r\n\t* Returns:\r\n\t*\t{Sector2D} a cloned instance\r\n\t*/\r\n\tJSM.Sector2D.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Sector2D (this.beg.Clone (), this.end.Clone ());\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Sector\r\n\t* Description: Represents a 3D sector.\r\n\t* Parameters:\r\n\t*\tbeg {Coord} the beginning coordinate\r\n\t*\tend {Coord} the ending coordinate\r\n\t*/\r\n\tJSM.Sector = function (beg, end)\r\n\t{\r\n\t\tthis.beg = beg;\r\n\t\tthis.end = end;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector.Set\r\n\t* Description: Sets the sector.\r\n\t* Parameters:\r\n\t*\tbeg {Coord} the beginning coordinate\r\n\t*\tend {Coord} the ending coordinate\r\n\t*/\r\n\tJSM.Sector.prototype.Set = function (beg, end)\r\n\t{\r\n\t\tthis.beg = beg;\r\n\t\tthis.end = end;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector.GetLength\r\n\t* Description: Returns the length of the sector.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Sector.prototype.GetLength = function ()\r\n\t{\r\n\t\treturn this.beg.DistanceTo (this.end);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector.CoordPosition\r\n\t* Description: Calculates the position of the sector and the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{CoordSectorPosition} the result\r\n\t*/\r\n\tJSM.Sector.prototype.CoordPosition = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar z = coord.z;\r\n\r\n\t\tvar a = this.beg;\r\n\t\tvar b = JSM.CoordSub (this.end, this.beg);\r\n\t\t\r\n\t\tvar x1 = a.x;\r\n\t\tvar y1 = a.y;\r\n\t\tvar z1 = a.z;\r\n\t\tvar x2 = a.x + b.x;\r\n\t\tvar y2 = a.y + b.y;\r\n\t\tvar z2 = a.z + b.z;\r\n\r\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\tif (a.IsEqual (coord)) {\r\n\t\t\t\treturn JSM.CoordSectorPosition.CoordOnSectorEndCoord;\r\n\t\t\t}\r\n\t\t\treturn JSM.CoordSectorPosition.CoordOutsideOfSector;\r\n\t\t}\r\n\r\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;\r\n\t\tvar bu = b.Clone ().MultiplyScalar (u);\r\n\t\tvar c = JSM.CoordAdd (a, bu);\r\n\t\tvar distance = coord.DistanceTo (c);\r\n\t\tif (JSM.IsZero (distance)) {\r\n\t\t\tif (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {\r\n\t\t\t\treturn JSM.CoordSectorPosition.CoordOutsideOfSector;\r\n\t\t\t} else if (JSM.IsEqual (u, 0.0) || JSM.IsEqual (u, 1.0)) {\r\n\t\t\t\treturn JSM.CoordSectorPosition.CoordOnSectorEndCoord;\r\n\t\t\t}\r\n\t\t\treturn JSM.CoordSectorPosition.CoordInsideOfSector;\r\n\t\t}\r\n\r\n\t\treturn JSM.CoordSectorPosition.CoordOutsideOfSector;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sector.Clone\r\n\t* Description: Clones the sector.\r\n\t* Returns:\r\n\t*\t{Sector} a cloned instance\r\n\t*/\r\n\tJSM.Sector.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Sector (this.beg.Clone (), this.end.Clone ());\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetSectorSegmentation2D\r\n\t* Description: Returns the segmented coordinates of a sector.\r\n\t* Parameters:\r\n\t*\tsector {Sector2D} the sector\r\n\t*\tsegmentation {integer} the segmentation\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} the result coordinates\r\n\t*/\r\n\tJSM.GetSectorSegmentation2D = function (sector, segmentation)\r\n\t{\r\n\t\tvar direction = JSM.CoordSub2D (sector.end, sector.beg);\r\n\t\tvar length = sector.beg.DistanceTo (sector.end);\r\n\t\tvar step = length / segmentation;\r\n\t\tvar distance = 0.0;\r\n\r\n\t\tvar result = [];\r\n\t\tvar i, offseted;\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\toffseted = sector.beg.Clone ().Offset (direction, distance);\r\n\t\t\tresult.push (offseted);\r\n\t\t\tdistance += step;\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetSectorSegmentation\r\n\t* Description: Returns the segmented coordinates of a sector.\r\n\t* Parameters:\r\n\t*\tsector {Sector} the sector\r\n\t*\tsegmentation {integer} the segmentation\r\n\t* Returns:\r\n\t*\t{Coord[*]} the result coordinates\r\n\t*/\r\n\tJSM.GetSectorSegmentation = function (sector, segmentation)\r\n\t{\r\n\t\tvar direction = JSM.CoordSub (sector.end, sector.beg);\r\n\t\tvar length = sector.beg.DistanceTo (sector.end);\r\n\t\tvar step = length / segmentation;\r\n\t\tvar distance = 0.0;\r\n\r\n\t\tvar result = [];\r\n\t\tvar i, offseted;\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\toffseted = sector.beg.Clone ().Offset (direction, distance);\r\n\t\t\tresult.push (offseted);\r\n\t\t\tdistance += step;\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/line',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Enum: CoordLinePosition2D\r\n\t* Description: Position of a coordinate and a line.\r\n\t* Values:\r\n\t*\t{CoordOnLine} coordinate lies on the line\r\n\t*\t{CoordAtLineLeft} coordinate lies on the left side of the line\r\n\t*\t{CoordAtLineRight} coordinate lies on the left side right the line\r\n\t*/\r\n\tJSM.CoordLinePosition2D = {\r\n\t\tCoordOnLine : 0,\r\n\t\tCoordAtLineLeft : 1,\r\n\t\tCoordAtLineRight : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: LineLinePosition2D\r\n\t* Description: Position of two lines.\r\n\t* Values:\r\n\t*\t{LinesDontIntersect} lines do not intersect\r\n\t*\t{LinesIntersectsCoincident} lines intersect coincident\r\n\t*\t{LinesIntersectsOnePoint} lines intersect one point\r\n\t*/\r\n\tJSM.LineLinePosition2D = {\r\n\t\tLinesDontIntersect : 0,\r\n\t\tLinesIntersectsOnePoint : 1,\r\n\t\tLinesIntersectsCoincident : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: CoordLinePosition\r\n\t* Description: Position of a coordinate and a line.\r\n\t* Values:\r\n\t*\t{CoordOnLine} coordinate lies on the line\r\n\t*\t{CoordOutsideOfLine} coordinate lies outside of the line\r\n\t*/\r\n\tJSM.CoordLinePosition = {\r\n\t\tCoordOnLine : 0,\r\n\t\tCoordOutsideOfLine : 1\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: LineLinePosition\r\n\t* Description: Position of two lines.\r\n\t* Values:\r\n\t*\t{LinesDontIntersect} lines do not intersect\r\n\t*\t{LinesIntersectsCoincident} lines intersect coincident\r\n\t*\t{LinesIntersectsOnePoint} lines intersect one point\r\n\t*/\r\n\tJSM.LineLinePosition = {\r\n\t\tLinesDontIntersect : 0,\r\n\t\tLinesIntersectsOnePoint : 1,\r\n\t\tLinesIntersectsCoincident : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Line2D\r\n\t* Description: Represents a 2D infinite line.\r\n\t* Parameters:\r\n\t*\tstart {Coord2D} the start point of the line\r\n\t*\tdirection {Vector2D} the direction of the line\r\n\t*/\r\n\tJSM.Line2D = function (start, direction)\r\n\t{\r\n\t\tthis.start = start;\r\n\t\tthis.direction = direction;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line2D.Set\r\n\t* Description: Sets the line.\r\n\t* Parameters:\r\n\t*\tstart {Coord2D} the start point of the line\r\n\t*\tdirection {Vector2D} the direction of the line\r\n\t*/\r\n\tJSM.Line2D.prototype.Set = function (start, direction)\r\n\t{\r\n\t\tthis.start = start;\r\n\t\tthis.direction = direction;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line2D.CoordPosition\r\n\t* Description: Calculates the position of the line and the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{CoordLinePosition2D} the result\r\n\t*/\r\n\tJSM.Line2D.prototype.CoordPosition = function (coord)\r\n\t{\r\n\t\tvar position = this.CoordSignedDistance (coord);\r\n\t\tif (JSM.IsPositive (position)) {\r\n\t\t\treturn JSM.CoordLinePosition2D.CoordAtLineLeft;\r\n\t\t} else if (JSM.IsNegative (position)) {\r\n\t\t\treturn JSM.CoordLinePosition2D.CoordAtLineRight;\r\n\t\t}\r\n\r\n\t\treturn JSM.CoordLinePosition2D.CoordOnLine;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line2D.CoordSignedDistance\r\n\t* Description: Calculates the signed distance of the line and the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Line2D.prototype.CoordSignedDistance = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar a = this.start;\r\n\t\tvar b = this.direction;\r\n\t\treturn b.x * (y - a.y) - b.y * (x - a.x);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line2D.LinePosition\r\n\t* Description: Calculates the position of the line and the given line.\r\n\t* Parameters:\r\n\t*\tline {Line2D} the line\r\n\t*\tintersection {Coord2D} (out) the intersection point if it exists\r\n\t* Returns:\r\n\t*\t{LineLinePosition2D} the result\r\n\t*/\r\n\tJSM.Line2D.prototype.LinePosition = function (line, intersection)\r\n\t{\r\n\t\tvar x1 = this.start.x;\r\n\t\tvar y1 = this.start.y;\r\n\t\tvar x2 = this.start.x + this.direction.x;\r\n\t\tvar y2 = this.start.y + this.direction.y;\r\n\t\tvar x3 = line.start.x;\r\n\t\tvar y3 = line.start.y;\r\n\t\tvar x4 = line.start.x + line.direction.x;\r\n\t\tvar y4 = line.start.y + line.direction.y;\r\n\t\t\r\n\t\tvar numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\r\n\t\tvar numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\r\n\t\tvar denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n\t\tif (JSM.IsZero (denominator)) {\r\n\t\t\tif (JSM.IsZero (numeratorA) && JSM.IsZero (numeratorB)) {\r\n\t\t\t\treturn JSM.LineLinePosition2D.LinesIntersectsCoincident;\r\n\t\t\t}\r\n\t\t\treturn JSM.LineLinePosition2D.LinesDontIntersect;\r\n\t\t}\r\n\r\n\t\tvar distance = numeratorA / denominator;\r\n\t\tif (intersection !== null) {\r\n\t\t\tintersection.x = x1 + distance * (x2 - x1);\r\n\t\t\tintersection.y = y1 + distance * (y2 - y1);\r\n\t\t}\r\n\t\treturn JSM.LineLinePosition2D.LinesIntersectsOnePoint;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line2D.Clone\r\n\t* Description: Clones the line.\r\n\t* Returns:\r\n\t*\t{Line2D} a cloned instance\r\n\t*/\r\n\tJSM.Line2D.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Line2D (this.start.Clone (), this.direction.Clone ());\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Line\r\n\t* Description: Represents a 3D infinite line.\r\n\t* Parameters:\r\n\t*\tstart {Coord} the start point of the line\r\n\t*\tdirection {Vector} the direction of the line\r\n\t*/\r\n\tJSM.Line = function (start, direction)\r\n\t{\r\n\t\tthis.start = start;\r\n\t\tthis.direction = direction;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line.Set\r\n\t* Description: Sets the line.\r\n\t* Parameters:\r\n\t*\tstart {Coord} the start point of the line\r\n\t*\tdirection {Vector} the direction of the line\r\n\t*/\r\n\tJSM.Line.prototype.Set = function (start, direction)\r\n\t{\r\n\t\tthis.start = start;\r\n\t\tthis.direction = direction;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line.CoordPosition\r\n\t* Description: Calculates the position of the line and the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tprojected {Coord} (out) the projected coordinate\r\n\t* Returns:\r\n\t*\t{CoordLinePosition} the result\r\n\t*/\r\n\tJSM.Line.prototype.CoordPosition = function (coord, projected)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar z = coord.z;\r\n\r\n\t\tvar a = this.start;\r\n\t\tvar b = this.direction;\r\n\r\n\t\tvar x1 = a.x;\r\n\t\tvar y1 = a.y;\r\n\t\tvar z1 = a.z;\r\n\t\tvar x2 = a.x + b.x;\r\n\t\tvar y2 = a.y + b.y;\r\n\t\tvar z2 = a.z + b.z;\r\n\r\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\tif (projected !== undefined) {\r\n\t\t\t\tprojected.Set (a.x, a.y, a.z);\r\n\t\t\t}\r\n\r\n\t\t\tif (a.IsEqual (coord)) {\r\n\t\t\t\treturn JSM.CoordLinePosition.CoordOnLine;\r\n\t\t\t}\r\n\r\n\t\t\treturn JSM.CoordLinePosition.CoordOutsideOfLine;\r\n\t\t}\r\n\r\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;\r\n\t\tvar bu = b.Clone ().MultiplyScalar (u);\r\n\t\tvar c = JSM.CoordAdd (a, bu);\r\n\t\tif (projected !== undefined) {\r\n\t\t\tprojected.Set (c.x, c.y, c.z);\r\n\t\t}\r\n\r\n\t\tvar distance = coord.DistanceTo (c);\r\n\t\tif (JSM.IsZero (distance)) {\r\n\t\t\treturn JSM.CoordLinePosition.CoordOnLine;\r\n\t\t}\r\n\r\n\t\treturn JSM.CoordLinePosition.CoordOutsideOfLine;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line.ProjectCoord\r\n\t* Description: Calculates the projected coordinate of the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Line.prototype.ProjectCoord = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar z = coord.z;\r\n\r\n\t\tvar a = this.start;\r\n\t\tvar b = this.direction;\r\n\r\n\t\tvar x1 = a.x;\r\n\t\tvar y1 = a.y;\r\n\t\tvar z1 = a.z;\r\n\t\tvar x2 = a.x + b.x;\r\n\t\tvar y2 = a.y + b.y;\r\n\t\tvar z2 = a.z + b.z;\r\n\r\n\t\tvar denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn a.Clone ();\r\n\t\t}\r\n\r\n\t\tvar u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;\r\n\t\tvar bu = b.Clone ().MultiplyScalar (u);\r\n\t\treturn JSM.CoordAdd (a, bu);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line.ClosestPoint\r\n\t* Description: Calculates the closest points between the line and a given line.\r\n\t* Parameters:\r\n\t*\tline {Line} the line\r\n\t*\tthisClosestPoint {Coord} (out) the closest point on the current line\r\n\t*\tlineClosestPoint {Coord} (out) the closest point on the given line\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.Line.prototype.ClosestPoint = function (line, thisClosestPoint, lineClosestPoint)\r\n\t{\r\n\t\tfunction Dmnop (v, m, n, o, p)\r\n\t\t{\r\n\t\t\tvar result = (v[m].x - v[n].x) * (v[o].x - v[p].x) + (v[m].y - v[n].y) * (v[o].y - v[p].y) + (v[m].z - v[n].z) * (v[o].z - v[p].z);\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar aDir = this.direction.Clone ().Normalize ();\r\n\t\tvar aStart = this.start;\r\n\t\tvar aEnd = JSM.CoordAdd (aStart, aDir);\r\n\r\n\t\tvar bDir = line.direction.Clone ().Normalize ();\r\n\t\tvar bStart = line.start;\r\n\t\tvar bEnd = JSM.CoordAdd (bStart, bDir);\r\n\t\t\r\n\t\tvar v = [aStart, aEnd, bStart, bEnd];\r\n\t\tvar d1010 = Dmnop (v, 1, 0, 1, 0);\r\n\t\tvar d0210 = Dmnop (v, 0, 2, 1, 0);\r\n\t\tvar d0232 = Dmnop (v, 0, 2, 3, 2);\r\n\t\tvar d3210 = Dmnop (v, 3, 2, 1, 0);\r\n\t\tvar d3232 = Dmnop (v, 3, 2, 3, 2);\r\n\t\tvar denom = (d1010 * d3232 - d3210 * d3210);\r\n\t\tif (JSM.IsEqual (denom, 0.0)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar nom = (d0232 * d3210 - d0210 * d3232);\r\n\t\tvar mua = nom / denom;\r\n\t\tvar mub = (d0232 + mua * d3210) / d3232;\r\n\r\n\t\tif (thisClosestPoint !== undefined) {\r\n\t\t\taDir.MultiplyScalar (mua);\r\n\t\t\tvar aClosest = JSM.CoordAdd (aStart, aDir);\r\n\t\t\tthisClosestPoint.Set (aClosest.x, aClosest.y, aClosest.z);\r\n\t\t}\r\n\t\t\r\n\t\tif (lineClosestPoint !== undefined) {\r\n\t\t\tbDir.MultiplyScalar (mub);\r\n\t\t\tvar bClosest = JSM.CoordAdd (bStart, bDir);\r\n\t\t\tlineClosestPoint.Set (bClosest.x, bClosest.y, bClosest.z);\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line.LinePosition\r\n\t* Description: Calculates the position of the line and the given line.\r\n\t* Parameters:\r\n\t*\tline {Line} the line\r\n\t*\tintersection {Coord} (out) the intersection point if it exists\r\n\t* Returns:\r\n\t*\t{LineLinePosition} the result\r\n\t*/\r\n\tJSM.Line.prototype.LinePosition = function (line, intersection)\r\n\t{\r\n\t\tvar thisClosestPoint = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tvar lineClosestPoint = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tif (!this.ClosestPoint (line, thisClosestPoint, lineClosestPoint)) {\r\n\t\t\treturn JSM.LineLinePosition.LinesIntersectsCoincident;\r\n\t\t}\r\n\t\t\r\n\t\tif (thisClosestPoint.IsEqual (lineClosestPoint)) {\r\n\t\t\tif (intersection !== undefined) {\r\n\t\t\t\tintersection.Set (thisClosestPoint.x, thisClosestPoint.y, thisClosestPoint.z);\r\n\t\t\t}\r\n\t\t\treturn JSM.LineLinePosition.LinesIntersectsOnePoint;\r\n\t\t}\r\n\t\t\r\n\t\treturn JSM.LineLinePosition.LinesDontIntersect;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Line.Clone\r\n\t* Description: Clones the line.\r\n\t* Returns:\r\n\t*\t{Line} a cloned instance\r\n\t*/\r\n\tJSM.Line.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Line (this.start.Clone (), this.direction.Clone ());\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/box',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Box2D\r\n\t* Description: Represents a 2D box.\r\n\t* Parameters:\r\n\t*\tmin {Coord2D} the minimum position of the box\r\n\t*\tmin {Coord2D} the maximum position of the box\r\n\t*/\r\n\tJSM.Box2D = function (min, max)\r\n\t{\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box2D.Set\r\n\t* Description: Sets the box.\r\n\t* Parameters:\r\n\t*\tmin {Coord2D} the minimum position of the box\r\n\t*\tmin {Coord2D} the maximum position of the box\r\n\t*/\r\n\tJSM.Box2D.prototype.Set = function (min, max)\r\n\t{\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box2D.GetCenter\r\n\t* Description: Returns the center point of the box.\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.Box2D.prototype.GetCenter = function ()\r\n\t{\r\n\t\treturn JSM.MidCoord2D (this.min, this.max);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box2D.Clone\r\n\t* Description: Clones the box.\r\n\t* Returns:\r\n\t*\t{Box2D} a cloned instance\r\n\t*/\r\n\tJSM.Box2D.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Box2D (this.min.Clone (), this.max.Clone ());\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Box\r\n\t* Description: Represents a 3D box.\r\n\t* Parameters:\r\n\t*\tmin {Coord} the minimum position of the box\r\n\t*\tmin {Coord} the maximum position of the box\r\n\t*/\r\n\tJSM.Box = function (min, max)\r\n\t{\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box.Set\r\n\t* Description: Sets the box.\r\n\t* Parameters:\r\n\t*\tmin {Coord} the minimum position of the box\r\n\t*\tmin {Coord} the maximum position of the box\r\n\t*/\r\n\tJSM.Box.prototype.Set = function (min, max)\r\n\t{\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box.GetCenter\r\n\t* Description: Returns the center point of the box.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Box.prototype.GetCenter = function ()\r\n\t{\r\n\t\treturn JSM.MidCoord (this.min, this.max);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box.GetSize\r\n\t* Description: Returns the size of the box.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Box.prototype.GetSize = function ()\r\n\t{\r\n\t\treturn JSM.CoordSub (this.max, this.min);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box.IsCoordInside\r\n\t* Description: Determines if the given coordinate is inside the box.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Box.prototype.IsCoordInside = function (coord)\r\n\t{\r\n\t\tif (JSM.IsLower (coord.x, this.min.x) || JSM.IsLower (coord.y, this.min.y) || JSM.IsLower (coord.z, this.min.z)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (JSM.IsGreater (coord.x, this.max.x) || JSM.IsGreater (coord.y, this.max.y) || JSM.IsGreater (coord.z, this.max.z)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Box.Clone\r\n\t* Description: Clones the box.\r\n\t* Returns:\r\n\t*\t{Box} a cloned instance\r\n\t*/\r\n\tJSM.Box.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Box (this.min.Clone (), this.max.Clone ());\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BoxUnion\r\n\t* Description: Calculates the union of two 3D boxes.\r\n\t* Parameters:\r\n\t*\taBox {Box} the first box\r\n\t*\tbBox {Box} the second box\r\n\t* Returns:\r\n\t*\t{Box} the result\r\n\t*/\r\n\tJSM.BoxUnion = function (aBox, bBox)\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Minimum (aBox.min.x, bBox.min.x), JSM.Minimum (aBox.min.y, bBox.min.y), JSM.Minimum (aBox.min.z, bBox.min.z));\r\n\t\tvar max = new JSM.Coord (JSM.Maximum (aBox.max.x, bBox.max.x), JSM.Maximum (aBox.max.y, bBox.max.y), JSM.Maximum (aBox.max.z, bBox.max.z));\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/sphere',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Sphere\r\n\t* Description: Represents a sphere.\r\n\t* Parameters:\r\n\t*\tcenter {Coord} the center of the sphere\r\n\t*\tradius {number} the radius of the sphere\r\n\t*/\r\n\tJSM.Sphere = function (center, radius)\r\n\t{\r\n\t\tthis.center = center;\r\n\t\tthis.radius = radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sphere.Set\r\n\t* Description: Sets the sphere.\r\n\t* Parameters:\r\n\t*\tcenter {Coord} the center of the sphere\r\n\t*\tradius {number} the radius of the sphere\r\n\t*/\r\n\tJSM.Sphere.prototype.Set = function (center, radius)\r\n\t{\r\n\t\tthis.center = center;\r\n\t\tthis.radius = radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sphere.GetCenter\r\n\t* Description: Returns the center of the sphere.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Sphere.prototype.GetCenter = function ()\r\n\t{\r\n\t\treturn this.center;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sphere.GetRadius\r\n\t* Description: Returns the radius of the sphere.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Sphere.prototype.GetRadius = function ()\r\n\t{\r\n\t\treturn this.radius;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Sphere.Clone\r\n\t* Description: Clones the sphere.\r\n\t* Returns:\r\n\t*\t{Sphere} a cloned instance\r\n\t*/\r\n\tJSM.Sphere.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Sphere (this.center.Clone (), this.radius);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/transformation',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Transformation\r\n\t* Description: Represents a transformation matrix.\r\n\t*/\r\n\tJSM.Transformation = function ()\r\n\t{\r\n\t\tthis.matrix = JSM.MatrixIdentity ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Transformation.GetMatrix\r\n\t* Description: Returns the matrix of the transformation.\r\n\t* Returns:\r\n\t*\t{number[16]} the matrix\r\n\t*/\r\n\tJSM.Transformation.prototype.GetMatrix = function ()\r\n\t{\r\n\t\treturn this.matrix;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Transformation.SetMatrix\r\n\t* Description: Sets matrix of the transformation.\r\n\t* Parameters:\r\n\t*\tmatrix {number[16]} the matrix\r\n\t*/\r\n\tJSM.Transformation.prototype.SetMatrix = function (matrix)\r\n\t{\r\n\t\tthis.matrix = matrix;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Transformation.Append\r\n\t* Description: Adds a transformation to the matrix.\r\n\t* Parameters:\r\n\t*\tsource {Transformation} the another transformation\r\n\t*/\r\n\tJSM.Transformation.prototype.Append = function (source)\r\n\t{\r\n\t\tthis.matrix = JSM.MatrixMultiply (this.matrix, source.matrix);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Transformation.Apply\r\n\t* Description: Apply transformation to a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Transformation.prototype.Apply = function (coord)\r\n\t{\r\n\t\treturn JSM.ApplyTransformation (this.matrix, coord);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Transformation.Clone\r\n\t* Description: Clones the transformation.\r\n\t* Returns:\r\n\t*\t{Transformation} a cloned instance\r\n\t*/\r\n\tJSM.Transformation.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.Transformation ();\r\n\t\tresult.matrix = JSM.MatrixClone (this.matrix);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IdentityTransformation\r\n\t* Description: Generates an identity transformation.\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.IdentityTransformation = function ()\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\ttransformation.matrix = JSM.MatrixIdentity ();\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TranslationTransformation\r\n\t* Description: Generates a translation transformation.\r\n\t* Parameters:\r\n\t*\ttranslation {Vector} the translation vector\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.TranslationTransformation = function (translation)\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\ttransformation.matrix = JSM.MatrixTranslation (translation.x, translation.y, translation.z);\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: OffsetTransformation\r\n\t* Description: Generates an offset transformation.\r\n\t* Parameters:\r\n\t*\tdirection {Vector} the direction of the offset\r\n\t*\tdistance {number} the distance of the offset\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.OffsetTransformation = function (direction, distance)\r\n\t{\r\n\t\tvar normal = direction.Clone ().Normalize ();\r\n\t\tvar translation = normal.Clone ().MultiplyScalar (distance);\r\n\t\treturn JSM.TranslationTransformation (translation);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RotationTransformation\r\n\t* Description: Generates a rotation transformation.\r\n\t* Parameters:\r\n\t*\taxis {Vector} the axis of the rotation\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.RotationTransformation = function (axis, angle, origo)\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\ttransformation.matrix = JSM.MatrixRotation (axis, angle, origo);\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RotationXTransformation\r\n\t* Description: Generates a rotation transformation around the x axis.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.RotationXTransformation = function (angle, origo)\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\tif (origo === undefined || origo === null) {\r\n\t\t\ttransformation.matrix = JSM.MatrixRotationX (angle);\r\n\t\t} else {\r\n\t\t\ttransformation.Append (JSM.TranslationTransformation (new JSM.Vector (-origo.x, -origo.y, -origo.z)));\r\n\t\t\ttransformation.Append (JSM.RotationXTransformation (angle));\r\n\t\t\ttransformation.Append (JSM.TranslationTransformation (new JSM.Vector (origo.x, origo.y, origo.z)));\r\n\t\t}\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RotationYTransformation\r\n\t* Description: Generates a rotation transformation around the y axis.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.RotationYTransformation = function (angle, origo)\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\tif (origo === undefined || origo === null) {\r\n\t\t\ttransformation.matrix = JSM.MatrixRotationY (angle);\r\n\t\t} else {\r\n\t\t\ttransformation.Append (JSM.TranslationTransformation (new JSM.Vector (-origo.x, -origo.y, -origo.z)));\r\n\t\t\ttransformation.Append (JSM.RotationYTransformation (angle));\r\n\t\t\ttransformation.Append (JSM.TranslationTransformation (new JSM.Vector (origo.x, origo.y, origo.z)));\r\n\t\t}\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RotationZTransformation\r\n\t* Description: Generates a rotation transformation around the z axis.\r\n\t* Parameters:\r\n\t*\tangle {number} the angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.RotationZTransformation = function (angle, origo)\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\tif (origo === undefined || origo === null) {\r\n\t\t\ttransformation.matrix = JSM.MatrixRotationZ (angle);\r\n\t\t} else {\r\n\t\t\ttransformation.Append (JSM.TranslationTransformation (new JSM.Vector (-origo.x, -origo.y, -origo.z)));\r\n\t\t\ttransformation.Append (JSM.RotationZTransformation (angle));\r\n\t\t\ttransformation.Append (JSM.TranslationTransformation (new JSM.Vector (origo.x, origo.y, origo.z)));\r\n\t\t}\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RotationXYZTransformation\r\n\t* Description: Generates a rotation transformation around all axis in x, y, z order.\r\n\t* Parameters:\r\n\t*\txAngle {number} the x angle of the rotation\r\n\t*\tyAngle {number} the y angle of the rotation\r\n\t*\tzAngle {number} the z angle of the rotation\r\n\t*\torigo {Coord} the origo of the rotation\r\n\t* Returns:\r\n\t*\t{Transformation} the result\r\n\t*/\r\n\tJSM.RotationXYZTransformation = function (xAngle, yAngle, zAngle, origo)\r\n\t{\r\n\t\tvar transformation = new JSM.Transformation ();\r\n\t\ttransformation.Append (JSM.RotationXTransformation (xAngle, origo));\r\n\t\ttransformation.Append (JSM.RotationYTransformation (yAngle, origo));\r\n\t\ttransformation.Append (JSM.RotationZTransformation (zAngle, origo));\r\n\t\treturn transformation;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/plane',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Enum: CoordPlanePosition\r\n\t* Description: Position of a coordinate and a plane.\r\n\t* Values:\r\n\t*\t{CoordOnPlane} coordinate lies on the plane\r\n\t*\t{CoordInFrontOfPlane} coordinate lies in front of of the plane\r\n\t*\t{CoordAtBackOfPlane} coordinate lies at the back of the plane\r\n\t*/\r\n\tJSM.CoordPlanePosition = {\r\n\t\tCoordOnPlane : 0,\r\n\t\tCoordInFrontOfPlane : 1,\r\n\t\tCoordAtBackOfPlane : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: LinePlanePosition\r\n\t* Description: Position of a line and a plane.\r\n\t* Values:\r\n\t*\t{LineParallelToPlane} line is parallel to the plane\r\n\t*\t{LineIntersectsPlane} line intersects the plane\r\n\t*/\r\n\tJSM.LinePlanePosition = {\r\n\t\tLineParallelToPlane : 0,\r\n\t\tLineIntersectsPlane : 1\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Plane\r\n\t* Description: Represents a plane.\r\n\t* Parameters:\r\n\t*\ta {number} the a component of plane equation\r\n\t*\tb {number} the b component of plane equation\r\n\t*\tc {number} the c component of plane equation\r\n\t*\td {number} the d component of plane equation\r\n\t*/\r\n\tJSM.Plane = function (a, b, c, d)\r\n\t{\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\t\tthis.d = d;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.Set\r\n\t* Description: Sets the plane.\r\n\t* Parameters:\r\n\t*\ta {number} the a component of plane equation\r\n\t*\tb {number} the b component of plane equation\r\n\t*\tc {number} the c component of plane equation\r\n\t*\td {number} the d component of plane equation\r\n\t*/\r\n\tJSM.Plane.prototype.Set = function (a, b, c, d)\r\n\t{\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\t\tthis.d = d;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.GetNormal\r\n\t* Description: Calculates the normal vector of the plane.\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.Plane.prototype.GetNormal = function ()\r\n\t{\r\n\t\treturn new JSM.Vector (this.a, this.b, this.c);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.CoordSignedDistance\r\n\t* Description: Calculates the signed distance of a coordinate and the plane.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Plane.prototype.CoordSignedDistance = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar z = coord.z;\r\n\r\n\t\tvar a = this.a;\r\n\t\tvar b = this.b;\r\n\t\tvar c = this.c;\r\n\t\tvar d = this.d;\r\n\r\n\t\tvar distance = (a * x + b * y + c * z + d) / Math.sqrt (a * a + b * b + c * c);\r\n\t\treturn distance;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.CoordDistance\r\n\t* Description: Calculates the distance of a coordinate and the plane.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Plane.prototype.CoordDistance = function (coord)\r\n\t{\r\n\t\tvar signed = this.CoordSignedDistance (coord);\r\n\t\treturn Math.abs (signed);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.ProjectCoord\r\n\t* Description: Projects a coordinate to the plane.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{Coord} the projected coordinate\r\n\t*/\r\n\tJSM.Plane.prototype.ProjectCoord = function (coord)\r\n\t{\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar z = coord.z;\r\n\r\n\t\tvar a = this.a;\r\n\t\tvar b = this.b;\r\n\t\tvar c = this.c;\r\n\t\tvar d = this.d;\r\n\r\n\t\tvar distance = this.CoordDistance (coord);\r\n\t\tvar side = a * x + b * y + c * z + d;\r\n\t\tif (JSM.IsGreater (side, 0.0)) {\r\n\t\t\tdistance = -distance;\r\n\t\t}\r\n\r\n\t\tvar normal = this.GetNormal ().Normalize ();\r\n\t\tvar result = coord.Clone ().Offset (normal, distance);\r\n\t\treturn result;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t* Function: Plane.CoordPosition\r\n\t* Description: Calculates the position of the plane and the given coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{CoordPlanePosition} thre result\r\n\t*/\r\n\tJSM.Plane.prototype.CoordPosition = function (coord)\r\n\t{\r\n\t\tvar a = this.a;\r\n\t\tvar b = this.b;\r\n\t\tvar c = this.c;\r\n\t\tvar d = this.d;\r\n\r\n\t\tvar x = coord.x;\r\n\t\tvar y = coord.y;\r\n\t\tvar z = coord.z;\r\n\r\n\t\tvar s = a * x + b * y + c * z + d;\r\n\t\tif (JSM.IsPositive (s)) {\r\n\t\t\treturn JSM.CoordPlanePosition.CoordInFrontOfPlane;\r\n\t\t} else if (JSM.IsNegative (s)) {\r\n\t\t\treturn JSM.CoordPlanePosition.CoordAtBackOfPlane;\r\n\t\t}\r\n\t\t\r\n\t\treturn JSM.CoordPlanePosition.CoordOnPlane;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.LinePosition\r\n\t* Description: Calculates the position of the plane and the given line.\r\n\t* Parameters:\r\n\t*\tline {Line} the line\r\n\t*\tintersection {Coord} (out) the intersection point if it exists\r\n\t* Returns:\r\n\t*\t{CoordLinePosition} the result\r\n\t*/\r\n\tJSM.Plane.prototype.LinePosition = function (line, intersection)\r\n\t{\r\n\t\tvar\tdirection = line.direction.Clone ().Normalize ();\r\n\r\n\t\tvar x1 = line.start.x;\r\n\t\tvar y1 = line.start.y;\r\n\t\tvar z1 = line.start.z;\r\n\r\n\t\tvar x2 = line.start.x + direction.x;\r\n\t\tvar y2 = line.start.y + direction.y;\r\n\t\tvar z2 = line.start.z + direction.z;\r\n\r\n\t\tvar a = this.a;\r\n\t\tvar b = this.b;\r\n\t\tvar c = this.c;\r\n\t\tvar d = this.d;\r\n\r\n\t\tvar denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn JSM.LinePlanePosition.LineParallelToPlane;\r\n\t\t}\r\n\r\n\t\tvar u = (a * x1 + b * y1 + c * z1 + d) / denom;\r\n\t\tif (intersection !== undefined) {\r\n\t\t\tdirection.MultiplyScalar (u);\r\n\t\t\tvar i = JSM.CoordAdd (line.start, direction);\r\n\t\t\tintersection.Set (i.x, i.y, i.z);\r\n\t\t}\r\n\r\n\t\treturn JSM.LinePlanePosition.LineIntersectsPlane;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.LineIntersection\r\n\t* Description:\r\n\t*\tCalculates the intersection point of a line and a plane.\r\n\t*\tThe line should not be parallel to the plane.\r\n\t* Parameters:\r\n\t*\tline {Line} the line\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Plane.prototype.LineIntersection = function (line)\r\n\t{\r\n\t\tvar\tdirection = line.direction.Clone ().Normalize ();\r\n\r\n\t\tvar x1 = line.start.x;\r\n\t\tvar y1 = line.start.y;\r\n\t\tvar z1 = line.start.z;\r\n\r\n\t\tvar x2 = line.start.x + direction.x;\r\n\t\tvar y2 = line.start.y + direction.y;\r\n\t\tvar z2 = line.start.z + direction.z;\r\n\r\n\t\tvar a = this.a;\r\n\t\tvar b = this.b;\r\n\t\tvar c = this.c;\r\n\t\tvar d = this.d;\r\n\r\n\t\tvar denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar u = (a * x1 + b * y1 + c * z1 + d) / denom;\r\n\t\tdirection.MultiplyScalar (u);\r\n\t\treturn JSM.CoordAdd (line.start, direction);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Plane.Clone\r\n\t* Description: Clones the plane.\r\n\t* Returns:\r\n\t*\t{Plane} a cloned instance\r\n\t*/\r\n\tJSM.Plane.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Plane (this.a, this.b, this.c, this.d);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetPlaneFromCoordAndDirection\r\n\t* Description: Generates a plane from a coordinate and a direction.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tdirection {Vector} the direction\r\n\t* Returns:\r\n\t*\t{Plane} the result\r\n\t*/\r\n\tJSM.GetPlaneFromCoordAndDirection = function (coord, direction)\r\n\t{\r\n\t\tvar plane = new JSM.Plane ();\r\n\t\tvar normal = direction.Clone ().Normalize ();\r\n\t\tvar pa = normal.x;\r\n\t\tvar pb = normal.y;\r\n\t\tvar pc = normal.z;\r\n\t\tvar pd = -(pa * coord.x + pb * coord.y + pc * coord.z);\r\n\t\tplane.Set (pa, pb, pc, pd);\r\n\t\treturn plane;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetPlaneFromThreeCoords\r\n\t* Description: Generates a plane from three coordinates.\r\n\t* Parameters:\r\n\t*\ta {Coord} the first coordinate\r\n\t*\tb {Coord} the second coordinate\r\n\t*\tc {Coord} the third coordinate\r\n\t* Returns:\r\n\t*\t{Plane} the result\r\n\t*/\r\n\tJSM.GetPlaneFromThreeCoords = function (a, b, c)\r\n\t{\r\n\t\tvar plane = new JSM.Plane ();\r\n\t\tvar pa = (b.y - a.y) * (c.z - a.z) - (c.y - a.y) * (b.z - a.z);\r\n\t\tvar pb = (b.z - a.z) * (c.x - a.x) - (c.z - a.z) * (b.x - a.x);\r\n\t\tvar pc = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\r\n\t\tvar pd = -(pa * a.x + pb * a.y + pc * a.z);\r\n\t\tplane.Set (pa, pb, pc, pd);\r\n\t\treturn plane;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordPlaneSignedDirectionalDistance\r\n\t* Description: Calculates the signed distance of a coordinate and a plane along a direction vector.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tdirection {Vector} the direction\r\n\t*\tplane {Plane} the plane\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.CoordPlaneSignedDirectionalDistance = function (coord, direction, plane)\r\n\t{\r\n\t\tvar\tnormal = direction.Clone ().Normalize ();\r\n\r\n\t\tvar x1 = coord.x;\r\n\t\tvar y1 = coord.y;\r\n\t\tvar z1 = coord.z;\r\n\r\n\t\tvar x2 = coord.x + normal.x;\r\n\t\tvar y2 = coord.y + normal.y;\r\n\t\tvar z2 = coord.z + normal.z;\r\n\r\n\t\tvar a = plane.a;\r\n\t\tvar b = plane.b;\r\n\t\tvar c = plane.c;\r\n\t\tvar d = plane.d;\r\n\r\n\t\tvar denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn 0.0;\r\n\t\t}\r\n\r\n\t\tvar u = (a * x1 + b * y1 + c * z1 + d) / denom;\r\n\t\tnormal.MultiplyScalar (u);\r\n\t\tvar intersection = JSM.CoordAdd (coord, normal);\r\n\t\tvar distance = coord.DistanceTo (intersection);\r\n\t\tvar s = a * x1 + b * y1 + c * z1 + d;\r\n\t\tif (JSM.IsNegative (s)) {\r\n\t\t\tdistance = -distance;\r\n\t\t}\r\n\r\n\t\treturn distance;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CoordPlaneDirectionalDistance\r\n\t* Description: Calculates the distance of a coordinate and a plane along a direction vector.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tdirection {Vector} the direction\r\n\t*\tplane {Plane} the plane\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.CoordPlaneDirectionalDistance = function (coord, direction, plane)\r\n\t{\r\n\t\treturn Math.abs (JSM.CoordPlaneSignedDirectionalDistance (coord, direction, plane));\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/projection',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: MatrixView\r\n\t* Description: Creates a view matrix.\r\n\t* Parameters:\r\n\t*\teye {Coord} eye position\r\n\t*\tcenter {Coord} center position\r\n\t*\tup {Vector} up vector\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixView = function (eye, center, up)\r\n\t{\r\n\t\tif (eye.IsEqual (center)) {\r\n\t\t\treturn JSM.MatrixIdentity ();\r\n\t\t}\r\n\t\t\r\n\t\tvar result = [];\r\n\r\n\t\tvar d = JSM.CoordSub (eye, center).Normalize ();\r\n\t\tvar v = JSM.VectorCross (up, d).Normalize ();\r\n\t\tvar u = JSM.VectorCross (d, v).Normalize ();\r\n\r\n\t\tresult[0] = v.x;\r\n\t\tresult[1] = u.x;\r\n\t\tresult[2] = d.x;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = v.y;\r\n\t\tresult[5] = u.y;\r\n\t\tresult[6] = d.y;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = v.z;\r\n\t\tresult[9] = u.z;\r\n\t\tresult[10] = d.z;\r\n\t\tresult[11] = 0.0;\r\n\t\tresult[12] = -JSM.VectorDot (v, eye);\r\n\t\tresult[13] = -JSM.VectorDot (u, eye);\r\n\t\tresult[14] = -JSM.VectorDot (d, eye);\r\n\t\tresult[15] = 1.0;\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MatrixPerspective\r\n\t* Description: Creates a perspective matrix.\r\n\t* Parameters:\r\n\t*\tfieldOfView {number} field of view\r\n\t*\taspectRatio {number} aspect ratio\r\n\t*\tnearPlane {number} near clipping plane\r\n\t*\tfarPlane {number} far clipping plane\r\n\t* Returns:\r\n\t*\t{number[16]} the result matrix\r\n\t*/\r\n\tJSM.MatrixPerspective = function (fieldOfView, aspectRatio, nearPlane, farPlane)\r\n\t{\r\n\t\tvar result = [];\r\n\t\t\r\n\t\tvar f = 1.0 / Math.tan (fieldOfView / 2.0);\r\n\t\tvar nf = 1.0 / (nearPlane - farPlane);\r\n\t\t\r\n\t\tresult[0] = f / aspectRatio;\r\n\t\tresult[1] = 0.0;\r\n\t\tresult[2] = 0.0;\r\n\t\tresult[3] = 0.0;\r\n\t\tresult[4] = 0.0;\r\n\t\tresult[5] = f;\r\n\t\tresult[6] = 0.0;\r\n\t\tresult[7] = 0.0;\r\n\t\tresult[8] = 0.0;\r\n\t\tresult[9] = 0.0;\r\n\t\tresult[10] = (farPlane + nearPlane) * nf;\r\n\t\tresult[11] = -1.0;\r\n\t\tresult[12] = 0.0;\r\n\t\tresult[13] = 0.0;\r\n\t\tresult[14] = (2.0 * farPlane * nearPlane) * nf;\r\n\t\tresult[15] = 0.0;\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Project\r\n\t* Description: Projects a 3D coordinate to 2D.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\teye {Coord} the eye of the camera\r\n\t*\tcenter {Coord} the center of the camera\r\n\t*\tup {Vector} the up vector of the camera\r\n\t*\tfieldOfView {number} camera field of view\r\n\t*\taspectRatio {number} aspect ratio of the desired image\r\n\t*\tnearPlane {number} near cutting plane distance\r\n\t*\tfarPlane {number} far cutting plane distance\r\n\t*\tviewPort {number[4]} view port coordinates in pixels\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Project = function (coord, eye, center, up, fieldOfView, aspectRatio, nearPlane, farPlane, viewPort)\r\n\t{\r\n\t\tvar input = [\r\n\t\t\tcoord.x,\r\n\t\t\tcoord.y,\r\n\t\t\tcoord.z,\r\n\t\t\t1.0\r\n\t\t];\r\n\r\n\t\tvar viewMatrix = JSM.MatrixView (eye, center, up);\r\n\t\tvar perspectiveMatrix = JSM.MatrixPerspective (fieldOfView, aspectRatio, nearPlane, farPlane);\r\n\t\tvar projectionMatrix = JSM.MatrixMultiply (viewMatrix, perspectiveMatrix);\r\n\t\tvar output = JSM.MatrixVectorMultiply (projectionMatrix, input);\r\n\t\tvar denom = output[3];\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tresult.x = (output[0] / denom * 0.5 + 0.5) * viewPort[2] + viewPort[0];\r\n\t\tresult.y = (output[1] / denom * 0.5 + 0.5) * viewPort[3] + viewPort[1];\r\n\t\tresult.z = (output[2] / denom * 0.5 + 0.5);\r\n\t\treturn result;\t\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Unproject\r\n\t* Description: Projects a 2D coordinate to 3D.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate (the z component can be zero)\r\n\t*\teye {Coord} the eye of the camera\r\n\t*\tcenter {Coord} the center of the camera\r\n\t*\tup {Vector} the up vector of the camera\r\n\t*\tfieldOfView {number} camera field of view\r\n\t*\taspectRatio {number} aspect ratio of the desired image\r\n\t*\tnearPlane {number} near cutting plane distance\r\n\t*\tfarPlane {number} far cutting plane distance\r\n\t*\tviewPort {number[4]} view port coordinates in pixels\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Unproject = function (coord, eye, center, up, fieldOfView, aspectRatio, nearPlane, farPlane, viewPort)\r\n\t{\r\n\t\tvar input = [\r\n\t\t\t(coord.x - viewPort[0]) / viewPort[2] * 2.0 - 1.0,\r\n\t\t\t(coord.y - viewPort[1]) / viewPort[3] * 2.0 - 1.0,\r\n\t\t\t2.0 * coord.z - 1,\r\n\t\t\t1.0\r\n\t\t];\r\n\t\t\r\n\t\tvar viewMatrix = JSM.MatrixView (eye, center, up);\r\n\t\tvar perspectiveMatrix = JSM.MatrixPerspective (fieldOfView, aspectRatio, nearPlane, farPlane);\r\n\t\tvar projectionMatrix = JSM.MatrixMultiply (viewMatrix, perspectiveMatrix);\r\n\t\tvar inverseMatrix = JSM.MatrixInvert (projectionMatrix);\r\n\t\tvar output = JSM.MatrixVectorMultiply (inverseMatrix, input);\r\n\t\tvar denom = output[3];\r\n\t\tif (JSM.IsZero (denom)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tresult.x = (output[0] / output[3]);\r\n\t\tresult.y = (output[1] / output[3]);\r\n\t\tresult.z = (output[2] / output[3]);\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/convexhull',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: ConvexHull2D\r\n\t* Description: Calculates the 2D convex hull from the given coordinates.\r\n\t* Parameters:\r\n\t*\tcoords {Coord2D[*]} the coordinate array\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} coordinate array of the convex hull\r\n\t*/\r\n\tJSM.ConvexHull2D = function (coords)\r\n\t{\r\n\t\tfunction FindLeftMostCoord (coords)\r\n\t\t{\r\n\t\t\tvar count = coords.length;\r\n\t\t\tvar minValue = JSM.Inf;\r\n\t\t\tvar minIndex = -1;\r\n\t\t\r\n\t\t\tvar i, current;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurrent = coords[i].x;\r\n\t\t\t\tif (JSM.IsLower (current, minValue)) {\r\n\t\t\t\t\tminValue = current;\r\n\t\t\t\t\tminIndex = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn minIndex;\r\n\t\t}\r\n\t\t\r\n\t\tfunction FindNextCoord (coords, current)\r\n\t\t{\r\n\t\t\tvar count = coords.length;\r\n\t\t\tvar next = 0;\r\n\t\t\t\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 1; i < count; i++) {\r\n\t\t\t\tif (current == next) {\r\n\t\t\t\t\tnext = i;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (JSM.CoordOrientation2D (coords[current], coords[next], coords[i]) == JSM.Orientation.Clockwise) {\r\n\t\t\t\t\t\tnext = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn next;\r\n\t\t}\r\n\r\n\t\tvar result = [];\r\n\t\tvar count = coords.length;\r\n\t\tif (count < 3) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tvar first = FindLeftMostCoord (coords);\r\n\t\tvar current = first;\r\n\t\tvar next;\r\n\t\t\r\n\t\tdo {\r\n\t\t\tresult.push (current);\r\n\t\t\tnext = FindNextCoord (coords, current);\r\n\t\t\tcurrent = next;\r\n\t\t} while (next != first);\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ConvexHull3D\r\n\t* Description:\r\n\t*\tCalculates the 3D convex hull from the given coordinates. The result defines\r\n\t*\tconvex hull triangles as an array of arrays with three coordinates.\r\n\t* Parameters:\r\n\t*\tcoords {Coord[*]} the coordinate array\r\n\t* Returns:\r\n\t*\t{Coord[3][*]} the result\r\n\t*/\r\n\tJSM.ConvexHull3D = function (coords)\r\n\t{\r\n\t\tfunction Vertex ()\r\n\t\t{\r\n\t\t\tthis.position = null;\r\n\t\t}\r\n\t\t\r\n\t\tfunction Edge ()\r\n\t\t{\r\n\t\t\tthis.vert1 = null;\r\n\t\t\tthis.vert2 = null;\r\n\t\t\tthis.tri1 = null;\r\n\t\t\tthis.tri2 = null;\r\n\t\t}\r\n\r\n\t\tfunction Triangle ()\r\n\t\t{\r\n\t\t\tthis.vertices = null;\r\n\t\t\tthis.edges = null;\r\n\t\t\tthis.valid = null;\r\n\t\t}\r\n\r\n\t\tfunction Body ()\r\n\t\t{\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.edges = [];\r\n\t\t\tthis.triangles = [];\r\n\t\t}\r\n\r\n\t\tfunction AddVertex (body, coord)\r\n\t\t{\r\n\t\t\tvar vertex = new Vertex ();\r\n\t\t\tvertex.position = coord;\r\n\t\t\tbody.vertices.push (vertex);\r\n\t\t\treturn body.vertices.length - 1;\r\n\t\t}\r\n\r\n\t\tfunction AddEdge (body, triangleIndex, a, b)\r\n\t\t{\r\n\t\t\tvar edgeIndex = -1;\r\n\t\t\r\n\t\t\tvar i, current;\r\n\t\t\tfor (i = 0; i < body.edges.length; i++) {\r\n\t\t\t\tcurrent = body.edges[i];\r\n\t\t\t\tif (current.vert1 == a && current.vert2 == b || current.vert1 == b && current.vert2 == a) {\r\n\t\t\t\t\tedgeIndex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (edgeIndex == -1) {\r\n\t\t\t\tvar newEdge = new Edge ();\r\n\t\t\t\tnewEdge.vert1 = a;\r\n\t\t\t\tnewEdge.vert2 = b;\r\n\t\t\t\tnewEdge.tri1 = -1;\r\n\t\t\t\tnewEdge.tri2 = -1;\r\n\t\t\t\tbody.edges.push (newEdge);\r\n\t\t\t\tedgeIndex = body.edges.length - 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar edge = body.edges[edgeIndex];\r\n\t\t\tif (edge.tri1 != triangleIndex && edge.tri2 != triangleIndex) {\r\n\t\t\t\tif (edge.tri1 == -1) {\r\n\t\t\t\t\tedge.tri1 = triangleIndex;\r\n\t\t\t\t} else if (edge.tri2 == -1) {\r\n\t\t\t\t\tedge.tri2 = triangleIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn edgeIndex;\r\n\t\t}\r\n\r\n\t\tfunction AddTriangle (body, a, b, c)\r\n\t\t{\r\n\t\t\tvar triangleIndex = body.triangles.length;\r\n\t\t\tvar edge1 = AddEdge (body, triangleIndex, a, b);\r\n\t\t\tvar edge2 = AddEdge (body, triangleIndex, b, c);\r\n\t\t\tvar edge3 = AddEdge (body, triangleIndex, c, a);\r\n\t\t\t\r\n\t\t\tvar triangle = new Triangle ();\r\n\t\t\ttriangle.vertices = [a, b, c];\r\n\t\t\ttriangle.edges = [edge1, edge2, edge3];\r\n\t\t\ttriangle.valid = true;\r\n\t\t\tbody.triangles.push (triangle);\r\n\t\t\treturn body.triangles.length - 1;\r\n\t\t}\r\n\r\n\t\tfunction RemoveTriangleFromEdge (body, triangleIndex, edgeIndex)\r\n\t\t{\r\n\t\t\tvar edge = body.edges[edgeIndex];\r\n\t\t\tif (edge.tri1 == triangleIndex) {\r\n\t\t\t\tedge.tri1 = -1;\r\n\t\t\t} else if (edge.tri2 == triangleIndex) {\r\n\t\t\t\tedge.tri2 = -1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction RemoveTriangle (body, triangleIndex)\r\n\t\t{\r\n\t\t\tvar triangle = body.triangles[triangleIndex];\r\n\t\t\tif (!triangle.valid) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tRemoveTriangleFromEdge (body, triangleIndex, triangle.edges[0]);\r\n\t\t\tRemoveTriangleFromEdge (body, triangleIndex, triangle.edges[1]);\r\n\t\t\tRemoveTriangleFromEdge (body, triangleIndex, triangle.edges[2]);\r\n\t\t\ttriangle.valid = false;\r\n\t\t}\r\n\r\n\t\tfunction GetTetrahedronVolume (body, a, b, c, d)\r\n\t\t{\r\n\t\t\tvar aCoord = body.vertices[a].position;\r\n\t\t\tvar bCoord = body.vertices[b].position;\r\n\t\t\tvar cCoord = body.vertices[c].position;\r\n\t\t\tvar dCoord = body.vertices[d].position;\r\n\t\t\t\r\n\t\t\tvar adSub = JSM.CoordSub (aCoord, dCoord);\r\n\t\t\tvar bdSub = JSM.CoordSub (bCoord, dCoord);\r\n\t\t\tvar cdSub = JSM.CoordSub (cCoord, dCoord);\r\n\t\t\t\r\n\t\t\treturn (JSM.VectorDot (adSub, JSM.VectorCross (bdSub, cdSub))) / 6.0;\r\n\t\t}\r\n\t\t\r\n\t\tfunction CheckTetrahedronOrientation (body, a, b, c, d)\r\n\t\t{\r\n\t\t\tif (JSM.IsLower (GetTetrahedronVolume (body, a, b, c, d), 0.0)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddInitialTetrahedron (body)\r\n\t\t{\r\n\t\t\tvar triangleIndex = -1;\r\n\t\t\tif (CheckTetrahedronOrientation (body, 0, 1, 2, 3)) {\r\n\t\t\t\ttriangleIndex = AddTriangle (body, 0, 1, 2);\r\n\t\t\t} else {\r\n\t\t\t\ttriangleIndex = AddTriangle (body, 0, 2, 1);\r\n\t\t\t}\r\n\r\n\t\t\tvar triangle = body.triangles[triangleIndex];\r\n\t\t\tAddTriangle (body, triangle.vertices[0], triangle.vertices[2], 3);\r\n\t\t\tAddTriangle (body, triangle.vertices[2], triangle.vertices[1], 3);\r\n\t\t\tAddTriangle (body, triangle.vertices[1], triangle.vertices[0], 3);\r\n\t\t}\r\n\r\n\t\tfunction AddCoordToHull (body, index)\r\n\t\t{\r\n\t\t\tvar visibleTriangles = [];\r\n\t\t\t\r\n\t\t\tvar i, triangle;\r\n\t\t\tfor (i = 0; i < body.triangles.length; i++) {\r\n\t\t\t\ttriangle = body.triangles[i];\r\n\t\t\t\tif (!triangle.valid) {\r\n\t\t\t\t\tvisibleTriangles.push (false);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (CheckTetrahedronOrientation (body, triangle.vertices[0], triangle.vertices[2], triangle.vertices[1], index)) {\r\n\t\t\t\t\tvisibleTriangles.push (true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvisibleTriangles.push (false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar edge1, edge2, edge3, edge1Vis, edge2Vis, edge3Vis;\r\n\t\t\tvar newTriangles = [];\r\n\t\t\tfor (i = 0; i < visibleTriangles.length; i++) {\r\n\t\t\t\tif (!visibleTriangles[i]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttriangle = body.triangles[i];\r\n\t\t\t\tif (!triangle.valid) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tedge1 = body.edges[triangle.edges[0]];\r\n\t\t\t\tedge2 = body.edges[triangle.edges[1]];\r\n\t\t\t\tedge3 = body.edges[triangle.edges[2]];\r\n\r\n\t\t\t\tedge1Vis = (edge1.tri1 == -1 || edge1.tri2 == -1 || visibleTriangles[edge1.tri1] != visibleTriangles[edge1.tri2]);\r\n\t\t\t\tedge2Vis = (edge2.tri1 == -1 || edge2.tri2 == -1 || visibleTriangles[edge2.tri1] != visibleTriangles[edge2.tri2]);\r\n\t\t\t\tedge3Vis = (edge3.tri1 == -1 || edge3.tri2 == -1 || visibleTriangles[edge3.tri1] != visibleTriangles[edge3.tri2]);\r\n\t\t\t\t\r\n\t\t\t\tif (edge1Vis) {\r\n\t\t\t\t\tnewTriangles.push ([triangle.vertices[0], triangle.vertices[1], index]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (edge2Vis) {\r\n\t\t\t\t\tnewTriangles.push ([triangle.vertices[1], triangle.vertices[2], index]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (edge3Vis) {\r\n\t\t\t\t\tnewTriangles.push ([triangle.vertices[2], triangle.vertices[0], index]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (i = 0; i < visibleTriangles.length; i++) {\r\n\t\t\t\tif (!visibleTriangles[i]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\ttriangle = body.triangles[i];\r\n\t\t\t\tif (!triangle.valid) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tRemoveTriangle (body, i);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar newTriangle;\r\n\t\t\tfor (i = 0; i < newTriangles.length; i++) {\r\n\t\t\t\tnewTriangle = newTriangles[i];\r\n\t\t\t\tAddTriangle (body, newTriangle[0], newTriangle[1], newTriangle[2]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar result = [];\r\n\t\tvar count = coords.length;\r\n\t\tif (count < 4) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar body = new Body ();\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tAddVertex (body, coords[i]);\r\n\t\t}\r\n\t\t\r\n\t\tAddInitialTetrahedron (body);\r\n\t\tfor (i = 4; i < count; i++) {\r\n\t\t\tAddCoordToHull (body, i);\r\n\t\t}\r\n\t\t\r\n\t\tvar triangle;\r\n\t\tfor (i = 0; i < body.triangles.length; i++) {\r\n\t\t\ttriangle = body.triangles[i];\r\n\t\t\tif (triangle.valid) {\r\n\t\t\t\tresult.push (triangle.vertices);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/polygon2d',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Enum: Complexity\r\n\t* Description: Complexity of a polygon.\r\n\t* Values:\r\n\t*\t{Invalid} invalid polygon\r\n\t*\t{Convex} convex polygon\r\n\t*\t{Concave} concave polygon\r\n\t*\t{Complex} complex polygon (contains holes)\r\n\t*/\r\n\tJSM.Complexity = {\r\n\t\tInvalid : 0,\r\n\t\tConvex : 1,\r\n\t\tConcave : 2,\r\n\t\tComplex : 3\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: CoordPolygonPosition2D\r\n\t* Description: Position of a coordinate and a polygon.\r\n\t* Values:\r\n\t*\t{OnVertex} coordinate lies on a vertex of the polygon\r\n\t*\t{OnEdge} coordinate lies on an edge of the polygon\r\n\t*\t{Inside} coordinate lies inside the polygon\r\n\t*\t{Outside} coordinate lies outside of the polygon\r\n\t*/\r\n\tJSM.CoordPolygonPosition2D = {\r\n\t\tOnVertex : 0,\r\n\t\tOnEdge : 1,\r\n\t\tInside : 2,\r\n\t\tOutside : 3\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: SectorPolygonPosition2D\r\n\t* Description: Position of a sector and a polygon.\r\n\t* Values:\r\n\t*\t{IntersectionOnePoint} sector intersects polygon\r\n\t*\t{IntersectionCoincident} sector lies on an edge of the polygon\r\n\t*\t{IntersectionOnVertex} sector intersects polygon on a vertex\r\n\t*\t{NoIntersection} sector does not intersect polygon\r\n\t*/\r\n\tJSM.SectorPolygonPosition2D = {\r\n\t\tIntersectionOnePoint : 0,\r\n\t\tIntersectionCoincident : 1,\r\n\t\tIntersectionOnVertex : 2,\r\n\t\tNoIntersection : 3\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Polygon2D\r\n\t* Description: Represents a 2D polygon.\r\n\t*/\r\n\tJSM.Polygon2D = function ()\r\n\t{\r\n\t\tthis.vertices = null;\r\n\t\tthis.cache = null;\r\n\t\tthis.Clear ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.AddVertex\r\n\t* Description: Adds a vertex to the polygon.\r\n\t* Parameters:\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*/\r\n\tJSM.Polygon2D.prototype.AddVertex = function (x, y)\r\n\t{\r\n\t\tthis.AddVertexCoord (new JSM.Coord2D (x, y));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.AddVertexCoord\r\n\t* Description: Adds a vertex coordinate to the polygon.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*/\r\n\tJSM.Polygon2D.prototype.AddVertexCoord = function (coord)\r\n\t{\r\n\t\tthis.vertices.push (coord);\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetVertex\r\n\t* Description: Returns the vertex with the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the vertex\r\n\t* Returns:\r\n\t*\t{Coord2D} the vertex\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetVertex = function (index)\r\n\t{\r\n\t\treturn this.vertices[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.RemoveVertex\r\n\t* Description: Removes a vertex from the polygon.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the vertex\r\n\t*/\r\n\tJSM.Polygon2D.prototype.RemoveVertex = function (index)\r\n\t{\r\n\t\tthis.vertices.splice (index, 1);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.VertexCount\r\n\t* Description: Returns the vertex count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} vertex count\r\n\t*/\r\n\tJSM.Polygon2D.prototype.VertexCount = function ()\r\n\t{\r\n\t\treturn this.vertices.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.EnumerateVertices\r\n\t* Description:\r\n\t*\tEnumerates the vertices of the polygon, and calls\r\n\t*\ta function for each vertex.\r\n\t* Parameters:\r\n\t*\tfrom {integer} the start vertex index\r\n\t*\tto {integer} the end vertex index\r\n\t*\tcallback {function} the callback function\r\n\t*/\r\n\tJSM.Polygon2D.prototype.EnumerateVertices = function (from, to, callback)\r\n\t{\r\n\t\tvar count = this.vertices.length;\r\n\t\tvar index = from;\r\n\t\tcallback (index);\r\n\t\twhile (index != to) {\r\n\t\t\tindex = (index + 1) % count;\r\n\t\t\tcallback (index);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetNextVertex\r\n\t* Description: Returns the vertex index after the given one.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetNextVertex = function (index)\r\n\t{\r\n\t\treturn JSM.NextIndex (index, this.vertices.length);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetPrevVertex\r\n\t* Description: Returns the vertex index before the given one.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetPrevVertex = function (index)\r\n\t{\r\n\t\treturn JSM.PrevIndex (index, this.vertices.length);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.ShiftVertices\r\n\t* Description: Shifts polygon vertices.\r\n\t* Parameters:\r\n\t*\tcount {integer} the number of shifts\r\n\t*/\r\n\tJSM.Polygon2D.prototype.ShiftVertices = function (count)\r\n\t{\r\n\t\tJSM.ShiftArray (this.vertices, count);\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.ReverseVertices\r\n\t* Description: Reverses the orientation of the vertices.\r\n\t*/\r\n\tJSM.Polygon2D.prototype.ReverseVertices = function ()\r\n\t{\r\n\t\tthis.vertices.reverse ();\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetVertexAngle\r\n\t* Description: Returns the angle of the given vertex.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetVertexAngle = function (index)\r\n\t{\r\n\t\tvar prev = this.vertices[this.GetPrevVertex (index)];\r\n\t\tvar curr = this.vertices[index];\r\n\t\tvar next = this.vertices[this.GetNextVertex (index)];\r\n\t\tvar prevDir = JSM.CoordSub2D (prev, curr);\r\n\t\tvar nextDir = JSM.CoordSub2D (next, curr);\r\n\t\treturn prevDir.AngleTo (nextDir);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetSignedArea\r\n\t* Description: Calculates the signed area of the polygon.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetSignedArea = function ()\r\n\t{\r\n\t\tif (this.cache.signedArea !== null) {\r\n\t\t\treturn this.cache.signedArea;\r\n\t\t}\r\n\t\t\r\n\t\tvar count = this.vertices.length;\r\n\t\tvar result = 0.0;\r\n\t\tif (count >= 3) {\r\n\t\t\tvar i, current, next;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurrent = this.vertices[i];\r\n\t\t\t\tnext = this.vertices[(i + 1) % count];\r\n\t\t\t\tresult += current.x * next.y - next.x * current.y;\r\n\t\t\t}\r\n\t\t\tresult *= 0.5;\r\n\t\t}\r\n\t\t\r\n\t\tthis.cache.signedArea = result;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetArea\r\n\t* Description: Calculates the area of the polygon.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetArea = function ()\r\n\t{\r\n\t\tvar signedArea = this.GetSignedArea ();\r\n\t\treturn Math.abs (signedArea);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetOrientation\r\n\t* Description: Calculates the orientation of the polygon.\r\n\t* Returns:\r\n\t*\t{Orientation} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetOrientation = function ()\r\n\t{\r\n\t\tif (this.cache.orientation !== null) {\r\n\t\t\treturn this.cache.orientation;\r\n\t\t}\r\n\r\n\t\tvar result = JSM.Orientation.Invalid;\r\n\t\tif (this.vertices.length >= 3) {\r\n\t\t\tvar signedArea = this.GetSignedArea ();\r\n\t\t\tif (JSM.IsPositive (signedArea)) {\r\n\t\t\t\tresult = JSM.Orientation.CounterClockwise;\r\n\t\t\t} else if (JSM.IsNegative (signedArea)) {\r\n\t\t\t\tresult = JSM.Orientation.Clockwise;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.cache.orientation = result;\r\n\t\treturn result;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetComplexity\r\n\t* Description: Calculates the complexity of the polygon.\r\n\t* Returns:\r\n\t*\t{Complexity} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetComplexity = function ()\r\n\t{\r\n\t\tif (this.cache.complexity !== null) {\r\n\t\t\treturn this.cache.complexity;\r\n\t\t}\r\n\t\t\r\n\t\tvar count = this.vertices.length;\r\n\t\tif (count < 3) {\r\n\t\t\treturn JSM.Complexity.Invalid;\r\n\t\t}\r\n\t\t\r\n\t\tvar result = JSM.Complexity.Invalid;\r\n\t\tvar polygonOrientain = this.GetOrientation ();\r\n\t\tif (polygonOrientain != JSM.Orientation.Invalid) {\r\n\t\t\tresult = JSM.Complexity.Convex;\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tif (this.IsConcaveVertex (i)) {\r\n\t\t\t\t\tresult = JSM.Complexity.Concave;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.cache.complexity = result;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.GetVertexOrientation\r\n\t* Description: Calculates the orientation of the given vertex of the polygon.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{Orientation} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.GetVertexOrientation = function (index)\r\n\t{\r\n\t\tif (this.cache.vertexOrientations[index] !== undefined) {\r\n\t\t\treturn this.cache.vertexOrientations[index];\r\n\t\t}\r\n\r\n\t\tvar prev = this.vertices[this.GetPrevVertex (index)];\r\n\t\tvar curr = this.vertices[index];\r\n\t\tvar next = this.vertices[this.GetNextVertex (index)];\r\n\t\t\r\n\t\tvar result = JSM.CoordOrientation2D (prev, curr, next);\r\n\t\tthis.cache.vertexOrientations[index] = result;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.IsConvexVertex\r\n\t* Description: Returns if the given vertex is convex.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.IsConvexVertex = function (index)\r\n\t{\r\n\t\tvar orientation = this.GetOrientation ();\r\n\t\tvar vertexOrientation = this.GetVertexOrientation (index);\r\n\t\tif (vertexOrientation == JSM.Orientation.Invalid) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn vertexOrientation == orientation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.IsConcaveVertex\r\n\t* Description: Returns if the given vertex is concave.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.IsConcaveVertex = function (index)\r\n\t{\r\n\t\tvar orientation = this.GetOrientation ();\r\n\t\tvar vertexOrientation = this.GetVertexOrientation (index);\r\n\t\tif (vertexOrientation == JSM.Orientation.Invalid) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn vertexOrientation != orientation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.CoordPosition\r\n\t* Description: Calculates the position of a coordinate and the polygon.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t* Returns:\r\n\t*\t{CoordPolygonPosition2D} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.CoordPosition = function (coord)\r\n\t{\r\n\t\tfunction IntersectionCount (coord, beg, end)\r\n\t\t{\r\n\t\t\tfunction GetIntersection (coord, beg, end)\r\n\t\t\t{\r\n\t\t\t\tvar result = new JSM.Coord2D (beg.x, coord.y);\r\n\t\t\t\tif (!JSM.IsEqual (beg.y, coord.y)) {\r\n\t\t\t\t\tvar yMoveRatio = Math.abs ((beg.y - coord.y) / (end.y - beg.y));\r\n\t\t\t\t\tresult.x = beg.x + (end.x - beg.x) * yMoveRatio;\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\r\n\t\t\tvar begYDist = beg.y - coord.y;\r\n\t\t\tvar endYDist = end.y - coord.y;\r\n\t\t\t\r\n\t\t\tvar begBelow = JSM.IsNegative (begYDist);\r\n\t\t\tvar begAbove = JSM.IsPositive (begYDist);\r\n\t\t\tvar endBelow = JSM.IsNegative (endYDist);\r\n\t\t\tvar endAbove = JSM.IsPositive (endYDist);\r\n\t\t\tif ((begBelow && endBelow) || (begAbove && endAbove)) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tvar begOnLine = !begBelow && !begAbove;\r\n\t\t\tvar endOnLine = !endBelow && !endAbove;\r\n\t\t\tif (begOnLine && endOnLine) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tvar intersection = GetIntersection (coord, beg, end);\r\n\t\t\tif (JSM.IsLower (intersection.x, coord.x)) {\r\n\t\t\t\treturn 0;\r\n\t\t\t} else if (JSM.IsGreater (intersection.x, coord.x)) {\r\n\t\t\t\tif (begOnLine || endOnLine) {\r\n\t\t\t\t\tvar upwardEdge = JSM.IsGreater (end.y, beg.y);\r\n\t\t\t\t\tif (begOnLine && upwardEdge || endOnLine && !upwardEdge) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\t\r\n\t\tvar vertexCount = this.vertices.length;\r\n\t\tvar intersections = 0;\r\n\t\tvar i, edgeFrom, edgeTo, sector, position;\r\n\t\tfor (i = 0; i < vertexCount; i++) {\r\n\t\t\tedgeFrom = this.vertices[i];\r\n\t\t\tedgeTo = this.vertices[(i + 1) % vertexCount];\r\n\t\t\tsector = new JSM.Sector2D (edgeFrom, edgeTo);\r\n\t\t\tposition = sector.CoordPosition (coord);\r\n\t\t\tif (position == JSM.CoordSectorPosition2D.CoordInsideOfSector) {\r\n\t\t\t\treturn JSM.CoordPolygonPosition2D.OnEdge;\r\n\t\t\t} else if (position == JSM.CoordSectorPosition2D.CoordOnSectorEndCoord) {\r\n\t\t\t\treturn JSM.CoordPolygonPosition2D.OnVertex;\r\n\t\t\t}\r\n\t\t\tintersections += IntersectionCount (coord, edgeFrom, edgeTo);\r\n\t\t}\r\n\t\t\r\n\t\tif (intersections % 2 !== 0) {\r\n\t\t\treturn JSM.CoordPolygonPosition2D.Inside;\r\n\t\t}\r\n\t\treturn JSM.CoordPolygonPosition2D.Outside;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.SectorPosition\r\n\t* Description:\r\n\t*\tCalculates the position of a sector and the polygon. The given begin and end\r\n\t*\tvertex indices are omitted form intersection checking.\r\n\t* Parameters:\r\n\t*\tsector {Sector2D} the sector\r\n\t*\tbegIndex {integer} begin vertex index\r\n\t*\tendIndex {integer} end vertex index\r\n\t* Returns:\r\n\t*\t{CoordSectorPosition2D} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.SectorPosition = function (sector, begIndex, endIndex)\r\n\t{\r\n\t\tvar result = JSM.SectorPolygonPosition2D.NoIntersection;\r\n\t\tvar vertexCount = this.vertices.length;\r\n\t\tif (vertexCount < 3) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tvar i, edgeBegIndex, edgeEndIndex, edgeBeg, edgeEnd;\r\n\t\tvar currentSector, position;\r\n\t\tfor (i = 0; i < vertexCount; i++) {\r\n\t\t\tedgeBegIndex = i;\r\n\t\t\tedgeEndIndex = (i + 1) % vertexCount;\r\n\t\t\tedgeBeg = this.vertices[edgeBegIndex];\r\n\t\t\tedgeEnd = this.vertices[edgeEndIndex];\r\n\t\t\tif (edgeBegIndex == begIndex || edgeEndIndex == begIndex || edgeBegIndex == endIndex || edgeEndIndex == endIndex) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tcurrentSector = new JSM.Sector2D (edgeBeg, edgeEnd);\r\n\t\t\tposition = sector.SectorPosition (currentSector);\r\n\t\t\tif (position == JSM.SectorSectorPosition2D.SectorsIntersectOnePoint) {\r\n\t\t\t\treturn JSM.SectorPolygonPosition2D.IntersectionOnePoint;\r\n\t\t\t} else if (position == JSM.SectorSectorPosition2D.SectorsIntersectCoincident) {\r\n\t\t\t\treturn JSM.SectorPolygonPosition2D.IntersectionCoincident;\r\n\t\t\t} else if (position == JSM.SectorSectorPosition2D.SectorsIntersectEndPoint) {\r\n\t\t\t\tresult = JSM.SectorPolygonPosition2D.IntersectionOnVertex;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.IsDiagonal\r\n\t* Description: Returns if the sector between two vertices is diagonal.\r\n\t* Parameters:\r\n\t*\tfrom {integer} begin vertex index\r\n\t*\tto {integer} end vertex index\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.IsDiagonal = function (from, to)\r\n\t{\r\n\t\tfunction DiagonalIntersectsAnyEdges (polygon, from, to)\r\n\t\t{\r\n\t\t\tvar fromVertex = polygon.GetVertex (from);\r\n\t\t\tvar toVertex = polygon.GetVertex (to);\r\n\t\t\tvar sector = new JSM.Sector2D (fromVertex, toVertex);\r\n\t\t\tvar position = polygon.SectorPosition (sector, from, to);\r\n\t\t\tif (position != JSM.SectorPolygonPosition2D.NoIntersection) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction DiagonalInsideOfPolygon (polygon, from, to)\r\n\t\t{\r\n\t\t\tvar fromVertex = polygon.GetVertex (from);\r\n\t\t\tvar toVertex = polygon.GetVertex (to);\r\n\t\t\tvar midCoord = new JSM.Coord2D (\r\n\t\t\t\t(fromVertex.x + toVertex.x) / 2.0,\r\n\t\t\t\t(fromVertex.y + toVertex.y) / 2.0\r\n\t\t\t);\r\n\t\t\tvar position = polygon.CoordPosition (midCoord);\r\n\t\t\treturn position == JSM.CoordPolygonPosition2D.Inside;\r\n\t\t}\r\n\t\t\r\n\t\tif (from == to) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.GetPrevVertex (from) == to || this.GetNextVertex (from) == to) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar fromVertex = this.vertices[from];\r\n\t\tvar toVertex = this.vertices[to];\r\n\t\tif (fromVertex.IsEqual (toVertex)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (DiagonalIntersectsAnyEdges (this, from, to)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!DiagonalInsideOfPolygon (this, from, to)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.ToArray\r\n\t* Description: Creates an array of vertices from polygon.\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} the result\r\n\t*/\r\n\tJSM.Polygon2D.prototype.ToArray = function ()\r\n\t{\r\n\t\tvar vertices = [];\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tvertex = this.vertices[i];\r\n\t\t\tvertices.push (vertex.Clone ());\r\n\t\t}\r\n\t\treturn vertices;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.FromArray\r\n\t* Description: Creates the polygon from an array of vertices.\r\n\t* Parameters:\r\n\t*\tvertices {Coord2D[*]} the array of vertices\r\n\t*/\r\n\tJSM.Polygon2D.prototype.FromArray = function (vertices)\r\n\t{\r\n\t\tthis.Clear ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tvertex = vertices[i];\r\n\t\t\tthis.AddVertex (vertex.x, vertex.y);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Function: Polygon2D.GetBoundingBox\r\n\t * Description: Calculates the bounding box of the polygon.\r\n\t * Returns:\r\n\t *\t{Box2D} the result\r\n\t */\r\n\tJSM.Polygon2D.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tif (this.cache.boundingBox !== null) {\r\n\t\t\treturn this.cache.boundingBox;\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Box2D (\r\n\t\t\tnew JSM.Coord2D (JSM.Inf, JSM.Inf),\r\n\t\t\tnew JSM.Coord2D (-JSM.Inf, -JSM.Inf)\r\n\t\t);\r\n\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tcoord = this.vertices[i];\r\n\t\t\tresult.min.x = JSM.Minimum (result.min.x, coord.x);\r\n\t\t\tresult.min.y = JSM.Minimum (result.min.y, coord.y);\r\n\t\t\tresult.max.x = JSM.Maximum (result.max.x, coord.x);\r\n\t\t\tresult.max.y = JSM.Maximum (result.max.y, coord.y);\r\n\t\t}\r\n\r\n\t\tthis.cache.boundingBox = result;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.Clear\r\n\t* Description: Makes the polygon empty.\r\n\t*/\r\n\tJSM.Polygon2D.prototype.Clear = function ()\r\n\t{\r\n\t\tthis.vertices = [];\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.ClearCache\r\n\t* Description: Clears stored values from the polygon.\r\n\t*/\r\n\tJSM.Polygon2D.prototype.ClearCache = function ()\r\n\t{\r\n\t\tthis.cache = {\r\n\t\t\tsignedArea : null,\r\n\t\t\torientation : null,\r\n\t\t\tvertexOrientations : {},\r\n\t\t\tcomplexity : null,\r\n\t\t\tboundingBox : null\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon2D.Clone\r\n\t* Description: Clones the polygon.\r\n\t* Returns:\r\n\t*\t{Polygon2D} a cloned instance\r\n\t*/\r\n\tJSM.Polygon2D.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.Polygon2D ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tvertex = this.vertices[i];\r\n\t\t\tresult.AddVertexCoord (vertex.Clone ());\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: ContourPolygon2D\r\n\t* Description: Represents a 2D polygon with more contours.\r\n\t*/\r\n\tJSM.ContourPolygon2D = function ()\r\n\t{\r\n\t\tthis.contours = null;\r\n\t\tthis.Clear ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.AddVertex\r\n\t* Description: Adds a vertex to the last contour of the polygon.\r\n\t* Parameters:\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.AddVertex = function (x, y)\r\n\t{\r\n\t\tthis.lastContour.AddVertex (x, y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.AddVertexCoord\r\n\t* Description: Adds a vertex coordinate to the last contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.AddVertexCoord = function (coord)\r\n\t{\r\n\t\tthis.lastContour.AddVertexCoord (coord);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.AddContourVertex\r\n\t* Description: Adds a vertex to the given contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.AddContourVertex = function (contourIndex, x, y)\r\n\t{\r\n\t\treturn this.contours[contourIndex].AddVertex (x, y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.AddContourVertexCoord\r\n\t* Description: Adds a vertex coordinate to the given contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t*\tcoord {Coord2D} the coordinate\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.AddContourVertexCoord = function (contourIndex, coord)\r\n\t{\r\n\t\treturn this.contours[contourIndex].AddVertexCoord (coord);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.VertexCount\r\n\t* Description: Returns the vertex count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} vertex count\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.VertexCount = function ()\r\n\t{\r\n\t\tvar vertexCount = 0;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tvertexCount += this.contours[i].VertexCount ();\r\n\t\t}\r\n\t\treturn vertexCount;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.ReverseVertices\r\n\t* Description: Reverses the orientation of the vertices.\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.ReverseVertices = function ()\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tthis.contours[i].ReverseVertices ();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.ContourVertexCount\r\n\t* Description: Returns the vertex count of the given contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t* Returns:\r\n\t*\t{integer} vertex count\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.ContourVertexCount = function (contourIndex)\r\n\t{\r\n\t\treturn this.contours[contourIndex].VertexCount ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.AddContour\r\n\t* Description:\r\n\t*\tAdds a contour to the polygon. If the given contour is null,\r\n\t*\tan empty contour is added to the polygon.\r\n\t* Parameters:\r\n\t*\tcontour {Polygon2D} the new contour\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.AddContour = function (contour)\r\n\t{\r\n\t\tif (contour === undefined || contour === null) {\r\n\t\t\tthis.lastContour = new JSM.Polygon2D ();\r\n\t\t} else {\r\n\t\t\tthis.lastContour = contour;\r\n\t\t}\r\n\t\tthis.contours.push (this.lastContour);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetLastContour\r\n\t* Description: Returns the last contour of the polygon.\r\n\t* Returns:\r\n\t*\t{Polygon2D} the result\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetLastContour = function ()\r\n\t{\r\n\t\treturn this.lastContour;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetContourVertex\r\n\t* Description: Returns the vertex of the given contour with the given index.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t*\tvertexIndex {integer} the index of the vertex\r\n\t* Returns:\r\n\t*\t{Coord2D} the vertex\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetContourVertex = function (contourIndex, vertexIndex)\r\n\t{\r\n\t\treturn this.contours[contourIndex].GetVertex (vertexIndex);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetContour\r\n\t* Description: Returns the contour with the given index.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t* Returns:\r\n\t*\t{Polygon2D} the contour\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetContour = function (index)\r\n\t{\r\n\t\treturn this.contours[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.ContourCount\r\n\t* Description: Returns the contour count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} contour count\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.ContourCount = function ()\r\n\t{\r\n\t\treturn this.contours.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetSignedArea\r\n\t* Description: Calculates the signed area of the polygon.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetSignedArea = function ()\r\n\t{\r\n\t\tvar area = 0.0;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tarea += this.contours[i].GetSignedArea ();\r\n\t\t}\r\n\t\treturn area;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetArea\r\n\t* Description: Calculates the area of the polygon.\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetArea = function ()\r\n\t{\r\n\t\tvar signedArea = this.GetSignedArea ();\r\n\t\treturn Math.abs (signedArea);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetOrientation\r\n\t* Description: Calculates the orientation of the polygon.\r\n\t* Returns:\r\n\t*\t{Orientation} the result\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetOrientation = function ()\r\n\t{\r\n\t\tif (this.lastContour === null) {\r\n\t\t\treturn JSM.Orientation.Invalid;\r\n\t\t}\r\n\t\tvar orientation = this.contours[0].GetOrientation ();\r\n\t\tif (this.contours.length == 1) {\r\n\t\t\treturn orientation;\r\n\t\t}\r\n\t\tif (orientation == JSM.Orientation.Invalid) {\r\n\t\t\treturn JSM.Orientation.Invalid;\r\n\t\t}\r\n\t\tvar i, contourOrientation;\r\n\t\tfor (i = 1; i < this.contours.length; i++) {\r\n\t\t\tcontourOrientation = this.contours[i].GetOrientation ();\r\n\t\t\tif (contourOrientation == JSM.Orientation.Invalid) {\r\n\t\t\t\treturn JSM.Orientation.Invalid;\r\n\t\t\t}\r\n\t\t\tif (orientation == contourOrientation) {\r\n\t\t\t\treturn JSM.Orientation.Invalid;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn orientation;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.GetComplexity\r\n\t* Description: Calculates the complexity of the polygon.\r\n\t* Returns:\r\n\t*\t{Complexity} the result\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.GetComplexity = function ()\r\n\t{\r\n\t\tif (this.lastContour === null) {\r\n\t\t\treturn JSM.Complexity.Invalid;\r\n\t\t}\r\n\t\tif (this.contours.length == 1) {\r\n\t\t\treturn this.contours[0].GetComplexity ();\r\n\t\t}\r\n\t\tvar i, contourComplexity;\r\n\t\tfor (i = 1; i < this.contours.length; i++) {\r\n\t\t\tcontourComplexity = this.contours[i].GetComplexity ();\r\n\t\t\tif (contourComplexity == JSM.Complexity.Invalid) {\r\n\t\t\t\treturn JSM.Complexity.Invalid;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn JSM.Complexity.Complex;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.ToArray\r\n\t* Description:\r\n\t*\tCreates an array of vertices from polygon. The result contains\r\n\t*\tnull values between contours.\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} the result\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.ToArray = function ()\r\n\t{\r\n\t\tvar vertices = [];\r\n\t\tvar i, j, contour, vertex;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tcontour = this.contours[i];\r\n\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\r\n\t\t\t\tvertex = contour.GetVertex (j);\r\n\t\t\t\tvertices.push (vertex.Clone ());\r\n\t\t\t}\r\n\t\t\tif (i < this.contours.length - 1) {\r\n\t\t\t\tvertices.push (null);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn vertices;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.FromArray\r\n\t* Description:\r\n\t*\tCreates the polygon from an array of vertices. The input should contain\r\n\t*\tnull values between contours.\r\n\t* Parameters:\r\n\t*\tvertices {Coord2D[*]} the array of vertices\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.FromArray = function (vertices)\r\n\t{\r\n\t\tthis.Clear ();\r\n\t\tthis.AddContour ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tvertex = vertices[i];\r\n\t\t\tif (vertex === null) {\r\n\t\t\t\tthis.AddContour ();\r\n\t\t\t} else {\r\n\t\t\t\tthis.AddVertex (vertex.x, vertex.y);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.Clear\r\n\t* Description: Makes the polygon empty.\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.Clear = function ()\r\n\t{\r\n\t\tthis.contours = [];\r\n\t\tthis.lastContour = null;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon2D.Clone\r\n\t* Description: Clones the polygon.\r\n\t* Returns:\r\n\t*\t{ContourPolygon2D} a cloned instance\r\n\t*/\r\n\tJSM.ContourPolygon2D.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.ContourPolygon2D ();\r\n\t\tvar i, contour;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tcontour = this.contours[i];\r\n\t\t\tresult.AddContour (contour.Clone ());\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/polygon',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Polygon\r\n\t* Description: Represents a 3D polygon.\r\n\t*/\r\n\tJSM.Polygon = function ()\r\n\t{\r\n\t\tthis.vertices = null;\r\n\t\tthis.cache = null;\r\n\t\tthis.Clear ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.AddVertex\r\n\t* Description: Adds a vertex to the polygon.\r\n\t* Parameters:\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*\tz {number} the z coordinate of the vertex\r\n\t*/\r\n\tJSM.Polygon.prototype.AddVertex = function (x, y, z)\r\n\t{\r\n\t\tthis.AddVertexCoord (new JSM.Coord (x, y, z));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.AddVertexCoord\r\n\t* Description: Adds a vertex coordinate to the polygon.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*/\r\n\tJSM.Polygon.prototype.AddVertexCoord = function (coord)\r\n\t{\r\n\t\tthis.vertices.push (coord);\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.GetVertex\r\n\t* Description: Returns the vertex with the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the vertex\r\n\t* Returns:\r\n\t*\t{Coord} the vertex\r\n\t*/\r\n\tJSM.Polygon.prototype.GetVertex = function (index)\r\n\t{\r\n\t\treturn this.vertices[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.VertexCount\r\n\t* Description: Returns the vertex count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} vertex count\r\n\t*/\r\n\tJSM.Polygon.prototype.VertexCount = function ()\r\n\t{\r\n\t\treturn this.vertices.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.GetNextVertex\r\n\t* Description: Returns the vertex index after the given one.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Polygon.prototype.GetNextVertex = function (index)\r\n\t{\r\n\t\treturn JSM.NextIndex (index, this.vertices.length);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.ReverseVertices\r\n\t* Description: Reverses the orientation of the vertices.\r\n\t*/\r\n\tJSM.Polygon.prototype.ReverseVertices = function ()\r\n\t{\r\n\t\tthis.vertices.reverse ();\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.GetPrevVertex\r\n\t* Description: Returns the vertex index before the given one.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Polygon.prototype.GetPrevVertex = function (index)\r\n\t{\r\n\t\treturn JSM.PrevIndex (index, this.vertices.length);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.GetVertexAngle\r\n\t* Description: Returns the angle of the given vertex.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.Polygon.prototype.GetVertexAngle = function (index)\r\n\t{\r\n\t\tvar prev = this.vertices[this.GetPrevVertex (index)];\r\n\t\tvar curr = this.vertices[index];\r\n\t\tvar next = this.vertices[this.GetNextVertex (index)];\r\n\t\tvar prevDir = JSM.CoordSub (prev, curr);\r\n\t\tvar nextDir = JSM.CoordSub (next, curr);\r\n\t\treturn prevDir.AngleTo (nextDir);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.GetNormal\r\n\t* Description: Calculates the normal vector of the polygon.\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.Polygon.prototype.GetNormal = function ()\r\n\t{\r\n\t\tif (this.cache.normal !== null) {\r\n\t\t\treturn this.cache.normal;\r\n\t\t}\r\n\t\tvar result = JSM.CalculateNormal (this.vertices);\r\n\t\tthis.cache.normal = result;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.ToPolygon2D\r\n\t* Description: Converts the polygon to a 2D polygon.\r\n\t* Returns:\r\n\t*\t{Polygon2D} the result\r\n\t*/\r\n\tJSM.Polygon.prototype.ToPolygon2D = function ()\r\n\t{\r\n\t\tvar normal = this.GetNormal ();\r\n\t\tvar result = new JSM.Polygon2D ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tvertex = this.vertices[i].ToCoord2D (normal);\r\n\t\t\tresult.AddVertex (vertex.x, vertex.y);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.ToArray\r\n\t* Description: Creates an array of vertices from polygon.\r\n\t* Returns:\r\n\t*\t{Coord[*]} the result\r\n\t*/\r\n\tJSM.Polygon.prototype.ToArray = function ()\r\n\t{\r\n\t\tvar vertices = [];\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tvertex = this.vertices[i];\r\n\t\t\tvertices.push (vertex.Clone ());\r\n\t\t}\r\n\t\treturn vertices;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.FromArray\r\n\t* Description: Creates the polygon from an array of vertices.\r\n\t* Parameters:\r\n\t*\tvertices {Coord[*]} the array of vertices\r\n\t*/\r\n\tJSM.Polygon.prototype.FromArray = function (vertices)\r\n\t{\r\n\t\tthis.Clear ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tvertex = vertices[i];\r\n\t\t\tthis.AddVertex (vertex.x, vertex.y, vertex.z);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.Clear\r\n\t* Description: Makes the polygon empty.\r\n\t*/\r\n\tJSM.Polygon.prototype.Clear = function ()\r\n\t{\r\n\t\tthis.vertices = [];\r\n\t\tthis.ClearCache ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.ClearCache\r\n\t* Description: Clears stored values from the polygon.\r\n\t*/\r\n\tJSM.Polygon.prototype.ClearCache = function ()\r\n\t{\r\n\t\tthis.cache = {\r\n\t\t\tnormal : null\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Polygon.Clone\r\n\t* Description: Clones the polygon.\r\n\t* Returns:\r\n\t*\t{Polygon} a cloned instance\r\n\t*/\r\n\tJSM.Polygon.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.Polygon ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tvertex = this.vertices[i];\r\n\t\t\tresult.AddVertexCoord (vertex.Clone ());\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: ContourPolygon\r\n\t* Description: Represents a 3D polygon with more contours.\r\n\t*/\r\n\tJSM.ContourPolygon = function ()\r\n\t{\r\n\t\tthis.contours = null;\r\n\t\tthis.Clear ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.AddVertex\r\n\t* Description: Adds a vertex to the last contour of the polygon.\r\n\t* Parameters:\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*\tz {number} the z coordinate of the vertex\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.AddVertex = function (x, y, z)\r\n\t{\r\n\t\tthis.lastContour.AddVertex (x, y, z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.AddVertexCoord\r\n\t* Description: Adds a vertex coordinate to the last contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.AddVertexCoord = function (coord)\r\n\t{\r\n\t\tthis.lastContour.AddVertexCoord (coord);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.AddContourVertex\r\n\t* Description: Adds a vertex to the given contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*\tz {number} the z coordinate of the vertex\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.AddContourVertex = function (contourIndex, x, y, z)\r\n\t{\r\n\t\treturn this.contours[contourIndex].AddVertex (x, y, z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.AddContourVertexCoord\r\n\t* Description: Adds a vertex coordinate to the given contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t*\tcoord {Coord} the coordinate\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.AddContourVertexCoord = function (contourIndex, coord)\r\n\t{\r\n\t\treturn this.contours[contourIndex].AddVertexCoord (coord);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.VertexCount\r\n\t* Description: Returns the vertex count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} vertex count\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.VertexCount = function ()\r\n\t{\r\n\t\tvar vertexCount = 0;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tvertexCount += this.contours[i].VertexCount ();\r\n\t\t}\r\n\t\treturn vertexCount;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.ContourVertexCount\r\n\t* Description: Returns the vertex count of the given contour of the polygon.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t* Returns:\r\n\t*\t{integer} vertex count\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.ContourVertexCount = function (contourIndex)\r\n\t{\r\n\t\treturn this.contours[contourIndex].VertexCount ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.AddContour\r\n\t* Description:\r\n\t*\tAdds a contour to the polygon. If the given contour is null,\r\n\t*\tan empty contour is added to the polygon.\r\n\t* Parameters:\r\n\t*\tcontour {Polygon} the new contour\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.AddContour = function (contour)\r\n\t{\r\n\t\tif (contour === undefined || contour === null) {\r\n\t\t\tthis.lastContour = new JSM.Polygon ();\r\n\t\t} else {\r\n\t\t\tthis.lastContour = contour;\r\n\t\t}\r\n\t\tthis.contours.push (this.lastContour);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.GetLastContour\r\n\t* Description: Returns the last contour of the polygon.\r\n\t* Returns:\r\n\t*\t{Polygon} the result\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.GetLastContour = function ()\r\n\t{\r\n\t\treturn this.lastContour;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.GetContourVertex\r\n\t* Description: Returns the vertex of the given contour with the given index.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t*\tvertexIndex {integer} the index of the vertex\r\n\t* Returns:\r\n\t*\t{Coord} the vertex\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.GetContourVertex = function (contourIndex, vertexIndex)\r\n\t{\r\n\t\treturn this.contours[contourIndex].GetVertex (vertexIndex);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.GetContour\r\n\t* Description: Returns the contour with the given index.\r\n\t* Parameters:\r\n\t*\tcontourIndex {integer} the index of the contour\r\n\t* Returns:\r\n\t*\t{Polygon} the contour\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.GetContour = function (contourIndex)\r\n\t{\r\n\t\treturn this.contours[contourIndex];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.ContourCount\r\n\t* Description: Returns the contour count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} contour count\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.ContourCount = function ()\r\n\t{\r\n\t\treturn this.contours.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.ToContourPolygon2D\r\n\t* Description: Converts the polygon to a 2D polygon.\r\n\t* Returns:\r\n\t*\t{ContourPolygon2D} the result\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.ToContourPolygon2D = function ()\r\n\t{\r\n\t\tvar normal = this.contours[0].GetNormal ();\r\n\t\tvar result = new JSM.ContourPolygon2D ();\r\n\t\tvar i, j, contour, vertex;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tresult.AddContour ();\r\n\t\t\tcontour = this.contours[i];\r\n\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\r\n\t\t\t\tvertex = contour.GetVertex (j);\r\n\t\t\t\tresult.AddVertexCoord (vertex.ToCoord2D (normal));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.ToArray\r\n\t* Description:\r\n\t*\tCreates an array of vertices from polygon. The result contains\r\n\t*\tnull values between contours.\r\n\t* Returns:\r\n\t*\t{Coord[*]} the result\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.ToArray = function ()\r\n\t{\r\n\t\tvar vertices = [];\r\n\t\tvar i, j, contour, vertex;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tcontour = this.contours[i];\r\n\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\r\n\t\t\t\tvertex = contour.GetVertex (j);\r\n\t\t\t\tvertices.push (vertex.Clone ());\r\n\t\t\t}\r\n\t\t\tif (i < this.contours.length - 1) {\r\n\t\t\t\tvertices.push (null);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn vertices;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.FromArray\r\n\t* Description:\r\n\t*\tCreates the polygon from an array of vertices. The input should contain\r\n\t*\tnull values between contours.\r\n\t* Parameters:\r\n\t*\tvertices {Coord[*]} the array of vertices\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.FromArray = function (vertices)\r\n\t{\r\n\t\tthis.Clear ();\r\n\t\tthis.AddContour ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tvertex = vertices[i];\r\n\t\t\tif (vertex === null) {\r\n\t\t\t\tthis.AddContour ();\r\n\t\t\t} else {\r\n\t\t\t\tthis.AddVertex (vertex.x, vertex.y, vertex.z);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.Clear\r\n\t* Description: Makes the polygon empty.\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.Clear = function ()\r\n\t{\r\n\t\tthis.contours = [];\r\n\t\tthis.lastContour = null;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ContourPolygon.Clone\r\n\t* Description: Clones the polygon.\r\n\t* Returns:\r\n\t*\t{ContourPolygon} a cloned instance\r\n\t*/\r\n\tJSM.ContourPolygon.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.ContourPolygon ();\r\n\t\tvar i, contour;\r\n\t\tfor (i = 0; i < this.contours.length; i++) {\r\n\t\t\tcontour = this.contours[i];\r\n\t\t\tresult.AddContour (contour.Clone ());\r\n\t\t}\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t* Function: OffsetPolygonContour\r\n\t* Description: Offsets all vertices of a polygon.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon} the polygon\r\n\t*\twidth {number} the width of the offset\r\n\t* Returns:\r\n\t*\t{Polygon} the result\r\n\t*/\r\n\tJSM.OffsetPolygonContour = function (polygon, width)\r\n\t{\r\n\t\tvar count = polygon.VertexCount ();\r\n\t\tvar normal = polygon.GetNormal ();\r\n\r\n\t\tvar prev, curr, next;\r\n\t\tvar prevVertex, currVertex, nextVertex;\r\n\t\tvar prevDir, nextDir;\r\n\t\tvar distance, offsetedCoord;\r\n\t\t\r\n\t\tvar result = new JSM.Polygon ();\r\n\t\t\r\n\t\tvar i, angle;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tprev = polygon.GetPrevVertex (i);\r\n\t\t\tcurr = i;\r\n\t\t\tnext = polygon.GetNextVertex (i);\r\n\t\t\t\r\n\t\t\tprevVertex = polygon.GetVertex (prev);\r\n\t\t\tcurrVertex = polygon.GetVertex (curr);\r\n\t\t\tnextVertex = polygon.GetVertex (next);\r\n\r\n\t\t\tprevDir = JSM.CoordSub (prevVertex, currVertex);\r\n\t\t\tnextDir = JSM.CoordSub (nextVertex, currVertex);\r\n\t\t\tangle = prevDir.AngleTo (nextDir) / 2.0;\r\n\t\t\tif (JSM.CoordOrientation (prevVertex, currVertex, nextVertex, normal) == JSM.Orientation.Clockwise) {\r\n\t\t\t\tangle = Math.PI - angle;\r\n\t\t\t}\r\n\r\n\t\t\tdistance = width / Math.sin (angle);\r\n\t\t\toffsetedCoord = currVertex.Clone ();\r\n\t\t\toffsetedCoord.Offset (nextDir, distance);\r\n\t\t\toffsetedCoord.Rotate (normal, angle, currVertex);\r\n\t\t\tresult.AddVertex (offsetedCoord.x, offsetedCoord.y, offsetedCoord.z);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/cutpolygon',[\"../core/jsm\"],function(JSM){\r\n\tJSM.CutVertexType = {\r\n\t\tLeft : 1,\r\n\t\tRight : 2,\r\n\t\tCut : 3\r\n\t};\r\n\r\n\tJSM.PolygonCutter = function (geometryInterface)\r\n\t{\r\n\t\tthis.geometryInterface = geometryInterface;\r\n\t\tthis.Reset ();\r\n\t};\r\n\r\n\tJSM.PolygonCutter.prototype.Cut = function (polygon, aSidePolygons, bSidePolygons, cutPolygons)\r\n\t{\r\n\t\tthis.Reset ();\r\n\t\t\r\n\t\tvar allVertexType = this.CalculateOriginalPolygonData (polygon);\r\n\t\tif (allVertexType !== null) {\r\n\t\t\tvar cloned = polygon.Clone ();\r\n\t\t\tif (allVertexType == JSM.CutVertexType.Left) {\r\n\t\t\t\taSidePolygons.push (cloned);\r\n\t\t\t} else if (allVertexType == JSM.CutVertexType.Right) {\r\n\t\t\t\tbSidePolygons.push (cloned);\r\n\t\t\t} else {\r\n\t\t\t\tcutPolygons.push (cloned);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.CalculateCutPolygonData ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.CalculateEntryVertices ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.CalculateCuttedPolygons (aSidePolygons, bSidePolygons)) {\r\n\t\t\treturn false;\r\n\t\t}\t\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PolygonCutter.prototype.Reset = function ()\r\n\t{\r\n\t\tthis.originalPolygon = null;\r\n\t\tthis.originalPolygonVertexTypes = null;\r\n\t\tthis.cutPolygon = null;\r\n\t\tthis.cutPolygonVertexTypes = null;\r\n\t\tthis.cutPolygonVertexDistances = null;\r\n\t\tthis.cutVertexIndices = null;\r\n\t\tthis.entryVertices = null;\r\n\t\tthis.entryVertexTypes = null;\r\n\t};\r\n\r\n\tJSM.PolygonCutter.prototype.CalculateOriginalPolygonData = function (polygon)\r\n\t{\r\n\t\tthis.originalPolygon = polygon;\r\n\t\tthis.originalPolygonVertexTypes = [];\r\n\t\tvar aSideFound = false;\r\n\t\tvar bSideFound = false;\r\n\t\t\r\n\t\tvar i, vertex, type;\r\n\t\tfor (i = 0; i < this.originalPolygon.VertexCount (); i++) {\r\n\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\ttype = this.geometryInterface.getVertexSide (vertex);\r\n\t\t\tif (type == JSM.CutVertexType.Left) {\r\n\t\t\t\taSideFound = true;\r\n\t\t\t} else if (type == JSM.CutVertexType.Right) {\r\n\t\t\t\tbSideFound = true;\r\n\t\t\t}\r\n\t\t\tthis.originalPolygonVertexTypes.push (type);\r\n\t\t}\r\n\t\t\r\n\t\tif (aSideFound && bSideFound) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif (aSideFound) {\r\n\t\t\treturn JSM.CutVertexType.Left;\r\n\t\t} else if (bSideFound) {\r\n\t\t\treturn JSM.CutVertexType.Right;\r\n\t\t}\r\n\t\t\r\n\t\treturn JSM.CutVertexType.Cut;\r\n\t};\r\n\r\n\tJSM.PolygonCutter.prototype.CalculateCutPolygonData = function ()\r\n\t{\r\n\t\tfunction IsIntersectionVertex (cutPolygonVertexTypes, originalType)\r\n\t\t{\r\n\t\t\tif (cutPolygonVertexTypes.length === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar prevType = cutPolygonVertexTypes[cutPolygonVertexTypes.length - 1];\r\n\t\t\tif (prevType == JSM.CutVertexType.Cut || originalType == JSM.CutVertexType.Cut) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn prevType != originalType;\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddCutVertexToPolygon (polygonCutter, vertex, type)\r\n\t\t{\r\n\t\t\tpolygonCutter.cutPolygon.AddVertexCoord (vertex);\r\n\t\t\tpolygonCutter.cutPolygonVertexTypes.push (type);\r\n\t\t\tif (type == JSM.CutVertexType.Cut) {\r\n\t\t\t\tpolygonCutter.cutVertexIndices.push (polygonCutter.cutPolygonVertexTypes.length - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddIntersectionVertex (polygonCutter, originalIndex)\r\n\t\t{\r\n\t\t\tvar prevIndex = polygonCutter.originalPolygon.GetPrevVertex (originalIndex);\r\n\t\t\tvar prevVertex = polygonCutter.originalPolygon.GetVertex (prevIndex);\r\n\t\t\tvar currVertex = polygonCutter.originalPolygon.GetVertex (originalIndex);\r\n\t\t\tvar intersection = polygonCutter.geometryInterface.getIntersectionVertex (prevVertex, currVertex);\r\n\t\t\tif (intersection === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tAddCutVertexToPolygon (polygonCutter, intersection, JSM.CutVertexType.Cut);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddOriginalVertex (polygonCutter, originalIndex, originalType)\r\n\t\t{\r\n\t\t\tvar vertex = polygonCutter.originalPolygon.GetVertex (originalIndex).Clone ();\r\n\t\t\tAddCutVertexToPolygon (polygonCutter, vertex, originalType);\r\n\r\n\t\t\tvar vertexCount = polygonCutter.originalPolygon.VertexCount ();\r\n\t\t\tvar prevType = polygonCutter.originalPolygonVertexTypes[JSM.PrevIndex (originalIndex, vertexCount)];\r\n\t\t\tvar nextType = polygonCutter.originalPolygonVertexTypes[JSM.NextIndex (originalIndex, vertexCount)];\r\n\t\t\tif (originalType == JSM.CutVertexType.Cut && prevType == nextType) {\r\n\t\t\t\tAddCutVertexToPolygon (polygonCutter, vertex, originalType);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SortCutVertices (cutPolygon, cutVertexIndices, cutPolygonVertexDistances)\r\n\t\t{\r\n\t\t\tif (cutVertexIndices.length < 2) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tJSM.BubbleSort (cutVertexIndices,\r\n\t\t\t\tfunction (a, b) {\r\n\t\t\t\t\tvar aDist = cutPolygonVertexDistances[a];\r\n\t\t\t\t\tvar bDist = cutPolygonVertexDistances[b];\r\n\t\t\t\t\treturn JSM.IsLower (aDist, bDist);\r\n\t\t\t\t},\r\n\t\t\t\tfunction (i, j) {\r\n\t\t\t\t\tJSM.SwapArrayValues (cutVertexIndices, i, j);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\t\r\n\r\n\t\tthis.cutPolygon = this.geometryInterface.createPolygon ();\r\n\t\tthis.cutPolygonVertexTypes = [];\r\n\t\tthis.cutVertexIndices = [];\r\n\t\t\r\n\t\tvar vertexCount = this.originalPolygon.VertexCount ();\r\n\t\tvar i, lastVertex, originalIndex, originalType;\r\n\t\tfor (i = 0; i <= vertexCount; i++) {\r\n\t\t\tlastVertex = (i === vertexCount);\r\n\t\t\toriginalIndex = i;\r\n\t\t\tif (lastVertex) {\r\n\t\t\t\toriginalIndex = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toriginalType = this.originalPolygonVertexTypes[originalIndex];\r\n\t\t\tif (IsIntersectionVertex (this.cutPolygonVertexTypes, originalType)) {\r\n\t\t\t\tAddIntersectionVertex (this, originalIndex);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!lastVertex) {\r\n\t\t\t\tAddOriginalVertex (this, originalIndex, originalType);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.cutPolygonVertexDistances = this.geometryInterface.getVertexDistances (this.cutPolygon);\r\n\t\tif (!SortCutVertices (this.cutPolygon, this.cutVertexIndices, this.cutPolygonVertexDistances)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PolygonCutter.prototype.CalculateEntryVertices = function ()\r\n\t{\r\n\t\tfunction GetEntryVertexType (cutPolygonVertexTypes, cutPolygonVertexDistances, currIndex)\r\n\t\t{\r\n\t\t\tvar currSideType = cutPolygonVertexTypes[currIndex];\r\n\t\t\tif (currSideType != JSM.CutVertexType.Cut) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar prevIndex = JSM.PrevIndex (currIndex, cutPolygonVertexTypes.length);\r\n\t\t\tvar nextIndex = JSM.NextIndex (currIndex, cutPolygonVertexTypes.length);\r\n\t\t\tvar prevSideType = cutPolygonVertexTypes[prevIndex];\r\n\t\t\tvar nextSideType = cutPolygonVertexTypes[nextIndex];\r\n\r\n\t\t\tvar currVertexDistance = cutPolygonVertexDistances[currIndex];\r\n\t\t\tvar prevVertexDistance = cutPolygonVertexDistances[prevIndex];\r\n\t\t\tvar nextVertexDistance = cutPolygonVertexDistances[nextIndex];\r\n\t\t\t\r\n\t\t\tif (prevSideType == JSM.CutVertexType.Right) {\r\n\t\t\t\tif (nextSideType == JSM.CutVertexType.Left) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t} else if (nextSideType == JSM.CutVertexType.Cut) {\r\n\t\t\t\t\tif (JSM.IsLowerOrEqual (currVertexDistance, nextVertexDistance)) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (prevSideType == JSM.CutVertexType.Left) {\r\n\t\t\t\tif (nextSideType == JSM.CutVertexType.Right) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t} else if (nextSideType == JSM.CutVertexType.Cut) {\r\n\t\t\t\t\tif (JSM.IsGreaterOrEqual (currVertexDistance, nextVertexDistance)) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (prevSideType == JSM.CutVertexType.Cut) {\r\n\t\t\t\tif (nextSideType == JSM.CutVertexType.Left) {\r\n\t\t\t\t\tif (JSM.IsLowerOrEqual (currVertexDistance, prevVertexDistance)) {\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (nextSideType == JSM.CutVertexType.Right) {\r\n\t\t\t\t\tif (JSM.IsGreaterOrEqual (currVertexDistance, prevVertexDistance)) {\r\n\t\t\t\t\t\treturn -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tthis.entryVertices = [];\r\n\t\tthis.entryVertexTypes = [];\r\n\t\tvar i, vertexIndex, vertexType;\r\n\t\tfor (i = 0; i < this.cutVertexIndices.length; i++) {\r\n\t\t\tvertexIndex = this.cutVertexIndices[i];\r\n\t\t\tvertexType = GetEntryVertexType (this.cutPolygonVertexTypes, this.cutPolygonVertexDistances, vertexIndex);\r\n\t\t\tif (vertexType !== 0) {\r\n\t\t\t\tthis.entryVertices.push (vertexIndex);\r\n\t\t\t\tthis.entryVertexTypes.push (vertexType);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (this.entryVertices.length === 0 || this.entryVertices.length % 2 !== 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PolygonCutter.prototype.CalculateCuttedPolygons = function (aSidePolygons, bSidePolygons)\r\n\t{\r\n\t\tfunction AddOneSideCuttedPolygons (polygonCutter, aSidePolygons, bSidePolygons, reversed)\r\n\t\t{\r\n\t\t\tfunction AddEntryPairToArray (entryPairs, entryVertices, fromIndex, toIndex)\r\n\t\t\t{\r\n\t\t\t\tentryPairs[entryVertices[fromIndex]] = entryVertices[toIndex];\r\n\t\t\t\tentryPairs[entryVertices[toIndex]] = entryVertices[fromIndex];\r\n\t\t\t}\r\n\r\n\t\t\tfunction RemoveEntryPairFromArray (entryPairs, index)\r\n\t\t\t{\r\n\t\t\t\tentryPairs[entryPairs[index]] = -1;\r\n\t\t\t\tentryPairs[index] = -1;\r\n\t\t\t}\r\n\r\n\t\t\tfunction CreateEntryPairsArray (cutPolygon, entryVertices, entryVertexTypes)\r\n\t\t\t{\r\n\t\t\t\tfunction FindPairIndex (entryPairs, entryVertices, entryVertexTypes, startIndex)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tfor (i = startIndex + 1; i < entryVertices.length; i++) {\r\n\t\t\t\t\t\tif (entryPairs[entryVertices[i]] != -1) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (entryVertexTypes[startIndex] != entryVertexTypes[i]) {\r\n\t\t\t\t\t\t\treturn i;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar entryPairs = [];\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < cutPolygon.VertexCount (); i++) {\r\n\t\t\t\t\tentryPairs.push (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar pairIndex;\r\n\t\t\t\tfor (i = 0; i < entryVertices.length; i++) {\r\n\t\t\t\t\tif (entryPairs[entryVertices[i]] != -1) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpairIndex = FindPairIndex (entryPairs, entryVertices, entryVertexTypes, i);\r\n\t\t\t\t\tif (pairIndex == -1) {\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tAddEntryPairToArray (entryPairs, entryVertices, i, pairIndex);\r\n\t\t\t\t}\r\n\t\t\t\treturn entryPairs;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction GetNextVertex (currVertexIndex, cutPolygon, entryPairs)\r\n\t\t\t{\r\n\t\t\t\tif (entryPairs[currVertexIndex] != -1) {\r\n\t\t\t\t\tvar nextVertex = entryPairs[currVertexIndex];\r\n\t\t\t\t\tRemoveEntryPairFromArray (entryPairs, currVertexIndex);\r\n\t\t\t\t\treturn nextVertex;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn JSM.NextIndex (currVertexIndex, cutPolygon.VertexCount ());\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tfunction AddCutPolygon (polygonCutter, entryPairs, currEntryVertex, aSidePolygons, bSidePolygons)\r\n\t\t\t{\r\n\t\t\t\tfunction AddVertexIfNotDuplicated (polygon, vertex)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar vertexCount = polygon.VertexCount ();\r\n\t\t\t\t\tif (vertexCount > 0 && polygon.GetVertex (vertexCount - 1).IsEqual (vertex)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpolygon.AddVertexCoord (vertex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar startVertexIndex = polygonCutter.entryVertices[currEntryVertex];\r\n\t\t\t\tif (entryPairs[startVertexIndex] !== -1) {\r\n\t\t\t\t\tvar currPolygon = polygonCutter.geometryInterface.createPolygon ();\r\n\t\t\t\t\tcurrPolygon.AddVertexCoord (polygonCutter.cutPolygon.GetVertex (startVertexIndex).Clone ());\r\n\t\t\t\t\tvar currVertexIndex = GetNextVertex (startVertexIndex, polygonCutter.cutPolygon, entryPairs);\r\n\t\t\t\t\tvar polygonSide = null;\r\n\t\t\t\t\twhile (currVertexIndex != startVertexIndex) {\r\n\t\t\t\t\t\tif (polygonSide === null) {\r\n\t\t\t\t\t\t\tif (polygonCutter.cutPolygonVertexTypes[currVertexIndex] !== JSM.CutVertexType.Cut) {\r\n\t\t\t\t\t\t\t\tpolygonSide = polygonCutter.cutPolygonVertexTypes[currVertexIndex];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tAddVertexIfNotDuplicated (currPolygon, polygonCutter.cutPolygon.GetVertex (currVertexIndex).Clone ());\r\n\t\t\t\t\t\tcurrVertexIndex = GetNextVertex (currVertexIndex, polygonCutter.cutPolygon, entryPairs);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (currPolygon.VertexCount () > 2) {\r\n\t\t\t\t\t\tif (polygonSide == JSM.CutVertexType.Left) {\r\n\t\t\t\t\t\t\taSidePolygons.push (currPolygon);\r\n\t\t\t\t\t\t} else if (polygonSide == JSM.CutVertexType.Right) {\r\n\t\t\t\t\t\t\tbSidePolygons.push (currPolygon);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar entryPairs = CreateEntryPairsArray (polygonCutter.cutPolygon, polygonCutter.entryVertices, polygonCutter.entryVertexTypes);\r\n\t\t\tif (entryPairs === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar currEntryVertex = reversed ? polygonCutter.entryVertices.length - 1 : 0;\r\n\t\t\twhile (currEntryVertex >= 0 && currEntryVertex < polygonCutter.entryVertices.length) {\r\n\t\t\t\tAddCutPolygon (polygonCutter, entryPairs, currEntryVertex, aSidePolygons, bSidePolygons);\r\n\t\t\t\tcurrEntryVertex = reversed ? currEntryVertex - 1 : currEntryVertex + 1;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (!AddOneSideCuttedPolygons (this, aSidePolygons, bSidePolygons, false)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!AddOneSideCuttedPolygons (this, aSidePolygons, bSidePolygons, true)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CutPolygon2DWithLine\r\n\t* Description:\r\n\t*\tCuts a polygon with a line. The result array contains cutted\r\n\t*\tpolygons grouped by their position to the line.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon2D} the polygon\r\n\t*\tline {Line2D} the line\r\n\t*\tleftPolygons {Polygon2D[*]} (out) polygons on the left of the line\r\n\t*\trightPolygons {Polygon2D[*]} (out) polygons on the right of the line\r\n\t*\tcutPolygons {Polygon2D[*]} (out) polygons on the line\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.CutPolygon2DWithLine = function (polygon, line, leftPolygons, rightPolygons, cutPolygons)\r\n\t{\r\n\t\tvar geometryInterface = {\r\n\t\t\tcreatePolygon : function () {\r\n\t\t\t\treturn new JSM.Polygon2D ();\r\n\t\t\t},\r\n\t\t\tgetVertexSide : function (vertex) {\r\n\t\t\t\tvar position = line.CoordPosition (vertex);\r\n\t\t\t\tvar type = JSM.CutVertexType.Cut;\r\n\t\t\t\tif (position == JSM.CoordLinePosition2D.CoordAtLineLeft) {\r\n\t\t\t\t\ttype = JSM.CutVertexType.Left;\r\n\t\t\t\t} else if (position == JSM.CoordLinePosition2D.CoordAtLineRight) {\r\n\t\t\t\t\ttype = JSM.CutVertexType.Right;\r\n\t\t\t\t}\r\n\t\t\t\treturn type;\r\n\t\t\t},\r\n\t\t\tgetIntersectionVertex : function (prevVertex, currVertex) {\r\n\t\t\t\tvar edgeLine = new JSM.Line2D (currVertex, JSM.CoordSub2D (currVertex, prevVertex));\r\n\t\t\t\tvar intersection = new JSM.Coord2D (0.0, 0.0);\r\n\t\t\t\tvar lineLinePosition = line.LinePosition (edgeLine, intersection);\r\n\t\t\t\tif (lineLinePosition != JSM.LineLinePosition2D.LinesIntersectsOnePoint) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn intersection;\r\n\t\t\t},\r\n\t\t\tgetVertexDistances : function (polygon) {\r\n\t\t\t\tvar origo = new JSM.Coord2D (0.0, 0.0);\r\n\t\t\t\tvar refLineStart = line.start.Clone ();\r\n\t\t\t\tvar refLineDir = line.direction.Clone ().Rotate (-Math.PI / 2.0, origo);\r\n\t\t\t\tvar refLine = new JSM.Line2D (refLineStart, refLineDir);\r\n\t\t\t\tvar i, vertex;\r\n\t\t\t\tvar distances = [];\r\n\t\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\t\t\tdistances.push (refLine.CoordSignedDistance (vertex));\r\n\t\t\t\t}\r\n\t\t\t\treturn distances;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar cutter = new JSM.PolygonCutter (geometryInterface);\r\n\t\treturn cutter.Cut (polygon, leftPolygons, rightPolygons, cutPolygons);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CutPolygonWithPlane\r\n\t* Description:\r\n\t*\tCuts a polygon with a plane. The result array contains cutted\r\n\t*\tpolygons grouped by their position to the plane.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon} the polygon\r\n\t*\tplane {Plane} the plane\r\n\t*\tfrontPolygons {Polygon[*]} (out) polygons in front of the plane\r\n\t*\tbackPolygons {Polygon[*]} (out) polygons at the back of the plane\r\n\t*\tcutPolygons {Polygon[*]} (out) polygons on the plane\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.CutPolygonWithPlane = function (polygon, plane, frontPolygons, backPolygons, cutPolygons)\r\n\t{\r\n\t\tvar geometryInterface = {\r\n\t\t\tcreatePolygon : function () {\r\n\t\t\t\treturn new JSM.Polygon ();\r\n\t\t\t},\r\n\t\t\tgetVertexSide : function (vertex) {\r\n\t\t\t\tvar position = plane.CoordPosition (vertex);\r\n\t\t\t\tvar type = JSM.CutVertexType.Cut;\r\n\t\t\t\tif (position == JSM.CoordPlanePosition.CoordInFrontOfPlane) {\r\n\t\t\t\t\ttype = JSM.CutVertexType.Left;\r\n\t\t\t\t} else if (position == JSM.CoordPlanePosition.CoordAtBackOfPlane) {\r\n\t\t\t\t\ttype = JSM.CutVertexType.Right;\r\n\t\t\t\t}\r\n\t\t\t\treturn type;\r\n\t\t\t},\r\n\t\t\tgetIntersectionVertex : function (prevVertex, currVertex) {\r\n\t\t\t\tvar line = new JSM.Line (currVertex, JSM.CoordSub (currVertex, prevVertex));\r\n\t\t\t\tvar intersection = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\t\tvar linePlanePosition = plane.LinePosition (line, intersection);\r\n\t\t\t\tif (linePlanePosition != JSM.LinePlanePosition.LineIntersectsPlane) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn intersection;\r\n\t\t\t},\r\n\t\t\tgetVertexDistances : function (polygon) {\r\n\t\t\t\tvar polygonNormal = polygon.GetNormal ();\r\n\t\t\t\tvar planeNormal = new JSM.Vector (plane.a, plane.b, plane.c);\r\n\t\t\t\tvar refPlaneNormal = JSM.VectorCross (planeNormal, polygonNormal);\r\n\t\t\t\tvar refPlaneOrigin = polygon.GetVertex (0);\r\n\t\t\t\tvar refPlane = JSM.GetPlaneFromCoordAndDirection (refPlaneOrigin, refPlaneNormal);\r\n\t\t\t\tvar i, vertex;\r\n\t\t\t\tvar distances = [];\r\n\t\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\t\t\tdistances.push (refPlane.CoordSignedDistance (vertex));\r\n\t\t\t\t}\r\n\t\t\t\treturn distances;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar cutter = new JSM.PolygonCutter (geometryInterface);\r\n\t\treturn cutter.Cut (polygon, frontPolygons, backPolygons, cutPolygons);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SegmentPolygon2D\r\n\t* Description: Segments up a polygon along x and y axis.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon2D} the polygon\r\n\t*\txSegments {integer} x segment number\r\n\t*\tySegments {integer} y segment number\r\n\t* Returns:\r\n\t*\t{Polygon[*]} result polygons\r\n\t*/\r\n\tJSM.SegmentPolygon2D = function (polygon, xSegments, ySegments)\r\n\t{\r\n\t\tfunction CutPolygonsOneDirection (inputPolygons, resultPolygons, segmentCount, segmentSize, startCoordinate, segmentDir, cutDir)\r\n\t\t{\r\n\t\t\tfunction CutPolygon (polygon, line, leftPolygons, rightPolygons)\r\n\t\t\t{\r\n\t\t\t\tvar left = [];\r\n\t\t\t\tvar right = [];\r\n\t\t\t\tvar cut = [];\r\n\t\t\t\tif (!JSM.CutPolygon2DWithLine (polygon, line, left, right, cut)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < left.length; i++) {\r\n\t\t\t\t\tleftPolygons.push (left[i]);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < right.length; i++) {\r\n\t\t\t\t\trightPolygons.push (right[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar polygonsToProcess = inputPolygons;\r\n\t\t\tvar startCoord = startCoordinate.Clone ();\r\n\t\t\tvar i, j, line, newPolygonsToProcess;\r\n\t\t\tfor (i = 1; i < segmentCount; i++) {\r\n\t\t\t\tstartCoord.Offset (segmentDir, segmentSize);\r\n\t\t\t\tline = new JSM.Line2D (startCoord, cutDir);\r\n\t\t\t\tnewPolygonsToProcess = [];\r\n\t\t\t\tfor (j = 0; j < polygonsToProcess.length; j++) {\r\n\t\t\t\t\tCutPolygon (polygonsToProcess[j], line, resultPolygons, newPolygonsToProcess);\r\n\t\t\t\t}\r\n\t\t\t\tpolygonsToProcess = newPolygonsToProcess;\r\n\t\t\t}\r\n\t\t\tfor (j = 0; j < polygonsToProcess.length; j++) {\r\n\t\t\t\tresultPolygons.push (polygonsToProcess[j]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar boundingBox = polygon.GetBoundingBox ();\r\n\t\tvar xSize = boundingBox.max.x - boundingBox.min.x;\r\n\t\tvar ySize = boundingBox.max.y - boundingBox.min.y;\r\n\t\tvar xSegmentSize = xSize / xSegments;\r\n\t\tvar ySegmentSize = ySize / ySegments;\r\n\r\n\t\tvar originalPolygons = [polygon];\r\n\t\tvar bottomLeft = new JSM.Coord2D (boundingBox.min.x, boundingBox.min.y);\r\n\t\tvar topLeft = new JSM.Coord2D (boundingBox.min.x, boundingBox.max.y);\r\n\r\n\t\tvar xCuttedPolygons = [];\r\n\t\tvar yCuttedPolygons = [];\r\n\t\tCutPolygonsOneDirection (originalPolygons, xCuttedPolygons, xSegments, xSegmentSize, bottomLeft, new JSM.Vector2D (1.0, 0.0), new JSM.Vector2D (0.0, 1.0));\r\n\t\tCutPolygonsOneDirection (xCuttedPolygons, yCuttedPolygons, ySegments, ySegmentSize, topLeft, new JSM.Vector2D (0.0, -1.0), new JSM.Vector2D (1.0, 0.0));\r\n\t\treturn yCuttedPolygons;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/triangulation',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ConvertContourPolygonToPolygon2D = function (inputPolygon, vertexMap)\r\n\t{\r\n\t\tfunction AddResultVertex (resultPolygon, vertex, vertexMap, originalContour, originalVertex)\r\n\t\t{\r\n\t\t\tresultPolygon.AddVertexCoord (vertex);\r\n\t\t\tif (vertexMap !== undefined && vertexMap !== null) {\r\n\t\t\t\tvertexMap.push ([originalContour, originalVertex]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddContour (inputPolygon, resultPolygon, holeIndex, vertexMap, conversionData)\r\n\t\t{\r\n\t\t\tfunction GetEntryPoint (inputPolygon, resultPolygon, holeIndex, conversionData)\r\n\t\t\t{\r\n\t\t\t\tfunction IsEntryPoint (inputPolygon, resultPolygon, resultVertex, holeVertex, conversionData)\r\n\t\t\t\t{\r\n\t\t\t\t\tfunction SegmentIntersectsPolygon (polygon, segmentBeg, segmentEnd)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar sector = new JSM.Sector2D (segmentBeg, segmentEnd);\r\n\t\t\t\t\t\tvar position = polygon.SectorPosition (sector, -1, -1);\r\n\t\t\t\t\t\tif (position == JSM.SectorPolygonPosition2D.IntersectionOnePoint || position == JSM.SectorPolygonPosition2D.IntersectionCoincident) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (SegmentIntersectsPolygon (resultPolygon, resultVertex, holeVertex)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar i, hole;\r\n\t\t\t\t\tfor (i = 1; i < inputPolygon.ContourCount (); i++) {\r\n\t\t\t\t\t\tif (conversionData.addedHoles[i] !== undefined) {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\thole = inputPolygon.GetContour (i);\r\n\t\t\t\t\t\tif (SegmentIntersectsPolygon (hole, resultVertex, holeVertex)) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction IsExistingEntryPosition (coord, conversionData)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tfor (i = 0; i < conversionData.entryPositions.length; i++) {\r\n\t\t\t\t\t\tif (coord.IsEqual (conversionData.entryPositions[i])) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar holePolygon = inputPolygon.GetContour (holeIndex);\r\n\t\t\t\tvar resultVertexIndex, holeVertexIndex, resultVertex, holeVertex;\r\n\t\t\t\tfor (resultVertexIndex = 0; resultVertexIndex < resultPolygon.VertexCount (); resultVertexIndex++) {\r\n\t\t\t\t\tfor (holeVertexIndex = 0; holeVertexIndex < holePolygon.VertexCount (); holeVertexIndex++) {\r\n\t\t\t\t\t\tresultVertex = resultPolygon.GetVertex (resultVertexIndex);\r\n\t\t\t\t\t\tholeVertex = holePolygon.GetVertex (holeVertexIndex);\r\n\t\t\t\t\t\tif (IsEntryPoint (inputPolygon, resultPolygon, resultVertex, holeVertex, conversionData)) {\r\n\t\t\t\t\t\t\tif (IsExistingEntryPosition (resultVertex, conversionData) || IsExistingEntryPosition (holeVertex, conversionData)) {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tconversionData.entryPositions.push (resultVertex.Clone ());\r\n\t\t\t\t\t\t\tconversionData.entryPositions.push (holeVertex.Clone ());\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tbeg : resultVertexIndex,\r\n\t\t\t\t\t\t\t\tend : holeVertexIndex\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction AddHole (resultPolygon, inputPolygon, holeIndex, entryPoint, vertexMap)\r\n\t\t\t{\r\n\t\t\t\tvar holePolygon = inputPolygon.GetContour (holeIndex);\r\n\t\t\t\tvar mainContourBeg = entryPoint.beg;\r\n\t\t\t\tvar mainEntryVertex = resultPolygon.GetVertex (mainContourBeg).Clone ();\r\n\t\t\t\tresultPolygon.ShiftVertices (mainContourBeg + 1);\r\n\r\n\t\t\t\tvar mainEntryContourIndex = 0;\r\n\t\t\t\tvar mainEntryVertexIndex = 0;\r\n\t\t\t\tif (vertexMap !== undefined && vertexMap !== null) {\r\n\t\t\t\t\tmainEntryContourIndex = vertexMap[mainContourBeg][0];\r\n\t\t\t\t\tmainEntryVertexIndex = vertexMap[mainContourBeg][1];\r\n\t\t\t\t\tJSM.ShiftArray (vertexMap, mainContourBeg + 1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar contourBeg = entryPoint.end;\r\n\t\t\t\tvar contourEnd = holePolygon.GetPrevVertex (contourBeg);\r\n\t\t\t\tholePolygon.EnumerateVertices (contourBeg, contourEnd, function (index) {\r\n\t\t\t\t\tAddResultVertex (resultPolygon, holePolygon.GetVertex (index).Clone (), vertexMap, holeIndex, index);\r\n\t\t\t\t});\r\n\t\t\t\tAddResultVertex (resultPolygon, holePolygon.GetVertex (contourBeg).Clone (), vertexMap, holeIndex, contourBeg);\r\n\t\t\t\tAddResultVertex (resultPolygon, mainEntryVertex, vertexMap, mainEntryContourIndex, mainEntryVertexIndex);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar entryPoint = GetEntryPoint (inputPolygon, resultPolygon, holeIndex, conversionData);\r\n\t\t\tif (entryPoint === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tAddHole (resultPolygon, inputPolygon, holeIndex, entryPoint, vertexMap);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tvar contourCount = inputPolygon.ContourCount ();\r\n\t\tvar mainContour = inputPolygon.GetContour (0);\r\n\t\tvar resultPolygon = new JSM.Polygon2D ();\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < mainContour.VertexCount (); i++) {\r\n\t\t\tvertex = mainContour.GetVertex (i);\r\n\t\t\tAddResultVertex (resultPolygon, vertex.Clone (), vertexMap, 0, i);\r\n\t\t}\r\n\t\tif (contourCount == 1) {\r\n\t\t\treturn resultPolygon;\r\n\t\t}\r\n\t\t\r\n\t\tvar holeQueue = [];\r\n\t\tvar holeIndex;\r\n\t\tfor (holeIndex = 1; holeIndex < contourCount; holeIndex++) {\r\n\t\t\tholeQueue.push (holeIndex);\r\n\t\t}\r\n\t\t\r\n\t\tvar conversionData = {\r\n\t\t\taddedHoles : {},\r\n\t\t\tholeTryouts : {},\r\n\t\t\tentryPositions : []\r\n\t\t};\r\n\t\t\r\n\t\twhile (holeQueue.length > 0) {\r\n\t\t\tholeIndex = holeQueue.shift ();\r\n\t\t\tif (AddContour (inputPolygon, resultPolygon, holeIndex, vertexMap, conversionData)) {\r\n\t\t\t\tconversionData.addedHoles[holeIndex] = true;\r\n\t\t\t} else {\r\n\t\t\t\tif (conversionData.holeTryouts[holeIndex] === undefined) {\r\n\t\t\t\t\tconversionData.holeTryouts[holeIndex] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tconversionData.holeTryouts[holeIndex] += 1;\r\n\t\t\t\tif (conversionData.holeTryouts[holeIndex] > 10) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tholeQueue.push (holeIndex);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn resultPolygon;\r\n\t};\r\n\r\n\tJSM.TriangulateConvexPolygon = function (polygon)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar i;\r\n\t\tfor (i = 1; i < polygon.VertexCount () - 1; i++) {\r\n\t\t\tresult.push ([0, i, i + 1]);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.TriangulateConcavePolygon2D = function (inputPolygon)\r\n\t{\r\n\t\tfunction GetInitialVertexMap (count)\r\n\t\t{\r\n\t\t\tvar result = [];\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tresult[i] = i;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction FindSplitDiagonal (polygon)\r\n\t\t{\r\n\t\t\tvar count = polygon.VertexCount ();\r\n\t\t\tvar i, j;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tfor (j = 0; j < count; j++) {\r\n\t\t\t\t\tif (i == j) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (polygon.IsDiagonal (i, j)) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tbeg : i,\r\n\t\t\t\t\t\t\tend : j\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfunction SplitPolygon (polygonData, diagonal)\r\n\t\t{\r\n\t\t\tfunction AddVertex (polygonData, resultData, index)\r\n\t\t\t{\r\n\t\t\t\tresultData.polygon.AddVertexCoord (polygonData.polygon.GetVertex (index));\r\n\t\t\t\tresultData.map.push (polygonData.map[index]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar resultData1 = {\r\n\t\t\t\tpolygon : new JSM.Polygon2D (),\r\n\t\t\t\tmap : []\r\n\t\t\t};\r\n\t\t\tvar resultData2 = {\r\n\t\t\t\tpolygon : new JSM.Polygon2D (),\r\n\t\t\t\tmap : []\r\n\t\t\t};\r\n\r\n\t\t\tvar beg, end;\r\n\t\t\t\r\n\t\t\tbeg = diagonal.beg;\r\n\t\t\tend = polygonData.polygon.GetPrevVertex (diagonal.end);\r\n\t\t\tAddVertex (polygonData, resultData1, diagonal.end);\r\n\t\t\tpolygonData.polygon.EnumerateVertices (beg, end, function (index) {\r\n\t\t\t\tAddVertex (polygonData, resultData1, index);\r\n\t\t\t});\r\n\r\n\t\t\tbeg = diagonal.end;\r\n\t\t\tend = polygonData.polygon.GetPrevVertex (diagonal.beg);\r\n\t\t\tAddVertex (polygonData, resultData2, diagonal.beg);\r\n\t\t\tpolygonData.polygon.EnumerateVertices (beg, end, function (index) {\r\n\t\t\t\tAddVertex (polygonData, resultData2, index);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresultData1 : resultData1,\r\n\t\t\t\tresultData2 : resultData2\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tvar polygonStack = [];\r\n\t\tvar count = inputPolygon.VertexCount ();\r\n\t\tvar inputMap = GetInitialVertexMap (count);\r\n\t\tpolygonStack.push ({\r\n\t\t\tpolygon : inputPolygon,\r\n\t\t\tmap : inputMap\r\n\t\t});\r\n\t\t\r\n\t\tvar result = [];\r\n\t\tvar polygonData, vertexCount, diagonal, resultData;\r\n\t\twhile (polygonStack.length > 0) {\r\n\t\t\tpolygonData = polygonStack.pop ();\r\n\t\t\tvertexCount = polygonData.polygon.VertexCount ();\r\n\t\t\tif (vertexCount < 3) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (vertexCount == 3) {\r\n\t\t\t\tresult.push (polygonData.map);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tdiagonal = FindSplitDiagonal (polygonData.polygon);\r\n\t\t\tif (diagonal === null) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tresultData = SplitPolygon (polygonData, diagonal);\r\n\t\t\tpolygonStack.push (resultData.resultData1);\r\n\t\t\tpolygonStack.push (resultData.resultData2);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.TriangulatePolygon2D = function (polygon)\r\n\t{\r\n\t\tif (polygon === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tvar vertexCount = polygon.VertexCount ();\r\n\t\tif (vertexCount < 3) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif (vertexCount == 3) {\r\n\t\t\treturn [[0, 1, 2]];\r\n\t\t}\r\n\t\t\r\n\t\tvar complexity = polygon.GetComplexity ();\r\n\t\tif (complexity === JSM.Complexity.Invalid) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif (complexity == JSM.Complexity.Convex) {\r\n\t\t\treturn JSM.TriangulateConvexPolygon (polygon);\r\n\t\t}\r\n\t\t\r\n\t\treturn JSM.TriangulateConcavePolygon2D (polygon);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangulatePolygon\r\n\t* Description:\r\n\t*\tTriangulates a polygon. The result defines triangles as an\r\n\t*\tarray of arrays with three original vertex indices.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon} the polygon\r\n\t* Returns:\r\n\t*\t{integer[3][*]} the result\r\n\t*/\r\n\tJSM.TriangulatePolygon = function (polygon)\r\n\t{\r\n\t\tvar polygon2D = polygon.ToPolygon2D ();\r\n\t\treturn JSM.TriangulatePolygon2D (polygon2D);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/octree',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: TraverseOctreeNodes\r\n\t* Description:\r\n\t*\tTraverses the nodes of the tree, and calls the given callback when a node found. The return value\r\n\t*\tof the callback determines if we need to continue traverse along that given node.\r\n\t* Parameters:\r\n\t*\toctree {Octree} the octree\r\n\t*\tnodeFound {function} the callback\r\n\t*/\r\n\tJSM.TraverseOctreeNodes = function (octree, nodeFound)\r\n\t{\r\n\t\tfunction TraverseNode (node, nodeFound)\r\n\t\t{\r\n\t\t\tif (!nodeFound (node)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (node.children === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar i, child;\r\n\t\t\tfor (i = 0; i < node.children.length; i++) {\r\n\t\t\t\tchild = node.children[i];\r\n\t\t\t\tTraverseNode (child, nodeFound);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tTraverseNode (octree.root, nodeFound);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CreateOctreeChildNodes\r\n\t* Description:\r\n\t*\tCreate child nodes for an octree node. It calls a callback function\r\n\t*\twhich should create a new node element for the octree.\r\n\t* Parameters:\r\n\t*\toriginalBox {Box} the box of the original node\r\n\t*\tcreateNodeCallback {function} the callback function\r\n\t* Returns:\r\n\t*\t{object[*]} the result\r\n\t*/\r\n\tJSM.CreateOctreeChildNodes = function (originalBox, createNodeCallback)\r\n\t{\r\n\t\tfunction CreateNode (originalBox, createNodeCallback, dirX, dirY, dirZ)\r\n\t\t{\r\n\t\t\tvar size = originalBox.GetSize ().Clone ();\r\n\t\t\tsize.MultiplyScalar (0.5);\r\n\t\t\tvar min = new JSM.Coord (\r\n\t\t\t\toriginalBox.min.x + dirX * size.x,\r\n\t\t\t\toriginalBox.min.y + dirY * size.y,\r\n\t\t\t\toriginalBox.min.z + dirZ * size.z\r\n\t\t\t);\r\n\t\t\tvar max = JSM.CoordAdd (min, size);\r\n\t\t\tvar box = new JSM.Box (min, max);\r\n\t\t\treturn createNodeCallback (box);\r\n\t\t}\r\n\r\n\t\tvar size = originalBox.GetSize ();\r\n\t\tif (JSM.IsZero (size.x) && JSM.IsZero (size.y) && JSM.IsZero (size.z)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tvar result = [\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 0.0, 0.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 0.0, 0.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 1.0, 0.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 1.0, 0.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 0.0, 1.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 0.0, 1.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 1.0, 1.0, 1.0),\r\n\t\t\tCreateNode (originalBox, createNodeCallback, 0.0, 1.0, 1.0),\r\n\t\t];\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Octree\r\n\t* Description: Defines an octree. The octree contains each coordinate only once.\r\n\t* Parameters:\r\n\t*\tbox {Box} bounding box\r\n\t*\tmaxCoordNumInNodes {integer} maximum number of coordinates in a node\r\n\t*/\r\n\tJSM.Octree = function (box, maxCoordNumInNodes)\r\n\t{\r\n\t\tthis.coords = [];\r\n\t\tthis.root = this.CreateNewNode (null, box);\r\n\t\tthis.maxCoordNumInNodes = maxCoordNumInNodes;\r\n\t\tif (this.maxCoordNumInNodes === undefined || this.maxCoordNumInNodes === null || this.maxCoordNumInNodes === 0) {\r\n\t\t\tthis.maxCoordNumInNodes = 50;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.AddCoord\r\n\t* Description:\r\n\t*\tAdds a coordinate to the octree. The return value is the stored index of the coordinate.\r\n\t*\tIf the coordinate was already in the octree, it returns the existing index.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{integer} the stored index of the coordinate\r\n\t*/\r\n\tJSM.Octree.prototype.AddCoord = function (coord)\r\n\t{\r\n\t\treturn this.AddCoordToNode (coord, this.root);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.FindCoord\r\n\t* Description:\r\n\t*\tFinds a coordinate in the octree, and returns the stored index of it.\r\n\t*\tThe return value is -1 if the coordinate does not exist.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t* Returns:\r\n\t*\t{integer} the stored index of the coordinate\r\n\t*/\r\n\tJSM.Octree.prototype.FindCoord = function (coord)\r\n\t{\r\n\t\tvar node = this.FindNodeForCoord (coord, this.root);\r\n\t\tif (node === null) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn this.FindCoordInNode (coord, node);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.FindCoordInNode\r\n\t* Description: Finds a coordinate in a node.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tnode {object} the node\r\n\t* Returns:\r\n\t*\t{integer} the stored index of the coordinate\r\n\t*/\r\n\tJSM.Octree.prototype.FindCoordInNode = function (coord, node)\r\n\t{\r\n\t\tvar i, current;\r\n\t\tfor (i = 0; i < node.coords.length; i++) {\r\n\t\t\tcurrent = node.coords[i];\r\n\t\t\tif (coord.IsEqual (this.coords[current])) {\r\n\t\t\t\treturn current;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.AddCoordToNode\r\n\t* Description: Adds a coordinate to a node.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\troot {object} the root node\r\n\t* Returns:\r\n\t*\t{integer} the stored index of the coordinate\r\n\t*/\r\n\tJSM.Octree.prototype.AddCoordToNode = function (coord, root)\r\n\t{\r\n\t\tvar node = this.FindNodeForCoord (coord, root);\r\n\t\tif (node === null) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\t\r\n\t\tvar found = this.FindCoordInNode (coord, node);\r\n\t\tif (found != -1) {\t\r\n\t\t\treturn found;\r\n\t\t}\r\n\t\t\r\n\t\tif (node.coords.length >= this.maxCoordNumInNodes) {\r\n\t\t\tif (this.SplitNode (node)) {\r\n\t\t\t\treturn this.AddCoordToNode (coord, node);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar index = this.coords.length;\r\n\t\tthis.coords.push (coord);\r\n\t\tnode.coords.push (index);\r\n\t\treturn index;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.FindNodeForCoord\r\n\t* Description: Finds a node for a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tnode {object} the starting node\r\n\t* Returns:\r\n\t*\t{object} the found node\r\n\t*/\r\n\tJSM.Octree.prototype.FindNodeForCoord = function (coord, node)\r\n\t{\r\n\t\tif (node.children === null) {\r\n\t\t\treturn node;\r\n\t\t}\r\n\t\t\r\n\t\tvar center = node.box.GetCenter ();\r\n\t\tvar xGreater = coord.x > center.x;\r\n\t\tvar yGreater = coord.y > center.y;\r\n\t\tvar zGreater = coord.z > center.z;\r\n\t\t\r\n\t\tif (!xGreater && !yGreater && !zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[0]);\r\n\t\t} else if (xGreater && !yGreater && !zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[1]);\r\n\t\t} else if (xGreater && yGreater && !zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[2]);\r\n\t\t} else if (!xGreater && yGreater && !zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[3]);\r\n\t\t} else if (!xGreater && !yGreater && zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[4]);\r\n\t\t} else if (xGreater && !yGreater && zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[5]);\r\n\t\t} else if (xGreater && yGreater && zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[6]);\r\n\t\t} else if (!xGreater && yGreater && zGreater) {\r\n\t\t\treturn this.FindNodeForCoord (coord, node.children[7]);\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.SplitNode\r\n\t* Description: Splits a node to subnodes.\r\n\t* Parameters:\r\n\t*\tnode {object} the node\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.Octree.prototype.SplitNode = function (node)\r\n\t{\r\n\t\tvar myThis = this;\r\n\t\tvar children = JSM.CreateOctreeChildNodes (node.box, function (nodeBox) {\r\n\t\t\treturn myThis.CreateNewNode (node, nodeBox);\r\n\t\t});\r\n\t\t\r\n\t\tif (children === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tnode.children = children;\r\n\t\tvar nodeCoords = node.coords;\r\n\t\tnode.coords = [];\r\n\t\t\r\n\t\tvar i, newNode;\r\n\t\tfor (i = 0; i < nodeCoords.length; i++) {\r\n\t\t\tnewNode = this.FindNodeForCoord (this.coords[nodeCoords[i]], node);\r\n\t\t\tnewNode.coords.push (nodeCoords[i]);\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Octree.CreateNewNode\r\n\t* Description: Creates a new node.\r\n\t* Parameters:\r\n\t*\tparent {object} the parent node\r\n\t*\tbox {Box} the box of the node\r\n\t* Returns:\r\n\t*\t{object} the result\r\n\t*/\r\n\tJSM.Octree.prototype.CreateNewNode = function (parent, box)\r\n\t{\r\n\t\tvar newNode = {\r\n\t\t\tparent : parent,\r\n\t\t\tbox : box,\r\n\t\t\tcoords : [],\r\n\t\t\tchildren : null\r\n\t\t};\r\n\t\treturn newNode;\t\r\n\t};\r\n\r\n\t/**\r\n\t* Class: TriangleOctree\r\n\t* Description:\r\n\t*\tDefines an octree which stores triangles. Every triangle is placed in\r\n\t*\tthe smallest possible node which contains all of its vertices.\r\n\t* Parameters:\r\n\t*\tbox {Box} bounding box\r\n\t*/\r\n\tJSM.TriangleOctree = function (box)\r\n\t{\r\n\t\tthis.root = this.CreateNewNode (null, box);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleOctree.AddTriangle\r\n\t* Description: Adds a triangle to the octree.\r\n\t* Parameters:\r\n\t*\tv0, v1, v2 {Coord} the vertices of the triangle\r\n\t*\tuserData {anything} user data for the triangle\r\n\t*/\r\n\tJSM.TriangleOctree.prototype.AddTriangle = function (v0, v1, v2, userData)\r\n\t{\r\n\t\treturn this.AddTriangleToNode (v0, v1, v2, this.root, userData);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleOctree.AddTriangleToNode\r\n\t* Description: Adds a coordinate to a node.\r\n\t* Parameters:\r\n\t*\tv0, v1, v2 {Coord} the vertices of the triangle\r\n\t*\troot {object} the root node\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.TriangleOctree.prototype.AddTriangleToNode = function (v0, v1, v2, root, userData)\r\n\t{\r\n\t\tfunction IsTriangleInNode (v0, v1, v2, node)\r\n\t\t{\r\n\t\t\treturn node.box.IsCoordInside (v0) && node.box.IsCoordInside (v1) && node.box.IsCoordInside (v2);\r\n\t\t}\r\n\t\t\r\n\t\tif (!IsTriangleInNode (v0, v1, v2, root)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (root.children === null) {\r\n\t\t\tvar myThis = this;\r\n\t\t\troot.children = JSM.CreateOctreeChildNodes (root.box, function (nodeBox) {\r\n\t\t\t\treturn myThis.CreateNewNode (root, nodeBox);\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif (root.children !== null) {\r\n\t\t\tvar i, node;\r\n\t\t\tfor (i = 0; i < root.children.length; i++) {\r\n\t\t\t\tnode = root.children[i];\r\n\t\t\t\tif (this.AddTriangleToNode (v0, v1, v2, node, userData)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\troot.triangles.push ({\r\n\t\t\tv0 : v0,\r\n\t\t\tv1 : v1,\r\n\t\t\tv2 : v2,\r\n\t\t\tuserData : userData\r\n\t\t});\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleOctree.CreateNewNode\r\n\t* Description: Creates a new node.\r\n\t* Parameters:\r\n\t*\tparent {object} the parent node\r\n\t*\tbox {Box} the box of the node\r\n\t* Returns:\r\n\t*\t{object} the result\r\n\t*/\r\n\tJSM.TriangleOctree.prototype.CreateNewNode = function (parent, box)\r\n\t{\r\n\t\tvar newNode = {\r\n\t\t\tparent : parent,\r\n\t\t\tbox : box,\r\n\t\t\ttriangles : [],\r\n\t\t\tchildren : null\r\n\t\t};\r\n\t\treturn newNode;\t\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/bsptree',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: BSPTree\r\n\t* Description: Defines a BSP tree.\r\n\t*/\r\n\tJSM.BSPTree = function ()\r\n\t{\r\n\t\tthis.root = null;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.AddPolygon\r\n\t* Description: Adds a polygon to the tree.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon} the polygon\r\n\t*\tuserData {anything} user data for polygon\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.BSPTree.prototype.AddPolygon = function (polygon, userData)\r\n\t{\r\n\t\tif (this.root === null) {\r\n\t\t\tthis.root = this.CreateNewNode ();\r\n\t\t}\r\n\t\t\r\n\t\treturn this.AddPolygonToNode (this.root, polygon, userData);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.Traverse\r\n\t* Description: Traverses the tree and calls a function on node found.\r\n\t* Parameters:\r\n\t*\tnodeFound {function} the callback function\r\n\t*/\r\n\tJSM.BSPTree.prototype.Traverse = function (nodeFound)\r\n\t{\r\n\t\tthis.TraverseNode (this.root, nodeFound);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.TraverseNode\r\n\t* Description: Traverses a node and its children and calls a function on node found.\r\n\t* Parameters:\r\n\t*\tnode {object} the node\r\n\t*\tnodeFound {function} the callback function\r\n\t*/\r\n\tJSM.BSPTree.prototype.TraverseNode = function (node, nodeFound)\r\n\t{\r\n\t\tif (node !== null) {\r\n\t\t\tnodeFound (node);\r\n\t\t\tthis.TraverseNode (node.inside, nodeFound);\r\n\t\t\tthis.TraverseNode (node.outside, nodeFound);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.GetNodes\r\n\t* Description: Returns the nodes as an array.\r\n\t* Returns:\r\n\t*\t{object[*]} the result\r\n\t*/\r\n\tJSM.BSPTree.prototype.GetNodes = function ()\r\n\t{\r\n\t\tvar result = [];\r\n\t\tthis.Traverse (function (node) {\r\n\t\t\tresult.push (node);\r\n\t\t});\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.GetNodes\r\n\t* Description: Count nodes.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.BSPTree.prototype.NodeCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tthis.Traverse (function () {\r\n\t\t\tcount = count + 1;\r\n\t\t});\r\n\t\treturn count;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.AddPolygonToNode\r\n\t* Description: Adds a polygon to a node.\r\n\t* Parameters:\r\n\t*\tnode {object} the node\r\n\t*\tpolygon {Polygon} the polygon\r\n\t*\tuserData {anything} user data for polygon\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.BSPTree.prototype.AddPolygonToNode = function (node, polygon, userData)\r\n\t{\r\n\t\tif (polygon.VertexCount () < 3) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar normal;\r\n\t\tif (node.polygon === null) {\r\n\t\t\tnormal = polygon.GetNormal ();\r\n\t\t\tvar plane = JSM.GetPlaneFromCoordAndDirection (polygon.GetVertex (0), normal);\r\n\t\t\tnode.polygon = polygon;\r\n\t\t\tif (userData !== undefined) {\r\n\t\t\t\tnode.userData = userData;\r\n\t\t\t}\r\n\t\t\tnode.plane = plane;\r\n\t\t} else {\r\n\t\t\tvar backPolygons = [];\r\n\t\t\tvar frontPolygons = [];\r\n\t\t\tvar planePolygons = [];\r\n\t\t\tvar cutSucceeded = JSM.CutPolygonWithPlane (polygon, node.plane, frontPolygons, backPolygons, planePolygons);\r\n\t\t\tif (cutSucceeded) {\r\n\t\t\t\tif (backPolygons.length > 0) {\r\n\t\t\t\t\tthis.AddInsidePolygonsToNode (node, backPolygons, userData);\r\n\t\t\t\t}\r\n\t\t\t\tif (frontPolygons.length > 0) {\r\n\t\t\t\t\tthis.AddOutsidePolygonsToNode (node, frontPolygons, userData);\r\n\t\t\t\t}\r\n\t\t\t\tif (planePolygons.length > 0) {\r\n\t\t\t\t\tnormal = polygon.GetNormal ();\r\n\t\t\t\t\tif (JSM.VectorDot (normal, node.plane.GetNormal ()) > 0) {\r\n\t\t\t\t\t\tthis.AddInsidePolygonsToNode (node, planePolygons, userData);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.AddOutsidePolygonsToNode (node, planePolygons, userData);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.AddInsidePolygonsToNode\r\n\t* Description: Adds inside polygons to a node.\r\n\t* Parameters:\r\n\t*\tnode {object} the node\r\n\t*\tpolygon {Polygon[*]} the polygons\r\n\t*\tuserData {anything} user data for polygons\r\n\t*/\r\n\tJSM.BSPTree.prototype.AddInsidePolygonsToNode = function (node, polygons, userData)\r\n\t{\r\n\t\tif (node.inside === null) {\r\n\t\t\tnode.inside = this.CreateNewNode ();\r\n\t\t\tnode.inside.parent = node;\r\n\t\t}\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tthis.AddPolygonToNode (node.inside, polygons[i], userData);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.AddOutsidePolygonsToNode\r\n\t* Description: Adds outside polygons to a node.\r\n\t* Parameters:\r\n\t*\tnode {object} the node\r\n\t*\tpolygon {Polygon[*]} the polygons\r\n\t*\tuserData {anything} user data for polygons\r\n\t*/\r\n\tJSM.BSPTree.prototype.AddOutsidePolygonsToNode = function (node, polygons, userData)\r\n\t{\r\n\t\tif (node.outside === null) {\r\n\t\t\tnode.outside = this.CreateNewNode ();\r\n\t\t\tnode.outside.parent = node;\r\n\t\t}\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tthis.AddPolygonToNode (node.outside, polygons[i], userData);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BSPTree.CreateNewNode\r\n\t* Description: Creates a new node.\r\n\t* Returns:\r\n\t*\t{object} the result\r\n\t*/\r\n\tJSM.BSPTree.prototype.CreateNewNode = function ()\r\n\t{\r\n\t\tvar node = {\r\n\t\t\tpolygon : null,\r\n\t\t\tuserData : null,\r\n\t\t\tplane : null,\r\n\t\t\tparent : null,\r\n\t\t\tinside : null,\r\n\t\t\toutside : null\r\n\t\t};\r\n\t\treturn node;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ClipPolygonWithBSPTree\r\n\t* Description: Clips a polygon with a created BSP tree.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon} the polygon\r\n\t*\tbspTree {BSPTree} the BSP tree\r\n\t*\tfrontPolygons {Polygon[*]} (out) polygons in front of the tree\r\n\t*\tbackPolygons {Polygon[*]} (out) polygons at the back of the tree\r\n\t*\tplanarFrontPolygons {Polygon[*]} (out) polygons on the tree looks front\r\n\t*\tplanarBackPolygons {Polygon[*]} (out) polygons on the tree looks back\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.ClipPolygonWithBSPTree = function (polygon, bspTree, frontPolygons, backPolygons, planarFrontPolygons, planarBackPolygons)\r\n\t{\r\n\t\tfunction CutPolygonWithNode (polygon, node, isPlanar)\r\n\t\t{\r\n\t\t\tif (node === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar cutBackPolygons = [];\r\n\t\t\tvar cutFrontPolygons = [];\r\n\t\t\tvar cutPlanarPolygons = [];\r\n\t\t\tvar cutSucceeded = JSM.CutPolygonWithPlane (polygon, node.plane, cutFrontPolygons, cutBackPolygons, cutPlanarPolygons);\r\n\t\t\tif (!cutSucceeded) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (cutBackPolygons.length > 0) {\r\n\t\t\t\tAddInsidePolygons (node, cutBackPolygons, isPlanar);\r\n\t\t\t}\r\n\t\t\tif (cutFrontPolygons.length > 0) {\r\n\t\t\t\tAddOutsidePolygons (node, cutFrontPolygons, isPlanar);\r\n\t\t\t}\r\n\t\t\tif (cutPlanarPolygons.length > 0) {\r\n\t\t\t\tvar normal = polygon.GetNormal ();\r\n\t\t\t\tif (JSM.VectorDot (normal, node.plane.GetNormal ()) > 0) {\r\n\t\t\t\t\tAddInsidePolygons (node, cutPlanarPolygons, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tAddOutsidePolygons (node, cutPlanarPolygons, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction CutPolygonsWithNode (polygons, node, isPlanar)\r\n\t\t{\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\t\tCutPolygonWithNode (polygons[i], node, isPlanar);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddPolygonsToArray (polygons, polygonArray)\r\n\t\t{\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\t\tpolygonArray.push (polygons[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddInsidePolygons (node, polygons, isPlanar)\r\n\t\t{\r\n\t\t\tif (node.inside !== null) {\r\n\t\t\t\tCutPolygonsWithNode (polygons, node.inside, isPlanar);\r\n\t\t\t} else {\r\n\t\t\t\tAddPolygonsToArray (polygons, isPlanar ? planarBackPolygons : backPolygons);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddOutsidePolygons (node, polygons, isPlanar)\r\n\t\t{\r\n\t\t\tif (node.outside !== null) {\r\n\t\t\t\tCutPolygonsWithNode (polygons, node.outside, isPlanar);\r\n\t\t\t} else {\r\n\t\t\t\tAddPolygonsToArray (polygons, isPlanar ? planarFrontPolygons : frontPolygons);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tCutPolygonWithNode (polygon, bspTree.root, false);\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TraverseBSPTreeForEyePosition\r\n\t* Description: Traverses a BSP tree for a given eye position.\r\n\t* Parameters:\r\n\t*\tbspTree {BSPTree} the BSP tree\r\n\t*\teyePosition {Coord} the eye position\r\n\t*\tnodeFound {function} the callback function\r\n\t*/\r\n\tJSM.TraverseBSPTreeForEyePosition = function (bspTree, eyePosition, nodeFound)\r\n\t{\r\n\t\tfunction TraverseNode (node)\r\n\t\t{\r\n\t\t\tif (node !== null) {\r\n\t\t\t\tvar coordPlanePosition = node.plane.CoordPosition (eyePosition);\r\n\t\t\t\tif (coordPlanePosition == JSM.CoordPlanePosition.CoordInFrontOfPlane) {\r\n\t\t\t\t\tTraverseNode (node.inside);\r\n\t\t\t\t\tnodeFound (node);\r\n\t\t\t\t\tTraverseNode (node.outside);\r\n\t\t\t\t} else if (coordPlanePosition == JSM.CoordPlanePosition.CoordAtBackOfPlane) {\r\n\t\t\t\t\tTraverseNode (node.outside);\r\n\t\t\t\t\tnodeFound (node);\r\n\t\t\t\t\tTraverseNode (node.inside);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tTraverseNode (node.outside);\r\n\t\t\t\t\tTraverseNode (node.inside);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tTraverseNode (bspTree.root);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/curves',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: GenerateCubicBezierCurve\r\n\t* Description: Generates a bezier curve from the given points.\r\n\t* Parameters:\r\n\t*\tp0 {Coord2D} point 1\r\n\t*\tp1 {Coord2D} point 2\r\n\t*\tp2 {Coord2D} point 3\r\n\t*\tp3 {Coord2D} point 4\r\n\t*\tsegmentation {integer} the segmentation of the result curve\r\n\t* Returns:\r\n\t*\t{Coord2D[]} the result\r\n\t*/\r\n\tJSM.GenerateCubicBezierCurve = function (p0, p1, p2, p3, segmentation)\r\n\t{\r\n\t\tfunction GetCubicBezierPoint (p0, p1, p2, p3, t)\r\n\t\t{\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t2 * t;\r\n\t\t\tvar invT = 1.0 - t;\r\n\t\t\tvar invT2 = invT * invT;\r\n\t\t\tvar invT3 = invT2 * invT;\r\n\t\t\tvar x = invT3 * p0.x + 3.0 * invT2 * t * p1.x  + 3.0 * invT * t2 * p2.x + t3 * p3.x;\r\n\t\t\tvar y = invT3 * p0.y + 3.0 * invT2 * t * p1.y  + 3.0 * invT * t2 * p2.y + t3 * p3.y;\r\n\t\t\treturn new JSM.Coord2D (x, y);\r\n\t\t}\r\n\t\t\r\n\t\tvar result = [];\r\n\t\tvar s = 1.0 / segmentation;\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\tcoord = GetCubicBezierPoint (p0, p1, p2, p3, i * s);\r\n\t\t\tresult.push (coord);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BernsteinPolynomial\r\n\t* Description: Calculates the value of the Bernstein polynomial.\r\n\t* Parameters:\r\n\t*\tk {integer} the start index\r\n\t*\tn {integer} the end index\r\n\t*\tx {number} the value\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.BernsteinPolynomial = function (k, n, x)\r\n\t{\r\n\t\tfunction BinomialCoefficient (n, k)\r\n\t\t{\r\n\t\t\tvar result = 1.0;\r\n\t\t\tvar min = JSM.Minimum (k, n - k);\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < min; i++) {\r\n\t\t\t\tresult = result * (n - i);\r\n\t\t\t\tresult = result / (i + 1);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar coefficient = BinomialCoefficient (n, k);\r\n\t\treturn coefficient * Math.pow (x, k) * Math.pow (1.0 - x, n - k);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateBezierCurve\r\n\t* Description: Generates a bezier curve from the given points.\r\n\t* Parameters:\r\n\t*\tpoints {Coord2D[]} the points\r\n\t*\tsegmentation {integer} the segmentation of the result curve\r\n\t* Returns:\r\n\t*\t{Coord2D[]} the result\r\n\t*/\r\n\tJSM.GenerateBezierCurve = function (points, segmentation)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar n = points.length - 1;\r\n\t\tvar s = 1.0 / segmentation;\r\n\t\t\r\n\t\tvar i, j, t, point, bernstein, coord;\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\tt = i * s;\r\n\t\t\tcoord = new JSM.Coord2D (0.0, 0.0);\r\n\t\t\tfor (j = 0; j <= n; j++) {\r\n\t\t\t\tpoint = points[j];\r\n\t\t\t\tbernstein = JSM.BernsteinPolynomial (j, n, t);\r\n\t\t\t\tcoord.x += point.x * bernstein;\r\n\t\t\t\tcoord.y += point.y * bernstein;\r\n\t\t\t}\r\n\t\t\tresult.push (coord);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/utilities',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: GetGaussianCParameter\r\n\t* Description:\r\n\t*\tCalculates the gaussian functions c parameter which can be used\r\n\t*\tfor the gaussian function to reach epsilon at a given value.\r\n\t* Parameters:\r\n\t*\tx {number} the value\r\n\t*\ta {number} the a parameter of the function\r\n\t*\tb {number} the b parameter of the function\r\n\t*\tepsilon {number} the epsilon value\r\n\t* Returns:\r\n\t*\t{number} the c parameter of the function\r\n\t*/\r\n\tJSM.GetGaussianCParameter = function (x, a, b, epsilon)\r\n\t{\r\n\t\treturn Math.sqrt (-(Math.pow (x - b, 2.0) / (2.0 * Math.log (epsilon / Math.abs (a)))));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetGaussianValue\r\n\t* Description: Calculates the gaussian functions value.\r\n\t* Parameters:\r\n\t*\tx {number} the value\r\n\t*\ta {number} the a parameter of the function\r\n\t*\tb {number} the b parameter of the function\r\n\t*\tc {number} the c parameter of the function\r\n\t* Returns:\r\n\t*\t{number} the result\r\n\t*/\r\n\tJSM.GetGaussianValue = function (x, a, b, c)\r\n\t{\r\n\t\treturn a * Math.exp (-(Math.pow (x - b, 2.0) / (2.0 * Math.pow (c, 2.0))));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCirclePoints\r\n\t* Description: Generates coordinates on circle.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the circle\r\n\t*\tsegmentation {number} the segmentation of the circle\r\n\t*\torigo {Coord} the origo of the circle\r\n\t* Returns:\r\n\t*\t{Coord[*]} the result\r\n\t*/\r\n\tJSM.GenerateCirclePoints = function (radius, segmentation, origo)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar segments = segmentation;\r\n\r\n\t\tvar theta = 2.0 * Math.PI;\r\n\t\tvar step = 2.0 * Math.PI / segments;\r\n\t\t\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\tcoord = JSM.CylindricalToCartesian (radius, 0.0, theta);\r\n\t\t\tif (origo !== undefined && origo !== null) {\r\n\t\t\t\tcoord = JSM.CoordAdd (coord, origo);\r\n\t\t\t}\r\n\t\t\tresult.push (coord);\r\n\t\t\ttheta += step;\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GetRuledMesh\r\n\t* Description:\r\n\t*\tGenerates ruled mesh coordinates and polygons between two coordinate array.\r\n\t*\tThe two arrays should have the same length. The result is a coordinate array\r\n\t*\tand a polygon array which contains indices for vertices.\r\n\t* Parameters:\r\n\t*\taCoords {Coord[*]} the first coordinate array\r\n\t*\tbCoords {Coord[*]} the second coordinate array\r\n\t*\tsegmentation {number} the segmentation of the mesh\r\n\t*\tvertices {Coord[*]} (out) the vertices of the mesh\r\n\t*\tpolygons {integer[*][4]} (out) the polygons of the mesh\r\n\t*/\r\n\tJSM.GetRuledMesh = function (aCoords, bCoords, segmentation, vertices, polygons)\r\n\t{\r\n\t\tif (aCoords.length !== bCoords.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar lineSegmentation = aCoords.length - 1;\r\n\t\tvar meshSegmentation = segmentation;\r\n\t\tvar directions = [];\r\n\t\tvar lengths = [];\r\n\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i <= lineSegmentation; i++) {\r\n\t\t\tdirections.push (JSM.CoordSub (bCoords[i], aCoords[i]));\r\n\t\t\tlengths.push (aCoords[i].DistanceTo (bCoords[i]));\r\n\t\t}\r\n\r\n\t\tvar step, coord;\r\n\t\tfor (i = 0; i <= lineSegmentation; i++) {\r\n\t\t\tstep = lengths[i] / meshSegmentation;\r\n\t\t\tfor (j = 0; j <= meshSegmentation; j++) {\r\n\t\t\t\tcoord = aCoords[i].Clone ().Offset (directions[i], step * j);\r\n\t\t\t\tvertices.push (coord);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar current, top, next, ntop, polygon;\r\n\t\tfor (i = 0; i < lineSegmentation; i++) {\r\n\t\t\tfor (j = 0; j < meshSegmentation; j++) {\r\n\t\t\t\tcurrent = i * (meshSegmentation + 1) + j;\r\n\t\t\t\ttop = current + meshSegmentation + 1;\r\n\t\t\t\tnext = current + 1;\r\n\t\t\t\tntop = top + 1;\r\n\r\n\t\t\t\tcurrent = i * (meshSegmentation + 1) + j;\r\n\t\t\t\ttop = current + 1;\r\n\t\t\t\tnext = current + meshSegmentation + 1;\r\n\t\t\t\tntop = next + 1;\r\n\r\n\t\t\t\tpolygon = [current, next, ntop, top];\r\n\t\t\t\tpolygons.push (polygon);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/ray',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Ray\r\n\t* Description: Represents a Ray.\r\n\t* Parameters:\r\n\t*\torigin {Coord} the starting point of the ray\r\n\t*\tdirection {Vector} the direction of the ray\r\n\t*\tlength {number} the length of the ray, null means infinite ray\r\n\t*/\r\n\tJSM.Ray = function (origin, direction, length)\r\n\t{\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction.Normalize ();\r\n\t\tthis.length = length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Ray.Set\r\n\t* Description: Sets the ray.\r\n\t* Parameters:\r\n\t*\torigin {Coord} the starting point of the ray\r\n\t*\tdirection {Vector} the direction of the ray\r\n\t*\tlength {number} the length of the ray, null means infinite ray\r\n\t*/\r\n\tJSM.Ray.prototype.Set = function (origin, direction, length)\r\n\t{\r\n\t\tthis.origin = origin;\r\n\t\tthis.direction = direction.Normalize ();\r\n\t\tthis.length = length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Ray.GetOrigin\r\n\t* Description: Returns the origin of the ray.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Ray.prototype.GetOrigin = function ()\r\n\t{\r\n\t\treturn this.origin;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Ray.GetDirection\r\n\t* Description: Returns the direction of the ray.\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.Ray.prototype.GetDirection = function ()\r\n\t{\r\n\t\treturn this.direction;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Ray.IsLengthReached\r\n\t* Description:\r\n\t*\tReturns if the given length is greater than the length of the ray.\r\n\t*\tAlways return false in case of infinite ray.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.Ray.prototype.IsLengthReached = function (length)\r\n\t{\r\n\t\tif (this.length === undefined || this.length === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn JSM.IsGreater (length, this.length);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Ray.Clone\r\n\t* Description: Clones the ray.\r\n\t* Returns:\r\n\t*\t{Ray} a cloned instance\r\n\t*/\r\n\tJSM.Ray.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.Ray (this.origin.Clone (), this.direction.Clone (), this.length);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/geometry/path',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Path2D\r\n\t* Description: Helper class for building polygons\r\n\t* Parameters:\r\n\t*\tsettings {object} path settings\r\n\t*/\r\n\tJSM.Path2D = function (settings)\r\n\t{\r\n\t\tthis.settings = {\r\n\t\t\tsegmentation : 10,\r\n\t\t\toffset : new JSM.Vector2D (0.0, 0.0),\r\n\t\t\tscale : new JSM.Coord2D (1.0, 1.0)\r\n\t\t};\r\n\t\tJSM.CopyObjectProperties (settings, this.settings, true);\r\n\t\t\r\n\t\tthis.position = new JSM.Coord2D (0.0, 0.0);\r\n\t\tthis.positionAdded = false;\r\n\t\tthis.polygons = [];\r\n\t\tthis.currentPolygon = null;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.MoveTo\r\n\t* Description: Moves the current position to the given position.\r\n\t* Parameters:\r\n\t*\tx {number} new x position\r\n\t*\ty {number} new y position\r\n\t*/\r\n\tJSM.Path2D.prototype.MoveTo = function (x, y)\r\n\t{\r\n\t\tthis.Close ();\r\n\t\tthis.position.Set (x, y);\r\n\t\tthis.positionAdded = false;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.LineTo\r\n\t* Description: Draws a line from current position to the given position.\r\n\t* Parameters:\r\n\t*\tx {number} line end x position\r\n\t*\ty {number} line end y position\r\n\t*/\r\n\tJSM.Path2D.prototype.LineTo = function (x, y)\r\n\t{\r\n\t\tif (!this.positionAdded) {\r\n\t\t\tthis.AddPolygonPoint (this.position.x, this.position.y);\r\n\t\t}\r\n\t\tthis.AddPolygonPoint (x, y);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.CubicBezierTo\r\n\t* Description: Draws a cubic bezier curve from the current position to the given position.\r\n\t* Parameters:\r\n\t*\tx {number} curve end x position\r\n\t*\ty {number} curve end y position\r\n\t*\tcp1x {number} first control point x position\r\n\t*\tcp1y {number} first control point y position\r\n\t*\tcp2x {number} second control point x position\r\n\t*\tcp2y {number} second control point y position\r\n\t*/\r\n\tJSM.Path2D.prototype.CubicBezierTo = function (x, y, cp1x, cp1y, cp2x, cp2y)\r\n\t{\r\n\t\tvar bezierPoints = JSM.GenerateCubicBezierCurve (\r\n\t\t\tnew JSM.Coord2D (this.position.x, this.position.y),\r\n\t\t\tnew JSM.Coord2D (cp1x, cp1y),\r\n\t\t\tnew JSM.Coord2D (cp2x, cp2y),\r\n\t\t\tnew JSM.Coord2D (x, y),\r\n\t\t\tthis.settings.segmentation\r\n\t\t);\r\n\t\tvar i;\r\n\t\tfor (i = 1; i < bezierPoints.length; i++) {\r\n\t\t\tthis.LineTo (bezierPoints[i].x, bezierPoints[i].y);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.Close\r\n\t* Description: Closes the current polygon.\r\n\t*/\r\n\tJSM.Path2D.prototype.Close = function ()\r\n\t{\r\n\t\tfunction CheckAndCorrectPolygon (polygon)\r\n\t\t{\r\n\t\t\tif (polygon.VertexCount () === 0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (polygon.GetVertex (0).IsEqual (polygon.GetVertex (polygon.VertexCount () - 1))) {\r\n\t\t\t\tpolygon.RemoveVertex (polygon.VertexCount () - 1);\r\n\t\t\t}\r\n\t\t\tif (polygon.VertexCount () < 3) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction FindBasePolygon (polygons, polygon)\r\n\t\t{\r\n\t\t\tfunction IsBasePolygon (basePolygon, polygon)\r\n\t\t\t{\r\n\t\t\t\tbaseOrientation = baseContour.GetOrientation ();\r\n\t\t\t\tpolygonOrientation = polygon.GetOrientation ();\r\n\t\t\t\tif (baseOrientation !== polygonOrientation) {\r\n\t\t\t\t\tvar firstVertex = polygon.GetVertex (0);\r\n\t\t\t\t\tvar firstVertexPosition = baseContour.CoordPosition (firstVertex);\r\n\t\t\t\t\tif (firstVertexPosition == JSM.CoordPolygonPosition2D.Inside) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar i, baseContour, baseOrientation, polygonOrientation;\r\n\t\t\tfor (i = polygons.length - 1; i >= 0; i--) {\r\n\t\t\t\tbaseContour = polygons[i].GetContour (0);\r\n\t\t\t\tif (IsBasePolygon (baseContour, polygon)) {\r\n\t\t\t\t\treturn polygons[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (this.currentPolygon !== null) {\r\n\t\t\tif (CheckAndCorrectPolygon (this.currentPolygon)) {\r\n\t\t\t\tvar basePolygon = FindBasePolygon (this.polygons, this.currentPolygon);\r\n\t\t\t\tif (basePolygon === null) {\r\n\t\t\t\t\tvar contourPolygon = new JSM.ContourPolygon2D ();\r\n\t\t\t\t\tcontourPolygon.AddContour (this.currentPolygon);\r\n\t\t\t\t\tthis.polygons.push (contourPolygon);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbasePolygon.AddContour (this.currentPolygon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.currentPolygon = null;\r\n\t\t}\r\n\t};\t\t\t\r\n\r\n\t/**\r\n\t* Function: Path2D.PolygonCount\r\n\t* Description: Returns the polygon count of the path.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Path2D.prototype.PolygonCount = function ()\r\n\t{\r\n\t\treturn this.polygons.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.GetPolygon\r\n\t* Description: Returns the polygons from the path at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the polygon index\r\n\t* Returns:\r\n\t*\t{ContourPolygon2D} the result\r\n\t*/\r\n\tJSM.Path2D.prototype.GetPolygon = function (index)\r\n\t{\r\n\t\treturn this.polygons[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.GetPolygons\r\n\t* Description: Returns the polygons from the path.\r\n\t* Returns:\r\n\t*\t{ContourPolygon2D[*]} the result\r\n\t*/\r\n\tJSM.Path2D.prototype.GetPolygons = function ()\r\n\t{\r\n\t\treturn this.polygons;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Path2D.GetCurrentPolygon\r\n\t* Description: Returns the current polygon.\r\n\t* Returns:\r\n\t*\t{Polygon2D} the result\r\n\t*/\r\n\tJSM.Path2D.prototype.GetCurrentPolygon = function ()\r\n\t{\r\n\t\tif (this.currentPolygon === null) {\r\n\t\t\tthis.currentPolygon = new JSM.Polygon2D ();\r\n\t\t}\r\n\t\treturn this.currentPolygon;\r\n\t};\t\t\r\n\r\n\t/**\r\n\t* Function: Path2D.AddPolygonPoint\r\n\t* Description: Adds a point to the current polygon.\r\n\t* Parameters:\r\n\t*\tx {number} the x position of the point\r\n\t*\ty {number} the y position of the point\r\n\t*/\r\n\tJSM.Path2D.prototype.AddPolygonPoint = function (x, y)\r\n\t{\r\n\t\tvar polygon = this.GetCurrentPolygon ();\r\n\t\tvar polygonX = this.settings.offset.x + x * this.settings.scale.x;\r\n\t\tvar polygonY = this.settings.offset.y + y * this.settings.scale.y;\r\n\t\tpolygon.AddVertex (polygonX, polygonY);\r\n\t\tthis.position.Set (x, y);\r\n\t\tthis.positionAdded = true;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/color',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: HexColorToRGBComponents\r\n\t* Description: Converts hex color strings to RGB components.\r\n\t* Parameters:\r\n\t*\thexColor {string} the hex color\r\n\t* Returns:\r\n\t*\t{integer[3]} the RGB components\r\n\t*/\r\n\tJSM.HexColorToRGBComponents = function (hexColor)\r\n\t{\r\n\t\tvar hexString = hexColor.toString (16);\r\n\t\twhile (hexString.length < 6) {\r\n\t\t\thexString = '0' + hexString;\r\n\t\t}\r\n\t\tvar r = parseInt (hexString.substr (0, 2), 16);\r\n\t\tvar g = parseInt (hexString.substr (2, 2), 16);\r\n\t\tvar b = parseInt (hexString.substr (4, 2), 16);\r\n\t\treturn [r, g, b];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: HexColorToNormalizedRGBComponents\r\n\t* Description: Converts hex color strings to normalized (between 0.0 and 1.0) RGB components.\r\n\t* Parameters:\r\n\t*\thexColor {string} the hex color\r\n\t* Returns:\r\n\t*\t{number[3]} the RGB components\r\n\t*/\r\n\tJSM.HexColorToNormalizedRGBComponents = function (hexColor)\r\n\t{\r\n\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\r\n\t\treturn [rgb[0] / 255.0, rgb[1] / 255.0, rgb[2] / 255.0];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: HexColorToRGBColor\r\n\t* Description: Converts hex color strings to RGB color.\r\n\t* Parameters:\r\n\t*\thexColor {string} the hex color string\r\n\t* Returns:\r\n\t*\t{integer} the RGB value\r\n\t*/\r\n\tJSM.HexColorToRGBColor = function (hexColor)\r\n\t{\r\n\t\tvar hexString = '0x' + hexColor;\r\n\t\treturn parseInt (hexString, 16);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RGBComponentsToHexColor\r\n\t* Description: Converts RGB components to hex color.\r\n\t* Parameters:\r\n\t*\tred {integer} the red component\r\n\t*\tgreen {integer} the green component\r\n\t*\tblue {integer} the blue component\r\n\t* Returns:\r\n\t*\t{integer} the hex value\r\n\t*/\r\n\tJSM.RGBComponentsToHexColor = function (red, green, blue)\r\n\t{\r\n\t\tfunction IntegerToHex (intString)\r\n\t\t{\r\n\t\t\tvar result = parseInt (intString, 10).toString (16);\r\n\t\t\twhile (result.length < 2) {\r\n\t\t\t\tresult = '0' + result;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\tvar r = IntegerToHex (red);\r\n\t\tvar g = IntegerToHex (green);\r\n\t\tvar b = IntegerToHex (blue);\r\n\t\tvar hexString = '0x' + r + g + b;\r\n\t\treturn parseInt (hexString, 16);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/material',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Material\r\n\t* Description:\r\n\t*\tDefines a material. The parameter structure can contain the following values:\r\n\t*\tambient, diffuse, specular, shininess, opacity, texture, textureWidth, textureHeight.\r\n\t* Parameters:\r\n\t*\tparameters {object} parameters of the material\r\n\t*/\r\n\tJSM.Material = function (parameters)\r\n\t{\r\n\t\tthis.ambient = 0x00cc00;\r\n\t\tthis.diffuse = 0x00cc00;\r\n\t\tthis.specular = 0x000000;\r\n\t\tthis.shininess = 0.0;\r\n\t\tthis.opacity = 1.0;\r\n\t\tthis.reflection = 0.0;\r\n\t\tthis.singleSided = false;\r\n\t\tthis.pointSize = 0.1;\r\n\t\tthis.texture = null;\r\n\t\tthis.textureWidth = 1.0;\r\n\t\tthis.textureHeight = 1.0;\r\n\t\tJSM.CopyObjectProperties (parameters, this, true);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/materialset',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: MaterialSet\r\n\t* Description: Defines a material container.\r\n\t*/\r\n\tJSM.MaterialSet = function ()\r\n\t{\r\n\t\tthis.materials = [];\r\n\t\tthis.defaultMaterial = new JSM.Material ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MaterialSet.AddMaterial\r\n\t* Description: Adds a material to the container.\r\n\t* Parameters:\r\n\t*\tmaterial {Material} the material\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added material\r\n\t*/\r\n\tJSM.MaterialSet.prototype.AddMaterial = function (material)\r\n\t{\r\n\t\tthis.materials.push (material);\r\n\t\treturn this.materials.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MaterialSet.GetMaterial\r\n\t* Description: Returns a material from the container.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index\r\n\t* Returns:\r\n\t*\t{Material} the result\r\n\t*/\r\n\tJSM.MaterialSet.prototype.GetMaterial = function (index)\r\n\t{\r\n\t\tif (index < 0 || index >= this.materials.length) {\r\n\t\t\treturn this.defaultMaterial;\r\n\t\t}\r\n\t\treturn this.materials[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MaterialSet.GetDefaultMaterial\r\n\t* Description: Returns the default material from the container. It is always exists.\r\n\t* Returns:\r\n\t*\t{Material} the result\r\n\t*/\r\n\tJSM.MaterialSet.prototype.GetDefaultMaterial = function ()\r\n\t{\r\n\t\treturn this.defaultMaterial;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MaterialSet.Count\r\n\t* Description: Returns the material count of the container.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.MaterialSet.prototype.Count = function ()\r\n\t{\r\n\t\treturn this.materials.length;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/body',[\"../core/jsm\"],function(JSM){\r\n\r\n\t/**\r\n\t* Class: BodyVertex\r\n\t* Description:\r\n\t*\tRepresents a vertex of a 3D body. The vertex contains\r\n\t*\tonly its position as a 3D coordinate.\r\n\t* Parameters:\r\n\t*\tposition {Coord} the position\r\n\t*/\r\n\tJSM.BodyVertex = function (position)\r\n\t{\r\n\t\tthis.position = position;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyVertex.GetPosition\r\n\t* Description: Returns the position of the vertex.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.BodyVertex.prototype.GetPosition = function ()\r\n\t{\r\n\t\treturn this.position;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyVertex.SetPosition\r\n\t* Description: Sets the position of the vertex.\r\n\t* Parameters:\r\n\t*\tposition {Coord} the position\r\n\t*/\r\n\tJSM.BodyVertex.prototype.SetPosition = function (position)\r\n\t{\r\n\t\tthis.position = position;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyVertex.Clone\r\n\t* Description: Clones the vertex.\r\n\t* Returns:\r\n\t*\t{BodyVertex} the cloned instance\r\n\t*/\r\n\tJSM.BodyVertex.prototype.Clone = function ()\r\n\t{\r\n\t\treturn new JSM.BodyVertex (this.position.Clone ());\r\n\t};\r\n\r\n\t/**\r\n\t* Class: BodyPoint\r\n\t* Description:\r\n\t*\tRepresents a point in a 3D body. The point contains the vertex index stored in its 3D body,\r\n\t*\tand a material index of a material defined outside of the body.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index stored in the body\r\n\t*/\r\n\tJSM.BodyPoint = function (index)\r\n\t{\r\n\t\tthis.vertex = index;\r\n\t\tthis.material = -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.GetVertexIndex\r\n\t* Description: Returns the body vertex index of the point.\r\n\t* Returns:\r\n\t*\t{integer} the stored vertex index\r\n\t*/\r\n\tJSM.BodyPoint.prototype.GetVertexIndex = function ()\r\n\t{\r\n\t\treturn this.vertex;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.SetVertexIndex\r\n\t* Description: Sets the vertex index of the point.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t*/\r\n\tJSM.BodyPoint.prototype.SetVertexIndex = function (index)\r\n\t{\r\n\t\tthis.vertex = index;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.HasMaterialIndex\r\n\t* Description: Returns if the point has a material index.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.BodyPoint.prototype.HasMaterialIndex = function ()\r\n\t{\r\n\t\treturn this.material !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.GetMaterialIndex\r\n\t* Description: Returns the point material index.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.BodyPoint.prototype.GetMaterialIndex = function ()\r\n\t{\r\n\t\treturn this.material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.SetMaterialIndex\r\n\t* Description: Sets the point material index.\r\n\t* Parameters:\r\n\t*\tmaterial {integer} the material index\r\n\t*/\r\n\tJSM.BodyPoint.prototype.SetMaterialIndex = function (material)\r\n\t{\r\n\t\tthis.material = material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.InheritAttributes\r\n\t* Description: Inherits attributes (material) from an another point.\r\n\t* Parameters:\r\n\t*\tsource {BodyPoint} the source point\r\n\t*/\r\n\tJSM.BodyPoint.prototype.InheritAttributes = function (source)\r\n\t{\r\n\t\tthis.material = source.material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPoint.Clone\r\n\t* Description: Clones the point.\r\n\t* Returns:\r\n\t*\t{BodyPoint} the cloned instance\r\n\t*/\r\n\tJSM.BodyPoint.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.BodyPoint (this.vertex);\r\n\t\tresult.material = this.material;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: BodyLine\r\n\t* Description:\r\n\t*\tRepresents a line in a 3D body. The line contains begin and end indices of vertices\r\n\t*\tstored in its 3D body, and a material index of a material defined outside of the body.\r\n\t* Parameters:\r\n\t*\tbeg {integer} begin vertex index stored in the body\r\n\t*\tend {integer} end vertex index stored in the body\r\n\t*/\r\n\tJSM.BodyLine = function (beg, end)\t{\r\n\t\tthis.beg = beg;\r\n\t\tthis.end = end;\r\n\t\tthis.material = -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.GetBegVertexIndex\r\n\t* Description: Returns the body vertex index at the beginning of the line.\r\n\t* Returns:\r\n\t*\t{integer} the stored vertex index\r\n\t*/\r\n\tJSM.BodyLine.prototype.GetBegVertexIndex = function ()\t{\r\n\t\treturn this.beg;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.SetBegVertexIndex\r\n\t* Description: Sets the begin vertex index of the line.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t*/\r\n\tJSM.BodyLine.prototype.SetBegVertexIndex = function (index)\t{\r\n\t\tthis.beg = index;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.GetEndVertexIndex\r\n\t* Description: Returns the body vertex index at the end of the line.\r\n\t* Returns:\r\n\t*\t{integer} the stored vertex index\r\n\t*/\r\n\tJSM.BodyLine.prototype.GetEndVertexIndex = function ()\t{\r\n\t\treturn this.end;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.SetEndVertexIndex\r\n\t* Description: Sets the end vertex index of the line.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t*/\r\n\tJSM.BodyLine.prototype.SetEndVertexIndex = function (index)\t{\r\n\t\tthis.end = index;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.HasMaterialIndex\r\n\t* Description: Returns if the line has a material index.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.BodyLine.prototype.HasMaterialIndex = function (){\r\n\t\treturn this.material !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.GetMaterialIndex\r\n\t* Description: Returns the line material index.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.BodyLine.prototype.GetMaterialIndex = function (){\r\n\t\treturn this.material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.SetMaterialIndex\r\n\t* Description: Sets the line material index.\r\n\t* Parameters:\r\n\t*\tmaterial {integer} the material index\r\n\t*/\r\n\tJSM.BodyLine.prototype.SetMaterialIndex = function (material){\r\n\t\tthis.material = material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.InheritAttributes\r\n\t* Description: Inherits attributes (material) from an another line.\r\n\t* Parameters:\r\n\t*\tsource {BodyLine} the source line\r\n\t*/\r\n\tJSM.BodyLine.prototype.InheritAttributes = function (source)\r\n\t{\r\n\t\tthis.material = source.material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyLine.Clone\r\n\t* Description: Clones the line.\r\n\t* Returns:\r\n\t*\t{BodyLine} the cloned instance\r\n\t*/\r\n\tJSM.BodyLine.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.BodyLine (this.beg, this.end);\r\n\t\tresult.material = this.material;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: BodyPolygon\r\n\t* Description:\r\n\t*\tRepresents a polygon in a 3D body. The polygon contains indices of vertices stored in its body.\r\n\t*\tIt also contains a material index of a material defined outside of the body, and a curve\r\n\t*\tgroup index which defines its normal vector calculation in case of smooth surfaces.\r\n\t* Parameters:\r\n\t*\tvertices {integer[*]} array of vertex indices stored in the body\r\n\t*/\r\n\tJSM.BodyPolygon = function (vertices)\r\n\t{\r\n\t\tthis.vertices = vertices;\r\n\t\tthis.material = -1;\r\n\t\tthis.curved = -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.AddVertexIndex\r\n\t* Description: Adds a vertex index to the polygon.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.AddVertexIndex = function (index)\r\n\t{\r\n\t\tthis.vertices.push (index);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.InsertVertexIndex\r\n\t* Description: Inserts a vertex index to given index in the polygon.\r\n\t* Parameters:\r\n\t*\tvertexIndex {integer} the vertex index\r\n\t*\tpolygonIndex {integer} the index in the polygon\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.InsertVertexIndex = function (vertexIndex, polygonIndex)\r\n\t{\r\n\t\tthis.vertices.splice (polygonIndex, 0, vertexIndex);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.GetVertexIndex\r\n\t* Description: Returns the body vertex index at the given polygon vertex index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the polygon vertex index\r\n\t* Returns:\r\n\t*\t{integer} the stored vertex index\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.GetVertexIndex = function (index)\r\n\t{\r\n\t\treturn this.vertices[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.SetVertexIndex\r\n\t* Description: Sets the body vertex index at the given polygon vertex index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the polygon vertex index\r\n\t*\tvertIndex {integer} the body vertex index\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.SetVertexIndex = function (index, vertIndex)\r\n\t{\r\n\t\tthis.vertices[index] = vertIndex;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.GetVertexIndices\r\n\t* Description: Returns an array of the body vertex indices in the polygon.\r\n\t* Returns:\r\n\t*\t{integer[]} the stored vertex indices\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.GetVertexIndices = function ()\r\n\t{\r\n\t\treturn this.vertices;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.SetVertexIndices\r\n\t* Description: Sets the vertex indices in the polygon.\r\n\t* Parameters:\r\n\t*\tvertices {integer[]} the new vertex indices\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.SetVertexIndices = function (vertices)\r\n\t{\r\n\t\tthis.vertices = vertices;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.VertexIndexCount\r\n\t* Description: Returns the vertex count of the polygon.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.VertexIndexCount = function ()\r\n\t{\r\n\t\treturn this.vertices.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.HasMaterialIndex\r\n\t* Description: Returns if the polygon has a material index.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.HasMaterialIndex = function ()\r\n\t{\r\n\t\treturn this.material !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.GetMaterialIndex\r\n\t* Description: Returns the polygons material index.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.GetMaterialIndex = function ()\r\n\t{\r\n\t\treturn this.material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.SetMaterialIndex\r\n\t* Description: Sets the polygons material index.\r\n\t* Parameters:\r\n\t*\tmaterial {integer} the material index\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.SetMaterialIndex = function (material)\r\n\t{\r\n\t\tthis.material = material;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.HasCurveGroup\r\n\t* Description: Returns if the polygon has a curve group index.\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.HasCurveGroup = function ()\r\n\t{\r\n\t\treturn this.curved !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.GetCurveGroup\r\n\t* Description: Returns the polygons curve group index.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.GetCurveGroup = function ()\r\n\t{\r\n\t\treturn this.curved;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.SetCurveGroup\r\n\t* Description: Sets the polygons curve group index.\r\n\t* Parameters:\r\n\t*\tgroup {integer} the curve group index\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.SetCurveGroup = function (group)\r\n\t{\r\n\t\tthis.curved = group;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.ReverseVertexIndices\r\n\t* Description: Reverses the order of vertex indices in the polygon.\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.ReverseVertexIndices = function ()\r\n\t{\r\n\t\tthis.vertices.reverse ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.InheritAttributes\r\n\t* Description: Inherits attributes (material and curve group index) from an another polygon.\r\n\t* Parameters:\r\n\t*\tsource {BodyPolygon} the source polygon\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.InheritAttributes = function (source)\r\n\t{\r\n\t\tthis.material = source.material;\r\n\t\tthis.curved = source.curved;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyPolygon.Clone\r\n\t* Description: Clones the polygon.\r\n\t* Returns:\r\n\t*\t{BodyPolygon} the cloned instance\r\n\t*/\r\n\tJSM.BodyPolygon.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.BodyPolygon ([]);\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tresult.vertices.push (this.vertices[i]);\r\n\t\t}\r\n\t\tresult.material = this.material;\r\n\t\tresult.curved = this.curved;\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Enum: TextureProjectionType\r\n\t* Description: Texture projection type.\r\n\t* Values:\r\n\t*\t{Planar} planar projection\r\n\t*\t{Cubic} cubic projection\r\n\t*\t{Cylindrical} cylindrical projection\r\n\t*/\r\n\tJSM.TextureProjectionType = {\r\n\t\tPlanar : 0,\r\n\t\tCubic : 1,\r\n\t\tCylindrical : 2\r\n\t};\r\n\r\n\t/**\r\n\t* Class: BodyTextureProjection\r\n\t* Description:\r\n\t*\tRepresents the texture projection of the body. It contains a projection type,\r\n\t*\tand a coordinate system for projection.\r\n\t*/\r\n\tJSM.BodyTextureProjection = function ()\r\n\t{\r\n\t\tthis.type = null;\r\n\t\tthis.coords = null;\r\n\t\tthis.SetCubic (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.GetType\r\n\t* Description: Returns the texture projection type.\r\n\t* Returns:\r\n\t*\t{TextureProjectionType} the result\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.GetType = function ()\r\n\t{\r\n\t\treturn this.type;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.GetCoords\r\n\t* Description: Returns the texture projection coordinate system.\r\n\t* Returns:\r\n\t*\t{CoordSystem} the result\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.GetCoords = function ()\r\n\t{\r\n\t\treturn this.coords;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.SetType\r\n\t* Description: Sets the texture projection type.\r\n\t* Parameters:\r\n\t*\ttype {TextureProjectionType} the type\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.SetType = function (type)\r\n\t{\r\n\t\tthis.type = type;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.SetCoords\r\n\t* Description: Sets the texture projection coordinates.\r\n\t* Parameters:\r\n\t*\tcoords {CoordSystem} the coordinates\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.SetCoords = function (coords)\r\n\t{\r\n\t\tthis.coords = coords;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.SetPlanar\r\n\t* Description: Sets the texture projection to planar with the given parameters.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo of the projection\r\n\t*\txDirection {Vector} x direction of the projection plane\r\n\t*\tyDirection {Vector} y direction of the projection plane\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.SetPlanar = function (origo, xDirection, yDirection)\r\n\t{\r\n\t\tthis.type = JSM.TextureProjectionType.Planar;\r\n\t\tthis.coords = new JSM.CoordSystem (\r\n\t\t\torigo,\r\n\t\t\txDirection,\r\n\t\t\tyDirection,\r\n\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.SetCubic\r\n\t* Description: Sets the texture projection to cubic with the given parameters.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo of the projection\r\n\t*\txDirection {Vector} x direction (edge of the cube) of the projection\r\n\t*\tyDirection {Vector} y direction (edge of the cube) of the projection\r\n\t*\tzDirection {Vector} z direction (edge of the cube) of the projection\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.SetCubic = function (origo, xDirection, yDirection, zDirection)\r\n\t{\r\n\t\tthis.type = JSM.TextureProjectionType.Cubic;\r\n\t\tthis.coords = new JSM.CoordSystem (\r\n\t\t\torigo,\r\n\t\t\txDirection,\r\n\t\t\tyDirection,\r\n\t\t\tzDirection\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.SetCylindrical\r\n\t* Description: Sets the texture projection to cylindrical with the given parameters.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo of the projection\r\n\t*\tradius {number} radius of the cylinder\r\n\t*\txDirection {Vector} x direction (start point along perimeter) of the projection\r\n\t*\tzDirection {Vector} z direction (normal vector) of the projection\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.SetCylindrical = function (origo, radius, xDirection, zDirection)\r\n\t{\r\n\t\tthis.type = JSM.TextureProjectionType.Cylindrical;\r\n\t\tthis.coords = new JSM.CoordSystem (\r\n\t\t\torigo,\r\n\t\t\txDirection.Clone ().SetLength (radius),\r\n\t\t\tJSM.VectorCross (zDirection, xDirection).SetLength (radius),\r\n\t\t\tzDirection\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.Transform\r\n\t* Description: Transforms the texture projection coordinate system.\r\n\t* Parameters:\r\n\t*\ttransformation {Transformation} the transformation\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.Transform = function (transformation)\r\n\t{\r\n\t\tthis.coords.ToAbsoluteCoords ();\r\n\t\tthis.coords.origo = transformation.Apply (this.coords.origo);\r\n\t\tthis.coords.e1 = transformation.Apply (this.coords.e1);\r\n\t\tthis.coords.e2 = transformation.Apply (this.coords.e2);\r\n\t\tthis.coords.e3 = transformation.Apply (this.coords.e3);\r\n\t\tthis.coords.ToDirectionVectors ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: BodyTextureProjection.Clone\r\n\t* Description: Clones the texture projection.\r\n\t* Returns:\r\n\t*\t{BodyTextureProjection} the cloned instance\r\n\t*/\r\n\tJSM.BodyTextureProjection.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.BodyTextureProjection ();\r\n\t\tresult.SetType (this.type);\r\n\t\tresult.SetCoords (this.coords.Clone ());\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: Body\r\n\t* Description:\r\n\t*\tRepresents a 3D body. The body contains vertices, polygons,\r\n\t*\tand a texture coordinate system.\r\n\t*/\r\n\tJSM.Body = function ()\r\n\t{\r\n\t\tthis.Clear ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.AddVertex\r\n\t* Description: Adds a vertex to the body.\r\n\t* Parameters:\r\n\t*\tvertex {BodyVertex} the vertex\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added vertex\r\n\t*/\r\n\tJSM.Body.prototype.AddVertex = function (vertex)\r\n\t{\r\n\t\tthis.vertices.push (vertex);\r\n\t\treturn this.vertices.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.AddPoint\r\n\t* Description: Adds a point to the body.\r\n\t* Parameters:\r\n\t*\tpoint {BodyPoint} the point\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added point\r\n\t*/\r\n\tJSM.Body.prototype.AddPoint = function (point)\r\n\t{\r\n\t\tthis.points.push (point);\r\n\t\treturn this.points.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.AddLine\r\n\t* Description: Adds a line to the body.\r\n\t* Parameters:\r\n\t*\tline {BodyLine} the line\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added line\r\n\t*/\r\n\tJSM.Body.prototype.AddLine = function (line)\r\n\t{\r\n\t\tthis.lines.push (line);\r\n\t\treturn this.lines.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.AddPolygon\r\n\t* Description: Adds a polygon to the body.\r\n\t* Parameters:\r\n\t*\tpolygon {BodyPolygon} the polygon\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added polygon\r\n\t*/\r\n\tJSM.Body.prototype.AddPolygon = function (polygon)\r\n\t{\r\n\t\tthis.polygons.push (polygon);\r\n\t\treturn this.polygons.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetVertex\r\n\t* Description: Returns the vertex at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{BodyVertex} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetVertex = function (index)\r\n\t{\r\n\t\treturn this.vertices[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetVertexPosition\r\n\t* Description: Returns the position of the vertex at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetVertexPosition = function (index)\r\n\t{\r\n\t\treturn this.vertices[index].position;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetVertexPosition\r\n\t* Description: Sets the position of the vertex at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t*\tposition {Coord} the new position\r\n\t*/\r\n\tJSM.Body.prototype.SetVertexPosition = function (index, position)\r\n\t{\r\n\t\tthis.vertices[index].position = position;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetPoint\r\n\t* Description: Returns the point at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the point index\r\n\t* Returns:\r\n\t*\t{BodyPoint} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetPoint = function (index)\r\n\t{\r\n\t\treturn this.points[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetLine\r\n\t* Description: Returns the line at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the line index\r\n\t* Returns:\r\n\t*\t{BodyLine} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetLine = function (index)\r\n\t{\r\n\t\treturn this.lines[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetPolygon\r\n\t* Description: Returns the polygon at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the polygon index\r\n\t* Returns:\r\n\t*\t{BodyPolygon} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetPolygon = function (index)\r\n\t{\r\n\t\treturn this.polygons[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetPointsMaterialIndex\r\n\t* Description: Sets the material index for all points in the body.\r\n\t* Parameters:\r\n\t*\tmaterial {integer} the material index\r\n\t*/\r\n\tJSM.Body.prototype.SetPointsMaterialIndex = function (material)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tthis.points[i].SetMaterialIndex (material);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetLinesMaterialIndex\r\n\t* Description: Sets the material index for all lines in the body.\r\n\t* Parameters:\r\n\t*\tmaterial {integer} the material index\r\n\t*/\r\n\tJSM.Body.prototype.SetLinesMaterialIndex = function (material)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.lines.length; i++) {\r\n\t\t\tthis.lines[i].SetMaterialIndex (material);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetPolygonsMaterialIndex\r\n\t* Description: Sets the material index for all polygons in the body.\r\n\t* Parameters:\r\n\t*\tmaterial {integer} the material index\r\n\t*/\r\n\tJSM.Body.prototype.SetPolygonsMaterialIndex = function (material)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.polygons.length; i++) {\r\n\t\t\tthis.polygons[i].SetMaterialIndex (material);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetPolygonsCurveGroup\r\n\t* Description: Sets the curve group index for all polygons in the body.\r\n\t* Parameters:\r\n\t*\tgroup {integer} the curve group index\r\n\t*/\r\n\tJSM.Body.prototype.SetPolygonsCurveGroup = function (group)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.polygons.length; i++) {\r\n\t\t\tthis.polygons[i].SetCurveGroup (group);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.RemoveVertex\r\n\t* Description: Removes a vertex from the body. It also removes connected polygons.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the vertex\r\n\t*/\r\n\tJSM.Body.prototype.RemoveVertex = function (index)\r\n\t{\r\n\t\tvar pointsToDelete = [];\r\n\t\tvar linesToDelete = [];\r\n\t\tvar polygonsToDelete = [];\r\n\t\tvar i, j, point, line, polygon, bodyVertIndex;\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tpoint = this.points[i];\r\n\t\t\tif (point.GetVertexIndex () == index) {\r\n\t\t\t\tpointsToDelete.push (i);\r\n\t\t\t} else if (point.GetVertexIndex () >= index) {\r\n\t\t\t\tpoint.SetVertexIndex (point.GetVertexIndex () - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < this.lines.length; i++) {\r\n\t\t\tline = this.lines[i];\r\n\t\t\tif (line.GetBegVertexIndex () == index || line.GetEndVertexIndex () == index) {\r\n\t\t\t\tlinesToDelete.push (i);\r\n\t\t\t} else {\r\n\t\t\t\tif (line.GetBegVertexIndex () >= index) {\r\n\t\t\t\t\tline.SetBegVertexIndex (line.GetBegVertexIndex () - 1);\r\n\t\t\t\t}\r\n\t\t\t\tif (line.GetEndVertexIndex () >= index) {\r\n\t\t\t\t\tline.SetEndVertexIndex (line.GetEndVertexIndex () - 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < this.polygons.length; i++) {\r\n\t\t\tpolygon = this.polygons[i];\r\n\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\tbodyVertIndex = polygon.GetVertexIndex (j);\r\n\t\t\t\tif (polygon.GetVertexIndex (j) == index) {\r\n\t\t\t\t\tpolygonsToDelete.push (i);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (bodyVertIndex >= index) {\r\n\t\t\t\t\tpolygon.SetVertexIndex (j, bodyVertIndex - 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < pointsToDelete.length; i++) {\r\n\t\t\tthis.RemovePoint (pointsToDelete[i] - i);\r\n\t\t}\r\n\t\tfor (i = 0; i < linesToDelete.length; i++) {\r\n\t\t\tthis.RemoveLine (linesToDelete[i] - i);\r\n\t\t}\r\n\t\tfor (i = 0; i < polygonsToDelete.length; i++) {\r\n\t\t\tthis.RemovePolygon (polygonsToDelete[i] - i);\r\n\t\t}\r\n\t\tthis.vertices.splice (index, 1);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.RemovePoint\r\n\t* Description: Removes a point from the body.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the point\r\n\t*/\r\n\tJSM.Body.prototype.RemovePoint = function (index)\r\n\t{\r\n\t\tthis.points.splice (index, 1);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.RemoveLine\r\n\t* Description: Removes a line from the body.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the line\r\n\t*/\r\n\tJSM.Body.prototype.RemoveLine = function (index)\r\n\t{\r\n\t\tthis.lines.splice (index, 1);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.RemovePolygon\r\n\t* Description: Removes a polygon from the body.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the polygon\r\n\t*/\r\n\tJSM.Body.prototype.RemovePolygon = function (index)\r\n\t{\r\n\t\tthis.polygons.splice (index, 1);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.VertexCount\r\n\t* Description: Returns the vertex count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Body.prototype.VertexCount = function ()\r\n\t{\r\n\t\treturn this.vertices.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.PointCount\r\n\t* Description: Returns the point count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Body.prototype.PointCount = function ()\r\n\t{\r\n\t\treturn this.points.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.LineCount\r\n\t* Description: Returns the line count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Body.prototype.LineCount = function ()\r\n\t{\r\n\t\treturn this.lines.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.PolygonCount\r\n\t* Description: Returns the polygon count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Body.prototype.PolygonCount = function ()\r\n\t{\r\n\t\treturn this.polygons.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetTextureProjection\r\n\t* Description: Returns the texture projection of the body.\r\n\t* Returns:\r\n\t*\t{BodyTextureProjection} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetTextureProjection = function ()\r\n\t{\r\n\t\treturn this.projection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetTextureProjection\r\n\t* Description: Sets the texture projection of the body.\r\n\t* Parameters:\r\n\t*\tprojection {BodyTextureProjection} the new texture projection\r\n\t*/\r\n\tJSM.Body.prototype.SetTextureProjection = function (projection)\r\n\t{\r\n\t\tthis.projection = projection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetPlanarTextureProjection\r\n\t* Description: Sets the texture projection to planar with the given parameters.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo of the projection\r\n\t*\txDirection {Vector} x direction of the projection plane\r\n\t*\tyDirection {Vector} y direction of the projection plane\r\n\t*/\r\n\tJSM.Body.prototype.SetPlanarTextureProjection = function (origo, xDirection, yDirection)\r\n\t{\r\n\t\tthis.projection.SetPlanar (origo, xDirection, yDirection);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetCubicTextureProjection\r\n\t* Description: Sets the texture projection to cubic with the given parameters.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo of the projection\r\n\t*\txDirection {Vector} x direction (edge of the cube) of the projection\r\n\t*\tyDirection {Vector} y direction (edge of the cube) of the projection\r\n\t*\tzDirection {Vector} z direction (edge of the cube) of the projection\r\n\t*/\r\n\tJSM.Body.prototype.SetCubicTextureProjection = function (origo, xDirection, yDirection, zDirection)\r\n\t{\r\n\t\tthis.projection.SetCubic (origo, xDirection, yDirection, zDirection);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.SetCylindricalTextureProjection\r\n\t* Description: Sets the texture projection to cylindrical with the given parameters.\r\n\t* Parameters:\r\n\t*\torigo {Coord} origo of the projection\r\n\t*\tradius {number} radius of the cylinder\r\n\t*\txDirection {Vector} x direction (start point along perimeter) of the projection\r\n\t*\tzDirection {Vector} z direction (normal vector) of the projection\r\n\t*/\r\n\tJSM.Body.prototype.SetCylindricalTextureProjection = function (origo, radius, xDirection, zDirection)\r\n\t{\r\n\t\tthis.projection.SetCylindrical (origo, radius, xDirection, zDirection);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.Transform\r\n\t* Description: Transforms the body.\r\n\t* Parameters:\r\n\t*\ttransformation {Transformation} the transformation\r\n\t*/\r\n\tJSM.Body.prototype.Transform = function (transformation)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tthis.vertices[i].position = transformation.Apply (this.vertices[i].position);\r\n\t\t}\r\n\t\tthis.projection.Transform (transformation);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetBoundingBox\r\n\t* Description: Returns the bounding box of the body.\r\n\t* Returns:\r\n\t*\t{Box} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tcoord = this.vertices[i].position;\r\n\t\t\tmin.x = JSM.Minimum (min.x, coord.x);\r\n\t\t\tmin.y = JSM.Minimum (min.y, coord.y);\r\n\t\t\tmin.z = JSM.Minimum (min.z, coord.z);\r\n\t\t\tmax.x = JSM.Maximum (max.x, coord.x);\r\n\t\t\tmax.y = JSM.Maximum (max.y, coord.y);\r\n\t\t\tmax.z = JSM.Maximum (max.z, coord.z);\r\n\t\t}\r\n\t\t\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetCenter\r\n\t* Description: Returns the center of the bounding box of the body.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar boundingBox = this.GetBoundingBox ();\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.GetBoundingSphere\r\n\t* Description: Returns the bounding sphere of the body.\r\n\t* Returns:\r\n\t*\t{Sphere} the result\r\n\t*/\r\n\tJSM.Body.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ();\r\n\t\tvar radius = 0.0;\r\n\t\t\r\n\t\tvar i, current;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tcurrent = center.DistanceTo (this.vertices[i].position);\r\n\t\t\tif (JSM.IsGreater (current, radius)) {\r\n\t\t\t\tradius = current;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar result = new JSM.Sphere (center, radius);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.OffsetToOrigo\r\n\t* Description: Offsets the body to the origo.\r\n\t*/\r\n\tJSM.Body.prototype.OffsetToOrigo = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ().Clone ();\r\n\t\tcenter.MultiplyScalar (-1.0);\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tthis.vertices[i].position = JSM.CoordAdd (this.vertices[i].position, center);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.Merge\r\n\t* Description: Merges an existing body to the body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body to merge\r\n\t*/\r\n\tJSM.Body.prototype.Merge = function (body)\r\n\t{\r\n\t\tvar oldVertexCount = this.vertices.length;\r\n\t\t\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tthis.vertices.push (body.GetVertex (i).Clone ());\r\n\t\t}\r\n\t\t\r\n\t\tvar newPoint;\r\n\t\tfor (i = 0; i < body.PointCount (); i++) {\r\n\t\t\tnewPoint = body.GetPoint (i).Clone ();\r\n\t\t\tnewPoint.SetVertexIndex (newPoint.GetVertexIndex () + oldVertexCount);\r\n\t\t\tthis.points.push (newPoint);\r\n\t\t}\t\r\n\t\t\r\n\t\tvar newLine;\r\n\t\tfor (i = 0; i < body.LineCount (); i++) {\r\n\t\t\tnewLine = body.GetLine (i).Clone ();\r\n\t\t\tnewLine.SetBegVertexIndex (newLine.GetBegVertexIndex () + oldVertexCount);\r\n\t\t\tnewLine.SetEndVertexIndex (newLine.GetEndVertexIndex () + oldVertexCount);\r\n\t\t\tthis.lines.push (newLine);\r\n\t\t}\r\n\r\n\t\tvar newPolygon;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tnewPolygon = body.GetPolygon (i).Clone ();\r\n\t\t\tfor (j = 0; j < newPolygon.VertexIndexCount (); j++) {\r\n\t\t\t\tnewPolygon.vertices[j] += oldVertexCount;\r\n\t\t\t}\r\n\t\t\tthis.polygons.push (newPolygon);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.Clear\r\n\t* Description: Makes the body empty.\r\n\t*/\r\n\tJSM.Body.prototype.Clear = function ()\r\n\t{\r\n\t\tthis.vertices = [];\r\n\t\tthis.points = [];\r\n\t\tthis.lines = [];\r\n\t\tthis.polygons = [];\r\n\t\tthis.projection = new JSM.BodyTextureProjection ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Body.Clone\r\n\t* Description: Clones the body.\r\n\t* Returns:\r\n\t*\t{Body} the cloned instance\r\n\t*/\r\n\tJSM.Body.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tresult.AddVertex (this.vertices[i].Clone ());\r\n\t\t}\r\n\t\t\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tresult.AddPoint (this.points[i].Clone ());\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this.lines.length; i++) {\r\n\t\t\tresult.AddLine (this.lines[i].Clone ());\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this.polygons.length; i++) {\r\n\t\t\tresult.AddPolygon (this.polygons[i].Clone ());\r\n\t\t}\r\n\r\n\t\tresult.SetTextureProjection (this.projection.Clone ());\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/model',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Model\r\n\t* Description: Represents a 3D model. The model contains bodies.\r\n\t*/\r\n\tJSM.Model = function ()\r\n\t{\r\n\t\tthis.bodies = [];\r\n\t\tthis.materials = new JSM.MaterialSet ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.AddBody\r\n\t* Description: Adds a body to the model.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added body\r\n\t*/\r\n\tJSM.Model.prototype.AddBody = function (body)\r\n\t{\r\n\t\tthis.bodies.push (body);\r\n\t\treturn this.bodies.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.AddBodies\r\n\t* Description: Adds bodies to the model.\r\n\t* Parameters:\r\n\t*\tbodies {Body[*]} the body\r\n\t*/\r\n\tJSM.Model.prototype.AddBodies = function (bodies)\r\n\t{\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < bodies.length; i++) {\r\n\t\t\tbody = bodies[i];\r\n\t\t\tthis.AddBody (body);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.GetBody\r\n\t* Description: Returns the stored body with the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index of the body\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.Model.prototype.GetBody = function (index)\r\n\t{\r\n\t\treturn this.bodies[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.BodyCount\r\n\t* Description: Returns the body count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Model.prototype.BodyCount = function ()\r\n\t{\r\n\t\treturn this.bodies.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.AddMaterial\r\n\t* Description: Adds a material to the mode.\r\n\t* Parameters:\r\n\t*\tmaterial {Material} the material\r\n\t* Returns:\r\n\t*\t{integer} the index of the newly added material\r\n\t*/\r\n\tJSM.Model.prototype.AddMaterial = function (material)\r\n\t{\r\n\t\treturn this.materials.AddMaterial (material);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.GetMaterial\r\n\t* Description: Returns a material from the model.\r\n\t* Parameters:\r\n\t*\tindex {integer} the index\r\n\t* Returns:\r\n\t*\t{Material} the result\r\n\t*/\r\n\tJSM.Model.prototype.GetMaterial = function (index)\r\n\t{\r\n\t\treturn this.materials.GetMaterial (index);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.GetDefaultMaterial\r\n\t* Description: Returns the default material from the model. It is always exists.\r\n\t* Returns:\r\n\t*\t{Material} the result\r\n\t*/\r\n\tJSM.Model.prototype.GetDefaultMaterial = function ()\r\n\t{\r\n\t\treturn this.materials.GetDefaultMaterial ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.GetMaterialSet\r\n\t* Description: Returns the material set of the model.\r\n\t* Returns:\r\n\t*\t{MaterialSet} the result\r\n\t*/\r\n\tJSM.Model.prototype.GetMaterialSet = function ()\r\n\t{\r\n\t\treturn this.materials;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.Count\r\n\t* Description: Returns the material count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Model.prototype.MaterialCount = function ()\r\n\t{\r\n\t\treturn this.materials.Count ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.VertexCount\r\n\t* Description: Returns the vertex count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Model.prototype.VertexCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tcount += this.bodies[i].VertexCount ();\r\n\t\t}\r\n\t\treturn count;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Model.PolygonCount\r\n\t* Description: Returns the polygon count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.Model.prototype.PolygonCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tcount += this.bodies[i].PolygonCount ();\r\n\t\t}\r\n\t\treturn count;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/adjacencyinfo',[\"../core/jsm\"],function(JSM){\r\n\r\n\t/**\r\n\t* Class: VertInfo\r\n\t* Description:\r\n\t*\tContains adjacency information for a body vertex. Contains arrays\r\n\t*\twith indices of connected edge and polygon info.\r\n\t*/\r\n\tJSM.VertInfo = function ()\r\n\t{\r\n\t\tthis.edges = [];\r\n\t\tthis.pgons = [];\r\n\t};\r\n\r\n\t/**\r\n\t* Class: EdgeInfo\r\n\t* Description:\r\n\t*\tContains adjacency information for a body edge. Contains indices\r\n\t*\tof connected vertex and polygon info.\r\n\t*/\r\n\tJSM.EdgeInfo = function ()\r\n\t{\r\n\t\tthis.vert1 = -1;\r\n\t\tthis.vert2 = -1;\r\n\t\tthis.pgon1 = -1;\r\n\t\tthis.pgon2 = -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: PolyEdgeInfo\r\n\t* Description:\r\n\t*\tContains adjacency information for a body polygon edge. Contains an index\r\n\t*\tof an existing edge, and a flag which defines its direction.\r\n\t*/\r\n\tJSM.PolyEdgeInfo = function ()\r\n\t{\r\n\t\tthis.index = -1;\r\n\t\tthis.reverse = false;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: PgonInfo\r\n\t* Description:\r\n\t*\tContains adjacency information for a body polygon. Contains arrays\r\n\t*\twith indices of connected vertex and poly edge info.\r\n\t*/\r\n\tJSM.PgonInfo = function ()\r\n\t{\r\n\t\tthis.verts = [];\r\n\t\tthis.pedges = [];\r\n\t};\r\n\r\n\t/**\r\n\t* Class: AdjacencyInfo\r\n\t* Description:\r\n\t*\tContains adjacency information for a body. Contains arrays\r\n\t*\twith vertex, edge and polygon info.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*/\r\n\tJSM.AdjacencyInfo = function (body)\r\n\t{\r\n\t\tthis.verts = null;\r\n\t\tthis.edges = null;\r\n\t\tthis.pgons = null;\r\n\t\tthis.Calculate (body);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.Reset\r\n\t* Description: Calculates the adjacency information for a body.\r\n\t* Returns:\r\n\t*\tbody {Body} the body\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.Calculate = function (body)\r\n\t{\r\n\t\tfunction AddVertex (adjacencyInfo)\r\n\t\t{\r\n\t\t\tvar vert = new JSM.VertInfo ();\r\n\t\t\tadjacencyInfo.verts.push (vert);\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddPolygon (adjacencyInfo, body, polygonIndex)\r\n\t\t{\r\n\t\t\tfunction AddEdge (adjacencyInfo, pgonInfo, fromVertexIndex, toVertexIndex, polygonIndex)\r\n\t\t\t{\r\n\t\t\t\tfunction ConnectEdge (adjacencyInfo, polygonIndex, fromVertexIndex, toVertexIndex, pedge, pgonInfo)\r\n\t\t\t\t{\r\n\t\t\t\t\tfunction ConnectPgonAndEdgeToVert (vert, pgonIndex, edgeIndex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (vert.edges.indexOf (edgeIndex) == -1) {\r\n\t\t\t\t\t\t\tvert.edges.push (edgeIndex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (vert.pgons.indexOf (pgonIndex) == -1) {\r\n\t\t\t\t\t\t\tvert.pgons.push (pgonIndex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpgonInfo.verts.push (fromVertexIndex);\r\n\t\t\t\t\tpgonInfo.pedges.push (pedge);\r\n\t\t\t\t\tConnectPgonAndEdgeToVert (adjacencyInfo.verts[fromVertexIndex], polygonIndex, pedge.index);\r\n\t\t\t\t\tConnectPgonAndEdgeToVert (adjacencyInfo.verts[toVertexIndex], polygonIndex, pedge.index);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar pedge = new JSM.PolyEdgeInfo ();\r\n\t\t\t\r\n\t\t\t\tvar i, edge;\r\n\t\t\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\t\t\tedge = adjacencyInfo.edges[i];\r\n\t\t\t\t\tif (edge.vert1 === fromVertexIndex && edge.vert2 === toVertexIndex) {\r\n\t\t\t\t\t\tpedge.index = i;\r\n\t\t\t\t\t\tpedge.reverse = false;\r\n\t\t\t\t\t} else if (edge.vert1 === toVertexIndex && edge.vert2 === fromVertexIndex) {\r\n\t\t\t\t\t\tpedge.index = i;\r\n\t\t\t\t\t\tpedge.reverse = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (pedge.index === -1) {\r\n\t\t\t\t\tvar newEdge = new JSM.EdgeInfo ();\r\n\t\t\t\t\tnewEdge.vert1 = fromVertexIndex;\r\n\t\t\t\t\tnewEdge.vert2 = toVertexIndex;\r\n\t\t\t\t\tnewEdge.pgon1 = polygonIndex;\r\n\t\t\t\t\tnewEdge.pgon2 = -1;\r\n\t\t\t\t\tadjacencyInfo.edges.push (newEdge);\r\n\t\t\t\t\t\r\n\t\t\t\t\tpedge.index = adjacencyInfo.edges.length - 1;\r\n\t\t\t\t\tpedge.reverse = false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar currEdge = adjacencyInfo.edges[pedge.index];\r\n\t\t\t\t\tif (currEdge.pgon1 === -1) {\r\n\t\t\t\t\t\tcurrEdge.pgon1 = polygonIndex;\r\n\t\t\t\t\t} else if (currEdge.pgon1 !== polygonIndex && currEdge.pgon2 === -1) {\r\n\t\t\t\t\t\tcurrEdge.pgon2 = polygonIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tConnectEdge (adjacencyInfo, polygonIndex, fromVertexIndex, toVertexIndex, pedge, pgonInfo);\r\n\t\t\t}\r\n\r\n\t\t\tvar polygon = body.GetPolygon (polygonIndex);\r\n\t\t\tvar pgon = new JSM.PgonInfo ();\r\n\t\t\t\r\n\t\t\tvar i, curr, next;\r\n\t\t\tvar count = polygon.VertexIndexCount ();\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurr = polygon.GetVertexIndex (i);\r\n\t\t\t\tnext = polygon.GetVertexIndex (i < count - 1 ? i + 1 : 0);\r\n\t\t\t\tAddEdge (adjacencyInfo, pgon, curr, next, polygonIndex);\r\n\t\t\t}\r\n\t\t\tadjacencyInfo.pgons.push (pgon);\r\n\t\t}\r\n\r\n\t\tthis.verts = [];\r\n\t\tthis.edges = [];\r\n\t\tthis.pgons = [];\t\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tAddVertex (this);\r\n\t\t}\r\n\t\t\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tAddPolygon (this, body, i);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.IsContourVertex\r\n\t* Description: Returns if the vertex has contour edge.\r\n\t* Parameters:\r\n\t*\tvert {VertInfo} the vertex info\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.IsContourVertex = function (vert)\r\n\t{\r\n\t\tvar i, edge;\r\n\t\tfor (i = 0; i < vert.edges.length; i++) {\r\n\t\t\tedge = vert.edges[i];\r\n\t\t\tif (this.IsContourEdge (this.edges[edge])) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.IsContourEdge\r\n\t* Description: Returns if the edge has only one polygon neighbour.\r\n\t* Parameters:\r\n\t*\tedge {EdgeInfo} the edge info\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.IsContourEdge = function (edge)\r\n\t{\r\n\t\tvar pgonCount = this.GetEdgePolygonCount (edge);\r\n\t\treturn pgonCount == 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.GetEdgePolygonCount\r\n\t* Description: Returns the neighbour polygon count of the edge.\r\n\t* Parameters:\r\n\t*\tedge {EdgeInfo} the edge info\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.GetEdgePolygonCount = function (edge)\r\n\t{\r\n\t\tvar pgonCount = 0;\r\n\t\tif (edge.pgon1 != -1) {\r\n\t\t\tpgonCount += 1;\r\n\t\t}\r\n\t\tif (edge.pgon2 != -1) {\r\n\t\t\tpgonCount += 2;\r\n\t\t}\r\n\t\treturn pgonCount;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.GetAnotherPgonOfEdge\r\n\t* Description: Returns the polygon index which is next to the given polygon along an edge.\r\n\t* Parameters:\r\n\t*\tedge {EdgeInfo} the edge info\r\n\t*\tcurrentPgon {integer} the polygon index\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.GetAnotherPgonOfEdge = function (edge, pgon)\r\n\t{\r\n\t\tif (edge.pgon1 != -1 && edge.pgon1 != pgon) {\r\n\t\t\treturn edge.pgon1;\r\n\t\t} else if (edge.pgon2 != -1 && edge.pgon2 != pgon) {\r\n\t\t\treturn edge.pgon2;\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.GetPolyEdgeStartVertex\r\n\t* Description: Returns the start vertex index of a polygon edge.\r\n\t* Parameters:\r\n\t*\tpolyEdge {PolyEdgeInfo} the polygon edge info\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.GetPolyEdgeStartVertex = function (polyEdge)\r\n\t{\r\n\t\tif (!polyEdge.reverse) {\r\n\t\t\treturn this.edges[polyEdge.index].vert1;\r\n\t\t} else {\r\n\t\t\treturn this.edges[polyEdge.index].vert2;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AdjacencyInfo.GetPolyEdgeEndVertex\r\n\t* Description: Returns the end vertex index of a polygon edge.\r\n\t* Parameters:\r\n\t*\tpolyEdge {PolyEdgeInfo} the polygon edge info\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.AdjacencyInfo.prototype.GetPolyEdgeEndVertex = function (polyEdge)\r\n\t{\r\n\t\tif (!polyEdge.reverse) {\r\n\t\t\treturn this.edges[polyEdge.index].vert2;\r\n\t\t} else {\r\n\t\t\treturn this.edges[polyEdge.index].vert1;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyVertexToPolygon\r\n\t* Description:\r\n\t*\tCalculates an array which contains array of the connected polygon\r\n\t*\tindices for all vertex indices in the body. The result is an\r\n\t*\tarray of array of polygon indices.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{integer[*][*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyVertexToPolygon = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\t\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tresult.push ([]);\r\n\t\t}\r\n\t\t\r\n\t\tvar polygon;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\tresult[polygon.GetVertexIndex (j)].push (i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: IsSolidBody\r\n\t* Description:\r\n\t*\tReturns if a given body is solid. It means that every\r\n\t*\tedges of the body has two polygon neighbours.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.IsSolidBody = function (body)\r\n\t{\r\n\t\tvar adjacencyInfo = new JSM.AdjacencyInfo (body);\r\n\t\tif (adjacencyInfo.edges.length === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar i, edge;\r\n\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\tedge = adjacencyInfo.edges[i];\r\n\t\t\tif (edge.pgon1 === -1 || edge.pgon2 === -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CheckSolidBody\r\n\t* Description:\r\n\t*\tReturns if a given body solid body is correct. It means that every\r\n\t*\tedges of the body has two polygon neighbours, and there are no edge\r\n\t*\tin the body which appears twice with the same direction.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.CheckSolidBody = function (body)\r\n\t{\r\n\t\tvar adjacencyInfo = new JSM.AdjacencyInfo (body);\r\n\t\tvar i, j, edge, pedge, found, pgon1, pgon2, pgon1Reverse, pgon2Reverse;\r\n\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\tedge = adjacencyInfo.edges[i];\r\n\t\t\tif (edge.pgon1 === -1 || edge.pgon2 === -1) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpgon1 = adjacencyInfo.pgons[edge.pgon1];\r\n\t\t\tfound = false;\r\n\t\t\tfor (j = 0; j < pgon1.pedges.length; j++) {\r\n\t\t\t\tpedge = pgon1.pedges[j];\r\n\t\t\t\tif (pedge.index == i) {\r\n\t\t\t\t\tpgon1Reverse = pedge.reverse;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!found) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpgon2 = adjacencyInfo.pgons[edge.pgon2];\r\n\t\t\tfound = false;\r\n\t\t\tfor (j = 0; j < pgon2.pedges.length; j++) {\r\n\t\t\t\tpedge = pgon2.pedges[j];\r\n\t\t\t\tif (pedge.index == i) {\r\n\t\t\t\t\tpgon2Reverse = pedge.reverse;\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (!found) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (pgon1Reverse == pgon2Reverse) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TraversePgonsAlongEdges\r\n\t* Description:\r\n\t*\tTraverses polygons along edges. The given callback function called on every\r\n\t*\tfound polygon. The return value of the callback means if the traverse should\r\n\t*\tcontinue along the edges of the current polygon.\r\n\t* Parameters:\r\n\t*\tpgonIndex {integer} the polygon index to start from\r\n\t*\tadjacencyInfo {AdjacencyInfo} the adjacency info\r\n\t*\tonPgonFound {function} the callback\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.TraversePgonsAlongEdges = function (pgonIndex, adjacencyInfo, onPgonFound)\r\n\t{\r\n\t\tfunction AddNeighboursToStack (pgonIndex, adjacencyInfo, pgonStack)\r\n\t\t{\r\n\t\t\tvar pgon = adjacencyInfo.pgons[pgonIndex];\r\n\t\t\tvar i, edge, anotherPgon;\r\n\t\t\tfor (i = 0; i < pgon.pedges.length; i++) {\r\n\t\t\t\tedge = adjacencyInfo.edges[pgon.pedges[i].index];\r\n\t\t\t\tanotherPgon = adjacencyInfo.GetAnotherPgonOfEdge (edge, pgonIndex);\r\n\t\t\t\tif (anotherPgon != -1) {\r\n\t\t\t\t\tpgonStack.push (anotherPgon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar pgonIsProcessed = {};\r\n\t\tvar pgonStack = [pgonIndex];\r\n\t\tvar currentPgonIndex;\r\n\t\twhile (pgonStack.length > 0) {\r\n\t\t\tcurrentPgonIndex = pgonStack.pop ();\r\n\t\t\tif (pgonIsProcessed[currentPgonIndex]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tpgonIsProcessed[currentPgonIndex] = true;\r\n\t\t\tif (onPgonFound (currentPgonIndex)) {\r\n\t\t\t\tAddNeighboursToStack (currentPgonIndex, adjacencyInfo, pgonStack);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/bodyutils',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: AddVertexToBody\r\n\t* Description: Adds a vertex to an existing body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tx {number} the x coordinate of the vertex\r\n\t*\ty {number} the y coordinate of the vertex\r\n\t*\tz {number} the z coordinate of the vertex\r\n\t*/\r\n\tJSM.AddVertexToBody = function (body, x, y, z)\r\n\t{\r\n\t\treturn body.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, z)));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AddPointToBody\r\n\t* Description: Adds a point to an existing body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tvertex {integer} the vertex index stored in the body\r\n\t*/\r\n\tJSM.AddPointToBody = function (body, vertex)\r\n\t{\r\n\t\treturn body.AddPoint (new JSM.BodyPoint (vertex));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AddLineToBody\r\n\t* Description: Adds a line to an existing body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tbeg {integer} begin vertex index stored in the body\r\n\t*\tend {integer} end vertex index stored in the body\r\n\t*/\r\n\tJSM.AddLineToBody = function (body, beg, end)\r\n\t{\r\n\t\treturn body.AddLine (new JSM.BodyLine (beg, end));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AddPolygonToBody\r\n\t* Description: Adds a polygon to an existing body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tvertices {integer[*]} array of vertex indices stored in the body\r\n\t*/\r\n\tJSM.AddPolygonToBody = function (body, vertices)\r\n\t{\r\n\t\treturn body.AddPolygon (new JSM.BodyPolygon (vertices));\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CheckBody\r\n\t* Description:\r\n\t*\tChecks if the body is correct. It means that every polygon has at least three\r\n\t*\tvertices, and every point, line and polygon vertex index is valid.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{boolean} the result\r\n\t*/\r\n\tJSM.CheckBody = function (body)\r\n\t{\r\n\t\tvar vertexCount = body.VertexCount ();\r\n\t\tvar i, j, point, line, polygon;\r\n\t\tfor (i = 0; i < body.PointCount (); i++) {\r\n\t\t\tpoint = body.GetPoint (i);\r\n\t\t\tif (point.GetVertexIndex () < 0 || point.GetVertexIndex () >= vertexCount) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < body.LineCount (); i++) {\r\n\t\t\tline = body.GetLine (i);\r\n\t\t\tif (line.GetBegVertexIndex () < 0 || line.GetBegVertexIndex () >= vertexCount) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (line.GetEndVertexIndex () < 0 || line.GetEndVertexIndex () >= vertexCount) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\tif (polygon.VertexIndexCount () < 3) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\tif (polygon.GetVertexIndex (j) < 0 || polygon.GetVertexIndex (j) >= vertexCount) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyPolygonNormal\r\n\t* Description: Calculates a normal vector for a polygon stored in the body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tindex {integer} the polygon index\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.CalculateBodyPolygonNormal = function (body, index)\r\n\t{\r\n\t\tvar polygon = body.GetPolygon (index);\r\n\t\tvar count = polygon.VertexIndexCount ();\r\n\r\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\tif (count >= 3) {\r\n\t\t\tvar i, currentIndex, nextIndex, current, next;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurrentIndex = i;\r\n\t\t\t\tnextIndex = (i + 1) % count;\r\n\t\t\r\n\t\t\t\tcurrent = body.GetVertexPosition (polygon.GetVertexIndex (currentIndex));\r\n\t\t\t\tnext = body.GetVertexPosition (polygon.GetVertexIndex (nextIndex));\r\n\t\t\r\n\t\t\t\tnormal.x += (current.y - next.y) * (current.z + next.z);\r\n\t\t\t\tnormal.y += (current.z - next.z) * (current.x + next.x);\r\n\t\t\t\tnormal.z += (current.x - next.x) * (current.y + next.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnormal.Normalize ();\r\n\t\treturn normal;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyPolygonNormals\r\n\t* Description: Calculates polygon normal vectors for all polygons stored in the body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Vector[*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyPolygonNormals = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tresult.push (JSM.CalculateBodyPolygonNormal (body, i));\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyVertexNormals\r\n\t* Description:\r\n\t*\tCalculates vertex normal vectors for all vertices stored in the body.\r\n\t*\tThe result is an array of array with vertex normal vectors.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Vector[*][*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyVertexNormals = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar polygonNormals = JSM.CalculateBodyPolygonNormals (body);\r\n\t\tvar vertexToPolygon = null;\r\n\t\t\r\n\t\tvar i, j, k, polygon, normal;\r\n\t\tvar average, count, neighbourPolygons, neighbourPolygon;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\tresult[i] = [];\r\n\r\n\t\t\tif (polygon.HasCurveGroup ()) {\r\n\t\t\t\tif (vertexToPolygon === null) {\r\n\t\t\t\t\tvertexToPolygon = JSM.CalculateBodyVertexToPolygon (body);\r\n\t\t\t\t}\r\n\t\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\t\taverage = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\t\t\t\tcount = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tneighbourPolygons = vertexToPolygon[polygon.GetVertexIndex (j)];\r\n\t\t\t\t\tfor (k = 0; k < neighbourPolygons.length; k++) {\r\n\t\t\t\t\t\tneighbourPolygon = body.GetPolygon (neighbourPolygons[k]);\r\n\t\t\t\t\t\tif (neighbourPolygon.GetCurveGroup () === polygon.GetCurveGroup ()) {\r\n\t\t\t\t\t\t\taverage = JSM.CoordAdd (average, polygonNormals[neighbourPolygons[k]]);\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\taverage.MultiplyScalar (1.0 / count);\r\n\t\t\t\t\taverage.Normalize ();\r\n\t\t\t\t\tresult[i].push (average);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnormal = polygonNormals[i];\r\n\t\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\t\tresult[i].push (new JSM.Vector (normal.x, normal.y, normal.z));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculatePolygonCurveGroups\r\n\t* Description: Calculates the curve groups for a given polygon.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon|Polygon2D} the polygon\r\n\t*\tcurveAngle {number} the curve angle\r\n\t* Returns:\r\n\t*\t{integer[*]} the curve groups\r\n\t*/\r\n\tJSM.CalculatePolygonCurveGroups = function (polygon, curveAngle)\r\n\t{\r\n\t\tvar curveGroups = [];\r\n\t\tvar count = polygon.VertexCount ();\r\n\r\n\t\tvar i, prev;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tcurveGroups.push (0);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tprev = curveGroups[polygon.GetPrevVertex (i)];\r\n\t\t\tif (polygon.GetVertexAngle (i) > curveAngle) {\r\n\t\t\t\tcurveGroups[i] = prev;\r\n\t\t\t} else {\r\n\t\t\t\tcurveGroups[i] = prev + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar firstGroup = curveGroups[0];\r\n\t\tvar lastGroup = curveGroups[count - 1];\r\n\t\tif (firstGroup === 0 && firstGroup != lastGroup) {\r\n\t\t\tfor (i = 0; curveGroups[i] == firstGroup; i++) {\r\n\t\t\t\tcurveGroups[i] = lastGroup;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn curveGroups;\r\n\t};\r\n\r\n\r\n\t/**\r\n\t* Function: CalculatePolygonCentroid\r\n\t* Description: Calculates the centroid of a polygon stored in the body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tindex {integer} the polygon index\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.CalculatePolygonCentroid = function (body, index)\r\n\t{\r\n\t\tvar polygon = body.GetPolygon (index);\r\n\t\tvar count = polygon.VertexIndexCount ();\r\n\t\t\r\n\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tresult = JSM.CoordAdd (result, body.GetVertexPosition (polygon.GetVertexIndex (i)));\r\n\t\t}\r\n\t\t\r\n\t\tresult.MultiplyScalar (1.0 / count);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MakeBodyInsideOut\r\n\t* Description: Reverses all polygons orientation in the body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*/\r\n\tJSM.MakeBodyInsideOut = function (body)\r\n\t{\r\n\t\tvar i, polygon;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\tpolygon.ReverseVertexIndices ();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SoftMoveBodyVertex\r\n\t* Description: Moves a vertex and its nearby vertices depending on gaussian function.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tindex {integer} the vertex index to move\r\n\t*\tradius {number} the radius of the movement\r\n\t*\tdirection {Vector} the direction of the movement\r\n\t*\tdistance {number} the distance of the movement\r\n\t*/\r\n\tJSM.SoftMoveBodyVertex = function (body, index, radius, direction, distance)\r\n\t{\r\n\t\tvar referenceCoord = body.GetVertexPosition (index).Clone ();\r\n\r\n\t\tvar eps = 0.00001;\r\n\t\tvar a = distance;\r\n\t\tvar b = 0.0;\r\n\t\tvar c = JSM.GetGaussianCParameter (radius, a, b, eps);\r\n\r\n\t\tvar i, currentDistance, newDistance;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tcurrentDistance = referenceCoord.DistanceTo (body.GetVertex (i).position);\r\n\t\t\tif (JSM.IsGreater (currentDistance, radius)) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tnewDistance = JSM.GetGaussianValue (currentDistance, distance, b, c);\r\n\t\t\tbody.GetVertexPosition (i).Offset (direction, newDistance);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateWireBody\r\n\t* Description: Generates a body which contains only the lines from the given body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the original body\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateWireBody = function (body)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tresult.AddVertex (body.GetVertex (i).Clone ());\r\n\t\t}\r\n\r\n\t\tvar adjacencyInfo = new JSM.AdjacencyInfo (body);\r\n\t\tvar edge;\r\n\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\tedge = adjacencyInfo.edges[i];\r\n\t\t\tJSM.AddLineToBody (result, edge.vert1, edge.vert2);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangulateWithCentroids\r\n\t* Description:\r\n\t*\tTriangulates all polygons of the body by connecting all polygon\r\n\t*\tvertices with the centroid vertex of the polygon.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*/\r\n\tJSM.TriangulateWithCentroids = function (body)\r\n\t{\r\n\t\tvar oldPolygonCount = body.PolygonCount ();\r\n\t\tvar i, j, centroidCoord, centroidIndex, oldPolygon, oldVertexCount, polygon, curr, next;\r\n\t\tfor (i = 0; i < oldPolygonCount; i++) {\r\n\t\t\tcentroidCoord = JSM.CalculatePolygonCentroid (body, i);\r\n\t\t\tcentroidIndex = body.AddVertex (new JSM.BodyVertex (centroidCoord));\r\n\t\t\toldPolygon = body.GetPolygon (i);\r\n\t\t\toldVertexCount = oldPolygon.VertexIndexCount ();\r\n\t\t\tfor (j = 0; j < oldVertexCount; j++) {\r\n\t\t\t\tcurr = oldPolygon.GetVertexIndex (j);\r\n\t\t\t\tnext = oldPolygon.GetVertexIndex (j < oldVertexCount - 1 ? j + 1 : 0);\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([curr, next, centroidIndex]);\r\n\t\t\t\tpolygon.InheritAttributes (oldPolygon);\r\n\t\t\t\tbody.AddPolygon (polygon);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < oldPolygonCount; i++) {\r\n\t\t\tbody.RemovePolygon (0);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangulatePolygons\r\n\t* Description: Triangulates all polygons of the body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*/\r\n\tJSM.TriangulatePolygons = function (body)\r\n\t{\r\n\t\tvar oldPolygonCount = body.PolygonCount ();\r\n\t\tvar i, j, oldPolygon, polygon, coord, triangleIndices, triangle, bodyTriangle;\r\n\t\tfor (i = 0; i < oldPolygonCount; i++) {\r\n\t\t\toldPolygon = body.GetPolygon (i);\r\n\t\t\tpolygon = new JSM.Polygon ();\r\n\t\t\tfor (j = 0; j < oldPolygon.VertexIndexCount (); j++) {\r\n\t\t\t\tcoord = body.GetVertexPosition (oldPolygon.GetVertexIndex (j));\r\n\t\t\t\tpolygon.AddVertex (coord.x, coord.y, coord.z);\r\n\t\t\t}\r\n\t\t\ttriangleIndices = JSM.TriangulatePolygon (polygon);\r\n\t\t\tif (triangleIndices !== null) {\r\n\t\t\t\tfor (j = 0; j < triangleIndices.length; j++) {\r\n\t\t\t\t\ttriangle = triangleIndices[j];\r\n\t\t\t\t\tbodyTriangle = new JSM.BodyPolygon ([\r\n\t\t\t\t\t\toldPolygon.GetVertexIndex (triangle[0]),\r\n\t\t\t\t\t\toldPolygon.GetVertexIndex (triangle[1]),\r\n\t\t\t\t\t\toldPolygon.GetVertexIndex (triangle[2])\r\n\t\t\t\t\t]);\r\n\t\t\t\t\tbodyTriangle.InheritAttributes (oldPolygon);\r\n\t\t\t\t\tbody.AddPolygon (bodyTriangle);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (i = 0; i < oldPolygonCount; i++) {\r\n\t\t\tbody.RemovePolygon (0);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRandomMaterials\r\n\t* Description: Generates random materials for a body. A seed number can be specified.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tmaterials {MaterialSet} the materials\r\n\t*\tseeded {boolean} seeded random generation\r\n\t*/\r\n\tJSM.GenerateRandomMaterials = function (body, materials, seeded)\r\n\t{\r\n\t\tfunction GetRandomInt (seeded, seed)\r\n\t\t{\r\n\t\t\tvar minColor = 0;\r\n\t\t\tvar maxColor = 16777215;\r\n\t\t\tvar color = 0;\r\n\t\t\tif (seeded !== undefined && seeded) {\r\n\t\t\t\tcolor = JSM.SeededRandomInt (minColor, maxColor, seed + 1);\r\n\t\t\t} else {\r\n\t\t\t\tcolor = JSM.RandomInt (minColor, maxColor);\r\n\t\t\t}\r\n\t\t\treturn color;\r\n\t\t}\r\n\t\t\r\n\t\tvar i, color, material;\r\n\t\tvar seed = 0;\r\n\t\tfor (i = 0; i < body.LineCount (); i++) {\r\n\t\t\tcolor = GetRandomInt (seeded, seed++);\r\n\t\t\tmaterial = materials.AddMaterial (new JSM.Material ({ambient : color, diffuse : color}));\r\n\t\t\tbody.GetLine (i).SetMaterialIndex (material);\r\n\t\t}\r\n\t\tfor (i = 0; i < body.PointCount (); i++) {\r\n\t\t\tcolor = GetRandomInt (seeded, seed++);\r\n\t\t\tmaterial = materials.AddMaterial (new JSM.Material ({ambient : color, diffuse : color}));\r\n\t\t\tbody.GetPoint (i).SetMaterialIndex (material);\r\n\t\t}\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tcolor = GetRandomInt (seeded, seed++);\r\n\t\t\tmaterial = materials.AddMaterial (new JSM.Material ({ambient : color, diffuse : color}));\r\n\t\t\tbody.GetPolygon (i).SetMaterialIndex (material);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AddBodyToBSPTree\r\n\t* Description: Adds a body to a BSP tree.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tbspTree {BSPTree} the BSP tree\r\n\t*\tid {anything} the id for added polygons\r\n\t*/\r\n\tJSM.AddBodyToBSPTree = function (body, bspTree, id)\r\n\t{\r\n\t\tfunction ConvertBodyPolygonToPolygon (body, index, userData)\r\n\t\t{\r\n\t\t\tvar polygon = body.GetPolygon (index);\r\n\t\t\tuserData.material = polygon.GetMaterialIndex ();\r\n\t\t\tvar result = new JSM.Polygon ();\r\n\t\t\tvar i, coord;\r\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\r\n\t\t\t\tresult.AddVertex (coord.x, coord.y, coord.z);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar i, polygon, userData;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tuserData = {\r\n\t\t\t\tid : id,\r\n\t\t\t\toriginalPolygon : i,\r\n\t\t\t\tmaterial : -1\r\n\t\t\t};\r\n\t\t\tpolygon = ConvertBodyPolygonToPolygon (body, i, userData);\r\n\t\t\tbspTree.AddPolygon (polygon, userData);\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/textureutils',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: CalculatePlanarTextureCoord\r\n\t* Description: Calculates the planar texture coordinate for a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tsystem {CoordSystem} the coordinate system\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.CalculatePlanarTextureCoord = function (coord, system)\r\n\t{\r\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\r\n\r\n\t\tvar e1 = system.e1.Clone ().Normalize ();\r\n\t\tvar e2 = system.e2.Clone ().Normalize ();\r\n\t\tvar e3 = JSM.VectorCross (system.e1, system.e2);\r\n\r\n\t\tvar xyPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e3);\r\n\t\tvar xzPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e2);\r\n\t\tvar yzPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e1);\r\n\t\t\r\n\t\tvar projected = xyPlane.ProjectCoord (coord);\r\n\t\tresult.x = yzPlane.CoordSignedDistance (projected);\r\n\t\tresult.y = xzPlane.CoordSignedDistance (projected);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateCubicTextureCoord\r\n\t* Description: Calculates the cubic texture coordinate for a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tnormal {Vector} the normal vector for calculation\r\n\t*\tsystem {CoordSystem} the coordinate system\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.CalculateCubicTextureCoord = function (coord, normal, system)\r\n\t{\r\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\r\n\r\n\t\tvar e1 = system.e1.Clone ().Normalize ();\r\n\t\tvar e2 = system.e2.Clone ().Normalize ();\r\n\t\tvar e3 = system.e3.Clone ().Normalize ();\r\n\r\n\t\tvar correctPlane = -1;\r\n\t\tvar maxProduct = 0.0;\r\n\t\t\r\n\t\tvar i, currentDirection, product;\r\n\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\tif (i === 0) {\r\n\t\t\t\tcurrentDirection = e1;\r\n\t\t\t} else if (i === 1) {\r\n\t\t\t\tcurrentDirection = e2;\r\n\t\t\t} else if (i === 2) {\r\n\t\t\t\tcurrentDirection = e3;\r\n\t\t\t}\r\n\r\n\t\t\tproduct = Math.abs (JSM.VectorDot (normal, currentDirection));\r\n\t\t\tif (JSM.IsGreater (product, maxProduct)) {\r\n\t\t\t\tcorrectPlane = i;\r\n\t\t\t\tmaxProduct = product;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (correctPlane === -1) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar planeSystem = null;\r\n\t\tif (correctPlane === 0) {\r\n\t\t\tplaneSystem = new JSM.CoordSystem (\r\n\t\t\t\tsystem.origo,\r\n\t\t\t\te2,\r\n\t\t\t\te3,\r\n\t\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\r\n\t\t\t);\r\n\t\t} else if (correctPlane === 1) {\r\n\t\t\tplaneSystem = new JSM.CoordSystem (\r\n\t\t\t\tsystem.origo,\r\n\t\t\t\te1,\r\n\t\t\t\te3,\r\n\t\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\r\n\t\t\t);\r\n\t\t} else if (correctPlane === 2) {\r\n\t\t\tplaneSystem = new JSM.CoordSystem (\r\n\t\t\t\tsystem.origo,\r\n\t\t\t\te1,\r\n\t\t\t\te2,\r\n\t\t\t\tnew JSM.Coord (0.0, 0.0, 0.0)\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tif (planeSystem === null) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\treturn JSM.CalculatePlanarTextureCoord (coord, planeSystem);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateCylindricalTextureCoord\r\n\t* Description: Calculates the cylindrical texture coordinate for a coordinate.\r\n\t* Parameters:\r\n\t*\tcoord {Coord} the coordinate\r\n\t*\tnormal {Vector} the normal vector for calculation\r\n\t*\tsystem {CoordSystem} the coordinate system\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.CalculateCylindricalTextureCoord = function (coord, normal, system)\r\n\t{\r\n\t\tvar result = new JSM.Coord2D (0.0, 0.0);\r\n\r\n\t\tvar e3Direction = system.e3.Clone ().Normalize ();\r\n\t\tif (e3Direction.IsCollinearWith (normal)) {\r\n\t\t\tresult = JSM.CalculateCubicTextureCoord (coord, normal, system);\r\n\t\t\treturn [result, 0.0];\r\n\t\t}\r\n\r\n\t\tvar baseLine = new JSM.Line (system.origo, e3Direction);\r\n\t\tvar projectedCoord = baseLine.ProjectCoord (coord);\r\n\t\tvar projectedDistance = JSM.CoordSignedDistance (system.origo, projectedCoord, e3Direction);\r\n\r\n\t\tvar e1Direction = system.e1.Clone ().Normalize ();\r\n\t\tvar coordDirection = JSM.CoordSub (coord, projectedCoord);\r\n\t\tvar angle = JSM.GetVectorsFullAngle (coordDirection, e1Direction, e3Direction);\r\n\t\tvar radius = system.e1.Length ();\r\n\r\n\t\tresult.x = angle * radius;\r\n\t\tresult.y = projectedDistance;\r\n\t\treturn [result, angle];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculatePolygonPlanarTextureCoords\r\n\t* Description: Calculates the planar texture coordinates for a polygon.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tindex {integer} the polygon index\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} the result\r\n\t*/\r\n\tJSM.CalculatePolygonPlanarTextureCoords = function (body, index)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar polygon = body.GetPolygon (index);\r\n\t\tvar system = body.GetTextureProjection ().GetCoords ();\r\n\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\r\n\t\t\tresult.push (JSM.CalculatePlanarTextureCoord (coord, system));\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculatePolygonCubicTextureCoords\r\n\t* Description: Calculates the cubic texture coordinates for a polygon.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tindex {integer} the polygon index\r\n\t*\tnormal {Vector} the normal vector for calculation\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} the result\r\n\t*/\r\n\tJSM.CalculatePolygonCubicTextureCoords = function (body, index, normal)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar polygon = body.GetPolygon (index);\r\n\t\tvar system = body.GetTextureProjection ().GetCoords ();\r\n\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\r\n\t\t\tresult.push (JSM.CalculateCubicTextureCoord (coord, normal, system));\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculatePolygonCylindricalTextureCoords\r\n\t* Description: Calculates the cylindrical texture coordinates for a polygon.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tindex {integer} the polygon index\r\n\t*\tnormal {Vector} the normal vector for calculation\r\n\t* Returns:\r\n\t*\t{Coord2D[*]} the result\r\n\t*/\r\n\tJSM.CalculatePolygonCylindricalTextureCoords = function (body, index, normal)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar angles = [];\r\n\r\n\t\tvar polygon = body.GetPolygon (index);\r\n\t\tvar system = body.GetTextureProjection ().GetCoords ();\r\n\r\n\t\tvar i, j, coord, textureValues;\r\n\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\r\n\t\t\ttextureValues = JSM.CalculateCylindricalTextureCoord (coord, normal, system);\r\n\t\t\tresult.push (textureValues[0]);\r\n\t\t\tangles.push (textureValues[1]);\r\n\t\t}\r\n\r\n\t\tvar e3Direction = system.e3.Clone ().Normalize ();\r\n\t\tif (e3Direction.IsCollinearWith (normal)) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tvar needRepair = false;\r\n\t\tfor (i = 0; i < angles.length; i++) {\r\n\t\t\tfor (j = i + 1; j < angles.length; j++) {\r\n\t\t\t\tif (JSM.IsGreater (Math.abs (angles[i] - angles[j]), Math.PI)) {\r\n\t\t\t\t\tneedRepair = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (needRepair) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (needRepair) {\r\n\t\t\tvar radius = system.e1.Length ();\r\n\t\t\tfor (i = 0; i < angles.length; i++) {\r\n\t\t\t\tif (JSM.IsLower (angles[i], Math.PI)) {\r\n\t\t\t\t\tresult[i].x = radius * (angles[i] + 2.0 * Math.PI);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyPlanarTextureCoords\r\n\t* Description: Calculates the planar texture coordinates for a body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Coord2D[*][*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyPlanarTextureCoords = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tresult.push (JSM.CalculatePolygonPlanarTextureCoords (body, i));\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyCubicTextureCoords\r\n\t* Description: Calculates the cubic texture coordinates for a body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Coord2D[*][*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyCubicTextureCoords = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar polygonNormals = JSM.CalculateBodyPolygonNormals (body);\r\n\t\tvar i, normal;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tnormal = polygonNormals[i];\r\n\t\t\tresult.push (JSM.CalculatePolygonCubicTextureCoords (body, i, normal));\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyCylindricalTextureCoords\r\n\t* Description: Calculates the cylindrical texture coordinates for a body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Coord2D[*][*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyCylindricalTextureCoords = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar polygonNormals = JSM.CalculateBodyPolygonNormals (body);\r\n\t\tvar i, normal;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tnormal = polygonNormals[i];\r\n\t\t\tresult.push (JSM.CalculatePolygonCylindricalTextureCoords (body, i, normal));\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CalculateBodyTextureCoords\r\n\t* Description:\r\n\t*\tCalculates the texture coordinates for a body. The result\r\n\t*\tis an array of arrays of texture coordinates.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Coord2D[*][*]} the result\r\n\t*/\r\n\tJSM.CalculateBodyTextureCoords = function (body)\r\n\t{\r\n\t\tvar result = [];\r\n\t\tvar projection = body.GetTextureProjection ().GetType ();\r\n\t\tif (projection === JSM.TextureProjectionType.Planar) {\r\n\t\t\tresult = JSM.CalculateBodyPlanarTextureCoords (body);\r\n\t\t} else if (projection === JSM.TextureProjectionType.Cubic) {\r\n\t\t\tresult = JSM.CalculateBodyCubicTextureCoords (body);\r\n\t\t} else if (projection === JSM.TextureProjectionType.Cylindrical) {\r\n\t\t\tresult = JSM.CalculateBodyCylindricalTextureCoords (body);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/cututils',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: CutBodyByPlane\r\n\t* Description: Cuts a body by a plane.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tplane {Plane} the plane\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.CutBodyByPlane = function (body, plane)\r\n\t{\r\n\t\tfunction CutBodyPolygonByPlane (polygon, plane, indexTable)\r\n\t\t{\r\n\t\t\tfunction AddOriginalVertex (index, vertex, rawResult, rawIndexTable)\r\n\t\t\t{\r\n\t\t\t\trawResult.push (new JSM.Coord (vertex.x, vertex.y, vertex.z));\r\n\t\t\t\trawIndexTable.push (index);\r\n\t\t\t}\r\n\r\n\t\t\tfunction AddIntersectionVertex (from, to, rawResult, rawIndexTable)\r\n\t\t\t{\r\n\t\t\t\tvar direction = JSM.CoordSub (polygon[to], polygon[from]).Normalize ();\r\n\t\t\t\tvar line = new JSM.Line (polygon[from], direction);\r\n\t\t\t\tvar intersection = plane.LineIntersection (line);\r\n\t\t\t\trawResult.push (new JSM.Coord (intersection.x, intersection.y, intersection.z));\r\n\t\t\t\trawIndexTable.push (-1);\r\n\t\t\t}\r\n\r\n\t\t\tvar hasIndexTable = (indexTable !== undefined && indexTable !== null);\r\n\t\t\tvar count = polygon.length;\r\n\t\t\tvar result = [];\r\n\t\t\tvar front = [];\r\n\t\t\t\r\n\t\t\tvar needCut = false;\r\n\t\t\tvar i, position, vertex;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tvertex = polygon[i];\r\n\t\t\t\tposition = plane.CoordPosition (vertex);\r\n\t\t\t\tfront.push (position !== JSM.CoordPlanePosition.CoordAtBackOfPlane);\r\n\t\t\t\tif (i > 0 && front[i - 1] !== front[i]) {\r\n\t\t\t\t\tneedCut = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!needCut) {\r\n\t\t\t\tif (front[0] === false) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\t\tvertex = polygon[i];\r\n\t\t\t\t\tresult.push (new JSM.Coord (vertex.x, vertex.y, vertex.z));\r\n\t\t\t\t\tif (hasIndexTable) {\r\n\t\t\t\t\t\tindexTable.push (i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar rawResult = [];\r\n\t\t\tvar rawIndexTable = [];\r\n\r\n\t\t\tvar from, to;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tfrom = i - 1;\r\n\t\t\t\tto = i;\r\n\t\t\t\tif (i === 0) {\r\n\t\t\t\t\tfrom = count - 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvertex = polygon[to];\r\n\t\t\t\tif (front[to]) {\r\n\t\t\t\t\tif (!front[from]) {\r\n\t\t\t\t\t\tAddIntersectionVertex (from, to, rawResult, rawIndexTable);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tAddOriginalVertex (to, vertex, rawResult, rawIndexTable);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (front[from]) {\r\n\t\t\t\t\t\tAddIntersectionVertex (from, to, rawResult, rawIndexTable);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar currentVertex;\r\n\t\t\tvar currentIndex;\r\n\t\t\tvar lastVertex;\r\n\t\t\tvar lastIndex;\r\n\t\t\tfor (i = 0; i < rawResult.length; i++) {\r\n\t\t\t\tcurrentVertex = rawResult[i];\r\n\t\t\t\tlastVertex = result[result.length - 1];\r\n\t\t\t\tif (i === 0 || !lastVertex.IsEqual (currentVertex)) {\r\n\t\t\t\t\tresult.push (new JSM.Coord (currentVertex.x, currentVertex.y, currentVertex.z));\r\n\t\t\t\t\tif (hasIndexTable) {\r\n\t\t\t\t\t\tcurrentIndex = rawIndexTable[i];\r\n\t\t\t\t\t\tindexTable.push (currentIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (hasIndexTable) {\r\n\t\t\t\t\t\tcurrentIndex = rawIndexTable[i];\r\n\t\t\t\t\t\tlastIndex = rawIndexTable[i - 1];\r\n\t\t\t\t\t\tif (currentIndex !== -1) {\r\n\t\t\t\t\t\t\tindexTable[indexTable.length - 1] = currentIndex;\r\n\t\t\t\t\t\t} else if (lastIndex !== -1) {\r\n\t\t\t\t\t\t\tindexTable[indexTable.length - 1] = lastIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tfunction GetInsertedVertexIndex (result, vertex, originalVertexCount)\r\n\t\t{\r\n\t\t\tvar index = -1;\r\n\t\t\r\n\t\t\tvar i;\r\n\t\t\tfor (i = originalVertexCount; i < result.VertexCount (); i++) {\r\n\t\t\t\tif (vertex.IsEqual (result.GetVertexPosition (i))) {\r\n\t\t\t\t\tindex = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (index === -1) {\r\n\t\t\t\tindex = result.AddVertex (new JSM.BodyVertex (new JSM.Coord (vertex.x, vertex.y, vertex.z)));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn index;\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar cuttedPolygons = [];\r\n\t\tvar cuttedIndexTables = [];\r\n\t\t\r\n\t\tvar remainsVertex = [];\r\n\t\tvar originalOldToNewIndex = [];\r\n\t\t\r\n\t\tvar i, j, polygon, polygon3D, vertexPosition;\r\n\t\tvar cuttedPolygon, indexTable;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\t\r\n\t\t\tpolygon3D = [];\r\n\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\tvertexPosition = body.GetVertexPosition (polygon.GetVertexIndex (j));\r\n\t\t\t\tpolygon3D.push (new JSM.Coord (vertexPosition.x, vertexPosition.y, vertexPosition.z));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tindexTable = [];\r\n\t\t\tcuttedPolygon = CutBodyPolygonByPlane (polygon3D, plane, indexTable);\r\n\t\t\tfor (j = 0; j < indexTable.length; j++) {\r\n\t\t\t\tif (indexTable[j] !== -1) {\r\n\t\t\t\t\tremainsVertex[polygon.GetVertexIndex (indexTable[j])] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcuttedPolygons.push (cuttedPolygon);\r\n\t\t\tcuttedIndexTables.push (indexTable);\r\n\t\t}\r\n\r\n\t\tvar vertex;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tif (remainsVertex[i]) {\r\n\t\t\t\tvertex = body.GetVertexPosition (i);\r\n\t\t\t\toriginalOldToNewIndex[i] = result.AddVertex (new JSM.BodyVertex (new JSM.Coord (vertex.x, vertex.y, vertex.z)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar originalVertexCount = result.VertexCount ();\r\n\r\n\t\tvar newPolygon, newPolygonVertices;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\tcuttedPolygon = cuttedPolygons[i];\r\n\t\t\tindexTable = cuttedIndexTables[i];\r\n\t\t\tif (indexTable.length === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tnewPolygonVertices = [];\r\n\t\t\tfor (j = 0; j < indexTable.length; j++) {\r\n\t\t\t\tif (indexTable[j] !== -1) {\r\n\t\t\t\t\tnewPolygonVertices.push (originalOldToNewIndex[polygon.GetVertexIndex (indexTable[j])]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvertex = cuttedPolygon[j];\r\n\t\t\t\t\tnewPolygonVertices.push (GetInsertedVertexIndex (result, vertex, originalVertexCount));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnewPolygon = new JSM.BodyPolygon (newPolygonVertices);\r\n\t\t\tnewPolygon.InheritAttributes (polygon);\r\n\t\t\tresult.AddPolygon (newPolygon);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/generator',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: GenerateRectangle\r\n\t* Description: Generates a rectangle.\r\n\t* Parameters:\r\n\t*\txSize {number} x size\r\n\t*\tySize {number} y size\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRectangle = function (xSize, ySize)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar x = xSize / 2.0;\r\n\t\tvar y = ySize / 2.0;\r\n\t\t\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, 0.0)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, 0.0)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, 0.0)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, 0.0)));\r\n\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([0, 1, 2, 3]));\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (-x, -y, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCuboid\r\n\t* Description: Generates a cuboid.\r\n\t* Parameters:\r\n\t*\txSize {number} x size\r\n\t*\tySize {number} y size\r\n\t*\tzSize {number} z size\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCuboid = function (xSize, ySize, zSize)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar x = xSize / 2.0;\r\n\t\tvar y = ySize / 2.0;\r\n\t\tvar z = zSize / 2.0;\r\n\t\t\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, z)));\r\n\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([0, 1, 2, 3]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([1, 5, 6, 2]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([5, 4, 7, 6]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([4, 0, 3, 7]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([0, 4, 5, 1]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([3, 2, 6, 7]));\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (-x, -y, -z), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCuboidSides\r\n\t* Description:\r\n\t*\tGenerates the specified sides of a cuboid. The last parameter is\r\n\t*\ta boolean array which defines sides visibility.\r\n\t* Parameters:\r\n\t*\txSize {number} x size\r\n\t*\tySize {number} y size\r\n\t*\tzSize {number} z size\r\n\t*\tsides {boolean[]} sides visibility\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCuboidSides = function (xSize, ySize, zSize, sides)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar x = xSize / 2.0;\r\n\t\tvar y = ySize / 2.0;\r\n\t\tvar z = zSize / 2.0;\r\n\t\t\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, -z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, z)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, z)));\r\n\r\n\t\tif (sides[0]) { result.AddPolygon (new JSM.BodyPolygon ([0, 1, 2, 3])); }\r\n\t\tif (sides[1]) { result.AddPolygon (new JSM.BodyPolygon ([1, 5, 6, 2])); }\r\n\t\tif (sides[2]) { result.AddPolygon (new JSM.BodyPolygon ([5, 4, 7, 6])); }\r\n\t\tif (sides[3]) { result.AddPolygon (new JSM.BodyPolygon ([4, 0, 3, 7])); }\r\n\t\tif (sides[4]) { result.AddPolygon (new JSM.BodyPolygon ([0, 4, 5, 1])); }\r\n\t\tif (sides[5]) { result.AddPolygon (new JSM.BodyPolygon ([3, 2, 6, 7])); }\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (-x, -y, -z), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSegmentedRectangle\r\n\t* Description:\tGenerates a segmented rectangle.\r\n\t* Parameters:\r\n\t*\txSize {number} x size\r\n\t*\tySize {number} y size\r\n\t*\txSegmentation {integer} segmentation along x side\r\n\t*\tySegmentation {integer} segmentation along y side\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSegmentedRectangle = function (xSize, ySize, xSegmentation, ySegmentation)\r\n\t{\r\n\t\tfunction AddVertices ()\r\n\t\t{\r\n\t\t\tvar i, j, coord;\r\n\r\n\t\t\tfor (i = 0; i <= ySegmentation; i++) {\r\n\t\t\t\tfor (j = 0; j <= xSegmentation; j++) {\r\n\t\t\t\t\tcoord = new JSM.Coord (j * xSegment - xStart, i * ySegment - yStart, 0.0);\r\n\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (coord));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddPolygons ()\r\n\t\t{\r\n\t\t\tvar i, j;\r\n\t\t\tvar current, next, top, ntop;\r\n\t\t\t\r\n\t\t\tfor (j = 0; j < ySegmentation; j++) {\r\n\t\t\t\tfor (i = 0; i < xSegmentation; i++) {\r\n\t\t\t\t\tcurrent = j * (xSegmentation + 1) + i;\r\n\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\ttop = current + xSegmentation + 1;\r\n\t\t\t\t\tntop = top + 1;\r\n\t\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([current, next, ntop, top]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar xStart = xSize / 2.0;\r\n\t\tvar yStart = ySize / 2.0;\r\n\t\tvar xSegment = xSize / xSegmentation;\r\n\t\tvar ySegment = ySize / ySegmentation;\r\n\t\t\r\n\t\tAddVertices ();\r\n\t\tAddPolygons ();\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSegmentedCuboid\r\n\t* Description:\tGenerates a segmented cuboid.\r\n\t* Parameters:\r\n\t*\txSize {number} x size\r\n\t*\tySize {number} y size\r\n\t*\tzSize {number} z size\r\n\t*\tsegmentation {integer} segmentation of the sides\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSegmentedCuboid = function (xSize, ySize, zSize, segmentation)\r\n\t{\r\n\t\tfunction GetLevelOffset (level)\r\n\t\t{\r\n\t\t\tvar offset = 0;\r\n\t\t\tif (level > 0 && level <= segmentation) {\r\n\t\t\t\toffset = (segmentation + 1) * (segmentation + 1) + (level - 1) * (segmentation * 4);\r\n\t\t\t}\r\n\t\t\treturn offset;\r\n\t\t}\r\n\r\n\t\tfunction GetLevelSideVertices (level)\r\n\t\t{\r\n\t\t\tvar i;\r\n\t\t\t\r\n\t\t\tvar vertices = [];\r\n\t\t\tvar offset = GetLevelOffset (level);\r\n\t\t\tif (level === 0 || level === segmentation) {\r\n\t\t\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\t\t\tvertices.push (offset + i);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 1; i <= segmentation; i++) {\r\n\t\t\t\t\tvertices.push (offset + (i + 1) * segmentation + i);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = segmentation - 1; i >= 0; i--) {\r\n\t\t\t\t\tvertices.push (offset + (segmentation + 1) * segmentation + i);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = segmentation - 1; i > 0; i--) {\r\n\t\t\t\t\tvertices.push (offset + i * (segmentation + 1));\r\n\t\t\t\t}\r\n\t\t\t} else if (level > 0 && level < segmentation) {\r\n\t\t\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\t\t\tvertices.push (offset + i);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 1; i < segmentation; i++) {\r\n\t\t\t\t\tvertices.push (offset + segmentation + 2 * i);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = segmentation; i >= 0; i--) {\r\n\t\t\t\t\tvertices.push (offset + (3 * segmentation) + i - 1);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = segmentation - 1; i > 0; i--) {\r\n\t\t\t\t\tvertices.push (offset + segmentation + 2 * i - 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn vertices;\r\n\t\t}\r\n\r\n\t\tfunction AddVertices (level)\r\n\t\t{\r\n\t\t\tvar i, j, coord;\r\n\r\n\t\t\tvar zCoord = level * zSegment;\r\n\t\t\tif (level === 0 || level === segmentation) {\r\n\t\t\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\t\t\tfor (j = 0; j <= segmentation; j++) {\r\n\t\t\t\t\t\tcoord = new JSM.Coord (j * xSegment - xStart, i * ySegment - yStart, zCoord - zStart);\r\n\t\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (coord));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (level > 0 && level < segmentation) {\r\n\t\t\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\t\t\tfor (j = 0; j <= segmentation; j++) {\r\n\t\t\t\t\t\tif (i === 0 || i === segmentation || j === 0 || j === segmentation) {\r\n\t\t\t\t\t\t\tcoord = new JSM.Coord (j * xSegment - xStart, i * ySegment - yStart, zCoord - zStart);\r\n\t\t\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (coord));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddPolygons (level)\r\n\t\t{\r\n\t\t\tvar i, j;\r\n\t\t\tvar current, next, top, ntop;\r\n\t\t\t\r\n\t\t\tif (level === 0 || level === segmentation) {\r\n\t\t\t\tvar offset = GetLevelOffset (level);\r\n\t\t\t\tfor (i = 0; i < segmentation; i++) {\r\n\t\t\t\t\tfor (j = 0; j < segmentation; j++) {\r\n\t\t\t\t\t\tcurrent = offset + i * (segmentation + 1) + j;\r\n\t\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\t\ttop = current + segmentation + 1;\r\n\t\t\t\t\t\tntop = top + 1;\r\n\t\t\t\t\t\tif (level === 0) {\r\n\t\t\t\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([current, top, ntop, next]));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([current, next, ntop, top]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (level > 0 && level <= segmentation) {\r\n\t\t\t\tvar prevSideVertices = levelSideVertices [level - 1];\r\n\t\t\t\tvar currSideVertices = levelSideVertices [level];\r\n\t\t\t\tfor (i = 0; i < segmentation * 4; i++) {\r\n\t\t\t\t\tcurrent = prevSideVertices[i];\r\n\t\t\t\t\ttop = currSideVertices[i];\r\n\t\t\t\t\tif (i < segmentation * 4 - 1) {\r\n\t\t\t\t\t\tnext = prevSideVertices[i + 1];\r\n\t\t\t\t\t\tntop = currSideVertices[i + 1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnext = prevSideVertices[0];\r\n\t\t\t\t\t\tntop = currSideVertices[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([current, next, ntop, top]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar xStart = xSize / 2.0;\r\n\t\tvar yStart = ySize / 2.0;\r\n\t\tvar zStart = zSize / 2.0;\r\n\t\t\r\n\t\tvar xSegment = xSize / segmentation;\r\n\t\tvar ySegment = ySize / segmentation;\r\n\t\tvar zSegment = zSize / segmentation;\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\tAddVertices (i);\r\n\t\t}\r\n\t\t\r\n\t\tvar levelSideVertices = [];\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\tlevelSideVertices.push (GetLevelSideVertices (i));\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i <= segmentation; i++) {\r\n\t\t\tAddPolygons (i);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCircle\r\n\t* Description:\tGenerates a circle.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the circle\r\n\t*\tsegmentation {integer} the segmentation of the circle\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCircle = function (radius, segmentation)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar segments = segmentation;\r\n\r\n\t\tvar theta = 2.0 * Math.PI;\r\n\t\tvar step = 2.0 * Math.PI / segments;\r\n\t\t\r\n\t\tvar circlePoints = JSM.GenerateCirclePoints (radius, segmentation);\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < circlePoints.length; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (circlePoints[i]));\r\n\t\t\ttheta += step;\r\n\t\t}\r\n\r\n\t\tvar topPolygon = new JSM.BodyPolygon ([]);\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\ttopPolygon.AddVertexIndex (i);\r\n\t\t}\r\n\t\tresult.AddPolygon (topPolygon);\r\n\r\n\t\tresult.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), radius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSphere\r\n\t* Description: Generates a sphere.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the sphere\r\n\t*\tsegmentation {integer} the segmentation of the sphere\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSphere = function (radius, segmentation, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar segments = segmentation;\r\n\t\tvar circle = segments * 2;\r\n\r\n\t\tvar topIndex = result.AddVertex (new JSM.BodyVertex (JSM.SphericalToCartesian (radius, 0.0, 0.0)));\r\n\t\tvar step = Math.PI / segments;\r\n\t\tvar theta = step;\r\n\t\t\r\n\t\tvar i, j, phi;\r\n\t\tfor (i = 1; i < segments; i++) {\r\n\t\t\tphi = 0;\r\n\t\t\tfor (j = 0; j < circle; j++) {\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.SphericalToCartesian (radius, theta, phi)));\r\n\t\t\t\tphi += step;\r\n\t\t\t}\r\n\t\t\ttheta += step;\r\n\t\t}\r\n\t\tvar bottomIndex = result.AddVertex (new JSM.BodyVertex (JSM.SphericalToCartesian (-radius, 0.0, 0.0)));\r\n\r\n\t\tvar offset, current, next, top, ntop, polygon;\r\n\t\tfor (i = 1; i <= segments; i++) {\r\n\t\t\tif (i === 1) {\r\n\t\t\t\toffset = 1;\r\n\t\t\t\tfor (j = 0; j < circle; j++) {\r\n\t\t\t\t\tcurrent = offset + j;\r\n\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\tif (j === circle - 1) {\r\n\t\t\t\t\t\tnext = offset;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, topIndex]);\r\n\t\t\t\t\tif (isCurved) {\r\n\t\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t}\r\n\t\t\t} else if (i < segments) {\r\n\t\t\t\toffset = (i - 1) * circle + 1;\r\n\t\t\t\tfor (j = 0; j < circle; j++) {\r\n\t\t\t\t\tcurrent = offset + j;\r\n\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\ttop = current - circle;\r\n\t\t\t\t\tntop = top + 1;\r\n\r\n\t\t\t\t\tif (j === circle - 1) {\r\n\t\t\t\t\t\tnext = offset;\r\n\t\t\t\t\t\tntop = offset - circle;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\t\t\tif (isCurved) {\r\n\t\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t}\r\n\t\t\t} else if (i === segments) {\r\n\t\t\t\toffset = (i - 2) * circle + 1;\r\n\t\t\t\tfor (j = 0; j < circle; j++) {\r\n\t\t\t\t\tcurrent = offset + j;\r\n\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\tif (j === circle - 1) {\r\n\t\t\t\t\t\tnext = offset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpolygon = new JSM.BodyPolygon ([current, bottomIndex, next]);\r\n\t\t\t\t\tif (isCurved) {\r\n\t\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTriangulatedSphere\r\n\t* Description: Generates a sphere from triangles.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the sphere\r\n\t*\titerations {integer} the iteration number\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTriangulatedSphere = function (radius, iterations, isCurved)\r\n\t{\r\n\t\tfunction GenerateIcosahedron () {\r\n\t\t\tvar result = new JSM.Body ();\r\n\r\n\t\t\tvar a = 1.0;\r\n\t\t\tvar b = 0.0;\r\n\t\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\r\n\t\t\tJSM.AddVertexToBody (result, +b, +a, +c);\r\n\t\t\tJSM.AddVertexToBody (result, +b, +a, -c);\r\n\t\t\tJSM.AddVertexToBody (result, +b, -a, +c);\r\n\t\t\tJSM.AddVertexToBody (result, +b, -a, -c);\r\n\r\n\t\t\tJSM.AddVertexToBody (result, +a, +c, +b);\r\n\t\t\tJSM.AddVertexToBody (result, +a, -c, +b);\r\n\t\t\tJSM.AddVertexToBody (result, -a, +c, +b);\r\n\t\t\tJSM.AddVertexToBody (result, -a, -c, +b);\r\n\r\n\t\t\tJSM.AddVertexToBody (result, +c, +b, +a);\r\n\t\t\tJSM.AddVertexToBody (result, -c, +b, +a);\r\n\t\t\tJSM.AddVertexToBody (result, +c, +b, -a);\r\n\t\t\tJSM.AddVertexToBody (result, -c, +b, -a);\r\n\r\n\t\t\tJSM.AddPolygonToBody (result, [0, 2, 8]);\r\n\t\t\tJSM.AddPolygonToBody (result, [0, 4, 6]);\r\n\t\t\tJSM.AddPolygonToBody (result, [0, 6, 9]);\r\n\t\t\tJSM.AddPolygonToBody (result, [0, 8, 4]);\r\n\t\t\tJSM.AddPolygonToBody (result, [0, 9, 2]);\r\n\t\t\tJSM.AddPolygonToBody (result, [1, 3, 11]);\r\n\t\t\tJSM.AddPolygonToBody (result, [1, 4, 10]);\r\n\t\t\tJSM.AddPolygonToBody (result, [1, 6, 4]);\r\n\t\t\tJSM.AddPolygonToBody (result, [1, 10, 3]);\r\n\t\t\tJSM.AddPolygonToBody (result, [1, 11, 6]);\r\n\t\t\tJSM.AddPolygonToBody (result, [2, 5, 8]);\r\n\t\t\tJSM.AddPolygonToBody (result, [2, 7, 5]);\r\n\t\t\tJSM.AddPolygonToBody (result, [2, 9, 7]);\r\n\t\t\tJSM.AddPolygonToBody (result, [3, 5, 7]);\r\n\t\t\tJSM.AddPolygonToBody (result, [3, 7, 11]);\r\n\t\t\tJSM.AddPolygonToBody (result, [3, 10, 5]);\r\n\t\t\tJSM.AddPolygonToBody (result, [4, 8, 10]);\r\n\t\t\tJSM.AddPolygonToBody (result, [6, 11, 9]);\r\n\t\t\tJSM.AddPolygonToBody (result, [5, 10, 8]);\r\n\t\t\tJSM.AddPolygonToBody (result, [7, 9, 11]);\r\n\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar result = GenerateIcosahedron ();\r\n\t\t\r\n\t\tvar currentRadius = result.GetVertexPosition (0).Length ();\r\n\t\tvar scale = radius / currentRadius;\r\n\r\n\t\tvar i, j, vertex;\r\n\t\tfor (i = 0; i < result.VertexCount (); i++) {\r\n\t\t\tvertex = result.GetVertex (i);\r\n\t\t\tvertex.position.MultiplyScalar (scale);\r\n\t\t}\r\n\t\t\r\n\t\tvar iteration, oldVertexCoord, oldBody, adjacencyInfo;\r\n\t\tvar currentEdge, edgeVertexIndices;\r\n\t\tvar currentPgon, polygonVertexIndices;\r\n\t\tvar edgeCoord, currentPolyEdge;\r\n\t\tfor (iteration = 0; iteration < iterations; iteration++) {\r\n\t\t\toldBody = result;\r\n\t\t\t\r\n\t\t\tresult = new JSM.Body ();\r\n\t\t\tadjacencyInfo = new JSM.AdjacencyInfo (oldBody);\r\n\t\t\tfor (i = 0; i < adjacencyInfo.verts.length; i++) {\r\n\t\t\t\toldVertexCoord = oldBody.GetVertexPosition (i);\r\n\t\t\t\tJSM.AddVertexToBody (result, oldVertexCoord.x, oldVertexCoord.y, oldVertexCoord.z);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tedgeVertexIndices = [];\r\n\t\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\t\tcurrentEdge = adjacencyInfo.edges[i];\r\n\t\t\t\tedgeCoord = JSM.MidCoord (oldBody.GetVertexPosition (currentEdge.vert1), oldBody.GetVertexPosition (currentEdge.vert2));\r\n\t\t\t\tedgeVertexIndices.push (result.AddVertex (new JSM.BodyVertex (edgeCoord.SetLength (radius))));\r\n\t\t\t}\r\n\r\n\t\t\tfor (i = 0; i < adjacencyInfo.pgons.length; i++) {\r\n\t\t\t\tcurrentPgon = adjacencyInfo.pgons[i];\r\n\t\t\t\tpolygonVertexIndices = [];\r\n\t\t\t\tfor (j = 0; j < currentPgon.pedges.length; j++) {\r\n\t\t\t\t\tcurrentPolyEdge = currentPgon.pedges[j];\r\n\t\t\t\t\tpolygonVertexIndices.push (adjacencyInfo.GetPolyEdgeStartVertex (currentPolyEdge));\r\n\t\t\t\t\tpolygonVertexIndices.push (edgeVertexIndices[currentPolyEdge.index]);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tJSM.AddPolygonToBody (result, [polygonVertexIndices[0], polygonVertexIndices[1], polygonVertexIndices[5]]);\r\n\t\t\t\tJSM.AddPolygonToBody (result, [polygonVertexIndices[1], polygonVertexIndices[2], polygonVertexIndices[3]]);\r\n\t\t\t\tJSM.AddPolygonToBody (result, [polygonVertexIndices[3], polygonVertexIndices[4], polygonVertexIndices[5]]);\r\n\t\t\t\tJSM.AddPolygonToBody (result, [polygonVertexIndices[1], polygonVertexIndices[3], polygonVertexIndices[5]]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isCurved) {\r\n\t\t\tfor (i = 0; i < result.PolygonCount (); i++) {\r\n\t\t\t\tresult.GetPolygon (i).SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCylinder\r\n\t* Description: Generates a cylinder.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the cylinder\r\n\t*\theight {number} the height of the cylinder\r\n\t*\tsegmentation {integer} the segmentation of the top and bottom polygons\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCylinder = function (radius, height, segmentation, withTopAndBottom, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar segments = segmentation;\r\n\r\n\t\tvar theta = 2.0 * Math.PI;\r\n\t\tvar step = 2.0 * Math.PI / segments;\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, height / 2.0, theta)));\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, -height / 2.0, theta)));\r\n\t\t\ttheta -= step;\r\n\t\t}\r\n\r\n\t\tvar current, next, polygon;\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\tcurrent = 2 * i;\r\n\t\t\tnext = current + 2;\r\n\t\t\tif (i === segments - 1) {\r\n\t\t\t\tnext = 0;\r\n\t\t\t}\r\n\t\t\tpolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);\r\n\t\t\tif (isCurved) {\r\n\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tvar topPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tvar bottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\t\ttopPolygon.AddVertexIndex (2 * (segments - i - 1));\r\n\t\t\t\tbottomPolygon.AddVertexIndex (2 * i + 1);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t}\r\n\r\n\t\tresult.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, -(height / 2.0)), radius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePie\r\n\t* Description: Generates a pie.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the pie\r\n\t*\theight {number} the height of the pie\r\n\t*\tangle {number} the angle of the pie\r\n\t*\tsegmentation {integer} the segmentation of the top and bottom polygons\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePie = function (radius, height, angle, segmentation, withTopAndBottom, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar segments = segmentation;\r\n\r\n\t\tvar theta = angle;\r\n\t\tvar step = angle / (segments - 1);\r\n\t\t\r\n\t\tvar i;\r\n\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, height / 2.0, 0.0)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, -height / 2.0, 0.0)));\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, height / 2.0, theta)));\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, -height / 2.0, theta)));\r\n\t\t\ttheta -= step;\r\n\t\t}\r\n\r\n\t\tvar current, next, polygon;\r\n\t\tfor (i = 0; i <= segments; i++) {\r\n\t\t\tcurrent = 2 * i;\r\n\t\t\tnext = current + 2;\r\n\t\t\tif (i === segments) {\r\n\t\t\t\tnext = 0;\r\n\t\t\t}\r\n\t\t\tpolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);\r\n\t\t\tif (isCurved && i > 0 && i < segments) {\r\n\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tvar topPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tvar bottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (i = 0; i <= segments; i++) {\r\n\t\t\t\ttopPolygon.AddVertexIndex (2 * (segments - i));\r\n\t\t\t\tbottomPolygon.AddVertexIndex (2 * i + 1);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t}\r\n\r\n\t\tresult.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, -(height / 2.0)), radius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCone\r\n\t* Description: Generates a cone.\r\n\t* Parameters:\r\n\t*\ttopRadius {number} the top radius of the cone\r\n\t*\tbottomRadius {number} the bottom radius of the cone\r\n\t*\theight {number} the height of the cone\r\n\t*\tsegmentation {integer} the segmentation of the top and bottom polygons\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCone = function (topRadius, bottomRadius, height, segmentation, withTopAndBottom, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar segments = segmentation;\r\n\r\n\t\tvar topDegenerated = (JSM.IsZero (topRadius));\r\n\t\tvar bottomDegenerated = (JSM.IsZero (bottomRadius));\r\n\r\n\t\tvar theta = 2.0 * Math.PI;\r\n\t\tvar step = 2.0 * Math.PI / segments;\r\n\r\n\t\tif (topDegenerated) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, height / 2.0, 0.0)));\r\n\t\t}\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\tif (!topDegenerated) {\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (topRadius, height / 2.0, theta)));\r\n\t\t\t}\r\n\t\t\tif (!bottomDegenerated) {\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (bottomRadius, -height / 2.0, theta)));\r\n\t\t\t}\r\n\t\t\ttheta -= step;\r\n\t\t}\r\n\t\tif (bottomDegenerated) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, -height / 2.0, 0.0)));\r\n\t\t}\r\n\r\n\t\tvar current, next, polygon;\r\n\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\tif (topDegenerated) {\r\n\t\t\t\tcurrent = i + 1;\r\n\t\t\t\tnext = current + 1;\r\n\t\t\t\tif (i === segments - 1) {\r\n\t\t\t\t\tnext = 1;\r\n\t\t\t\t}\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([0, next, current]);\r\n\t\t\t\tif (isCurved) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t} else if (bottomDegenerated) {\r\n\t\t\t\tcurrent = i;\r\n\t\t\t\tnext = current + 1;\r\n\t\t\t\tif (i === segments - 1) {\r\n\t\t\t\t\tnext = 0;\r\n\t\t\t\t}\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, segments]);\r\n\t\t\t\tif (isCurved) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t} else {\r\n\t\t\t\tcurrent = 2 * i;\r\n\t\t\t\tnext = current + 2;\r\n\t\t\t\tif (i === segments - 1) {\r\n\t\t\t\t\tnext = 0;\r\n\t\t\t\t}\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);\r\n\t\t\t\tif (isCurved) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar topPolygon, bottomPolygon;\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tif (topDegenerated) {\r\n\t\t\t\tbottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\t\t\tbottomPolygon.AddVertexIndex (i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t\t} else if (bottomDegenerated) {\r\n\t\t\t\ttopPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\t\t\ttopPolygon.AddVertexIndex (segments - i - 1);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\t} else {\r\n\t\t\t\ttopPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\t\tbottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\t\tfor (i = 0; i < segments; i++) {\r\n\t\t\t\t\ttopPolygon.AddVertexIndex (2 * (segments - i - 1));\r\n\t\t\t\t\tbottomPolygon.AddVertexIndex (2 * i + 1);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar avgRadius = (topRadius + bottomRadius) / 2.0;\r\n\t\tresult.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, -(height / 2.0)), avgRadius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePrismGeometry\r\n\t* Description: Generates a prism defined by bottom and top vertices polygon.\r\n\t* Parameters:\r\n\t*\tbottomVertices {Coord[*]} bottom vertices\r\n\t*\ttopVertices {Coord[*]} top vertices\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePrismGeometry = function (bottomVertices, topVertices, withTopAndBottom)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar count = bottomVertices.length;\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (bottomVertices[i].Clone ()));\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (topVertices[i].Clone ()));\r\n\t\t}\r\n\r\n\t\tvar current, next, bodyPolygon;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tcurrent = 2 * i;\r\n\t\t\tnext = current + 2;\r\n\t\t\tif (i === count - 1) {\r\n\t\t\t\tnext = 0;\r\n\t\t\t}\r\n\t\t\tbodyPolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);\r\n\t\t\tresult.AddPolygon (bodyPolygon);\r\n\t\t}\r\n\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tvar topPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tvar bottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\ttopPolygon.AddVertexIndex (2 * i + 1);\r\n\t\t\t\tbottomPolygon.AddVertexIndex (2 * (count - i - 1));\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePrismFromPolygon\r\n\t* Description: Generates a prism defined by a polygon.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon2D} the base polygon\r\n\t*\theight {number} the height of the prism\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tcurveAngle {number} if not null, defines the curve angle of the prism\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePrismFromPolygon = function (polygon, height, withTopAndBottom, curveAngle)\r\n\t{\r\n\t\tvar bottomVertices = [];\r\n\t\tvar topVertices = [];\r\n\t\tvar i, vertex;\r\n\t\tvar count = polygon.VertexCount ();\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\tbottomVertices.push (new JSM.Coord (vertex.x, vertex.y, 0.0));\r\n\t\t\ttopVertices.push (new JSM.Coord (vertex.x, vertex.y, height));\r\n\t\t}\r\n\r\n\t\tvar result = JSM.GeneratePrismGeometry (bottomVertices, topVertices, withTopAndBottom);\r\n\t\tif (curveAngle !== undefined && curveAngle !== null) {\r\n\t\t\tvar curveGroups = JSM.CalculatePolygonCurveGroups (polygon, curveAngle);\r\n\t\t\tvar bodyPolygon;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tbodyPolygon = result.GetPolygon (i);\r\n\t\t\t\tbodyPolygon.SetCurveGroup (curveGroups[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar origo = bottomVertices[0].Clone ();\r\n\t\tvar firtVertex = bottomVertices[1].Clone ();\r\n\t\tvar firstDirection = JSM.CoordSub (firtVertex, origo).Normalize ();\r\n\t\tvar e3 = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\tvar e2 = JSM.VectorCross (e3, firstDirection);\r\n\t\tvar e1 = JSM.VectorCross (e2, e3);\r\n\r\n\t\tresult.SetCubicTextureProjection (origo, e1, e2, e3);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePrism\r\n\t* Description:\r\n\t*\tGenerates a prism defined by a polygon. The base polygon is an array\r\n\t*\tof coordinates which will be offseted in the given direction.\r\n\t* Parameters:\r\n\t*\tbasePolygon {Coord[*]} the base polygon\r\n\t*\tdirection {Vector} the vector of the offset\r\n\t*\theight {number} the height of the prism\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tcurveAngle {number} if not null, defines the curve angle of the prism\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePrism = function (basePolygon, direction, height, withTopAndBottom, curveAngle)\r\n\t{\r\n\t\tvar polygon = new JSM.Polygon ();\r\n\t\tpolygon.FromArray (basePolygon);\r\n\t\tvar count = polygon.VertexCount ();\r\n\r\n\r\n\t\tvar bottomVertices = [];\r\n\t\tvar topVertices = [];\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tbottomVertices.push (polygon.GetVertex (i).Clone ());\r\n\t\t\ttopVertices.push (polygon.GetVertex (i).Clone ().Offset (direction, height));\r\n\t\t}\r\n\r\n\t\tvar result = JSM.GeneratePrismGeometry (bottomVertices, topVertices, withTopAndBottom);\r\n\t\t\r\n\t\tif (curveAngle !== undefined && curveAngle !== null) {\r\n\t\t\tvar curveGroups = JSM.CalculatePolygonCurveGroups (polygon, curveAngle);\r\n\t\t\tvar bodyPolygon;\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tbodyPolygon = result.GetPolygon (i);\r\n\t\t\t\tbodyPolygon.SetCurveGroup (curveGroups[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar origo = polygon.GetVertex (0).Clone ();\r\n\t\tvar firtVertex = polygon.GetVertex (1).Clone ();\r\n\t\tvar firstDirection = JSM.CoordSub (firtVertex, origo).Normalize ();\r\n\t\tvar e3 = direction.Clone ().Normalize ();\r\n\t\tvar e2 = JSM.VectorCross (e3, firstDirection);\r\n\t\tvar e1 = JSM.VectorCross (e2, e3);\r\n\r\n\t\tresult.SetCubicTextureProjection (origo, e1, e2, e3);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePrismWithHole\r\n\t* Description:\r\n\t*\tGenerates a prism defined by a polygon. The polygon can contain null\r\n\t*\tvalues which defines the end of the current contour. The holes have\r\n\t*\tto be in reversed orientation than the main contour.\r\n\t* Parameters:\r\n\t*\tbasePolygon {Coord[*]} the base polygon which can contain null values\r\n\t*\tdirection {Vector} the vector of the offset\r\n\t*\theight {number} the height of the prism\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tcurveAngle {number} if not null, defines the curve angle of the prism\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePrismWithHole = function (basePolygon, direction, height, withTopAndBottom, curveAngle)\r\n\t{\r\n\t\tfunction AddVertices (contourPolygon, direction, height, result)\r\n\t\t{\r\n\t\t\tvar i, j, contour, vertex1, vertex2;\r\n\t\t\tfor (i = 0; i < contourPolygon.ContourCount (); i++) {\r\n\t\t\t\tcontour = contourPolygon.GetContour (i);\r\n\t\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\r\n\t\t\t\t\tvertex1 = contour.GetVertex (j).Clone ();\r\n\t\t\t\t\tvertex2 = contour.GetVertex (j).Clone ().Offset (direction, height);\r\n\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (vertex1));\r\n\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (vertex2));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddContours (contourPolygon, contourOffsets, curveAngle, result)\r\n\t\t{\r\n\t\t\tvar offset = 0;\r\n\r\n\t\t\tvar i, j, contour, vertexCount, current, next, bodyPolygon, curveGroups;\r\n\t\t\tfor (i = 0; i < contourPolygon.ContourCount (); i++) {\r\n\t\t\t\tcontour = contourPolygon.GetContour (i);\r\n\t\t\t\tcurveGroups = null;\r\n\t\t\t\tif (curveAngle !== undefined && curveAngle !== null) {\r\n\t\t\t\t\tcurveGroups = JSM.CalculatePolygonCurveGroups (contour, curveAngle);\r\n\t\t\t\t}\t\t\r\n\t\t\t\tvertexCount = contour.VertexCount ();\r\n\t\t\t\tcontourOffsets.push (offset);\r\n\t\t\t\tfor (j = 0; j < vertexCount; j++) {\r\n\t\t\t\t\tcurrent = 2 * offset + 2 * j;\r\n\t\t\t\t\tnext = current + 2;\r\n\t\t\t\t\tif (j == vertexCount - 1) {\r\n\t\t\t\t\t\tnext = 2 *  offset;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbodyPolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);\r\n\t\t\t\t\tif (curveGroups !== null) {\r\n\t\t\t\t\t\tbodyPolygon.SetCurveGroup (curveGroups[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.AddPolygon (bodyPolygon);\r\n\t\t\t\t}\r\n\t\t\t\toffset += vertexCount;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddTopBottomPolygons (contourPolygon, contourOffsets)\r\n\t\t{\r\n\t\t\tvar vertexMap = [];\r\n\t\t\tvar contourPolygon2D = contourPolygon.ToContourPolygon2D ();\r\n\t\t\tvar simplePolygon = JSM.ConvertContourPolygonToPolygon2D (contourPolygon2D, vertexMap);\r\n\t\t\tif (simplePolygon === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar triangles = JSM.TriangulatePolygon2D (simplePolygon);\r\n\t\t\tif (triangles === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar i, j, triangle, mapValue;\r\n\t\t\tvar topTriangle, bottomTriangle;\r\n\t\t\tfor (i = 0; i < triangles.length; i++) {\r\n\t\t\t\ttriangle = triangles[i];\r\n\t\t\t\ttopTriangle = new JSM.BodyPolygon ([]);\r\n\t\t\t\tbottomTriangle = new JSM.BodyPolygon ([]);\r\n\t\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\t\tmapValue = vertexMap[triangle[j]];\r\n\t\t\t\t\ttopTriangle.AddVertexIndex (2 * contourOffsets[mapValue[0]] + 2 * mapValue[1] + 1);\r\n\t\t\t\t\tmapValue = vertexMap[triangle[2 - j]];\r\n\t\t\t\t\tbottomTriangle.AddVertexIndex (2 * contourOffsets[mapValue[0]] + 2 * mapValue[1]);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (topTriangle);\r\n\t\t\t\tresult.AddPolygon (bottomTriangle);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar contourOffsets = [];\r\n\t\tvar contourPolygon = new JSM.ContourPolygon ();\r\n\t\tcontourPolygon.FromArray (basePolygon);\r\n\t\tAddVertices (contourPolygon, direction, height, result);\r\n\t\tAddContours (contourPolygon, contourOffsets, curveAngle, result);\r\n\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tAddTopBottomPolygons (contourPolygon, contourOffsets);\r\n\t\t}\r\n\r\n\t\tvar firstDirection = JSM.CoordSub (basePolygon[1], basePolygon[0]).Normalize ();\r\n\t\tvar origo = new JSM.Coord (basePolygon[0].x, basePolygon[0].y, basePolygon[0].z);\r\n\t\tvar e3 = direction.Clone ().Normalize ();\r\n\t\tvar e2 = JSM.VectorCross (e3, firstDirection);\r\n\t\tvar e1 = JSM.VectorCross (e2, e3);\r\n\r\n\t\tresult.SetCubicTextureProjection (origo, e1, e2, e3);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePrismsFromPath2D\r\n\t* Description: Generates a prism from the given path.\r\n\t* Parameters:\r\n\t*\tpath {Path2D} the path\r\n\t*\theight {number} the height of the prism\r\n\t*\twidth {number} the width of the prism sides\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t* Returns:\r\n\t*\t{Body[*]} the result\r\n\t*/\r\n\tJSM.GeneratePrismsFromPath2D = function (path, height, withTopAndBottom, curveAngle)\r\n\t{\r\n\t\tfunction GetPrismPolygon (polygon)\r\n\t\t{\r\n\t\t\tvar result = [];\r\n\t\t\tvar i, j, contour, vertex;\r\n\t\t\tfor (i = 0; i < polygon.ContourCount (); i++) {\r\n\t\t\t\tcontour = polygon.GetContour (i);\r\n\t\t\t\tfor (j = 0; j < contour.VertexCount (); j++) {\r\n\t\t\t\t\tvertex = contour.GetVertex (j);\r\n\t\t\t\t\tresult.push (new JSM.Coord (vertex.x, vertex.y, 0.0));\r\n\t\t\t\t}\r\n\t\t\t\tif (i < polygon.ContourCount () - 1) {\r\n\t\t\t\t\tresult.push (null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar bodies = [];\r\n\t\tvar polygons = path.GetPolygons ();\r\n\t\tvar direction = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\tvar i, polygon;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tpolygon = polygons[i];\r\n\t\t\tif (polygon.ContourCount () === 1) {\r\n\t\t\t\tbodies.push (JSM.GeneratePrism (GetPrismPolygon (polygon), direction, height, withTopAndBottom, curveAngle));\r\n\t\t\t} else if (polygon.ContourCount () > 1) {\r\n\t\t\t\tbodies.push (JSM.GeneratePrismWithHole (GetPrismPolygon (polygon), direction, height, withTopAndBottom, curveAngle));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bodies;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePrismShell\r\n\t* Description: Generates a prism with the given width of sides.\r\n\t* Parameters:\r\n\t*\tbasePolygon {Coord[*]} the base polygon\r\n\t*\tdirection {Vector} the vector of the offset\r\n\t*\theight {number} the height of the prism\r\n\t*\twidth {number} the width of the prism sides\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePrismShell = function (basePolygon, direction, height, width, withTopAndBottom)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar count = basePolygon.length;\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (basePolygon[i]));\r\n\t\t}\r\n\r\n\t\tvar polygon = new JSM.Polygon ();\r\n\t\tpolygon.vertices = basePolygon;\r\n\t\tvar offsetedPolygon = JSM.OffsetPolygonContour (polygon, width);\r\n\t\tvar innerBasePolygon = offsetedPolygon.vertices;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (innerBasePolygon[i]));\r\n\t\t}\r\n\r\n\t\tvar offseted;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\toffseted = basePolygon[i].Clone ().Offset (direction, height);\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (offseted));\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\toffseted = innerBasePolygon[i].Clone ().Offset (direction, height);\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (offseted));\r\n\t\t}\r\n\r\n\t\tvar curr, next, top, ntop;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tcurr = i;\r\n\t\t\tnext = curr + 1;\r\n\t\t\ttop = curr + 2 * count;\r\n\t\t\tntop = top + 1;\r\n\t\t\tif (i === count - 1) {\r\n\t\t\t\tnext = 0;\r\n\t\t\t\tntop = 2 * count;\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr, next, ntop, top]));\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr + count, top + count, ntop + count, next + count]));\r\n\t\t}\r\n\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurr = i;\r\n\t\t\t\tnext = curr + 1;\r\n\t\t\t\ttop = i + count;\r\n\t\t\t\tntop = top + 1;\r\n\t\t\t\tif (i === count - 1) {\r\n\t\t\t\t\tnext = 0;\r\n\t\t\t\t\tntop = count;\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr, top, ntop, next]));\r\n\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr + 2 * count, next + 2 * count, ntop + 2 * count, top + 2 * count]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar firstDirection = JSM.CoordSub (basePolygon[1], basePolygon[0]).Normalize ();\r\n\t\tvar origo = new JSM.Coord (basePolygon[0].x, basePolygon[0].y, basePolygon[0].z);\r\n\t\tvar e3 = direction.Clone ().Normalize ();\r\n\t\tvar e2 = JSM.VectorCross (e3, firstDirection);\r\n\t\tvar e1 = JSM.VectorCross (e2, e3);\r\n\r\n\t\tresult.SetCubicTextureProjection (origo, e1, e2, e3);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCylinderShell\r\n\t* Description: Generates a cylinder with the given width of sides.\r\n\t* Parameters:\r\n\t*\tradius {number} the radius of the cylinder\r\n\t*\theight {number} the height of the cylinder\r\n\t*\twidth {number} the width of the cylinder sides\r\n\t*\tsegmentation {integer} the segmentation of the top and bottom polygons\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCylinderShell = function (radius, height, width, segmentation, withTopAndBottom, isCurved)\r\n\t{\r\n\t\tfunction GenerateCircle (radius, segmentation, bottom)\r\n\t\t{\r\n\t\t\tvar result = [];\r\n\t\t\tvar step = 2.0 * Math.PI / segmentation;\r\n\t\t\tvar theta, cartesian;\r\n\t\t\tvar i = 0;\r\n\t\t\tfor (i = 0; i < segmentation; i++) {\r\n\t\t\t\ttheta = i * step;\r\n\t\t\t\tcartesian = JSM.PolarToCartesian (radius, theta);\r\n\t\t\t\tresult.push (new JSM.Coord (cartesian.x, cartesian.y, bottom));\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\tvar circle = GenerateCircle (radius, segmentation, -height / 2.0);\r\n\t\tvar result = JSM.GeneratePrismShell (circle, normal, height, width, withTopAndBottom);\r\n\t\t\r\n\t\tvar i;\r\n\t\tif (isCurved) {\r\n\t\t\tfor (i = 0; i < segmentation; i++) {\r\n\t\t\t\tresult.GetPolygon (2 * i).SetCurveGroup (0);\r\n\t\t\t\tresult.GetPolygon (2 * i + 1).SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateLineShell\r\n\t* Description: Generates a polyline with width and height.\r\n\t* Parameters:\r\n\t*\tbasePolyLine {Coord[*]} the base polyline\r\n\t*\tdirection {Vector} the vector of the offset\r\n\t*\theight {number} the height of the shell\r\n\t*\twidth {number} the width of the shell\r\n\t*\twithStartAndEnd {boolean} generate start and end polygons\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateLineShell = function (basePolyLine, direction, height, width, withStartAndEnd, withTopAndBottom)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar count = basePolyLine.length;\r\n\r\n\t\tvar angles = [];\r\n\t\t\r\n\t\tvar i, prev, curr, next;\r\n\t\tvar prevDir, nextDir, angle;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tif (i === 0 || i === count - 1) {\r\n\t\t\t\tangle = Math.PI / 2.0;\r\n\t\t\t} else {\r\n\t\t\t\tprev = i - 1;\r\n\t\t\t\tcurr = i;\r\n\t\t\t\tnext = i + 1;\r\n\r\n\t\t\t\tnextDir = JSM.CoordSub (basePolyLine[next], basePolyLine[curr]);\r\n\t\t\t\tprevDir = JSM.CoordSub (basePolyLine[prev], basePolyLine[curr]);\r\n\t\t\t\tangle = nextDir.AngleTo (prevDir) / 2.0;\r\n\t\t\t\tif (JSM.CoordOrientation (basePolyLine[prev], basePolyLine[curr], basePolyLine[next], direction) == JSM.Orientation.Clockwise) {\r\n\t\t\t\t\tangle = Math.PI - angle;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tangles.push (angle);\r\n\t\t}\r\n\r\n\t\tvar normal = new JSM.Vector (0, 0, 1);\r\n\t\tvar innerBasePolyLine = [];\r\n\t\tvar distance, innerCoord, offsetDirection;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tcurr = i;\r\n\t\t\tif (i === count - 1) {\r\n\t\t\t\toffsetDirection = JSM.CoordSub (basePolyLine[curr - 1], basePolyLine[curr]);\r\n\t\t\t} else {\r\n\t\t\t\tnext = (i + 1) % count;\r\n\t\t\t\toffsetDirection = JSM.CoordSub (basePolyLine[curr], basePolyLine[next]);\r\n\t\t\t}\r\n\r\n\t\t\tangle = angles[curr];\r\n\t\t\tdistance = width / Math.sin (angle);\r\n\t\t\tinnerCoord = basePolyLine[curr].Clone ();\r\n\t\t\tinnerCoord.Offset (offsetDirection, distance);\r\n\t\t\tinnerCoord.Rotate (normal, -(Math.PI - angle), basePolyLine[curr]);\r\n\t\t\tinnerBasePolyLine.push (innerCoord);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (basePolyLine[i]));\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (innerBasePolyLine[i]));\r\n\t\t}\r\n\r\n\t\tvar offseted;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\toffseted = basePolyLine[i].Clone ().Offset (direction, height);\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (offseted));\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\toffseted = innerBasePolyLine[i].Clone ().Offset (direction, height);\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (offseted));\r\n\t\t}\r\n\r\n\t\tvar top, ntop;\r\n\t\tfor (i = 0; i < count - 1; i++) {\r\n\t\t\tcurr = i;\r\n\t\t\tnext = curr + 1;\r\n\t\t\ttop = curr + 2 * count;\r\n\t\t\tntop = top + 1;\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr, next, ntop, top]));\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr + count, top + count, ntop + count, next + count]));\r\n\t\t}\r\n\r\n\t\tif (withStartAndEnd) {\r\n\t\t\tcurr = 0;\r\n\t\t\tnext = curr + count;\r\n\t\t\ttop = curr + 2 * count;\r\n\t\t\tntop = curr + 3 * count;\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr, top, ntop, next]));\r\n\r\n\t\t\tcurr = count - 1;\r\n\t\t\tnext = curr + count;\r\n\t\t\ttop = curr + 2 * count;\r\n\t\t\tntop = curr + 3 * count;\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr, next, ntop, top]));\r\n\t\t}\r\n\r\n\t\tif (withTopAndBottom) {\r\n\t\t\tfor (i = 0; i < count - 1; i++) {\r\n\t\t\t\tcurr = i;\r\n\t\t\t\tnext = curr + 1;\r\n\t\t\t\ttop = i + count;\r\n\t\t\t\tntop = top + 1;\r\n\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr, top, ntop, next]));\r\n\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([curr + 2 * count, next + 2 * count, ntop + 2 * count, top + 2 * count]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar firstDirection = JSM.CoordSub (basePolyLine[1], basePolyLine[0]).Normalize ();\r\n\t\tvar origo = new JSM.Coord (basePolyLine[0].x, basePolyLine[0].y, basePolyLine[0].z);\r\n\t\tvar e3 = direction.Clone ().Normalize ();\r\n\t\tvar e2 = JSM.VectorCross (e3, firstDirection);\r\n\t\tvar e1 = JSM.VectorCross (e2, e3);\r\n\r\n\t\tresult.SetCubicTextureProjection (origo, e1, e2, e3);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTorus\r\n\t* Description: Generates a torus.\r\n\t* Parameters:\r\n\t*\touterRadius {number} the outer radius of the torus\r\n\t*\tinnerRadius {number} the inner radius of the torus\r\n\t*\touterSegmentation {integer} the outer segmentation of the torus\r\n\t*\tinnerSegmentation {integer} the inner segmentation of the torus\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTorus = function (outerRadius, innerRadius, outerSegmentation, innerSegmentation, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar theta = 0.0;\r\n\t\tvar step = 2.0 * Math.PI / innerSegmentation;\r\n\t\t\r\n\t\tvar circle = [];\r\n\t\t\r\n\t\tvar i, coord2D, coord;\r\n\t\tfor (i = 0; i < innerSegmentation; i++) {\r\n\t\t\tcoord2D = JSM.PolarToCartesian (innerRadius, theta);\r\n\t\t\tcoord = new JSM.Coord (coord2D.x + outerRadius, 0.0, coord2D.y);\r\n\t\t\tcircle.push (coord);\r\n\t\t\ttheta += step;\r\n\t\t}\r\n\r\n\t\tvar axisDir = new JSM.Coord (0.0, 0.0, 1.0);\r\n\t\tvar origo = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\r\n\t\tstep = (2.0 * Math.PI) / outerSegmentation;\r\n\t\tvar j, rotated;\r\n\t\tfor (i = 0; i < outerSegmentation; i++) {\r\n\t\t\tfor (j = 0; j < innerSegmentation; j++) {\r\n\t\t\t\trotated = circle[j].Clone ().Rotate (axisDir, i * step, origo);\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (rotated));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar polygon, current, top, next, ntop;\r\n\t\tfor (i = 0; i < outerSegmentation; i++) {\r\n\t\t\tpolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (j = 0; j < innerSegmentation; j++) {\r\n\t\t\t\tcurrent = i * innerSegmentation + j;\r\n\t\t\t\tnext = current + innerSegmentation;\r\n\t\t\t\ttop = current + 1;\r\n\t\t\t\tntop = next + 1;\r\n\t\t\t\t\r\n\t\t\t\tif (j === innerSegmentation - 1) {\r\n\t\t\t\t\ttop = (i * innerSegmentation);\r\n\t\t\t\t\tntop = (i + 1) * innerSegmentation;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i === outerSegmentation - 1) {\r\n\t\t\t\t\tnext = j;\r\n\t\t\t\t\tntop = j + 1;\r\n\t\t\t\t\tif (j === innerSegmentation - 1) {\r\n\t\t\t\t\t\tntop = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\t\tif (isCurved) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePolyTorus\r\n\t* Description: Generates a torus with a polygon cross section.\r\n\t* Parameters:\r\n\t*\tbasePolygon {Coord2D[*]} the cross section polygon of the torus\r\n\t*\touterRadius {number} the outer radius of the torus\r\n\t*\touterSegmentation {integer} the outer segmentation of the torus\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePolyTorus = function (basePolygon, outerRadius, outerSegmentation, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar innerSegmentation = basePolygon.length;\r\n\t\tvar theta = 2.0 * Math.PI;\r\n\t\tvar step = 2.0 * Math.PI / innerSegmentation;\r\n\t\t\r\n\t\tvar circle = [];\r\n\t\t\r\n\t\tvar i, coord2D, coord;\r\n\t\tfor (i = 0; i < innerSegmentation; i++) {\r\n\t\t\tcoord2D = basePolygon[i];\r\n\t\t\tcoord = new JSM.Coord (coord2D.x + outerRadius, 0.0, coord2D.y);\r\n\t\t\tcircle.push (coord);\r\n\t\t\ttheta -= step;\r\n\t\t}\r\n\r\n\t\tvar axisDir = new JSM.Coord (0.0, 0.0, 1.0);\r\n\t\tvar origo = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\r\n\t\tstep = (2.0 * Math.PI) / outerSegmentation;\r\n\t\tvar j, rotated;\r\n\t\tfor (i = 0; i < outerSegmentation; i++) {\r\n\t\t\tfor (j = 0; j < innerSegmentation; j++) {\r\n\t\t\t\trotated = circle[j].Clone ().Rotate (axisDir, i * step, origo);\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (rotated));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar polygon, current, top, next, ntop;\r\n\t\tfor (i = 0; i < outerSegmentation; i++) {\r\n\t\t\tpolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (j = 0; j < innerSegmentation; j++) {\r\n\t\t\t\tcurrent = i * innerSegmentation + j;\r\n\t\t\t\tnext = current + innerSegmentation;\r\n\t\t\t\ttop = current + 1;\r\n\t\t\t\tntop = next + 1;\r\n\t\t\t\t\r\n\t\t\t\tif (j === innerSegmentation - 1) {\r\n\t\t\t\t\ttop = (i * innerSegmentation);\r\n\t\t\t\t\tntop = (i + 1) * innerSegmentation;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (i === outerSegmentation - 1) {\r\n\t\t\t\t\tnext = j;\r\n\t\t\t\t\tntop = j + 1;\r\n\t\t\t\t\tif (j === innerSegmentation - 1) {\r\n\t\t\t\t\t\tntop = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\t\tif (isCurved) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (j);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRuledFromSectors\r\n\t* Description: Generates a ruled surface between two sectors.\r\n\t* Parameters:\r\n\t*\taSector {Sector} the first sector\r\n\t*\tbSector {Sector} the second sector\r\n\t*\tlineSegmentation {integer} the segmentation along sectors\r\n\t*\tmeshSegmentation {integer} the segmentation along surface\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRuledFromSectors = function (aSector, bSector, lineSegmentation, meshSegmentation, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar aCoords = JSM.GetSectorSegmentation (aSector, lineSegmentation);\r\n\t\tvar bCoords = JSM.GetSectorSegmentation (bSector, lineSegmentation);\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar polygons = [];\r\n\t\tJSM.GetRuledMesh (aCoords, bCoords, meshSegmentation, vertices, polygons);\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (vertices[i]));\r\n\t\t}\r\n\r\n\t\tvar polygon, polygonVertexIndices;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tpolygonVertexIndices = polygons[i];\r\n\t\t\tpolygon = new JSM.BodyPolygon (polygonVertexIndices);\r\n\t\t\tif (isCurved) {\r\n\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateGrid\r\n\t* Description: Generates a planar grid.\r\n\t* Parameters:\r\n\t*\txSize {number} the x size\r\n\t*\tySize {number} the y size\r\n\t*\txSegmentation {integer} the segmentation along x axis\r\n\t*\tySegmentation {integer} the segmentation along y axis\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateGrid = function (xSize, ySize, xSegmentation, ySegmentation, isCurved)\r\n\t{\r\n\t\tvar xSector = new JSM.Sector (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (xSize, 0.0, 0.0));\r\n\t\tvar ySector = new JSM.Sector (new JSM.Coord (0.0, ySize, 0.0), new JSM.Coord (xSize, ySize, 0.0));\r\n\t\treturn JSM.GenerateRuledFromSectors (xSector, ySector, xSegmentation, ySegmentation, isCurved);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSquareGrid\r\n\t* Description: Generates a planar square grid.\r\n\t* Parameters:\r\n\t*\tsize {number} the size\r\n\t*\tsegmentation {integer} the segmentation\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSquareGrid = function (size, segmentation, isCurved)\r\n\t{\r\n\t\treturn JSM.GenerateGrid (size, size, segmentation, segmentation, isCurved);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRuledFromSectorsWithHeight\r\n\t* Description: Generates a ruled surface with height between two sectors.\r\n\t* Parameters:\r\n\t*\taSector {Sector} the first sector\r\n\t*\tbSector {Sector} the second sector\r\n\t*\tlineSegmentation {integer} the segmentation along sectors\r\n\t*\tmeshSegmentation {integer} the segmentation along surface\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t*\theight {height} the height\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRuledFromSectorsWithHeight = function (aSector, bSector, lineSegmentation, meshSegmentation, isCurved, height)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar aCoords = JSM.GetSectorSegmentation (aSector, lineSegmentation);\r\n\t\tvar bCoords = JSM.GetSectorSegmentation (bSector, lineSegmentation);\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar polygons = [];\r\n\t\tJSM.GetRuledMesh (aCoords, bCoords, meshSegmentation, vertices, polygons);\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (vertices[i]));\r\n\t\t}\r\n\r\n\t\tvar polygon, polygonVertexIndices;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tpolygonVertexIndices = polygons[i];\r\n\t\t\tpolygon = new JSM.BodyPolygon (polygonVertexIndices);\r\n\t\t\tif (isCurved) {\r\n\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\t\t\r\n\t\tvar topVertexCount = result.VertexCount ();\r\n\r\n\t\tvar newVertex, vertex;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tvertex = vertices[i];\r\n\t\t\tnewVertex = new JSM.Coord (vertex.x, vertex.y, vertex.z);\r\n\t\t\tnewVertex.z -= height;\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (newVertex));\r\n\t\t}\r\n\r\n\t\tvar j, newpolygonVertexIndices;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tpolygonVertexIndices = polygons[i];\r\n\t\t\tnewpolygonVertexIndices = [];\r\n\t\t\tfor (j = polygonVertexIndices.length - 1; j >= 0; j--) {\r\n\t\t\t\tnewpolygonVertexIndices.push (polygonVertexIndices[j] + topVertexCount);\r\n\t\t\t}\r\n\t\t\tpolygon = new JSM.BodyPolygon (newpolygonVertexIndices);\r\n\t\t\tif (isCurved) {\r\n\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tvar current, next, top, ntop;\r\n\t\t\r\n\t\tfor (i = 0; i < meshSegmentation; i++) {\r\n\t\t\tcurrent = i + topVertexCount;\r\n\t\t\tnext = current + 1;\r\n\t\t\ttop = current - topVertexCount;\r\n\t\t\tntop = top + 1;\r\n\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < meshSegmentation; i++) {\r\n\t\t\tcurrent = i + (lineSegmentation * (meshSegmentation + 1)) + topVertexCount;\r\n\t\t\tnext = current + 1;\r\n\t\t\ttop = current - topVertexCount;\r\n\t\t\tntop = top + 1;\r\n\t\t\tpolygon = new JSM.BodyPolygon ([current, top, ntop, next]);\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < lineSegmentation; i++) {\r\n\t\t\tcurrent = i * (meshSegmentation + 1) + topVertexCount;\r\n\t\t\tnext = current + meshSegmentation + 1;\r\n\t\t\ttop = current - topVertexCount;\r\n\t\t\tntop = top + meshSegmentation + 1;\r\n\t\t\tpolygon = new JSM.BodyPolygon ([current, top, ntop, next]);\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < lineSegmentation; i++) {\r\n\t\t\tcurrent = (i + 1) * meshSegmentation + i + topVertexCount;\r\n\t\t\tnext = current + meshSegmentation + 1;\r\n\t\t\ttop = current - topVertexCount;\r\n\t\t\tntop = top + meshSegmentation + 1;\r\n\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRuledFromCoords\r\n\t* Description:\r\n\t*\tGenerates a ruled surface between two coordinate arrays.\r\n\t*\tThe two arrays should have the same length.\r\n\t* Parameters:\r\n\t*\taCoords {Coord[*]} the first coordinate array\r\n\t*\tbCoords {Coord[*]} the second coordinate array\r\n\t*\tmeshSegmentation {integer} the segmentation along surface\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRuledFromCoords = function (aCoords, bCoords, meshSegmentation, isCurved)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar vertices = [];\r\n\t\tvar polygons = [];\r\n\r\n\t\tJSM.GetRuledMesh (aCoords, bCoords, meshSegmentation, vertices, polygons);\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\tresult.AddVertex (new JSM.BodyVertex (vertices[i]));\r\n\t\t}\r\n\r\n\t\tvar polygon;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tvertices = polygons[i];\r\n\t\t\tpolygon = new JSM.BodyPolygon (vertices);\r\n\t\t\tif (isCurved) {\r\n\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (polygon);\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRevolved\r\n\t* Description:\r\n\t*\tGenerates a revolved surface by rotating a polyline around a given axis.\r\n\t*\tIf the angle is 360 degree, it can generate top and bottom polygons.\r\n\t* Parameters:\r\n\t*\tpolyLine {Coord[*]} the polyline\r\n\t*\taxis {Sector} the axis\r\n\t*\tangle {number} the angle\r\n\t*\tsegmentation {integer} the segmentation\r\n\t*\twithTopAndBottom {boolean} generate top and bottom polygons\r\n\t*\tcurveMode {string} 'None', 'CurveSegments', or 'CurveAll'\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRevolved = function (polyLine, axis, angle, segmentation, withTopAndBottom, curveMode)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar circular = JSM.IsEqual (angle, 2.0 * Math.PI);\r\n\r\n\t\tvar count = polyLine.length;\r\n\t\tvar step = angle / segmentation;\r\n\t\tvar axisDir = JSM.CoordSub (axis.end, axis.beg);\r\n\t\t\r\n\t\tvar i, j, rotated;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tfor (j = 0; j <= segmentation; j++) {\r\n\t\t\t\tif (circular && j === segmentation) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\trotated = polyLine[i].Clone ().Rotate (axisDir, j * step, axis.beg);\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (rotated));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar curveModeFlag = 0;\r\n\t\tif (curveMode == 'CurveSegments') {\r\n\t\t\tcurveModeFlag = 1;\r\n\t\t} else if (curveMode == 'CurveAll') {\r\n\t\t\tcurveModeFlag = 2;\r\n\t\t}\r\n\t\t\r\n\t\tvar current, top, next, ntop, polygon;\r\n\t\tfor (i = 0; i < count - 1; i++) {\r\n\t\t\tfor (j = 0; j < segmentation; j++) {\r\n\t\t\t\tcurrent = i * (segmentation + 1) + j;\r\n\t\t\t\ttop = current + segmentation + 1;\r\n\t\t\t\tnext = current + 1;\r\n\t\t\t\tntop = top + 1;\r\n\r\n\t\t\t\tif (circular) {\r\n\t\t\t\t\tcurrent = i * segmentation + j;\r\n\t\t\t\t\ttop = current + segmentation;\r\n\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\tntop = top + 1;\r\n\t\t\t\t\tif (j === segmentation - 1) {\r\n\t\t\t\t\t\tnext = i * segmentation;\r\n\t\t\t\t\t\tntop = (i + 1) * segmentation;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\t\tif (curveModeFlag == 1) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (i);\r\n\t\t\t\t} else if (curveModeFlag == 2) {\r\n\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (circular && withTopAndBottom) {\r\n\t\t\tvar topPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tvar bottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (i = 0; i < segmentation; i++) {\r\n\t\t\t\ttopPolygon.AddVertexIndex (segmentation * (count - 1) + i);\r\n\t\t\t\tbottomPolygon.AddVertexIndex (segmentation - i - 1);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t}\r\n\r\n\t\tvar axisNormalDir = axisDir.Clone ().Normalize ();\r\n\t\tvar axisLine = new JSM.Line (axis.beg, axisNormalDir);\r\n\t\tvar avgRadius = 0.0;\r\n\t\tvar projected;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tprojected = axisLine.ProjectCoord (polyLine[i]);\r\n\t\t\tavgRadius = avgRadius + projected.DistanceTo (polyLine[i]);\r\n\t\t}\r\n\t\tavgRadius = avgRadius / count;\r\n\t\t\r\n\t\tvar origo = new JSM.Coord (axis.beg.x, axis.beg.y, axis.beg.z);\r\n\t\tvar baseLine = new JSM.Line (origo, axisDir);\r\n\t\tvar projectedToBaseLine = baseLine.ProjectCoord (polyLine[0]);\r\n\t\tvar xDirection = JSM.CoordSub (polyLine[0], projectedToBaseLine).Normalize ();\r\n\t\t\r\n\t\tresult.SetCylindricalTextureProjection (origo, avgRadius, xDirection, axisNormalDir);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTube\r\n\t* Description:\r\n\t*\tGenerates a tube from a given array of polygons. All of the\r\n\t*\tpolygons should have same number of vertices.\r\n\t* Parameters:\r\n\t*\tbasePolygons {Coord[*][*]} the array of polygons\r\n\t*\twithStartAndEnd {boolean} generate start and end polygons\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTube = function (basePolygons, withStartAndEnd)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar contourCount = basePolygons.length;\r\n\t\tvar count = basePolygons[0].length;\r\n\r\n\t\tvar i, j;\r\n\t\tfor (j = 0; j < count; j++) {\r\n\t\t\tfor (i = 0; i < contourCount; i++) {\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (basePolygons[i][j]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar current, next;\r\n\t\tfor (j = 0; j < contourCount - 1; j++) {\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\tcurrent = j + contourCount * i;\r\n\t\t\t\tnext = current + contourCount;\r\n\t\t\t\tif (i === count - 1) {\r\n\t\t\t\t\tnext = j;\r\n\t\t\t\t}\r\n\t\t\t\tresult.AddPolygon (new JSM.BodyPolygon ([current, next, next + 1, current + 1]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (withStartAndEnd) {\r\n\t\t\tvar topPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tvar bottomPolygon = new JSM.BodyPolygon ([]);\r\n\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\ttopPolygon.AddVertexIndex (contourCount * i + contourCount - 1);\r\n\t\t\t}\r\n\t\t\tfor (i = count - 1; i >= 0; i--) {\r\n\t\t\t\tbottomPolygon.AddVertexIndex (contourCount * i);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (topPolygon);\r\n\t\t\tresult.AddPolygon (bottomPolygon);\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateFunctionSurface\r\n\t* Description: Generates the surface of a given function.\r\n\t* Parameters:\r\n\t*\tfunction3D {function} the callback function for get surface point\r\n\t*\tintervalMin {Coord2D} the minimum of the interval\r\n\t*\tintervalMax {Coord2D} the maximum of the interval\r\n\t*\tsegmentation {integer} the segmentation\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateFunctionSurface = function (function3D, intervalMin, intervalMax, segmentation, isCurved)\r\n\t{\r\n\t\tvar aSector = new JSM.Sector (new JSM.Coord (intervalMin.x, intervalMin.y, 0.0), new JSM.Coord (intervalMax.x, intervalMin.y, 0.0));\r\n\t\tvar bSector = new JSM.Sector (new JSM.Coord (intervalMin.x, intervalMax.y, 0.0), new JSM.Coord (intervalMax.x, intervalMax.y, 0.0));\r\n\t\tvar result = JSM.GenerateRuledFromSectors (aSector, bSector, segmentation, segmentation, isCurved);\r\n\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < result.VertexCount (); i++) {\r\n\t\t\tcoord = result.GetVertexPosition (i);\r\n\t\t\tcoord.z = function3D (coord.x, coord.y);\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateFunctionSurfaceSolid\r\n\t* Description: Generates the surface of a given function with a solid body.\r\n\t* Parameters:\r\n\t*\tfunction3D {function} the callback function for get surface point\r\n\t*\tintervalMin {Coord2D} the minimum of the interval\r\n\t*\tintervalMax {Coord2D} the maximum of the interval\r\n\t*\tsegmentation {integer} the segmentation\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t*\tbottomZ {number} the bottom z coordinate of the solid\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateFunctionSurfaceSolid = function (function3D, intervalMin, intervalMax, segmentation, isCurved, bottomZ)\r\n\t{\r\n\t\tvar aSector = new JSM.Sector (new JSM.Coord (intervalMax.x, intervalMin.y, 0.0), new JSM.Coord (intervalMin.x, intervalMin.y, 0.0));\r\n\t\tvar bSector = new JSM.Sector (new JSM.Coord (intervalMax.x, intervalMax.y, 0.0), new JSM.Coord (intervalMin.x, intervalMax.y, 0.0));\r\n\t\tvar result = JSM.GenerateRuledFromSectorsWithHeight (aSector, bSector, segmentation, segmentation, isCurved, bottomZ);\r\n\r\n\t\tvar i, coord;\r\n\t\tvar topVertexCount = (segmentation + 1) * (segmentation + 1);\r\n\t\tfor (i = 0; i < topVertexCount; i++) {\r\n\t\t\tcoord = result.GetVertexPosition (i);\r\n\t\t\tcoord.z = function3D (coord.x, coord.y);\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/camera',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: Camera\r\n\t* Description: Represents a camera.\r\n\t* Parameters:\r\n\t*\teye {Coord} the eye position\r\n\t*\tcenter {Coord} the center position\r\n\t*\tup {Vector} the up vector\r\n\t*\tfieldOfView {number} field of view in degree\r\n\t*\tnearClippingPlane {number} near clipping plane distance\r\n\t*\tfarClippingPlane {number} far clipping plane distance\r\n\t*/\r\n\tJSM.Camera = function (eye, center, up, fieldOfView, nearClippingPlane, farClippingPlane)\r\n\t{\r\n\t\tthis.eye = JSM.ValueOrDefault (eye, new JSM.Coord (1.0, 1.0, 1.0));\r\n\t\tthis.center = JSM.ValueOrDefault (center, new JSM.Coord (0.0, 0.0, 0.0));\r\n\t\tthis.up = JSM.ValueOrDefault (up, new JSM.Vector (0.0, 0.0, 1.0));\r\n\t\tthis.fieldOfView = JSM.ValueOrDefault (fieldOfView, 45.0);\r\n\t\tthis.nearClippingPlane = JSM.ValueOrDefault (nearClippingPlane, 0.1);\r\n\t\tthis.farClippingPlane = JSM.ValueOrDefault (farClippingPlane, 1000.0);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Camera.Set\r\n\t* Description: Sets the camera.\r\n\t* Parameters:\r\n\t*\teye {Coord} the eye position\r\n\t*\tcenter {Coord} the center position\r\n\t*\tup {Vector} the up vector\r\n\t*\tfieldOfView {number} field of view in degree\r\n\t*\tnearClippingPlane {number} near clipping plane distance\r\n\t*\tfarClippingPlane {number} far clipping plane distance\r\n\t*/\r\n\tJSM.Camera.prototype.Set = function (eye, center, up, fieldOfView, nearClippingPlane, farClippingPlane)\r\n\t{\r\n\t\tthis.eye = eye;\r\n\t\tthis.center = center;\r\n\t\tthis.up = up;\r\n\t\tthis.fieldOfView = JSM.ValueOrDefault (fieldOfView, 45.0);\r\n\t\tthis.nearClippingPlane = JSM.ValueOrDefault (nearClippingPlane, 0.1);\r\n\t\tthis.farClippingPlane = JSM.ValueOrDefault (farClippingPlane, 1000.0);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: Camera.Clone\r\n\t* Description: Clones the camera.\r\n\t* Returns:\r\n\t*\t{Camera} a cloned instance\r\n\t*/\r\n\tJSM.Camera.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.Camera ();\r\n\t\tresult.eye = this.eye;\r\n\t\tresult.center = this.center;\r\n\t\tresult.up = this.up;\r\n\t\tresult.fieldOfView = this.fieldOfView;\r\n\t\tresult.nearClippingPlane = this.nearClippingPlane;\r\n\t\tresult.farClippingPlane = this.farClippingPlane;\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/explode',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: ExplodeBody\r\n\t* Description:\r\n\t*\tExplodes a body to primitives. The function calls callback functions\r\n\t*\ton geometry start and end, and when a triangle or a line is created.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tmaterials {MaterialSet} the materials\r\n\t*\texplodeData {object} the parameters and callback functions of explode\r\n\t* Returns:\r\n\t*\t{boolean} success\r\n\t*/\r\n\tJSM.ExplodeBody = function (body, materials, explodeData)\r\n\t{\r\n\t\tfunction SeparateByMaterial (materials, itemsByMaterial, itemsWithNoMaterial, callbacks)\r\n\t\t{\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < materials.Count (); i++) {\r\n\t\t\t\titemsByMaterial.push ([]);\r\n\t\t\t}\r\n\r\n\t\t\tvar itemCount = callbacks.itemCount ();\r\n\t\t\tvar material;\r\n\t\t\tfor (i = 0; i < itemCount; i++) {\r\n\t\t\t\tmaterial = callbacks.getMaterial (i);\r\n\t\t\t\tif (material !== -1) {\r\n\t\t\t\t\titemsByMaterial[material].push (i);\r\n\t\t\t\t} else {\r\n\t\t\t\t\titemsWithNoMaterial.push (i);\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction ExplodePoints (body, materials, explodeData)\r\n\t\t{\r\n\t\t\tfunction ExplodePointsByMaterial (pointIndices, materialIndex, explodeData)\r\n\t\t\t{\r\n\t\t\t\tif (pointIndices.length === 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar material = materials.GetMaterial (materialIndex);\r\n\t\t\t\tif (explodeData.onPointGeometryStart !== undefined && explodeData.onPointGeometryStart !== null) {\r\n\t\t\t\t\texplodeData.onPointGeometryStart (material);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (explodeData.onPoint !== undefined && explodeData.onPoint !== null) {\r\n\t\t\t\t\tvar i, point, vertex;\r\n\t\t\t\t\tfor (i = 0; i < pointIndices.length; i++) {\r\n\t\t\t\t\t\tpoint = body.GetPoint (pointIndices[i]);\r\n\t\t\t\t\t\tvertex = body.GetVertexPosition (point.GetVertexIndex ());\r\n\t\t\t\t\t\texplodeData.onPoint (vertex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (explodeData.onPointGeometryEnd !== undefined && explodeData.onPointGeometryEnd !== null) {\r\n\t\t\t\t\texplodeData.onPointGeometryEnd (material);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (body.PointCount () === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar pointsByMaterial = [];\r\n\t\t\tvar pointsWithNoMaterial = [];\r\n\t\t\tSeparateByMaterial (materials, pointsByMaterial, pointsWithNoMaterial, {\r\n\t\t\t\titemCount : function () {\r\n\t\t\t\t\treturn body.PointCount ();\r\n\t\t\t\t},\r\n\t\t\t\tgetMaterial : function (index) {\r\n\t\t\t\t\tvar point = body.GetPoint (index);\r\n\t\t\t\t\treturn point.GetMaterialIndex ();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar i;\t\t\r\n\t\t\tfor (i = 0; i < pointsByMaterial.length; i++) {\r\n\t\t\t\tExplodePointsByMaterial (pointsByMaterial[i], i, explodeData);\r\n\t\t\t}\r\n\t\t\tExplodePointsByMaterial (pointsWithNoMaterial, -1, explodeData);\r\n\t\t}\r\n\r\n\t\tfunction ExplodeLines (body, materials, explodeData)\r\n\t\t{\r\n\t\t\tfunction ExplodeLinesByMaterial (lineIndices, materialIndex, explodeData)\r\n\t\t\t{\r\n\t\t\t\tif (lineIndices.length === 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar material = materials.GetMaterial (materialIndex);\r\n\t\t\t\tif (explodeData.onLineGeometryStart !== undefined && explodeData.onLineGeometryStart !== null) {\r\n\t\t\t\t\texplodeData.onLineGeometryStart (material);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (explodeData.onLine !== undefined && explodeData.onLine !== null) {\r\n\t\t\t\t\tvar i, line, beg, end;\r\n\t\t\t\t\tfor (i = 0; i < lineIndices.length; i++) {\r\n\t\t\t\t\t\tline = body.GetLine (lineIndices[i]);\r\n\t\t\t\t\t\tbeg = body.GetVertexPosition (line.GetBegVertexIndex ());\r\n\t\t\t\t\t\tend = body.GetVertexPosition (line.GetEndVertexIndex ());\r\n\t\t\t\t\t\texplodeData.onLine (beg, end);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (explodeData.onLineGeometryEnd !== undefined && explodeData.onLineGeometryEnd !== null) {\r\n\t\t\t\t\texplodeData.onLineGeometryEnd (material);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (body.LineCount () === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar linesByMaterial = [];\r\n\t\t\tvar linesWithNoMaterial = [];\r\n\t\t\tSeparateByMaterial (materials, linesByMaterial, linesWithNoMaterial, {\r\n\t\t\t\titemCount : function () {\r\n\t\t\t\t\treturn body.LineCount ();\r\n\t\t\t\t},\r\n\t\t\t\tgetMaterial : function (index) {\r\n\t\t\t\t\tvar line = body.GetLine (index);\r\n\t\t\t\t\treturn line.GetMaterialIndex ();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar i;\t\t\r\n\t\t\tfor (i = 0; i < linesByMaterial.length; i++) {\r\n\t\t\t\tExplodeLinesByMaterial (linesByMaterial[i], i, explodeData);\r\n\t\t\t}\r\n\t\t\tExplodeLinesByMaterial (linesWithNoMaterial, -1, explodeData);\r\n\t\t}\r\n\r\n\t\tfunction ExplodePolygons (body, materials, explodeData)\r\n\t\t{\r\n\t\t\tfunction CalculatePolygonsDerivedData (body, materials)\r\n\t\t\t{\r\n\t\t\t\tvar vertexNormals = JSM.CalculateBodyVertexNormals (body);\r\n\r\n\t\t\t\tvar i, j;\r\n\t\t\t\tvar hasTextureCoords = false;\r\n\t\t\t\tif (materials !== undefined && materials !== null) {\r\n\t\t\t\t\tfor (i = 0; i < materials.Count (); i++) {\r\n\t\t\t\t\t\tif (materials.GetMaterial (i).texture !== null) {\r\n\t\t\t\t\t\t\thasTextureCoords = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar textureCoords = null;\r\n\t\t\t\tvar polygon, material;\r\n\t\t\t\tif (hasTextureCoords) {\r\n\t\t\t\t\ttextureCoords = JSM.CalculateBodyTextureCoords (body);\r\n\t\t\t\t\tfor (i = 0; i < textureCoords.length; i++) {\r\n\t\t\t\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\t\t\t\tif (polygon.HasMaterialIndex ()) {\r\n\t\t\t\t\t\t\tmaterial = materials.GetMaterial (polygon.GetMaterialIndex ());\r\n\t\t\t\t\t\t\tfor (j = 0; j < textureCoords[i].length; j++) {\r\n\t\t\t\t\t\t\t\ttextureCoords[i][j].x /= material.textureWidth;\r\n\t\t\t\t\t\t\t\ttextureCoords[i][j].y /= -material.textureHeight;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tvertexNormals : vertexNormals,\r\n\t\t\t\t\ttextureCoords : textureCoords\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction ExplodePolygonsByMaterial (polygonIndices, materialIndex, derivedData, explodeData)\r\n\t\t\t{\r\n\t\t\t\tfunction ExplodePolygon (index, derivedData, explodeData)\r\n\t\t\t\t{\r\n\t\t\t\t\tfunction CreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (explodeData.onTriangle !== undefined && explodeData.onTriangle !== null) {\r\n\t\t\t\t\t\t\texplodeData.onTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar polygon = body.GetPolygon (index);\r\n\t\t\t\t\tvar count = polygon.VertexIndexCount ();\r\n\t\t\t\t\tif (count < 3) {\r\n\t\t\t\t\t\tJSM.Message ('Invalid polygon found.');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar vertex1, vertex2, vertex3;\r\n\t\t\t\t\tvar normal1, normal2, normal3;\r\n\t\t\t\t\tvar uv1, uv2, uv3;\r\n\r\n\t\t\t\t\tvar convexPolygon = false;\r\n\t\t\t\t\tif (explodeData.hasConvexPolygons !== undefined && explodeData.hasConvexPolygons !== null) {\r\n\t\t\t\t\t\tconvexPolygon = explodeData.hasConvexPolygons;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tif (count == 3 || convexPolygon) {\r\n\t\t\t\t\t\tfor (i = 0; i < count - 2; i++) {\r\n\t\t\t\t\t\t\tvertex1 = body.GetVertexPosition (polygon.GetVertexIndex (0));\r\n\t\t\t\t\t\t\tvertex2 = body.GetVertexPosition (polygon.GetVertexIndex ((i + 1) % count));\r\n\t\t\t\t\t\t\tvertex3 = body.GetVertexPosition (polygon.GetVertexIndex ((i + 2) % count));\r\n\t\t\t\t\t\t\tnormal1 = derivedData.vertexNormals[index][0];\r\n\t\t\t\t\t\t\tnormal2 = derivedData.vertexNormals[index][(i + 1) % count];\r\n\t\t\t\t\t\t\tnormal3 = derivedData.vertexNormals[index][(i + 2) % count];\r\n\t\t\t\t\t\t\tuv1 = null;\r\n\t\t\t\t\t\t\tuv2 = null;\r\n\t\t\t\t\t\t\tuv3 = null;\r\n\t\t\t\t\t\t\tif (derivedData.textureCoords !== null) {\r\n\t\t\t\t\t\t\t\tuv1 = derivedData.textureCoords[index][0];\r\n\t\t\t\t\t\t\t\tuv2 = derivedData.textureCoords[index][(i + 1) % count];\r\n\t\t\t\t\t\t\t\tuv3 = derivedData.textureCoords[index][(i + 2) % count];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tCreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar polygon3D = new JSM.Polygon ();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar vertex;\r\n\t\t\t\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\t\t\t\tvertex = body.GetVertexPosition (polygon.vertices[i]);\r\n\t\t\t\t\t\t\tpolygon3D.AddVertex (vertex.x, vertex.y, vertex.z);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar normal = JSM.CalculateBodyPolygonNormal (body, index);\r\n\t\t\t\t\t\tvar triangles = JSM.TriangulatePolygon (polygon3D, normal);\r\n\t\t\t\t\t\tif (triangles !== null) {\r\n\t\t\t\t\t\t\tvar triangle;\r\n\t\t\t\t\t\t\tfor (i = 0; i < triangles.length; i++) {\r\n\t\t\t\t\t\t\t\ttriangle = triangles[i];\r\n\t\t\t\t\t\t\t\tvertex1 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[0]));\r\n\t\t\t\t\t\t\t\tvertex2 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[1]));\r\n\t\t\t\t\t\t\t\tvertex3 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[2]));\r\n\t\t\t\t\t\t\t\tnormal1 = derivedData.vertexNormals[index][triangle[0]];\r\n\t\t\t\t\t\t\t\tnormal2 = derivedData.vertexNormals[index][triangle[1]];\r\n\t\t\t\t\t\t\t\tnormal3 = derivedData.vertexNormals[index][triangle[2]];\r\n\t\t\t\t\t\t\t\tuv1 = null;\r\n\t\t\t\t\t\t\t\tuv2 = null;\r\n\t\t\t\t\t\t\t\tuv3 = null;\r\n\t\t\t\t\t\t\t\tif (derivedData.textureCoords !== null) {\r\n\t\t\t\t\t\t\t\t\tuv1 = derivedData.textureCoords[index][triangle[0]];\r\n\t\t\t\t\t\t\t\t\tuv2 = derivedData.textureCoords[index][triangle[1]];\r\n\t\t\t\t\t\t\t\t\tuv3 = derivedData.textureCoords[index][triangle[2]];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tCreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tJSM.Message ('Triangulation failed.');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (polygonIndices.length === 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar material = materials.GetMaterial (materialIndex);\r\n\t\t\t\tif (explodeData.onGeometryStart !== undefined && explodeData.onGeometryStart !== null) {\r\n\t\t\t\t\texplodeData.onGeometryStart (material);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < polygonIndices.length; i++) {\r\n\t\t\t\t\tExplodePolygon (polygonIndices[i], derivedData, explodeData);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (explodeData.onGeometryEnd !== undefined && explodeData.onGeometryEnd !== null) {\r\n\t\t\t\t\texplodeData.onGeometryEnd (material);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (body.PolygonCount () === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar polygonsByMaterial = [];\r\n\t\t\tvar polygonsWithNoMaterial = [];\r\n\t\t\tSeparateByMaterial (materials, polygonsByMaterial, polygonsWithNoMaterial, {\r\n\t\t\t\titemCount : function () {\r\n\t\t\t\t\treturn body.PolygonCount ();\r\n\t\t\t\t},\r\n\t\t\t\tgetMaterial : function (index) {\r\n\t\t\t\t\tvar polygon = body.GetPolygon (index);\r\n\t\t\t\t\treturn polygon.GetMaterialIndex ();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar derivedData = CalculatePolygonsDerivedData (body, materials);\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < polygonsByMaterial.length; i++) {\r\n\t\t\t\tExplodePolygonsByMaterial (polygonsByMaterial[i], i, derivedData, explodeData);\r\n\t\t\t}\r\n\t\t\tExplodePolygonsByMaterial (polygonsWithNoMaterial, -1, derivedData, explodeData);\r\n\t\t}\r\n\r\n\t\tif (explodeData === undefined || explodeData === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (materials === undefined || materials === null) {\r\n\t\t\tmaterials = new JSM.MaterialSet ();\r\n\t\t}\t\r\n\t\t\r\n\t\tExplodePoints (body, materials, explodeData);\r\n\t\tExplodeLines (body, materials, explodeData);\r\n\t\tExplodePolygons (body, materials, explodeData);\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/exporter',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: ExportBodyContentToStl\r\n\t* Description: Exports a body content to stl.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tname {string} name the body\r\n\t*\thasConvexPolygons {boolean} the body has only convex polygons\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportBodyContentToStl = function (body, name, hasConvexPolygons)\r\n\t{\r\n\t\tfunction AddLineToContent (line)\r\n\t\t{\r\n\t\t\tstlContent += line + '\\n';\r\n\t\t}\r\n\r\n\t\tfunction AddTriangleToContent (normal, vertex1, vertex2, vertex3)\r\n\t\t{\r\n\t\t\tAddLineToContent ('\\tfacet normal ' + normal.x + ' ' + normal.y + ' ' + normal.z);\r\n\t\t\tAddLineToContent ('\\t\\touter loop');\r\n\t\t\tAddLineToContent ('\\t\\t\\tvertex ' + vertex1.x + ' ' + vertex1.y + ' ' + vertex1.z);\r\n\t\t\tAddLineToContent ('\\t\\t\\tvertex ' + vertex2.x + ' ' + vertex2.y + ' ' + vertex2.z);\r\n\t\t\tAddLineToContent ('\\t\\t\\tvertex ' + vertex3.x + ' ' + vertex3.y + ' ' + vertex3.z);\r\n\t\t\tAddLineToContent ('\\t\\tendloop');\r\n\t\t\tAddLineToContent ('\\tendfacet');\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddPolygon (index)\r\n\t\t{\r\n\t\t\tvar polygon = body.GetPolygon (index);\r\n\t\t\tvar count = polygon.VertexIndexCount ();\r\n\t\t\tif (count < 3) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar vertex1, vertex2, vertex3;\r\n\t\t\tvar normal = null;\r\n\t\t\tif (count === 3) {\r\n\t\t\t\tnormal = JSM.CalculateBodyPolygonNormal (body, index);\r\n\t\t\t\tvertex1 = body.GetVertex (polygon.GetVertexIndex (0)).position;\r\n\t\t\t\tvertex2 = body.GetVertex (polygon.GetVertexIndex (1)).position;\r\n\t\t\t\tvertex3 = body.GetVertex (polygon.GetVertexIndex (2)).position;\r\n\t\t\t\tAddTriangleToContent (normal, vertex1, vertex2, vertex3);\r\n\t\t\t} else {\r\n\t\t\t\tvar useTriangulation = true;\r\n\t\t\t\tif (hasConvexPolygons !== undefined && hasConvexPolygons) {\r\n\t\t\t\t\tuseTriangulation = false;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tvar i;\r\n\t\t\t\tnormal = JSM.CalculateBodyPolygonNormal (body, index);\r\n\t\t\t\tif (useTriangulation) {\r\n\t\t\t\t\tvar polygon3D = new JSM.Polygon ();\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar vertex;\r\n\t\t\t\t\tfor (i = 0; i < count; i++) {\r\n\t\t\t\t\t\tvertex = body.GetVertex (polygon.vertices[i]);\r\n\t\t\t\t\t\tpolygon3D.AddVertex (vertex.position.x, vertex.position.y, vertex.position.z);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar triangles = JSM.TriangulatePolygon (polygon3D, normal);\r\n\t\t\t\t\tif (triangles !== null) {\r\n\t\t\t\t\t\tvar triangle;\r\n\t\t\t\t\t\tfor (i = 0; i < triangles.length; i++) {\r\n\t\t\t\t\t\t\ttriangle = triangles[i];\r\n\t\t\t\t\t\t\tvertex1 = body.GetVertex (polygon.GetVertexIndex (triangle[0])).position;\r\n\t\t\t\t\t\t\tvertex2 = body.GetVertex (polygon.GetVertexIndex (triangle[1])).position;\r\n\t\t\t\t\t\t\tvertex3 = body.GetVertex (polygon.GetVertexIndex (triangle[2])).position;\r\n\t\t\t\t\t\t\tAddTriangleToContent (normal, vertex1, vertex2, vertex3);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = 0; i < count - 2; i++) {\r\n\t\t\t\t\t\tvertex1 = body.GetVertex (polygon.GetVertexIndex (0)).position;\r\n\t\t\t\t\t\tvertex2 = body.GetVertex (polygon.GetVertexIndex ((i + 1) % count)).position;\r\n\t\t\t\t\t\tvertex3 = body.GetVertex (polygon.GetVertexIndex ((i + 2) % count)).position;\r\n\t\t\t\t\t\tAddTriangleToContent (normal, vertex1, vertex2, vertex3);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar stlContent = '';\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tAddPolygon (i);\r\n\t\t}\r\n\r\n\t\treturn stlContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportBodyToStl\r\n\t* Description: Exports a body to stl.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tname {string} name the body\r\n\t*\thasConvexPolygons {boolean} the body has only convex polygons\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportBodyToStl = function (body, name, hasConvexPolygons)\r\n\t{\r\n\t\tfunction AddLineToContent (line)\r\n\t\t{\r\n\t\t\tstlContent += line + '\\n';\r\n\t\t}\r\n\r\n\t\tvar stlContent = '';\r\n\t\t\r\n\t\tAddLineToContent ('solid ' + name);\r\n\t\tstlContent += JSM.ExportBodyContentToStl (body, name, hasConvexPolygons);\r\n\t\tAddLineToContent ('endsolid ' + name);\r\n\t\t\r\n\t\treturn stlContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportModelToStl\r\n\t* Description: Exports a model to stl.\r\n\t* Parameters:\r\n\t*\tmodel {Model} the model\r\n\t*\tname {string} name the model\r\n\t*\thasConvexPolygons {boolean} the model has only convex polygons\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportModelToStl = function (model, name, hasConvexPolygons)\r\n\t{\r\n\t\tfunction AddLineToContent (line)\r\n\t\t{\r\n\t\t\tstlContent += line + '\\n';\r\n\t\t}\r\n\r\n\t\tvar stlContent = '';\r\n\r\n\t\tAddLineToContent ('solid ' + name);\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\tstlContent += JSM.ExportBodyContentToStl (body, name + (i + 1).toString (), hasConvexPolygons);\r\n\t\t}\r\n\t\tAddLineToContent ('endsolid ' + name);\r\n\r\n\t\treturn stlContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportBodyContentToObj\r\n\t* Description: Exports a body content to obj.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tvertexOffset {integer} vertex index offset\r\n\t*\tnormalOffset {integer} normal index offset\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportBodyContentToObj = function (body, vertexOffset, normalOffset)\r\n\t{\r\n\t\tfunction AddToContent (line)\r\n\t\t{\r\n\t\t\tobjContent += line;\r\n\t\t}\r\n\r\n\t\tfunction AddLineToContent (line)\r\n\t\t{\r\n\t\t\tobjContent += line + '\\n';\r\n\t\t}\r\n\r\n\t\tfunction AddVertex (index)\r\n\t\t{\r\n\t\t\tvar vertCoord = body.GetVertex (index).position;\r\n\t\t\tAddLineToContent ('v ' + vertCoord.x + ' ' + vertCoord.y + ' ' + vertCoord.z);\r\n\t\t}\r\n\r\n\t\tfunction AddNormal (index)\r\n\t\t{\r\n\t\t\tvar normalVector = JSM.CalculateBodyPolygonNormal (body, index);\r\n\t\t\tAddLineToContent ('vn ' + normalVector.x + ' ' + normalVector.y + ' ' + normalVector.z);\r\n\t\t}\r\n\r\n\t\tfunction AddPolygon (index)\r\n\t\t{\r\n\t\t\tvar polygon = body.GetPolygon (index);\r\n\t\t\r\n\t\t\tAddToContent ('f ');\r\n\t\t\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\t\tAddToContent ((vertexOffset + polygon.GetVertexIndex (i) + 1) + '//' + (normalOffset + index + 1) + ' ');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tAddLineToContent ('');\r\n\t\t}\r\n\r\n\t\tvar objContent = '';\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tAddVertex (i);\r\n\t\t}\r\n\t\t\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tAddNormal (i);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tAddPolygon (i);\r\n\t\t}\r\n\t\t\r\n\t\treturn objContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportBodyToObj\r\n\t* Description: Exports a body to obj.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportBodyToObj = function (body)\r\n\t{\r\n\t\treturn JSM.ExportBodyContentToObj (body, 0, 0);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportModelToObj\r\n\t* Description: Exports a model to obj.\r\n\t* Parameters:\r\n\t*\tmodel {Model} the model\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportModelToObj = function (model)\r\n\t{\r\n\t\tvar objContent = '';\r\n\t\t\r\n\t\tvar vertexOffset = 0;\r\n\t\tvar normalOffset = 0;\r\n\t\t\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\tobjContent += JSM.ExportBodyContentToObj (body, vertexOffset, normalOffset);\r\n\t\t\tvertexOffset += body.VertexCount ();\r\n\t\t\tnormalOffset += body.PolygonCount ();\r\n\t\t}\r\n\r\n\t\treturn objContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportMaterialsToGdl\r\n\t* Description: Exports a material container to gdl.\r\n\t* Parameters:\r\n\t*\tmaterials {MaterialSet} the material container\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportMaterialsToGdl = function (materials)\r\n\t{\r\n\t\tfunction HexColorToRGBColorString (hexColor)\r\n\t\t{\r\n\t\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\r\n\t\t\tvar result = rgb[0] / 255.0 + ',' + rgb[1] / 255.0 + ',' + rgb[2] / 255.0;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tfunction AddLineToContent (line)\r\n\t\t{\r\n\t\t\tgdlContent += line + '\\n';\r\n\t\t}\r\n\r\n\t\tfunction AddMaterial (material, index)\r\n\t\t{\r\n\t\t\tvar rgbString = HexColorToRGBColorString (material.diffuse);\r\n\t\t\tAddLineToContent ('define material \"material' + index + '\" 2, ' + rgbString + ' ! ' + index);\r\n\t\t}\r\n\t\t\r\n\t\tvar gdlContent = '';\r\n\t\tvar writeMaterials = false;\r\n\t\tif (materials !== undefined && materials !== null) {\r\n\t\t\twriteMaterials = true;\r\n\t\t}\r\n\r\n\t\tvar i;\r\n\t\tif (writeMaterials) {\r\n\t\t\tAddMaterial (materials.GetDefaultMaterial (), 1);\r\n\t\t\tfor (i = 0; i < materials.Count (); i++) {\r\n\t\t\t\tAddMaterial (materials.GetMaterial (i), i + 2);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn gdlContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportBodyGeometryToGdl\r\n\t* Description: Exports a body geometry to gdl.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\twriteMaterials {boolean} write materials\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportBodyGeometryToGdl = function (body, writeMaterials)\r\n\t{\r\n\t\tfunction AddToContent (line)\r\n\t\t{\r\n\t\t\tvar lineLengthLimit = 200;\r\n\t\t\tif (line.length > lineLengthLimit) {\r\n\t\t\t\tvar current = 0;\r\n\t\t\t\tvar i, character;\r\n\t\t\t\tfor (i = 0; i < line.length; i++) {\r\n\t\t\t\t\tcharacter = line[i];\r\n\t\t\t\t\tgdlContent += character;\r\n\t\t\t\t\tcurrent++;\r\n\t\t\t\t\tif (current > lineLengthLimit && character == ',') {\r\n\t\t\t\t\t\tgdlContent += '\\n';\r\n\t\t\t\t\t\tcurrent = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgdlContent += line;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddLineToContent (line)\r\n\t\t{\r\n\t\t\tAddToContent (line + '\\n');\r\n\t\t}\r\n\r\n\t\tfunction AddVertex (index)\r\n\t\t{\r\n\t\t\tvar vertCoord = body.GetVertex (index).position;\r\n\t\t\tAddLineToContent ('vert ' + vertCoord.x + ', ' + vertCoord.y + ', ' + vertCoord.z + ' ! ' + (index + 1));\r\n\t\t}\r\n\r\n\t\tfunction AddEdge (adjacencyInfo, index)\r\n\t\t{\r\n\t\t\tvar edge = adjacencyInfo.edges[index];\r\n\t\t\tvar status = 0;\r\n\t\t\tif (edge.pgon1 != -1 && edge.pgon2 != -1) {\r\n\t\t\t\tif (body.GetPolygon (edge.pgon1).HasCurveGroup () && body.GetPolygon (edge.pgon2).HasCurveGroup ()) {\r\n\t\t\t\t\tif (body.GetPolygon (edge.pgon1).GetCurveGroup () == body.GetPolygon (edge.pgon2).GetCurveGroup ()) {\r\n\t\t\t\t\t\tstatus = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tAddLineToContent ('edge ' + (edge.vert1 + 1) + ', ' + (edge.vert2 + 1) + ', -1, -1, ' + status + ' ! ' + (index + 1));\r\n\t\t}\r\n\r\n\t\tfunction AddPolygon (adjacencyInfo, index, lastMaterialIndex)\r\n\t\t{\r\n\t\t\tvar materialIndex = -1;\r\n\t\t\tif (writeMaterials) {\r\n\t\t\t\tmaterialIndex = body.GetPolygon (index).GetMaterialIndex () + 2;\r\n\t\t\t\tif (materialIndex != lastMaterialIndex) {\r\n\t\t\t\t\tAddLineToContent ('set material \"material' + materialIndex + '\"');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar pgon = adjacencyInfo.pgons[index];\r\n\t\t\tvar status = 0;\r\n\t\t\tif (body.GetPolygon (index).HasCurveGroup ()) {\r\n\t\t\t\tstatus = 2;\r\n\t\t\t}\r\n\t\t\tAddToContent ('pgon ' + pgon.pedges.length + ', 0, ' + status + ', ');\r\n\t\t\tvar pedgeList = '';\r\n\t\t\tvar i, pedge;\r\n\t\t\tfor (i = 0; i < pgon.pedges.length; i++) {\r\n\t\t\t\tpedge = pgon.pedges[i];\r\n\t\t\t\tif (!pedge.reverse) {\r\n\t\t\t\t\tpedgeList += (pedge.index + 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpedgeList += (-(pedge.index + 1));\r\n\t\t\t\t}\r\n\t\t\t\tif (i < pgon.pedges.length - 1) {\r\n\t\t\t\t\tpedgeList += ', ';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tAddToContent (pedgeList);\r\n\t\t\tAddToContent (' ! ' + (index + 1));\r\n\t\t\tAddLineToContent ('');\r\n\t\t\t\r\n\t\t\treturn materialIndex;\r\n\t\t}\r\n\r\n\t\tvar gdlContent = '';\r\n\r\n\t\tAddLineToContent ('base');\r\n\t\tvar adjacencyInfo = new JSM.AdjacencyInfo (body);\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < adjacencyInfo.verts.length; i++) {\r\n\t\t\tAddVertex (i);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\tAddEdge (adjacencyInfo, i);\r\n\t\t}\r\n\t\t\r\n\t\tvar lastMaterialIndex = -1;\r\n\t\tfor (i = 0; i < adjacencyInfo.pgons.length; i++) {\r\n\t\t\tlastMaterialIndex = AddPolygon (adjacencyInfo, i, lastMaterialIndex);\r\n\t\t}\r\n\r\n\t\tAddLineToContent ('body -1');\r\n\t\treturn gdlContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportBodyToGdl\r\n\t* Description: Exports a body to gdl.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tmaterials {MaterialSet} the material container\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportBodyToGdl = function (body, materials)\r\n\t{\r\n\t\tvar gdlContent = '';\r\n\r\n\t\tvar writeMaterials = false;\r\n\t\tif (materials !== undefined && materials !== null) {\r\n\t\t\tgdlContent += JSM.ExportMaterialsToGdl (materials);\r\n\t\t\twriteMaterials = true;\r\n\t\t}\r\n\r\n\t\tgdlContent += JSM.ExportBodyGeometryToGdl (body, writeMaterials);\r\n\t\treturn gdlContent;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ExportModelToGdl\r\n\t* Description: Exports a model to gdl.\r\n\t* Parameters:\r\n\t*\tmodel {Model} the model\r\n\t*\tmaterials {MaterialSet} the material container\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.ExportModelToGdl = function (model, materials)\r\n\t{\r\n\t\tvar gdlContent = '';\r\n\t\tvar writeMaterials = false;\r\n\t\tif (materials !== undefined && materials !== null) {\r\n\t\t\tgdlContent += JSM.ExportMaterialsToGdl (materials);\r\n\t\t\twriteMaterials = true;\r\n\t\t}\r\n\t\t\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\tgdlContent += JSM.ExportBodyGeometryToGdl (body, writeMaterials);\r\n\t\t}\r\n\r\n\t\treturn gdlContent;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/trianglebody',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: TriangleBody\r\n\t* Description: Represents a 3D body which contains only triangles.\r\n\t*/\r\n\tJSM.TriangleBody = function (name)\r\n\t{\r\n\t\tthis.name = name;\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.triangles = [];\r\n\t\tthis.defaultUVIndex = -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.SetName\r\n\t* Description: Sets the name of the body.\r\n\t* Parameters:\r\n\t*\tname {string} the name\r\n\t*/\r\n\tJSM.TriangleBody.prototype.SetName = function (name)\r\n\t{\r\n\t\tthis.name = name;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetName\r\n\t* Description: Returns the name of the body.\r\n\t* Returns:\r\n\t*\t{string} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetName = function ()\r\n\t{\r\n\t\treturn this.name;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.AddVertex\r\n\t* Description: Adds a vertex to the body.\r\n\t* Parameters:\r\n\t*\tx, y, z {number} the coordinates of the vertex\r\n\t* Returns:\r\n\t*\t{integer} the index of the added vertex\r\n\t*/\r\n\tJSM.TriangleBody.prototype.AddVertex = function (x, y, z)\r\n\t{\r\n\t\tthis.vertices.push (new JSM.Coord (x, y, z));\r\n\t\treturn this.vertices.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetVertex\r\n\t* Description: Returns the vertex at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetVertex = function (index)\r\n\t{\r\n\t\treturn this.vertices[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.SetVertex\r\n\t* Description: Sets the position of the vertex at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the vertex index\r\n\t*\tx, y, z {number} the new coordinates of the vertex\r\n\t*/\r\n\tJSM.TriangleBody.prototype.SetVertex = function (index, x, y, z)\r\n\t{\r\n\t\tthis.vertices[index] = new JSM.Coord (x, y, z);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.VertexCount\r\n\t* Description: Returns the vertex count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.VertexCount = function ()\r\n\t{\r\n\t\treturn this.vertices.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.AddNormal\r\n\t* Description: Adds a normal vector to the body.\r\n\t* Parameters:\r\n\t*\tx, y, z {number} the coordinates of the normal vector\r\n\t* Returns:\r\n\t*\t{integer} the index of the added normal vector\r\n\t*/\r\n\tJSM.TriangleBody.prototype.AddNormal = function (x, y, z)\r\n\t{\r\n\t\tthis.normals.push (new JSM.Vector (x, y, z));\r\n\t\treturn this.normals.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetNormal\r\n\t* Description: Returns the normal vector at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the normal vector index\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetNormal = function (index)\r\n\t{\r\n\t\treturn this.normals[index];\r\n\t};\r\n\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetTriangleNormal\r\n\t* Description: Returns the normal vector of a triangle at the given position.\r\n\t* Parameters:\r\n\t*\ttriangleIndex {integer} the triangle index\r\n\t*\tnormalPosition {Coord} the position of the normal inside the triangle\r\n\t* Returns:\r\n\t*\t{Vector} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetTriangleNormal = function (triangleIndex, normalPosition)\r\n\t{\r\n\t\tvar normal = null;\r\n\t\tvar triangle = this.triangles[triangleIndex];\r\n\t\tif (triangle.curve == -1) {\r\n\t\t\tnormal = this.GetNormal (triangle.n0);\r\n\t\t} else {\r\n\t\t\tvar v0 = this.GetVertex (triangle.v0);\r\n\t\t\tvar v1 = this.GetVertex (triangle.v1);\r\n\t\t\tvar v2 = this.GetVertex (triangle.v2);\r\n\t\t\tvar n0 = this.GetNormal (triangle.n0);\r\n\t\t\tvar n1 = this.GetNormal (triangle.n1);\r\n\t\t\tvar n2 = this.GetNormal (triangle.n2);\r\n\t\t\tnormal = JSM.BarycentricInterpolation (v0, v1, v2, n0, n1, n2, normalPosition);\r\n\t\t}\r\n\t\treturn normal;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.NormalCount\r\n\t* Description: Returns the normal vector count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.NormalCount = function ()\r\n\t{\r\n\t\treturn this.normals.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.AddUV\r\n\t* Description: Adds a texture coordinate to the body.\r\n\t* Parameters:\r\n\t*\tx, y {number} the coordinates of the texture coordinate\r\n\t* Returns:\r\n\t*\t{integer} the index of the added texture coordinate\r\n\t*/\r\n\tJSM.TriangleBody.prototype.AddUV = function (x, y)\r\n\t{\r\n\t\tthis.uvs.push (new JSM.Coord2D (x, y));\r\n\t\treturn this.uvs.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.AddDefaultUV\r\n\t* Description:\r\n\t*\tAdds a default texture coordinate to the body.\r\n\t*\tThe default texture coordinate is stored only once.\r\n\t* Returns:\r\n\t*\t{integer} the index of the default texture coordinate\r\n\t*/\r\n\tJSM.TriangleBody.prototype.AddDefaultUV = function ()\r\n\t{\r\n\t\tif (this.defaultUVIndex != -1) {\r\n\t\t\treturn this.defaultUVIndex;\r\n\t\t}\r\n\t\t\r\n\t\tthis.defaultUVIndex = this.AddUV (0.0, 0.0);\r\n\t\treturn this.defaultUVIndex;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetUV\r\n\t* Description: Returns the texture coordinate at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the texture coordinate index\r\n\t* Returns:\r\n\t*\t{Coord2D} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetUV = function (index)\r\n\t{\r\n\t\treturn this.uvs[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.UVCount\r\n\t* Description: Returns the texture coordinate count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.UVCount = function ()\r\n\t{\r\n\t\treturn this.uvs.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.AddTriangle\r\n\t* Description: Adds a triangle to the body.\r\n\t* Parameters:\r\n\t*\tv0, v1, v2 {integer} the vertex indices of the triangle\r\n\t*\tn0, n1, n2 {integer} the normal vector indices of the triangle\r\n\t*\tu0, u1, u2 {integer} the texture coordinate indices of the triangle\r\n\t*\tmat {integer} the material index of the triangle\r\n\t*\tcurve {integer} the curve group index of the triangle\r\n\t* Returns:\r\n\t*\t{integer} the index of the added triangle\r\n\t*/\r\n\tJSM.TriangleBody.prototype.AddTriangle = function (v0, v1, v2, n0, n1, n2, u0, u1, u2, mat, curve)\r\n\t{\r\n\t\tthis.triangles.push ({\r\n\t\t\tv0 : v0,\r\n\t\t\tv1 : v1,\r\n\t\t\tv2 : v2,\r\n\t\t\tn0 : n0,\r\n\t\t\tn1 : n1,\r\n\t\t\tn2 : n2,\r\n\t\t\tu0 : u0,\r\n\t\t\tu1 : u1,\r\n\t\t\tu2 : u2,\r\n\t\t\tmat : mat,\r\n\t\t\tcurve : curve\r\n\t\t});\r\n\t\treturn this.triangles.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetTriangle\r\n\t* Description: Returns the triangle at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the triangle index\r\n\t* Returns:\r\n\t*\t{object} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetTriangle = function (index)\r\n\t{\r\n\t\treturn this.triangles[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.TriangleCount\r\n\t* Description: Returns the triangle count of the body.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.TriangleCount = function ()\r\n\t{\r\n\t\treturn this.triangles.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetBoundingBox\r\n\t* Description: Returns the bounding box of the body.\r\n\t* Returns:\r\n\t*\t{Box} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tcoord = this.vertices[i];\r\n\t\t\tmin.x = JSM.Minimum (min.x, coord.x);\r\n\t\t\tmin.y = JSM.Minimum (min.y, coord.y);\r\n\t\t\tmin.z = JSM.Minimum (min.z, coord.z);\r\n\t\t\tmax.x = JSM.Maximum (max.x, coord.x);\r\n\t\t\tmax.y = JSM.Maximum (max.y, coord.y);\r\n\t\t\tmax.z = JSM.Maximum (max.z, coord.z);\r\n\t\t}\r\n\t\t\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetCenter\r\n\t* Description: Returns the center of the bounding box of the body.\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar boundingBox = this.GetBoundingBox ();\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.GetBoundingSphere\r\n\t* Description: Returns the bounding sphere of the body.\r\n\t* Returns:\r\n\t*\t{Sphere} the result\r\n\t*/\r\n\tJSM.TriangleBody.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ();\r\n\t\tvar radius = 0.0;\r\n\t\t\r\n\t\tvar i, current;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tcurrent = center.DistanceTo (this.vertices[i]);\r\n\t\t\tif (JSM.IsGreater (current, radius)) {\r\n\t\t\t\tradius = current;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar result = new JSM.Sphere (center, radius);\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.Finalize\r\n\t* Description:\r\n\t*\tFinalizes the body. This operation calculates normal vectors\r\n\t*\tand fixes the body if some data is missing from it.\r\n\t* Parameters:\r\n\t*\tmodel {TriangleModel} the triangle index\r\n\t*/\r\n\tJSM.TriangleBody.prototype.Finalize = function (model)\r\n\t{\r\n\t\tfunction FinalizeTriangle (body, triangleIndex, triangleNormals, vertexToTriangles)\r\n\t\t{\r\n\t\t\tfunction AddAverageNormal (body, vertexIndex, triangleIndex, triangleNormals, vertexToTriangles)\r\n\t\t\t{\r\n\t\t\t\tvar averageNormal = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\t\t\tvar averageCount = 0;\r\n\t\t\t\t\r\n\t\t\t\tvar triangle = body.GetTriangle (triangleIndex);\r\n\t\t\t\tvar neighbourTriangles = vertexToTriangles[vertexIndex];\r\n\t\t\t\tvar i, neighbourTriangleIndex, neighbourTriangle;\r\n\t\t\t\tfor (i = 0; i < neighbourTriangles.length; i++) {\r\n\t\t\t\t\tneighbourTriangleIndex = neighbourTriangles[i];\r\n\t\t\t\t\tneighbourTriangle = body.GetTriangle (neighbourTriangleIndex);\r\n\t\t\t\t\tif (triangle.curve == neighbourTriangle.curve) {\r\n\t\t\t\t\t\taverageNormal = JSM.CoordAdd (averageNormal, triangleNormals[neighbourTriangleIndex]);\r\n\t\t\t\t\t\taverageCount = averageCount + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\taverageNormal.MultiplyScalar (1.0 / averageCount);\r\n\t\t\t\taverageNormal.Normalize ();\r\n\t\t\t\treturn body.AddNormal (averageNormal.x, averageNormal.y, averageNormal.z);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar triangle = body.triangles[triangleIndex];\r\n\t\t\tif (triangle.mat === undefined || triangle.mat < 0) {\r\n\t\t\t\ttriangle.mat = model.GetDefaultMaterialIndex ();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar normal, normalIndex;\r\n\t\t\tif (triangle.n0 === undefined || triangle.n1 === undefined || triangle.n2 === undefined) {\r\n\t\t\t\tif (triangle.curve === undefined || triangle.curve < 0) {\r\n\t\t\t\t\tnormal = triangleNormals[triangleIndex];\r\n\t\t\t\t\tnormalIndex = body.AddNormal (normal.x, normal.y, normal.z);\r\n\t\t\t\t\ttriangle.n0 = normalIndex;\r\n\t\t\t\t\ttriangle.n1 = normalIndex;\r\n\t\t\t\t\ttriangle.n2 = normalIndex;\r\n\t\t\t\t\ttriangle.curve = -1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttriangle.n0 = AddAverageNormal (body, triangle.v0, triangleIndex, triangleNormals, vertexToTriangles);\r\n\t\t\t\t\ttriangle.n1 = AddAverageNormal (body, triangle.v1, triangleIndex, triangleNormals, vertexToTriangles);\r\n\t\t\t\t\ttriangle.n2 = AddAverageNormal (body, triangle.v2, triangleIndex, triangleNormals, vertexToTriangles);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (triangle.u0 === undefined || triangle.u1 === undefined || triangle.u2 === undefined) {\r\n\t\t\t\ttriangle.u0 = body.AddDefaultUV ();\r\n\t\t\t\ttriangle.u1 = body.AddDefaultUV ();\r\n\t\t\t\ttriangle.u2 = body.AddDefaultUV ();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar triangleNormals = [];\r\n\t\tvar vertexToTriangles = {};\r\n\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tvertexToTriangles[i] = [];\r\n\t\t}\r\n\t\t\r\n\t\tvar triangle, normal;\r\n\t\tfor (i = 0; i < this.triangles.length; i++) {\r\n\t\t\ttriangle = this.triangles[i];\r\n\t\t\tnormal = JSM.CalculateTriangleNormal (this.vertices[triangle.v0], this.vertices[triangle.v1], this.vertices[triangle.v2]);\r\n\t\t\ttriangleNormals.push (normal);\r\n\t\t\tvertexToTriangles[triangle.v0].push (i);\r\n\t\t\tvertexToTriangles[triangle.v1].push (i);\r\n\t\t\tvertexToTriangles[triangle.v2].push (i);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < this.triangles.length; i++) {\r\n\t\t\tFinalizeTriangle (this, i, triangleNormals, vertexToTriangles);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleBody.Clone\r\n\t* Description: Clones the body.\r\n\t* Returns:\r\n\t*\t{TriangleBody} a cloned instance\r\n\t*/\r\n\tJSM.TriangleBody.prototype.Clone = function ()\r\n\t{\r\n\t\tvar result = new JSM.TriangleBody (this.name);\r\n\t\t\r\n\t\tvar i, triangle;\r\n\t\t\r\n\t\tfor (i = 0; i < this.vertices.length; i++) {\r\n\t\t\tresult.vertices.push (this.vertices[i].Clone ());\r\n\t\t}\r\n\t\t\r\n\t\tfor (i = 0; i < this.normals.length; i++) {\r\n\t\t\tresult.normals.push (this.normals[i].Clone ());\r\n\t\t}\r\n\t\t\r\n\t\tfor (i = 0; i < this.uvs.length; i++) {\r\n\t\t\tresult.uvs.push (this.uvs[i].Clone ());\r\n\t\t}\r\n\t\t\r\n\t\tfor (i = 0; i < this.triangles.length; i++) {\r\n\t\t\ttriangle = this.triangles[i];\r\n\t\t\tresult.triangles.push ({\r\n\t\t\t\tv0 : triangle.v0,\r\n\t\t\t\tv1 : triangle.v1,\r\n\t\t\t\tv2 : triangle.v2,\r\n\t\t\t\tn0 : triangle.n0,\r\n\t\t\t\tn1 : triangle.n1,\r\n\t\t\t\tn2 : triangle.n2,\r\n\t\t\t\tu0 : triangle.u0,\r\n\t\t\t\tu1 : triangle.u1,\r\n\t\t\t\tu2 : triangle.u2,\r\n\t\t\t\tmat : triangle.mat,\r\n\t\t\t\tcurve : triangle.curve\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ConvertTriangleBodyToOctree\r\n\t* Description: Converts a triangle body to triangle octree.\r\n\t* Parameters:\r\n\t*\tbody {TriangleBody} the body\r\n\t* Returns:\r\n\t*\t{TriangleOctree} the result\r\n\t*/\r\n\tJSM.ConvertTriangleBodyToOctree = function (body)\r\n\t{\r\n\t\tvar result = new JSM.TriangleOctree (body.GetBoundingBox ());\r\n\t\tvar i, triangle, v0, v1, v2;\r\n\t\tfor (i = 0; i < body.TriangleCount (); i++) {\r\n\t\t\ttriangle = body.GetTriangle (i);\r\n\t\t\tv0 = body.GetVertex (triangle.v0);\r\n\t\t\tv1 = body.GetVertex (triangle.v1);\r\n\t\t\tv2 = body.GetVertex (triangle.v2);\r\n\t\t\tresult.AddTriangle (v0, v1, v2, {\r\n\t\t\t\ttriangleIndex : i\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/trianglemodel',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: TriangleModel\r\n\t* Description: Represents a 3D model which contains only triangles.\r\n\t*/\r\n\tJSM.TriangleModel = function ()\r\n\t{\r\n\t\tthis.materials = [];\r\n\t\tthis.bodies = [];\r\n\t\tthis.defaultMaterial = -1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.AddMaterial\r\n\t* Description: Adds a material to the model.\r\n\t* Parameters:\r\n\t*\tmaterial {material} the parameters of the material\r\n\t* Returns:\r\n\t*\t{integer} the index of the added material\r\n\t*/\r\n\tJSM.TriangleModel.prototype.AddMaterial = function (material)\r\n\t{\r\n\t\tthis.materials.push (material);\r\n\t\treturn this.materials.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.GetMaterial\r\n\t* Description: Returns the material at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the material index\r\n\t* Returns:\r\n\t*\t{object} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.GetMaterial = function (index)\r\n\t{\r\n\t\treturn this.materials[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.AddDefaultMaterial\r\n\t* Description: Adds a default material to the model. The default material is stored only once.\r\n\t* Returns:\r\n\t*\t{integer} the index of the default material\r\n\t*/\r\n\tJSM.TriangleModel.prototype.AddDefaultMaterial = function ()\r\n\t{\r\n\t\tif (this.defaultMaterial == -1) {\r\n\t\t\tthis.defaultMaterial = this.AddMaterial ({});\r\n\t\t}\r\n\t\treturn this.defaultMaterial;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.GetDefaultMaterialIndex\r\n\t* Description: Adds a default material, and returns the index of it.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.GetDefaultMaterialIndex = function ()\r\n\t{\r\n\t\treturn this.AddDefaultMaterial ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.MaterialCount\r\n\t* Description: Returns the material count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.MaterialCount = function ()\r\n\t{\r\n\t\treturn this.materials.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.AddBody\r\n\t* Description: Adds a body to the model.\r\n\t* Parameters:\r\n\t*\tbody {TriangleBody} the body\r\n\t* Returns:\r\n\t*\t{integer} the index of the added body\r\n\t*/\r\n\tJSM.TriangleModel.prototype.AddBody = function (body)\r\n\t{\r\n\t\tthis.bodies.push (body);\r\n\t\treturn this.bodies.length - 1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.AddBodyToIndex\r\n\t* Description: Adds a body to the model to the given index.\r\n\t* Parameters:\r\n\t*\tbody {TriangleBody} the body\r\n\t*\tindex {integer} the index\r\n\t* Returns:\r\n\t*\t{integer} the index of the added body\r\n\t*/\r\n\tJSM.TriangleModel.prototype.AddBodyToIndex = function (body, index)\r\n\t{\r\n\t\tthis.bodies.splice (index, 0, body);\r\n\t\treturn index;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.GetBody\r\n\t* Description: Returns the body at the given index.\r\n\t* Parameters:\r\n\t*\tindex {integer} the body index\r\n\t* Returns:\r\n\t*\t{TriangleBody} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.GetBody = function (index)\r\n\t{\r\n\t\treturn this.bodies[index];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.VertexCount\r\n\t* Description: Returns the vertex count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.VertexCount = function ()\r\n\t{\r\n\t\tvar result = 0;\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tbody = this.bodies[i];\r\n\t\t\tresult += body.VertexCount ();\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.TriangleCount\r\n\t* Description: Returns the triangle count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.TriangleCount = function ()\r\n\t{\r\n\t\tvar result = 0;\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tbody = this.bodies[i];\r\n\t\t\tresult += body.TriangleCount ();\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.BodyCount\r\n\t* Description: Returns the body count of the model.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.TriangleModel.prototype.BodyCount = function ()\r\n\t{\r\n\t\treturn this.bodies.length;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.FinalizeMaterials\r\n\t* Description:\r\n\t*\tFinalizes the materials in the model. This fill every not\r\n\t*\tspecified material parameter with default values.\r\n\t*/\r\n\tJSM.TriangleModel.prototype.FinalizeMaterials = function ()\r\n\t{\r\n\t\tvar defaultMaterialData = {\r\n\t\t\tname : 'Default',\r\n\t\t\tambient : [0.5, 0.5, 0.5],\r\n\t\t\tdiffuse : [0.5, 0.5, 0.5],\r\n\t\t\tspecular : [0.1, 0.1, 0.1],\r\n\t\t\tshininess : 0.0,\r\n\t\t\topacity : 1.0,\r\n\t\t\treflection : 0.0,\r\n\t\t\ttexture : null,\r\n\t\t\toffset : null,\r\n\t\t\tscale : null,\r\n\t\t\trotation : null\r\n\t\t};\r\n\t\t\r\n\t\tvar i, material;\r\n\t\tfor (i = 0; i < this.materials.length; i++) {\r\n\t\t\tmaterial = this.materials[i];\r\n\t\t\tJSM.CopyObjectProperties (defaultMaterialData, material, false);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.FinalizeBodies\r\n\t* Description: Finalizes all body in the model.\r\n\t*/\r\n\tJSM.TriangleModel.prototype.FinalizeBodies = function ()\r\n\t{\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tbody = this.bodies[i];\r\n\t\t\tbody.Finalize (this);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: TriangleModel.Finalize\r\n\t* Description: Finalizes the model. It finalizes materials and bodies.\r\n\t*/\r\n\tJSM.TriangleModel.prototype.Finalize = function ()\r\n\t{\r\n\t\tthis.FinalizeBodies ();\r\n\t\tthis.FinalizeMaterials ();\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/converter',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: ConvertBodyToTriangleBody\r\n\t* Description: Converts a body to triangle body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{TriangleBody} the result\r\n\t*/\r\n\tJSM.ConvertBodyToTriangleBody = function (body)\r\n\t{\r\n\t\tfunction AddTriangle (result, polygon, v0, v1, v2)\r\n\t\t{\r\n\t\t\tvar triangleIndex = result.AddTriangle (v0, v1, v2);\r\n\t\t\tvar triangle = result.GetTriangle (triangleIndex);\r\n\t\t\tif (polygon.HasMaterialIndex ()) {\r\n\t\t\t\ttriangle.mat = polygon.GetMaterialIndex ();\r\n\t\t\t}\r\n\t\t\tif (polygon.HasCurveGroup ()) {\r\n\t\t\t\ttriangle.curve = polygon.GetCurveGroup ();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar result = new JSM.TriangleBody ();\r\n\t\t\r\n\t\tvar i, j, vertex;\r\n\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\tvertex = body.GetVertexPosition (i);\r\n\t\t\tresult.AddVertex (vertex.x, vertex.y, vertex.z);\r\n\t\t}\r\n\t\t\r\n\t\tvar polygon, vertexCount;\r\n\t\tvar polygon3D, normal, triangle, triangles;\r\n\t\tvar v0, v1, v2;\r\n\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\tvertexCount = polygon.VertexIndexCount ();\r\n\t\t\tif (vertexCount < 3) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (vertexCount == 3) {\r\n\t\t\t\tv0 = polygon.GetVertexIndex (0);\r\n\t\t\t\tv1 = polygon.GetVertexIndex (1);\r\n\t\t\t\tv2 = polygon.GetVertexIndex (2);\r\n\t\t\t\tAddTriangle (result, polygon, v0, v1, v2);\r\n\t\t\t} else {\r\n\t\t\t\tpolygon3D = new JSM.Polygon ();\r\n\t\t\t\tfor (j = 0; j < vertexCount; j++) {\r\n\t\t\t\t\tvertex = body.GetVertexPosition (polygon.GetVertexIndex (j));\r\n\t\t\t\t\tpolygon3D.AddVertex (vertex.x, vertex.y, vertex.z);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tnormal = JSM.CalculateBodyPolygonNormal (body, i);\r\n\t\t\t\ttriangles = JSM.TriangulatePolygon (polygon3D, normal);\r\n\t\t\t\tif (triangles !== null) {\r\n\t\t\t\t\tfor (j = 0; j < triangles.length; j++) {\r\n\t\t\t\t\t\ttriangle = triangles[j];\r\n\t\t\t\t\t\tv0 = polygon.GetVertexIndex (triangle[0]);\r\n\t\t\t\t\t\tv1 = polygon.GetVertexIndex (triangle[1]);\r\n\t\t\t\t\t\tv2 = polygon.GetVertexIndex (triangle[2]);\r\n\t\t\t\t\t\tAddTriangle (result, polygon, v0, v1, v2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ConvertModelToTriangleModel\r\n\t* Description: Converts a model to triangle model.\r\n\t* Parameters:\r\n\t*\tmodel {Model} the model\r\n\t* Returns:\r\n\t*\t{TriangleModel} the result\r\n\t*/\r\n\tJSM.ConvertModelToTriangleModel = function (model)\r\n\t{\r\n\t\tvar result = new JSM.TriangleModel ();\r\n\t\tvar materials = model.GetMaterialSet ();\r\n\t\tvar i, material;\r\n\t\tfor (i = 0; i < materials.Count (); i++) {\r\n\t\t\tmaterial = materials.GetMaterial (i);\r\n\t\t\tresult.AddMaterial ({\r\n\t\t\t\tname : 'Material' + i,\r\n\t\t\t\tambient : JSM.HexColorToNormalizedRGBComponents (material.ambient),\r\n\t\t\t\tdiffuse : JSM.HexColorToNormalizedRGBComponents (material.diffuse),\r\n\t\t\t\tspecular : JSM.HexColorToNormalizedRGBComponents (material.specular),\r\n\t\t\t\tshininess : material.shininess,\r\n\t\t\t\topacity : material.opacity,\r\n\t\t\t\treflection : material.reflection\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tvar body, triangleBody;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\ttriangleBody = JSM.ConvertBodyToTriangleBody (body);\r\n\t\t\tresult.AddBody (triangleBody);\r\n\t\t}\r\n\t\tresult.Finalize ();\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: ConvertTriangleModelToJsonData\r\n\t* Description: Converts a triangle model to json data.\r\n\t* Parameters:\r\n\t*\tmodel {TriangleModel} the model\r\n\t* Returns:\r\n\t*\t{object} the result data\r\n\t*/\r\n\tJSM.ConvertTriangleModelToJsonData = function (model)\r\n\t{\r\n\t\tfunction ConvertMaterials (model, materials)\r\n\t\t{\r\n\t\t\tvar i, material, jsonMaterial;\r\n\t\t\tfor (i = 0; i < model.MaterialCount (); i++) {\r\n\t\t\t\tmaterial = model.GetMaterial (i);\r\n\t\t\t\tjsonMaterial = {\r\n\t\t\t\t\tname : JSM.ValueOrDefault (material.name, ''),\r\n\t\t\t\t\tambient : material.ambient,\r\n\t\t\t\t\tdiffuse : material.diffuse,\r\n\t\t\t\t\tspecular : material.specular,\r\n\t\t\t\t\tshininess : material.shininess,\r\n\t\t\t\t\topacity : material.opacity\r\n\t\t\t\t};\r\n\t\t\t\tif (material.texture !== undefined && material.texture !== null) {\r\n\t\t\t\t\tjsonMaterial.texture = JSM.ValueOrDefault (material.texture, null);\r\n\t\t\t\t\tjsonMaterial.offset = material.offset;\r\n\t\t\t\t\tjsonMaterial.scale = material.scale;\r\n\t\t\t\t\tjsonMaterial.rotation = material.rotation;\r\n\t\t\t\t}\r\n\t\t\t\tmaterials.push (jsonMaterial);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction ConvertBody (model, body, mesh)\r\n\t\t{\r\n\t\t\tvar trianglesByMaterial = [];\r\n\t\t\tvar materialCount = model.MaterialCount ();\r\n\t\t\t\r\n\t\t\tvar i, j, coord;\r\n\t\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\t\tcoord = body.GetVertex (i);\r\n\t\t\t\tmesh.vertices.push (coord.x, coord.y, coord.z);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (i = 0; i < body.NormalCount (); i++) {\r\n\t\t\t\tcoord = body.GetNormal (i);\r\n\t\t\t\tmesh.normals.push (coord.x, coord.y, coord.z);\r\n\t\t\t}\r\n\r\n\t\t\tfor (i = 0; i < body.UVCount (); i++) {\r\n\t\t\t\tcoord = body.GetUV (i);\r\n\t\t\t\tmesh.uvs.push (coord.x, coord.y);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (i = 0; i < materialCount; i++) {\r\n\t\t\t\ttrianglesByMaterial.push ([]);\r\n\t\t\t}\r\n\r\n\t\t\tvar triangle;\r\n\t\t\tfor (i = 0; i < body.TriangleCount (); i++) {\r\n\t\t\t\ttriangle = body.GetTriangle (i);\r\n\t\t\t\tif (triangle.mat === undefined || triangle.mat < 0 || triangle.mat >= materialCount) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\ttrianglesByMaterial[triangle.mat].push (i);\r\n\t\t\t}\r\n\r\n\t\t\tvar triangleCount = 0;\r\n\t\t\tvar triangles, jsonTriangles;\r\n\t\t\tfor (i = 0; i < trianglesByMaterial.length; i++) {\r\n\t\t\t\ttriangles = trianglesByMaterial[i];\r\n\t\t\t\tif (triangles.length === 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tjsonTriangles =  {\r\n\t\t\t\t\tmaterial : i,\r\n\t\t\t\t\tparameters : []\r\n\t\t\t\t};\r\n\t\t\t\tfor (j = 0; j < triangles.length; j++) {\r\n\t\t\t\t\ttriangle = body.GetTriangle (triangles[j]);\r\n\t\t\t\t\tjsonTriangles.parameters.push (\r\n\t\t\t\t\t\ttriangle.v0, triangle.v1, triangle.v2,\r\n\t\t\t\t\t\ttriangle.n0, triangle.n1, triangle.n2,\r\n\t\t\t\t\t\ttriangle.u0, triangle.u1, triangle.u2\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\ttriangleCount = triangleCount + triangles.length;\r\n\t\t\t\tmesh.triangles.push (jsonTriangles);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar result = {\r\n\t\t\tversion : 1,\r\n\t\t\tmaterials : [],\r\n\t\t\tmeshes : []\r\n\t\t};\r\n\t\t\r\n\t\tConvertMaterials (model, result.materials);\r\n\t\t\r\n\t\tvar i, body, mesh;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\tif (body.TriangleCount () === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tmesh = {\r\n\t\t\t\tname : body.GetName (),\r\n\t\t\t\tvertices : [],\r\n\t\t\t\tnormals : [],\r\n\t\t\t\tuvs : [],\r\n\t\t\t\ttriangles : []\r\n\t\t\t};\r\n\t\t\tConvertBody (model, body, mesh);\r\n\t\t\tresult.meshes.push (mesh);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: MergeJsonDataMeshes\r\n\t* Description: Merges meshes in json data.\r\n\t* Parameters:\r\n\t*\tjsonData {object} the original data\r\n\t* Returns:\r\n\t*\t{object} the result data\r\n\t*/\r\n\tJSM.MergeJsonDataMeshes = function (jsonData)\r\n\t{\r\n\t\tfunction MergeMesh (mesh, currentMesh, materialToTriangles)\r\n\t\t{\r\n\t\t\tfunction MergeAttributes (mesh, currentMesh)\r\n\t\t\t{\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < currentMesh.vertices.length; i++) {\r\n\t\t\t\t\tmesh.vertices.push (currentMesh.vertices[i]);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < currentMesh.normals.length; i++) {\r\n\t\t\t\t\tmesh.normals.push (currentMesh.normals[i]);\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < currentMesh.uvs.length; i++) {\r\n\t\t\t\t\tmesh.uvs.push (currentMesh.uvs[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfunction MergeTriangles (mesh, currentTriangles, materialToTriangles, vertexOffset, normalOffset, uvOffset)\r\n\t\t\t{\r\n\t\t\t\tvar material = currentTriangles.material;\r\n\t\t\t\tvar trianglesIndex = materialToTriangles[material];\r\n\t\t\t\tif (trianglesIndex === undefined) {\r\n\t\t\t\t\tmesh.triangles.push ({\r\n\t\t\t\t\t\tmaterial : material,\r\n\t\t\t\t\t\tparameters : []\r\n\t\t\t\t\t});\r\n\t\t\t\t\ttrianglesIndex = mesh.triangles.length - 1;\r\n\t\t\t\t\tmaterialToTriangles[material] = trianglesIndex;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar triangles = mesh.triangles[trianglesIndex];\r\n\t\t\t\tvar triangleParameters = triangles.parameters;\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < currentTriangles.parameters.length; i = i + 9) {\r\n\t\t\t\t\ttriangleParameters.push (\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i] + vertexOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 1] + vertexOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 2] + vertexOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 3] + normalOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 4] + normalOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 5] + normalOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 6] + uvOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 7] + uvOffset,\r\n\t\t\t\t\t\tcurrentTriangles.parameters[i + 8] + uvOffset\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar vertexOffset = mesh.vertices.length / 3;\r\n\t\t\tvar normalOffset = mesh.normals.length / 3;\r\n\t\t\tvar uvOffset = mesh.uvs.length / 2;\r\n\t\t\tMergeAttributes (mesh, currentMesh);\r\n\r\n\t\t\tvar i, currentTriangles;\r\n\t\t\tfor (i = 0; i < currentMesh.triangles.length; i++) {\r\n\t\t\t\tcurrentTriangles = currentMesh.triangles[i];\r\n\t\t\t\tMergeTriangles (mesh, currentTriangles, materialToTriangles, vertexOffset, normalOffset, uvOffset);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar result = {\r\n\t\t\tversion : jsonData.version,\r\n\t\t\tmaterials : jsonData.materials,\r\n\t\t\tmeshes : []\r\n\t\t};\r\n\t\t\r\n\t\tvar mesh = {\r\n\t\t\tname : 'Merged',\r\n\t\t\tvertices : [],\r\n\t\t\tnormals : [],\r\n\t\t\tuvs : [],\r\n\t\t\ttriangles : []\r\n\t\t};\r\n\t\t\r\n\t\tvar materialToTriangles = {};\r\n\t\tvar i, currentMesh;\r\n\t\tfor (i = 0; i < jsonData.meshes.length; i++) {\r\n\t\t\tcurrentMesh = jsonData.meshes[i];\r\n\t\t\tMergeMesh (mesh, currentMesh, materialToTriangles);\r\n\t\t}\r\n\t\t\r\n\t\tresult.meshes.push (mesh);\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/modeler/rayutils',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: RayTriangleIntersection\r\n\t* Description: Calculates intersection between a ray and a triangle.\r\n\t* Parameters:\r\n\t*\tray {Ray} the ray\r\n\t*\tv0, v1, v2 {Coord} the vertices of the triangle\r\n\t* Returns:\r\n\t*\t{object} the result data (position, distance) if intersection found, null otherwise\r\n\t*/\r\n\tJSM.RayTriangleIntersection = function (ray, v0, v1, v2)\r\n\t{\r\n\t\tvar rayOrigin = ray.GetOrigin ();\r\n\t\tvar rayDirection = ray.GetDirection ();\r\n\r\n\t\tvar edgeDir1 = JSM.CoordSub (v1, v0);\r\n\t\tvar edgeDir2 = JSM.CoordSub (v2, v0);\r\n\t\tvar pVector = JSM.VectorCross (rayDirection, edgeDir2);\r\n\r\n\t\tvar determinant = JSM.VectorDot (edgeDir1, pVector);\r\n\t\tif (JSM.IsZero (determinant)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tvar isFrontFacing = JSM.IsPositive (determinant);\r\n\t\tif (!isFrontFacing) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar invDeterminant = 1.0 / determinant;\r\n\r\n\t\tvar tVector = JSM.CoordSub (rayOrigin, v0);\r\n\t\tvar u = JSM.VectorDot (tVector, pVector) * invDeterminant;\r\n\t\tif (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar qVector = JSM.VectorCross (tVector, edgeDir1);\r\n\t\tvar v = JSM.VectorDot (rayDirection, qVector) * invDeterminant;\r\n\t\tif (JSM.IsLower (v, 0.0) || JSM.IsGreater (u + v, 1.0)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t \r\n\t\tvar distance = JSM.VectorDot (edgeDir2, qVector) * invDeterminant;\r\n\t\tif (!JSM.IsPositive (distance)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (ray.IsLengthReached (distance)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tvar scaledDirection = rayDirection.Clone ().MultiplyScalar (distance);\r\n\t\tvar intersection = {\r\n\t\t\tposition : JSM.CoordAdd (rayOrigin, scaledDirection),\r\n\t\t\tdistance : distance\r\n\t\t};\r\n\t\treturn intersection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RayBoxIntersection\r\n\t* Description: Calculates intersection between a ray and a box.\r\n\t* Parameters:\r\n\t*\tray {Ray} the ray\r\n\t*\tmin, max {Coord} the minimum and maximum points of the box\r\n\t* Returns:\r\n\t*\t{object} the result data (position, distance) if intersection found, null otherwise\r\n\t*/\r\n\tJSM.RayBoxIntersection = function (ray, min, max)\r\n\t{\r\n\t\tvar rayOriginVec = ray.GetOrigin ();\r\n\t\tvar rayDirectionVec = ray.GetDirection ();\r\n\r\n\t\tvar rayOrigin = JSM.CoordToArray (rayOriginVec);\r\n\t\tvar rayDirection = JSM.CoordToArray (rayDirectionVec);\r\n\t\tvar minB = JSM.CoordToArray (min);\r\n\t\tvar maxB = JSM.CoordToArray (max);\r\n\t\tvar quadrant = [0, 0, 0];\r\n\t\tvar candidatePlane = [0.0, 0.0, 0.0];\r\n\r\n\t\tvar originInBox = true;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\tif (JSM.IsLower (rayOrigin[i], minB[i])) {\r\n\t\t\t\tquadrant[i] = -1; // left\r\n\t\t\t\tcandidatePlane[i] = minB[i];\r\n\t\t\t\toriginInBox = false;\r\n\t\t\t} else if (JSM.IsGreater (rayOrigin[i], maxB[i])) {\r\n\t\t\t\tquadrant[i] = 1; // right\r\n\t\t\t\tcandidatePlane[i] = maxB[i];\r\n\t\t\t\toriginInBox = false;\r\n\t\t\t} else {\r\n\t\t\t\tquadrant[i] = 0; // middle\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar intersection = null;\r\n\t\tif (originInBox) {\r\n\t\t\tintersection = {\r\n\t\t\t\tposition : rayOriginVec,\r\n\t\t\t\tdistance : 0.0\r\n\t\t\t};\r\n\t\t\treturn intersection;\r\n\t\t}\r\n\r\n\t\tvar maxT = [0.0, 0.0, 0.0];\r\n\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\tif (quadrant[i] !== 0 && !JSM.IsZero (rayDirection[i])) {\r\n\t\t\t\tmaxT[i] = (candidatePlane[i] - rayOrigin[i]) / rayDirection[i];\r\n\t\t\t} else {\r\n\t\t\t\tmaxT[i] = -1.0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar whichPlane = 0;\r\n\t\tfor (i = 1; i < 3; i++) {\r\n\t\t\tif (JSM.IsLower (maxT[whichPlane], maxT[i])) {\r\n\t\t\t\twhichPlane = i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (JSM.IsNegative (maxT[whichPlane])) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar xCoord = [0.0, 0.0, 0.0];\r\n\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\tif (whichPlane != i) {\r\n\t\t\t\txCoord[i] = rayOrigin[i] + maxT[whichPlane] * rayDirection[i];\r\n\t\t\t\tif (JSM.IsLower (xCoord[i], minB[i]) || JSM.IsGreater (xCoord[i], maxB[i])) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\txCoord[i] = candidatePlane[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar intersectionCoord = JSM.CoordFromArray (xCoord);\r\n\t\tvar distance = rayOriginVec.DistanceTo (intersectionCoord);\r\n\t\tif (ray.IsLengthReached (distance)) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tintersection = {\r\n\t\t\tposition : intersectionCoord,\r\n\t\t\tdistance : distance\r\n\t\t};\r\n\t\treturn intersection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RayOctreeIntersection\r\n\t* Description: Calculates the nearest intersection between a ray and an octree.\r\n\t* Parameters:\r\n\t*\tray {Ray} the ray\r\n\t*\toctree {Octree} the octree\r\n\t*\tintersection {object} the result data (position, distance, userData)\r\n\t* Returns:\r\n\t*\t{boolean} true if found intersection, false otherwise\r\n\t*/\r\n\tJSM.RayOctreeIntersection = function (ray, octree, intersection)\r\n\t{\r\n\t\tvar minIntersection = null;\r\n\t\tvar foundIntersection = false;\r\n\t\tvar calcMinIntersection = (intersection !== null && intersection !== undefined);\r\n\r\n\t\tJSM.TraverseOctreeNodes (octree, function (node) {\r\n\t\t\tif (!calcMinIntersection && foundIntersection) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!JSM.RayBoxIntersection (ray, node.box.min, node.box.max)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < node.triangles.length; i++) {\r\n\t\t\t\tvar triangle = node.triangles[i];\r\n\t\t\t\tvar v0 = triangle.v0;\r\n\t\t\t\tvar v1 = triangle.v1;\r\n\t\t\t\tvar v2 = triangle.v2;\r\n\t\t\t\tvar currentIntersection = JSM.RayTriangleIntersection (ray, v0, v1, v2);\r\n\t\t\t\tif (currentIntersection !== null) {\r\n\t\t\t\t\tfoundIntersection = true;\r\n\t\t\t\t\tif (!calcMinIntersection) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (minIntersection === null || currentIntersection.distance < minIntersection.distance) {\r\n\t\t\t\t\t\tminIntersection = currentIntersection;\r\n\t\t\t\t\t\tminIntersection.userData = triangle.userData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\t\r\n\r\n\t\tif (calcMinIntersection && minIntersection !== null) {\r\n\t\t\tintersection.position = minIntersection.position;\r\n\t\t\tintersection.distance = minIntersection.distance;\r\n\t\t\tintersection.userData = minIntersection.userData;\r\n\t\t}\r\n\t\treturn foundIntersection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RayTriangleBodyIntersection\r\n\t* Description: Calculates the nearest intersection between a ray and a triangle body.\r\n\t* Parameters:\r\n\t*\tray {Ray} the ray\r\n\t*\tbody {TriangleBody} the triangle body\r\n\t*\tintersection {object} the result data (position, distance, triangleIndex)\r\n\t* Returns:\r\n\t*\t{boolean} true if found intersection, false otherwise\r\n\t*/\r\n\tJSM.RayTriangleBodyIntersection = function (ray, body, intersection)\r\n\t{\r\n\t\tvar minIntersection = null;\r\n\t\tvar foundIntersection = false;\r\n\t\tvar calcMinIntersection = (intersection !== null && intersection !== undefined);\r\n\t\t\r\n\t\tvar i, triangle, v0, v1, v2, currentIntersection;\r\n\t\tfor (i = 0; i < body.TriangleCount (); i++) {\r\n\t\t\ttriangle = body.GetTriangle (i);\r\n\t\t\tv0 = body.GetVertex (triangle.v0);\r\n\t\t\tv1 = body.GetVertex (triangle.v1);\r\n\t\t\tv2 = body.GetVertex (triangle.v2);\r\n\t\t\tcurrentIntersection = JSM.RayTriangleIntersection (ray, v0, v1, v2);\r\n\t\t\tif (currentIntersection !== null) {\r\n\t\t\t\tfoundIntersection = true;\r\n\t\t\t\tif (!calcMinIntersection) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (minIntersection === null || currentIntersection.distance < minIntersection.distance) {\r\n\t\t\t\t\tminIntersection = currentIntersection;\r\n\t\t\t\t\tminIntersection.triangleIndex = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (calcMinIntersection && minIntersection !== null) {\r\n\t\t\tintersection.position = minIntersection.position;\r\n\t\t\tintersection.distance = minIntersection.distance;\r\n\t\t\tintersection.triangleIndex = minIntersection.triangleIndex;\r\n\t\t}\r\n\t\treturn foundIntersection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RayTriangleModelIntersection\r\n\t* Description: Calculates the nearest intersection between a ray and a triangle model.\r\n\t* Parameters:\r\n\t*\tray {Ray} the ray\r\n\t*\tmodel {TriangleModel} the triangle model\r\n\t*\tintersection {object} the result data (position, distance, triangleIndex, bodyIndex)\r\n\t* Returns:\r\n\t*\t{boolean} true if found intersection, false otherwise\r\n\t*/\r\n\tJSM.RayTriangleModelIntersection = function (ray, model, intersection)\r\n\t{\r\n\t\tvar minIntersection = null;\r\n\t\tvar foundIntersection = false;\r\n\t\tvar calcMinIntersection = (intersection !== null && intersection !== undefined);\r\n\t\tvar i, body, currentIntersection;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\tcurrentIntersection = calcMinIntersection ? {} : null;\r\n\t\t\tif (JSM.RayTriangleBodyIntersection (ray, body, currentIntersection)) {\r\n\t\t\t\tfoundIntersection = true;\r\n\t\t\t\tif (!calcMinIntersection) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (minIntersection === null || currentIntersection.distance < minIntersection.distance) {\r\n\t\t\t\t\tminIntersection = currentIntersection;\r\n\t\t\t\t\tminIntersection.bodyIndex = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (calcMinIntersection && minIntersection !== null) {\r\n\t\t\tintersection.position = minIntersection.position;\r\n\t\t\tintersection.distance = minIntersection.distance;\r\n\t\t\tintersection.triangleIndex = minIntersection.triangleIndex;\r\n\t\t\tintersection.bodyIndex = minIntersection.bodyIndex;\r\n\t\t}\t\r\n\t\treturn foundIntersection;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: RayTriangleModelIntersectionWithOctree\r\n\t* Description:\r\n\t*\tCalculates the nearest intersection between a ray and a triangle model.\r\n\t*\tCaches the octrees for all bodies in the model.\r\n\t* Parameters:\r\n\t*\tray {Ray} the ray\r\n\t*\tmodel {TriangleModel} the triangle model\r\n\t*\tintersection {object} the result data (position, distance, triangleIndex, bodyIndex)\r\n\t* Returns:\r\n\t*\t{boolean} true if found intersection, false otherwise\r\n\t*/\r\n\tJSM.RayTriangleModelIntersectionWithOctree = function (ray, model, intersection)\r\n\t{\r\n\t\tvar minIntersection = null;\r\n\t\tvar foundIntersection = false;\r\n\t\tvar calcMinIntersection = (intersection !== null && intersection !== undefined);\r\n\t\tvar i, body, hasIntersection, currentIntersection;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\thasIntersection = false;\r\n\t\t\tcurrentIntersection = calcMinIntersection ? {} : null;\r\n\t\t\tif (body.TriangleCount () > 20) {\r\n\t\t\t\tif (body.octree === undefined) {\r\n\t\t\t\t\tbody.octree = JSM.ConvertTriangleBodyToOctree (body);\r\n\t\t\t\t}\r\n\t\t\t\thasIntersection = JSM.RayOctreeIntersection (ray, body.octree, currentIntersection);\r\n\t\t\t} else {\r\n\t\t\t\thasIntersection = JSM.RayTriangleBodyIntersection (ray, body, currentIntersection);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (hasIntersection) {\r\n\t\t\t\tfoundIntersection = true;\r\n\t\t\t\tif (!calcMinIntersection) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (minIntersection === null || currentIntersection.distance < minIntersection.distance) {\r\n\t\t\t\t\tminIntersection = currentIntersection;\r\n\t\t\t\t\tif (currentIntersection.userData !== undefined) {\r\n\t\t\t\t\t\tminIntersection.triangleIndex = currentIntersection.userData.triangleIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tminIntersection.bodyIndex = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (calcMinIntersection && minIntersection !== null) {\r\n\t\t\tintersection.position = minIntersection.position;\r\n\t\t\tintersection.distance = minIntersection.distance;\r\n\t\t\tintersection.triangleIndex = minIntersection.triangleIndex;\r\n\t\t\tintersection.bodyIndex = minIntersection.bodyIndex;\r\n\t\t}\t\r\n\t\treturn foundIntersection;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/binaryreader',[\"../core/jsm\"],function(JSM){\r\n\tJSM.BinaryReader = function (arrayBuffer, isLittleEndian)\r\n\t{\r\n\t\tthis.arrayBuffer = arrayBuffer;\r\n\t\tthis.dataView = new DataView (arrayBuffer);\r\n\t\tthis.isLittleEndian = isLittleEndian;\r\n\t\tthis.position = 0;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.GetPosition = function ()\r\n\t{\r\n\t\treturn this.position;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.GetByteLength = function ()\r\n\t{\r\n\t\treturn this.arrayBuffer.byteLength;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.Skip = function (bytes)\r\n\t{\r\n\t\tthis.position = this.position + bytes;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.End = function ()\r\n\t{\r\n\t\treturn this.position >= this.arrayBuffer.byteLength;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadBoolean = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getInt8 (this.position);\r\n\t\tthis.position = this.position + 1;\r\n\t\treturn result ? true : false;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadCharacter = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getInt8 (this.position);\r\n\t\tthis.position = this.position + 1;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadUnsignedCharacter = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getUint8 (this.position);\r\n\t\tthis.position = this.position + 1;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadInteger16 = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getInt16 (this.position, this.isLittleEndian);\r\n\t\tthis.position = this.position + 2;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadUnsignedInteger16 = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getUint16 (this.position, this.isLittleEndian);\r\n\t\tthis.position = this.position + 2;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadInteger32 = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getInt32 (this.position, this.isLittleEndian);\r\n\t\tthis.position = this.position + 4;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadUnsignedInteger32 = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getUint32 (this.position, this.isLittleEndian);\r\n\t\tthis.position = this.position + 4;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadFloat32 = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getFloat32 (this.position, this.isLittleEndian);\r\n\t\tthis.position = this.position + 4;\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.BinaryReader.prototype.ReadDouble64 = function ()\r\n\t{\r\n\t\tvar result = this.dataView.getFloat64 (this.position, this.isLittleEndian);\r\n\t\tthis.position = this.position + 8;\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/importerutils',[\"../core/jsm\"],function(JSM){\r\n\tJSM.GetArrayBufferFromURL = function (url, callbacks)\r\n\t{\r\n\t\tvar request = new XMLHttpRequest ();\r\n\t\trequest.open ('GET', url, true);\r\n\t\trequest.responseType = 'arraybuffer';\r\n\r\n\t\trequest.onload = function () {\r\n\t\t\tvar arrayBuffer = request.response;\r\n\t\t\tif (arrayBuffer && callbacks.onReady) {\r\n\t\t\t\tcallbacks.onReady (arrayBuffer);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\trequest.onerror = function () {\r\n\t\t\tif (callbacks.onError) {\r\n\t\t\t\tcallbacks.onError ();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\trequest.send (null);\r\n\t};\r\n\r\n\tJSM.GetArrayBufferFromFile = function (file, callbacks)\r\n\t{\r\n\t\tvar reader = new FileReader ();\r\n\r\n\t\treader.onloadend = function (event) {\r\n\t\t\tif (event.target.readyState == FileReader.DONE && callbacks.onReady) {\r\n\t\t\t\tcallbacks.onReady (event.target.result);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\treader.onerror = function () {\r\n\t\t\tif (callbacks.onError) {\r\n\t\t\t\tcallbacks.onError ();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treader.readAsArrayBuffer (file);\r\n\t};\r\n\r\n\tJSM.GetStringBufferFromURL = function (url, callbacks)\r\n\t{\r\n\t\tvar request = new XMLHttpRequest ();\r\n\t\trequest.open ('GET', url, true);\r\n\t\trequest.responseType = 'text';\r\n\r\n\t\trequest.onload = function () {\r\n\t\t\tvar stringBuffer = request.response;\r\n\t\t\tif (stringBuffer && callbacks.onReady) {\r\n\t\t\t\tcallbacks.onReady (stringBuffer);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\trequest.onerror = function () {\r\n\t\t\tif (callbacks.onError) {\r\n\t\t\t\tcallbacks.onError ();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\trequest.send (null);\r\n\t};\r\n\r\n\tJSM.GetStringBufferFromFile = function (file, callbacks)\r\n\t{\r\n\t\tvar reader = new FileReader ();\r\n\r\n\t\treader.onloadend = function (event) {\r\n\t\t\tif (event.target.readyState == FileReader.DONE && callbacks.onReady) {\r\n\t\t\t\tcallbacks.onReady (event.target.result);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\treader.onerror = function () {\r\n\t\t\tif (callbacks.onError) {\r\n\t\t\t\tcallbacks.onError ();\r\n\t\t\t}\r\n\t\t};\t\r\n\t\t\r\n\t\treader.readAsText (file);\r\n\t};\r\n\r\n\tJSM.LoadMultipleBuffers = function (inputList, onReady)\r\n\t{\r\n\t\tfunction LoadMultipleBuffersInternal (inputList, index, result, onReady)\r\n\t\t{\r\n\t\t\tif (index >= inputList.length) {\r\n\t\t\t\tonReady (result);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar currentInput = inputList[index];\r\n\t\t\tvar loaderFunction = null;\r\n\t\t\tif (currentInput.isFile) {\r\n\t\t\t\tif (currentInput.isArrayBuffer) {\r\n\t\t\t\t\tloaderFunction = JSM.GetArrayBufferFromFile;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloaderFunction = JSM.GetStringBufferFromFile;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (currentInput.isArrayBuffer) {\r\n\t\t\t\t\tloaderFunction = JSM.GetArrayBufferFromURL;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tloaderFunction = JSM.GetStringBufferFromURL;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tloaderFunction (currentInput.originalObject, {\r\n\t\t\t\tonReady : function (resultBuffer) {\r\n\t\t\t\t\tresult.push (resultBuffer);\r\n\t\t\t\t\tLoadMultipleBuffersInternal (inputList, index + 1, result, onReady);\r\n\t\t\t\t},\r\n\t\t\t\tonError : function () {\r\n\t\t\t\t\tresult.push (null);\r\n\t\t\t\t\tLoadMultipleBuffersInternal (inputList, index + 1, result, onReady);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tvar result = [];\r\n\t\tLoadMultipleBuffersInternal (inputList, 0, result, function (result) {\r\n\t\t\tonReady (result);\r\n\t\t});\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/importer3ds',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Read3dsFile = function (arrayBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnLog (logText, logLevel)\r\n\t\t{\r\n\t\t\tif (callbacks.onLog !== undefined && callbacks.onLog !== null) {\r\n\t\t\t\tcallbacks.onLog (logText, logLevel);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnMaterial (material)\r\n\t\t{\r\n\t\t\tif (callbacks.onMaterial !== undefined && callbacks.onMaterial !== null) {\r\n\t\t\t\tcallbacks.onMaterial (material);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnMesh (objectName)\r\n\t\t{\r\n\t\t\tif (callbacks.onMesh !== undefined && callbacks.onMesh !== null) {\r\n\t\t\t\tcallbacks.onMesh (objectName);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnTransformation (matrix)\r\n\t\t{\r\n\t\t\tif (callbacks.onTransformation !== undefined && callbacks.onTransformation !== null) {\r\n\t\t\t\tcallbacks.onTransformation (matrix);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction OnObjectNode (objectNode)\r\n\t\t{\r\n\t\t\tif (callbacks.onObjectNode !== undefined && callbacks.onObjectNode !== null) {\r\n\t\t\t\tcallbacks.onObjectNode (objectNode);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnVertex (x, y, z)\r\n\t\t{\r\n\t\t\tif (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {\r\n\t\t\t\tcallbacks.onVertex (x, y, z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnTextureVertex (x, y)\r\n\t\t{\r\n\t\t\tif (callbacks.onTextureVertex !== undefined && callbacks.onTextureVertex !== null) {\r\n\t\t\t\tcallbacks.onTextureVertex (x, y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnFace (v0, v1, v2, flags)\r\n\t\t{\r\n\t\t\tif (callbacks.onFace !== undefined && callbacks.onFace !== null) {\r\n\t\t\t\tcallbacks.onFace (v0, v1, v2, flags);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnFaceMaterial (faceIndex, materialName)\r\n\t\t{\r\n\t\t\tif (callbacks.onFaceMaterial !== undefined && callbacks.onFaceMaterial !== null) {\r\n\t\t\t\tcallbacks.onFaceMaterial (faceIndex, materialName);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnFaceSmoothingGroup (faceIndex, smoothingGroup)\r\n\t\t{\r\n\t\t\tif (callbacks.onFaceSmoothingGroup !== undefined && callbacks.onFaceSmoothingGroup !== null) {\r\n\t\t\t\tcallbacks.onFaceSmoothingGroup (faceIndex, smoothingGroup);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction ReadChunk (reader, onReady)\r\n\t\t{\r\n\t\t\tvar chunkId = reader.ReadUnsignedInteger16 ();\r\n\t\t\tvar chunkLength = reader.ReadUnsignedInteger32 ();\r\n\t\t\tonReady (chunkId, chunkLength);\r\n\t\t}\r\n\t\t\r\n\t\tfunction SkipChunk (reader, length)\r\n\t\t{\r\n\t\t\treader.Skip (length - 6);\r\n\t\t}\r\n\t\t\r\n\t\tfunction GetChunkEnd (reader, length)\r\n\t\t{\r\n\t\t\treturn reader.GetPosition () + length - 6;\r\n\t\t}\r\n\t\t\r\n\t\tfunction ReadName (reader)\r\n\t\t{\r\n\t\t\tvar name = '';\r\n\t\t\tvar letter = 0;\r\n\t\t\tvar count = 0;\r\n\t\t\twhile (count < 64) {\r\n\t\t\t\tletter = reader.ReadCharacter ();\r\n\t\t\t\tif (letter === 0) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tname = name + String.fromCharCode (letter);\r\n\t\t\t\tcount = count + 1;\r\n\t\t\t}\r\n\t\t\treturn name;\r\n\t\t}\r\n\r\n\t\tfunction ReadVector (reader)\r\n\t\t{\r\n\t\t\tvar result = [];\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\t\tresult[i] = reader.ReadFloat32 ();\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tfunction ReadChunks (reader, endByte, onReady)\r\n\t\t{\r\n\t\t\twhile (reader.GetPosition () <= endByte - 6) {\r\n\t\t\t\tReadChunk (reader, onReady);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction ReadFile (reader, chunks)\r\n\t\t{\r\n\t\t\tfunction ReadColorChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tvar color = [0.0, 0.0, 0.0];\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tvar hasLinColor = false;\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.MAT_COLOR) {\r\n\t\t\t\t\t\tif (!hasLinColor) {\r\n\t\t\t\t\t\t\tcolor[0] = reader.ReadUnsignedCharacter () / 255.0;\r\n\t\t\t\t\t\t\tcolor[1] = reader.ReadUnsignedCharacter () / 255.0;\r\n\t\t\t\t\t\t\tcolor[2] = reader.ReadUnsignedCharacter () / 255.0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_LIN_COLOR) {\r\n\t\t\t\t\t\tcolor[0] = reader.ReadUnsignedCharacter () / 255.0;\r\n\t\t\t\t\t\tcolor[1] = reader.ReadUnsignedCharacter () / 255.0;\r\n\t\t\t\t\t\tcolor[2] = reader.ReadUnsignedCharacter () / 255.0;\r\n\t\t\t\t\t\thasLinColor = true;\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_COLOR_F) {\r\n\t\t\t\t\t\tif (!hasLinColor) {\r\n\t\t\t\t\t\t\tcolor[0] = reader.ReadFloat32 ();\r\n\t\t\t\t\t\t\tcolor[1] = reader.ReadFloat32 ();\r\n\t\t\t\t\t\t\tcolor[2] = reader.ReadFloat32 ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_LIN_COLOR_F) {\r\n\t\t\t\t\t\tcolor[0] = reader.ReadFloat32 ();\r\n\t\t\t\t\t\tcolor[1] = reader.ReadFloat32 ();\r\n\t\t\t\t\t\tcolor[2] = reader.ReadFloat32 ();\r\n\t\t\t\t\t\thasLinColor = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn color;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction ReadPercentageChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tvar percentage = 0.0;\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.PERCENTAGE) {\r\n\t\t\t\t\t\tpercentage = reader.ReadUnsignedInteger16 () / 100.0;\r\n\t\t\t\t\t} else if (chunkId == chunks.PERCENTAGE_F) {\r\n\t\t\t\t\t\tpercentage = reader.ReadFloat32 ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn percentage;\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadTextureMapChunk (reader, id, length, material)\r\n\t\t\t{\r\n\t\t\t\tmaterial.texture = null;\r\n\t\t\t\tmaterial.offset = [0.0, 0.0];\r\n\t\t\t\tmaterial.scale = [1.0, 1.0];\r\n\t\t\t\tmaterial.rotation = 0.0;\r\n\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.MAT_TEXMAP_NAME) {\r\n\t\t\t\t\t\tmaterial.texture = ReadName (reader);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TEXMAP_UOFFSET) {\r\n\t\t\t\t\t\tmaterial.offset[0] = reader.ReadFloat32 ();\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TEXMAP_VOFFSET) {\r\n\t\t\t\t\t\tmaterial.offset[1] = reader.ReadFloat32 ();\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TEXMAP_USCALE) {\r\n\t\t\t\t\t\tmaterial.scale[0] = reader.ReadFloat32 ();\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TEXMAP_VSCALE) {\r\n\t\t\t\t\t\tmaterial.scale[1] = reader.ReadFloat32 ();\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TEXMAP_ROTATION) {\r\n\t\t\t\t\t\tmaterial.rotation = reader.ReadFloat32 ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadMaterialChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read material chunk (' + id.toString (16) + ', ' + length + ')', 2);\r\n\t\t\t\t\r\n\t\t\t\tvar material = {};\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.MAT_NAME) {\r\n\t\t\t\t\t\tOnLog ('Read material name chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.name = ReadName (reader);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_AMBIENT) {\r\n\t\t\t\t\t\tOnLog ('Read material ambient chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.ambient = ReadColorChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_DIFFUSE) {\r\n\t\t\t\t\t\tOnLog ('Read material diffuse chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.diffuse = ReadColorChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_SPECULAR) {\r\n\t\t\t\t\t\tOnLog ('Read material specular chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.specular = ReadColorChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_SHININESS) {\r\n\t\t\t\t\t\tOnLog ('Read material shininess chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.shininess = ReadPercentageChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_SHININESS_STRENGTH) {\r\n\t\t\t\t\t\tOnLog ('Read material shininess strength chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.shininessStrength = ReadPercentageChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TRANSPARENCY) {\r\n\t\t\t\t\t\tOnLog ('Read material transparency chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tmaterial.transparency = ReadPercentageChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.MAT_TEXMAP) {\r\n\t\t\t\t\t\tOnLog ('Read material texture map chunk (' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\t\t\tReadTextureMapChunk (reader, chunkId, chunkLength, material);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 3);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tOnMaterial (material);\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadVerticesChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read vertices chunk (' + id.toString (16) + ', ' + length + ')', 4);\r\n\t\t\t\t\r\n\t\t\t\tvar vertexCount = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\tvar i, x, y, z;\r\n\t\t\t\tfor (i = 0; i < vertexCount; i++) {\r\n\t\t\t\t\tx = reader.ReadFloat32 ();\r\n\t\t\t\t\ty = reader.ReadFloat32 ();\r\n\t\t\t\t\tz = reader.ReadFloat32 ();\r\n\t\t\t\t\tOnVertex (x, y, z);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadTextureVerticesChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read texture vertices chunk (' + id.toString (16) + ', ' + length + ')', 4);\r\n\t\t\t\t\r\n\t\t\t\tvar texVertexCount = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\tvar i, x, y;\r\n\t\t\t\tfor (i = 0; i < texVertexCount; i++) {\r\n\t\t\t\t\tx = reader.ReadFloat32 ();\r\n\t\t\t\t\ty = reader.ReadFloat32 ();\r\n\t\t\t\t\tOnTextureVertex (x, y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadFaceMaterialsChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read face materials chunk (' + id.toString (16) + ', ' + length + ')', 5);\r\n\t\t\t\t\r\n\t\t\t\tvar materialName = ReadName (reader);\r\n\t\t\t\tvar faceCount = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\tvar i, faceIndex;\r\n\t\t\t\tfor (i = 0; i < faceCount; i++) {\r\n\t\t\t\t\tfaceIndex = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\tOnFaceMaterial (faceIndex, materialName);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction ReadFaceSmoothingGroupsChunk (reader, faceCount, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read face smoothing groups chunk (' + id.toString (16) + ', ' + length + ')', 5);\r\n\t\t\t\t\r\n\t\t\t\tvar i, smoothingGroup;\r\n\t\t\t\tfor (i = 0; i < faceCount; i++) {\r\n\t\t\t\t\tsmoothingGroup = reader.ReadUnsignedInteger32 ();\r\n\t\t\t\t\tOnFaceSmoothingGroup (i, smoothingGroup);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadFacesChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read faces chunk (' + id.toString (16) + ', ' + length + ')', 4);\r\n\t\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tvar faceCount = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\tvar i, v0, v1, v2, flags;\r\n\t\t\t\tfor (i = 0; i < faceCount; i++) {\r\n\t\t\t\t\tv0 = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\tv1 = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\tv2 = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\tflags = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\tOnFace (v0, v1, v2, flags);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.TRI_MATERIAL) {\r\n\t\t\t\t\t\tReadFaceMaterialsChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.TRI_SMOOTH) {\r\n\t\t\t\t\t\tReadFaceSmoothingGroupsChunk (reader, faceCount,  chunkId, chunkLength);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 5);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadTransformationChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read transformation chunk (' + id.toString (16) + ', ' + length + ')', 4);\r\n\t\t\t\tvar matrix = [];\r\n\t\t\t\tvar i, j;\r\n\t\t\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\t\t\tfor (j = 0; j < 3; j++) {\r\n\t\t\t\t\t\tmatrix.push (reader.ReadFloat32 ());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (i < 3) {\r\n\t\t\t\t\t\tmatrix.push (0);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmatrix.push (1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tOnTransformation (matrix);\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadMeshChunk (reader, objectName, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read mesh chunk (' + objectName + ', ' +  id.toString (16) + ', ' + length + ')', 3);\r\n\r\n\t\t\t\tOnMesh (objectName);\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.TRI_VERTEX) {\r\n\t\t\t\t\t\tReadVerticesChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.TRI_TEXVERTEX) {\r\n\t\t\t\t\t\tReadTextureVerticesChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.TRI_FACE) {\r\n\t\t\t\t\t\tReadFacesChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.TRI_TRANSFORMATION) {\r\n\t\t\t\t\t\tReadTransformationChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 4);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadLightChunk (reader, objectName, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Skip light chunk (' + objectName + ', ' + id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\tSkipChunk (reader, length);\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadCameraChunk (reader, objectName, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Skip camera chunk (' + objectName + ', ' +  id.toString (16) + ', ' + length + ')', 3);\r\n\t\t\t\tSkipChunk (reader, length);\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadObjectChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read object chunk (' + id.toString (16) + ', ' + length + ')', 2);\r\n\t\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tvar objectName = ReadName (reader);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.OBJ_TRIMESH) {\r\n\t\t\t\t\t\tReadMeshChunk (reader, objectName, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJ_LIGHT) {\r\n\t\t\t\t\t\tReadLightChunk (reader, objectName, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJ_CAMERA) {\r\n\t\t\t\t\t\tReadCameraChunk (reader, objectName, chunkId, chunkLength);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 3);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadEditorChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read editor chunk (' + id.toString (16) + ', ' + length + ')', 1);\r\n\t\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.EDIT_MATERIAL) {\r\n\t\t\t\t\t\tReadMaterialChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.EDIT_OBJECT) {\r\n\t\t\t\t\t\tReadObjectChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 2);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tfunction ReadObjectNodeChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tfunction ReadTrackVector (reader, type)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = [];\r\n\t\t\t\t\treader.Skip (10);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar i, flags, current, tmp;\r\n\t\t\t\t\tvar keyNum = reader.ReadInteger32 ();\r\n\t\t\t\t\tfor (i = 0; i < keyNum; i++) {\r\n\t\t\t\t\t\treader.ReadInteger32 ();\r\n\t\t\t\t\t\tflags = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\t\tif (flags !== 0) {\r\n\t\t\t\t\t\t\treader.ReadFloat32 ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcurrent = null;\r\n\t\t\t\t\t\tif (type == chunks.OBJECT_ROTATION) {\r\n\t\t\t\t\t\t\ttmp = reader.ReadFloat32 ();\r\n\t\t\t\t\t\t\tcurrent = ReadVector (reader);\r\n\t\t\t\t\t\t\tcurrent[3] = tmp;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcurrent = ReadVector (reader);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult.push (current);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tOnLog ('Read object node chunk (' + id.toString (16) + ', ' + length + ')', 2);\r\n\t\t\t\t\r\n\t\t\t\tvar objectNode = {\r\n\t\t\t\t\tname : '',\r\n\t\t\t\t\tnodeId : -1,\r\n\t\t\t\t\tflags : -1,\r\n\t\t\t\t\tuserId : -1,\r\n\t\t\t\t\tpivot : [0.0, 0.0, 0.0],\r\n\t\t\t\t\tpositions : [],\r\n\t\t\t\t\trotations : [],\r\n\t\t\t\t\tscales : []\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.OBJECT_HIERARCHY) {\r\n\t\t\t\t\t\tobjectNode.name = ReadName (reader);\r\n\t\t\t\t\t\tobjectNode.flags = reader.ReadUnsignedInteger32 ();\r\n\t\t\t\t\t\tobjectNode.userId = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJECT_PIVOT) {\r\n\t\t\t\t\t\tobjectNode.pivot = ReadVector (reader);\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJECT_POSITION) {\r\n\t\t\t\t\t\tobjectNode.positions = ReadTrackVector (reader, chunks.OBJECT_POSITION);\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJECT_ROTATION) {\r\n\t\t\t\t\t\tobjectNode.rotations = ReadTrackVector (reader, chunks.OBJECT_ROTATION);\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJECT_SCALE) {\r\n\t\t\t\t\t\tobjectNode.scales = ReadTrackVector (reader, chunks.OBJECT_SCALE);\r\n\t\t\t\t\t} else if (chunkId == chunks.OBJECT_ID) {\r\n\t\t\t\t\t\tobjectNode.nodeId = reader.ReadUnsignedInteger16 ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 3);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tOnObjectNode (objectNode);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction ReadKeyFrameChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read keyframe chunk (' + id.toString (16) + ', ' + length + ')', 1);\r\n\t\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.OBJECT_NODE) {\r\n\t\t\t\t\t\tReadObjectNodeChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 2);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction ReadMainChunk (reader, id, length)\r\n\t\t\t{\r\n\t\t\t\tOnLog ('Read main chunk (' + id.toString (16) + ', ' + length + ')', 0);\r\n\t\t\t\t\r\n\t\t\t\tvar endByte = GetChunkEnd (reader, length);\r\n\t\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\t\tif (chunkId == chunks.EDIT3DS) {\r\n\t\t\t\t\t\tReadEditorChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else if (chunkId == chunks.KF3DS) {\r\n\t\t\t\t\t\tReadKeyFrameChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 1);\r\n\t\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar endByte = reader.GetByteLength ();\r\n\t\t\tReadChunks (reader, endByte, function (chunkId, chunkLength) {\r\n\t\t\t\tif (chunkId == chunks.MAIN3DS) {\r\n\t\t\t\t\tReadMainChunk (reader, chunkId, chunkLength);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tOnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 0);\r\n\t\t\t\t\tSkipChunk (reader, chunkLength);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tvar chunks = {\r\n\t\t\tMAIN3DS : 0x4D4D,\r\n\t\t\tEDIT3DS : 0x3D3D,\r\n\t\t\tEDIT_MATERIAL : 0xAFFF,\r\n\t\t\tMAT_NAME : 0xA000,\r\n\t\t\tMAT_AMBIENT : 0xA010,\r\n\t\t\tMAT_DIFFUSE : 0xA020,\r\n\t\t\tMAT_SPECULAR : 0xA030,\r\n\t\t\tMAT_SHININESS : 0xA040,\r\n\t\t\tMAT_SHININESS_STRENGTH : 0xA041,\r\n\t\t\tMAT_TRANSPARENCY : 0xA050,\r\n\t\t\tMAT_COLOR_F : 0x0010,\r\n\t\t\tMAT_COLOR : 0x0011,\r\n\t\t\tMAT_LIN_COLOR : 0x0012,\r\n\t\t\tMAT_LIN_COLOR_F : 0x0013,\r\n\t\t\tMAT_TEXMAP : 0xA200,\r\n\t\t\tMAT_TEXMAP_NAME : 0xA300,\r\n\t\t\tMAT_TEXMAP_UOFFSET : 0xA358,\r\n\t\t\tMAT_TEXMAP_VOFFSET : 0xA35A,\r\n\t\t\tMAT_TEXMAP_USCALE : 0xA354,\r\n\t\t\tMAT_TEXMAP_VSCALE : 0xA356,\r\n\t\t\tMAT_TEXMAP_ROTATION : 0xA35C,\r\n\t\t\tPERCENTAGE : 0x0030,\r\n\t\t\tPERCENTAGE_F : 0x0031,\r\n\t\t\tEDIT_OBJECT : 0x4000,\r\n\t\t\tOBJ_TRIMESH : 0x4100,\r\n\t\t\tOBJ_LIGHT : 0x4600,\r\n\t\t\tOBJ_CAMERA : 0x4700,\r\n\t\t\tTRI_VERTEX : 0x4110,\r\n\t\t\tTRI_TEXVERTEX : 0x4140,\r\n\t\t\tTRI_FACE : 0x4120,\r\n\t\t\tTRI_TRANSFORMATION : 0x4160,\r\n\t\t\tTRI_MATERIAL : 0x4130,\r\n\t\t\tTRI_SMOOTH : 0x4150,\r\n\t\t\tKF3DS : 0xB000,\r\n\t\t\tOBJECT_NODE : 0xB002,\r\n\t\t\tOBJECT_HIERARCHY : 0xB010,\r\n\t\t\tOBJECT_PIVOT : 0xB013,\r\n\t\t\tOBJECT_POSITION : 0xB020,\r\n\t\t\tOBJECT_ROTATION : 0xB021,\r\n\t\t\tOBJECT_SCALE : 0xB022,\r\n\t\t\tOBJECT_ID : 0xB030\r\n\t\t};\r\n\t\t\r\n\t\tvar reader = new JSM.BinaryReader (arrayBuffer, true);\r\n\t\tReadFile (reader, chunks);\r\n\t};\r\n\r\n\tJSM.Convert3dsToJsonData = function (arrayBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnFileRequested (fileName)\r\n\t\t{\r\n\t\t\tif (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {\r\n\t\t\t\treturn callbacks.onFileRequested (fileName);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfunction FinalizeMeshes (nodeHierarcy, triangleModel, materialNameToIndex)\r\n\t\t{\r\n\t\t\tfunction ApplyTransformation (body, node, nodeHierarcy)\r\n\t\t\t{\r\n\t\t\t\tfunction MatrixScale (matrix, scale)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar x = scale[0];\r\n\t\t\t\t\tvar y = scale[1];\r\n\t\t\t\t\tvar z = scale[2];\r\n\t\t\t\t\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\t\t\t\tmatrix[0 * 4 + i] *= x;\r\n\t\t\t\t\t\tmatrix[1 * 4 + i] *= y;\r\n\t\t\t\t\t\tmatrix[2 * 4 + i] *= z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn matrix;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction MatrixTranslate (matrix, translation)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar x = translation[0];\r\n\t\t\t\t\tvar y = translation[1];\r\n\t\t\t\t\tvar z = translation[2];\r\n\r\n\t\t\t\t\tvar i;\r\n\t\t\t\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\t\t\t\tmatrix[3 * 4 + i] += matrix[0 * 4 + i] * x + matrix[1 * 4 + i] * y + matrix[2 * 4 + i] * z;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn matrix;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction MatrixRotate (matrix, quaternion)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar rotation = JSM.MatrixRotationQuaternion (quaternion);\r\n\t\t\t\t\treturn JSM.MatrixMultiply (rotation, matrix);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction TransformBodyVertices (body, matrix)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar i, vertex, transformedVertex;\r\n\t\t\t\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\t\t\t\tvertex = body.GetVertex (i);\r\n\t\t\t\t\t\ttransformedVertex = JSM.ApplyTransformation (matrix, vertex);\r\n\t\t\t\t\t\tbody.SetVertex (i, transformedVertex.x, transformedVertex.y, transformedVertex.z);\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction FlipByXCoordinates (body, matrix, invMatrix)\t\r\n\t\t\t\t{\r\n\t\t\t\t\tvar determinant = JSM.MatrixDeterminant (matrix);\r\n\t\t\t\t\tif (!JSM.IsNegative (determinant)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar flippedMatrix = JSM.MatrixClone (matrix);\r\n\t\t\t\t\tMatrixScale (flippedMatrix, [-1.0, 1.0, 1.0]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar finalMatrix = JSM.MatrixMultiply (invMatrix, flippedMatrix);\r\n\t\t\t\t\tTransformBodyVertices (body, finalMatrix);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction GetNodeTransformation (node, nodeHierarcy)\r\n\t\t\t\t{\r\n\t\t\t\t\tfunction GetNodePosition (node)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (node.positions.length === 0) {\r\n\t\t\t\t\t\t\treturn [0.0, 0.0, 0.0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn node.positions[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tfunction GetNodeRotation (node)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfunction GetQuatFromAxisAndAngle (quat)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar result = [0.0, 0.0, 0.0, 1.0];\r\n\t\t\t\t\t\t\tvar length = Math.sqrt (quat[0] * quat[0] + quat[1] * quat[1] + quat[2] * quat[2]);\r\n\t\t\t\t\t\t\tif (JSM.IsPositive (length)) {\r\n\t\t\t\t\t\t\t\tvar omega = quat[3] * -0.5;\r\n\t\t\t\t\t\t\t\tvar si = Math.sin (omega) / length;\r\n\t\t\t\t\t\t\t\tresult = [si * quat[0], si * quat[1], si * quat[2], Math.cos (omega)];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (node.rotations.length === 0) {\r\n\t\t\t\t\t\t\treturn [0.0, 0.0, 0.0, 0.0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar quat = node.rotations[0];\r\n\t\t\t\t\t\treturn GetQuatFromAxisAndAngle (quat);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfunction GetNodeScale (node)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (node.scales.length === 0) {\r\n\t\t\t\t\t\t\treturn [0.0, 0.0, 0.0, 0.0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn node.scales[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (node.matrix !== undefined) {\r\n\t\t\t\t\t\treturn node.matrix;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar result = JSM.MatrixIdentity ();\r\n\t\t\t\t\tresult = MatrixTranslate (result, GetNodePosition (node));\r\n\t\t\t\t\tresult = MatrixRotate (result, GetNodeRotation (node));\r\n\t\t\t\t\tresult = MatrixScale (result, GetNodeScale (node));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (node.userId != 65535) {\r\n\t\t\t\t\t\tvar parentIndex = nodeHierarcy.nodeIdToIndex[node.userId];\r\n\t\t\t\t\t\tif (parentIndex !== undefined) {\r\n\t\t\t\t\t\t\tvar parentNode = nodeHierarcy.nodes[parentIndex];\r\n\t\t\t\t\t\t\tvar parentTransformation = GetNodeTransformation (parentNode, nodeHierarcy);\r\n\t\t\t\t\t\t\tresult = JSM.MatrixMultiply (result, parentTransformation);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tnode.matrix = result;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tfunction GetNodePivotPoint (node)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (node === undefined || node === null) {\r\n\t\t\t\t\t\treturn [0.0, 0.0, 0.0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn node.pivot;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction GetMeshTransformation (mesh)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (mesh === undefined || mesh === null) {\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn mesh.transformation;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar currentMeshData = body.meshData;\r\n\t\t\t\tvar meshTransformation = GetMeshTransformation (currentMeshData);\r\n\t\t\t\tif (meshTransformation === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar nodeTransformation = null;\r\n\t\t\t\tif (node !== null) {\r\n\t\t\t\t\tnodeTransformation = GetNodeTransformation (node, nodeHierarcy);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnodeTransformation = meshTransformation;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar matrix = JSM.MatrixClone (nodeTransformation);\r\n\t\t\t\tvar meshMatrix = JSM.MatrixClone (meshTransformation);\r\n\t\t\t\tvar invMeshMatrix = JSM.MatrixInvert (meshMatrix);\r\n\t\t\t\tif (invMeshMatrix === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tFlipByXCoordinates (body, meshMatrix, invMeshMatrix);\r\n\r\n\t\t\t\tvar nodePivotPoint = GetNodePivotPoint (node);\r\n\t\t\t\tMatrixTranslate (matrix, [-nodePivotPoint[0], -nodePivotPoint[1], -nodePivotPoint[2]]);\r\n\t\t\t\tvar finalMatrix = JSM.MatrixMultiply (invMeshMatrix, matrix);\r\n\t\t\t\tTransformBodyVertices (body, finalMatrix);\r\n\t\t\t}\r\n\r\n\t\t\tfunction FinalizeMaterials (body, materialNameToIndex)\r\n\t\t\t{\r\n\t\t\t\tvar hasTextureCoordinates = (body.UVCount () == body.VertexCount ());\r\n\t\t\t\tvar currentMeshData = body.meshData;\r\n\t\t\t\tvar i, triangle, materialName, materialIndex, smoothingGroup;\r\n\t\t\t\tfor (i = 0; i < body.TriangleCount (); i++) {\r\n\t\t\t\t\ttriangle = body.GetTriangle (i);\r\n\t\t\t\t\tif (hasTextureCoordinates) {\r\n\t\t\t\t\t\ttriangle.u0 = triangle.v0;\r\n\t\t\t\t\t\ttriangle.u1 = triangle.v1;\r\n\t\t\t\t\t\ttriangle.u2 = triangle.v2;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tmaterialName = currentMeshData.faceToMaterial[i];\r\n\t\t\t\t\tif (materialName !== undefined) {\r\n\t\t\t\t\t\tmaterialIndex = materialNameToIndex[materialName];\r\n\t\t\t\t\t\tif (materialIndex !== undefined) {\r\n\t\t\t\t\t\t\ttriangle.mat = materialIndex;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tsmoothingGroup = currentMeshData.faceToSmoothingGroup[i];\r\n\t\t\t\t\tif (smoothingGroup !== undefined && smoothingGroup > 0) {\r\n\t\t\t\t\t\ttriangle.curve = smoothingGroup;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction FinalizeMesh (body, node, materialNameToIndex, nodeHierarcy)\r\n\t\t\t{\r\n\t\t\t\tApplyTransformation (body, node, nodeHierarcy);\r\n\t\t\t\tFinalizeMaterials (body, materialNameToIndex);\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction DuplicateBody (model, body, bodyIndex, instanceIndex)\r\n\t\t\t{\r\n\t\t\t\tvar clonedBody = body.Clone ();\r\n\t\t\t\tclonedBody.SetName (clonedBody.GetName () + ' (' + instanceIndex + ')');\r\n\t\t\t\tif (bodyIndex < model.BodyCount ()) {\r\n\t\t\t\t\tmodel.AddBodyToIndex (clonedBody, bodyIndex);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmodel.AddBody (clonedBody);\r\n\t\t\t\t}\r\n\t\t\t\treturn clonedBody;\r\n\t\t\t}\r\n\r\n\t\t\tvar i, j, currentBody, currentMeshData, currentNode;\r\n\t\t\tvar firstNode, addedBody;\r\n\t\t\tfor (i = 0; i < triangleModel.BodyCount (); i++) {\r\n\t\t\t\tcurrentBody = triangleModel.GetBody (i);\r\n\t\t\t\tcurrentMeshData = currentBody.meshData;\r\n\t\t\t\tif (currentMeshData.objectNodes.length === 0) {\r\n\t\t\t\t\tFinalizeMesh (currentBody, null, materialNameToIndex, nodeHierarcy);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfirstNode = nodeHierarcy.nodes[currentMeshData.objectNodes[0]];\r\n\t\t\t\t\tfor (j = 1; j < currentMeshData.objectNodes.length; j++) {\r\n\t\t\t\t\t\tcurrentNode = nodeHierarcy.nodes[currentMeshData.objectNodes[j]];\r\n\t\t\t\t\t\taddedBody = DuplicateBody (triangleModel, currentBody, i + 1, j + 1);\r\n\t\t\t\t\t\taddedBody.meshData = currentBody.meshData;\r\n\t\t\t\t\t\tFinalizeMesh (addedBody, currentNode, materialNameToIndex, nodeHierarcy);\r\n\t\t\t\t\t\ti = i + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tFinalizeMesh (currentBody, firstNode, materialNameToIndex, nodeHierarcy);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tvar triangleModel = new JSM.TriangleModel ();\r\n\t\tvar currentBody = null;\r\n\t\t\r\n\t\tvar materialNameToIndex = {};\r\n\t\tvar bodyNameToIndex = {};\r\n\r\n\t\tvar nodeHierarcy = {\r\n\t\t\tnodes : [],\r\n\t\t\tnodeIdToIndex : {}\r\n\t\t};\r\n\t\t\r\n\t\tJSM.Read3dsFile (arrayBuffer, {\r\n\t\t\tonMaterial : function (material) {\r\n\t\t\t\tfunction GetOpacity (transparency)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (transparency === undefined || transparency === null) {\r\n\t\t\t\t\t\treturn 1.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn 1.0 - transparency;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction GetShininess (shininess, shininessStrength)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (shininess === undefined || shininess === null) {\r\n\t\t\t\t\t\treturn 0.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (shininessStrength === undefined || shininessStrength === null) {\r\n\t\t\t\t\t\treturn 0.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn shininess * shininessStrength;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (materialNameToIndex[material.name] !== undefined) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar index = triangleModel.AddMaterial ({\r\n\t\t\t\t\tname : material.name,\r\n\t\t\t\t\tambient : material.ambient,\r\n\t\t\t\t\tdiffuse : material.diffuse,\r\n\t\t\t\t\tspecular : material.specular,\r\n\t\t\t\t\tshininess : GetShininess (material.shininess, material.shininessStrength),\r\n\t\t\t\t\topacity : GetOpacity (material.transparency)\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar currentMaterial = triangleModel.GetMaterial (index);\r\n\t\t\t\tif (material.texture !== undefined && material.texture !== null) {\r\n\t\t\t\t\tvar textureBuffer = OnFileRequested (material.texture);\r\n\t\t\t\t\tif (textureBuffer !== null) {\r\n\t\t\t\t\t\tvar blob = new window.Blob ([textureBuffer]);\r\n\t\t\t\t\t\tvar blobURL = window.URL.createObjectURL (blob);\r\n\t\t\t\t\t\tcurrentMaterial.texture = blobURL;\r\n\t\t\t\t\t\tcurrentMaterial.offset = material.offset;\r\n\t\t\t\t\t\tcurrentMaterial.scale = material.scale;\r\n\t\t\t\t\t\tcurrentMaterial.rotation = -material.rotation;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterialNameToIndex[material.name] = index;\r\n\t\t\t},\r\n\t\t\tonMesh : function (meshName) {\r\n\t\t\t\tif (bodyNameToIndex[meshName] !== undefined) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody (meshName));\r\n\t\t\t\tcurrentBody = triangleModel.GetBody (index);\r\n\t\t\t\tcurrentBody.meshData ={\r\n\t\t\t\t\tfaceToMaterial : {},\r\n\t\t\t\t\tfaceToSmoothingGroup : {},\r\n\t\t\t\t\tobjectNodes : [],\r\n\t\t\t\t\ttransformation : null\r\n\t\t\t\t};\r\n\t\t\t\tbodyNameToIndex[meshName] = index;\r\n\t\t\t},\r\n\t\t\tonTransformation : function (matrix) {\r\n\t\t\t\tif (currentBody === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentBody.meshData.transformation = matrix;\r\n\t\t\t},\r\n\t\t\tonObjectNode : function (objectNode) {\r\n\t\t\t\tvar nodeIndex = nodeHierarcy.nodes.length;\r\n\t\t\t\tnodeHierarcy.nodes.push (objectNode);\r\n\t\t\t\tnodeHierarcy.nodeIdToIndex[objectNode.nodeId] = nodeIndex;\r\n\r\n\t\t\t\tvar bodyIndex = bodyNameToIndex[objectNode.name];\r\n\t\t\t\tif (bodyIndex === undefined) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar body = triangleModel.GetBody (bodyIndex);\r\n\t\t\t\tbody.meshData.objectNodes.push (nodeIndex);\r\n\t\t\t},\r\n\t\t\tonVertex : function (x, y, z) {\r\n\t\t\t\tif (currentBody === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentBody.AddVertex (x, y, z);\r\n\t\t\t},\r\n\t\t\tonTextureVertex : function (x, y) {\r\n\t\t\t\tif (currentBody === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentBody.AddUV (x, y);\r\n\t\t\t},\r\n\t\t\tonFace : function (v0, v1, v2) {\r\n\t\t\t\tif (currentBody === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentBody.AddTriangle (v0, v1, v2);\r\n\t\t\t},\r\n\t\t\tonFaceMaterial : function (faceIndex, materialName) {\r\n\t\t\t\tif (currentBody === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentBody.meshData.faceToMaterial[faceIndex] = materialName;\r\n\t\t\t},\r\n\t\t\tonFaceSmoothingGroup : function (faceIndex, smoothingGroup) {\r\n\t\t\t\tif (currentBody === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentBody.meshData.faceToSmoothingGroup[faceIndex] = smoothingGroup;\r\n\t\t\t},\r\n\t\t\tonFileRequested : OnFileRequested\r\n\t\t});\r\n\t\t\r\n\t\tFinalizeMeshes (nodeHierarcy, triangleModel, materialNameToIndex);\r\n\t\ttriangleModel.Finalize ();\r\n\r\n\t\tvar jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/importerobj',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ReadObjFile = function (stringBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnNewMaterial (name)\r\n\t\t{\r\n\t\t\tif (callbacks.onNewMaterial !== undefined && callbacks.onNewMaterial !== null) {\r\n\t\t\t\tcallbacks.onNewMaterial (name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnMaterialComponent (name, red, green, blue)\r\n\t\t{\r\n\t\t\tif (callbacks.onMaterialComponent !== undefined && callbacks.onMaterialComponent !== null) {\r\n\t\t\t\tcallbacks.onMaterialComponent (name, red, green, blue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnMaterialParameter (name, value)\r\n\t\t{\r\n\t\t\tif (callbacks.onMaterialParameter !== undefined && callbacks.onMaterialParameter !== null) {\r\n\t\t\t\tcallbacks.onMaterialParameter (name, value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnMaterialTexture (textureName)\r\n\t\t{\r\n\t\t\tif (callbacks.onMaterialTexture !== undefined && callbacks.onMaterialTexture !== null) {\r\n\t\t\t\tcallbacks.onMaterialTexture (textureName);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction OnUseMaterial (name)\r\n\t\t{\r\n\t\t\tif (callbacks.onUseMaterial !== undefined && callbacks.onUseMaterial !== null) {\r\n\t\t\t\tcallbacks.onUseMaterial (name);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnMesh (meshName)\r\n\t\t{\r\n\t\t\tif (callbacks.onMesh !== undefined && callbacks.onMesh !== null) {\r\n\t\t\t\tcallbacks.onMesh (meshName);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction OnVertex (x, y, z)\r\n\t\t{\r\n\t\t\tif (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {\r\n\t\t\t\tcallbacks.onVertex (x, y, z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnNormal (x, y, z)\r\n\t\t{\r\n\t\t\tif (callbacks.onNormal !== undefined && callbacks.onNormal !== null) {\r\n\t\t\t\tcallbacks.onNormal (x, y, z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnTexCoord (x, y)\r\n\t\t{\r\n\t\t\tif (callbacks.onTexCoord !== undefined && callbacks.onTexCoord !== null) {\r\n\t\t\t\tcallbacks.onTexCoord (x, y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnFace (vertices, normals, uvs)\r\n\t\t{\r\n\t\t\tif (callbacks.onFace !== undefined && callbacks.onFace !== null) {\r\n\t\t\t\tcallbacks.onFace (vertices, normals, uvs);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnFileRequested (fileName)\r\n\t\t{\r\n\t\t\tif (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {\r\n\t\t\t\treturn callbacks.onFileRequested (fileName);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfunction ProcessLine (line, objectCounter)\r\n\t\t{\r\n\t\t\tfunction GetIndex (index, count)\r\n\t\t\t{\r\n\t\t\t\tif (index > 0) {\r\n\t\t\t\t\treturn index - 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn count + index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfunction GetFileName (line, keyword)\r\n\t\t\t{\r\n\t\t\t\tvar fileNameIndex = line.indexOf (keyword) + keyword.length;\r\n\t\t\t\tvar fileName = line.substr (fileNameIndex, line.length - fileNameIndex);\r\n\t\t\t\treturn fileName.trim ();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tif (line.length === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (line[0] == '#') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar lineParts = line.split (/\\s+/);\r\n\t\t\tif (lineParts.length === 0 || lineParts[0][0] == '#') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar i, fileName;\r\n\t\t\tif (lineParts[0] == 'g') {\r\n\t\t\t\tif (lineParts.length < 2) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar meshName = '';\r\n\t\t\t\tfor (i = 1; i < lineParts.length; i++) {\r\n\t\t\t\t\tmeshName += lineParts[i];\r\n\t\t\t\t\tif (i < lineParts.length - 1) {\r\n\t\t\t\t\t\tmeshName += ' ';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tOnMesh (meshName);\r\n\t\t\t} else if (lineParts[0] == 'v') {\r\n\t\t\t\tif (lineParts.length < 4) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tobjectCounter.vertexCount += 1;\r\n\t\t\t\tOnVertex (parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));\r\n\t\t\t} else if (lineParts[0] == 'vn') {\r\n\t\t\t\tif (lineParts.length < 4) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tobjectCounter.normalCount += 1;\r\n\t\t\t\tOnNormal (parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));\r\n\t\t\t} else if (lineParts[0] == 'vt') {\r\n\t\t\t\tif (lineParts.length < 3) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tobjectCounter.uvCount += 1;\r\n\t\t\t\tOnTexCoord (parseFloat (lineParts[1]), parseFloat (lineParts[2]));\r\n\t\t\t} else if (lineParts[0] == 'f') {\r\n\t\t\t\tif (lineParts.length < 4) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar vertices = [];\r\n\t\t\t\tvar normals = [];\r\n\t\t\t\tvar uvs = [];\r\n\t\t\t\t\r\n\t\t\t\tvar partSplitted;\r\n\t\t\t\tfor (i = 1; i < lineParts.length; i++) {\r\n\t\t\t\t\tpartSplitted = lineParts[i].split ('/');\r\n\t\t\t\t\tvertices.push (GetIndex (parseInt (partSplitted[0], 10), objectCounter.vertexCount));\r\n\t\t\t\t\tif (partSplitted.length > 1 && partSplitted[1].length > 0) {\r\n\t\t\t\t\t\tuvs.push (GetIndex (parseInt (partSplitted[1], 10), objectCounter.uvCount));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (partSplitted.length > 2 && partSplitted[2].length > 0) {\r\n\t\t\t\t\t\tnormals.push (GetIndex (parseInt (partSplitted[2], 10), objectCounter.normalCount));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tOnFace (vertices, normals, uvs);\r\n\t\t\t} else if (lineParts[0] == 'usemtl') {\r\n\t\t\t\tif (lineParts.length < 2) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tOnUseMaterial (lineParts[1]);\r\n\t\t\t} else if (lineParts[0] == 'newmtl') {\r\n\t\t\t\tif (lineParts.length < 2) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tOnNewMaterial (lineParts[1]);\r\n\t\t\t} else if (lineParts[0] == 'Ka' || lineParts[0] == 'Kd' || lineParts[0] == 'Ks') {\r\n\t\t\t\tif (lineParts.length < 4) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tOnMaterialComponent (lineParts[0], parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));\r\n\t\t\t} else if (lineParts[0] == 'Ns' || lineParts[0] == 'Tr' || lineParts[0] == 'd') {\r\n\t\t\t\tif (lineParts.length < 2) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tOnMaterialParameter (lineParts[0], lineParts[1]);\r\n\t\t\t} else if (lineParts[0] == 'map_Kd') {\r\n\t\t\t\tif (lineParts.length < 2) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfileName = GetFileName (line, 'map_Kd');\r\n\t\t\t\tOnMaterialTexture (fileName);\r\n\t\t\t} else if (lineParts[0] == 'mtllib') {\r\n\t\t\t\tif (lineParts.length < 2) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfileName = GetFileName (line, 'mtllib');\r\n\t\t\t\tvar fileStringBuffer = OnFileRequested (fileName.trim ());\r\n\t\t\t\tif (fileStringBuffer === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tProcessFile (fileStringBuffer);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction ProcessFile (stringBuffer, objectCounter)\r\n\t\t{\r\n\t\t\tvar lines = stringBuffer.split ('\\n');\r\n\t\t\tvar i, line;\r\n\t\t\tfor (i = 0; i < lines.length; i++) {\r\n\t\t\t\tline = lines[i].trim ();\r\n\t\t\t\tProcessLine (line, objectCounter);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tvar objectCounter = {\r\n\t\t\tvertexCount : 0,\r\n\t\t\tnormalCount : 0,\r\n\t\t\tuvCount : 0\r\n\t\t};\r\n\r\n\t\tProcessFile (stringBuffer, objectCounter);\r\n\t};\r\n\r\n\tJSM.ConvertObjToJsonData = function (stringBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnFileRequested (fileName)\r\n\t\t{\r\n\t\t\tif (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {\r\n\t\t\t\treturn callbacks.onFileRequested (fileName);\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tvar triangleModel = new JSM.TriangleModel ();\r\n\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));\r\n\t\tvar currentBody = triangleModel.GetBody (index);\r\n\t\t\r\n\t\tvar materialNameToIndex = {};\r\n\t\tvar currentMaterial = null;\r\n\t\tvar currentMaterialIndex = null;\r\n\t\t\r\n\t\tvar globalVertices = [];\r\n\t\tvar globalNormals = [];\r\n\t\tvar globalUVs = [];\r\n\t\t\r\n\t\tvar globalToLocalVertices = {};\r\n\t\tvar globalToLocalNormals = {};\r\n\t\tvar globalToLocalUVs = {};\r\n\t\t\r\n\t\tJSM.ReadObjFile (stringBuffer, {\r\n\t\t\tonNewMaterial : function (name) {\r\n\t\t\t\tvar index = triangleModel.AddMaterial ({\r\n\t\t\t\t\tname : name\r\n\t\t\t\t});\r\n\t\t\t\tcurrentMaterial = triangleModel.GetMaterial (index);\r\n\t\t\t\tmaterialNameToIndex[name] = index;\r\n\t\t\t},\r\n\t\t\tonMaterialComponent : function (name, red, green, blue) {\r\n\t\t\t\tif (currentMaterial === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (name == 'Ka') {\r\n\t\t\t\t\tcurrentMaterial.ambient = [red, green, blue];\r\n\t\t\t\t} else if (name == 'Kd') {\r\n\t\t\t\t\tcurrentMaterial.diffuse = [red, green, blue];\r\n\t\t\t\t} else if (name == 'Ks') {\r\n\t\t\t\t\tcurrentMaterial.specular = [red, green, blue];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonMaterialParameter : function (name, value) {\r\n\t\t\t\tif (currentMaterial === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (name == 'Ns') {\r\n\t\t\t\t\tcurrentMaterial.shininess = 0.0;\r\n\t\t\t\t\tif (JSM.IsPositive (value)) {\r\n\t\t\t\t\t\tcurrentMaterial.shininess = (Math.log2 (parseFloat (value)) - 1) / 10.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (name == 'Tr') {\r\n\t\t\t\t\tcurrentMaterial.opacity = 1.0 - parseFloat (value);\r\n\t\t\t\t} else if (name == 'd') {\r\n\t\t\t\t\tcurrentMaterial.opacity = parseFloat (value);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t},\r\n\t\t\tonMaterialTexture : function (textureName) {\r\n\t\t\t\tif (currentMaterial === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar textureBuffer = OnFileRequested (textureName);\r\n\t\t\t\tif (textureBuffer === null) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar blob = new window.Blob ([textureBuffer]);\r\n\t\t\t\tvar blobURL = window.URL.createObjectURL (blob);\r\n\t\t\t\tcurrentMaterial.texture = blobURL;\r\n\t\t\t},\r\n\t\t\tonUseMaterial : function (name) {\r\n\t\t\t\tvar materialIndex = materialNameToIndex[name];\r\n\t\t\t\tif (materialIndex !== undefined) {\r\n\t\t\t\t\tcurrentMaterialIndex = materialIndex;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonMesh : function (meshName) {\r\n\t\t\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody (meshName));\r\n\t\t\t\tcurrentBody = triangleModel.GetBody (index);\r\n\t\t\t\tglobalToLocalVertices = {};\r\n\t\t\t\tglobalToLocalNormals = {};\r\n\t\t\t\tglobalToLocalUVs = {};\r\n\t\t\t},\r\n\t\t\tonVertex : function (x, y, z) {\r\n\t\t\t\tglobalVertices.push (new JSM.Coord (x, y, z));\r\n\t\t\t},\r\n\t\t\tonNormal : function (x, y, z) {\r\n\t\t\t\tglobalNormals.push (new JSM.Coord (x, y, z));\r\n\t\t\t},\r\n\t\t\tonTexCoord : function (x, y) {\r\n\t\t\t\tglobalUVs.push (new JSM.Coord2D (x, y));\r\n\t\t\t},\r\n\t\t\tonFace : function (vertices, normals, uvs) {\r\n\t\t\t\tfunction GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, valueAdderFunc)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (globalIndex < 0 || globalIndex >= globalValueArray.length) {\r\n\t\t\t\t\t\treturn undefined;\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\tvar result = globalToLocalIndices[globalIndex];\r\n\t\t\t\t\tif (result === undefined) {\r\n\t\t\t\t\t\tvar globalValue = globalValueArray[globalIndex];\r\n\t\t\t\t\t\tresult = valueAdderFunc (globalValue);\r\n\t\t\t\t\t\tglobalToLocalIndices[globalIndex] = result;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction GetLocalVertexIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {\r\n\t\t\t\t\t\treturn triangleBody.AddVertex (val.x, val.y, val.z);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction GetLocalNormalIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {\r\n\t\t\t\t\t\treturn triangleBody.AddNormal (val.x, val.y, val.z);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfunction GetLocalUVIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {\r\n\t\t\t\t\t\treturn triangleBody.AddUV (val.x, val.y);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar i, v0, v1, v2, triangle, triangleIndex;\r\n\t\t\t\tvar hasNormals = (normals.length == vertices.length);\r\n\t\t\t\tvar hasUVs = (uvs.length == vertices.length);\r\n\t\t\t\tvar count = vertices.length;\r\n\t\t\t\tfor (i = 0; i < count - 2; i++) {\r\n\t\t\t\t\tv0 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[0]);\r\n\t\t\t\t\tv1 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[(i + 1) % count]);\r\n\t\t\t\t\tv2 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[(i + 2) % count]);\r\n\t\t\t\t\ttriangleIndex = currentBody.AddTriangle (v0, v1, v2);\r\n\t\t\t\t\ttriangle = currentBody.GetTriangle (triangleIndex);\r\n\t\t\t\t\tif (hasNormals) {\r\n\t\t\t\t\t\ttriangle.n0 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[0]);\r\n\t\t\t\t\t\ttriangle.n1 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[(i + 1) % count]);\r\n\t\t\t\t\t\ttriangle.n2 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[(i + 2) % count]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (hasUVs) {\r\n\t\t\t\t\t\ttriangle.u0 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[0]);\r\n\t\t\t\t\t\ttriangle.u1 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[(i + 1) % count]);\r\n\t\t\t\t\t\ttriangle.u2 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[(i + 2) % count]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (currentMaterialIndex !== null) {\r\n\t\t\t\t\t\ttriangle.mat = currentMaterialIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tonFileRequested : OnFileRequested\r\n\t\t});\r\n\r\n\t\ttriangleModel.Finalize ();\r\n\t\t\r\n\t\tvar jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/importerstl',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ReadBinaryStlFile = function (arrayBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnFace (v0, v1, v2, normal)\r\n\t\t{\r\n\t\t\tif (callbacks.onFace !== undefined && callbacks.onFace !== null) {\r\n\t\t\t\tcallbacks.onFace (v0, v1, v2, normal);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction ReadVector (reader)\r\n\t\t{\r\n\t\t\tvar result = [];\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < 3; i++) {\r\n\t\t\t\tresult[i] = reader.ReadFloat32 ();\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tvar reader = new JSM.BinaryReader (arrayBuffer, true);\r\n\t\treader.Skip (80);\r\n\t\t\r\n\t\tvar triangleCount = reader.ReadUnsignedInteger32 ();\r\n\t\tvar i, v0, v1, v2, normal;\r\n\t\tfor (i = 0; i < triangleCount; i++) {\r\n\t\t\tnormal = ReadVector (reader);\r\n\t\t\tv0 = ReadVector (reader);\r\n\t\t\tv1 = ReadVector (reader);\r\n\t\t\tv2 = ReadVector (reader);\r\n\t\t\treader.Skip (2);\r\n\t\t\tOnFace (v0, v1, v2, normal);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ReadAsciiStlFile = function (stringBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnFace (v0, v1, v2, normal)\r\n\t\t{\r\n\t\t\tif (callbacks.onFace !== undefined && callbacks.onFace !== null) {\r\n\t\t\t\tcallbacks.onFace (v0, v1, v2, normal);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction ProcessLine (lines, lineIndex)\r\n\t\t{\r\n\t\t\tfunction GetLine (lines, lineIndex)\r\n\t\t\t{\r\n\t\t\t\treturn lines[lineIndex].trim ();\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfunction GetVertices (lines, lineIndex, vertices)\r\n\t\t\t{\r\n\t\t\t\tvar currentLineIndex, currentLine, lineParts, vertex;\r\n\t\t\t\tfor (currentLineIndex = lineIndex; currentLineIndex < lines.length && vertices.length < 3; currentLineIndex++) {\r\n\t\t\t\t\tcurrentLine = GetLine (lines, currentLineIndex);\r\n\t\t\t\t\tif (currentLine.length === 0) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlineParts = currentLine.split (/\\s+/);\r\n\t\t\t\t\tif (lineParts.length === 0) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (lineParts[0] == 'vertex') {\r\n\t\t\t\t\t\tif (lineParts.length < 4) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvertex = [parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3])];\r\n\t\t\t\t\t\t\tvertices.push (vertex);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn currentLineIndex + 1;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar line = GetLine (lines, lineIndex);\r\n\t\t\tif (line.length === 0) {\r\n\t\t\t\treturn lineIndex + 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar lineParts = line.split (/\\s+/);\r\n\t\t\tif (lineParts.length === 0) {\r\n\t\t\t\treturn lineIndex + 1;\r\n\t\t\t}\r\n\r\n\t\t\tif (lineParts[0] == 'solid') {\r\n\t\t\t\treturn lineIndex + 1;\r\n\t\t\t} else if (lineParts[0] == 'facet' && lineParts[1] == 'normal') {\r\n\t\t\t\tif (lineParts.length < 5) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar normal = [parseFloat (lineParts[2]), parseFloat (lineParts[3]), parseFloat (lineParts[4])];\r\n\t\t\t\tvar vertices = [];\r\n\t\t\t\tvar nextLineIndex = GetVertices (lines, lineIndex + 1, vertices);\r\n\t\t\t\tif (vertices.length != 3) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tOnFace (vertices[0], vertices[1], vertices[2], normal);\r\n\t\t\t\treturn nextLineIndex;\r\n\t\t\t}\r\n\r\n\t\t\treturn lineIndex + 1;\r\n\t\t}\r\n\t\t\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tvar lineIndex = 0;\r\n\t\tvar lines = stringBuffer.split ('\\n');\r\n\t\twhile (lineIndex < lines.length && lineIndex != -1) {\r\n\t\t\tlineIndex = ProcessLine (lines, lineIndex);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.IsBinaryStlFile = function (arrayBuffer)\r\n\t{\r\n\t\tvar byteLength = arrayBuffer.byteLength;\r\n\t\tif (byteLength < 84) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar reader = new JSM.BinaryReader (arrayBuffer, true);\r\n\t\treader.Skip (80);\r\n\t\t\r\n\t\tvar triangleCount = reader.ReadUnsignedInteger32 ();\r\n\t\tif (byteLength != triangleCount * 50 + 84) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ConvertStlToJsonData = function (arrayBuffer, stringBuffer)\r\n\t{\r\n\t\tvar triangleModel = new JSM.TriangleModel ();\r\n\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));\r\n\t\tvar currentBody = triangleModel.GetBody (index);\r\n\r\n\t\tif (arrayBuffer !== null) {\r\n\t\t\tJSM.ReadBinaryStlFile (arrayBuffer, {\r\n\t\t\t\tonFace : function (v0, v1, v2, normal) {\r\n\t\t\t\t\tvar v0Index = currentBody.AddVertex (v0[0], v0[1], v0[2]);\r\n\t\t\t\t\tvar v1Index = currentBody.AddVertex (v1[0], v1[1], v1[2]);\r\n\t\t\t\t\tvar v2Index = currentBody.AddVertex (v2[0], v2[1], v2[2]);\r\n\t\t\t\t\tvar triangleNormal = new JSM.Vector (normal[0], normal[1], normal[2]).Normalize ();\r\n\t\t\t\t\tvar normalIndex = currentBody.AddNormal (triangleNormal.x, triangleNormal.y, triangleNormal.z);\r\n\t\t\t\t\tcurrentBody.AddTriangle (v0Index, v1Index, v2Index, normalIndex, normalIndex, normalIndex);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (stringBuffer !== null) {\r\n\t\t\tJSM.ReadAsciiStlFile (stringBuffer, {\r\n\t\t\t\tonFace : function (v0, v1, v2, normal) {\r\n\t\t\t\t\tvar v0Index = currentBody.AddVertex (v0[0], v0[1], v0[2]);\r\n\t\t\t\t\tvar v1Index = currentBody.AddVertex (v1[0], v1[1], v1[2]);\r\n\t\t\t\t\tvar v2Index = currentBody.AddVertex (v2[0], v2[1], v2[2]);\r\n\t\t\t\t\tvar triangleNormal = new JSM.Vector (normal[0], normal[1], normal[2]).Normalize ();\r\n\t\t\t\t\tvar normalIndex = currentBody.AddNormal (triangleNormal.x, triangleNormal.y, triangleNormal.z);\r\n\t\t\t\t\tcurrentBody.AddTriangle (v0Index, v1Index, v2Index, normalIndex, normalIndex, normalIndex);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\ttriangleModel.Finalize ();\r\n\t\t\r\n\t\tvar jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/importeroff',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ReadOffFile = function (stringBuffer, callbacks)\r\n\t{\r\n\t\tfunction OnVertex (x, y, z)\r\n\t\t{\r\n\t\t\tif (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {\r\n\t\t\t\tcallbacks.onVertex (x, y, z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnFace (vertices)\r\n\t\t{\r\n\t\t\tif (callbacks.onFace !== undefined && callbacks.onFace !== null) {\r\n\t\t\t\tcallbacks.onFace (vertices);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction ProcessLine (line, readState)\r\n\t\t{\r\n\t\t\tif (line.length === 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (line[0] == '#') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar lineParts = line.split (/\\s+/);\r\n\t\t\tif (lineParts.length === 0 || lineParts[0][0] == '#') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!readState.offHeaderFound) {\r\n\t\t\t\tif (lineParts.length == 1 && lineParts[0] == 'OFF') {\r\n\t\t\t\t\treadState.offHeaderFound = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!readState.infoFound) {\r\n\t\t\t\tif (lineParts.length == 3) {\r\n\t\t\t\t\treadState.vertexCount = parseInt (lineParts[0]);\r\n\t\t\t\t\treadState.faceCount = parseInt (lineParts[1]);\r\n\t\t\t\t\treadState.infoFound = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (readState.readVertices < readState.vertexCount) {\r\n\t\t\t\tif (lineParts.length == 3) {\r\n\t\t\t\t\tOnVertex (parseFloat (lineParts[0]), parseFloat (lineParts[1]), parseFloat (lineParts[2]));\r\n\t\t\t\t\treadState.readVertices += 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (readState.readFaces < readState.faceCount) {\r\n\t\t\t\tvar vertexCount = parseInt (lineParts[0]);\r\n\t\t\t\tif (lineParts.length >= vertexCount + 1) {\r\n\t\t\t\t\tvar vertices = [];\r\n\t\t\t\t\tvar i, vertex;\r\n\t\t\t\t\tfor (i = 1; i < vertexCount + 1; i++) {\r\n\t\t\t\t\t\tvertex = parseInt (lineParts[i]);\r\n\t\t\t\t\t\tvertices.push (vertex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tOnFace (vertices);\r\n\t\t\t\t\treadState.readFaces += 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction ProcessFile (stringBuffer)\r\n\t\t{\r\n\t\t\tvar readState = {\r\n\t\t\t\toffHeaderFound : false,\r\n\t\t\t\tinfoFound : false,\r\n\t\t\t\tvertexCount : 0,\r\n\t\t\t\tfaceCount : 0,\r\n\t\t\t\treadVertices : 0,\r\n\t\t\t\treadFaces : 0\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tvar lines = stringBuffer.split ('\\n');\r\n\t\t\tvar i, line;\r\n\t\t\tfor (i = 0; i < lines.length; i++) {\r\n\t\t\t\tline = lines[i].trim ();\r\n\t\t\t\tProcessLine (line, readState);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (callbacks === undefined || callbacks === null) {\r\n\t\t\tcallbacks = {};\r\n\t\t}\r\n\r\n\t\tProcessFile (stringBuffer);\r\n\t};\r\n\r\n\tJSM.ConvertOffToJsonData = function (stringBuffer)\r\n\t{\r\n\t\tvar triangleModel = new JSM.TriangleModel ();\r\n\t\tvar index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));\r\n\t\tvar currentBody = triangleModel.GetBody (index);\r\n\t\t\r\n\t\tJSM.ReadOffFile (stringBuffer, {\r\n\t\t\tonVertex : function (x, y, z) {\r\n\t\t\t\tcurrentBody.AddVertex (x, y, z);\r\n\t\t\t},\r\n\t\t\tonFace : function (vertices) {\r\n\t\t\t\tvar i, v0, v1, v2;\r\n\t\t\t\tvar count = vertices.length;\r\n\t\t\t\tfor (i = 0; i < count - 2; i++) {\r\n\t\t\t\t\tv0 = vertices[0];\r\n\t\t\t\t\tv1 = vertices[i + 1];\r\n\t\t\t\t\tv2 = vertices[i + 2];\r\n\t\t\t\t\tcurrentBody.AddTriangle (v0, v1, v2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\ttriangleModel.Finalize ();\r\n\t\t\r\n\t\tvar jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/import/importercommon',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ImportFileList = function ()\r\n\t{\r\n\t\tthis.descriptors = null;\r\n\t\tthis.isFile = null;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.InitFromFiles = function (fileList)\r\n\t{\r\n\t\tthis.descriptors = [];\r\n\t\tvar i, file, descriptor;\r\n\t\tfor (i = 0; i < fileList.length; i++) {\r\n\t\t\tfile = fileList[i];\r\n\t\t\tdescriptor = {\r\n\t\t\t\toriginalObject : file,\r\n\t\t\t\toriginalFileName : file.name,\r\n\t\t\t\tfileName : file.name.toUpperCase (),\r\n\t\t\t\textension : this.GetFileExtension (file.name).toUpperCase ()\r\n\t\t\t};\r\n\t\t\tthis.descriptors.push (descriptor);\r\n\t\t}\r\n\t\tthis.isFile = true;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.InitFromURLs = function (urlList)\r\n\t{\r\n\t\tthis.descriptors = [];\r\n\t\tvar i, url, fileName, descriptor;\r\n\t\tfor (i = 0; i < urlList.length; i++) {\r\n\t\t\turl = urlList[i];\r\n\t\t\tfileName = this.GetFileName (url);\r\n\t\t\tdescriptor = {\r\n\t\t\t\toriginalObject : url,\r\n\t\t\t\toriginalFileName : fileName,\r\n\t\t\t\tfileName : fileName.toUpperCase (),\r\n\t\t\t\textension : this.GetFileExtension (fileName).toUpperCase ()\r\n\t\t\t};\r\n\t\t\tthis.descriptors.push (descriptor);\r\n\t\t}\r\n\t\tthis.isFile = false;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.GetInputList = function ()\r\n\t{\r\n\t\tfunction IsArrayBuffer (descriptor)\r\n\t\t{\r\n\t\t\tif (descriptor.extension == '.OBJ' || descriptor.extension == '.MTL' || descriptor.extension == '.OFF') {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tvar result = [];\r\n\t\tvar i, descriptor, inputListElem;\r\n\t\tfor (i = 0; i < this.descriptors.length; i++) {\r\n\t\t\tdescriptor = this.descriptors[i];\r\n\t\t\tinputListElem = {\r\n\t\t\t\toriginalObject : descriptor.originalObject,\r\n\t\t\t\tisFile : this.isFile,\r\n\t\t\t\tisArrayBuffer : IsArrayBuffer (descriptor)\r\n\t\t\t};\r\n\t\t\tresult.push (inputListElem);\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.GetFileName = function (fullFileName)\r\n\t{\r\n\t\tvar splitted = fullFileName.split ('/');\r\n\t\tif (splitted.length == 1) {\r\n\t\t\tsplitted = fullFileName.split ('\\\\');\r\n\t\t}\r\n\t\tif (splitted.length === 0) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tvar fileName = splitted[splitted.length - 1];\r\n\t\treturn decodeURI (fileName);\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.GetFileDescriptor = function (index)\r\n\t{\r\n\t\treturn this.descriptors[index];\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.GetMainFileIndex = function ()\r\n\t{\r\n\t\tvar i, descriptor;\r\n\t\tfor (i = 0; i < this.descriptors.length; i++) {\r\n\t\t\tdescriptor = this.descriptors[i];\r\n\t\t\tif (this.IsSupportedExtension (descriptor.extension)) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.GetFileIndexByName = function (fileName)\r\n\t{\r\n\t\tvar i, descriptor, currentFileName;\r\n\t\tfor (i = 0; i < this.descriptors.length; i++) {\r\n\t\t\tdescriptor = this.descriptors[i];\r\n\t\t\tcurrentFileName = this.GetFileName (fileName);\r\n\t\t\tif (descriptor.fileName == currentFileName.toUpperCase ()) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.IsSupportedExtension = function (extension)\r\n\t{\r\n\t\tif (extension == '.3DS' || extension == '.OBJ' || extension == '.STL' || extension == '.OFF') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tJSM.ImportFileList.prototype.GetFileExtension = function (fileName)\r\n\t{\r\n\t\tvar lastPoint = fileName.lastIndexOf ('.');\r\n\t\tif (lastPoint == -1) {\r\n\t\t\treturn '';\r\n\t\t}\r\n\t\tvar extension = fileName.substr (lastPoint);\r\n\t\treturn extension;\r\n\t};\r\n\r\n\tJSM.ConvertImportFileListToJsonData = function (importFileList, callbacks)\r\n\t{\r\n\t\tfunction OnError ()\r\n\t\t{\r\n\t\t\tif (callbacks.onError !== undefined && callbacks.onError !== null) {\r\n\t\t\t\tcallbacks.onError ();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction OnReady (fileNames, jsonData)\r\n\t\t{\r\n\t\t\tif (callbacks.onReady !== undefined && callbacks.onReady !== null) {\r\n\t\t\t\tcallbacks.onReady (fileNames, jsonData);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction FileRequested (importFileList, resultBuffers, fileName, fileNames)\r\n\t\t{\r\n\t\t\tvar requestedFileIndex = importFileList.GetFileIndexByName (fileName);\r\n\t\t\tvar currentFileName = importFileList.GetFileName (fileName);\r\n\t\t\tif (requestedFileIndex == -1) {\r\n\t\t\t\tfileNames.missing.push (currentFileName);\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif (fileNames.requested.indexOf (currentFileName) == -1) {\r\n\t\t\t\tfileNames.requested.push (currentFileName);\r\n\t\t\t}\r\n\t\t\treturn resultBuffers[requestedFileIndex];\t\r\n\t\t}\r\n\t\t\r\n\t\tvar mainFileIndex = importFileList.GetMainFileIndex ();\r\n\t\tif (mainFileIndex === -1) {\r\n\t\t\tOnError ();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar mainFile = importFileList.GetFileDescriptor (mainFileIndex);\r\n\t\tvar fileNames = {\r\n\t\t\tmain : mainFile.originalFileName,\r\n\t\t\trequested : [],\r\n\t\t\tmissing : []\r\n\t\t};\r\n\r\n\t\tvar inputList = importFileList.GetInputList ();\r\n\t\ttry {\r\n\t\t\tif (mainFile.extension == '.3DS') {\r\n\t\t\t\tJSM.LoadMultipleBuffers (inputList, function (resultBuffers) {\r\n\t\t\t\t\tvar mainFileBuffer = resultBuffers[mainFileIndex];\r\n\t\t\t\t\tif (mainFileBuffer === null) {\r\n\t\t\t\t\t\tOnError ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar jsonData = JSM.Convert3dsToJsonData (mainFileBuffer, {\r\n\t\t\t\t\t\t\tonFileRequested : function (fileName) {\r\n\t\t\t\t\t\t\t\treturn FileRequested (importFileList, resultBuffers, fileName, fileNames);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tOnReady (fileNames, jsonData);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else if (mainFile.extension == '.OBJ') {\r\n\t\t\t\tJSM.LoadMultipleBuffers (inputList, function (resultBuffers) {\r\n\t\t\t\t\tvar mainFileBuffer = resultBuffers[mainFileIndex];\r\n\t\t\t\t\tif (mainFileBuffer === null) {\r\n\t\t\t\t\t\tOnError ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar jsonData = JSM.ConvertObjToJsonData (mainFileBuffer, {\r\n\t\t\t\t\t\t\tonFileRequested : function (fileName) {\r\n\t\t\t\t\t\t\t\treturn FileRequested (importFileList, resultBuffers, fileName, fileNames);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tOnReady (fileNames, jsonData);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else if (mainFile.extension == '.STL') {\r\n\t\t\t\tJSM.LoadMultipleBuffers (inputList, function (resultBuffers) {\r\n\t\t\t\t\tvar mainFileBuffer = resultBuffers[mainFileIndex];\r\n\t\t\t\t\tif (mainFileBuffer === null) {\r\n\t\t\t\t\t\tOnError ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (JSM.IsBinaryStlFile (mainFileBuffer)) {\r\n\t\t\t\t\t\t\tvar jsonData = JSM.ConvertStlToJsonData (mainFileBuffer, null);\r\n\t\t\t\t\t\t\tOnReady (fileNames, jsonData);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar i;\r\n\t\t\t\t\t\t\tfor (i = 0; i < inputList.length; i++) {\r\n\t\t\t\t\t\t\t\tinputList[i].isArrayBuffer = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tJSM.LoadMultipleBuffers (inputList, function (resultBuffers) {\r\n\t\t\t\t\t\t\t\tvar mainFileBuffer = resultBuffers[mainFileIndex];\r\n\t\t\t\t\t\t\t\tif (mainFileBuffer === null) {\r\n\t\t\t\t\t\t\t\t\tOnError ();\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tvar jsonData = JSM.ConvertStlToJsonData (null, mainFileBuffer);\r\n\t\t\t\t\t\t\t\t\tOnReady (fileNames, jsonData);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else if (mainFile.extension == '.OFF') {\r\n\t\t\t\tJSM.LoadMultipleBuffers (inputList, function (resultBuffers) {\r\n\t\t\t\t\tvar mainFileBuffer = resultBuffers[mainFileIndex];\r\n\t\t\t\t\tif (mainFileBuffer === null) {\r\n\t\t\t\t\t\tOnError ();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar jsonData = JSM.ConvertOffToJsonData (mainFileBuffer);\r\n\t\t\t\t\t\tOnReady (fileNames, jsonData);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (exception) {\r\n\t\t\tOnError ();\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ConvertFileListToJsonData = function (fileList, callbacks)\r\n\t{\r\n\t\tvar importFileList = new JSM.ImportFileList ();\r\n\t\timportFileList.InitFromFiles (fileList);\r\n\t\tJSM.ConvertImportFileListToJsonData (importFileList, callbacks);\r\n\t};\r\n\r\n\tJSM.ConvertURLListToJsonData = function (urlList, callbacks)\r\n\t{\r\n\t\tvar importFileList = new JSM.ImportFileList ();\r\n\t\timportFileList.InitFromURLs (urlList);\r\n\t\tJSM.ConvertImportFileListToJsonData (importFileList, callbacks);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/webglutils',[\"../core/jsm\"],function(JSM){\r\n\tJSM.IsPowerOfTwo = function (x)\r\n\t{\r\n\t\treturn (x & (x - 1) === 0);\r\n\t};\r\n\r\n\tJSM.NextPowerOfTwo = function (x)\r\n\t{\r\n\t\tif (JSM.IsPowerOfTwo (x)) {\r\n\t\t\treturn x;\r\n\t\t}\r\n\r\n\t\tvar result = 1;\r\n\t\twhile (result < x) {\r\n\t\t\tresult *= 2;\r\n\t\t}\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.ResizeImageToPowerOfTwoSides = function (image)\r\n\t{\r\n\t\tif (JSM.IsPowerOfTwo (image.width) && !JSM.IsPowerOfTwo (image.height)) {\r\n\t\t\treturn image;\r\n\t\t}\r\n\t\t\r\n\t\tvar width = JSM.NextPowerOfTwo (image.width);\r\n\t\tvar height = JSM.NextPowerOfTwo (image.height);\r\n\r\n\t\tvar canvas = document.createElement ('canvas');\r\n\t\tcanvas.width = width;\r\n\t\tcanvas.height = height;\r\n\t\t\r\n\t\tvar context = canvas.getContext ('2d');\r\n\t\tcontext.drawImage (image, 0, 0, width, height);\r\n\t\treturn context.getImageData (0, 0, width, height);\r\n\t};\r\n\r\n\tJSM.WebGLInitContext = function (canvas)\r\n\t{\r\n\t\tif (canvas === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tif (canvas.getContext === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tvar context = canvas.getContext ('webgl') || canvas.getContext ('experimental-webgl');\r\n\t\tif (context === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tcontext.viewport (0, 0, canvas.width, canvas.height);\r\n\t\tcontext.clearColor (1.0, 1.0, 1.0, 1.0);\r\n\t\treturn context;\r\n\t};\r\n\r\n\tJSM.WebGLInitShaderProgram = function (context, vertexShader, fragmentShader, onError)\r\n\t{\r\n\t\tfunction CompileShader (context, script, type, onError)\r\n\t\t{\r\n\t\t\tvar shader = context.createShader (type);\r\n\t\t\tcontext.shaderSource (shader, script);\r\n\t\t\tcontext.compileShader (shader);\r\n\t\t\tif (!context.getShaderParameter (shader, context.COMPILE_STATUS)) {\r\n\t\t\t\tif (onError !== undefined && onError !== null) {\r\n\t\t\t\t\tonError (context.getShaderInfoLog (shader));\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn shader;\r\n\t\t}\r\n\t\t\r\n\t\tfunction CreateShader (context, fragmentShaderScript, vertexShaderScript, onError)\r\n\t\t{\r\n\t\t\tvar fragmentShader = CompileShader (context, fragmentShaderScript, context.FRAGMENT_SHADER, onError);\r\n\t\t\tvar vertexShader = CompileShader (context, vertexShaderScript, context.VERTEX_SHADER, onError);\r\n\t\t\tif (fragmentShader === null || vertexShader === null) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tvar shaderProgram = context.createProgram ();\r\n\t\t\tcontext.attachShader (shaderProgram, vertexShader);\r\n\t\t\tcontext.attachShader (shaderProgram, fragmentShader);\r\n\t\t\tcontext.linkProgram (shaderProgram);\r\n\t\t\tif (!context.getProgramParameter (shaderProgram, context.LINK_STATUS)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn shaderProgram;\r\n\t\t}\r\n\t\t\r\n\t\tvar shader = CreateShader (context, fragmentShader, vertexShader, onError);\r\n\t\tif (shader === null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tcontext.useProgram (shader);\r\n\t\treturn shader;\r\n\t};\r\n\r\n\tJSM.WebGLGetFloatTextureBufferSize = function (array)\r\n\t{\r\n\t\treturn JSM.NextPowerOfTwo (Math.ceil (Math.sqrt (array.length / 4.0)));\r\n\t};\r\n\r\n\tJSM.WebGLCreateFloatTextureBuffer = function (context, array, size)\r\n\t{\r\n\t\tvar floatArray = null;\r\n\t\tif (array !== null) {\r\n\t\t\twhile (array.length < size * size * 4) {\r\n\t\t\t\tarray.push (0.0);\r\n\t\t\t}\r\n\t\t\tfloatArray = new Float32Array (array);\r\n\t\t}\r\n\t\tvar textureBuffer = context.createTexture ();\r\n\t\tcontext.bindTexture (context.TEXTURE_2D, textureBuffer);\r\n\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.NEAREST);\r\n\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.NEAREST);\r\n\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\r\n\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\r\n\t\tcontext.texImage2D (context.TEXTURE_2D, 0, context.RGBA, size, size, 0, context.RGBA, context.FLOAT, floatArray);\r\n\t\tcontext.bindTexture (context.TEXTURE_2D, null);\r\n\t\treturn textureBuffer;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/renderlight',[\"../core/jsm\"],function(JSM){\r\n\tJSM.RenderAmbientLight = function (color)\r\n\t{\r\n\t\tthis.color = JSM.HexColorToNormalizedRGBComponents (color);\r\n\t};\r\n\r\n\tJSM.RenderDirectionalLight = function (diffuse, specular, direction)\r\n\t{\r\n\t\tthis.diffuse = JSM.HexColorToNormalizedRGBComponents (diffuse);\r\n\t\tthis.specular = JSM.HexColorToNormalizedRGBComponents (specular);\r\n\t\tthis.direction = direction.Clone ();\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/rendermaterial',[\"../core/jsm\"],function(JSM){\r\n\tJSM.RenderMaterialFlags = {\r\n\t\tPoint : 1,\r\n\t\tLine : 2,\r\n\t\tTriangle : 4,\r\n\t\tTextured : 8,\r\n\t\tTransparent : 16\r\n\t};\r\n\r\n\tJSM.RenderMaterial = function (type, parameters)\r\n\t{\r\n\t\tthis.type = type;\r\n\t\tthis.ambient = [0.0, 0.8, 0.0];\r\n\t\tthis.diffuse = [0.0, 0.8, 0.0];\r\n\t\tthis.specular = [0.0, 0.0, 0.0];\r\n\t\tthis.shininess = 0.0;\r\n\t\tthis.opacity = 1.0;\r\n\t\tthis.reflection = 0.0;\r\n\t\tthis.singleSided = false;\r\n\t\tthis.pointSize = 0.1;\r\n\t\tthis.texture = null;\r\n\t\tJSM.CopyObjectProperties (parameters, this, true);\r\n\t};\r\n\r\n\tJSM.RenderMaterial.prototype.SetType = function (type)\r\n\t{\r\n\t\tthis.type = type;\r\n\t};\r\n\r\n\tJSM.RenderMaterial.prototype.SetBuffers = function (textureBuffer, textureImage)\r\n\t{\r\n\t\tthis.textureBuffer = textureBuffer;\r\n\t\tthis.textureImage = textureImage;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/rendermesh',[\"../core/jsm\"],function(JSM){\r\n\tJSM.RenderMesh = function (material)\r\n\t{\r\n\t\tthis.material = material;\r\n\t\t\r\n\t\tthis.vertexArray = null;\r\n\t\tthis.normalArray = null;\r\n\t\tthis.uvArray = null;\r\n\t\t\r\n\t\tthis.vertexBuffer = null;\r\n\t\tthis.normalBuffer = null;\r\n\t\tthis.uvBuffer = null;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.SetMaterial = function (material)\r\n\t{\r\n\t\tthis.material = material;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetMaterial = function ()\r\n\t{\r\n\t\treturn this.material;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.SetVertexArray = function (vertices)\r\n\t{\r\n\t\tthis.vertexArray = new Float32Array (vertices);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.SetNormalArray = function (normals)\r\n\t{\r\n\t\tthis.normalArray = new Float32Array (normals);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.SetUVArray = function (uvs)\r\n\t{\r\n\t\tthis.uvArray = new Float32Array (uvs);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.HasVertexArray = function ()\r\n\t{\r\n\t\treturn this.vertexArray !== null;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.HasNormalArray = function ()\r\n\t{\r\n\t\treturn this.normalArray !== null;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.HasUVArray = function ()\r\n\t{\r\n\t\treturn this.uvArray !== null;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetVertexArray = function ()\r\n\t{\r\n\t\treturn this.vertexArray;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetNormalArray = function ()\r\n\t{\r\n\t\treturn this.normalArray;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetUVArray = function ()\r\n\t{\r\n\t\treturn this.uvArray;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.SetBuffers = function (vertexBuffer, normalBuffer, uvBuffer)\r\n\t{\r\n\t\tthis.vertexBuffer = vertexBuffer;\r\n\t\tthis.normalBuffer = normalBuffer;\r\n\t\tthis.uvBuffer = uvBuffer;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetVertexBuffer = function ()\r\n\t{\r\n\t\treturn this.vertexBuffer;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetNormalBuffer = function ()\r\n\t{\r\n\t\treturn this.normalBuffer;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetUVBuffer = function ()\r\n\t{\r\n\t\treturn this.uvBuffer;\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.VertexCount = function ()\r\n\t{\r\n\t\treturn parseInt (this.vertexArray.length / 3, 10);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.NormalCount = function ()\r\n\t{\r\n\t\treturn parseInt (this.normalArray.length / 3, 10);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.UVCount = function ()\r\n\t{\r\n\t\treturn parseInt (this.uvArray.length / 2, 10);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetVertex = function (index)\r\n\t{\r\n\t\treturn new JSM.Coord (this.vertexArray[3 * index], this.vertexArray[3 * index + 1], this.vertexArray[3 * index + 2]);\r\n\t};\r\n\r\n\tJSM.RenderMesh.prototype.GetTransformedVertex = function (index, transformation)\r\n\t{\r\n\t\tvar vertex = this.GetVertex (index);\r\n\t\treturn transformation.Apply (vertex);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/renderbody',[\"../core/jsm\"],function(JSM){\r\n\tJSM.RenderBody = function ()\r\n\t{\r\n\t\tthis.transformation = new JSM.Transformation ();\r\n\t\tthis.meshes = {};\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.AddMesh = function (mesh)\r\n\t{\r\n\t\tif (this.meshes[mesh.material.type] === undefined) {\r\n\t\t\tthis.meshes[mesh.material.type] = [];\r\n\t\t}\r\n\t\tthis.meshes[mesh.material.type].push (mesh);\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.EnumerateMeshes = function (onMeshFound)\r\n\t{\r\n\t\tvar meshType;\r\n\t\tfor (meshType in this.meshes) {\r\n\t\t\tif (this.meshes.hasOwnProperty (meshType)) {\r\n\t\t\t\tthis.EnumerateTypedMeshes (meshType, onMeshFound);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.HasTypedMeshes = function (meshType)\r\n\t{\r\n\t\treturn this.meshes[meshType] !== undefined;\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.EnumerateTypedMeshes = function (meshType, onMeshFound)\r\n\t{\r\n\t\tif (!this.HasTypedMeshes (meshType)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar typedMeshes = this.meshes[meshType];\r\n\t\tvar\ti, typedMesh;\r\n\t\tfor\t(i = 0; i < typedMeshes.length; i++) {\r\n\t\t\ttypedMesh = typedMeshes[i];\r\n\t\t\tonMeshFound (typedMesh);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.EnumerateMeshesWithFlag = function (flag, onMeshFound)\r\n\t{\r\n\t\tvar meshType;\r\n\t\tfor (meshType in this.meshes) {\r\n\t\t\tif (this.meshes.hasOwnProperty (meshType) && (meshType & flag)) {\r\n\t\t\t\tthis.EnumerateTypedMeshes (meshType, onMeshFound);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.GetTransformation = function ()\r\n\t{\r\n\t\treturn this.transformation;\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.GetTransformationMatrix = function ()\r\n\t{\r\n\t\treturn this.transformation.matrix;\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.SetTransformation = function (transformation)\r\n\t{\r\n\t\tthis.transformation = transformation;\r\n\t};\r\n\r\n\tJSM.RenderBody.prototype.AppendTransformation = function (transformation)\r\n\t{\r\n\t\tthis.transformation.Append (transformation);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/shaderprogram',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ShaderType = {\r\n\t\tPoint : 0,\r\n\t\tLine : 1,\r\n\t\tTriangle : 2,\r\n\t\tTexturedTriangle : 3\r\n\t};\r\n\r\n\tJSM.ShaderProgram = function (context)\r\n\t{\r\n\t\tthis.context = context;\r\n\t\tthis.globalParams = null;\r\n\t\tthis.shaders = null;\r\n\t\tthis.currentShader = null;\r\n\t\tthis.currentType = null;\r\n\t\tthis.cullEnabled = null;\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.Init = function ()\r\n\t{\r\n\t\tif (!this.InitGlobalParams ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.InitShaders ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\t\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.GetMaxLightCount = function ()\r\n\t{\r\n\t\treturn this.globalParams.maxLightCount;\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.InitGlobalParams = function ()\r\n\t{\r\n\t\tvar noDirectionalLight = new JSM.RenderDirectionalLight (0x000000, 0x000000, new JSM.Vector (0.0, 0.0, 0.0));\r\n\t\tthis.globalParams = {\r\n\t\t\tnoDirectionalLight : noDirectionalLight,\r\n\t\t\tmaxLightCount : 4\r\n\t\t};\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.InitShaders = function ()\r\n\t{\r\n\t\tfunction GetFragmentShaderScript (shaderType, globalParams)\r\n\t\t{\r\n\t\t\tvar script = null;\r\n\t\t\tif (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {\r\n\t\t\t\tscript = [\r\n\t\t\t\t\t'#define MAX_LIGHTS ' + globalParams.maxLightCount,\r\n\r\n\t\t\t\t\t'struct Light',\r\n\t\t\t\t\t'{',\r\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\r\n\t\t\t\t\t'};',\r\n\r\n\t\t\t\t\t'struct Material',\r\n\t\t\t\t\t'{',\r\n\t\t\t\t\t'\tmediump vec3 ambientColor;',\r\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\r\n\t\t\t\t\t'};',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'uniform mediump vec3 uAmbientLightColor;',\r\n\t\t\t\t\t'uniform Light uLights[MAX_LIGHTS];',\r\n\t\t\t\t\t'uniform Material uMaterial;',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'void main (void) {',\r\n\t\t\t\t\t'\tmediump vec3 ambientComponent = uMaterial.ambientColor * uAmbientLightColor;',\r\n\t\t\t\t\t'\tmediump vec3 diffuseComponent = vec3 (0.0, 0.0, 0.0);',\r\n\t\t\t\t\t'\tfor (int i = 0; i < MAX_LIGHTS; i++) {',\r\n\t\t\t\t\t'\t\tdiffuseComponent += uMaterial.diffuseColor * uLights[i].diffuseColor;',\r\n\t\t\t\t\t'\t}',\r\n\t\t\t\t\t'\tgl_FragColor = vec4 (ambientComponent + diffuseComponent, 1.0);',\r\n\t\t\t\t\t'}'\r\n\t\t\t\t].join ('\\n');\r\n\t\t\t} else if (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\t\tscript = [\r\n\t\t\t\t\t'#define ' + (shaderType == JSM.ShaderType.Triangle ? 'NOTEXTURE' : 'USETEXTURE'),\r\n\t\t\t\t\t'#define MAX_LIGHTS ' + globalParams.maxLightCount,\r\n\t\t\t\t\t\r\n\t\t\t\t\t'struct Light',\r\n\t\t\t\t\t'{',\r\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\r\n\t\t\t\t\t'\tmediump vec3 specularColor;',\r\n\t\t\t\t\t'\tmediump vec3 direction;',\r\n\t\t\t\t\t'};',\r\n\r\n\t\t\t\t\t'struct Material',\r\n\t\t\t\t\t'{',\r\n\t\t\t\t\t'\tmediump vec3 ambientColor;',\r\n\t\t\t\t\t'\tmediump vec3 diffuseColor;',\r\n\t\t\t\t\t'\tmediump vec3 specularColor;',\r\n\t\t\t\t\t'\tmediump float shininess;',\r\n\t\t\t\t\t'\tmediump float opacity;',\r\n\t\t\t\t\t'};',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'uniform mediump vec3 uAmbientLightColor;',\r\n\t\t\t\t\t'uniform Light uLights[MAX_LIGHTS];',\r\n\t\t\t\t\t'uniform Material uMaterial;',\r\n\r\n\t\t\t\t\t'varying mediump vec3 vVertex;',\r\n\t\t\t\t\t'varying mediump vec3 vNormal;',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'#ifdef USETEXTURE',\r\n\t\t\t\t\t'varying mediump vec2 vUV;',\r\n\t\t\t\t\t'uniform sampler2D uSampler;',\r\n\t\t\t\t\t'#endif',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'void main (void) {',\r\n\t\t\t\t\t'\tmediump vec3 N = normalize (vNormal);',\r\n\t\t\t\t\t'\tif (!gl_FrontFacing) {',\r\n\t\t\t\t\t'\t\tN = -N;',\r\n\t\t\t\t\t'\t}',\r\n\t\t\t\t\t'\tmediump vec3 ambientComponent = uMaterial.ambientColor * uAmbientLightColor;',\r\n\t\t\t\t\t'\tmediump vec3 diffuseComponent = vec3 (0.0, 0.0, 0.0);',\r\n\t\t\t\t\t'\tmediump vec3 specularComponent = vec3 (0.0, 0.0, 0.0);',\r\n\t\t\t\t\t'\tmediump vec3 E = normalize (-vVertex);',\r\n\r\n\t\t\t\t\t'\tfor (int i = 0; i < MAX_LIGHTS; i++) {',\r\n\t\t\t\t\t'\t\tmediump vec3 L = normalize (-uLights[i].direction);',\r\n\t\t\t\t\t'\t\tmediump vec3 R = normalize (-reflect (L, N));',\r\n\t\t\t\t\t'\t\tdiffuseComponent += uMaterial.diffuseColor * uLights[i].diffuseColor * max (dot (N, L), 0.0);',\r\n\t\t\t\t\t'\t\tspecularComponent += uMaterial.specularColor * uLights[i].specularColor * pow (max (dot (R, E), 0.0), uMaterial.shininess);',\r\n\t\t\t\t\t'\t}',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'#ifdef USETEXTURE',\r\n\t\t\t\t\t'\tmediump vec3 textureColor = texture2D (uSampler, vec2 (vUV.s, vUV.t)).xyz;',\r\n\t\t\t\t\t'\tambientComponent = ambientComponent * textureColor;',\r\n\t\t\t\t\t'\tdiffuseComponent = diffuseComponent * textureColor;',\r\n\t\t\t\t\t'\tspecularComponent = specularComponent * textureColor;',\r\n\t\t\t\t\t'#endif',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'\tambientComponent = clamp (ambientComponent, 0.0, 1.0);',\r\n\t\t\t\t\t'\tdiffuseComponent = clamp (diffuseComponent, 0.0, 1.0);',\r\n\t\t\t\t\t'\tspecularComponent = clamp (specularComponent, 0.0, 1.0);',\r\n\t\t\t\t\t'\tgl_FragColor = vec4 (ambientComponent + diffuseComponent + specularComponent, uMaterial.opacity);',\r\n\t\t\t\t\t'}'\r\n\t\t\t\t].join ('\\n');\r\n\t\t\t}\r\n\t\t\treturn script;\r\n\t\t}\r\n\t\t\r\n\t\tfunction GetVertexShaderScript (shaderType)\r\n\t\t{\r\n\t\t\tvar script = null;\r\n\t\t\tif (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\t\tscript = [\r\n\t\t\t\t\t'#define ' + (shaderType == JSM.ShaderType.Triangle ? 'NOTEXTURE' : 'USETEXTURE'),\r\n\t\t\t\t\t'attribute mediump vec3 aVertexPosition;',\r\n\t\t\t\t\t'attribute mediump vec3 aVertexNormal;',\r\n\r\n\t\t\t\t\t'uniform mediump mat4 uViewMatrix;',\r\n\t\t\t\t\t'uniform mediump mat4 uProjectionMatrix;',\r\n\t\t\t\t\t'uniform mediump mat4 uTransformationMatrix;',\r\n\r\n\t\t\t\t\t'varying mediump vec3 vVertex;',\r\n\t\t\t\t\t'varying mediump vec3 vNormal;',\r\n\r\n\t\t\t\t\t'#ifdef USETEXTURE',\r\n\t\t\t\t\t'attribute mediump vec2 aVertexUV;',\r\n\t\t\t\t\t'varying mediump vec2 vUV;',\r\n\t\t\t\t\t'#endif',\r\n\r\n\t\t\t\t\t'void main (void) {',\r\n\t\t\t\t\t'\tmat4 modelViewMatrix = uViewMatrix * uTransformationMatrix;',\r\n\t\t\t\t\t'\tvVertex = vec3 (modelViewMatrix * vec4 (aVertexPosition, 1.0));',\r\n\t\t\t\t\t'\tvNormal = normalize (vec3 (modelViewMatrix * vec4 (aVertexNormal, 0.0)));',\r\n\t\t\t\t\t'#ifdef USETEXTURE',\r\n\t\t\t\t\t'\tvUV = aVertexUV;',\r\n\t\t\t\t\t'#endif',\r\n\t\t\t\t\t'\tgl_Position = uProjectionMatrix * vec4 (vVertex, 1.0);',\r\n\t\t\t\t\t'}'\r\n\t\t\t\t].join ('\\n');\r\n\t\t\t} else if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {\r\n\t\t\t\tscript = [\r\n\t\t\t\t\t'#define ' + (shaderType == JSM.ShaderType.Point ? 'POINT' : 'LINE'),\r\n\t\t\t\t\t'attribute mediump vec3 aVertexPosition;',\r\n\t\t\t\t\t\r\n\t\t\t\t\t'uniform mediump mat4 uViewMatrix;',\r\n\t\t\t\t\t'uniform mediump mat4 uProjectionMatrix;',\r\n\t\t\t\t\t'uniform mediump mat4 uTransformationMatrix;',\r\n\t\t\t\t\t'#ifdef POINT',\r\n\t\t\t\t\t'uniform mediump float uPointSize;',\r\n\t\t\t\t\t'#endif',\r\n\r\n\t\t\t\t\t'varying mediump vec3 vVertex;',\r\n\r\n\t\t\t\t\t'void main (void) {',\r\n\t\t\t\t\t'\tmat4 modelViewMatrix = uViewMatrix * uTransformationMatrix;',\r\n\t\t\t\t\t'\tvVertex = vec3 (modelViewMatrix * vec4 (aVertexPosition, 1.0));',\r\n\t\t\t\t\t'#ifdef POINT',\r\n\t\t\t\t\t'\tconst mediump float scale = 200.0;',\r\n\t\t\t\t\t'\tgl_PointSize = uPointSize * (scale / length (vVertex));',\r\n\t\t\t\t\t'#endif',\r\n\t\t\t\t\t'\tgl_Position = uProjectionMatrix * vec4 (vVertex, 1.0);',\r\n\t\t\t\t\t'}'\r\n\t\t\t\t].join ('\\n');\r\n\t\t\t}\r\n\t\t\treturn script;\r\n\t\t}\r\n\r\n\t\tfunction InitShaderParameters (context, shader, globalParams, shaderType)\r\n\t\t{\r\n\t\t\tif (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\t\tshader.vertexPositionAttribute = context.getAttribLocation (shader, 'aVertexPosition');\r\n\t\t\t\tshader.vertexNormalAttribute = context.getAttribLocation (shader, 'aVertexNormal');\r\n\r\n\t\t\t\tshader.ambientLightColorUniform = context.getUniformLocation (shader, 'uAmbientLightColor');\r\n\t\t\t\tshader.lightUniforms = [];\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < globalParams.maxLightCount; i++) {\r\n\t\t\t\t\tshader.lightUniforms.push ({\r\n\t\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uLights[' + i + '].diffuseColor'),\r\n\t\t\t\t\t\tspecularColor : context.getUniformLocation (shader, 'uLights[' + i + '].specularColor'),\r\n\t\t\t\t\t\tdirection : context.getUniformLocation (shader, 'uLights[' + i + '].direction')\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tshader.materialUniforms = {\r\n\t\t\t\t\tambientColor : context.getUniformLocation (shader, 'uMaterial.ambientColor'),\r\n\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uMaterial.diffuseColor'),\r\n\t\t\t\t\tspecularColor : context.getUniformLocation (shader, 'uMaterial.specularColor'),\r\n\t\t\t\t\tshininess : context.getUniformLocation (shader, 'uMaterial.shininess'),\r\n\t\t\t\t\topacity : context.getUniformLocation (shader, 'uMaterial.opacity')\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tshader.vMatrixUniform = context.getUniformLocation (shader, 'uViewMatrix');\r\n\t\t\t\tshader.pMatrixUniform = context.getUniformLocation (shader, 'uProjectionMatrix');\r\n\t\t\t\tshader.tMatrixUniform = context.getUniformLocation (shader, 'uTransformationMatrix');\r\n\r\n\t\t\t\tif (shaderType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\t\t\tshader.vertexUVAttribute = context.getAttribLocation (shader, 'aVertexUV');\r\n\t\t\t\t\tshader.samplerUniform = context.getUniformLocation (shader, 'uSampler');\r\n\t\t\t\t}\r\n\t\t\t} else if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {\r\n\t\t\t\tshader.vertexPositionAttribute = context.getAttribLocation (shader, 'aVertexPosition');\r\n\r\n\t\t\t\tshader.ambientLightColorUniform = context.getUniformLocation (shader, 'uAmbientLightColor');\r\n\t\t\t\tshader.lightUniforms = [];\r\n\t\t\t\tfor (i = 0; i < globalParams.maxLightCount; i++) {\r\n\t\t\t\t\tshader.lightUniforms.push ({\r\n\t\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uLights[' + i + '].diffuseColor')\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshader.materialUniforms = {\r\n\t\t\t\t\tambientColor : context.getUniformLocation (shader, 'uMaterial.ambientColor'),\r\n\t\t\t\t\tdiffuseColor : context.getUniformLocation (shader, 'uMaterial.diffuseColor'),\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tshader.vMatrixUniform = context.getUniformLocation (shader, 'uViewMatrix');\r\n\t\t\t\tshader.pMatrixUniform = context.getUniformLocation (shader, 'uProjectionMatrix');\r\n\t\t\t\tshader.tMatrixUniform = context.getUniformLocation (shader, 'uTransformationMatrix');\r\n\r\n\t\t\t\tif (shaderType == JSM.ShaderType.Point) {\r\n\t\t\t\t\tshader.pointSizeUniform = context.getUniformLocation (shader, 'uPointSize');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction InitShader (context, shaders, globalParams, shaderType)\r\n\t\t{\r\n\t\t\tvar vertexShaderScript = GetVertexShaderScript (shaderType);\r\n\t\t\tvar fragmentShaderScript = GetFragmentShaderScript (shaderType, globalParams);\r\n\t\t\tif (vertexShaderScript === null || fragmentShaderScript === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar shader = JSM.WebGLInitShaderProgram (context, vertexShaderScript, fragmentShaderScript, function (message) {\r\n\t\t\t\tJSM.Message (message);\r\n\t\t\t});\r\n\t\t\tif (shader === null) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcontext.useProgram (shader);\r\n\t\t\tInitShaderParameters (context, shader, globalParams, shaderType);\r\n\t\t\tshaders[shaderType] = shader;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tthis.shaders = {};\r\n\t\t\r\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Point)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Line)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Triangle)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.TexturedTriangle)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.context.enable (this.context.DEPTH_TEST);\r\n\t\tthis.context.depthFunc (this.context.LEQUAL);\r\n\t\t\r\n\t\tthis.context.enable (this.context.BLEND);\r\n\t\tthis.context.blendEquation (this.context.FUNC_ADD);\r\n\t\tthis.context.blendFunc (this.context.SRC_ALPHA, this.context.ONE_MINUS_SRC_ALPHA);\r\n\r\n\t\tthis.context.disable (this.context.CULL_FACE);\r\n\t\tthis.cullEnabled = false;\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.CompileMaterial = function (material, textureLoaded)\r\n\t{\r\n\t\tif (material.texture !== null) {\r\n\t\t\tvar context = this.context;\r\n\t\t\tvar textureBuffer = context.createTexture ();\r\n\t\t\tvar textureImage = new Image ();\r\n\t\t\ttextureImage.src = material.texture;\r\n\t\t\ttextureImage.onload = function () {\r\n\t\t\t\tvar resizedImage = JSM.ResizeImageToPowerOfTwoSides (textureImage);\r\n\t\t\t\tcontext.bindTexture (context.TEXTURE_2D, textureBuffer);\r\n\t\t\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.LINEAR);\r\n\t\t\t\tcontext.texParameteri (context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);\r\n\t\t\t\tcontext.texImage2D (context.TEXTURE_2D, 0, context.RGBA, context.RGBA, context.UNSIGNED_BYTE, resizedImage);\r\n\t\t\t\tcontext.generateMipmap (context.TEXTURE_2D);\r\n\t\t\t\tcontext.bindTexture (context.TEXTURE_2D, null);\r\n\t\t\t\tif (textureLoaded !== undefined && textureLoaded !== null) {\r\n\t\t\t\t\ttextureLoaded ();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tmaterial.SetBuffers (textureBuffer, textureImage);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.CompileMesh = function (mesh)\r\n\t{\r\n\t\tvar context = this.context;\r\n\t\tvar vertexBuffer = context.createBuffer ();\r\n\t\tcontext.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);\r\n\t\tcontext.bufferData (context.ARRAY_BUFFER, mesh.GetVertexArray (), context.STATIC_DRAW);\r\n\t\tvertexBuffer.itemSize = 3;\r\n\t\tvertexBuffer.numItems = mesh.VertexCount ();\r\n\r\n\t\tvar normalBuffer = null;\r\n\t\tif (mesh.HasNormalArray ()) {\r\n\t\t\tnormalBuffer = context.createBuffer ();\r\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, normalBuffer);\r\n\t\t\tcontext.bufferData (context.ARRAY_BUFFER, mesh.GetNormalArray (), context.STATIC_DRAW);\r\n\t\t\tnormalBuffer.itemSize = 3;\r\n\t\t\tnormalBuffer.numItems = mesh.NormalCount ();\r\n\t\t}\r\n\r\n\t\tvar uvBuffer = null;\r\n\t\tif (mesh.HasUVArray ()) {\r\n\t\t\tuvBuffer = context.createBuffer ();\r\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, uvBuffer);\r\n\t\t\tcontext.bufferData (context.ARRAY_BUFFER, mesh.GetUVArray (), context.STATIC_DRAW);\r\n\t\t\tuvBuffer.itemSize = 2;\r\n\t\t\tuvBuffer.numItems = mesh.UVCount ();\r\n\t\t}\r\n\t\t\r\n\t\tmesh.SetBuffers (vertexBuffer, normalBuffer, uvBuffer);\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.GetShader = function (shaderType)\r\n\t{\r\n\t\treturn this.shaders[shaderType];\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.UseShader = function (shaderType)\r\n\t{\r\n\t\tthis.currentShader = this.GetShader (shaderType);\r\n\t\tthis.currentType = shaderType;\r\n\t\tthis.context.useProgram (this.currentShader);\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.SetParameters = function (ambientLight, directionalLights, viewMatrix, projectionMatrix)\r\n\t{\r\n\t\tfunction GetLight (directionalLights, index, noDirectionalLight)\r\n\t\t{\r\n\t\t\tif (index < directionalLights.length) {\r\n\t\t\t\treturn directionalLights[index];\r\n\t\t\t}\r\n\r\n\t\t\treturn noDirectionalLight;\r\n\t\t}\r\n\t\t\r\n\t\tvar context = this.context;\r\n\t\tvar shader = this.currentShader;\r\n\t\t\r\n\t\tvar i, light, lightDirection;\r\n\t\tif (this.currentType == JSM.ShaderType.Triangle || this.currentType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\tcontext.uniform3f (shader.ambientLightColorUniform, ambientLight.color[0], ambientLight.color[1], ambientLight.color[2]);\r\n\t\t\tfor (i = 0; i < this.globalParams.maxLightCount; i++) {\r\n\t\t\t\tlight = GetLight (directionalLights, i, this.globalParams.noDirectionalLight);\r\n\t\t\t\tlightDirection = JSM.ApplyRotation (viewMatrix, light.direction);\r\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].diffuseColor, light.diffuse[0], light.diffuse[1], light.diffuse[2]);\r\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].specularColor, light.specular[0], light.specular[1], light.specular[2]);\r\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].direction, lightDirection.x, lightDirection.y, lightDirection.z);\r\n\t\t\t}\r\n\t\t\tcontext.uniformMatrix4fv (shader.pMatrixUniform, false, projectionMatrix);\r\n\t\t\tcontext.uniformMatrix4fv (shader.vMatrixUniform, false, viewMatrix);\r\n\t\t} else if (this.currentType == JSM.ShaderType.Point || this.currentType == JSM.ShaderType.Line) {\r\n\t\t\tcontext.uniform3f (shader.ambientLightColorUniform, ambientLight.color[0], ambientLight.color[1], ambientLight.color[2]);\r\n\t\t\tfor (i = 0; i < this.globalParams.maxLightCount; i++) {\r\n\t\t\t\tlight = GetLight (directionalLights, i, this.globalParams.noDirectionalLight);\r\n\t\t\t\tcontext.uniform3f (shader.lightUniforms[i].diffuseColor, light.diffuse[0], light.diffuse[1], light.diffuse[2]);\r\n\t\t\t}\r\n\t\t\tcontext.uniformMatrix4fv (shader.pMatrixUniform, false, projectionMatrix);\r\n\t\t\tcontext.uniformMatrix4fv (shader.vMatrixUniform, false, viewMatrix);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.SetCullEnabled = function (enable)\r\n\t{\r\n\t\tif (enable && !this.cullEnabled) {\r\n\t\t\tthis.context.enable (this.context.CULL_FACE);\r\n\t\t\tthis.cullEnabled = true;\r\n\t\t} else if (!enable && this.cullEnabled) {\r\n\t\t\tthis.context.disable (this.context.CULL_FACE);\r\n\t\t\tthis.cullEnabled = false;\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ShaderProgram.prototype.DrawArrays = function (material, matrix, vertexBuffer, normalBuffer, uvBuffer)\r\n\t{\r\n\t\tvar context = this.context;\r\n\t\tvar shader = this.currentShader;\r\n\t\tthis.SetCullEnabled (material.singleSided);\r\n\t\t\r\n\t\tif (this.currentType == JSM.ShaderType.Triangle || this.currentType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\tcontext.uniform3f (shader.materialUniforms.ambientColor, material.ambient[0], material.ambient[1], material.ambient[2]);\r\n\t\t\tcontext.uniform3f (shader.materialUniforms.diffuseColor, material.diffuse[0], material.diffuse[1], material.diffuse[2]);\r\n\t\t\tcontext.uniform3f (shader.materialUniforms.specularColor, material.specular[0], material.specular[1], material.specular[2]);\r\n\t\t\tcontext.uniform1f (shader.materialUniforms.shininess, material.shininess);\r\n\t\t\tcontext.uniform1f (shader.materialUniforms.opacity, material.opacity);\r\n\r\n\t\t\tcontext.uniformMatrix4fv (shader.tMatrixUniform, false, matrix);\r\n\r\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);\r\n\t\t\tcontext.enableVertexAttribArray (shader.vertexPositionAttribute);\r\n\t\t\tcontext.vertexAttribPointer (shader.vertexPositionAttribute, vertexBuffer.itemSize, context.FLOAT, false, 0, 0);\r\n\t\t\t\r\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, normalBuffer);\r\n\t\t\tcontext.enableVertexAttribArray (shader.vertexNormalAttribute);\r\n\t\t\tcontext.vertexAttribPointer (shader.vertexNormalAttribute, normalBuffer.itemSize, context.FLOAT, false, 0, 0);\r\n\r\n\t\t\tif (this.currentType == JSM.ShaderType.TexturedTriangle) {\r\n\t\t\t\tcontext.activeTexture (context.TEXTURE0);\r\n\t\t\t\tcontext.bindTexture (context.TEXTURE_2D, material.textureBuffer);\r\n\t\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, uvBuffer);\r\n\t\t\t\tcontext.enableVertexAttribArray (shader.vertexUVAttribute);\r\n\t\t\t\tcontext.vertexAttribPointer (shader.vertexUVAttribute, uvBuffer.itemSize, context.FLOAT, false, 0, 0);\r\n\t\t\t\tcontext.uniform1i (shader.samplerUniform, 0);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcontext.drawArrays (context.TRIANGLES, 0, vertexBuffer.numItems);\r\n\t\t} else if (this.currentType == JSM.ShaderType.Point || this.currentType == JSM.ShaderType.Line) {\r\n\t\t\tcontext.uniform3f (shader.materialUniforms.ambientColor, material.ambient[0], material.ambient[1], material.ambient[2]);\r\n\t\t\tcontext.uniform3f (shader.materialUniforms.diffuseColor, material.diffuse[0], material.diffuse[1], material.diffuse[2]);\r\n\t\t\t\r\n\t\t\tcontext.uniformMatrix4fv (shader.tMatrixUniform, false, matrix);\r\n\t\t\t\r\n\t\t\tcontext.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);\r\n\t\t\tcontext.enableVertexAttribArray (shader.vertexPositionAttribute);\r\n\t\t\tcontext.vertexAttribPointer (shader.vertexPositionAttribute, vertexBuffer.itemSize, context.FLOAT, false, 0, 0);\r\n\t\t\t\r\n\t\t\tif (this.currentType == JSM.ShaderType.Point) {\r\n\t\t\t\tcontext.uniform1f (shader.pointSizeUniform, material.pointSize);\r\n\t\t\t\tcontext.drawArrays (context.POINTS, 0, vertexBuffer.numItems);\r\n\t\t\t} else if (this.currentType == JSM.ShaderType.Line) {\r\n\t\t\t\tcontext.drawArrays (context.LINES, 0, vertexBuffer.numItems);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/renderer',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Renderer = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.context = null;\r\n\t\tthis.shader = null;\r\n\t\t\r\n\t\tthis.ambientLight = null;\r\n\t\tthis.directionalLights = null;\r\n\t\tthis.bodies = null;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.Init = function (canvas)\r\n\t{\r\n\t\tif (!JSM.IsWebGLEnabled ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitContext (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitView ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitShaders ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitLights ()) {\r\n\t\t\treturn false;\r\n\t\t}\t\r\n\t\t\r\n\t\tif (!this.InitBodies ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.InitContext = function (canvas)\r\n\t{\r\n\t\tthis.canvas = canvas;\r\n\t\tif (this.canvas === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.canvas.getContext === undefined) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.context = this.canvas.getContext ('webgl') || this.canvas.getContext ('experimental-webgl');\r\n\t\tif (this.context === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.context = JSM.WebGLInitContext (canvas);\r\n\t\tif (this.context === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.InitShaders = function ()\r\n\t{\r\n\t\tthis.shader = new JSM.ShaderProgram (this.context);\r\n\t\treturn this.shader.Init ();\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.InitLights = function ()\r\n\t{\r\n\t\tthis.ambientLight = new JSM.RenderAmbientLight (0x000000);\r\n\t\tthis.directionalLights = [];\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.InitBodies = function ()\r\n\t{\r\n\t\tthis.bodies = [];\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.InitView = function ()\r\n\t{\r\n\t\tthis.directionalLights = [];\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.SetClearColor = function (red, green, blue)\r\n\t{\r\n\t\tthis.context.clearColor (red, green, blue, 1.0);\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.SetAmbientLight = function (light)\r\n\t{\r\n\t\tthis.ambientLight = light;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.AddLight = function (light)\r\n\t{\r\n\t\tvar maxLightCount = this.shader.GetMaxLightCount ();\r\n\t\tif (this.directionalLights.length >= maxLightCount) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tthis.directionalLights.push (light);\r\n\t\treturn this.directionalLights.length - 1;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.RemoveLight = function (light)\r\n\t{\r\n\t\tvar index = this.directionalLights.indexOf (light);\r\n\t\tif (index != -1) {\r\n\t\t\tthis.directionalLights.splice (index, 1);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.RemoveLights = function ()\r\n\t{\r\n\t\tthis.directionalLights = [];\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.GetLight = function (index)\r\n\t{\r\n\t\treturn this.directionalLights[index];\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.AddBody = function (renderBody, textureLoaded)\r\n\t{\r\n\t\tvar shader = this.shader;\r\n\t\trenderBody.EnumerateMeshes (function (mesh) {\r\n\t\t\tshader.CompileMaterial (mesh.GetMaterial (), textureLoaded);\r\n\t\t\tshader.CompileMesh (mesh);\r\n\t\t});\r\n\t\tthis.bodies.push (renderBody);\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.AddBodies = function (renderBodies, textureLoaded)\r\n\t{\r\n\t\tvar i, body;\r\n\t\tfor (i = 0; i < renderBodies.length; i++) {\r\n\t\t\tbody = renderBodies[i];\r\n\t\t\tthis.AddBody (body, textureLoaded);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.EnumerateBodies = function (onBodyFound)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tonBodyFound (this.bodies[i]);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.RemoveBody = function (body)\r\n\t{\r\n\t\tvar index = this.bodies.indexOf (body);\r\n\t\tif (index != -1) {\r\n\t\t\tthis.bodies.splice (index, 1);\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.RemoveBodies = function ()\r\n\t{\r\n\t\tthis.bodies = [];\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.GetBody = function (index)\r\n\t{\r\n\t\treturn this.bodies[index];\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.context.viewport (0, 0, this.canvas.width, this.canvas.height);\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.FindObjects = function (camera, screenX, screenY)\r\n\t{\r\n\t\tvar screenCoord = new JSM.Coord (screenX, this.canvas.height - screenY, 0.5);\r\n\t\tvar aspectRatio = this.canvas.width / this.canvas.height;\r\n\t\tvar viewPort = [0, 0, this.canvas.width, this.canvas.height];\r\n\t\tvar unprojected = JSM.Unproject (screenCoord, camera.eye, camera.center, camera.up, camera.fieldOfView * JSM.DegRad, aspectRatio, camera.nearClippingPlane, camera.farClippingPlane, viewPort);\r\n\t\tvar ray = new JSM.Ray (camera.eye, JSM.CoordSub (unprojected, camera.eye), null);\r\n\t\t\r\n\t\tvar result = [];\r\n\t\tthis.EnumerateBodies (function (body) {\r\n\t\t\tvar transformation = body.GetTransformation ();\r\n\t\t\tbody.EnumerateMeshesWithFlag (JSM.RenderMaterialFlags.Triangle, function (mesh) {\r\n\t\t\t\tvar vertexCount = mesh.VertexCount ();\r\n\t\t\t\tvar i, v0, v1, v2, intersection;\r\n\t\t\t\tfor (i = 0; i < vertexCount; i += 3) {\r\n\t\t\t\t\tv0 = mesh.GetTransformedVertex (i + 0, transformation);\r\n\t\t\t\t\tv1 = mesh.GetTransformedVertex (i + 1, transformation);\r\n\t\t\t\t\tv2 = mesh.GetTransformedVertex (i + 2, transformation);\r\n\t\t\t\t\tintersection = JSM.RayTriangleIntersection (ray, v0, v1, v2);\r\n\t\t\t\t\tif (intersection !== null) {\r\n\t\t\t\t\t\tresult.push ({\r\n\t\t\t\t\t\t\trenderBody : body,\r\n\t\t\t\t\t\t\trenderMesh : mesh,\r\n\t\t\t\t\t\t\ttriangleIndex : parseInt (i / 3, 10),\r\n\t\t\t\t\t\t\tintersection : intersection\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\tresult.sort (function (a, b) {\r\n\t\t\treturn a.intersection.distance - b.intersection.distance;\r\n\t\t});\r\n\t\treturn result;\r\n\t};\r\n\r\n\tJSM.Renderer.prototype.Render = function (camera)\r\n\t{\r\n\t\tfunction DrawMeshes (renderer, materialType, viewMatrix, projectionMatrix)\r\n\t\t{\r\n\t\t\tfunction MaterialTypeToShaderType (materialType)\r\n\t\t\t{\r\n\t\t\t\tfunction HasFlag (type, flag)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn type & flag;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (HasFlag (materialType, JSM.RenderMaterialFlags.Triangle)) {\r\n\t\t\t\t\tif (HasFlag (materialType, JSM.RenderMaterialFlags.Textured)) {\r\n\t\t\t\t\t\treturn JSM.ShaderType.TexturedTriangle;\r\n\t\t\t\t\t} else if (!HasFlag (materialType, JSM.RenderMaterialFlags.Textured)) {\r\n\t\t\t\t\t\treturn JSM.ShaderType.Triangle;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (HasFlag (materialType, JSM.RenderMaterialFlags.Line)) {\r\n\t\t\t\t\treturn JSM.ShaderType.Line;\r\n\t\t\t\t} else if (HasFlag (materialType, JSM.RenderMaterialFlags.Point)) {\r\n\t\t\t\t\treturn JSM.ShaderType.Point;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\tvar shaderType = null;\r\n\t\t\trenderer.EnumerateBodies (function (body) {\r\n\t\t\t\tif (body.HasTypedMeshes (materialType)) {\r\n\t\t\t\t\tvar matrix = body.GetTransformationMatrix ();\r\n\t\t\t\t\tbody.EnumerateTypedMeshes (materialType, function (mesh) {\r\n\t\t\t\t\t\tif (shaderType === null) {\r\n\t\t\t\t\t\t\tshaderType = MaterialTypeToShaderType (materialType);\r\n\t\t\t\t\t\t\trenderer.shader.UseShader (shaderType);\r\n\t\t\t\t\t\t\trenderer.shader.SetParameters (renderer.ambientLight, renderer.directionalLights, viewMatrix, projectionMatrix);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar material = mesh.GetMaterial ();\r\n\t\t\t\t\t\tvar vertexBuffer = mesh.GetVertexBuffer ();\r\n\t\t\t\t\t\tvar normalBuffer = mesh.GetNormalBuffer ();\r\n\t\t\t\t\t\tvar uvBuffer = mesh.GetUVBuffer ();\r\n\t\t\t\t\t\trenderer.shader.DrawArrays (material, matrix, vertexBuffer, normalBuffer, uvBuffer);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.context.clear (this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\r\n\t\t\r\n\t\tvar viewMatrix = JSM.MatrixView (camera.eye, camera.center, camera.up);\r\n\t\tvar projectionMatrix = JSM.MatrixPerspective (camera.fieldOfView * JSM.DegRad, this.canvas.width / this.canvas.height, camera.nearClippingPlane, camera.farClippingPlane);\r\n\r\n\t\tDrawMeshes (this, JSM.RenderMaterialFlags.Triangle, viewMatrix, projectionMatrix);\r\n\t\tDrawMeshes (this, JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Textured, viewMatrix, projectionMatrix);\r\n\t\tDrawMeshes (this, JSM.RenderMaterialFlags.Line, viewMatrix, projectionMatrix);\r\n\t\tDrawMeshes (this, JSM.RenderMaterialFlags.Point, viewMatrix, projectionMatrix);\r\n\t\tDrawMeshes (this, JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Transparent, viewMatrix, projectionMatrix);\r\n\t\tDrawMeshes (this, JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Transparent + JSM.RenderMaterialFlags.Textured, viewMatrix, projectionMatrix);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/pointcloudrenderer',[\"../core/jsm\"],function(JSM){\r\n\tJSM.PointCloudRenderer = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.context = null;\r\n\t\tthis.shader = null;\r\n\t\t\r\n\t\tthis.camera = null;\r\n\t\tthis.points = null;\r\n\t\tthis.pointSize = null;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.Init = function (canvas, camera)\r\n\t{\r\n\t\tif (!JSM.IsWebGLEnabled ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitContext (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitShaders ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitBuffers ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitView (camera)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.InitContext = function (canvas)\r\n\t{\r\n\t\tthis.canvas = canvas;\r\n\t\tif (this.canvas === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.canvas.getContext === undefined) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.context = this.canvas.getContext ('experimental-webgl');\r\n\t\tif (this.context === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.context.clearColor (1.0, 1.0, 1.0, 1.0);\r\n\t\tthis.context.enable (this.context.DEPTH_TEST);\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.InitShaders = function ()\r\n\t{\r\n\t\tfunction CreateShaderFromScript (context, script, type)\r\n\t\t{\r\n\t\t\tvar shader = context.createShader (type);\r\n\t\t\tcontext.shaderSource (shader, script);\r\n\t\t\tcontext.compileShader (shader);\r\n\t\t\tif (!context.getShaderParameter (shader, context.COMPILE_STATUS)) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\treturn shader;\r\n\t\t}\r\n\r\n\t\tvar fragmentShaderScript = [\r\n\t\t\t'varying highp vec3 vColor;',\r\n\t\t\t'void main (void) {',\r\n\t\t\t'\tgl_FragColor = vec4 (vColor, 1.0);',\r\n\t\t\t'}'\r\n\t\t\t].join('\\n');\r\n\t\t\r\n\t\tvar vertexShaderScript = [\r\n\t\t\t'attribute highp vec3 aVertexPosition;',\r\n\t\t\t'attribute highp vec3 aVertexColor;',\r\n\r\n\t\t\t'uniform highp mat4 uViewMatrix;',\r\n\t\t\t'uniform highp mat4 uProjectionMatrix;',\r\n\r\n\t\t\t'uniform highp float uPointSize;',\r\n\t\t\t\r\n\t\t\t'varying highp vec3 vColor;',\r\n\t\t\t\r\n\t\t\t'void main (void) {',\r\n\t\t\t'\tvColor = aVertexColor;',\r\n\t\t\t'\tgl_PointSize = uPointSize;',\r\n\t\t\t'\tgl_Position = uProjectionMatrix * uViewMatrix * vec4 (aVertexPosition, 1.0);',\r\n\t\t\t'}'\r\n\t\t\t].join('\\n');\r\n\t\t\r\n\t\tvar fragmentShader = CreateShaderFromScript (this.context, fragmentShaderScript, this.context.FRAGMENT_SHADER);\r\n\t\tvar vertexShader = CreateShaderFromScript (this.context, vertexShaderScript, this.context.VERTEX_SHADER);\r\n\t\tif (fragmentShader === null || vertexShader === null) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.shader = this.context.createProgram ();\r\n\t\tthis.context.attachShader (this.shader, vertexShader);\r\n\t\tthis.context.attachShader (this.shader, fragmentShader);\r\n\t\tthis.context.linkProgram (this.shader);\r\n\t\tif (!this.context.getProgramParameter (this.shader, this.context.LINK_STATUS)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.context.useProgram (this.shader);\r\n\r\n\t\tthis.shader.vertexPositionAttribute = this.context.getAttribLocation (this.shader, 'aVertexPosition');\r\n\t\tthis.context.enableVertexAttribArray (this.shader.vertexPositionAttribute);\r\n\r\n\t\tthis.shader.vertexColorAttribute = this.context.getAttribLocation (this.shader, 'aVertexColor');\r\n\t\tthis.context.enableVertexAttribArray (this.shader.vertexColorAttribute);\r\n\r\n\t\tthis.shader.pMatrixUniform = this.context.getUniformLocation (this.shader, 'uProjectionMatrix');\r\n\t\tthis.shader.vMatrixUniform = this.context.getUniformLocation (this.shader, 'uViewMatrix');\r\n\t\t\r\n\t\tthis.shader.pointSizeUniform = this.context.getUniformLocation (this.shader, 'uPointSize');\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.InitBuffers = function ()\r\n\t{\r\n\t\tthis.points = [];\r\n\t\tthis.pointSize = 1.0;\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.InitView = function (camera)\r\n\t{\r\n\t\tthis.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());\r\n\t\tif (!this.camera) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.SetClearColor = function (red, green, blue)\r\n\t{\r\n\t\tthis.context.clearColor (red, green, blue, 1.0);\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.SetPointSize = function (pointSize)\r\n\t{\r\n\t\tthis.pointSize = pointSize;\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.AddPoints = function (points, colors)\r\n\t{\r\n\t\tvar pointBuffer = this.context.createBuffer ();\r\n\t\tvar pointArray = new Float32Array (points);\r\n\r\n\t\tthis.context.bindBuffer (this.context.ARRAY_BUFFER, pointBuffer);\r\n\t\tthis.context.bufferData (this.context.ARRAY_BUFFER, pointArray, this.context.STATIC_DRAW);\r\n\t\tpointBuffer.itemSize = 3;\r\n\t\tpointBuffer.numItems = parseInt (pointArray.length / 3, 10);\r\n\t\t\r\n\t\tvar colorBuffer = this.context.createBuffer ();\r\n\t\tvar colorArray = new Float32Array (colors);\r\n\r\n\t\tthis.context.bindBuffer (this.context.ARRAY_BUFFER, colorBuffer);\r\n\t\tthis.context.bufferData (this.context.ARRAY_BUFFER, colorArray, this.context.STATIC_DRAW);\r\n\t\tcolorBuffer.itemSize = 3;\r\n\t\tcolorBuffer.numItems = parseInt (colorArray.length / 3, 10);\r\n\r\n\t\tthis.points.push ({pointArray : pointArray, pointBuffer : pointBuffer, colorBuffer : colorBuffer});\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.RemovePoints = function ()\r\n\t{\r\n\t\tthis.points = [];\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.context.viewport (0, 0, this.canvas.width, this.canvas.height);\r\n\t};\r\n\r\n\tJSM.PointCloudRenderer.prototype.Render = function ()\r\n\t{\r\n\t\tthis.context.clear (this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);\r\n\t\t\r\n\t\tvar projectionMatrix = JSM.MatrixPerspective (this.camera.fieldOfView * JSM.DegRad, this.canvas.width / this.canvas.height, this.camera.nearClippingPlane, this.camera.farClippingPlane);\r\n\t\tthis.context.uniformMatrix4fv (this.shader.pMatrixUniform, false, projectionMatrix);\r\n\r\n\t\tvar viewMatrix = JSM.MatrixView (this.camera.eye, this.camera.center, this.camera.up);\r\n\t\tthis.context.uniformMatrix4fv (this.shader.vMatrixUniform, false, viewMatrix);\r\n\r\n\t\tthis.context.uniform1f (this.shader.pointSizeUniform, this.pointSize);\r\n\t\t\r\n\t\tvar i, pointBuffer, colorBuffer;\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tpointBuffer = this.points[i].pointBuffer;\r\n\t\t\tcolorBuffer = this.points[i].colorBuffer;\r\n\t\t\tthis.context.bindBuffer (this.context.ARRAY_BUFFER, pointBuffer);\r\n\t\t\tthis.context.vertexAttribPointer (this.shader.vertexPositionAttribute, pointBuffer.itemSize, this.context.FLOAT, false, 0, 0);\r\n\t\t\tthis.context.bindBuffer (this.context.ARRAY_BUFFER, colorBuffer);\r\n\t\t\tthis.context.vertexAttribPointer (this.shader.vertexColorAttribute, colorBuffer.itemSize, this.context.FLOAT, false, 0, 0);\r\n\t\t\tthis.context.drawArrays (this.context.POINTS, 0, pointBuffer.numItems);\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/renderer/renderconverter',[\"../core/jsm\"],function(JSM){\r\n\tJSM.ConvertBodyToRenderBody = function (body, materials, parameters)\r\n\t{\r\n\t\tfunction MaterialToRenderMaterial (material, materialType)\r\n\t\t{\r\n\t\t\tvar renderAmbient = JSM.HexColorToNormalizedRGBComponents (material.ambient);\r\n\t\t\tvar renderDiffuse = JSM.HexColorToNormalizedRGBComponents (material.diffuse);\r\n\t\t\tvar renderSpecular = JSM.HexColorToNormalizedRGBComponents (material.specular);\r\n\t\t\tvar renderMaterial = new JSM.RenderMaterial (materialType, {\r\n\t\t\t\tambient : renderAmbient,\r\n\t\t\t\tdiffuse : renderDiffuse,\r\n\t\t\t\tspecular : renderSpecular,\r\n\t\t\t\tshininess : material.shininess,\r\n\t\t\t\topacity : material.opacity,\r\n\t\t\t\tsingleSided : material.singleSided,\r\n\t\t\t\tpointSize : material.pointSize,\r\n\t\t\t\ttexture : material.texture\r\n\t\t\t});\r\n\t\t\treturn renderMaterial;\r\n\t\t}\r\n\t\t\r\n\t\tvar hasConvexPolygons = false;\r\n\t\tif (parameters !== undefined && parameters !== null) {\r\n\t\t\tif (parameters.hasConvexPolygons !== undefined && parameters.hasConvexPolygons !== null) {\r\n\t\t\t\thasConvexPolygons = parameters.hasConvexPolygons;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar renderBody = new JSM.RenderBody ();\r\n\t\t\r\n\t\tvar vertices = null;\r\n\t\tvar normals = null;\r\n\t\tvar uvs = null;\r\n\t\t\r\n\t\tvar explodeData = {\r\n\t\t\thasConvexPolygons : hasConvexPolygons,\r\n\t\t\tonPointGeometryStart : function () {\r\n\t\t\t\tvertices = [];\r\n\t\t\t\tnormals = null;\r\n\t\t\t\tuvs = null;\r\n\t\t\t},\t\t\r\n\t\t\tonPointGeometryEnd : function (material) {\r\n\t\t\t\tvar materialType = JSM.RenderMaterialFlags.Point;\r\n\t\t\t\tvar renderMaterial = MaterialToRenderMaterial (material, materialType);\r\n\t\t\t\tvar mesh = new JSM.RenderMesh (renderMaterial);\r\n\t\t\t\tmesh.SetVertexArray (vertices);\r\n\t\t\t\trenderBody.AddMesh (mesh);\r\n\t\t\t},\r\n\t\t\tonPoint : function (vertex) {\r\n\t\t\t\tvertices.push (vertex.x, vertex.y, vertex.z);\r\n\t\t\t},\t\t\r\n\t\t\tonLineGeometryStart : function () {\r\n\t\t\t\tvertices = [];\r\n\t\t\t\tnormals = null;\r\n\t\t\t\tuvs = null;\r\n\t\t\t},\r\n\t\t\tonLineGeometryEnd : function (material) {\r\n\t\t\t\tvar materialType = JSM.RenderMaterialFlags.Line;\r\n\t\t\t\tvar renderMaterial = MaterialToRenderMaterial (material, materialType);\r\n\t\t\t\tvar mesh = new JSM.RenderMesh (renderMaterial);\r\n\t\t\t\tmesh.SetVertexArray (vertices);\r\n\t\t\t\trenderBody.AddMesh (mesh);\r\n\t\t\t},\r\n\t\t\tonLine : function (begVertex, endVertex) {\r\n\t\t\t\tvertices.push (begVertex.x, begVertex.y, begVertex.z);\r\n\t\t\t\tvertices.push (endVertex.x, endVertex.y, endVertex.z);\r\n\t\t\t},\t\t\r\n\t\t\tonGeometryStart : function () {\r\n\t\t\t\tvertices = [];\r\n\t\t\t\tnormals = [];\r\n\t\t\t\tuvs = [];\r\n\t\t\t},\r\n\t\t\tonGeometryEnd : function (material) {\r\n\t\t\t\tvar materialType = JSM.RenderMaterialFlags.Triangle;\r\n\t\t\t\tif (material.texture !== null) {\r\n\t\t\t\t\tmaterialType += JSM.RenderMaterialFlags.Textured;\r\n\t\t\t\t}\r\n\t\t\t\tif (material.opacity < 1.0) {\r\n\t\t\t\t\tmaterialType += JSM.RenderMaterialFlags.Transparent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar renderMaterial = MaterialToRenderMaterial (material, materialType);\r\n\t\t\t\tvar mesh = new JSM.RenderMesh (renderMaterial);\r\n\t\t\t\tmesh.SetVertexArray (vertices);\r\n\t\t\t\tmesh.SetNormalArray (normals);\r\n\t\t\t\tif (material.texture !== null) {\r\n\t\t\t\t\tmesh.SetUVArray (uvs);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trenderBody.AddMesh (mesh);\r\n\t\t\t},\r\n\t\t\tonTriangle : function (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3) {\r\n\t\t\t\tvertices.push (vertex1.x, vertex1.y, vertex1.z);\r\n\t\t\t\tvertices.push (vertex2.x, vertex2.y, vertex2.z);\r\n\t\t\t\tvertices.push (vertex3.x, vertex3.y, vertex3.z);\r\n\t\t\t\t\r\n\t\t\t\tnormals.push (normal1.x, normal1.y, normal1.z);\r\n\t\t\t\tnormals.push (normal2.x, normal2.y, normal2.z);\r\n\t\t\t\tnormals.push (normal3.x, normal3.y, normal3.z);\r\n\t\t\t\t\r\n\t\t\t\tif (uv1 !== null && uv2 !== null && uv3 !== null) {\r\n\t\t\t\t\tuvs.push (uv1.x, uv1.y);\r\n\t\t\t\t\tuvs.push (uv2.x, uv2.y);\r\n\t\t\t\t\tuvs.push (uv3.x, uv3.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tJSM.ExplodeBody (body, materials, explodeData);\r\n\t\treturn renderBody;\r\n\t};\r\n\r\n\tJSM.ConvertModelToRenderBodies = function (model, parameters)\r\n\t{\r\n\t\tvar bodies = [];\r\n\t\tvar materials = model.GetMaterialSet ();\r\n\t\tvar i, body, renderBody;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\trenderBody = JSM.ConvertBodyToRenderBody (body, materials, parameters);\r\n\t\t\tbodies.push (renderBody);\r\n\t\t}\r\n\t\treturn bodies;\r\n\t};\r\n\r\n\tJSM.ConvertJSONDataToRenderBodies = function (jsonData, asyncCallbacks)\r\n\t{\r\n\t\tfunction ConvertMeshToRenderBody (mesh, materials)\r\n\t\t{\r\n\t\t\tfunction ConvertTrianglesToRenderMesh (mesh, triangles, materials)\r\n\t\t\t{\r\n\t\t\t\tfunction GetTextureCoordinate (u, v, offset, scale, rotation)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = new JSM.Vector2D (u, v);\r\n\t\t\t\t\tif (!JSM.IsZero (rotation)) {\r\n\t\t\t\t\t\tvar si = Math.sin (rotation * JSM.DegRad);\r\n\t\t\t\t\t\tvar co = Math.cos (rotation * JSM.DegRad);\r\n\t\t\t\t\t\tresult.x = co * u - si * v;\r\n\t\t\t\t\t\tresult.y = si * u + co * v;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.x = offset[0] + result.x * scale[0];\r\n\t\t\t\t\tresult.y = offset[1] + result.y * scale[1];\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction AppendTriangleCoords (targetArray, sourceArray, indexArray, startIndex, componentCount)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar vertexIndex, sourceVertexIndex, componentIndex;\r\n\t\t\t\t\tfor (vertexIndex = 0; vertexIndex < 3; vertexIndex++) {\r\n\t\t\t\t\t\tsourceVertexIndex = indexArray[startIndex + vertexIndex];\r\n\t\t\t\t\t\tfor (componentIndex = 0; componentIndex < componentCount; componentIndex++) {\r\n\t\t\t\t\t\t\ttargetArray.push (sourceArray[sourceVertexIndex * componentCount + componentIndex]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar material = materials[triangles.material];\r\n\t\t\t\tvar renderMaterial = new JSM.RenderMaterial (JSM.RenderMaterialFlags.Triangle, {\r\n\t\t\t\t\tambient : material.ambient || [1.0, 1.0, 1.0],\r\n\t\t\t\t\tdiffuse : material.diffuse || [1.0, 1.0, 1.0],\r\n\t\t\t\t\tspecular : material.specular || [1.0, 1.0, 1.0],\r\n\t\t\t\t\tshininess : material.shininess || 0.0,\r\n\t\t\t\t\topacity : material.opacity || 1.0,\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tvar hasTexture = (material.texture !== undefined && material.texture !== null);\r\n\t\t\t\tif (hasTexture) {\r\n\t\t\t\t\trenderMaterial.SetType (JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Textured);\r\n\t\t\t\t\trenderMaterial.texture = material.texture;\r\n\t\t\t\t\trenderMaterial.ambient = [1.0, 1.0, 1.0];\r\n\t\t\t\t\trenderMaterial.diffuse = [1.0, 1.0, 1.0];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar renderMesh = new JSM.RenderMesh (renderMaterial);\r\n\t\t\t\tvar vertexArray = [];\r\n\t\t\t\tvar normalArray = [];\r\n\t\t\t\tvar uvArray = [];\r\n\t\t\t\t\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor\t(i = 0; i < triangles.parameters.length; i += 9) {\r\n\t\t\t\t\tAppendTriangleCoords (vertexArray, mesh.vertices, triangles.parameters, i, 3);\r\n\t\t\t\t\tAppendTriangleCoords (normalArray, mesh.normals, triangles.parameters, i + 3, 3);\r\n\t\t\t\t\tAppendTriangleCoords (uvArray, mesh.uvs, triangles.parameters, i + 6, 2);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (hasTexture) {\r\n\t\t\t\t\tvar offset = material.offset || [0.0, 0.0];\r\n\t\t\t\t\tvar scale = material.scale || [1.0, 1.0];\r\n\t\t\t\t\tvar rotation = material.rotation || 0.0;\r\n\t\t\t\t\tvar transformedUV;\r\n\t\t\t\t\tfor\t(i = 0; i < uvArray.length; i += 2) {\r\n\t\t\t\t\t\ttransformedUV = GetTextureCoordinate (uvArray[i + 0], uvArray[i + 1], offset, scale, rotation);\r\n\t\t\t\t\t\tuvArray[i + 0] = transformedUV.x;\r\n\t\t\t\t\t\tuvArray[i + 1] = -transformedUV.y;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\trenderMesh.SetVertexArray (vertexArray);\r\n\t\t\t\trenderMesh.SetNormalArray (normalArray);\r\n\t\t\t\trenderMesh.SetUVArray (uvArray);\r\n\t\t\t\treturn renderMesh;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar renderBody = new JSM.RenderBody ();\r\n\t\t\tvar i, triangles, renderMesh;\r\n\t\t\tfor (i = 0; i < mesh.triangles.length; i++) {\r\n\t\t\t\ttriangles = mesh.triangles[i];\r\n\t\t\t\trenderMesh = ConvertTrianglesToRenderMesh (mesh, triangles, materials);\r\n\t\t\t\trenderBody.AddMesh (renderMesh);\r\n\t\t\t}\r\n\t\t\treturn renderBody;\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddMesh (meshes, materials, meshIndex, resultBodies)\r\n\t\t{\r\n\t\t\tvar renderBody = ConvertMeshToRenderBody (meshes[meshIndex], materials);\r\n\t\t\tresultBodies.push (renderBody);\r\n\t\t}\r\n\t\t\r\n\t\tvar resultBodies = [];\r\n\r\n\t\tvar materials = jsonData.materials;\r\n\t\tif (materials === undefined) {\r\n\t\t\treturn resultBodies;\r\n\t\t}\r\n\t\t\r\n\t\tvar meshes = jsonData.meshes;\r\n\t\tif (meshes === undefined) {\r\n\t\t\treturn resultBodies;\r\n\t\t}\r\n\t\t\r\n\t\tvar meshIndex = 0;\r\n\t\tJSM.AsyncRunTask (\r\n\t\t\tfunction () {\r\n\t\t\t\tAddMesh (meshes, materials, meshIndex, resultBodies);\r\n\t\t\t\tmeshIndex = meshIndex + 1;\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\tasyncCallbacks,\r\n\t\t\tmeshes.length, 0, resultBodies\r\n\t\t);\r\n\r\n\t\treturn resultBodies;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/mouse',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Mouse = function ()\r\n\t{\r\n\t\tthis.down = false;\r\n\t\tthis.button = 0;\r\n\t\tthis.shift = false;\r\n\t\tthis.ctrl = false;\r\n\t\tthis.alt = false;\r\n\t\tthis.prev = new JSM.Coord2D (0, 0);\r\n\t\tthis.curr = new JSM.Coord2D (0, 0);\r\n\t\tthis.diff = new JSM.Coord2D (0, 0);\r\n\t};\r\n\r\n\tJSM.Mouse.prototype.Down = function (event, div)\r\n\t{\r\n\t\tvar eventParameters = event || window.event;\r\n\r\n\t\tthis.down = true;\r\n\t\tthis.button = event.which;\r\n\t\tthis.shift = event.shiftKey;\r\n\t\tthis.ctrl = event.ctrlKey;\r\n\t\tthis.alt = event.altKey;\r\n\t\t\r\n\t\tthis.SetCurrent (eventParameters, div);\r\n\t\tthis.prev = this.curr.Clone ();\r\n\t};\r\n\r\n\tJSM.Mouse.prototype.Move = function (event, div)\r\n\t{\r\n\t\tvar eventParameters = event || window.event;\r\n\t\t\r\n\t\tthis.shift = event.shiftKey;\r\n\t\tthis.ctrl = event.ctrlKey;\r\n\t\tthis.alt = event.altKey;\r\n\t\t\r\n\t\tthis.SetCurrent (eventParameters, div);\r\n\t\tthis.diff = JSM.CoordSub2D (this.curr, this.prev);\r\n\t\tthis.prev = this.curr.Clone ();\r\n\t};\r\n\r\n\tJSM.Mouse.prototype.Up = function (event, div)\r\n\t{\r\n\t\tvar eventParameters = event || window.event;\r\n\t\t\r\n\t\tthis.down = false;\r\n\t\tthis.SetCurrent (eventParameters, div);\r\n\t};\r\n\r\n\tJSM.Mouse.prototype.Out = function (event, div)\r\n\t{\r\n\t\tvar eventParameters = event || window.event;\r\n\t\t\r\n\t\tthis.down = false;\r\n\t\tthis.SetCurrent (eventParameters, div);\r\n\t};\r\n\r\n\tJSM.Mouse.prototype.SetCurrent = function (eventParameters, div)\r\n\t{\r\n\t\tvar currX = eventParameters.clientX;\r\n\t\tvar currY = eventParameters.clientY;\r\n\t\tif (div.getBoundingClientRect !== undefined) {\r\n\t\t\tvar clientRect = div.getBoundingClientRect ();\r\n\t\t\tcurrX -= clientRect.left;\r\n\t\t\tcurrY -= clientRect.top;\r\n\t\t}\r\n\t\tif (window.pageXOffset !== undefined && window.pageYOffset !== undefined) {\r\n\t\t\tcurrX += window.pageXOffset;\r\n\t\t\tcurrY += window.pageYOffset;\r\n\t\t}\r\n\t\tthis.curr = new JSM.Coord2D (currX, currY);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/touch',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Touch = function ()\r\n\t{\r\n\t\tthis.down = false;\r\n\t\tthis.fingers = 0;\r\n\t\tthis.prev = new JSM.Coord2D ();\r\n\t\tthis.curr = new JSM.Coord2D ();\r\n\t\tthis.diff = new JSM.Coord2D ();\r\n\t};\r\n\r\n\tJSM.Touch.prototype.Start = function (event, div)\r\n\t{\r\n\t\tif (event.touches.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.down = true;\r\n\t\tthis.fingers = event.touches.length;\r\n\r\n\t\tthis.SetCurrent (event, div);\r\n\t\tthis.prev = this.curr.Clone ();\r\n\t};\r\n\r\n\tJSM.Touch.prototype.Move = function (event, div)\r\n\t{\r\n\t\tif (event.touches.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.fingers = event.touches.length;\r\n\r\n\t\tthis.SetCurrent (event, div);\r\n\t\tthis.diff = JSM.CoordSub2D (this.curr, this.prev);\r\n\t\tthis.prev = this.curr.Clone ();\r\n\t};\r\n\r\n\tJSM.Touch.prototype.End = function (event, div)\r\n\t{\r\n\t\tif (event.touches.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.down = false;\r\n\t\tthis.SetCurrent (event, div);\r\n\t};\r\n\r\n\tJSM.Touch.prototype.SetCurrent = function (event, div)\r\n\t{\r\n\t\tfunction GetEventCoord (touch, div)\r\n\t\t{\r\n\t\t\tvar currX = touch.pageX;\r\n\t\t\tvar currY = touch.pageY;\r\n\t\t\tif (div.getBoundingClientRect !== undefined) {\r\n\t\t\t\tvar clientRect = div.getBoundingClientRect ();\r\n\t\t\t\tcurrX -= clientRect.left;\r\n\t\t\t\tcurrY -= clientRect.top;\r\n\t\t\t}\r\n\t\t\tif (window.pageXOffset !== undefined && window.pageYOffset !== undefined) {\r\n\t\t\t\tcurrX += window.pageXOffset;\r\n\t\t\t\tcurrY += window.pageYOffset;\r\n\t\t\t}\r\n\t\t\treturn new JSM.Coord2D (currX, currY);\r\n\t\t}\r\n\t\t\r\n\t\tif (event.touches.length == 1 || event.touches.length == 3) {\r\n\t\t\tthis.curr = GetEventCoord (event.touches[0], div);\r\n\t\t} else if (event.touches.length == 2) {\r\n\t\t\tvar distance = GetEventCoord (event.touches[0], div).DistanceTo (GetEventCoord (event.touches[1], div));\r\n\t\t\tthis.curr = new JSM.Coord2D (distance, distance);\r\n\t\t}\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/painter',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: OrderPolygons\r\n\t* Description: Order body polygons from front to back depending on the eye position.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\teye {Coord} the camera eye position\r\n\t*\tcenter {Coord} the camera center position\r\n\t* Returns:\r\n\t*\t{integer[]} the ordered polygon indices\r\n\t*/\r\n\tJSM.OrderPolygons = function (body, eye, center)\r\n\t{\r\n\t\tfunction SwapArrayValues (array, from, to)\r\n\t\t{\r\n\t\t\tvar temp = array[from];\r\n\t\t\tarray[from] = array[to];\r\n\t\t\tarray[to] = temp;\r\n\t\t}\r\n\r\n\t\tfunction GetPolygonCenter (p)\r\n\t\t{\r\n\t\t\tvar polygon = body.GetPolygon (p);\r\n\t\t\tvar result = new JSM.Coord (0.0, 0.0, 0.0);\r\n\r\n\t\t\tvar i, coord;\r\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\r\n\t\t\t\tresult = JSM.CoordAdd (result, coord);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult.MultiplyScalar (1.0 / polygon.VertexIndexCount ());\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction CalculatePolygonValues ()\r\n\t\t{\r\n\t\t\tvar viewDirection = JSM.CoordSub (center, eye).Normalize ();\r\n\t\t\tvar cameraPlane = JSM.GetPlaneFromCoordAndDirection (eye, viewDirection);\r\n\t\t\t\r\n\t\t\tvar i, j, polygon, coord, distance, minDistance, maxDistance;\r\n\t\t\tvar polygonCenter, polygonCenterDistance;\r\n\t\t\tvar polygonNormal, polygonViewVector, polygonDirection, polygonPlane;\r\n\t\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\t\tminDistance = JSM.Inf;\r\n\t\t\t\tmaxDistance = -JSM.Inf;\r\n\t\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\t\tfor (j = 0; j < polygon.VertexIndexCount (); j++) {\r\n\t\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (j));\r\n\t\t\t\t\tdistance = cameraPlane.CoordDistance (coord);\r\n\t\t\t\t\tif (JSM.IsLower (distance, minDistance)) {\r\n\t\t\t\t\t\tminDistance = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (JSM.IsGreater (distance, maxDistance)) {\r\n\t\t\t\t\t\tmaxDistance = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tminViewDistances.push (minDistance);\r\n\t\t\t\tmaxViewDistances.push (maxDistance);\r\n\t\t\t\t\r\n\t\t\t\tpolygonCenter = GetPolygonCenter (i);\r\n\t\t\t\tpolygonCenterDistance = cameraPlane.CoordDistance (polygonCenter);\r\n\t\t\t\tpolygonCenters.push (polygonCenter);\r\n\t\t\t\tpolygonCenterDistances.push (polygonCenterDistance);\r\n\r\n\t\t\t\tpolygonNormal = JSM.CalculateBodyPolygonNormal (body, i);\r\n\t\t\t\tpolygonViewVector = JSM.CoordSub (polygonCenter, eye).Normalize ();\r\n\t\t\t\tpolygonDirection = JSM.VectorDot (polygonNormal, polygonViewVector);\r\n\t\t\t\tif (JSM.IsGreaterOrEqual (polygonDirection, 0.0)) {\r\n\t\t\t\t\tpolygonNormal.MultiplyScalar (-1);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpolygonPlane = JSM.GetPlaneFromCoordAndDirection (polygonCenter, polygonNormal);\r\n\t\t\t\tpolygonPlanes.push (polygonPlane);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction PolygonViewOverlap (s, p)\r\n\t\t{\r\n\t\t\treturn JSM.IsLowerOrEqual (minViewDistances[s], maxViewDistances[p]);\r\n\t\t}\r\n\r\n\t\tfunction PolygonIsFrontOfPlane (s, p)\r\n\t\t{\r\n\t\t\tvar sPlane = polygonPlanes[s];\r\n\t\t\tvar pPlane = polygonPlanes[p];\r\n\r\n\t\t\tvar i, coord;\r\n\r\n\t\t\tvar isSBehindP = true;\r\n\t\t\tvar sPolygon = body.GetPolygon (s);\r\n\t\t\tfor (i = 0; i < sPolygon.VertexIndexCount (); i++) {\r\n\t\t\t\tcoord = body.GetVertexPosition (sPolygon.GetVertexIndex (i));\r\n\t\t\t\tif (pPlane.CoordPosition (coord) === JSM.CoordPlanePosition.CoordInFrontOfPlane) {\r\n\t\t\t\t\tisSBehindP = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (isSBehindP) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tvar isPFrontOfS = true;\r\n\t\t\tvar pPolygon = body.GetPolygon (p);\r\n\t\t\tfor (i = 0; i < pPolygon.VertexIndexCount (); i++) {\r\n\t\t\t\tcoord = body.GetVertexPosition (pPolygon.GetVertexIndex (i));\r\n\t\t\t\tif (sPlane.CoordPosition (coord) === JSM.CoordPlanePosition.CoordAtBackOfPlane) {\r\n\t\t\t\t\tisPFrontOfS = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (isPFrontOfS) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tfunction HasLowerDistance (s, p)\r\n\t\t{\r\n\t\t\tif (JSM.IsLower (maxViewDistances[s], maxViewDistances[p])) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else if (JSM.IsEqual (maxViewDistances[s], maxViewDistances[p])) {\r\n\t\t\t\tif (JSM.IsLower (polygonCenterDistances[s], polygonCenterDistances[p])) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction OrderPolygonsByMaxViewDistance ()\r\n\t\t{\r\n\t\t\tvar count = ordered.length;\r\n\t\t\t\r\n\t\t\tvar i, j;\r\n\t\t\tfor (i = 0; i < count - 1; i++) {\r\n\t\t\t\tfor (j = 0; j < count - i - 1; j++) {\r\n\t\t\t\t\tif (HasLowerDistance (ordered[j], ordered[j + 1])) {\r\n\t\t\t\t\t\tSwapArrayValues (ordered, j, j + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction NeedToChangeOrder (s, p)\r\n\t\t{\r\n\t\t\tif (needToChangeOrderCache[s][p] !== null) {\r\n\t\t\t\treturn needToChangeOrderCache[s][p];\r\n\t\t\t}\r\n\r\n\t\t\tif (PolygonViewOverlap (s, p)) {\r\n\t\t\t\tif (PolygonIsFrontOfPlane (s, p)) {\r\n\t\t\t\t\tneedToChangeOrderCache[s][p] = true;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tneedToChangeOrderCache[s][p] = false;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction ReorderPolygons ()\r\n\t\t{\r\n\t\t\tvar count = ordered.length;\r\n\r\n\t\t\tvar i, j;\r\n\t\t\tfor (i = 0; i < count - 1; i++) {\r\n\t\t\t\tfor (j = 0; j < count - i - 1; j++) {\r\n\t\t\t\t\tif (NeedToChangeOrder (ordered[j], ordered[j + 1])) {\r\n\t\t\t\t\t\tSwapArrayValues (ordered, j, j + 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar result = [];\r\n\t\t\r\n\t\tvar minViewDistances = [];\r\n\t\tvar maxViewDistances = [];\r\n\t\tvar polygonCenters = [];\r\n\t\tvar polygonCenterDistances = [];\r\n\t\tvar polygonPlanes = [];\r\n\t\t\r\n\t\tvar ordered = [];\r\n\t\tvar needToChangeOrderCache = [];\r\n\t\tvar count = body.PolygonCount ();\r\n\t\t\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tordered.push (i);\r\n\t\t\tneedToChangeOrderCache.push ([]);\r\n\t\t\tfor (j = 0; j < count; j++) {\r\n\t\t\t\tneedToChangeOrderCache[i].push (null);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tCalculatePolygonValues ();\r\n\t\tOrderPolygonsByMaxViewDistance ();\r\n\t\tReorderPolygons ();\r\n\t\t\r\n\t\tresult = ordered;\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/drawing',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: CanvasDrawer\r\n\t* Description: Represents an object which can draw primitives to a canvas.\r\n\t* Parameters:\r\n\t*\tcanvas {html canvas element} the destination element\r\n\t*/\r\n\tJSM.CanvasDrawer = function (canvas)\r\n\t{\r\n\t\tthis.canvas = canvas;\r\n\t\tthis.context = this.canvas.getContext ('2d');\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CanvasDrawer.GetWidth\r\n\t* Description: Returns the width of the target.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.CanvasDrawer.prototype.GetWidth = function ()\r\n\t{\r\n\t\treturn this.canvas.width;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CanvasDrawer.GetHeight\r\n\t* Description: Returns the height of the target.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.CanvasDrawer.prototype.GetHeight = function ()\r\n\t{\r\n\t\treturn this.canvas.height;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CanvasDrawer.Clear\r\n\t* Description: Clears the target.\r\n\t*/\r\n\tJSM.CanvasDrawer.prototype.Clear = function ()\r\n\t{\r\n\t\tthis.context.clearRect (0, 0, this.canvas.width, this.canvas.height);\r\n\t\tthis.context.fillStyle = '#ffffff';\r\n\t\tthis.context.fillRect (0, 0, this.canvas.width, this.canvas.height);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CanvasDrawer.DrawLine\r\n\t* Description: Draws a line to the target.\r\n\t* Parameters:\r\n\t*\tfrom {Coord2D} the start of the line\r\n\t*\tto {Coord2D} the end of the line\r\n\t*/\r\n\tJSM.CanvasDrawer.prototype.DrawLine = function (from, to)\r\n\t{\r\n\t\tthis.context.beginPath ();\r\n\t\tthis.context.moveTo (from.x, this.canvas.height - from.y);\r\n\t\tthis.context.lineTo (to.x, this.canvas.height - to.y);\r\n\t\tthis.context.stroke ();\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CanvasDrawer.DrawPolygon\r\n\t* Description: Draws a polygon to the target.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon2D} the polygon\r\n\t*\tcolor {string} the hex color string\r\n\t*\tcontour {boolean} need to draw contour\r\n\t*/\r\n\tJSM.CanvasDrawer.prototype.DrawPolygon = function (polygon, color, contour)\r\n\t{\r\n\t\tfunction HexColorToHTMLColor (hexColor)\r\n\t\t{\r\n\t\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\r\n\t\t\tvar result = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tthis.context.fillStyle = HexColorToHTMLColor (color);\r\n\t\tthis.context.beginPath ();\r\n\r\n\t\tvar i, vertex, nextVertex;\r\n\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\tif (i === 0) {\r\n\t\t\t\tthis.context.moveTo (vertex.x, this.canvas.height - vertex.y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.context.lineTo (vertex.x, this.canvas.height - vertex.y);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.context.closePath ();\r\n\t\tthis.context.fill ();\r\n\r\n\t\tif (contour) {\r\n\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\t\tnextVertex = polygon.GetVertex (i < polygon.VertexCount () - 1 ? i + 1 : 0);\r\n\t\t\t\tthis.DrawLine (vertex, nextVertex);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Class: SVGDrawer\r\n\t* Description: Represents an object which can draw primitives to an svg.\r\n\t* Parameters:\r\n\t*\tsvgObject {html svg element} the destination element\r\n\t*/\r\n\tJSM.SVGDrawer = function (svgObject)\r\n\t{\r\n\t\tthis.svgObject = svgObject;\r\n\t\tthis.svgNameSpace = 'http://www.w3.org/2000/svg';\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SVGDrawer.GetWidth\r\n\t* Description: Returns the width of the target.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.SVGDrawer.prototype.GetWidth = function ()\r\n\t{\r\n\t\treturn this.svgObject.getAttribute ('width');\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SVGDrawer.GetHeight\r\n\t* Description: Returns the height of the target.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.SVGDrawer.prototype.GetHeight = function ()\r\n\t{\r\n\t\treturn this.svgObject.getAttribute ('height');\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SVGDrawer.Clear\r\n\t* Description: Clears the target.\r\n\t*/\r\n\tJSM.SVGDrawer.prototype.Clear = function ()\r\n\t{\r\n\t\twhile (this.svgObject.lastChild) {\r\n\t\t\tthis.svgObject.removeChild (this.svgObject.lastChild);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SVGDrawer.DrawLine\r\n\t* Description: Draws a line to the target.\r\n\t* Parameters:\r\n\t*\tfrom {Coord2D} the start of the line\r\n\t*\tto {Coord2D} the end of the line\r\n\t*/\r\n\tJSM.SVGDrawer.prototype.DrawLine = function (from, to)\r\n\t{\r\n\t\tvar svgLine = document.createElementNS (this.svgNameSpace, 'line');\r\n\t\tvar height = this.GetHeight ();\r\n\t\tsvgLine.setAttributeNS (null, 'stroke', 'black');\r\n\t\tsvgLine.setAttributeNS (null, 'x1', from.x);\r\n\t\tsvgLine.setAttributeNS (null, 'y1', height - from.y);\r\n\t\tsvgLine.setAttributeNS (null, 'x2', to.x);\r\n\t\tsvgLine.setAttributeNS (null, 'y2', height - to.y);\r\n\t\tthis.svgObject.appendChild (svgLine);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SVGDrawer.DrawPolygon\r\n\t* Description: Draws a polygon to the target.\r\n\t* Parameters:\r\n\t*\tpolygon {Polygon2D} the polygon\r\n\t*\tcolor {string} the hex color string\r\n\t*\tcontour {boolean} need to draw contour\r\n\t*/\r\n\tJSM.SVGDrawer.prototype.DrawPolygon = function (polygon, color/*, contour*/)\r\n\t{\r\n\t\tfunction HexColorToHTMLColor (hexColor)\r\n\t\t{\r\n\t\t\tvar rgb = JSM.HexColorToRGBComponents (hexColor);\r\n\t\t\tvar result = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar pointsString = '';\r\n\t\tvar height = this.GetHeight ();\r\n\t\t\r\n\t\tvar i, vertex;\r\n\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\tvertex = polygon.GetVertex (i);\r\n\t\t\tpointsString = pointsString + vertex.x + ', ' + (height - vertex.y);\r\n\t\t\tif (i < polygon.VertexCount () - 1) {\r\n\t\t\t\tpointsString = pointsString + ', ';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar svgPolyon = document.createElementNS (this.svgNameSpace, 'polygon');\r\n\t\tsvgPolyon.setAttributeNS (null, 'points', pointsString);\r\n\t\tsvgPolyon.setAttributeNS (null, 'fill', HexColorToHTMLColor (color));\r\n\t\tsvgPolyon.setAttributeNS (null, 'fill-opacity', '1.0');\r\n\t\tsvgPolyon.setAttributeNS (null, 'stroke', 'black');\r\n\t\tthis.svgObject.appendChild (svgPolyon);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: DrawProjectedBody\r\n\t* Description: Draws a projected body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tmaterials {MaterialSet} the material container\r\n\t*\tcamera {Camera} the camera for projection\r\n\t*\tdrawMode {string} draw mode ('HiddenLinePainter', 'HiddenLineFrontFacing' or 'Wireframe')\r\n\t*\tneedClear {boolean} clear the display before draw\r\n\t*\tdrawer {drawer object} the drawer object\r\n\t*/\r\n\tJSM.DrawProjectedBody = function (body, materials, camera, drawMode, needClear, drawer)\r\n\t{\r\n\t\tfunction AddProjectedCoord (projectedPolygon, coord)\r\n\t\t{\r\n\t\t\tvar projected = JSM.Project (coord, eye, center, up, fieldOfView * JSM.DegRad, aspectRatio, nearPlane, farPlane, viewPort);\r\n\t\t\tprojectedPolygon.AddVertex (projected.x, projected.y);\r\n\t\t}\r\n\r\n\t\tfunction GetProjectedPolygonFromBody (polygon)\r\n\t\t{\r\n\t\t\tvar projectedPolygon = new JSM.Polygon2D ();\r\n\t\t\tvar i, coord;\r\n\t\t\tfor (i = 0; i < polygon.VertexIndexCount (); i++) {\r\n\t\t\t\tcoord = body.GetVertexPosition (polygon.GetVertexIndex (i));\r\n\t\t\t\tAddProjectedCoord (projectedPolygon, coord);\r\n\t\t\t}\r\n\t\t\treturn projectedPolygon;\r\n\t\t}\r\n\r\n\t\tfunction GetProjectedPolygonFromPolygon (polygon)\r\n\t\t{\r\n\t\t\tvar projectedPolygon = new JSM.Polygon2D ();\r\n\t\t\tvar i, coord;\r\n\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\t\tcoord = polygon.GetVertex (i);\r\n\t\t\t\tAddProjectedCoord (projectedPolygon, coord);\r\n\t\t\t}\r\n\t\t\treturn projectedPolygon;\r\n\t\t}\r\n\r\n\t\tif (needClear) {\r\n\t\t\tdrawer.Clear ();\r\n\t\t}\r\n\r\n\t\tvar width = drawer.GetWidth ();\r\n\t\tvar height = drawer.GetHeight ();\r\n\t\t\r\n\t\tvar eye = camera.eye;\r\n\t\tvar center = camera.center;\r\n\t\tvar up = camera.up;\r\n\t\tvar fieldOfView = camera.fieldOfView;\r\n\t\tvar aspectRatio = width / height;\r\n\t\tvar nearPlane = camera.nearClippingPlane;\r\n\t\tvar farPlane = camera.farClippingPlane;\r\n\t\tvar viewPort = [0, 0, width, height];\r\n\r\n\t\tvar i, j, polygon, coord, projected, materialIndex, color;\r\n\t\tif (drawMode == 'HiddenLinePainter') {\r\n\t\t\tvar orderedPolygons = JSM.OrderPolygons (body, eye, center);\r\n\t\t\tif (materials === undefined || materials === null) {\r\n\t\t\t\tmaterials = new JSM.MaterialSet ();\r\n\t\t\t}\r\n\t\t\tfor (i = 0; i < orderedPolygons.length; i++) {\r\n\t\t\t\tpolygon = body.GetPolygon (orderedPolygons[i]);\r\n\t\t\t\tprojected = GetProjectedPolygonFromBody (polygon);\r\n\t\t\t\tmaterialIndex = polygon.GetMaterialIndex ();\r\n\t\t\t\tcolor = materials.GetMaterial (materialIndex).diffuse;\r\n\t\t\t\tdrawer.DrawPolygon (projected, color, true);\r\n\t\t\t}\r\n\t\t} else if (drawMode == 'HiddenLineBSPTree') {\r\n\t\t\tif (materials === undefined || materials === null) {\r\n\t\t\t\tmaterials = new JSM.MaterialSet ();\r\n\t\t\t}\r\n\r\n\t\t\tvar bspTree = new JSM.BSPTree ();\r\n\t\t\tJSM.AddBodyToBSPTree (body, bspTree);\r\n\r\n\t\t\tJSM.TraverseBSPTreeForEyePosition (bspTree, camera.eye, function (node) {\r\n\t\t\t\tprojected = GetProjectedPolygonFromPolygon (node.polygon);\r\n\t\t\t\tpolygon = body.GetPolygon (node.userData.originalPolygon);\r\n\t\t\t\tmaterialIndex = polygon.GetMaterialIndex ();\r\n\t\t\t\tcolor = materials.GetMaterial (materialIndex).diffuse;\r\n\t\t\t\tdrawer.DrawPolygon (projected, color, true);\r\n\t\t\t});\t\t\r\n\t\t} else if (drawMode == 'HiddenLineFrontFacing') {\r\n\t\t\tif (materials === undefined || materials === null) {\r\n\t\t\t\tmaterials = new JSM.MaterialSet ();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\t\tprojected = GetProjectedPolygonFromBody (polygon);\r\n\t\t\t\tif (projected.GetOrientation () == JSM.Orientation.CounterClockwise) {\r\n\t\t\t\t\tmaterialIndex = polygon.GetMaterialIndex ();\r\n\t\t\t\t\tcolor = materials.GetMaterial (materialIndex).diffuse;\r\n\t\t\t\t\tdrawer.DrawPolygon (projected, color, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (drawMode == 'Wireframe') {\r\n\t\t\tvar vertexCount, currentCoord, currentVertex, vertex;\r\n\t\t\tvar drawedLines = [];\r\n\t\t\tfor (i = 0; i < body.PolygonCount (); i++) {\r\n\t\t\t\tcurrentCoord = null;\r\n\t\t\t\tcurrentVertex = null;\r\n\t\t\t\tpolygon = body.GetPolygon (i);\r\n\t\t\t\tvertexCount = polygon.VertexIndexCount ();\r\n\t\t\t\tfor (j = 0; j <= vertexCount; j++) {\r\n\t\t\t\t\tvertex = polygon.GetVertexIndex (j % vertexCount);\r\n\t\t\t\t\tcoord = body.GetVertexPosition (vertex);\r\n\t\t\t\t\tprojected = JSM.Project (coord, eye, center, up, fieldOfView * JSM.DegRad, aspectRatio, nearPlane, farPlane, viewPort);\r\n\t\t\t\t\tif (currentCoord !== null && currentVertex !== null && drawedLines[[currentVertex, vertex]] === undefined) {\r\n\t\t\t\t\t\tdrawer.DrawLine (currentCoord, projected);\r\n\t\t\t\t\t\tdrawedLines[[currentVertex, vertex]] = true;\r\n\t\t\t\t\t\tdrawedLines[[vertex, currentVertex]] = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcurrentVertex = vertex;\r\n\t\t\t\t\tcurrentCoord = projected;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/navigation',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Navigation = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.camera = null;\r\n\t\tthis.drawCallback = null;\r\n\t\tthis.resizeCallback = null;\r\n\t\t\r\n\t\tthis.mouse = null;\r\n\t\tthis.touch = null;\r\n\t\t\r\n\t\tthis.cameraFixUp = null;\r\n\t\tthis.cameraEnableOrbit = null;\r\n\t\tthis.cameraEnablePan = null;\r\n\t\tthis.cameraEnableZoom = null;\r\n\t\tthis.cameraNearDistanceLimit = null;\r\n\t\tthis.cameraFarDistanceLimit = null;\r\n\t\t\r\n\t\tthis.orbitCenter = null;\r\n\t\tthis.fullscreen = null;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.Init = function (canvas, camera, drawCallback, resizeCallback)\r\n\t{\r\n\t\tthis.canvas = canvas;\r\n\t\tthis.camera = camera;\r\n\t\tthis.drawCallback = drawCallback;\r\n\t\tthis.resizeCallback = resizeCallback;\r\n\r\n\t\tthis.mouse = new JSM.Mouse ();\r\n\t\tthis.touch = new JSM.Touch ();\r\n\t\t\r\n\t\tthis.cameraFixUp = true;\r\n\t\tthis.cameraEnableOrbit = true;\r\n\t\tthis.cameraEnablePan = true;\r\n\t\tthis.cameraEnableZoom = true;\r\n\t\t\r\n\t\tthis.orbitCenter = this.camera.center.Clone ();\r\n\t\tthis.fullscreen = false;\r\n\r\n\t\tvar myThis = this;\r\n\t\tif (document.addEventListener) {\r\n\t\t\tdocument.addEventListener ('mousemove', function (event) {myThis.OnMouseMove (event);});\r\n\t\t\tdocument.addEventListener ('mouseup', function (event) {myThis.OnMouseUp (event);});\r\n\t\t}\r\n\t\tif (this.canvas.addEventListener) {\r\n\t\t\tthis.canvas.addEventListener ('mousedown', function (event) {myThis.OnMouseDown (event);}, false);\r\n\t\t\tthis.canvas.addEventListener ('DOMMouseScroll', function (event) {myThis.OnMouseWheel (event);}, false);\r\n\t\t\tthis.canvas.addEventListener ('mousewheel', function (event) {myThis.OnMouseWheel (event);}, false);\r\n\t\t\tthis.canvas.addEventListener ('touchstart', function (event) {myThis.OnTouchStart (event);}, false);\r\n\t\t\tthis.canvas.addEventListener ('touchmove', function (event) {myThis.OnTouchMove (event);}, false);\r\n\t\t\tthis.canvas.addEventListener ('touchend', function (event) {myThis.OnTouchEnd (event);}, false);\r\n\t\t\tthis.canvas.addEventListener ('contextmenu', function (event) {myThis.OnContextMenu (event);}, false);\r\n\t\t}\r\n\t\tif (window.addEventListener) {\r\n\t\t\twindow.addEventListener ('resize', function (event) {myThis.OnResize (event);}, false);\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.SetCamera = function (eye, center, up)\r\n\t{\r\n\t\tthis.camera.Set (eye, center, up);\r\n\t\tthis.orbitCenter = this.camera.center.Clone ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.EnableFixUp = function (enable)\r\n\t{\r\n\t\tthis.cameraFixUp = enable;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.EnableOrbit = function (enable)\r\n\t{\r\n\t\tthis.cameraEnableOrbit = enable;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.EnablePan = function (enable)\r\n\t{\r\n\t\tthis.cameraEnablePan = enable;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.EnableZoom = function (enable)\r\n\t{\r\n\t\tthis.cameraEnableZoom = enable;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.SetNearDistanceLimit = function (limit)\r\n\t{\r\n\t\tthis.cameraNearDistanceLimit = limit;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.SetFarDistanceLimit = function (limit)\r\n\t{\r\n\t\tthis.cameraFarDistanceLimit = limit;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.SetOrbitCenter = function (orbitCenter)\r\n\t{\r\n\t\tthis.orbitCenter = orbitCenter;\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.FitInWindow = function (center, radius)\r\n\t{\r\n\t\tif (JSM.IsZero (radius)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar offsetToOrigo = JSM.CoordSub (this.camera.center, center);\r\n\t\tthis.camera.center = center;\r\n\t\tthis.camera.eye = JSM.CoordSub (this.camera.eye, offsetToOrigo);\r\n\t\t\r\n\t\tvar centerEyeDirection = JSM.CoordSub (this.camera.eye, this.camera.center).Normalize ();\r\n\t\tvar fieldOfView = this.camera.fieldOfView / 2.0;\r\n\t\tif (this.canvas.width < this.canvas.height) {\r\n\t\t\tfieldOfView = fieldOfView * this.canvas.width / this.canvas.height;\r\n\t\t}\r\n\t\tvar distance = radius / Math.sin (fieldOfView * JSM.DegRad);\r\n\t\t\r\n\t\tthis.camera.eye = this.camera.center.Clone ().Offset (centerEyeDirection, distance);\r\n\t\tthis.orbitCenter = this.camera.center.Clone ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.SetFullscreen = function (fullscreen)\r\n\t{\r\n\t\tthis.fullscreen = fullscreen;\r\n\t\tthis.ResizeCallback ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.Orbit = function (angleX, angleY)\r\n\t{\r\n\t\tvar radAngleX = angleX * JSM.DegRad;\r\n\t\tvar radAngleY = angleY * JSM.DegRad;\r\n\t\t\r\n\t\tvar viewDirection = JSM.CoordSub (this.camera.center, this.camera.eye).Normalize ();\r\n\t\tvar horizontalDirection = JSM.VectorCross (viewDirection, this.camera.up).Normalize ();\r\n\t\tvar differentCenter = !this.orbitCenter.IsEqual (this.camera.center);\r\n\t\t\r\n\t\tif (this.cameraFixUp) {\r\n\t\t\tvar originalAngle = viewDirection.AngleTo (this.camera.up);\r\n\t\t\tvar newAngle = originalAngle + radAngleY;\r\n\t\t\tif (JSM.IsGreater (newAngle, 0.0) && JSM.IsLower (newAngle, Math.PI)) {\r\n\t\t\t\tthis.camera.eye.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);\r\n\t\t\t\tif (differentCenter) {\r\n\t\t\t\t\tthis.camera.center.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.camera.eye.Rotate (this.camera.up, -radAngleX, this.orbitCenter);\r\n\t\t\tif (differentCenter) {\r\n\t\t\t\tthis.camera.center.Rotate (this.camera.up, -radAngleX, this.orbitCenter);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar verticalDirection = JSM.VectorCross (horizontalDirection, viewDirection).Normalize ();\r\n\t\t\tthis.camera.eye.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);\r\n\t\t\tthis.camera.eye.Rotate (verticalDirection, -radAngleX, this.orbitCenter);\r\n\t\t\tif (differentCenter) {\r\n\t\t\t\tthis.camera.center.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);\r\n\t\t\t\tthis.camera.center.Rotate (verticalDirection, -radAngleX, this.orbitCenter);\r\n\t\t\t}\r\n\t\t\tthis.camera.up = verticalDirection;\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.Pan = function (moveX, moveY)\r\n\t{\r\n\t\tvar viewDirection = JSM.CoordSub (this.camera.center, this.camera.eye).Normalize ();\r\n\t\tvar horizontalDirection = JSM.VectorCross (viewDirection, this.camera.up).Normalize ();\r\n\t\tvar verticalDirection = JSM.VectorCross (horizontalDirection, viewDirection).Normalize ();\r\n\t\t\r\n\t\tthis.camera.eye.Offset (horizontalDirection, -moveX);\r\n\t\tthis.camera.center.Offset (horizontalDirection, -moveX);\r\n\r\n\t\tthis.camera.eye.Offset (verticalDirection, moveY);\r\n\t\tthis.camera.center.Offset (verticalDirection, moveY);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.Zoom = function (ratio)\r\n\t{\r\n\t\tvar direction = JSM.CoordSub (this.camera.center, this.camera.eye);\r\n\t\tvar distance = direction.Length ();\r\n\t\tvar zoomIn = ratio > 0;\r\n\t\tif (zoomIn && this.cameraNearDistanceLimit !== null && distance < this.cameraNearDistanceLimit) {\r\n\t\t\treturn 0;\r\n\t\t} else if (!zoomIn && this.cameraFarDistanceLimit !== null && distance > this.cameraFarDistanceLimit) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tvar move = distance * ratio;\r\n\t\tthis.camera.eye.Offset (direction, move);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.DrawCallback = function ()\r\n\t{\r\n\t\tif (this.drawCallback !== undefined && this.drawCallback !== null) {\r\n\t\t\tthis.drawCallback ();\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.ResizeCallback = function ()\r\n\t{\r\n\t\tif (this.resizeCallback !== undefined && this.resizeCallback !== null) {\r\n\t\t\tif (this.fullscreen) {\r\n\t\t\t\tthis.canvas.width = window.innerWidth;\r\n\t\t\t\tthis.canvas.height = window.innerHeight;\r\n\t\t\t}\r\n\t\t\tthis.resizeCallback ();\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnMouseDown = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.mouse.Down (event, this.canvas);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnMouseMove = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.mouse.Move (event, this.canvas);\r\n\t\tif (!this.mouse.down) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar ratio = 0.0;\r\n\t\tif (this.mouse.button == 1) {\r\n\t\t\tif (!this.cameraEnableOrbit) {\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\r\n\t\t\tratio = 0.5;\r\n\t\t\tthis.Orbit (this.mouse.diff.x * ratio, this.mouse.diff.y * ratio);\r\n\t\t} else if (this.mouse.button == 3) {\r\n\t\t\tif (!this.cameraEnablePan) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar eyeCenterDistance = this.camera.eye.DistanceTo (this.camera.center);\r\n\t\t\tratio = 0.001 * eyeCenterDistance;\r\n\t\t\tthis.Pan (this.mouse.diff.x * ratio, this.mouse.diff.y * ratio);\r\n\t\t}\r\n\t\tthis.DrawCallback ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnMouseUp = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.mouse.Up (event, this.canvas);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnMouseOut = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.mouse.Out (event, this.canvas);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnMouseWheel = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tif (!this.cameraEnableZoom) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar eventParameters = event;\r\n\t\tif (eventParameters === null) {\r\n\t\t\teventParameters = window.event;\r\n\t\t}\r\n\t\t\r\n\t\tvar delta = 0;\r\n\t\tif (eventParameters.detail) {\r\n\t\t\tdelta = -eventParameters.detail;\r\n\t\t} else if (eventParameters.wheelDelta) {\r\n\t\t\tdelta = eventParameters.wheelDelta / 40;\r\n\t\t}\r\n\r\n\t\tvar ratio = 0.1;\r\n\t\tif (delta < 0) {\r\n\t\t\tratio = ratio * -1.0;\r\n\t\t}\r\n\r\n\t\tthis.Zoom (ratio);\r\n\t\tthis.DrawCallback ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnTouchStart = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.touch.Start (event, this.canvas);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnTouchMove = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.touch.Move (event, this.canvas);\r\n\t\tif (!this.touch.down) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar ratio = 0.0;\r\n\t\tif (this.touch.fingers == 1) {\r\n\t\t\tif (!this.cameraEnableOrbit) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tratio = 0.5;\r\n\t\t\tthis.Orbit (this.touch.diff.x * ratio, this.touch.diff.y * ratio);\r\n\t\t} else if (this.touch.fingers == 2) {\r\n\t\t\tif (!this.cameraEnableZoom) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tratio = 0.005;\r\n\t\t\tthis.Zoom (this.touch.diff.x * ratio);\r\n\t\t} else if (this.touch.fingers == 3) {\r\n\t\t\tif (!this.cameraEnablePan) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar eyeCenterDistance = this.camera.eye.DistanceTo (this.camera.center);\r\n\t\t\tratio = 0.001 * eyeCenterDistance;\r\n\t\t\tthis.Pan (this.touch.diff.x * ratio, this.touch.diff.y * ratio);\r\n\t\t}\r\n\t\tthis.DrawCallback ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnTouchEnd = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.touch.End (event, this.canvas);\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnContextMenu = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t};\r\n\r\n\tJSM.Navigation.prototype.OnResize = function (event)\r\n\t{\r\n\t\tevent.preventDefault ();\r\n\t\tthis.ResizeCallback ();\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/softwareviewer',[\"../core/jsm\"],function(JSM){\r\n\tJSM.SoftwareViewer = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.camera = null;\r\n\t\tthis.bodies = null;\r\n\t\tthis.drawer = null;\r\n\t\tthis.drawMode = null;\r\n\t\tthis.navigation = null;\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.Start = function (canvas, camera)\r\n\t{\r\n\t\tif (!this.InitCanvas (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitCamera (camera)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.InitCanvas = function (canvas)\r\n\t{\r\n\t\tthis.bodies = [];\r\n\t\tthis.canvas = canvas;\r\n\t\tif (!this.canvas) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.canvas instanceof (HTMLCanvasElement)) {\r\n\t\t\tthis.drawer = new JSM.CanvasDrawer (this.canvas);\r\n\t\t} else if (this.canvas instanceof (SVGSVGElement)) {\r\n\t\t\tthis.drawer = new JSM.SVGDrawer (this.canvas);\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.drawer) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tthis.drawMode = 'Wireframe';\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.InitCamera = function (camera)\r\n\t{\r\n\t\tthis.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());\r\n\t\tif (!this.camera) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.navigation = new JSM.Navigation ();\r\n\t\tif (!this.navigation.Init (this.canvas, this.camera, this.Draw.bind (this), this.Resize.bind (this))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.AddBody = function (body, materials)\r\n\t{\r\n\t\tthis.bodies.push ([body, materials]);\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.RemoveBodies = function ()\r\n\t{\r\n\t\tthis.bodies = [];\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tvar sphere = this.GetBoundingSphere ();\r\n\t\tthis.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar boundingBox = this.GetBoundingBox ();\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\t\t\r\n\t\tvar i, j, body, vertex;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tbody = this.bodies[i][0];\r\n\t\t\tfor (j = 0; j < body.VertexCount (); j++) {\r\n\t\t\t\tvertex = body.GetVertex (j);\r\n\t\t\t\tmin.x = JSM.Minimum (min.x, vertex.position.x);\r\n\t\t\t\tmin.y = JSM.Minimum (min.y, vertex.position.y);\r\n\t\t\t\tmin.z = JSM.Minimum (min.z, vertex.position.z);\r\n\t\t\t\tmax.x = JSM.Maximum (max.x, vertex.position.x);\r\n\t\t\t\tmax.y = JSM.Maximum (max.y, vertex.position.y);\r\n\t\t\t\tmax.z = JSM.Maximum (max.z, vertex.position.z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ();\r\n\t\tvar radius = 0.0;\r\n\r\n\t\tvar i, j, body, vertex, distance;\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tbody = this.bodies[i][0];\r\n\t\t\tfor (j = 0; j < body.VertexCount (); j++) {\r\n\t\t\t\tvertex = body.GetVertex (j);\r\n\t\t\t\tdistance = center.DistanceTo (vertex.position);\r\n\t\t\t\tif (JSM.IsGreater (distance, radius)) {\r\n\t\t\t\t\tradius = distance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar sphere = new JSM.Sphere (center, radius);\r\n\t\treturn sphere;\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.SoftwareViewer.prototype.Draw = function ()\r\n\t{\r\n\t\tvar i, bodyAndMaterials;\r\n\t\tthis.drawer.Clear ();\r\n\t\t\r\n\t\tfor (i = 0; i < this.bodies.length; i++) {\r\n\t\t\tbodyAndMaterials = this.bodies[i];\r\n\t\t\tJSM.DrawProjectedBody (bodyAndMaterials[0], bodyAndMaterials[1], this.camera, this.drawMode, false, this.drawer);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/spriteviewer',[\"../core/jsm\"],function(JSM){\r\n\tJSM.SpriteViewer = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.camera = null;\r\n\t\tthis.callbacks = null;\r\n\t\tthis.points = null;\r\n\t\tthis.projected = null;\r\n\t\tthis.navigation = null;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.Start = function (canvas, camera, callbacks)\r\n\t{\r\n\t\tif (!this.InitCanvas (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitCamera (camera)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitCallbacks (callbacks)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.InitCanvas = function (canvas)\r\n\t{\r\n\t\tthis.points = [];\r\n\t\tthis.canvas = canvas;\r\n\t\tif (!this.canvas) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.InitCamera = function (camera)\r\n\t{\r\n\t\tthis.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());\r\n\t\tif (!this.camera) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.navigation = new JSM.Navigation ();\r\n\t\tif (!this.navigation.Init (this.canvas, this.camera, this.Draw.bind (this))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.InitCallbacks = function (callbacks)\r\n\t{\r\n\t\tthis.callbacks = {\r\n\t\t\tonPointDraw : null\r\n\t\t};\r\n\r\n\t\tif (callbacks !== undefined) {\r\n\t\t\tif (callbacks.onDrawStart !== undefined) { this.callbacks.onDrawStart = callbacks.onDrawStart; }\r\n\t\t\tif (callbacks.onPointDraw !== undefined) { this.callbacks.onPointDraw = callbacks.onPointDraw; }\r\n\t\t\tif (callbacks.onDrawEnd !== undefined) { this.callbacks.onDrawEnd = callbacks.onDrawEnd; }\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.AddPoint = function (point)\r\n\t{\r\n\t\tthis.points.push (point);\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.RemovePoints = function ()\r\n\t{\r\n\t\tthis.points = [];\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.NearestPointUnderPosition = function (maxDistance, x, y)\r\n\t{\r\n\t\tvar position = new JSM.Coord2D (x, y);\r\n\t\t\r\n\t\tvar minIndex = -1;\r\n\t\tvar minDistance = JSM.Inf;\r\n\t\tvar i, projected, distance;\r\n\t\tfor (i = 0; i < this.projected.length; i++) {\r\n\t\t\tprojected = this.projected[i];\r\n\t\t\tdistance = position.DistanceTo (new JSM.Coord2D (projected.position.x, projected.position.y));\r\n\t\t\tif (JSM.IsLower (distance, maxDistance) && JSM.IsLower (distance, minDistance)) {\r\n\t\t\t\tminIndex = projected.originalIndex;\r\n\t\t\t\tminDistance = distance;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn minIndex;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.NearestPointUnderMouse = function (maxDistance)\r\n\t{\r\n\t\treturn this.NearestPointUnderPosition (maxDistance, this.navigation.mouse.curr.x, this.navigation.mouse.curr.y);\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.NearestPointUnderTouch = function (maxDistance)\r\n\t{\r\n\t\treturn this.NearestPointUnderPosition (maxDistance, this.navigation.touch.curr.x, this.navigation.touch.curr.y);\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tvar sphere = this.GetBoundingSphere ();\r\n\t\tthis.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar boundingBox = this.GetBoundingBox ();\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\t\t\r\n\t\tvar i, coord;\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tcoord = this.points[i];\r\n\t\t\tmin.x = JSM.Minimum (min.x, coord.x);\r\n\t\t\tmin.y = JSM.Minimum (min.y, coord.y);\r\n\t\t\tmin.z = JSM.Minimum (min.z, coord.z);\r\n\t\t\tmax.x = JSM.Maximum (max.x, coord.x);\r\n\t\t\tmax.y = JSM.Maximum (max.y, coord.y);\r\n\t\t\tmax.z = JSM.Maximum (max.z, coord.z);\r\n\t\t}\r\n\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ();\r\n\t\tvar radius = 0.0;\r\n\r\n\t\tvar i, coord, distance;\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tcoord = this.points[i];\r\n\t\t\tdistance = center.DistanceTo (coord);\r\n\t\t\tif (JSM.IsGreater (distance, radius)) {\r\n\t\t\t\tradius = distance;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar sphere = new JSM.Sphere (center, radius);\r\n\t\treturn sphere;\r\n\t};\r\n\r\n\tJSM.SpriteViewer.prototype.Draw = function ()\r\n\t{\r\n\t\tif (this.callbacks.onDrawStart !== null) {\r\n\t\t\tthis.callbacks.onDrawStart (this.canvas);\r\n\t\t}\r\n\r\n\t\tvar aspectRatio = this.canvas.width / this.canvas.height;\r\n\t\tvar viewPort = [0, 0, this.canvas.width, this.canvas.height];\r\n\t\tthis.projected = [];\r\n\t\t\r\n\t\tvar i, coord, projected;\r\n\t\tfor (i = 0; i < this.points.length; i++) {\r\n\t\t\tcoord = this.points[i];\r\n\t\t\tprojected = JSM.Project (coord, this.camera.eye, this.camera.center, this.camera.up, this.camera.fieldOfView * JSM.DegRad, aspectRatio, this.camera.nearClippingPlane, this.camera.farClippingPlane, viewPort);\r\n\t\t\tprojected.y = this.canvas.height - projected.y;\r\n\t\t\tif (projected !== null) {\r\n\t\t\t\tthis.projected.push ({position : projected, originalIndex : i});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.projected.sort (function (a, b) {\r\n\t\t\tif (a.position.z > b.position.z) {\r\n\t\t\t\treturn -1;\r\n\t\t\t} else if (a.position.z < b.position.z) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t});\r\n\t\t\r\n\t\tfor (i = 0; i < this.projected.length; i++) {\r\n\t\t\tif (this.callbacks.onPointDraw !== null) {\r\n\t\t\t\tthis.callbacks.onPointDraw (this.canvas, this.projected[i].originalIndex, this.projected[i].position);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.callbacks.onDrawEnd !== null) {\r\n\t\t\tthis.callbacks.onDrawEnd (this.canvas);\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/viewer',[\"../core/jsm\"],function(JSM){\r\n\tJSM.Viewer = function ()\r\n\t{\r\n\t\tthis.camera = null;\r\n\t\tthis.renderer = null;\r\n\t\tthis.navigation = null;\r\n\t\tthis.cameraLight = null;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.Init = function (canvas, camera)\r\n\t{\r\n\t\tif (!this.InitRenderer (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitNavigation (camera)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitLights ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.Reset = function ()\r\n\t{\r\n\t\tthis.RemoveBodies ();\r\n\t\tthis.RemoveLights ();\r\n\t\tthis.SetAmbientLight (new JSM.RenderAmbientLight (0x7f7f7f));\r\n\t\tthis.EnableCameraLight ();\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.InitRenderer = function (canvas)\r\n\t{\r\n\t\tthis.renderer = new JSM.Renderer ();\r\n\t\tif (!this.renderer.Init (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.InitNavigation = function (camera)\r\n\t{\r\n\t\tthis.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());\r\n\t\tif (!this.camera) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.navigation = new JSM.Navigation ();\r\n\t\tif (!this.navigation.Init (this.renderer.canvas, this.camera, this.Draw.bind (this), this.Resize.bind (this))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.InitLights = function ()\r\n\t{\r\n\t\tthis.SetAmbientLight (new JSM.RenderAmbientLight (0x7f7f7f));\r\n\t\tthis.EnableCameraLight ();\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.SetClearColor = function (red, green, blue)\r\n\t{\r\n\t\tthis.renderer.SetClearColor (red, green, blue);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.EnableCameraLight = function ()\r\n\t{\r\n\t\tif (this.cameraLight !== null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.cameraLight = new JSM.RenderDirectionalLight (0x7f7f7f, 0xffffff, new JSM.Vector (1.0, 0.0, 0.0));\r\n\t\tthis.AddLight (this.cameraLight);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.DisableCameraLight = function ()\r\n\t{\r\n\t\tif (this.cameraLight === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.RemoveLight (this.cameraLight);\r\n\t\tthis.cameraLight = null;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.GetCameraLight = function ()\r\n\t{\r\n\t\treturn this.cameraLight;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.SetAmbientLight = function (light)\r\n\t{\r\n\t\tthis.renderer.SetAmbientLight (light);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.AddLight = function (light)\r\n\t{\r\n\t\tthis.renderer.AddLight (light);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.RemoveLight = function (light)\r\n\t{\r\n\t\tthis.renderer.RemoveLight (light);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.RemoveLights = function ()\r\n\t{\r\n\t\tthis.renderer.RemoveLights ();\r\n\t\tthis.cameraLight = null;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.AddBody = function (renderBody)\r\n\t{\r\n\t\tthis.renderer.AddBody (renderBody, this.Draw.bind (this));\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.AddBodies = function (renderBodies)\r\n\t{\r\n\t\tthis.renderer.AddBodies (renderBodies, this.Draw.bind (this));\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.RemoveBody = function (body)\r\n\t{\r\n\t\tthis.renderer.RemoveBody (body);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.RemoveBodies = function ()\r\n\t{\r\n\t\tthis.renderer.RemoveBodies ();\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tvar sphere = this.GetBoundingSphere ();\r\n\t\tthis.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.SetFullscreen = function (fullscreen)\r\n\t{\r\n\t\tthis.navigation.SetFullscreen (fullscreen);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar boundingBox = this.GetBoundingBox ();\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\t\t\r\n\t\tthis.renderer.EnumerateBodies (function (body) {\r\n\t\t\tvar transformation = body.GetTransformation ();\r\n\t\t\tbody.EnumerateMeshes (function (mesh) {\r\n\t\t\t\tvar i, vertex;\r\n\t\t\t\tfor (i = 0; i < mesh.VertexCount (); i++) {\r\n\t\t\t\t\tvertex = mesh.GetTransformedVertex (i, transformation);\r\n\t\t\t\t\tmin.x = JSM.Minimum (min.x, vertex.x);\r\n\t\t\t\t\tmin.y = JSM.Minimum (min.y, vertex.y);\r\n\t\t\t\t\tmin.z = JSM.Minimum (min.z, vertex.z);\r\n\t\t\t\t\tmax.x = JSM.Maximum (max.x, vertex.x);\r\n\t\t\t\t\tmax.y = JSM.Maximum (max.y, vertex.y);\r\n\t\t\t\t\tmax.z = JSM.Maximum (max.z, vertex.z);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ();\r\n\t\tvar radius = 0.0;\r\n\r\n\t\tthis.renderer.EnumerateBodies (function (body) {\r\n\t\t\tvar transformation = body.GetTransformation ();\r\n\t\t\tbody.EnumerateMeshes (function (mesh) {\r\n\t\t\t\tvar i, vertex, distance;\r\n\t\t\t\tfor (i = 0; i < mesh.VertexCount (); i++) {\r\n\t\t\t\t\tvertex = mesh.GetTransformedVertex (i, transformation);\r\n\t\t\t\t\tdistance = center.DistanceTo (vertex);\r\n\t\t\t\t\tif (JSM.IsGreater (distance, radius)) {\r\n\t\t\t\t\t\tradius = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t\tvar sphere = new JSM.Sphere (center, radius);\r\n\t\treturn sphere;\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.FindObjects = function (screenX, screenY)\r\n\t{\r\n\t\treturn this.renderer.FindObjects (this.camera, screenX, screenY);\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.renderer.Resize ();\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.Viewer.prototype.Draw = function ()\r\n\t{\r\n\t\tvar camera = this.camera;\r\n\t\tvar cameraLight = this.GetCameraLight ();\r\n\t\tif (cameraLight !== null) {\r\n\t\t\tcameraLight.direction = JSM.CoordSub (camera.center, camera.eye).Normalize ();\r\n\t\t}\r\n\t\tthis.renderer.Render (camera);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/viewer/pointcloudviewer',[\"../core/jsm\"],function(JSM){\r\n\tJSM.PointCloudViewer = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.renderer = null;\r\n\t\tthis.navigation = null;\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.Init = function (canvas, camera)\r\n\t{\r\n\t\tif (!this.InitRenderer (canvas, camera)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitNavigation ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.InitRenderer = function (canvas, camera)\r\n\t{\r\n\t\tthis.renderer = new JSM.PointCloudRenderer ();\r\n\t\tif (!this.renderer.Init (canvas, camera)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.InitNavigation = function ()\r\n\t{\r\n\t\tthis.navigation = new JSM.Navigation ();\r\n\t\tif (!this.navigation.Init (this.renderer.canvas, this.renderer.camera, this.Draw.bind (this), this.Resize.bind (this))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.SetClearColor = function (red, green, blue)\r\n\t{\r\n\t\tthis.renderer.SetClearColor (red, green, blue);\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.SetPointSize = function (pointSize)\r\n\t{\r\n\t\tthis.renderer.SetPointSize (pointSize);\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.AddPoints = function (points, colors)\r\n\t{\r\n\t\tthis.renderer.AddPoints (points, colors);\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.RemovePoints = function ()\r\n\t{\r\n\t\tthis.renderer.RemovePoints ();\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tvar sphere = this.GetBoundingSphere ();\r\n\t\tthis.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar boundingBox = this.GetBoundingBox ();\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\t\t\r\n\t\tvar i, j, points, point;\r\n\t\tfor (i = 0; i < this.renderer.points.length; i++) {\r\n\t\t\tpoints = this.renderer.points[i].pointArray;\r\n\t\t\tfor (j = 0; j < points.length; j = j + 3) {\r\n\t\t\t\tpoint = new JSM.Coord (points[j], points[j + 1], points[j + 2]);\r\n\t\t\t\tmin.x = JSM.Minimum (min.x, point.x);\r\n\t\t\t\tmin.y = JSM.Minimum (min.y, point.y);\r\n\t\t\t\tmin.z = JSM.Minimum (min.z, point.z);\r\n\t\t\t\tmax.x = JSM.Maximum (max.x, point.x);\r\n\t\t\t\tmax.y = JSM.Maximum (max.y, point.y);\r\n\t\t\t\tmax.z = JSM.Maximum (max.z, point.z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar center = this.GetCenter ();\r\n\t\tvar radius = 0.0;\r\n\r\n\t\tvar i, j, points, point, distance;\r\n\t\tfor (i = 0; i < this.renderer.points.length; i++) {\r\n\t\t\tpoints = this.renderer.points[i].pointArray;\r\n\t\t\tfor (j = 0; j < points.length; j = j + 3) {\r\n\t\t\t\tpoint = new JSM.Coord (points[j], points[j + 1], points[j + 2]);\r\n\t\t\t\tdistance = center.DistanceTo (point);\r\n\t\t\t\tif (JSM.IsGreater (distance, radius)) {\r\n\t\t\t\t\tradius = distance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar sphere = new JSM.Sphere (center, radius);\r\n\t\treturn sphere;\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.renderer.Resize ();\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.PointCloudViewer.prototype.Draw = function ()\r\n\t{\r\n\t\tthis.renderer.Render ();\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extras/solidgenerator',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: GenerateSolidWithRadius\r\n\t* Description: Generates a special solid with the given radius.\r\n\t* Parameters:\r\n\t*\tsolidName {string} the name of the solid\r\n\t*\tradius {number} the radius of the solid\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSolidWithRadius = function (solidName, radius)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar equalRadius = true;\r\n\t\t\r\n\t\tif (solidName === 'Tetrahedron') {\r\n\t\t\tresult = JSM.GenerateTetrahedron ();\r\n\t\t} else if (solidName === 'Hexahedron') {\r\n\t\t\tresult = JSM.GenerateHexahedron ();\r\n\t\t} else if (solidName === 'Octahedron') {\r\n\t\t\tresult = JSM.GenerateOctahedron ();\r\n\t\t} else if (solidName === 'Dodecahedron') {\r\n\t\t\tresult = JSM.GenerateDodecahedron ();\r\n\t\t} else if (solidName === 'Icosahedron') {\r\n\t\t\tresult = JSM.GenerateIcosahedron ();\r\n\t\t} else if (solidName === 'TruncatedTetrahedron') {\r\n\t\t\tresult = JSM.GenerateTruncatedTetrahedron ();\r\n\t\t} else if (solidName === 'Cuboctahedron') {\r\n\t\t\tresult = JSM.GenerateCuboctahedron ();\r\n\t\t} else if (solidName === 'TruncatedCube') {\r\n\t\t\tresult = JSM.GenerateTruncatedCube ();\r\n\t\t} else if (solidName === 'TruncatedOctahedron') {\r\n\t\t\tresult = JSM.GenerateTruncatedOctahedron ();\r\n\t\t} else if (solidName === 'Rhombicuboctahedron') {\r\n\t\t\tresult = JSM.GenerateRhombicuboctahedron ();\r\n\t\t} else if (solidName === 'TruncatedCuboctahedron') {\r\n\t\t\tresult = JSM.GenerateTruncatedCuboctahedron ();\r\n\t\t} else if (solidName === 'SnubCube') {\r\n\t\t\tresult = JSM.GenerateSnubCube ();\r\n\t\t} else if (solidName === 'Icosidodecahedron') {\r\n\t\t\tresult = JSM.GenerateIcosidodecahedron ();\r\n\t\t} else if (solidName === 'TruncatedDodecahedron') {\r\n\t\t\tresult = JSM.GenerateTruncatedDodecahedron ();\r\n\t\t} else if (solidName === 'TruncatedIcosahedron') {\r\n\t\t\tresult = JSM.GenerateTruncatedIcosahedron ();\r\n\t\t} else if (solidName === 'Rhombicosidodecahedron') {\r\n\t\t\tresult = JSM.GenerateRhombicosidodecahedron ();\r\n\t\t} else if (solidName === 'TruncatedIcosidodecahedron') {\r\n\t\t\tresult = JSM.GenerateTruncatedIcosidodecahedron ();\r\n\t\t} else if (solidName === 'SnubDodecahedron') {\r\n\t\t\tresult = JSM.GenerateSnubDodecahedron ();\r\n\t\t} else if (solidName === 'TetrakisHexahedron') {\r\n\t\t\tresult = JSM.GenerateTetrakisHexahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'RhombicDodecahedron') {\r\n\t\t\tresult = JSM.GenerateRhombicDodecahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'PentakisDodecahedron') {\r\n\t\t\tresult = JSM.GeneratePentakisDodecahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'SmallStellatedDodecahedron') {\r\n\t\t\tresult = JSM.GenerateSmallStellatedDodecahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'GreatDodecahedron') {\r\n\t\t\tresult = JSM.GenerateGreatDodecahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'SmallTriambicIcosahedron') {\r\n\t\t\tresult = JSM.GenerateSmallTriambicIcosahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'GreatStellatedDodecahedron') {\r\n\t\t\tresult = JSM.GenerateGreatStellatedDodecahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'SmallTriakisOctahedron') {\r\n\t\t\tresult = JSM.GenerateSmallTriakisOctahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'StellaOctangula') {\r\n\t\t\tresult = JSM.GenerateStellaOctangula ();\r\n\t\t\tequalRadius = false;\r\n\t\t} else if (solidName === 'TriakisTetrahedron') {\r\n\t\t\tresult = JSM.GenerateTriakisTetrahedron ();\r\n\t\t\tequalRadius = false;\r\n\t\t}\r\n\r\n\t\tif (result.VertexCount () > 0) {\r\n\t\t\tvar i;\r\n\t\t\r\n\t\t\tvar maxRadius = 0.0;\r\n\t\t\tif (equalRadius) {\r\n\t\t\t\tmaxRadius = result.GetVertexPosition (0).Length ();\r\n\t\t\t} else {\r\n\t\t\t\tvar currentRadius;\r\n\t\t\t\tfor (i = 0; i < result.VertexCount (); i++) {\r\n\t\t\t\t\tcurrentRadius = result.GetVertexPosition (i).Length ();\r\n\t\t\t\t\tif (JSM.IsGreater (currentRadius, maxRadius)) {\r\n\t\t\t\t\t\tmaxRadius = currentRadius;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar scale = radius / maxRadius;\r\n\t\t\t\r\n\t\t\tvar vertex;\r\n\t\t\tfor (i = 0; i < result.VertexCount (); i++) {\r\n\t\t\t\tvertex = result.GetVertex (i);\r\n\t\t\t\tvertex.position.MultiplyScalar (scale);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTetrahedron\r\n\t* Description: Generates a tetrahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTetrahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, +a, +a)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, -a, +a)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, +a, -a)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, -a, -a)));\r\n\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([0, 1, 3]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([0, 2, 1]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([0, 3, 2]));\r\n\t\tresult.AddPolygon (new JSM.BodyPolygon ([1, 2, 3]));\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateHexahedron\r\n\t* Description: Generates a hexahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateHexahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 1, 5, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 3, 1]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 4, 6, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 3, 7, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 6, 7, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 5, 7, 6]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateOctahedron\r\n\t* Description: Generates an octahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateOctahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +b, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 3, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 4, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 5, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 2, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 3, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 5, 3]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateDodecahedron\r\n\t* Description: Generates a dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateDodecahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar d = 1.0 / c;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +a);\r\n\t\t\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -d, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -d);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 10, 2, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 16, 18, 1, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 12, 14, 3, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 5, 14, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 18, 4, 11, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 6, 15, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 13, 4, 18, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 14, 5, 19, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 17, 6, 10, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 13, 15, 7, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 9, 11, 7, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 17, 19, 7, 15]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateIcosahedron\r\n\t* Description: Generates an icosahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateIcosahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, -c, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 4, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 6, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 10, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 3, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 6, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 11, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 5, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 7, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 5, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 7, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 9, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 8, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 9, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 11, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 10, 11]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedTetrahedron\r\n\t* Description: Generates a truncated tetrahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedTetrahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 3.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 11, 7]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 6, 5, 9, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 4, 7, 11, 10, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 3, 7, 4, 8, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 5, 6, 10, 11, 3]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCuboctahedron\r\n\t* Description: Generates a cuboctahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCuboctahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 5, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 7, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 6, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 11, 7]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 4, 1, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 11, 3, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 10, 2, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 6, 3, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 8, 6, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 9, 7, 11]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedCube\r\n\t* Description: Generates a truncated cube.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedCube = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = Math.sqrt (2.0) - 1.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 16, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 11, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 20, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 21, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 22, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 15, 23]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 1, 17, 21, 5, 3, 19, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 10, 2, 4, 12, 9, 1]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 18, 22, 6, 7, 23, 20, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 5, 13, 15, 7, 6, 14, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 16, 19, 11, 14, 22, 18, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 12, 20, 23, 15, 13, 21, 17]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedOctahedron\r\n\t* Description: Generates a truncated octahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedOctahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\t\tvar c = 2.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +c, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -c, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +c, -a);\r\n\t\tJSM.AddVertexToBody (result, +b, -c, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +c);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -c);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +c);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, -c, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, -c, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +c, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -c, -a, +b);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 10, 2, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 3, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 12, 6, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 15, 7, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 22, 18, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 21, 19, 23]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 4, 14, 21, 17, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 16, 20, 12, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 6, 12, 20, 18, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 11, 19, 21, 14, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 5, 13, 22, 16, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 17, 23, 15, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 7, 15, 23, 19, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 9, 18, 22, 13, 7]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRhombicuboctahedron\r\n\t* Description: Generates a rhombicuboctahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRhombicuboctahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 1.0 + Math.sqrt (2.0);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 16, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 9, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 10, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 11, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 20, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 21, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 22, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 15, 23]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 18, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 3, 6, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 11, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 7, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 5, 13, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 17, 20, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 6, 14, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 19, 22, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 12, 15, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 7, 23, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 9, 13, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 16, 17, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 12, 20, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 14, 15, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 13, 21, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 22, 23, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 18, 20, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [19, 21, 23, 22]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedCuboctahedron\r\n\t* Description: Generates a truncated cuboctahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedCuboctahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 1.0 + Math.sqrt (2.0);\r\n\t\tvar c = 1.0 + 2.0 * Math.sqrt (2.0);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +c);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -c);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, +c);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +c);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, -c);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, -c);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, +c);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, +c, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -c, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +c, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, -c, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -c);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +c);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -c);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, +c);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +c, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -c, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +c, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +c, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, -c, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -c, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, +c, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, -c, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, -c, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +c, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, +c, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -c, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, -c, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, +c, -a, -b);\r\n\t\tJSM.AddVertexToBody (result, -c, -a, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +c, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -c, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, +c, -b, -a);\r\n\t\tJSM.AddVertexToBody (result, -c, -b, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 11, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 5, 14, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 6, 13, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 12, 15, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 19, 35, 32]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 34, 38, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 33, 37, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [23, 39, 36, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [24, 40, 43, 27]);\r\n\t\tJSM.AddPolygonToBody (result, [25, 29, 46, 42]);\r\n\t\tJSM.AddPolygonToBody (result, [26, 30, 45, 41]);\r\n\t\tJSM.AddPolygonToBody (result, [28, 44, 47, 31]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 16, 32, 40, 24, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 10, 27, 43, 34, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 9, 25, 42, 35, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 11, 26, 41, 33, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 21, 38, 46, 29, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 20, 36, 45, 30, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 22, 37, 44, 28, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 15, 31, 47, 39, 23]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 3, 18, 22, 6, 2, 19, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 17, 21, 4, 7, 23, 20, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 24, 27, 10, 14, 30, 26, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 13, 28, 31, 15, 12, 29, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [32, 35, 42, 46, 38, 34, 43, 40]);\r\n\t\tJSM.AddPolygonToBody (result, [33, 41, 45, 36, 39, 47, 44, 37]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSnubCube\r\n\t* Description: Generates a snub cube.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSnubCube = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = (1.0 / 3.0) * (Math.pow (17 + 3.0 * Math.sqrt (33.0), 1.0 / 3.0) - Math.pow (-17 + 3.0 * Math.sqrt (33.0), 1.0 / 3.0) - 1.0);\r\n\t\tvar c = 1.0 / b;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -c);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, +c);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +c);\r\n\t\tJSM.AddVertexToBody (result, -a, -b, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, -c, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +c, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +c, -a);\r\n\t\tJSM.AddVertexToBody (result, -b, -c, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, -c, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +c, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, +c, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, -c, -a, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -c, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, +c, -b);\r\n\t\tJSM.AddVertexToBody (result, -a, -c, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +c);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, -c);\r\n\t\tJSM.AddVertexToBody (result, -b, -a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, -c, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, +c, -b, -a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -a);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 6, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 9, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 17, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 22, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 10, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 18, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 20, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 5, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 8, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 16, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 21, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 7, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 11, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 19, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 23, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 13, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 18, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 14, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 16, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 12, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 17, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 15, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 19, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 14, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 12, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 13, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 15, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 16, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 19, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 17, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [15, 18, 21]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 19, 3, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 16, 2, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 15, 7, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 12, 6, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 23, 11, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 20, 10, 22]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateIcosidodecahedron\r\n\t* Description: Generates an icosidodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateIcosidodecahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 0.0;\r\n\t\tvar b = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar c = 1.0 / 2.0;\r\n\t\tvar d = b / 2.0;\r\n\t\tvar e = (1.0 + b) / 2.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +a, +a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +d, +e);\r\n\t\tJSM.AddVertexToBody (result, +c, +d, -e);\r\n\t\tJSM.AddVertexToBody (result, +c, -d, +e);\r\n\t\tJSM.AddVertexToBody (result, -c, +d, +e);\r\n\t\tJSM.AddVertexToBody (result, +c, -d, -e);\r\n\t\tJSM.AddVertexToBody (result, -c, +d, -e);\r\n\t\tJSM.AddVertexToBody (result, -c, -d, +e);\r\n\t\tJSM.AddVertexToBody (result, -c, -d, -e);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +e, +c);\r\n\t\tJSM.AddVertexToBody (result, +d, -e, +c);\r\n\t\tJSM.AddVertexToBody (result, -d, +e, +c);\r\n\t\tJSM.AddVertexToBody (result, +d, +e, -c);\r\n\t\tJSM.AddVertexToBody (result, -d, -e, +c);\r\n\t\tJSM.AddVertexToBody (result, +d, -e, -c);\r\n\t\tJSM.AddVertexToBody (result, -d, +e, -c);\r\n\t\tJSM.AddVertexToBody (result, -d, -e, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +e, +c, +d);\r\n\t\tJSM.AddVertexToBody (result, -e, +c, +d);\r\n\t\tJSM.AddVertexToBody (result, +e, +c, -d);\r\n\t\tJSM.AddVertexToBody (result, +e, -c, +d);\r\n\t\tJSM.AddVertexToBody (result, -e, +c, -d);\r\n\t\tJSM.AddVertexToBody (result, -e, -c, +d);\r\n\t\tJSM.AddVertexToBody (result, +e, -c, -d);\r\n\t\tJSM.AddVertexToBody (result, -e, -c, -d);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 6, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 12, 8]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 10, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 11, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 14, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 20, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 18, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 19, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 22, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 28, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 26, 29]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 27, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 22, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 17, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 15, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 16, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 28, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 26, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 27, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 21, 29]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 8, 25, 22, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 9, 23, 27, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 7, 24, 28, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 13, 29, 26, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 16, 9, 6, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 17, 7, 11, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 15, 8, 12, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 21, 13, 10, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 24, 17, 14, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 25, 15, 19, 28]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 23, 16, 20, 26]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 29, 21, 18, 27]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedDodecahedron\r\n\t* Description: Generates a truncated dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedDodecahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 0.0;\r\n\t\tvar b = 2.0;\r\n\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar d = 1.0 / c;\r\n\t\tvar e = 2.0 + c;\r\n\t\tvar f = 2.0 * c;\r\n\t\tvar g = Math.pow (c, 2.0);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +d, +e);\r\n\t\tJSM.AddVertexToBody (result, +a, +d, -e);\r\n\t\tJSM.AddVertexToBody (result, +a, -d, +e);\r\n\t\tJSM.AddVertexToBody (result, +a, -d, -e);\r\n\r\n\t\tJSM.AddVertexToBody (result, +e, +a, +d);\r\n\t\tJSM.AddVertexToBody (result, -e, +a, +d);\r\n\t\tJSM.AddVertexToBody (result, +e, +a, -d);\r\n\t\tJSM.AddVertexToBody (result, -e, +a, -d);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +e, +a);\r\n\t\tJSM.AddVertexToBody (result, +d, -e, +a);\r\n\t\tJSM.AddVertexToBody (result, -d, +e, +a);\r\n\t\tJSM.AddVertexToBody (result, -d, -e, +a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +c, +f);\r\n\t\tJSM.AddVertexToBody (result, +d, +c, -f);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, +f);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, +f);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, -f);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, -f);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, +f);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, -f);\r\n\r\n\t\tJSM.AddVertexToBody (result, +f, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, +f, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, -f, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, -d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, -f, -d, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +f, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, +f, -d);\r\n\t\tJSM.AddVertexToBody (result, +c, -f, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, +f, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, -f, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, +f, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, -f, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, -f, -d);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +g);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -g);\r\n\t\tJSM.AddVertexToBody (result, +c, -b, +g);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +g);\r\n\t\tJSM.AddVertexToBody (result, +c, -b, -g);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -g);\r\n\t\tJSM.AddVertexToBody (result, -c, -b, +g);\r\n\t\tJSM.AddVertexToBody (result, -c, -b, -g);\r\n\r\n\t\tJSM.AddVertexToBody (result, +g, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +g, +c, -b);\r\n\t\tJSM.AddVertexToBody (result, +g, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -g, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +g, -c, -b);\r\n\t\tJSM.AddVertexToBody (result, -g, +c, -b);\r\n\t\tJSM.AddVertexToBody (result, -g, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -g, -c, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +g, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +g, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -g, +c);\r\n\t\tJSM.AddVertexToBody (result, -b, +g, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -g, -c);\r\n\t\tJSM.AddVertexToBody (result, -b, +g, -c);\r\n\t\tJSM.AddVertexToBody (result, -b, -g, +c);\r\n\t\tJSM.AddVertexToBody (result, -b, -g, -c);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 12, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 17, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 18, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 16, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 20, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 26, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 24, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 25, 27]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 28, 29]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 32, 30]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 33, 31]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 34, 35]);\r\n\t\tJSM.AddPolygonToBody (result, [36, 44, 52]);\r\n\t\tJSM.AddPolygonToBody (result, [37, 53, 45]);\r\n\t\tJSM.AddPolygonToBody (result, [38, 54, 46]);\r\n\t\tJSM.AddPolygonToBody (result, [39, 55, 47]);\r\n\t\tJSM.AddPolygonToBody (result, [40, 48, 56]);\r\n\t\tJSM.AddPolygonToBody (result, [41, 49, 57]);\r\n\t\tJSM.AddPolygonToBody (result, [42, 50, 58]);\r\n\t\tJSM.AddPolygonToBody (result, [43, 59, 51]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 14, 38, 46, 22, 20, 44, 36, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 15, 39, 47, 23, 26, 50, 42, 18, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 3, 19, 43, 51, 27, 25, 49, 41, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 13, 37, 45, 21, 24, 48, 40, 16, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 6, 21, 45, 53, 29, 28, 52, 44, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 22, 46, 54, 30, 32, 56, 48, 24, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 7, 27, 51, 59, 35, 34, 58, 50, 26]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 23, 47, 55, 31, 33, 57, 49, 25, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 10, 31, 55, 39, 15, 12, 36, 52, 28]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 29, 53, 37, 13, 17, 41, 57, 33, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 11, 35, 59, 43, 19, 16, 40, 56, 32]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 30, 54, 38, 14, 18, 42, 58, 34, 11]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedIcosahedron\r\n\t* Description: Generates a truncated icosahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedIcosahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 0.0;\r\n\t\tvar b = 1.0;\r\n\t\tvar c = 2.0;\r\n\t\tvar d = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar e = 3.0 * d;\r\n\t\tvar f = 1.0 + 2.0 * d;\r\n\t\tvar g = 2.0 + d;\r\n\t\tvar h = 2.0 * d;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +e);\r\n\t\tJSM.AddVertexToBody (result, +a, +b, -e);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, +e);\r\n\t\tJSM.AddVertexToBody (result, +a, -b, -e);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +e, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, -e, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, +e, +a);\r\n\t\tJSM.AddVertexToBody (result, -b, -e, +a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +e, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, -e, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +e, +a, -b);\r\n\t\tJSM.AddVertexToBody (result, -e, +a, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +f, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, +f, -d);\r\n\t\tJSM.AddVertexToBody (result, +c, -f, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, +f, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, -f, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, +f, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, -f, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, -f, -d);\r\n\r\n\t\tJSM.AddVertexToBody (result, +f, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, -f, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, -d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, -d, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +c, +f);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, +f);\r\n\t\tJSM.AddVertexToBody (result, +d, +c, -f);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, +f);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, -f);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, +f);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, -f);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, -f);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +g, +h);\r\n\t\tJSM.AddVertexToBody (result, +b, +g, -h);\r\n\t\tJSM.AddVertexToBody (result, +b, -g, +h);\r\n\t\tJSM.AddVertexToBody (result, -b, +g, +h);\r\n\t\tJSM.AddVertexToBody (result, +b, -g, -h);\r\n\t\tJSM.AddVertexToBody (result, -b, +g, -h);\r\n\t\tJSM.AddVertexToBody (result, -b, -g, +h);\r\n\t\tJSM.AddVertexToBody (result, -b, -g, -h);\r\n\r\n\t\tJSM.AddVertexToBody (result, +g, +h, +b);\r\n\t\tJSM.AddVertexToBody (result, +g, -h, +b);\r\n\t\tJSM.AddVertexToBody (result, -g, +h, +b);\r\n\t\tJSM.AddVertexToBody (result, +g, +h, -b);\r\n\t\tJSM.AddVertexToBody (result, -g, -h, +b);\r\n\t\tJSM.AddVertexToBody (result, +g, -h, -b);\r\n\t\tJSM.AddVertexToBody (result, -g, +h, -b);\r\n\t\tJSM.AddVertexToBody (result, -g, -h, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +h, +b, +g);\r\n\t\tJSM.AddVertexToBody (result, -h, +b, +g);\r\n\t\tJSM.AddVertexToBody (result, +h, +b, -g);\r\n\t\tJSM.AddVertexToBody (result, +h, -b, +g);\r\n\t\tJSM.AddVertexToBody (result, -h, +b, -g);\r\n\t\tJSM.AddVertexToBody (result, -h, -b, +g);\r\n\t\tJSM.AddVertexToBody (result, +h, -b, -g);\r\n\t\tJSM.AddVertexToBody (result, -h, -b, -g);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 28, 36, 39, 29]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 32, 41, 37, 30]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 33, 42, 38, 31]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 34, 40, 43, 35]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 12, 44, 47, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 16, 49, 45, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 17, 50, 46, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 18, 48, 51, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 20, 52, 55, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 24, 57, 53, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 25, 58, 54, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 26, 56, 59, 27]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 31, 55, 52, 28]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 29, 53, 57, 33, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 3, 35, 59, 56, 32]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 30, 54, 58, 34, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 6, 15, 39, 36, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 13, 37, 41, 17, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 7, 19, 43, 40, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 14, 38, 42, 18, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 10, 23, 47, 44, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 21, 45, 49, 25, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 11, 27, 51, 48, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 22, 46, 50, 26, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 36, 28, 52, 20, 44]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 47, 23, 54, 30, 37]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 45, 21, 55, 31, 38]);\r\n\t\tJSM.AddPolygonToBody (result, [15, 46, 22, 53, 29, 39]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 40, 34, 58, 25, 49]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 41, 32, 56, 26, 50]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 42, 33, 57, 24, 48]);\r\n\t\tJSM.AddPolygonToBody (result, [19, 51, 27, 59, 35, 43]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRhombicosidodecahedron\r\n\t* Description: Generates a rhombicosidodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRhombicosidodecahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 0.0;\r\n\t\tvar b = 1.0;\r\n\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar d = Math.pow (c, 2.0);\r\n\t\tvar e = Math.pow (c, 3.0);\r\n\t\tvar f = 2.0 * c;\r\n\t\tvar g = 2.0 + c;\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +b, +e);\r\n\t\tJSM.AddVertexToBody (result, +b, +b, -e);\r\n\t\tJSM.AddVertexToBody (result, +b, -b, +e);\r\n\t\tJSM.AddVertexToBody (result, -b, +b, +e);\r\n\t\tJSM.AddVertexToBody (result, +b, -b, -e);\r\n\t\tJSM.AddVertexToBody (result, -b, +b, -e);\r\n\t\tJSM.AddVertexToBody (result, -b, -b, +e);\r\n\t\tJSM.AddVertexToBody (result, -b, -b, -e);\r\n\r\n\t\tJSM.AddVertexToBody (result, +e, +b, +b);\r\n\t\tJSM.AddVertexToBody (result, +e, +b, -b);\r\n\t\tJSM.AddVertexToBody (result, +e, -b, +b);\r\n\t\tJSM.AddVertexToBody (result, -e, +b, +b);\r\n\t\tJSM.AddVertexToBody (result, +e, -b, -b);\r\n\t\tJSM.AddVertexToBody (result, -e, +b, -b);\r\n\t\tJSM.AddVertexToBody (result, -e, -b, +b);\r\n\t\tJSM.AddVertexToBody (result, -e, -b, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +e, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, +e, -b);\r\n\t\tJSM.AddVertexToBody (result, +b, -e, +b);\r\n\t\tJSM.AddVertexToBody (result, -b, +e, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, -e, -b);\r\n\t\tJSM.AddVertexToBody (result, -b, +e, -b);\r\n\t\tJSM.AddVertexToBody (result, -b, -e, +b);\r\n\t\tJSM.AddVertexToBody (result, -b, -e, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +c, +f);\r\n\t\tJSM.AddVertexToBody (result, +d, +c, -f);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, +f);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, +f);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, -f);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, -f);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, +f);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, -f);\r\n\r\n\t\tJSM.AddVertexToBody (result, +f, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, +f, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, -f, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +f, -d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, -f, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, -f, -d, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +f, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, +f, -d);\r\n\t\tJSM.AddVertexToBody (result, +c, -f, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, +f, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, -f, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, +f, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, -f, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, -f, -d);\r\n\r\n\t\tJSM.AddVertexToBody (result, +g, +a, +d);\r\n\t\tJSM.AddVertexToBody (result, +g, +a, -d);\r\n\t\tJSM.AddVertexToBody (result, -g, +a, +d);\r\n\t\tJSM.AddVertexToBody (result, -g, +a, -d);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +g, +a);\r\n\t\tJSM.AddVertexToBody (result, -d, +g, +a);\r\n\t\tJSM.AddVertexToBody (result, +d, -g, +a);\r\n\t\tJSM.AddVertexToBody (result, -d, -g, +a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +d, +g);\r\n\t\tJSM.AddVertexToBody (result, +a, -d, +g);\r\n\t\tJSM.AddVertexToBody (result, +a, +d, -g);\r\n\t\tJSM.AddVertexToBody (result, +a, -d, -g);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 56, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 5, 58]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 6, 57]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 59, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 48, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 12, 49]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 14, 50]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 51, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 52, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 20, 54]);\r\n\t\tJSM.AddPolygonToBody (result, [19, 21, 53]);\r\n\t\tJSM.AddPolygonToBody (result, [22, 55, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [24, 32, 40]);\r\n\t\tJSM.AddPolygonToBody (result, [25, 41, 33]);\r\n\t\tJSM.AddPolygonToBody (result, [26, 42, 34]);\r\n\t\tJSM.AddPolygonToBody (result, [27, 43, 35]);\r\n\t\tJSM.AddPolygonToBody (result, [28, 36, 44]);\r\n\t\tJSM.AddPolygonToBody (result, [29, 37, 45]);\r\n\t\tJSM.AddPolygonToBody (result, [30, 38, 46]);\r\n\t\tJSM.AddPolygonToBody (result, [31, 47, 39]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 3, 6, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 24, 40, 56]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 7, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 58, 41, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 57, 42, 26]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 56, 43, 27]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 28, 44, 59]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 29, 45, 58]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 30, 46, 57]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 59, 47, 31]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 10, 12, 9]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 32, 24, 48]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 49, 25, 33]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 48, 26, 34]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 13, 15, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 50, 27, 35]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 36, 28, 49]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 37, 29, 51]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 38, 30, 50]);\r\n\t\tJSM.AddPolygonToBody (result, [15, 51, 31, 39]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 17, 21, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 40, 32, 52]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 52, 33, 41]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 22, 23, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 54, 34, 42]);\r\n\t\tJSM.AddPolygonToBody (result, [19, 53, 35, 43]);\r\n\t\tJSM.AddPolygonToBody (result, [20, 44, 36, 54]);\r\n\t\tJSM.AddPolygonToBody (result, [21, 45, 37, 53]);\r\n\t\tJSM.AddPolygonToBody (result, [22, 46, 38, 55]);\r\n\t\tJSM.AddPolygonToBody (result, [23, 55, 39, 47]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 26, 48, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 25, 49, 28, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 27, 50, 30, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 7, 31, 51, 29]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 9, 33, 52, 32]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 34, 54, 36, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 35, 53, 37, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 15, 39, 55, 38]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 19, 43, 56, 40]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 41, 58, 45, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 42, 57, 46, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [20, 23, 47, 59, 44]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTruncatedIcosidodecahedron\r\n\t* Description: Generates a truncated icosidodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTruncatedIcosidodecahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 2.0;\r\n\t\tvar b = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar c = 1.0 / b;\r\n\t\tvar d = 3.0 + b;\r\n\t\tvar e = 2.0 / b;\r\n\t\tvar f = 1 + 2.0 * b;\r\n\t\tvar g = Math.pow (b, 2.0);\r\n\t\tvar h = -1.0 + 3.0 * b;\r\n\t\tvar i = -1.0 + 2.0 * b;\r\n\t\tvar j = 2.0 + b;\r\n\t\tvar k = 3.0;\r\n\t\tvar l = 2.0 * b;\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +c, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, +c, -d);\r\n\t\tJSM.AddVertexToBody (result, +c, -c, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, +c, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, -c, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, +c, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, -c, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, -c, -d);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +c, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, -c, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +c, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, -c, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, +c, -d, -c);\r\n\t\tJSM.AddVertexToBody (result, -c, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, -c, -d, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +c, +c);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, +c);\r\n\t\tJSM.AddVertexToBody (result, +d, +c, -c);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, +c);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, -c);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, +c);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, -c);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +e, +b, +f);\r\n\t\tJSM.AddVertexToBody (result, +e, +b, -f);\r\n\t\tJSM.AddVertexToBody (result, +e, -b, +f);\r\n\t\tJSM.AddVertexToBody (result, -e, +b, +f);\r\n\t\tJSM.AddVertexToBody (result, +e, -b, -f);\r\n\t\tJSM.AddVertexToBody (result, -e, +b, -f);\r\n\t\tJSM.AddVertexToBody (result, -e, -b, +f);\r\n\t\tJSM.AddVertexToBody (result, -e, -b, -f);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +f, +e);\r\n\t\tJSM.AddVertexToBody (result, +b, -f, +e);\r\n\t\tJSM.AddVertexToBody (result, -b, +f, +e);\r\n\t\tJSM.AddVertexToBody (result, +b, +f, -e);\r\n\t\tJSM.AddVertexToBody (result, -b, -f, +e);\r\n\t\tJSM.AddVertexToBody (result, +b, -f, -e);\r\n\t\tJSM.AddVertexToBody (result, -b, +f, -e);\r\n\t\tJSM.AddVertexToBody (result, -b, -f, -e);\r\n\r\n\t\tJSM.AddVertexToBody (result, +f, +e, +b);\r\n\t\tJSM.AddVertexToBody (result, -f, +e, +b);\r\n\t\tJSM.AddVertexToBody (result, +f, +e, -b);\r\n\t\tJSM.AddVertexToBody (result, +f, -e, +b);\r\n\t\tJSM.AddVertexToBody (result, -f, +e, -b);\r\n\t\tJSM.AddVertexToBody (result, -f, -e, +b);\r\n\t\tJSM.AddVertexToBody (result, +f, -e, -b);\r\n\t\tJSM.AddVertexToBody (result, -f, -e, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +g, +h);\r\n\t\tJSM.AddVertexToBody (result, +c, +g, -h);\r\n\t\tJSM.AddVertexToBody (result, +c, -g, +h);\r\n\t\tJSM.AddVertexToBody (result, -c, +g, +h);\r\n\t\tJSM.AddVertexToBody (result, +c, -g, -h);\r\n\t\tJSM.AddVertexToBody (result, -c, +g, -h);\r\n\t\tJSM.AddVertexToBody (result, -c, -g, +h);\r\n\t\tJSM.AddVertexToBody (result, -c, -g, -h);\r\n\r\n\t\tJSM.AddVertexToBody (result, +g, +h, +c);\r\n\t\tJSM.AddVertexToBody (result, +g, -h, +c);\r\n\t\tJSM.AddVertexToBody (result, -g, +h, +c);\r\n\t\tJSM.AddVertexToBody (result, +g, +h, -c);\r\n\t\tJSM.AddVertexToBody (result, -g, -h, +c);\r\n\t\tJSM.AddVertexToBody (result, +g, -h, -c);\r\n\t\tJSM.AddVertexToBody (result, -g, +h, -c);\r\n\t\tJSM.AddVertexToBody (result, -g, -h, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +h, +c, +g);\r\n\t\tJSM.AddVertexToBody (result, -h, +c, +g);\r\n\t\tJSM.AddVertexToBody (result, +h, +c, -g);\r\n\t\tJSM.AddVertexToBody (result, +h, -c, +g);\r\n\t\tJSM.AddVertexToBody (result, -h, +c, -g);\r\n\t\tJSM.AddVertexToBody (result, -h, -c, +g);\r\n\t\tJSM.AddVertexToBody (result, +h, -c, -g);\r\n\t\tJSM.AddVertexToBody (result, -h, -c, -g);\r\n\r\n\t\tJSM.AddVertexToBody (result, +i, +a, +j);\r\n\t\tJSM.AddVertexToBody (result, +i, +a, -j);\r\n\t\tJSM.AddVertexToBody (result, +i, -a, +j);\r\n\t\tJSM.AddVertexToBody (result, -i, +a, +j);\r\n\t\tJSM.AddVertexToBody (result, +i, -a, -j);\r\n\t\tJSM.AddVertexToBody (result, -i, +a, -j);\r\n\t\tJSM.AddVertexToBody (result, -i, -a, +j);\r\n\t\tJSM.AddVertexToBody (result, -i, -a, -j);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +j, +i);\r\n\t\tJSM.AddVertexToBody (result, +a, -j, +i);\r\n\t\tJSM.AddVertexToBody (result, -a, +j, +i);\r\n\t\tJSM.AddVertexToBody (result, +a, +j, -i);\r\n\t\tJSM.AddVertexToBody (result, -a, -j, +i);\r\n\t\tJSM.AddVertexToBody (result, +a, -j, -i);\r\n\t\tJSM.AddVertexToBody (result, -a, +j, -i);\r\n\t\tJSM.AddVertexToBody (result, -a, -j, -i);\r\n\r\n\t\tJSM.AddVertexToBody (result, +j, +i, +a);\r\n\t\tJSM.AddVertexToBody (result, -j, +i, +a);\r\n\t\tJSM.AddVertexToBody (result, +j, +i, -a);\r\n\t\tJSM.AddVertexToBody (result, +j, -i, +a);\r\n\t\tJSM.AddVertexToBody (result, -j, +i, -a);\r\n\t\tJSM.AddVertexToBody (result, -j, -i, +a);\r\n\t\tJSM.AddVertexToBody (result, +j, -i, -a);\r\n\t\tJSM.AddVertexToBody (result, -j, -i, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +k, +l);\r\n\t\tJSM.AddVertexToBody (result, +b, +k, -l);\r\n\t\tJSM.AddVertexToBody (result, +b, -k, +l);\r\n\t\tJSM.AddVertexToBody (result, -b, +k, +l);\r\n\t\tJSM.AddVertexToBody (result, +b, -k, -l);\r\n\t\tJSM.AddVertexToBody (result, -b, +k, -l);\r\n\t\tJSM.AddVertexToBody (result, -b, -k, +l);\r\n\t\tJSM.AddVertexToBody (result, -b, -k, -l);\r\n\r\n\t\tJSM.AddVertexToBody (result, +k, +l, +b);\r\n\t\tJSM.AddVertexToBody (result, +k, -l, +b);\r\n\t\tJSM.AddVertexToBody (result, -k, +l, +b);\r\n\t\tJSM.AddVertexToBody (result, +k, +l, -b);\r\n\t\tJSM.AddVertexToBody (result, -k, -l, +b);\r\n\t\tJSM.AddVertexToBody (result, +k, -l, -b);\r\n\t\tJSM.AddVertexToBody (result, -k, +l, -b);\r\n\t\tJSM.AddVertexToBody (result, -k, -l, -b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +l, +b, +k);\r\n\t\tJSM.AddVertexToBody (result, -l, +b, +k);\r\n\t\tJSM.AddVertexToBody (result, +l, +b, -k);\r\n\t\tJSM.AddVertexToBody (result, +l, -b, +k);\r\n\t\tJSM.AddVertexToBody (result, -l, +b, -k);\r\n\t\tJSM.AddVertexToBody (result, -l, -b, +k);\r\n\t\tJSM.AddVertexToBody (result, +l, -b, -k);\r\n\t\tJSM.AddVertexToBody (result, -l, -b, -k);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 3, 6, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 4, 7, 5]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 11, 14, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 12, 15, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 19, 22, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 20, 23, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [24, 72, 96, 48]);\r\n\t\tJSM.AddPolygonToBody (result, [25, 49, 97, 73]);\r\n\t\tJSM.AddPolygonToBody (result, [26, 50, 98, 74]);\r\n\t\tJSM.AddPolygonToBody (result, [27, 51, 99, 75]);\r\n\t\tJSM.AddPolygonToBody (result, [28, 76, 100, 52]);\r\n\t\tJSM.AddPolygonToBody (result, [29, 77, 101, 53]);\r\n\t\tJSM.AddPolygonToBody (result, [30, 78, 102, 54]);\r\n\t\tJSM.AddPolygonToBody (result, [31, 55, 103, 79]);\r\n\t\tJSM.AddPolygonToBody (result, [32, 80, 104, 56]);\r\n\t\tJSM.AddPolygonToBody (result, [33, 57, 105, 81]);\r\n\t\tJSM.AddPolygonToBody (result, [34, 58, 106, 82]);\r\n\t\tJSM.AddPolygonToBody (result, [35, 59, 107, 83]);\r\n\t\tJSM.AddPolygonToBody (result, [36, 84, 108, 60]);\r\n\t\tJSM.AddPolygonToBody (result, [37, 85, 109, 61]);\r\n\t\tJSM.AddPolygonToBody (result, [38, 86, 110, 62]);\r\n\t\tJSM.AddPolygonToBody (result, [39, 63, 111, 87]);\r\n\t\tJSM.AddPolygonToBody (result, [40, 88, 112, 64]);\r\n\t\tJSM.AddPolygonToBody (result, [41, 65, 113, 89]);\r\n\t\tJSM.AddPolygonToBody (result, [42, 66, 114, 90]);\r\n\t\tJSM.AddPolygonToBody (result, [43, 67, 115, 91]);\r\n\t\tJSM.AddPolygonToBody (result, [44, 92, 116, 68]);\r\n\t\tJSM.AddPolygonToBody (result, [45, 93, 117, 69]);\r\n\t\tJSM.AddPolygonToBody (result, [46, 94, 118, 70]);\r\n\t\tJSM.AddPolygonToBody (result, [47, 71, 119, 95]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 24, 48, 51, 27, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 5, 29, 53, 49, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 6, 30, 54, 50, 26]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 28, 52, 55, 31, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 32, 56, 59, 35, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 13, 37, 61, 57, 33]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 14, 38, 62, 58, 34]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 36, 60, 63, 39, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 40, 64, 67, 43, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 21, 45, 69, 65, 41]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 22, 46, 70, 66, 42]);\r\n\t\tJSM.AddPolygonToBody (result, [20, 44, 68, 71, 47, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [72, 112, 88, 104, 80, 96]);\r\n\t\tJSM.AddPolygonToBody (result, [73, 97, 83, 107, 90, 114]);\r\n\t\tJSM.AddPolygonToBody (result, [74, 98, 81, 105, 91, 115]);\r\n\t\tJSM.AddPolygonToBody (result, [75, 99, 82, 106, 89, 113]);\r\n\t\tJSM.AddPolygonToBody (result, [76, 118, 94, 109, 85, 100]);\r\n\t\tJSM.AddPolygonToBody (result, [78, 117, 93, 108, 84, 102]);\r\n\t\tJSM.AddPolygonToBody (result, [79, 103, 87, 111, 95, 119]);\r\n\t\tJSM.AddPolygonToBody (result, [86, 101, 77, 116, 92, 110]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 2, 26, 74, 115, 67, 64, 112, 72, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 25, 73, 114, 66, 70, 118, 76, 28, 4]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 27, 75, 113, 65, 69, 117, 78, 30, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 7, 31, 79, 119, 71, 68, 116, 77, 29]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 10, 34, 82, 99, 51, 48, 96, 80, 32]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 33, 81, 98, 50, 54, 102, 84, 36, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 35, 83, 97, 49, 53, 101, 86, 38, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 15, 39, 87, 103, 55, 52, 100, 85, 37]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 18, 42, 90, 107, 59, 56, 104, 88, 40]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 41, 89, 106, 58, 62, 110, 92, 44, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [19, 43, 91, 105, 57, 61, 109, 94, 46, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [21, 23, 47, 95, 111, 63, 60, 108, 93, 45]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSnubDodecahedron\r\n\t* Description: Generates a snub dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSnubDodecahedron = function ()\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 2.0;\r\n\t\tvar b = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar c = Math.pow (b / 2.0 + (1.0 / 2.0) * Math.sqrt (b - (5.0 / 27.0)), 1.0 / 3.0) + Math.pow (b / 2.0 - (1.0 / 2.0) * Math.sqrt (b - (5.0 / 27.0)), 1.0 / 3.0);\r\n\t\tvar d = c - (1.0 / c);\r\n\t\tvar e = c * b + Math.pow (b, 2.0) + b / c;\r\n\t\tvar f = 2.0 * d;\r\n\t\tvar g = 2.0 * e;\r\n\t\tvar h = d + (e / b) + b;\r\n\t\tvar i = -(d * b) + e + (1.0 / b);\r\n\t\tvar j = (d / b) + (e * b) - 1.0;\r\n\t\tvar k = -(d / b) + (e * b) + 1.0;\r\n\t\tvar l = -d + (e / b) - b;\r\n\t\tvar m = (d * b) + e - (1.0 / b);\r\n\t\tvar n = -(d / b) + (e * b) - 1.0;\r\n\t\tvar o = d - (e / b) - b;\r\n\t\tvar p = (d * b) + e + (1.0 / b);\r\n\t\tvar q = d + (e / b) - b;\r\n\t\tvar r = (d * b) - e + (1.0 / b);\r\n\t\tvar s = (d / b) + (e * b) + 1.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +f, +a, -g);\r\n\t\tJSM.AddVertexToBody (result, +f, -a, +g);\r\n\t\tJSM.AddVertexToBody (result, -f, +a, +g);\r\n\t\tJSM.AddVertexToBody (result, -f, -a, -g);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, -g, +f);\r\n\t\tJSM.AddVertexToBody (result, -a, +g, +f);\r\n\t\tJSM.AddVertexToBody (result, +a, +g, -f);\r\n\t\tJSM.AddVertexToBody (result, -a, -g, -f);\r\n\r\n\t\tJSM.AddVertexToBody (result, -g, +f, +a);\r\n\t\tJSM.AddVertexToBody (result, +g, +f, -a);\r\n\t\tJSM.AddVertexToBody (result, +g, -f, +a);\r\n\t\tJSM.AddVertexToBody (result, -g, -f, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +h, +i, -j);\r\n\t\tJSM.AddVertexToBody (result, +h, -i, +j);\r\n\t\tJSM.AddVertexToBody (result, -h, +i, +j);\r\n\t\tJSM.AddVertexToBody (result, -h, -i, -j);\r\n\r\n\t\tJSM.AddVertexToBody (result, +i, -j, +h);\r\n\t\tJSM.AddVertexToBody (result, -i, +j, +h);\r\n\t\tJSM.AddVertexToBody (result, +i, +j, -h);\r\n\t\tJSM.AddVertexToBody (result, -i, -j, -h);\r\n\r\n\t\tJSM.AddVertexToBody (result, -j, +h, +i);\r\n\t\tJSM.AddVertexToBody (result, +j, +h, -i);\r\n\t\tJSM.AddVertexToBody (result, +j, -h, +i);\r\n\t\tJSM.AddVertexToBody (result, -j, -h, -i);\r\n\r\n\t\tJSM.AddVertexToBody (result, +k, +l, -m);\r\n\t\tJSM.AddVertexToBody (result, +k, -l, +m);\r\n\t\tJSM.AddVertexToBody (result, -k, +l, +m);\r\n\t\tJSM.AddVertexToBody (result, -k, -l, -m);\r\n\r\n\t\tJSM.AddVertexToBody (result, +l, -m, +k);\r\n\t\tJSM.AddVertexToBody (result, -l, +m, +k);\r\n\t\tJSM.AddVertexToBody (result, +l, +m, -k);\r\n\t\tJSM.AddVertexToBody (result, -l, -m, -k);\r\n\r\n\t\tJSM.AddVertexToBody (result, -m, +k, +l);\r\n\t\tJSM.AddVertexToBody (result, +m, +k, -l);\r\n\t\tJSM.AddVertexToBody (result, +m, -k, +l);\r\n\t\tJSM.AddVertexToBody (result, -m, -k, -l);\r\n\r\n\t\tJSM.AddVertexToBody (result, +n, +o, -p);\r\n\t\tJSM.AddVertexToBody (result, +n, -o, +p);\r\n\t\tJSM.AddVertexToBody (result, -n, +o, +p);\r\n\t\tJSM.AddVertexToBody (result, -n, -o, -p);\r\n\r\n\t\tJSM.AddVertexToBody (result, +o, -p, +n);\r\n\t\tJSM.AddVertexToBody (result, -o, +p, +n);\r\n\t\tJSM.AddVertexToBody (result, +o, +p, -n);\r\n\t\tJSM.AddVertexToBody (result, -o, -p, -n);\r\n\r\n\t\tJSM.AddVertexToBody (result, -p, +n, +o);\r\n\t\tJSM.AddVertexToBody (result, +p, +n, -o);\r\n\t\tJSM.AddVertexToBody (result, +p, -n, +o);\r\n\t\tJSM.AddVertexToBody (result, -p, -n, -o);\r\n\r\n\t\tJSM.AddVertexToBody (result, +q, +r, -s);\r\n\t\tJSM.AddVertexToBody (result, +q, -r, +s);\r\n\t\tJSM.AddVertexToBody (result, -q, +r, +s);\r\n\t\tJSM.AddVertexToBody (result, -q, -r, -s);\r\n\r\n\t\tJSM.AddVertexToBody (result, +r, -s, +q);\r\n\t\tJSM.AddVertexToBody (result, -r, +s, +q);\r\n\t\tJSM.AddVertexToBody (result, +r, +s, -q);\r\n\t\tJSM.AddVertexToBody (result, -r, -s, -q);\r\n\r\n\t\tJSM.AddVertexToBody (result, -s, +q, +r);\r\n\t\tJSM.AddVertexToBody (result, +s, +q, -r);\r\n\t\tJSM.AddVertexToBody (result, +s, -q, +r);\r\n\t\tJSM.AddVertexToBody (result, -s, -q, -r);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 3, 51]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 30, 12]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 48, 3]);\r\n\t\tJSM.AddPolygonToBody (result, [0, 51, 30]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 2, 50]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 28, 13]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 49, 2]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 50, 28]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 29, 14]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 49, 29]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 31, 15]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 48, 31]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 7, 55]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 34, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 52, 7]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 55, 34]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 6, 54]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 32, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 53, 6]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 54, 32]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 33, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 53, 33]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 35, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 52, 35]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 11, 59]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 26, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 56, 11]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 59, 26]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 10, 58]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 24, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 57, 10]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 58, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 25, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 57, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 27, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 56, 27]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 18, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 21, 24]);\r\n\t\tJSM.AddPolygonToBody (result, [12, 30, 18]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 16, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 22, 25]);\r\n\t\tJSM.AddPolygonToBody (result, [13, 28, 16]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 17, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 20, 26]);\r\n\t\tJSM.AddPolygonToBody (result, [14, 29, 17]);\r\n\t\tJSM.AddPolygonToBody (result, [15, 19, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [15, 23, 27]);\r\n\t\tJSM.AddPolygonToBody (result, [15, 31, 19]);\r\n\t\tJSM.AddPolygonToBody (result, [16, 34, 22]);\r\n\t\tJSM.AddPolygonToBody (result, [17, 32, 20]);\r\n\t\tJSM.AddPolygonToBody (result, [18, 33, 21]);\r\n\t\tJSM.AddPolygonToBody (result, [19, 35, 23]);\r\n\t\tJSM.AddPolygonToBody (result, [24, 58, 36]);\r\n\t\tJSM.AddPolygonToBody (result, [25, 57, 37]);\r\n\t\tJSM.AddPolygonToBody (result, [26, 59, 38]);\r\n\t\tJSM.AddPolygonToBody (result, [27, 56, 39]);\r\n\t\tJSM.AddPolygonToBody (result, [28, 50, 40]);\r\n\t\tJSM.AddPolygonToBody (result, [29, 49, 41]);\r\n\t\tJSM.AddPolygonToBody (result, [30, 51, 42]);\r\n\t\tJSM.AddPolygonToBody (result, [31, 48, 43]);\r\n\t\tJSM.AddPolygonToBody (result, [32, 54, 44]);\r\n\t\tJSM.AddPolygonToBody (result, [33, 53, 45]);\r\n\t\tJSM.AddPolygonToBody (result, [34, 55, 46]);\r\n\t\tJSM.AddPolygonToBody (result, [35, 52, 47]);\r\n\t\tJSM.AddPolygonToBody (result, [36, 43, 48]);\r\n\t\tJSM.AddPolygonToBody (result, [36, 46, 43]);\r\n\t\tJSM.AddPolygonToBody (result, [36, 58, 46]);\r\n\t\tJSM.AddPolygonToBody (result, [37, 41, 49]);\r\n\t\tJSM.AddPolygonToBody (result, [37, 45, 41]);\r\n\t\tJSM.AddPolygonToBody (result, [37, 57, 45]);\r\n\t\tJSM.AddPolygonToBody (result, [38, 40, 50]);\r\n\t\tJSM.AddPolygonToBody (result, [38, 47, 40]);\r\n\t\tJSM.AddPolygonToBody (result, [38, 59, 47]);\r\n\t\tJSM.AddPolygonToBody (result, [39, 42, 51]);\r\n\t\tJSM.AddPolygonToBody (result, [39, 44, 42]);\r\n\t\tJSM.AddPolygonToBody (result, [39, 56, 44]);\r\n\t\tJSM.AddPolygonToBody (result, [40, 47, 52]);\r\n\t\tJSM.AddPolygonToBody (result, [41, 45, 53]);\r\n\t\tJSM.AddPolygonToBody (result, [42, 44, 54]);\r\n\t\tJSM.AddPolygonToBody (result, [43, 46, 55]);\r\n\r\n\t\tJSM.AddPolygonToBody (result, [0, 12, 24, 36, 48]);\r\n\t\tJSM.AddPolygonToBody (result, [1, 13, 25, 37, 49]);\r\n\t\tJSM.AddPolygonToBody (result, [2, 14, 26, 38, 50]);\r\n\t\tJSM.AddPolygonToBody (result, [3, 15, 27, 39, 51]);\r\n\t\tJSM.AddPolygonToBody (result, [4, 16, 28, 40, 52]);\r\n\t\tJSM.AddPolygonToBody (result, [5, 17, 29, 41, 53]);\r\n\t\tJSM.AddPolygonToBody (result, [6, 18, 30, 42, 54]);\r\n\t\tJSM.AddPolygonToBody (result, [7, 19, 31, 43, 55]);\r\n\t\tJSM.AddPolygonToBody (result, [8, 20, 32, 44, 56]);\r\n\t\tJSM.AddPolygonToBody (result, [9, 21, 33, 45, 57]);\r\n\t\tJSM.AddPolygonToBody (result, [10, 22, 34, 46, 58]);\r\n\t\tJSM.AddPolygonToBody (result, [11, 23, 35, 47, 59]);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: AddCumulatedPolygonToBody\r\n\t* Description: Adds polygons to a body by cumulating the original polygons vertex index array.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\tvertices {integer[*]} the vertices of the original polygon\r\n\t*\theight {number} the height of the cumulation\r\n\t*/\r\n\tJSM.AddCumulatedPolygonToBody = function (body, vertices, height)\r\n\t{\r\n\t\tfunction CalculatePolygonCentroidAndNormal (vertices, centroidCoord, normalVector)\r\n\t\t{\r\n\t\t\tvar vertexCoords = [];\r\n\t\t\t\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < vertices.length; i++) {\r\n\t\t\t\tvertexCoords.push (body.GetVertexPosition (vertices[i]));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar centroid = JSM.CalculateCentroid (vertexCoords);\r\n\t\t\tvar normal = JSM.CalculateNormal (vertexCoords);\r\n\r\n\t\t\tcentroidCoord.Set (centroid.x, centroid.y, centroid.z);\r\n\t\t\tnormalVector.Set (normal.x, normal.y, normal.z);\r\n\t\t}\r\n\r\n\t\tvar centroidCoord = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\tvar normalVector = new JSM.Vector (0.0, 0.0, 0.0);\r\n\t\tCalculatePolygonCentroidAndNormal (vertices, centroidCoord, normalVector);\r\n\t\tcentroidCoord.Offset (normalVector, height);\r\n\t\t\r\n\t\tvar centroid = body.VertexCount ();\r\n\t\tJSM.AddVertexToBody (body, centroidCoord.x, centroidCoord.y, centroidCoord.z);\r\n\r\n\t\tvar count = vertices.length;\r\n\r\n\t\tvar i, curr, next;\r\n\t\tfor (i = 0; i < count; i++) {\r\n\t\t\tcurr = vertices[i];\r\n\t\t\tnext = vertices [i < count - 1 ? i + 1 : 0];\r\n\t\t\tJSM.AddPolygonToBody (body, [curr, next, centroid]);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCumulatedTetrahedron\r\n\t* Description: Generates a cumulated tetrahedron.\r\n\t* Parameters:\r\n\t*\tpyramidUnitHeight {number} the unit height of pyramids\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCumulatedTetrahedron = function (pyramidUnitHeight)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, +a, +a)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, -a, +a)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, +a, -a)));\r\n\t\tresult.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, -a, -a)));\r\n\r\n\t\tvar edgeLength = 2.0 * Math.sqrt (2.0);\r\n\t\tvar height = edgeLength * pyramidUnitHeight;\r\n\t\t\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 1, 3], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 2, 1], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 3, 2], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 2, 3], height);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCumulatedHexahedron\r\n\t* Description: Generates a cumulated hexahedron.\r\n\t* Parameters:\r\n\t*\tpyramidUnitHeight {number} the unit height of pyramids\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCumulatedHexahedron = function (pyramidUnitHeight)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, -a);\r\n\r\n\t\tvar edgeLength = 2.0;\r\n\t\tvar height = edgeLength * pyramidUnitHeight;\r\n\t\t\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 1, 5, 3], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 2, 4, 1], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 3, 6, 2], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 4, 7, 5], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [2, 6, 7, 4], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [3, 5, 7, 6], height);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCumulatedOctahedron\r\n\t* Description: Generates a cumulated octahedron.\r\n\t* Parameters:\r\n\t*\tpyramidUnitHeight {number} the unit height of pyramids\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCumulatedOctahedron = function (pyramidUnitHeight)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +b, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +b, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +b);\r\n\t\tJSM.AddVertexToBody (result, +b, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +b, +b, -a);\r\n\r\n\t\tvar edgeLength = Math.sqrt (2.0);\r\n\t\tvar height = edgeLength * pyramidUnitHeight;\r\n\t\t\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 2, 4], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 3, 5], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 4, 3], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 5, 2], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 2, 5], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 3, 4], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 4, 2], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 5, 3], height);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCumulatedDodecahedron\r\n\t* Description: Generates a cumulated dodecahedron.\r\n\t* Parameters:\r\n\t*\tpyramidUnitHeight {number} the unit height of pyramids\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCumulatedDodecahedron = function (pyramidUnitHeight)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\t\tvar d = 1.0 / c;\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, +a);\r\n\t\tJSM.AddVertexToBody (result, +a, -a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, +a, -a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, +a);\r\n\t\tJSM.AddVertexToBody (result, -a, -a, -a);\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +d, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +d, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -d, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -d, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +d, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +d, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -d, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, -d, -c, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +d);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +d);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -d);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -d);\r\n\r\n\t\tvar edgeLength = Math.sqrt (5.0) - 1.0;\r\n\t\tvar height = edgeLength * pyramidUnitHeight;\r\n\t\t\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 8, 10, 2, 16], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 16, 18, 1, 12], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 12, 14, 3, 8], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 9, 5, 14, 12], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 18, 4, 11, 9], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [2, 10, 6, 15, 13], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [2, 13, 4, 18, 16], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [3, 14, 5, 19, 17], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [3, 17, 6, 10, 8], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [4, 13, 15, 7, 11], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [5, 9, 11, 7, 19], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [6, 17, 19, 7, 15], height);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateCumulatedIcosahedron\r\n\t* Description: Generates a cumulated icosahedron.\r\n\t* Parameters:\r\n\t*\tpyramidUnitHeight {number} the unit height of pyramids\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateCumulatedIcosahedron = function (pyramidUnitHeight)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\r\n\t\tvar a = 1.0;\r\n\t\tvar b = 0.0;\r\n\t\tvar c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n\r\n\t\tJSM.AddVertexToBody (result, +b, +a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, +a, -c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, +c);\r\n\t\tJSM.AddVertexToBody (result, +b, -a, -c);\r\n\r\n\t\tJSM.AddVertexToBody (result, +a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, +a, -c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, +c, +b);\r\n\t\tJSM.AddVertexToBody (result, -a, -c, +b);\r\n\r\n\t\tJSM.AddVertexToBody (result, +c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, +a);\r\n\t\tJSM.AddVertexToBody (result, +c, +b, -a);\r\n\t\tJSM.AddVertexToBody (result, -c, +b, -a);\r\n\r\n\t\tvar edgeLength = 2;\r\n\t\tvar height = edgeLength * pyramidUnitHeight;\r\n\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 2, 8], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 4, 6], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 6, 9], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 8, 4], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [0, 9, 2], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 3, 11], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 4, 10], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 6, 4], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 10, 3], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [1, 11, 6], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [2, 5, 8], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [2, 7, 5], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [2, 9, 7], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [3, 5, 7], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [3, 7, 11], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [3, 10, 5], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [4, 8, 10], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [6, 11, 9], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [5, 10, 8], height);\r\n\t\tJSM.AddCumulatedPolygonToBody (result, [7, 9, 11], height);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTetrakisHexahedron\r\n\t* Description: Generates a tetrakis hexahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTetrakisHexahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = 1.0 / 4.0;\r\n\t\treturn JSM.GenerateCumulatedHexahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateRhombicDodecahedron\r\n\t* Description: Generates a rhombic dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateRhombicDodecahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = 1.0 / 2.0;\r\n\t\treturn JSM.GenerateCumulatedHexahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GeneratePentakisDodecahedron\r\n\t* Description: Generates a pentakis dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GeneratePentakisDodecahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = Math.sqrt ((65.0 + 22.0 * Math.sqrt (5.0)) / 5.0) / 19.0;\r\n\t\treturn JSM.GenerateCumulatedDodecahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSmallStellatedDodecahedron\r\n\t* Description: Generates a small stellated dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSmallStellatedDodecahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = Math.sqrt ((5.0 + 2.0 * Math.sqrt (5.0)) / 5.0);\r\n\t\treturn JSM.GenerateCumulatedDodecahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateGreatDodecahedron\r\n\t* Description: Generates a great dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateGreatDodecahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = (Math.sqrt (3.0) * (Math.sqrt (5.0) - 3.0)) / 6.0;\r\n\t\treturn JSM.GenerateCumulatedIcosahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSmallTriambicIcosahedron\r\n\t* Description: Generates a small triambic icosahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSmallTriambicIcosahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = Math.sqrt (15.0) / 15.0;\r\n\t\treturn JSM.GenerateCumulatedIcosahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateGreatStellatedDodecahedron\r\n\t* Description: Generates a great stellated dodecahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateGreatStellatedDodecahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = (Math.sqrt (3.0) * (3.0 + Math.sqrt (5.0))) / 6.0;\r\n\t\treturn JSM.GenerateCumulatedIcosahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSmallTriakisOctahedron\r\n\t* Description: Generates a small triakis octahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSmallTriakisOctahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = Math.sqrt (3.0) - 2.0 * Math.sqrt (6.0) / 3.0;\r\n\t\treturn JSM.GenerateCumulatedOctahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateStellaOctangula\r\n\t* Description: Generates a stella octangula.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateStellaOctangula = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = Math.sqrt (6.0) / 3.0;\r\n\t\treturn JSM.GenerateCumulatedOctahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateTriakisTetrahedron\r\n\t* Description: Generates a triakis tetrahedron.\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateTriakisTetrahedron = function ()\r\n\t{\r\n\t\tvar pyramidUnitHeight = Math.sqrt (6.0) / 15.0;\r\n\t\treturn JSM.GenerateCumulatedTetrahedron (pyramidUnitHeight);\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extras/extgenerator',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Class: LegoDimensions\r\n\t* Description: Class that contains lego brick dimensions.\r\n\t*/\r\n\tJSM.LegoDimensions = function ()\r\n\t{\r\n\t\tthis.legoWidth = 0.78;\r\n\t\tthis.legoSmallHeight = 0.32;\r\n\t\tthis.legoLargeHeight = 0.96;\r\n\t\tthis.legoWallWidth = 0.16;\r\n\t\tthis.legoCylinderWidth = 0.5;\r\n\t\tthis.legoCylinderHeight = 0.17;\r\n\t\tthis.legoBottomSmallCylinderWidth = 0.3;\r\n\t\tthis.legoBottomLargeCylinderWidth = 0.6;\r\n\t\tthis.legoBottomLargeCylinderWallWidth = 0.1;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateLegoBrick\r\n\t* Description: Generates a lego brick.\r\n\t* Parameters:\r\n\t*\trows {integer} the row count\r\n\t*\tcolumns {integer} the columns count\r\n\t*\tisLarge {boolean} the brick is large\r\n\t*\thasTopCylinders {boolean} the brick has top cylinders\r\n\t*\thasBottomCylinders {boolean} the brick has bottom cylinders\r\n\t*\tsegmentation {integer} the segmentation of cylinders\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateLegoBrick = function (rows, columns, isLarge, hasTopCylinders, hasBottomCylinders, segmentation, isCurved)\r\n\t{\r\n\t\tfunction OffsetBody (body, offset)\r\n\t\t{\r\n\t\t\tvar i, vertex;\r\n\t\t\tfor (i = 0; i < body.VertexCount (); i++) {\r\n\t\t\t\tvertex = body.GetVertex (i);\r\n\t\t\t\tvertex.position = JSM.CoordAdd (vertex.position, offset);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar legoDimensions = new JSM.LegoDimensions ();\r\n\r\n\t\tvar normal = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\tvar unitWidth = legoDimensions.legoWidth;\r\n\t\tvar unitHeight = legoDimensions.legoLargeHeight;\r\n\t\tif (!isLarge) {\r\n\t\t\tunitHeight = legoDimensions.legoSmallHeight;\r\n\t\t}\r\n\t\tvar wallWidth = legoDimensions.legoWallWidth;\r\n\t\tvar topCylinderWidth = legoDimensions.legoCylinderWidth;\r\n\t\tvar topCylinderHeight = legoDimensions.legoCylinderHeight;\r\n\t\tvar bottomSmallCylinderWidth = legoDimensions.legoBottomSmallCylinderWidth;\r\n\t\tvar bottomLargeCylinderWidth = legoDimensions.legoBottomLargeCylinderWidth;\r\n\t\tvar bottomLargeCylinderWallWidth = legoDimensions.legoBottomLargeCylinderWallWidth;\r\n\r\n\t\tvar basePolygon = [];\r\n\t\tbasePolygon.push (new JSM.Coord (0.0, 0.0, 0.0));\r\n\t\tbasePolygon.push (new JSM.Coord (unitWidth * rows, 0.0, 0.0));\r\n\t\tbasePolygon.push (new JSM.Coord (unitWidth * rows, unitWidth * columns, 0.0));\r\n\t\tbasePolygon.push (new JSM.Coord (0.0, unitWidth * columns, 0.0));\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar walls = JSM.GeneratePrismShell (basePolygon, normal, unitHeight - wallWidth, wallWidth, true);\r\n\t\tresult.Merge (walls);\r\n\t\t\t\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i < 4; i++) {\r\n\t\t\tbasePolygon[i].z = unitHeight - wallWidth;\r\n\t\t}\r\n\t\t\r\n\t\tvar top = JSM.GeneratePrism (basePolygon, normal, wallWidth, true, null);\r\n\t\tresult.Merge (top);\r\n\t\t\r\n\t\tvar cylinderCenter, cylinder;\r\n\t\tif (hasTopCylinders) {\r\n\t\t\tfor (i = 0; i < rows; i++) {\r\n\t\t\t\tfor (j = 0; j < columns; j++) {\r\n\t\t\t\t\tcylinderCenter = new JSM.Coord (unitWidth * i + unitWidth / 2.0, unitWidth * j + unitWidth / 2.0, unitHeight + topCylinderHeight / 2.0);\r\n\t\t\t\t\tcylinder = JSM.GenerateCylinder (topCylinderWidth / 2.0, topCylinderHeight, segmentation, true, isCurved);\r\n\t\t\t\t\tOffsetBody (cylinder, cylinderCenter);\r\n\t\t\t\t\tresult.Merge (cylinder);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (hasBottomCylinders) {\r\n\t\t\tvar circle, bigger, columnWise;\r\n\t\t\tif ((rows === 1 && columns > 1) || (columns === 1 && rows > 1)) {\r\n\t\t\t\tbigger = columns;\r\n\t\t\t\tcolumnWise = true;\r\n\t\t\t\tif (rows > columns) {\r\n\t\t\t\t\tbigger = rows;\r\n\t\t\t\t\tcolumnWise = false;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < bigger - 1; i++) {\r\n\t\t\t\t\tif (columnWise) {\r\n\t\t\t\t\t\tcylinderCenter = new JSM.Coord (unitWidth / 2.0, unitWidth * (i + 1), (unitHeight - wallWidth) / 2.0);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcylinderCenter = new JSM.Coord (unitWidth * (i + 1), unitWidth / 2.0, (unitHeight - wallWidth) / 2.0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcylinder = JSM.GenerateCylinder (bottomSmallCylinderWidth / 2.0, unitHeight - wallWidth, segmentation, true, isCurved);\r\n\t\t\t\t\tOffsetBody (cylinder, cylinderCenter);\r\n\t\t\t\t\tresult.Merge (cylinder);\r\n\t\t\t\t}\r\n\t\t\t} else if (rows > 1 && columns > 1) {\r\n\t\t\t\tfor (i = 0; i < rows - 1; i++) {\r\n\t\t\t\t\tfor (j = 0; j < columns - 1; j++) {\r\n\t\t\t\t\t\tcircle = [];\r\n\t\t\t\t\t\tcylinderCenter = new JSM.Coord (unitWidth * (i + 1), unitWidth * (j + 1), (unitHeight - wallWidth) / 2.0);\r\n\t\t\t\t\t\tcylinder = JSM.GenerateCylinderShell (bottomLargeCylinderWidth / 2.0, unitHeight - wallWidth, bottomLargeCylinderWallWidth, segmentation, true, isCurved);\r\n\t\t\t\t\t\tOffsetBody (cylinder, cylinderCenter);\r\n\t\t\t\t\t\tresult.Merge (cylinder);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tresult.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateConvexHullBody\r\n\t* Description: Generates a convex hull body from the given coordinates.\r\n\t* Parameters:\r\n\t*\tcoord {Coord[*]} the coordinates\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateConvexHullBody = function (coords)\r\n\t{\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar convexHull = JSM.ConvexHull3D (coords);\r\n\t\t\r\n\t\tvar oldToNewIndexTable = {};\r\n\t\tvar i, j, current, index;\r\n\t\tfor (i = 0; i < convexHull.length; i++) {\r\n\t\t\tcurrent = convexHull[i];\r\n\t\t\tfor (j = 0; j < current.length; j++) {\r\n\t\t\t\tindex = current[j];\r\n\t\t\t\tif (!(index in oldToNewIndexTable)) {\r\n\t\t\t\t\toldToNewIndexTable[index] = result.VertexCount ();\r\n\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (coords[index]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar newPolygon;\r\n\t\tfor (i = 0; i < convexHull.length; i++) {\r\n\t\t\tcurrent = convexHull[i];\r\n\t\t\tnewPolygon = [];\r\n\t\t\tfor (j = 0; j < current.length; j++) {\r\n\t\t\t\tindex = current[j];\r\n\t\t\t\tnewPolygon.push (oldToNewIndexTable[index]);\r\n\t\t\t}\r\n\t\t\tresult.AddPolygon (new JSM.BodyPolygon (newPolygon));\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateSuperShape\r\n\t* Description: Generates a supershape.\r\n\t* Parameters:\r\n\t*\tparameters {12 numbers} the supershape parameters\r\n\t*\tsegmentation {integer} the segmentation\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSuperShape = function (\taLon, bLon, mLon, n1Lon, n2Lon, n3Lon,\r\n\t\t\t\t\t\t\t\t\t\taLat, bLat, mLat, n1Lat, n2Lat, n3Lat,\r\n\t\t\t\t\t\t\t\t\t\tsegmentation, isCurved)\r\n\t{\r\n\t\tfunction CartesianToSpherical (coord)\r\n\t\t{\r\n\t\t\tvar radius = Math.sqrt (coord.x * coord.x + coord.y * coord.y + coord.z * coord.z);\r\n\t\t\tvar phi = Math.asin (coord.z / radius);\r\n\t\t\tvar theta = Math.atan2 (coord.y, coord.x);\r\n\t\t\treturn [radius, phi, theta];\r\n\t\t}\r\n\r\n\t\tfunction CalculateSuperFormula (p, a, b, m, n1, n2, n3)\r\n\t\t{\r\n\t\t\tvar abs1 = Math.abs (Math.cos (m * p / 4.0) / a);\r\n\t\t\tvar abs2 = Math.abs (Math.sin (m * p / 4.0) / b);\r\n\t\t\treturn Math.pow (Math.pow (abs1, n2) + Math.pow (abs2, n3), -1.0 / n1);\r\n\t\t}\r\n\r\n\t\tfunction CalculateSuperFormulaCoordinate (phi, theta)\r\n\t\t{\r\n\t\t\tvar coord = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tvar rPhi = CalculateSuperFormula (phi, aLat, bLat, mLat, n1Lat, n2Lat, n3Lat);\r\n\t\t\tvar rTheta = CalculateSuperFormula (theta, aLon, bLon, mLon, n1Lon, n2Lon, n3Lon);\r\n\t\t\tcoord.x = rTheta * Math.cos (theta) * rPhi * Math.cos (phi);\r\n\t\t\tcoord.y = rTheta * Math.sin (theta) * rPhi * Math.cos (phi);\r\n\t\t\tcoord.z = rPhi * Math.sin (phi);\r\n\t\t\treturn coord;\r\n\t\t}\r\n\r\n\t\tvar result = JSM.GenerateSphere (1.0, segmentation, isCurved);\r\n\r\n\t\tvar i, vertex, coord, spherical, newCoord;\r\n\t\tfor (i = 0; i < result.VertexCount (); i++) {\r\n\t\t\tvertex = result.GetVertex (i);\r\n\t\t\tcoord = vertex.position;\r\n\t\t\tspherical = CartesianToSpherical (coord);\r\n\t\t\tnewCoord = CalculateSuperFormulaCoordinate (spherical[1], spherical[2]);\r\n\t\t\tvertex.SetPosition (newCoord);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extras/subdivision',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: CatmullClarkSubdivisionOneIteration\r\n\t* Description: Runs one iteration of Catmull-Clark subdivision on a body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.CatmullClarkSubdivisionOneIteration = function (body)\r\n\t{\r\n\t\tfunction AddOriginalVertices (body, result, adjacencyInfo)\r\n\t\t{\r\n\t\t\tvar i, vertCoord;\r\n\t\t\tfor (i = 0; i < adjacencyInfo.verts.length; i++) {\r\n\t\t\t\tvertCoord = body.GetVertexPosition (i);\r\n\t\t\t\tresult.AddVertex (new JSM.BodyVertex (vertCoord.Clone ()));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddPolygonVertices (body, result, adjacencyInfo, pgonVertices)\r\n\t\t{\r\n\t\t\tvar i, j, pgon, vertCoord, pgonCoord;\r\n\t\t\tfor (i = 0; i < adjacencyInfo.pgons.length; i++) {\r\n\t\t\t\tpgon = adjacencyInfo.pgons[i];\r\n\t\t\t\tpgonCoord = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\t\tfor (j = 0; j < pgon.verts.length; j++) {\r\n\t\t\t\t\tvertCoord = body.GetVertexPosition (pgon.verts[j]);\r\n\t\t\t\t\tpgonCoord = JSM.CoordAdd (pgonCoord, vertCoord);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpgonCoord.MultiplyScalar (1.0 / pgon.verts.length);\r\n\t\t\t\tpgonVertices.push (result.AddVertex (new JSM.BodyVertex (pgonCoord)));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddEdgeVertices (body, result, adjacencyInfo, pgonVertices, edgeVertices)\r\n\t\t{\r\n\t\t\tvar i, j, edge, edgeCoord1, edgeCoord2, edgeCoord, pgonIndex, pgonCoord;\r\n\t\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\t\tedge = adjacencyInfo.edges[i];\r\n\t\t\t\tedgeCoord1 = body.GetVertexPosition (edge.vert1);\r\n\t\t\t\tedgeCoord2 = body.GetVertexPosition (edge.vert2);\r\n\t\t\t\tif (adjacencyInfo.IsContourEdge (edge)) {\r\n\t\t\t\t\tedgeCoord = JSM.MidCoord (edgeCoord1, edgeCoord2);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tedgeCoord = JSM.CoordAdd (edgeCoord1, edgeCoord2);\r\n\t\t\t\t\tfor (j = 0; j < 2; j++) {\r\n\t\t\t\t\t\tpgonIndex = (j === 0 ? edge.pgon1 : edge.pgon2);\r\n\t\t\t\t\t\tpgonCoord = result.GetVertexPosition (pgonVertices[pgonIndex]);\r\n\t\t\t\t\t\tedgeCoord = JSM.CoordAdd (edgeCoord, pgonCoord);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tedgeCoord.MultiplyScalar (1.0 / 4.0);\r\n\t\t\t\t}\r\n\t\t\t\tedgeVertices.push (result.AddVertex (new JSM.BodyVertex (edgeCoord)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction MoveOriginalVertices (body, result, adjacencyInfo, pgonVertices)\r\n\t\t{\r\n\t\t\tfunction MoveContourVertex (newVertCoord, vertCoord)\r\n\t\t\t{\r\n\t\t\t\tvertCoord.x = newVertCoord.x;\r\n\t\t\t\tvertCoord.y = newVertCoord.y;\r\n\t\t\t\tvertCoord.z = newVertCoord.z;\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tfunction MoveVertex (pgonAverage, edgeAverage, vertEdgeCount, vertCoord)\r\n\t\t\t{\r\n\t\t\t\tvertCoord.x = (pgonAverage.x + 2.0 * edgeAverage.x + (vertEdgeCount - 3) * vertCoord.x) / vertEdgeCount;\r\n\t\t\t\tvertCoord.y = (pgonAverage.y + 2.0 * edgeAverage.y + (vertEdgeCount - 3) * vertCoord.y) / vertEdgeCount;\r\n\t\t\t\tvertCoord.z = (pgonAverage.z + 2.0 * edgeAverage.z + (vertEdgeCount - 3) * vertCoord.z) / vertEdgeCount;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar edgeMidCoords = [];\r\n\t\t\t\r\n\t\t\tvar edge, edgeCoord;\r\n\t\t\tvar i, j;\r\n\t\t\tfor (i = 0; i < adjacencyInfo.edges.length; i++) {\r\n\t\t\t\tedge = adjacencyInfo.edges[i];\r\n\t\t\t\tedgeCoord = JSM.MidCoord (body.GetVertexPosition (edge.vert1), body.GetVertexPosition (edge.vert2));\r\n\t\t\t\tedgeMidCoords.push (edgeCoord);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar vert, pgon, vertCoord, currentVertCoord;\r\n\t\t\tvar pgonAverage, edgeAverage, edgeCountForAverage;\r\n\t\t\tfor (i = 0; i < adjacencyInfo.verts.length; i++) {\r\n\t\t\t\tvert = adjacencyInfo.verts[i];\r\n\t\t\t\tvertCoord = result.GetVertexPosition (i);\r\n\t\t\t\tif (adjacencyInfo.IsContourVertex (vert)) {\r\n\t\t\t\t\tedgeCountForAverage = 0;\r\n\t\t\t\t\tedgeAverage = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\t\t\tfor (j = 0; j < vert.edges.length; j++) {\r\n\t\t\t\t\t\tedge = vert.edges[j];\r\n\t\t\t\t\t\tif (adjacencyInfo.IsContourEdge (adjacencyInfo.edges[edge])) {\r\n\t\t\t\t\t\t\tedgeCoord = edgeMidCoords [vert.edges[j]];\r\n\t\t\t\t\t\t\tedgeAverage.Add (edgeCoord);\r\n\t\t\t\t\t\t\tedgeCountForAverage++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tedgeAverage.Add (vertCoord);\r\n\t\t\t\t\tedgeCountForAverage++;\r\n\t\t\t\t\tedgeAverage.MultiplyScalar (1.0 / edgeCountForAverage);\r\n\t\t\t\t\tMoveContourVertex (edgeAverage, vertCoord);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpgonAverage = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\t\t\tedgeAverage = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (j = 0; j < vert.pgons.length; j++) {\r\n\t\t\t\t\t\tpgon = vert.pgons[j];\r\n\t\t\t\t\t\tcurrentVertCoord = result.GetVertexPosition (pgonVertices[pgon]);\r\n\t\t\t\t\t\tpgonAverage.Add (currentVertCoord);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpgonAverage.MultiplyScalar (1.0 / vert.pgons.length);\r\n\r\n\t\t\t\t\tfor (j = 0; j < vert.edges.length; j++) {\r\n\t\t\t\t\t\tedge = vert.edges[j];\r\n\t\t\t\t\t\tedgeCoord = edgeMidCoords [edge];\r\n\t\t\t\t\t\tedgeAverage.Add (edgeCoord);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tedgeAverage.MultiplyScalar (1.0 / vert.edges.length);\r\n\t\t\t\t\tMoveVertex (pgonAverage, edgeAverage, vert.edges.length, vertCoord);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddNewPolygons (body, result, adjacencyInfo, pgonVertices, edgeVertices)\r\n\t\t{\r\n\t\t\tvar edgeCount, currentEdge, nextEdge;\r\n\t\t\tvar centroid, currentEdgeVertex, originalVertex, nextEdgeVertex;\r\n\t\t\tvar polygon, oldPolygon;\r\n\t\t\tvar i, j, pgon;\r\n\t\t\tfor (i = 0; i < adjacencyInfo.pgons.length; i++) {\r\n\t\t\t\tpgon = adjacencyInfo.pgons[i];\r\n\t\t\t\tedgeCount = pgon.verts.length;\r\n\t\t\t\tfor (j = 0; j < edgeCount; j++) {\r\n\t\t\t\t\tcurrentEdge = pgon.pedges[j];\r\n\t\t\t\t\tnextEdge = pgon.pedges[(j + 1) % edgeCount];\r\n\r\n\t\t\t\t\tcentroid = pgonVertices[i];\r\n\t\t\t\t\tcurrentEdgeVertex = edgeVertices[currentEdge.index];\r\n\t\t\t\t\toriginalVertex = adjacencyInfo.GetPolyEdgeStartVertex (nextEdge);\r\n\t\t\t\t\tnextEdgeVertex = edgeVertices[nextEdge.index];\r\n\t\t\t\t\t\r\n\t\t\t\t\tpolygon = new JSM.BodyPolygon ([centroid, currentEdgeVertex, originalVertex, nextEdgeVertex]);\r\n\t\t\t\t\toldPolygon = body.GetPolygon (i);\r\n\t\t\t\t\tpolygon.material = oldPolygon.material;\r\n\t\t\t\t\tpolygon.curved = oldPolygon.curved;\r\n\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar adjacencyInfo = new JSM.AdjacencyInfo (body);\r\n\r\n\t\tvar pgonVertices = [];\r\n\t\tvar edgeVertices = [];\r\n\r\n\t\tAddOriginalVertices (body, result, adjacencyInfo);\r\n\t\tAddPolygonVertices (body, result, adjacencyInfo, pgonVertices);\r\n\t\tAddEdgeVertices (body, result, adjacencyInfo, pgonVertices, edgeVertices);\r\n\r\n\t\tMoveOriginalVertices (body, result, adjacencyInfo, pgonVertices);\r\n\t\tAddNewPolygons (body, result, adjacencyInfo, pgonVertices, edgeVertices);\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: CatmullClarkSubdivision\r\n\t* Description: Runs multiple iterations of Catmull-Clark subdivision on a body.\r\n\t* Parameters:\r\n\t*\tbody {Body} the body\r\n\t*\titerations {integer} the iteration number\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.CatmullClarkSubdivision = function (body, iterations)\r\n\t{\r\n\t\tvar result = body;\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < iterations; i++) {\r\n\t\t\tresult = JSM.CatmullClarkSubdivisionOneIteration (result);\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extras/csg',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: BooleanOperation\r\n\t* Description: Makes a boolean operation on the given bodies.\r\n\t* Parameters:\r\n\t*\toperation {string} the operation ('Union', 'Difference', or 'Intersection')\r\n\t*\taBody {Body} the first body\r\n\t*\tbBody {Body} the second body\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.BooleanOperation = function (operation, aBody, bBody)\r\n\t{\r\n\t\tfunction AddPolygonToBody (polygon, body, octree, reversed)\r\n\t\t{\r\n\t\t\tfunction AddBodyVertex (coord, octree)\r\n\t\t\t{\r\n\t\t\t\tvar merge = false;\r\n\t\t\t\tif (merge) {\r\n\t\t\t\t\tvar index = octree.FindCoord (coord);\r\n\t\t\t\t\tif (index == -1) {\r\n\t\t\t\t\t\tindex = body.AddVertex (new JSM.BodyVertex (coord));\r\n\t\t\t\t\t\toctree.AddCoord (coord);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn index;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn body.AddVertex (new JSM.BodyVertex (coord));\r\n\t\t\t}\r\n\r\n\t\t\tvar bodyPolygon = new JSM.BodyPolygon ([]);\r\n\r\n\t\t\tvar i, vertexIndex;\r\n\t\t\tif (!reversed) {\r\n\t\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\t\t\tvertexIndex = AddBodyVertex (polygon.GetVertex (i), octree);\r\n\t\t\t\t\tbodyPolygon.AddVertexIndex (vertexIndex);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor (i = polygon.VertexCount () - 1; i >= 0; i--) {\r\n\t\t\t\t\tvertexIndex = AddBodyVertex (polygon.GetVertex (i), octree);\r\n\t\t\t\t\tbodyPolygon.AddVertexIndex (vertexIndex);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (polygon.userData !== undefined) {\r\n\t\t\t\tbodyPolygon.SetMaterialIndex (polygon.userData.material);\r\n\t\t\t}\r\n\t\t\tbody.AddPolygon (bodyPolygon);\r\n\t\t}\r\n\r\n\t\tfunction AddPolygonsToBody (polygons, body, octree, reversed)\r\n\t\t{\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\t\tAddPolygonToBody (polygons[i], body, octree, reversed);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfunction ClipNodePolygonsWithTree (nodes, tree, frontPolygons, backPolygons, planarFrontPolygons, planarBackPolygons)\r\n\t\t{\r\n\t\t\tfunction SetPolygonsUserData (polygons, userData)\r\n\t\t\t{\r\n\t\t\t\tvar i, polygon;\r\n\t\t\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\t\t\tpolygon = polygons[i];\r\n\t\t\t\t\tif (polygon.userData === undefined) {\r\n\t\t\t\t\t\tpolygon.userData = userData;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar i, node;\r\n\t\t\tfor (i = 0; i < nodes.length; i++) {\r\n\t\t\t\tnode = nodes[i];\r\n\t\t\t\tJSM.ClipPolygonWithBSPTree (node.polygon, tree, frontPolygons, backPolygons, planarFrontPolygons, planarBackPolygons);\r\n\t\t\t\tSetPolygonsUserData (frontPolygons, node.userData);\r\n\t\t\t\tSetPolygonsUserData (backPolygons, node.userData);\r\n\t\t\t\tSetPolygonsUserData (planarFrontPolygons, node.userData);\r\n\t\t\t\tSetPolygonsUserData (planarBackPolygons, node.userData);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar aTree = new JSM.BSPTree ();\r\n\t\tvar bTree = new JSM.BSPTree ();\r\n\t\tJSM.AddBodyToBSPTree (aBody, aTree, 'a');\r\n\t\tJSM.AddBodyToBSPTree (bBody, bTree, 'b');\r\n\r\n\t\tvar aFrontPolygons = [];\r\n\t\tvar aBackPolygons = [];\r\n\t\tvar aPlanarFrontPolygons = [];\r\n\t\tvar aPlanarBackPolygons = [];\r\n\t\tClipNodePolygonsWithTree (aTree.GetNodes (), bTree, aFrontPolygons, aBackPolygons, aPlanarFrontPolygons, aPlanarBackPolygons);\r\n\r\n\t\tvar bFrontPolygons = [];\r\n\t\tvar bBackPolygons = [];\r\n\t\tvar bPlanarFrontPolygons = [];\r\n\t\tvar bPlanarBackPolygons = [];\r\n\t\tClipNodePolygonsWithTree (bTree.GetNodes (), aTree, bFrontPolygons, bBackPolygons, bPlanarFrontPolygons, bPlanarBackPolygons);\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\t\tvar resultOctree = new JSM.Octree (JSM.BoxUnion (aBody.GetBoundingBox (), bBody.GetBoundingBox ()));\r\n\t\t\r\n\t\tif (operation == 'Union') {\r\n\t\t\tAddPolygonsToBody (aFrontPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (aPlanarFrontPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (aPlanarBackPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (bFrontPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (bPlanarFrontPolygons, result, resultOctree, false);\r\n\t\t} else if (operation == 'Difference') {\r\n\t\t\tAddPolygonsToBody (aFrontPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (aPlanarFrontPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (bBackPolygons, result, resultOctree, true);\r\n\t\t} else if (operation == 'Intersection') {\r\n\t\t\tAddPolygonsToBody (aBackPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (aPlanarBackPolygons, result, resultOctree, false);\r\n\t\t\tAddPolygonsToBody (bBackPolygons, result, resultOctree, false);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extras/surfaces',[\"../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: GenerateSurface\r\n\t* Description: Generates a parametric surface.\r\n\t* Parameters:\r\n\t*\txRange {number[2]} the from-to range on x axis\r\n\t*\tyRange {number[2]} the from-to range on y axis\r\n\t*\txSegmentation {integer} the segmentation along the x axis\r\n\t*\tySegmentation {integer} the segmentation along the y axis\r\n\t*\tuseTriangles {boolean} generate triangles instead of quadrangles\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t*\tgetPointCallback {function} callback function which returns the point for a position\r\n\t*\tuserData {anything} user data which will be passed to getPointCallback\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateSurface = function (xRange, yRange, xSegmentation, ySegmentation, useTriangles, isCurved, getPointCallback, userData)\r\n\t{\r\n\t\tfunction AddVertices (result, xStart, yStart, xSegment, ySegment)\r\n\t\t{\r\n\t\t\tvar i, j, u, v, coord;\r\n\t\t\tfor (i = 0; i <= ySegmentation; i++) {\r\n\t\t\t\tfor (j = 0; j <= xSegmentation; j++) {\r\n\t\t\t\t\tu = xStart + j * xSegment;\r\n\t\t\t\t\tv = yStart + i * ySegment;\r\n\t\t\t\t\tcoord = getPointCallback (i, j, u, v, userData);\r\n\t\t\t\t\tresult.AddVertex (new JSM.BodyVertex (coord));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction AddPolygons (result)\r\n\t\t{\r\n\t\t\tvar i, j;\r\n\t\t\tvar current, next, top, ntop;\r\n\t\t\tvar polygon;\r\n\t\t\t\r\n\t\t\tfor (j = 0; j < ySegmentation; j++) {\r\n\t\t\t\tfor (i = 0; i < xSegmentation; i++) {\r\n\t\t\t\t\tcurrent = j * (xSegmentation + 1) + i;\r\n\t\t\t\t\tnext = current + 1;\r\n\t\t\t\t\ttop = current + xSegmentation + 1;\r\n\t\t\t\t\tntop = top + 1;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (useTriangles) {\r\n\t\t\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop]);\r\n\t\t\t\t\t\tif (isCurved) {\r\n\t\t\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t\t\tpolygon = new JSM.BodyPolygon ([current, ntop, top]);\r\n\t\t\t\t\t\tif (isCurved) {\r\n\t\t\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpolygon = new JSM.BodyPolygon ([current, next, ntop, top]);\r\n\t\t\t\t\t\tif (isCurved) {\r\n\t\t\t\t\t\t\tpolygon.SetCurveGroup (0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresult.AddPolygon (polygon);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar result = new JSM.Body ();\r\n\t\t\r\n\t\tvar xStart = xRange[0];\r\n\t\tvar yStart = yRange[0];\r\n\t\tvar xDiff = xRange[1] - xRange[0];\r\n\t\tvar yDiff = yRange[1] - yRange[0];\r\n\t\tvar xSegment = xDiff / xSegmentation;\r\n\t\tvar ySegment = yDiff / ySegmentation;\r\n\t\t\r\n\t\tAddVertices (result, xStart, yStart, xSegment, ySegment);\r\n\t\tAddPolygons (result);\r\n\r\n\t\treturn result;\r\n\t};\r\n\r\n\t/**\r\n\t* Class: SurfaceControlPoints\r\n\t* Description: Represents control points for surface generation.\r\n\t* Parameters:\r\n\t*\tn {integer} the first dimension\r\n\t*\tm {integer} the second dimension\r\n\t*/\r\n\tJSM.SurfaceControlPoints = function (n, m)\r\n\t{\r\n\t\tthis.n = n;\r\n\t\tthis.m = m;\r\n\t\tthis.points = [];\r\n\t\t\r\n\t\tvar i, j;\r\n\t\tfor (i = 0; i <= this.n; i++) {\r\n\t\t\tthis.points.push ([]);\r\n\t\t\tfor (j = 0; j <= this.m; j++) {\r\n\t\t\t\tthis.points[i].push (new JSM.Coord (0.0, 0.0, 0.0));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SurfaceControlPoints.GetNValue\r\n\t* Description: Returns the n value.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.SurfaceControlPoints.prototype.GetNValue = function ()\r\n\t{\r\n\t\treturn this.n;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SurfaceControlPoints.GetMValue\r\n\t* Description: Returns the m value.\r\n\t* Returns:\r\n\t*\t{integer} the result\r\n\t*/\r\n\tJSM.SurfaceControlPoints.prototype.GetMValue = function ()\r\n\t{\r\n\t\treturn this.m;\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SurfaceControlPoints.GetControlPoint\r\n\t* Description: Returns a control point.\r\n\t* Parameters:\r\n\t*\ti {integer} the first dimension\r\n\t*\tj {integer} the second dimension\r\n\t* Returns:\r\n\t*\t{Coord} the result\r\n\t*/\r\n\tJSM.SurfaceControlPoints.prototype.GetControlPoint = function (i, j)\r\n\t{\r\n\t\treturn this.points[i][j];\r\n\t};\r\n\r\n\t/**\r\n\t* Function: SurfaceControlPoints.InitPlanar\r\n\t* Description: Inits planar control points.\r\n\t* Parameters:\r\n\t*\txSize {number} the x size\r\n\t*\txSize {number} the y size\r\n\t*/\r\n\tJSM.SurfaceControlPoints.prototype.InitPlanar = function (xSize, ySize)\r\n\t{\r\n\t\tvar iStep = xSize / this.n;\r\n\t\tvar jStep = ySize / this.m;\r\n\r\n\t\tvar i, j, point;\r\n\t\tfor (i = 0; i <= this.n; i++) {\r\n\t\t\tfor (j = 0; j <= this.m; j++) {\r\n\t\t\t\tpoint = this.points[i][j];\r\n\t\t\t\tpoint.x = i * iStep;\r\n\t\t\t\tpoint.y = j * jStep;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t* Function: GenerateBezierSurface\r\n\t* Description: Generates a bezier surface base on the given control points.\r\n\t* Parameters:\r\n\t*\tsurfaceControlPoints {SurfaceControlPoints} the control points\r\n\t*\txSegmentation {integer} the segmentation along the x axis\r\n\t*\tySegmentation {integer} the segmentation along the y axis\r\n\t*\tisCurved {boolean} create smooth surfaces\r\n\t* Returns:\r\n\t*\t{Body} the result\r\n\t*/\r\n\tJSM.GenerateBezierSurface = function (surfaceControlPoints, xSegmentation, ySegmentation, isCurved)\r\n\t{\r\n\t\tfunction GetBezierSurfacePoint (uIndex, vIndex, u, v, surfaceControlPoints)\r\n\t\t{\r\n\t\t\tvar i, j, result, tmp1, tmp2, scalar;\r\n\t\t\tvar n = surfaceControlPoints.GetNValue ();\r\n\t\t\tvar m = surfaceControlPoints.GetMValue ();\r\n\t\t\t\r\n\t\t\tresult = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tfor (i = 0; i <= n; i++) {\r\n\t\t\t\ttmp1 = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\t\tfor (j = 0; j <= m; j++) {\r\n\t\t\t\t\tscalar = JSM.BernsteinPolynomial (i, n, u) * JSM.BernsteinPolynomial (j, m, v);\r\n\t\t\t\t\ttmp2 = surfaceControlPoints.GetControlPoint (i, j).Clone ().MultiplyScalar (scalar);\r\n\t\t\t\t\ttmp1 = JSM.CoordAdd (tmp1, tmp2);\r\n\t\t\t\t}\r\n\t\t\t\tresult = JSM.CoordAdd (result, tmp1);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tvar body = JSM.GenerateSurface ([0, 1], [0, 1], xSegmentation, ySegmentation, false, isCurved, GetBezierSurfacePoint, surfaceControlPoints);\r\n\t\treturn body;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extensions/svgtomodel/svgtomodel',[\"../../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: SvgToModel\r\n\t* Description: Converts an svg objects rect, path and polygon elements to a body.\r\n\t* Parameters:\r\n\t*\tsvgObject {html svg element} the svg element\r\n\t*\theight {number} the height of the result body\r\n\t*\tsegmentLength {number} the maximum length of curved segments\r\n\t*\tcurveAngle {number} if not null, defines the curve angle of the model\r\n\t* Returns:\r\n\t*\t{Model} the result\r\n\t*/\r\n\tJSM.SvgToModel = function (svgObject, height, segmentLength, curveAngle)\r\n\t{\r\n\t\tfunction SegmentElem (elem, segmentLength)\r\n\t\t{\r\n\t\t\tfunction AddTransformedVertex (dummySVG, result, elem, x, y)\r\n\t\t\t{\r\n\t\t\t\tvar point = dummySVG.createSVGPoint ();\r\n\t\t\t\tpoint.x = x;\r\n\t\t\t\tpoint.y = y;\r\n\t\t\t\t\r\n\t\t\t\tvar transformed = point;\r\n\t\t\t\tvar matrix = elem.getCTM ();\r\n\t\t\t\tif (matrix !== undefined && matrix !== null) {\r\n\t\t\t\t\ttransformed = point.matrixTransform (matrix);\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tvar transformedCoord = new JSM.Coord2D (transformed.x, transformed.y);\r\n\t\t\t\tvar resultCoord = new JSM.Coord2D (x, y);\r\n\t\t\t\t\r\n\t\t\t\tvar contour = result.GetLastContour ();\r\n\t\t\t\tvar contourVertexCount = contour.VertexCount ();\r\n\t\t\t\tif (contourVertexCount > 0) {\r\n\t\t\t\t\tif (contour.GetVertex (contourVertexCount - 1).IsEqualWithEps (transformedCoord, 0.1)) {\r\n\t\t\t\t\t\treturn resultCoord;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcontour.AddVertex (transformed.x, transformed.y);\r\n\t\t\t\treturn resultCoord;\r\n\t\t\t}\r\n\r\n\t\t\tfunction SegmentCurve (dummySVG, originalPath, segmentLength, lastCoord, items, result)\r\n\t\t\t{\r\n\t\t\t\tfunction CreatePath (items)\r\n\t\t\t\t{\r\n\t\t\t\t\tfunction GenerateMoveCommand (x, y)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn 'M ' + x + ' ' + y + ' ';\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tvar svgNameSpace = 'http://www.w3.org/2000/svg';\r\n\t\t\t\t\tvar path = document.createElementNS (svgNameSpace, 'path');\r\n\r\n\t\t\t\t\tvar commandString = GenerateMoveCommand (lastCoord.x, lastCoord.y);\r\n\t\t\t\t\tvar i, item, command, largeArcFlag, sweepFlag;\r\n\t\t\t\t\tfor (i = 0; i < items.length; i++) {\r\n\t\t\t\t\t\titem = items[i];\r\n\t\t\t\t\t\tif (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ||\r\n\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL) {\r\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ? 'C' : 'c');\r\n\t\t\t\t\t\t\tcommandString += command + ' ' + item.x1 + ' ' + item.y1 + ' ' + item.x2 + ' ' + item.y2 + ' ' + item.x + ' ' + item.y + ' ';\r\n\t\t\t\t\t\t} else if (\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ||\r\n\t\t\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL){\r\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ? 'Q' : 'q');\r\n\t\t\t\t\t\t\tcommandString += command + ' ' + item.x1 + ' ' + item.y1 + ' ' + item.x + ' ' + item.y + ' ';\r\n\t\t\t\t\t\t} else if (\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ||\r\n\t\t\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_REL){\r\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ? 'A' : 'a');\r\n\t\t\t\t\t\t\tlargeArcFlag = (item.largeArcFlag ? 1 : 0);\r\n\t\t\t\t\t\t\tsweepFlag = (item.sweepFlag ? 1 : 0);\r\n\t\t\t\t\t\t\tcommandString +=  command + ' ' + item.r1 + ' ' + item.r2 + ' ' + item.angle + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + item.x + ' ' + item.y + ' ';\r\n\t\t\t\t\t\t} else if (\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||\r\n\t\t\t\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL){\r\n\t\t\t\t\t\t\tcommand = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ? 'S' : 's');\r\n\t\t\t\t\t\t\tcommandString +=  command + ' ' + item.x2 + ' ' + item.y2 + ' ' + item.x + ' ' + item.y + ' ';\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// unknown segment type\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpath.setAttributeNS (null, 'd', commandString);\r\n\t\t\t\t\treturn path;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tvar path = CreatePath (items);\r\n\t\t\t\tvar pathLength = path.getTotalLength ();\r\n\r\n\t\t\t\tvar segmentation = 0;\r\n\t\t\t\tif (segmentLength > 0) {\r\n\t\t\t\t\tsegmentation = parseInt (pathLength / segmentLength, 10);\r\n\t\t\t\t}\r\n\t\t\t\tif (segmentation < 3) {\r\n\t\t\t\t\tsegmentation = 3;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar step = pathLength / segmentation;\r\n\t\t\t\tvar i, point;\r\n\t\t\t\tfor (i = 1; i <= segmentation; i++) {\r\n\t\t\t\t\tpoint = path.getPointAtLength (i * step);\r\n\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, originalPath, point.x, point.y);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn lastCoord;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction IsCurvedItem (item)\r\n\t\t\t{\r\n\t\t\t\treturn\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_ARC_REL ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction IsSmoothItem (item)\r\n\t\t\t{\r\n\t\t\t\treturn\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||\r\n\t\t\t\t\t\titem.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;\r\n\t\t\t}\r\n\r\n\t\t\tfunction RemoveEqualEndVertices (polygon)\r\n\t\t\t{\r\n\t\t\t\tvar contour = polygon.GetLastContour ();\r\n\t\t\t\tvar vertexCount = contour.VertexCount ();\r\n\t\t\t\tif (vertexCount === 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar firstCoord = contour.GetVertex (0);\r\n\t\t\t\tvar lastCoord = contour.GetVertex (vertexCount - 1);\r\n\t\t\t\tif (firstCoord.IsEqualWithEps (lastCoord, 0.1)) {\r\n\t\t\t\t\t// TODO: Do not access vertices directly\r\n\t\t\t\t\tcontour.vertices.pop ();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfunction StartNewContour (result)\r\n\t\t\t{\r\n\t\t\t\tif (result.GetLastContour ().VertexCount () > 0) {\r\n\t\t\t\t\tRemoveEqualEndVertices (result);\r\n\t\t\t\t\tresult.AddContour ();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfunction SVGColorToHex (path)\r\n\t\t\t{\r\n\t\t\t\tvar svgColor = '';\r\n\t\t\t\tvar target = path;\r\n\t\t\t\twhile (target !== null && target !== undefined && svgColor.length === 0) {\r\n\t\t\t\t\tsvgColor = target.getAttribute ('fill');\r\n\t\t\t\t\tif (svgColor === null) {\r\n\t\t\t\t\t\tsvgColor = target.style.fill;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttarget = target.parentElement;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result = 0x000000;\r\n\t\t\t\tif (svgColor.length === 0) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (svgColor[0] == '#') {\r\n\t\t\t\t\tresult = JSM.HexColorToRGBColor (svgColor.substring (1));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar firstBracket = svgColor.indexOf ('(');\r\n\t\t\t\t\tvar secondBracket = svgColor.indexOf (')');\r\n\t\t\t\t\tif (firstBracket == -1 || secondBracket == -1) {\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numbers = svgColor.substring (firstBracket + 1, secondBracket);\r\n\t\t\t\t\tvar rgb = numbers.split (', ');\r\n\t\t\t\t\tif (rgb.length != 3) {\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult = JSM.RGBComponentsToHexColor (rgb[0], rgb[1], rgb[2]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar result = new JSM.ContourPolygon2D ();\r\n\t\t\tresult.AddContour ();\r\n\r\n\t\t\tvar dummySVG = document.createElementNS ('http://www.w3.org/2000/svg', 'svg');\r\n\r\n\t\t\tvar i, j;\r\n\t\t\tif (elem instanceof SVGPathElement) {\r\n\t\t\t\tvar lastCoord = new JSM.Coord2D (0.0, 0.0);\r\n\t\t\t\tvar lastMoveCoord = new JSM.Coord2D (0.0, 0.0);\r\n\r\n\t\t\t\tvar currentSegmentLength = segmentLength;\r\n\t\t\t\tif (elem.hasAttribute ('segmentlength')) {\r\n\t\t\t\t\tcurrentSegmentLength = parseFloat (elem.getAttribute ('segmentlength'));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar item, items, currentItem;\r\n\t\t\t\tfor (i = 0; i < elem.pathSegList.numberOfItems; i++) {\r\n\t\t\t\t\titem = elem.pathSegList.getItem (i);\r\n\t\t\t\t\tif (item.pathSegType == SVGPathSeg.PATHSEG_CLOSEPATH) {\r\n\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_MOVETO_ABS) {\r\n\t\t\t\t\t\tStartNewContour (result);\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, item.y);\r\n\t\t\t\t\t\tlastMoveCoord = lastCoord.Clone ();\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_MOVETO_REL) {\r\n\t\t\t\t\t\tStartNewContour (result);\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastMoveCoord.x + item.x, lastMoveCoord.y + item.y);\r\n\t\t\t\t\t\tlastMoveCoord = lastCoord.Clone ();\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_ABS) {\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, item.y);\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_REL) {\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x + item.x, lastCoord.y + item.y);\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS) {\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, lastCoord.y);\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS) {\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x, item.y);\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL) {\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x + item.x, lastCoord.y);\r\n\t\t\t\t\t} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL) {\r\n\t\t\t\t\t\tlastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x, lastCoord.y + item.y);\r\n\t\t\t\t\t} else if (IsCurvedItem (item)) {\r\n\t\t\t\t\t\titems = [];\r\n\t\t\t\t\t\tif (IsSmoothItem (item)) {\r\n\t\t\t\t\t\t\tfor (j = i; j < elem.pathSegList.numberOfItems; j++) {\r\n\t\t\t\t\t\t\t\tcurrentItem = elem.pathSegList.getItem (j);\r\n\t\t\t\t\t\t\t\tif (!IsSmoothItem (currentItem)) {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\titems.push (currentItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\ti = j - 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\titems.push (item);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlastCoord = SegmentCurve (dummySVG, elem, currentSegmentLength, lastCoord, items, result);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// unknown segment type\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tRemoveEqualEndVertices (result);\r\n\t\t\t} else if (elem instanceof SVGRectElement) {\r\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value, elem.y.baseVal.value);\r\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value + elem.width.baseVal.value, elem.y.baseVal.value);\r\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value + elem.width.baseVal.value, elem.y.baseVal.value + elem.height.baseVal.value);\r\n\t\t\t\tAddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value, elem.y.baseVal.value + elem.height.baseVal.value);\r\n\t\t\t} else if (elem instanceof SVGPolygonElement) {\r\n\t\t\t\tvar point;\r\n\t\t\t\tfor (i = 0; i < elem.points.numberOfItems; i++) {\r\n\t\t\t\t\tpoint = elem.points.getItem (i);\r\n\t\t\t\t\tAddTransformedVertex (dummySVG, result, elem, point.x, point.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult.color = SVGColorToHex (elem);\r\n\t\t\tresult.originalElem = elem;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction SegmentPaths (svgObject, segmentLength)\r\n\t\t{\r\n\t\t\tfunction AddElemType (svgObject, elemType, result)\r\n\t\t\t{\r\n\t\t\t\tvar elems = svgObject.getElementsByTagName (elemType);\r\n\t\t\t\tvar i;\r\n\t\t\t\tfor (i = 0; i < elems.length; i++) {\r\n\t\t\t\t\tresult.push (elems[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar result = [];\r\n\t\t\tvar elems = [];\r\n\t\t\tAddElemType (svgObject, 'path', elems);\r\n\t\t\tAddElemType (svgObject, 'rect', elems);\r\n\t\t\tAddElemType (svgObject, 'polygon', elems);\r\n\t\t\t\r\n\t\t\tvar currentSegmentLength = segmentLength;\r\n\t\t\tif (svgObject.hasAttribute ('segmentlength')) {\r\n\t\t\t\tcurrentSegmentLength = parseFloat (svgObject.getAttribute ('segmentlength'));\r\n\t\t\t}\r\n\r\n\t\t\tvar i, current;\r\n\t\t\tfor (i = 0; i < elems.length; i++) {\r\n\t\t\t\tcurrent = SegmentElem (elems[i], currentSegmentLength);\r\n\t\t\t\tresult.push (current);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tfunction ContourPolygonToPrisms (polygon, height, curveAngle)\r\n\t\t{\r\n\t\t\tfunction AppendPolygonVertices (polygon, vertexArray, reversed)\r\n\t\t\t{\r\n\t\t\t\tvar i, coord;\r\n\t\t\t\tif (!reversed) {\r\n\t\t\t\t\tfor (i = 0; i < polygon.VertexCount (); i++) {\r\n\t\t\t\t\t\tcoord = polygon.GetVertex (i);\r\n\t\t\t\t\t\tvertexArray.push (new JSM.Coord (coord.x, -coord.y, 0.0));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (i = polygon.VertexCount () - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tcoord = polygon.GetVertex (i);\r\n\t\t\t\t\t\tvertexArray.push (new JSM.Coord (coord.x, -coord.y, 0.0));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction CreateBasePolygon (polygon)\r\n\t\t\t{\r\n\t\t\t\tvar basePolygon = [];\r\n\t\t\t\tvar orientation = polygon.GetOrientation ();\r\n\t\t\t\tvar reversed = (orientation == JSM.Orientation.CounterClockwise);\r\n\t\t\t\tAppendPolygonVertices (polygon, basePolygon, reversed);\r\n\t\t\t\treturn basePolygon;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tfunction AddHoleToBasePolygon (basePolygon, holePolygon)\r\n\t\t\t{\r\n\t\t\t\tbasePolygon.push (null);\r\n\t\t\t\tvar orientation = holePolygon.GetOrientation ();\r\n\t\t\t\tvar reversed = (orientation == JSM.Orientation.Clockwise);\r\n\t\t\t\tAppendPolygonVertices (holePolygon, basePolygon, reversed);\r\n\t\t\t}\r\n\r\n\t\t\tvar prisms = [];\r\n\t\t\tvar direction = new JSM.Vector (0.0, 0.0, 1.0);\r\n\t\t\t\r\n\t\t\tvar currentHeight = height;\r\n\t\t\tif (polygon.originalElem !== undefined) {\r\n\t\t\t\tif (polygon.originalElem.hasAttribute ('modelheight')) {\r\n\t\t\t\t\tcurrentHeight = parseFloat (polygon.originalElem.getAttribute ('modelheight'));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar basePolygon, baseOrientation, prism;\r\n\t\t\tvar contourCount = polygon.ContourCount ();\r\n\t\t\tif (contourCount === 0) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (contourCount == 1) {\r\n\t\t\t\tbaseOrientation = polygon.GetContour (0).GetOrientation ();\r\n\t\t\t\tbasePolygon = CreateBasePolygon (polygon.GetContour (0));\r\n\t\t\t\tprism = JSM.GeneratePrism (basePolygon, direction, currentHeight, true, curveAngle);\r\n\t\t\t\tprisms.push (prism);\r\n\t\t\t} else if (contourCount > 1) {\r\n\t\t\t\tbaseOrientation = polygon.GetContour (0).GetOrientation ();\r\n\t\t\t\tvar holeBasePolygon = CreateBasePolygon (polygon.GetContour (0));\r\n\t\t\t\tvar hasHoles = false;\r\n\t\t\t\t\r\n\t\t\t\tvar i, orientation;\r\n\t\t\t\tfor (i = 1; i < polygon.ContourCount (); i++) {\r\n\t\t\t\t\torientation = polygon.GetContour (i).GetOrientation ();\r\n\t\t\t\t\tif (orientation == baseOrientation) {\r\n\t\t\t\t\t\tbasePolygon = CreateBasePolygon (polygon.GetContour (i));\r\n\t\t\t\t\t\tprism = JSM.GeneratePrism (basePolygon, direction, currentHeight, true, curveAngle);\r\n\t\t\t\t\t\tprisms.push (prism);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tAddHoleToBasePolygon (holeBasePolygon, polygon.GetContour (i));\r\n\t\t\t\t\t\thasHoles = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!hasHoles) {\r\n\t\t\t\t\tprism = JSM.GeneratePrism (holeBasePolygon, direction, currentHeight, true, curveAngle);\r\n\t\t\t\t\tprisms.push (prism);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprism = JSM.GeneratePrismWithHole (holeBasePolygon, direction, currentHeight, true, curveAngle);\r\n\t\t\t\t\tprisms.push (prism);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar material = new JSM.Material ({ambient : polygon.color, diffuse : polygon.color});\r\n\t\t\treturn [prisms, material];\r\n\t\t}\r\n\t\t\r\n\t\tvar model = new JSM.Model ();\r\n\t\tvar polygons = SegmentPaths (svgObject, segmentLength);\r\n\r\n\t\tvar currentHeight = height;\r\n\t\tif (svgObject.hasAttribute ('modelheight')) {\r\n\t\t\tcurrentHeight = parseFloat (svgObject.getAttribute ('modelheight'));\r\n\t\t}\r\n\t\t\r\n\t\tvar i, j, prismsAndMaterial, currentPrisms, currentPrism, currentMaterial;\r\n\t\tfor (i = 0; i < polygons.length; i++) {\r\n\t\t\tprismsAndMaterial = ContourPolygonToPrisms (polygons[i], currentHeight, curveAngle);\r\n\t\t\tif (prismsAndMaterial === null) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tcurrentPrisms = prismsAndMaterial[0];\r\n\t\t\tcurrentMaterial = prismsAndMaterial[1];\r\n\t\t\tmodel.AddMaterial (currentMaterial);\r\n\t\t\tfor (j = 0; j < currentPrisms.length; j++) {\r\n\t\t\t\tcurrentPrism = currentPrisms[j];\r\n\t\t\t\tcurrentPrism.SetPolygonsMaterialIndex (model.MaterialCount () - 1);\r\n\t\t\t\tmodel.AddBody (currentPrism);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn model;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extensions/textgenerator/textgenerator',[\"../../core/jsm\"],function(JSM){\r\n\t/**\r\n\t* Function: GenerateText\r\n\t* Description:\r\n\t*\tGenerates 3D model from the given text. It should get a font\r\n\t*\tspecification object created with facetype.js.\r\n\t* Parameters:\r\n\t*\ttext {string} the text\r\n\t*\tfontSpec {object} the font specification object generated with facetype.js\r\n\t*\tfontScale {number} the scale of the generated model\r\n\t*\tfontHeight {number} the height of the generated model\r\n\t*\tfontSegmentation {integer} the segmentation of font glyphs\r\n\t* Returns:\r\n\t*\t{Model} the result\r\n\t*/\r\n\tJSM.GenerateText = function (text, fontSpec, fontScale, fontHeight, fontSegmentation)\r\n\t{\r\n\t\tfunction CreatePathFromSpecification (commands, segmentation, offset, scale)\r\n\t\t{\r\n\t\t\tfunction Num (str)\r\n\t\t\t{\r\n\t\t\t\treturn parseFloat (str);\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar path = new JSM.Path2D ({\r\n\t\t\t\tsegmentation : segmentation,\r\n\t\t\t\toffset : offset,\r\n\t\t\t\tscale : scale\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar parts = commands.split (' ');\r\n\t\t\tvar index = 0;\r\n\t\t\tvar current;\r\n\t\t\twhile (index < parts.length) {\r\n\t\t\t\tcurrent = parts[index++];\r\n\t\t\t\tif (current.length === 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (current == 'm') {\r\n\t\t\t\t\tpath.MoveTo (Num (parts[index + 0]), Num (parts[index + 1]));\r\n\t\t\t\t\tindex += 2;\r\n\t\t\t\t} else if (current == 'l') {\r\n\t\t\t\t\tpath.LineTo (Num (parts[index + 0]), Num (parts[index + 1]));\r\n\t\t\t\t\tindex += 2;\r\n\t\t\t\t} else if (current == 'b') {\r\n\t\t\t\t\tpath.CubicBezierTo (Num (parts[index + 0]), Num (parts[index + 1]), Num (parts[index + 2]), Num (parts[index + 3]), Num (parts[index + 4]), Num (parts[index + 5]));\r\n\t\t\t\t\tindex += 6;\r\n\t\t\t\t} else if (current == 'z') {\r\n\t\t\t\t\tpath.Close ();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tJSM.Message ('Invalid path command found: ' + current);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn path;\r\n\t\t}\r\n\r\n\t\tvar model = new JSM.Model ();\r\n\t\tvar offset = new JSM.Vector2D (0.0, 0.0);\r\n\t\tvar scale = new JSM.Coord2D (fontScale, fontScale);\r\n\t\tvar i, character, glyphs, path, bodies;\r\n\t\tfor (i = 0; i < text.length; i++) {\r\n\t\t\tcharacter = text[i];\r\n\t\t\tglyphs = fontSpec.glyphs[character];\r\n\t\t\tif (glyphs === undefined) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tpath = CreatePathFromSpecification (glyphs.o, fontSegmentation, offset, scale);\r\n\t\t\tbodies = JSM.GeneratePrismsFromPath2D (path, fontHeight, true, 160 * JSM.DegRad);\r\n\t\t\tmodel.AddBodies (bodies);\r\n\t\t\toffset.x += glyphs.ha * scale.x;\r\n\t\t}\r\n\t\treturn model;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extensions/threeviewer/threeconverter',[\"../../core/jsm\"],function(JSM){\r\n\tJSM.ConvertBodyToThreeMeshes = function (body, materials, conversionData)\r\n\t{\r\n\t\tvar theConversionData = {\r\n\t\t\ttextureLoadedCallback : null,\r\n\t\t\thasConvexPolygons : false\r\n\t\t};\r\n\r\n\t\tif (conversionData !== undefined && conversionData !== null) {\r\n\t\t\ttheConversionData.textureLoadedCallback = JSM.ValueOrDefault (conversionData.textureLoadedCallback, theConversionData.textureLoadedCallback);\r\n\t\t\ttheConversionData.hasConvexPolygons = JSM.ValueOrDefault (conversionData.hasConvexPolygons, theConversionData.hasConvexPolygons);\r\n\t\t}\r\n\t\t\r\n\t\tvar meshes = [];\r\n\t\tvar threeGeometry = null;\r\n\t\tvar threeMaterial = null;\r\n\r\n\t\tvar explodeData = {\r\n\t\t\thasConvexPolygons : theConversionData.hasConvexPolygons,\r\n\t\t\tonPointGeometryStart : function (material) {\r\n\t\t\t\t\tthreeMaterial = new JSM.THREE.PointsMaterial ({\r\n\t\t\t\t\t\tcolor : material.diffuse,\r\n\t\t\t\t\t\tsize: material.pointSize\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthreeGeometry = new JSM.THREE.Geometry ();\r\n\t\t\t},\r\n\t\t\tonPointGeometryEnd : function () {\r\n\t\t\t\tvar points = new JSM.THREE.Points (threeGeometry, threeMaterial);\r\n\t\t\t\tmeshes.push (points);\r\n\t\t\t},\r\n\t\t\tonPoint : function (vertex)\t{\r\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex.x, vertex.y, vertex.z));\r\n\t\t\t},\r\n\t\t\tonLineGeometryStart : function (material) {\r\n\t\t\t\tthreeGeometry = new JSM.THREE.Geometry ();\r\n\t\t\t\tthreeMaterial = new JSM.THREE.LineBasicMaterial ({\r\n\t\t\t\t\tcolor : material.diffuse\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tonLineGeometryEnd : function () {\r\n\t\t\t\tvar lines = new JSM.THREE.LineSegments (threeGeometry, threeMaterial);\r\n\t\t\t\tmeshes.push (lines);\r\n\t\t\t},\r\n\t\t\tonLine : function (begVertex, endVertex) {\r\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (begVertex.x, begVertex.y, begVertex.z));\r\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (endVertex.x, endVertex.y, endVertex.z));\r\n\t\t\t},\r\n\t\t\tonGeometryStart : function (material) {\r\n\t\t\t\tvar hasTexture = (material.texture !== null);\r\n\t\t\t\tvar hasOpacity = (material.opacity !== 1.0);\r\n\r\n\t\t\t\tvar diffuse = material.diffuse;\r\n\t\t\t\tvar specular = material.specular;\r\n\t\t\t\tvar shininess = material.shininess;\r\n\t\t\t\tif (shininess === 0.0) {\r\n\t\t\t\t\tspecular = 0x000000;\r\n\t\t\t\t\tshininess = 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthreeMaterial = new JSM.THREE.MeshPhongMaterial ({\r\n\t\t\t\t\tcolor : diffuse,\r\n\t\t\t\t\tspecular : specular,\r\n\t\t\t\t\tshininess : shininess\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!material.singleSided) {\r\n\t\t\t\t\tthreeMaterial.side = JSM.THREE.DoubleSide;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (hasOpacity) {\r\n\t\t\t\t\tthreeMaterial.opacity = material.opacity;\r\n\t\t\t\t\tthreeMaterial.transparent = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (hasTexture) {\r\n\t\t\t\t\tvar theMaterial = threeMaterial;\r\n\t\t\t\t\tvar textureName = material.texture;\r\n\t\t\t\t\tvar loader = new JSM.THREE.TextureLoader ();\r\n\t\t\t\t\tloader.load (textureName, function (texture) {\r\n\t\t\t\t\t\ttexture.image = JSM.ResizeImageToPowerOfTwoSides (texture.image);\r\n\t\t\t\t\t\ttexture.wrapS = JSM.THREE.RepeatWrapping;\r\n\t\t\t\t\t\ttexture.wrapT = JSM.THREE.RepeatWrapping;\r\n\t\t\t\t\t\ttheMaterial.map = texture;\r\n\t\t\t\t\t\ttheMaterial.needsUpdate = true;\r\n\t\t\t\t\t\tif (theConversionData.textureLoadedCallback !== null) {\r\n\t\t\t\t\t\t\ttheConversionData.textureLoadedCallback ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tthreeGeometry = new JSM.THREE.Geometry ();\r\n\t\t\t},\r\n\t\t\tonGeometryEnd : function () {\r\n\t\t\t\tthreeGeometry.computeFaceNormals ();\r\n\t\t\t\tvar mesh = new JSM.THREE.Mesh (threeGeometry, threeMaterial);\r\n\t\t\t\tmeshes.push (mesh);\r\n\t\t\t},\r\n\t\t\tonTriangle : function (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3) {\r\n\t\t\t\tvar lastVertexIndex = threeGeometry.vertices.length;\r\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex1.x, vertex1.y, vertex1.z));\r\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex2.x, vertex2.y, vertex2.z));\r\n\t\t\t\tthreeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex3.x, vertex3.y, vertex3.z));\r\n\t\t\t\tvar face = new JSM.THREE.Face3 (lastVertexIndex + 0, lastVertexIndex + 1, lastVertexIndex + 2);\r\n\t\t\t\tthreeGeometry.faces.push (face);\r\n\t\t\t\t\r\n\t\t\t\tif (normal1 !== null && normal2 !== null && normal3 !== null) {\r\n\t\t\t\t\tvar normalArray = [];\r\n\t\t\t\t\tnormalArray.push (new JSM.THREE.Vector3 (normal1.x, normal1.y, normal1.z));\r\n\t\t\t\t\tnormalArray.push (new JSM.THREE.Vector3 (normal2.x, normal2.y, normal2.z));\r\n\t\t\t\t\tnormalArray.push (new JSM.THREE.Vector3 (normal3.x, normal3.y, normal3.z));\r\n\t\t\t\t\tthreeGeometry.faces[threeGeometry.faces.length - 1].vertexNormals = normalArray;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (uv1 !== null && uv2 !== null && uv3 !== null) {\r\n\t\t\t\t\tvar uvArray = [];\r\n\t\t\t\t\tuvArray.push (new JSM.THREE.Vector2 (uv1.x, -uv1.y));\r\n\t\t\t\t\tuvArray.push (new JSM.THREE.Vector2 (uv2.x, -uv2.y));\r\n\t\t\t\t\tuvArray.push (new JSM.THREE.Vector2 (uv3.x, -uv3.y));\r\n\t\t\t\t\tthreeGeometry.faceVertexUvs[0].push (uvArray);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tJSM.ExplodeBody (body, materials, explodeData);\r\n\t\treturn meshes;\r\n\t};\r\n\r\n\tJSM.ConvertModelToThreeMeshes = function (model, conversionData)\r\n\t{\r\n\t\tvar meshes = [];\r\n\t\tvar materials = model.GetMaterialSet ();\r\n\t\t\r\n\t\tvar i, j, body, currentMeshes;\r\n\t\tfor (i = 0; i < model.BodyCount (); i++) {\r\n\t\t\tbody = model.GetBody (i);\r\n\t\t\tcurrentMeshes = JSM.ConvertBodyToThreeMeshes (body, materials, conversionData);\r\n\t\t\tfor (j = 0; j < currentMeshes.length; j++) {\r\n\t\t\t\tmeshes.push (currentMeshes[j]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn meshes;\r\n\t};\r\n\r\n\tJSM.ConvertJSONDataToThreeMeshes = function (jsonData, textureLoadedCallback, asyncCallbacks)\r\n\t{\r\n\t\tfunction AddMesh (mesh, meshIndex, materials, resultMeshes)\r\n\t\t{\r\n\t\t\tfunction AddTriangles (currentTriangles, vertices, normals, uvs, materials, resultMeshes)\r\n\t\t\t{\r\n\t\t\t\tfunction GetTextureCoordinate (u, v, offset, scale, rotation)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = new JSM.THREE.Vector2 (u, v);\r\n\t\t\t\t\tif (!JSM.IsZero (rotation)) {\r\n\t\t\t\t\t\tvar si = Math.sin (rotation * JSM.DegRad);\r\n\t\t\t\t\t\tvar co = Math.cos (rotation * JSM.DegRad);\r\n\t\t\t\t\t\tresult.x = co * u - si * v;\r\n\t\t\t\t\t\tresult.y = si * u + co * v;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresult.x = offset[0] + result.x * scale[0];\r\n\t\t\t\t\tresult.y = offset[1] + result.y * scale[1];\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tvar materialIndex = currentTriangles.material;\r\n\t\t\t\tvar parameters = currentTriangles.parameters;\r\n\t\t\t\tvar materialData = materials[materialIndex];\r\n\t\t\t\t\r\n\t\t\t\tvar textureName = materialData.texture;\r\n\t\t\t\tvar textureOffset = materialData.offset;\r\n\t\t\t\tvar textureScale = materialData.scale;\r\n\t\t\t\tvar textureRotation = materialData.rotation;\r\n\t\t\t\t\r\n\t\t\t\tvar diffuseColor = new JSM.THREE.Color ();\r\n\t\t\t\tvar specularColor = new JSM.THREE.Color ();\r\n\t\t\t\tvar shininess = materialData.shininess || 0.0;\r\n\r\n\t\t\t\tdiffuseColor.setRGB (materialData.diffuse[0], materialData.diffuse[1], materialData.diffuse[2]);\r\n\t\t\t\tspecularColor.setRGB (materialData.specular[0], materialData.specular[1], materialData.specular[2]);\r\n\r\n\t\t\t\tif (textureName !== undefined && textureName !== null) {\r\n\t\t\t\t\tdiffuseColor.setRGB (1.0, 1.0, 1.0);\r\n\t\t\t\t\tspecularColor.setRGB (1.0, 1.0, 1.0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (textureOffset === undefined || textureOffset === null) {\r\n\t\t\t\t\t\ttextureOffset = [0.0, 0.0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textureScale === undefined || textureScale === null) {\r\n\t\t\t\t\t\ttextureScale = [1.0, 1.0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (textureRotation === undefined || textureRotation === null) {\r\n\t\t\t\t\t\ttextureRotation = 0.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (shininess === 0.0) {\r\n\t\t\t\t\tspecularColor.setRGB (0.0, 0.0, 0.0);\r\n\t\t\t\t\tshininess = 1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar material = new JSM.THREE.MeshPhongMaterial ({\r\n\t\t\t\t\t\tcolor : diffuseColor.getHex (),\r\n\t\t\t\t\t\tspecular : specularColor.getHex (),\r\n\t\t\t\t\t\tshininess : shininess,\r\n\t\t\t\t\t\tside : JSM.THREE.DoubleSide\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (materialData.opacity !== 1.0) {\r\n\t\t\t\t\tmaterial.opacity = materialData.opacity;\r\n\t\t\t\t\tmaterial.transparent = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (textureName !== undefined && textureName !== null) {\r\n\t\t\t\t\tvar loader = new JSM.THREE.TextureLoader ();\r\n\t\t\t\t\tvar theMaterial = material;\r\n\t\t\t\t\tloader.load (textureName, function (texture) {\r\n\t\t\t\t\t\ttexture.image = JSM.ResizeImageToPowerOfTwoSides (texture.image);\r\n\t\t\t\t\t\ttexture.wrapS = JSM.THREE.RepeatWrapping;\r\n\t\t\t\t\t\ttexture.wrapT = JSM.THREE.RepeatWrapping;\r\n\t\t\t\t\t\ttheMaterial.map = texture;\r\n\t\t\t\t\t\ttheMaterial.needsUpdate = true;\r\n\t\t\t\t\t\tif (textureLoadedCallback !== undefined && textureLoadedCallback !== null) {\r\n\t\t\t\t\t\t\ttextureLoadedCallback ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar geometry = new JSM.THREE.Geometry ();\r\n\r\n\t\t\t\tvar v1, v2, v3, n1, n2, n3, u1, u2, u3;\r\n\t\t\t\tvar lastVertex, lastFace, vertexNormals, textureUVs;\r\n\t\t\t\tvar j;\r\n\t\t\t\tfor (j = 0; j < parameters.length; j += 9) {\r\n\t\t\t\t\tv1 = 3 * parameters[j + 0];\r\n\t\t\t\t\tv2 = 3 * parameters[j + 1];\r\n\t\t\t\t\tv3 = 3 * parameters[j + 2];\r\n\t\t\t\t\tn1 = 3 * parameters[j + 3];\r\n\t\t\t\t\tn2 = 3 * parameters[j + 4];\r\n\t\t\t\t\tn3 = 3 * parameters[j + 5];\r\n\t\t\t\t\tu1 = 2 * parameters[j + 6];\r\n\t\t\t\t\tu2 = 2 * parameters[j + 7];\r\n\t\t\t\t\tu3 = 2 * parameters[j + 8];\r\n\t\t\t\t\t\r\n\t\t\t\t\tlastVertex = geometry.vertices.length;\r\n\t\t\t\t\tlastFace = geometry.faces.length;\r\n\t\t\t\t\t\r\n\t\t\t\t\tgeometry.vertices.push (new JSM.THREE.Vector3 (vertices[v1 + 0], vertices[v1 + 1], vertices[v1 + 2]));\r\n\t\t\t\t\tgeometry.vertices.push (new JSM.THREE.Vector3 (vertices[v2 + 0], vertices[v2 + 1], vertices[v2 + 2]));\r\n\t\t\t\t\tgeometry.vertices.push (new JSM.THREE.Vector3 (vertices[v3 + 0], vertices[v3 + 1], vertices[v3 + 2]));\r\n\t\t\t\t\tgeometry.faces.push (new JSM.THREE.Face3 (lastVertex + 0, lastVertex + 1, lastVertex + 2));\r\n\r\n\t\t\t\t\tvertexNormals = [];\r\n\t\t\t\t\tvertexNormals.push (new JSM.THREE.Vector3 (normals[n1 + 0], normals[n1 + 1], normals[n1 + 2]));\r\n\t\t\t\t\tvertexNormals.push (new JSM.THREE.Vector3 (normals[n2 + 0], normals[n2 + 1], normals[n2 + 2]));\r\n\t\t\t\t\tvertexNormals.push (new JSM.THREE.Vector3 (normals[n3 + 0], normals[n3 + 1], normals[n3 + 2]));\r\n\t\t\t\t\tgeometry.faces[lastFace].vertexNormals = vertexNormals;\r\n\r\n\t\t\t\t\tif (textureName !== undefined && textureName !== null) {\r\n\t\t\t\t\t\ttextureUVs = [];\r\n\t\t\t\t\t\ttextureUVs.push (GetTextureCoordinate (uvs[u1 + 0], uvs[u1 + 1], textureOffset, textureScale, textureRotation));\r\n\t\t\t\t\t\ttextureUVs.push (GetTextureCoordinate (uvs[u2 + 0], uvs[u2 + 1], textureOffset, textureScale, textureRotation));\r\n\t\t\t\t\t\ttextureUVs.push (GetTextureCoordinate (uvs[u3 + 0], uvs[u3 + 1], textureOffset, textureScale, textureRotation));\r\n\t\t\t\t\t\tgeometry.faceVertexUvs[0].push (textureUVs);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar mesh = new JSM.THREE.Mesh (geometry, material);\r\n\t\t\t\tmesh.originalJsonMaterialIndex = materialIndex;\r\n\t\t\t\tmesh.originalJsonMeshIndex = meshIndex;\r\n\t\t\t\tresultMeshes.push (mesh);\r\n\t\t\t}\r\n\r\n\t\t\tvar vertices = mesh.vertices;\r\n\t\t\tif (vertices === undefined) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar normals = mesh.normals;\r\n\t\t\tif (normals === undefined) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar uvs = mesh.uvs;\r\n\t\t\tif (uvs === undefined) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tvar triangles = mesh.triangles;\r\n\t\t\tvar i;\r\n\t\t\tfor (i = 0; i < triangles.length; i++) {\r\n\t\t\t\tAddTriangles (triangles[i], vertices, normals, uvs, materials, resultMeshes);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar resultMeshes = [];\r\n\r\n\t\tvar materials = jsonData.materials;\r\n\t\tif (materials === undefined) {\r\n\t\t\treturn resultMeshes;\r\n\t\t}\r\n\t\t\r\n\t\tvar meshes = jsonData.meshes;\r\n\t\tif (meshes === undefined) {\r\n\t\t\treturn resultMeshes;\r\n\t\t}\r\n\t\t\r\n\t\tvar i = 0;\r\n\t\tJSM.AsyncRunTask (\r\n\t\t\tfunction () {\r\n\t\t\t\tAddMesh (meshes[i], i, materials, resultMeshes);\r\n\t\t\t\ti = i + 1;\r\n\t\t\t\treturn true;\r\n\t\t\t},\r\n\t\t\tasyncCallbacks,\r\n\t\t\tmeshes.length, 0, resultMeshes\r\n\t\t);\r\n\r\n\t\treturn resultMeshes;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/extensions/threeviewer/threeviewer',[\"../../core/jsm\"],function(JSM){\r\n\tJSM.ThreeViewer = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\t\r\n\t\tthis.scene = null;\r\n\t\tthis.camera = null;\r\n\t\tthis.renderer = null;\r\n\t\tthis.ambientLight = null;\r\n\t\tthis.directionalLight = null;\r\n\t\tthis.runBeforeRender = null;\r\n\t\tthis.runAfterRender = null;\r\n\r\n\t\tthis.cameraMove = null;\r\n\t\tthis.navigation = null;\r\n\t\tthis.settings = null;\r\n\t\tthis.drawLoop = null;\r\n\t\tthis.enableDraw = null;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.Start = function (canvas, settings)\r\n\t{\r\n\t\tif (!JSM.IsWebGLEnabled ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitSettings (settings)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tif (!this.InitThree (canvas)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitCamera (settings)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.InitLights ()) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tthis.drawLoop = false;\r\n\t\tthis.enableDraw = true;\r\n\t\tthis.DrawIfNeeded ();\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.InitSettings = function (settings)\r\n\t{\r\n\t\tthis.settings = {\r\n\t\t\tcameraEyePosition : new JSM.Coord (1.0, 1.0, 1.0),\r\n\t\t\tcameraCenterPosition : new JSM.Coord (0.0, 0.0, 0.0),\r\n\t\t\tcameraUpVector : new JSM.Coord (0.0, 0.0, 1.0),\r\n\t\t\tlightAmbientColor : [0.5, 0.5, 0.5],\r\n\t\t\tlightDiffuseColor : [0.5, 0.5, 0.5]\r\n\t\t};\r\n\r\n\t\tif (settings !== undefined) {\r\n\t\t\tif (settings.cameraEyePosition !== undefined) { this.settings.cameraEyePosition = JSM.CoordFromArray (settings.cameraEyePosition); }\r\n\t\t\tif (settings.cameraCenterPosition !== undefined) { this.settings.cameraCenterPosition = JSM.CoordFromArray (settings.cameraCenterPosition); }\r\n\t\t\tif (settings.cameraUpVector !== undefined) { this.settings.cameraUpVector = JSM.CoordFromArray (settings.cameraUpVector); }\r\n\t\t\tif (settings.lightAmbientColor !== undefined) { this.settings.lightAmbientColor = settings.lightAmbientColor; }\r\n\t\t\tif (settings.lightDiffuseColor !== undefined) { this.settings.lightDiffuseColor = settings.lightDiffuseColor; }\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.InitThree = function (canvas)\r\n\t{\r\n\t\tthis.canvas = canvas;\r\n\t\tif (!this.canvas || !this.canvas.getContext) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.scene = new JSM.THREE.Scene();\r\n\t\tif (!this.scene) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar parameters = {\r\n\t\t\tcanvas : this.canvas,\r\n\t\t\tantialias : true\r\n\t\t};\r\n\t\tthis.renderer = new JSM.THREE.WebGLRenderer (parameters);\r\n\t\tif (!this.renderer) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tthis.renderer.setClearColor (new JSM.THREE.Color (0xffffff));\r\n\t\tthis.renderer.setSize (this.canvas.width, this.canvas.height);\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.InitCamera = function (settings)\r\n\t{\r\n\t\tthis.cameraMove = new JSM.Camera (\r\n\t\t\tJSM.CoordFromArray (settings.cameraEyePosition),\r\n\t\t\tJSM.CoordFromArray (settings.cameraCenterPosition),\r\n\t\t\tJSM.CoordFromArray (settings.cameraUpVector),\r\n\t\t\tsettings.fieldOfView,\r\n\t\t\tsettings.nearClippingPlane,\r\n\t\t\tsettings.farClippingPlane\r\n\t\t);\r\n\t\tif (!this.cameraMove) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.navigation = new JSM.Navigation ();\r\n\t\tif (!this.navigation.Init (this.canvas, this.cameraMove, this.DrawIfNeeded.bind (this), this.Resize.bind (this))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tthis.camera = new JSM.THREE.PerspectiveCamera (this.cameraMove.fieldOfView, this.canvas.width / this.canvas.height, this.cameraMove.nearClippingPlane, this.cameraMove.farClippingPlane);\r\n\t\tif (!this.camera) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tthis.scene.add (this.camera);\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.InitLights = function ()\r\n\t{\r\n\t\tvar ambientColor = new JSM.THREE.Color ();\r\n\t\tvar diffuseColor = new JSM.THREE.Color ();\r\n\t\tambientColor.setRGB (this.settings.lightAmbientColor[0], this.settings.lightAmbientColor[1], this.settings.lightAmbientColor[2]);\r\n\t\tdiffuseColor.setRGB (this.settings.lightDiffuseColor[0], this.settings.lightDiffuseColor[1], this.settings.lightDiffuseColor[2]);\r\n\r\n\t\tthis.ambientLight = new JSM.THREE.AmbientLight (ambientColor.getHex ());\r\n\t\tif (!this.ambientLight) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tthis.scene.add (this.ambientLight);\r\n\t\t\r\n\t\tthis.directionalLight = new JSM.THREE.DirectionalLight (diffuseColor.getHex ());\r\n\t\tif (!this.directionalLight) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar lightPosition = new JSM.THREE.Vector3 ().subVectors (this.cameraMove.eye, this.cameraMove.center);\r\n\t\tthis.directionalLight.position.set (lightPosition.x, lightPosition.y, lightPosition.z);\r\n\r\n\t\tthis.scene.add (this.directionalLight);\r\n\t\treturn true;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.SetRunBeforeRender = function (runBeforeRender)\r\n\t{\r\n\t\tthis.runBeforeRender = runBeforeRender;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.SetRunAfterRender = function (runAfterRender)\r\n\t{\r\n\t\tthis.runAfterRender = runAfterRender;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.SetClearColor = function (color)\r\n\t{\r\n\t\tthis.renderer.setClearColor (new JSM.THREE.Color (color));\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.AddMesh = function (mesh)\r\n\t{\r\n\t\tthis.scene.add (mesh);\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.AddMeshes = function (meshes)\r\n\t{\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < meshes.length; i++) {\r\n\t\t\tthis.scene.add (meshes[i]);\r\n\t\t}\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.MeshCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (myThis.IsRelevantObject (current)) {\r\n\t\t\t\tcount = count + 1;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn count;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.VisibleMeshCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (myThis.IsVisibleObject (current)) {\r\n\t\t\t\tcount = count + 1;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn count;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.VertexCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (myThis.IsRelevantObject (current)) {\r\n\t\t\t\tcount = count + current.geometry.vertices.length;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn count;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.FaceCount = function ()\r\n\t{\r\n\t\tvar count = 0;\r\n\t\t\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (current instanceof JSM.THREE.Mesh) {\r\n\t\t\t\tcount = count + current.geometry.faces.length;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\treturn count;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetMesh = function (index)\r\n\t{\r\n\t\tvar current = null;\r\n\t\tvar currIndex = 0;\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.scene.children.length; i++) {\r\n\t\t\tcurrent = this.scene.children[i];\r\n\t\t\tif (this.IsRelevantObject (current)) {\r\n\t\t\t\tif (currIndex == index) {\r\n\t\t\t\t\treturn current;\r\n\t\t\t\t}\r\n\t\t\t\tcurrIndex = currIndex + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn null;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.ShowMesh = function (mesh)\r\n\t{\r\n\t\tmesh.visible = true;\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.HideMesh = function (mesh)\r\n\t{\r\n\t\tmesh.visible = false;\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.RemoveMesh = function (mesh)\r\n\t{\r\n\t\tmesh.geometry.dispose ();\r\n\t\tthis.scene.remove (mesh);\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.RemoveMeshes = function ()\r\n\t{\r\n\t\tvar current;\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.scene.children.length; i++) {\r\n\t\t\tcurrent = this.scene.children[i];\r\n\t\t\tif (this.IsRelevantObject (current)) {\r\n\t\t\t\tcurrent.geometry.dispose ();\r\n\t\t\t\tthis.scene.remove (current);\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.RemoveLastMesh = function ()\r\n\t{\r\n\t\tvar found = null;\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (myThis.IsRelevantObject (current)) {\r\n\t\t\t\tfound = current;\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tif (found !== null) {\r\n\t\t\tthis.scene.remove (found);\r\n\t\t}\r\n\t\t\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.SetCamera = function (eye, center, up)\r\n\t{\r\n\t\tthis.navigation.SetCamera (eye, center, up);\r\n\t\tthis.navigation.SetOrbitCenter (center.Clone ());\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.Resize = function ()\r\n\t{\r\n\t\tthis.camera.aspect = this.canvas.width / this.canvas.height;\r\n\t\tthis.camera.updateProjectionMatrix ();\r\n\t\tthis.renderer.setSize (this.canvas.width, this.canvas.height);\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tif (this.VisibleMeshCount () === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar sphere = this.GetBoundingSphere ();\r\n\t\tthis.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.FitMeshesInWindow = function (meshes)\r\n\t{\r\n\t\tif (meshes.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar sphere = this.GetFilteredBoundingSphere (function (obj) {\r\n\t\t\treturn meshes.indexOf (obj) != -1;\r\n\t\t});\r\n\t\tthis.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());\r\n\t\tthis.DrawIfNeeded ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.AdjustClippingPlanes = function (radiusLimit)\r\n\t{\r\n\t\tvar sphere = this.GetBoundingSphere ();\r\n\t\tif (sphere.GetRadius () < radiusLimit) {\r\n\t\t\tthis.camera.near = 0.1;\r\n\t\t\tthis.camera.far = 1000.0;\r\n\t\t} else {\r\n\t\t\tthis.camera.near = 10.0;\r\n\t\t\tthis.camera.far = 1000000.0;\r\n\t\t}\r\n\t\tthis.camera.updateProjectionMatrix ();\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetCenter = function ()\r\n\t{\r\n\t\tvar myThis = this;\r\n\t\treturn this.GetFilteredCenter (function (obj) {\r\n\t\t\treturn myThis.IsVisibleObject (obj);\r\n\t\t});\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetBoundingBox = function ()\r\n\t{\r\n\t\tvar myThis = this;\r\n\t\treturn this.GetFilteredBoundingBox (function (obj) {\r\n\t\t\treturn myThis.IsVisibleObject (obj);\r\n\t\t});\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetBoundingSphere = function ()\r\n\t{\r\n\t\tvar myThis = this;\r\n\t\treturn this.GetFilteredBoundingSphere (function (obj) {\r\n\t\t\treturn myThis.IsVisibleObject (obj);\r\n\t\t});\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetFilteredCenter = function (needToProcess)\r\n\t{\r\n\t\tvar boundingBox = this.GetFilteredBoundingBox (needToProcess);\r\n\t\treturn boundingBox.GetCenter ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetFilteredBoundingBox = function (needToProcess)\r\n\t{\r\n\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\t\t\r\n\t\tvar geometry, coord;\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (needToProcess (current)) {\r\n\t\t\t\tgeometry = current.geometry;\r\n\t\t\t\tvar j;\r\n\t\t\t\tfor (j = 0; j < geometry.vertices.length; j++) {\r\n\t\t\t\t\tcoord = geometry.vertices[j].clone ();\r\n\t\t\t\t\tcoord.add (current.position);\r\n\t\t\t\t\tmin.x = JSM.Minimum (min.x, coord.x);\r\n\t\t\t\t\tmin.y = JSM.Minimum (min.y, coord.y);\r\n\t\t\t\t\tmin.z = JSM.Minimum (min.z, coord.z);\r\n\t\t\t\t\tmax.x = JSM.Maximum (max.x, coord.x);\r\n\t\t\t\t\tmax.y = JSM.Maximum (max.y, coord.y);\r\n\t\t\t\t\tmax.z = JSM.Maximum (max.z, coord.z);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn new JSM.Box (min, max);\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetFilteredBoundingSphere = function (needToProcess)\r\n\t{\r\n\t\tvar center = this.GetFilteredCenter (needToProcess);\r\n\t\tvar radius = 0.0;\r\n\r\n\t\tvar geometry, coord, distance;\r\n\t\tthis.scene.traverse (function (current) {\r\n\t\t\tif (needToProcess (current)) {\r\n\t\t\t\tgeometry = current.geometry;\r\n\t\t\t\tvar j;\r\n\t\t\t\tfor (j = 0; j < geometry.vertices.length; j++) {\r\n\t\t\t\t\tcoord = geometry.vertices[j].clone ();\r\n\t\t\t\t\tcoord.add (current.position);\r\n\t\t\t\t\tdistance = center.DistanceTo (new JSM.Coord (coord.x, coord.y, coord.z));\r\n\t\t\t\t\tif (JSM.IsGreater (distance, radius)) {\r\n\t\t\t\t\t\tradius = distance;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tvar sphere = new JSM.Sphere (center, radius);\r\n\t\treturn sphere;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetObjectsUnderPosition = function (x, y)\r\n\t{\r\n\t\tvar mouseX = (x / this.canvas.width) * 2 - 1;\r\n\t\tvar mouseY = -(y / this.canvas.height) * 2 + 1;\r\n\r\n\t\tvar cameraPosition = this.camera.position;\r\n\t\tvar vector = new JSM.THREE.Vector3 (mouseX, mouseY, 0.5);\r\n\t\tvector.unproject (this.camera);\r\n\t\tvector.sub (cameraPosition);\r\n\t\tvector.normalize ();\r\n\r\n\t\tvar ray = new JSM.THREE.Raycaster (cameraPosition, vector);\r\n\t\treturn ray.intersectObjects (this.scene.children);\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetObjectsUnderMouse = function ()\r\n\t{\r\n\t\treturn this.GetObjectsUnderPosition (this.navigation.mouse.curr.x, this.navigation.mouse.curr.y);\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.GetObjectsUnderTouch = function ()\r\n\t{\r\n\t\treturn this.GetObjectsUnderPosition (this.navigation.touch.curr.x, this.navigation.touch.curr.y);\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.ProjectVector = function (x, y, z)\r\n\t{\r\n\t\tvar width = this.canvas.width;\r\n\t\tvar height = this.canvas.height;\r\n\t\tvar halfWidth = width / 2;\r\n\t\tvar halfHeight = height / 2;\r\n\r\n\t\tvar vector = new JSM.THREE.Vector3 (x, y, z);\r\n\t\tvector.project (this.camera);\r\n\t\tvector.x = (vector.x * halfWidth) + halfWidth;\r\n\t\tvector.y = -(vector.y * halfHeight) + halfHeight;\r\n\t\treturn vector;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.EnableDraw = function (enable)\r\n\t{\r\n\t\tthis.enableDraw = enable;\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.Draw = function ()\r\n\t{\r\n\t\tif (!this.enableDraw) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.runBeforeRender !== null) {\r\n\t\t\tthis.runBeforeRender ();\r\n\t\t}\r\n\r\n\t\tthis.camera.position.set (this.cameraMove.eye.x, this.cameraMove.eye.y, this.cameraMove.eye.z);\r\n\t\tthis.camera.up.set (this.cameraMove.up.x, this.cameraMove.up.y, this.cameraMove.up.z);\r\n\t\tthis.camera.lookAt (new JSM.THREE.Vector3 (this.cameraMove.center.x, this.cameraMove.center.y, this.cameraMove.center.z));\r\n\r\n\t\tvar lightPosition = new JSM.THREE.Vector3 ().subVectors (this.cameraMove.eye, this.cameraMove.center);\r\n\t\tthis.directionalLight.position.set (lightPosition.x, lightPosition.y, lightPosition.z);\r\n\r\n\t\tthis.renderer.render (this.scene, this.camera);\r\n\t\t\r\n\t\tif (this.runAfterRender !== null) {\r\n\t\t\tthis.runAfterRender ();\r\n\t\t}\r\n\t\t\r\n\t\tif (this.drawLoop) {\r\n\t\t\trequestAnimationFrame (this.Draw.bind (this));\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.DrawIfNeeded = function ()\r\n\t{\r\n\t\tif (!this.drawLoop) {\r\n\t\t\tthis.Draw ();\r\n\t\t}\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.StartDrawLoop = function ()\r\n\t{\r\n\t\tthis.drawLoop = true;\r\n\t\tthis.Draw ();\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.IsRelevantObject = function (threeObj)\r\n\t{\r\n\t\treturn (threeObj instanceof JSM.THREE.Mesh || threeObj instanceof JSM.THREE.LineSegments || threeObj instanceof JSM.THREE.Points);\r\n\t};\r\n\r\n\tJSM.ThreeViewer.prototype.IsVisibleObject = function (threeObj)\r\n\t{\r\n\t\treturn this.IsRelevantObject (threeObj) && threeObj.visible;\r\n\t};\r\n\r\n\treturn JSM;\r\n});\r\n\ndefine('skylark-jsmodeler/main',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./core/jsm\",\r\n\t\"./core/timer\",\r\n\t\"./core/algorithm\",\r\n\t\"./core/async\",\r\n\t\"./core/check\",\r\n\t\"./core/jsonloader\",\r\n\t\"./geometry/definitions\",\r\n\t\"./geometry/coord2d\",\r\n\t\"./geometry/coord\",\r\n\t\"./geometry/determinant\",\r\n\t\"./geometry/coordutils\",\r\n\t\"./geometry/matrix\",\r\n\t\"./geometry/coordsystem\",\r\n\t\"./geometry/sector\",\r\n\t\"./geometry/line\",\r\n\t\"./geometry/box\",\r\n\t\"./geometry/sphere\",\r\n\t\"./geometry/transformation\",\r\n\t\"./geometry/plane\",\r\n\t\"./geometry/projection\",\r\n\t\"./geometry/convexhull\",\r\n\t\"./geometry/polygon2d\",\r\n\t\"./geometry/polygon\",\r\n\t\"./geometry/cutpolygon\",\r\n\t\"./geometry/triangulation\",\r\n\t\"./geometry/octree\",\r\n\t\"./geometry/bsptree\",\r\n\t\"./geometry/curves\",\r\n\t\"./geometry/utilities\",\r\n\t\"./geometry/ray\",\r\n\t\"./geometry/path\",\r\n\t\"./modeler/color\",\r\n\t\"./modeler/material\",\r\n\t\"./modeler/materialset\",\r\n\t\"./modeler/body\",\r\n\t\"./modeler/model\",\r\n\t\"./modeler/adjacencyinfo\",\r\n\t\"./modeler/bodyutils\",\r\n\t\"./modeler/textureutils\",\r\n\t\"./modeler/cututils\",\r\n\t\"./modeler/generator\",\r\n\t\"./modeler/camera\",\r\n\t\"./modeler/explode\",\r\n\t\"./modeler/exporter\",\r\n\t\"./modeler/trianglebody\",\r\n\t\"./modeler/trianglemodel\",\r\n\t\"./modeler/converter\",\r\n\t\"./modeler/rayutils\",\r\n\t\"./import/binaryreader\",\r\n\t\"./import/importerutils\",\r\n\t\"./import/importer3ds\",\r\n\t\"./import/importerobj\",\r\n\t\"./import/importerstl\",\r\n\t\"./import/importeroff\",\r\n\t\"./import/importercommon\",\r\n\t\"./renderer/webglutils\",\r\n\t\"./renderer/renderlight\",\r\n\t\"./renderer/rendermaterial\",\r\n\t\"./renderer/rendermesh\",\r\n\t\"./renderer/renderbody\",\r\n\t\"./renderer/shaderprogram\",\r\n\t\"./renderer/renderer\",\r\n\t\"./renderer/pointcloudrenderer\",\r\n\t\"./renderer/renderconverter\",\r\n\t\"./viewer/mouse\",\r\n\t\"./viewer/touch\",\r\n\t\"./viewer/painter\",\r\n\t\"./viewer/drawing\",\r\n\t\"./viewer/navigation\",\r\n\t\"./viewer/softwareviewer\",\r\n\t\"./viewer/spriteviewer\",\r\n\t\"./viewer/viewer\",\r\n\t\"./viewer/pointcloudviewer\",\r\n\t\"./extras/solidgenerator\",\r\n\t\"./extras/extgenerator\",\r\n\t\"./extras/subdivision\",\r\n\t\"./extras/csg\",\r\n\t\"./extras/surfaces\",\r\n\t\"./extensions/svgtomodel/svgtomodel\",\r\n\t\"./extensions/textgenerator/textgenerator\",\r\n\t\"./extensions/threeviewer/threeconverter\",\r\n\t\"./extensions/threeviewer/threeviewer\"\r\n\r\n],function(skylark,jsm){\r\n\treturn skylark.attach(\"intg.jsmodeler\",jsm);\r\n});\ndefine('skylark-jsmodeler', ['skylark-jsmodeler/main'], function (main) { return main; });\n\ndefine('skylark-online3dviewer/InfoTable',[\r\n\t\"skylark-jquery\"\r\n],function($){\r\n\tvar InfoTable = function (parent)\r\n\t{\r\n\t\tthis.table = $('<table>').addClass ('infotable').appendTo (parent);\r\n\t};\r\n\r\n\tInfoTable.prototype.AddRow = function (name, value)\r\n\t{\r\n\t\tvar tableRow = $('<tr>').appendTo (this.table);\r\n\t\t$('<td>').html (name).appendTo (tableRow);\r\n\t\t$('<td>').html (value).appendTo (tableRow);\r\n\t};\r\n\r\n\tInfoTable.prototype.AddColorRow = function (name, color)\r\n\t{\r\n\t\tvar tableRow = $('<tr>').appendTo (this.table);\r\n\t\t$('<td>').html (name).appendTo (tableRow);\r\n\r\n\t\tvar valueColumn = document.createElement ('td');\r\n\t\tvar valueColumn = $('<td>').appendTo (tableRow);\r\n\t\t\r\n\t\tvar colorDiv = $('<div>').addClass ('colorbutton').appendTo (valueColumn);\r\n\t\tcolorDiv.attr ('title', '(' + color[0] + ', ' + color[1] + ', ' + color[2] + ')');\r\n\t\tvar hexColor = JSM.RGBComponentsToHexColor (color[0] * 255.0, color[1] * 255.0, color[2] * 255.0);\r\n\t\tvar colorString = hexColor.toString (16);\r\n\t\twhile (colorString.length < 6) {\r\n\t\t\tcolorString = '0' + colorString;\r\n\t\t}\r\n\t\tcolorDiv.css ('background', '#' + colorString);\r\n\t};\r\n\r\n\treturn InfoTable;\t\r\n});\ndefine('skylark-online3dviewer/FloatingControl',[\r\n\t\"skylark-jquery\"\r\n],function($){\r\n\tvar FloatingControl = function ()\r\n\t{\r\n\t\tthis.parent = null;\r\n\t\tthis.controlDiv = null;\r\n\t\tthis.contentDiv = null;\r\n\t};\r\n\r\n\tFloatingControl.prototype.Open = function (parameters)\r\n\t{\r\n\t\tif (this.controlDiv !== null) {\r\n\t\t\tthis.Close ();\r\n\t\t}\r\n\t\tthis.parent = parameters.parent;\r\n\t\tthis.controlDiv = $('<div>').addClass ('control').appendTo ($('body'));\r\n\t\tthis.contentDiv = $('<div>').addClass ('controlcontent').html (parameters.text).appendTo (this.controlDiv);\t\r\n\t\tthis.Resize ();\r\n\t};\r\n\r\n\tFloatingControl.prototype.Close = function ()\r\n\t{\r\n\t\tif (this.controlDiv === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.controlDiv.remove ();\r\n\t\tthis.controlDiv = null;\r\n\t};\r\n\r\n\tFloatingControl.prototype.Resize = function ()\r\n\t{\r\n\t\tif (this.controlDiv === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.controlDiv.css ('left', (this.parent.offset ().left + (this.parent.width () - this.controlDiv.width ()) / 2.0) + 'px');\r\n\t\tthis.controlDiv.css ('top', (this.parent.offset ().top + (this.parent.height () - this.controlDiv.height ()) / 3.0) + 'px');\r\n\t};\r\n\r\n\treturn FloatingControl;\t\r\n});\ndefine('skylark-online3dviewer/FloatingDialog',[\r\n\t\"skylark-jquery\"\r\n],function($){\r\n\tvar FloatingDialog = function ()\r\n\t{\r\n\t\tthis.dialogDiv = null;\r\n\t\tthis.contentDiv = null;\r\n\t};\r\n\r\n\tFloatingDialog.prototype.Open = function (parameters)\r\n\t{\r\n\t\tfunction AddButton (dialog, parent, button)\r\n\t\t{\r\n\t\t\tvar buttonDiv = $('<div>').addClass ('dialogbutton').html (button.text).appendTo (parent);\r\n\t\t\tbuttonDiv.click (function () {\r\n\t\t\t\tbutton.callback (dialog);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (this.dialogDiv !== null) {\r\n\t\t\tthis.Close ();\r\n\t\t}\r\n\r\n\t\tthis.dialogDiv = $('<div>').addClass ('dialog').appendTo ($('body'));\r\n\t\t$('<div>').addClass ('dialogtitle').html (parameters.title).appendTo (this.dialogDiv);\r\n\t\tthis.contentDiv = $('<div>').addClass ('dialogcontent').appendTo (this.dialogDiv);\r\n\t\tif (parameters.text !== null && parameters.text !== undefined) {\r\n\t\t\tthis.contentDiv.html (parameters.text);\r\n\t\t}\r\n\t\tvar buttonsDiv = $('<div>').addClass ('dialogbuttons').appendTo (this.dialogDiv);\r\n\r\n\t\tvar i, button;\r\n\t\tfor (i = 0; i < parameters.buttons.length; i++) {\r\n\t\t\tbutton = parameters.buttons[i];\r\n\t\t\tAddButton (this, buttonsDiv, button);\r\n\t\t}\r\n\r\n\t\tdocument.addEventListener ('click', this.MouseClick.bind (this), true);\r\n\t\tthis.Resize ();\r\n\t};\r\n\r\n\tFloatingDialog.prototype.Close = function ()\r\n\t{\r\n\t\tif (this.dialogDiv === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.dialogDiv.remove ();\r\n\t\tthis.dialogDiv = null;\r\n\t\t$('body').unbind ('click');\r\n\t};\r\n\r\n\tFloatingDialog.prototype.GetContentDiv = function ()\r\n\t{\r\n\t\treturn this.contentDiv;\r\n\t};\r\n\r\n\tFloatingDialog.prototype.Resize = function ()\r\n\t{\r\n\t\tif (this.dialogDiv === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.dialogDiv.css ('left', ((document.body.clientWidth - this.dialogDiv.width ()) / 2.0) + 'px');\r\n\t\tthis.dialogDiv.css ('top', ((document.body.clientHeight - this.dialogDiv.height ()) / 3.0) + 'px');\r\n\t};\r\n\r\n\tFloatingDialog.prototype.MouseClick = function (clickEvent)\r\n\t{\r\n\t\tif (this.dialogDiv === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar dialogClicked = false;\r\n\t\tvar target = clickEvent.target;\r\n\t\twhile (target !== null) {\r\n\t\t\tif (target === this.dialogDiv.get ()[0]) {\r\n\t\t\t\tdialogClicked = true;\r\n\t\t\t}\r\n\t\t\ttarget = target.parentElement;\r\n\t\t}\r\n\t\t\r\n\t\tif (!dialogClicked) {\r\n\t\t\tthis.Close ();\r\n\t\t}\r\n\t};\r\n\r\n\treturn FloatingDialog;\r\n});\ndefine('skylark-online3dviewer/ExtensionInterface',[],function(){\r\n\tvar ExtensionInterface = function (app)\r\n\t{\r\n\t\tthis.app = app;\r\n\t};\r\n\r\n\tExtensionInterface.prototype.GetButtonsDiv = function ()\r\n\t{\r\n\t\treturn this.app.extensionButtons.GetButtonsDiv ();\r\n\t};\r\n\r\n\tExtensionInterface.prototype.GetModelJson = function ()\r\n\t{\r\n\t\treturn this.app.viewer.GetJsonData ();\r\n\t};\r\n\r\n\treturn ExtensionInterface;\t\r\n});\ndefine('skylark-online3dviewer/ExtensionButtons',[\r\n\t\"skylark-jquery\"\r\n],function($){\r\n\tvar ExtensionButtons = function (parent)\r\n\t{\r\n\t\tthis.buttonsDiv = $('<div>').attr ('id', 'extbuttons').appendTo (parent);\r\n\t};\r\n\r\n\tExtensionButtons.prototype.GetButtonsDiv = function ()\r\n\t{\r\n\t\treturn this.buttonsDiv;\r\n\t};\r\n\t\r\n\treturn ExtensionButtons;\t\r\n});\ndefine('skylark-online3dviewer/ImporterProgressBar',[\r\n\t\"skylark-jquery\"\r\n],function($){\r\n\tvar ImporterProgressBar = function (parent)\r\n\t{\r\n\t\tthis.parent = parent;\r\n\t\tthis.borderDiv = null;\r\n\t\tthis.contentDiv = null;\r\n\t\tthis.maxCount = null;\r\n\t\tthis.maxWidth = null;\r\n\t};\r\n\r\n\tImporterProgressBar.prototype.Init = function (maxCount)\r\n\t{\r\n\t\tthis.borderDiv = $('<div>').addClass ('progressbarborder').appendTo (this.parent);\r\n\t\tthis.contentDiv = $('<div>').addClass ('progressbarcontent').appendTo (this.borderDiv);\r\n\r\n\t\tthis.maxCount = maxCount;\r\n\t\tthis.maxWidth = this.borderDiv.width ();\r\n\t\tthis.Step (0);\r\n\t};\r\n\r\n\tImporterProgressBar.prototype.Step = function (count)\r\n\t{\r\n\t\tvar step = this.maxWidth / this.maxCount;\r\n\t\tvar width = count * step;\r\n\t\tif (count == this.maxCount) {\r\n\t\t\twidth = this.maxWidth;\r\n\t\t}\r\n\t\tthis.contentDiv.width (width);\r\n\t};\r\n\t\r\n\treturn ImporterProgressBar;\r\n});\ndefine('skylark-online3dviewer/ImporterButtons',[\r\n\t\"skylark-jquery\"\r\n],function($){\r\n\tvar ImporterButtons = function (parent)\r\n\t{\r\n\t\tthis.buttonsDiv = $('<div>').attr ('id', 'buttons').appendTo (parent);\r\n\t};\r\n\r\n\tImporterButtons.prototype.AddLogo = function (title)\r\n\t{\r\n\t\tvar logoDiv = $('<div>').attr ('id', 'logo').html (title).appendTo (this.buttonsDiv);\r\n\t\tlogoDiv.click (function () {\r\n\t\t\tlocation.hash = '';\r\n\t\t\tlocation.reload ();\r\n\t\t});\r\n\t};\r\n\r\n\tImporterButtons.prototype.AddButton = function (image, title, onClick)\r\n\t{\r\n\t\tvar buttonImage = $('<img>').addClass ('topbutton').attr ('src', image).attr ('title', title).appendTo (this.buttonsDiv);\r\n\t\tbuttonImage.click (function () {\r\n\t\t\tonClick ();\r\n\t\t});\r\n\t};\r\n\r\n\tImporterButtons.prototype.AddToggleButton = function (image, toggleImage, title, onClick)\r\n\t{\r\n\t\tvar buttonImage = $('<img>').addClass ('topbutton').attr ('src', image).attr ('title', title).appendTo (this.buttonsDiv);\r\n\t\tvar isOn = true;\r\n\t\tbuttonImage.click (function () {\r\n\t\t\tisOn = !isOn;\r\n\t\t\tif (isOn) {\r\n\t\t\t\tbuttonImage.attr ('src', image);\r\n\t\t\t} else {\r\n\t\t\t\tbuttonImage.attr ('src', toggleImage);\r\n\t\t\t}\r\n\t\t\tonClick ();\r\n\t\t});\r\n\t};\r\n\r\n\treturn ImporterButtons;\t\r\n});\ndefine('skylark-online3dviewer/ImporterMenu',[\r\n\t\"skylark-jquery\",\r\n\t\"./ImporterProgressBar\",\r\n\t\"./ImporterButtons\"\t\r\n],function($,ImporterProgressBar,ImporterButtons){\r\n\tfunction IsSet (val)\r\n\t{\r\n\t\treturn val !== undefined && val !== null;\r\n\t}\r\n\r\n\tvar ImporterMenuItem = function (parentDiv, name, parameters)\r\n\t{\r\n\t\tthis.parentDiv = parentDiv;\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\tthis.menuItemDiv = null;\r\n\t\tthis.isOpen = null;\r\n\t\tthis.openCloseImage = null;\r\n\t\tthis.contentDiv = null;\r\n\r\n\t\tthis.Initialize (name);\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.Initialize = function (name)\r\n\t{\r\n\t\tthis.menuItemDiv = $('<div>').addClass ('menuitem').appendTo (this.parentDiv);\r\n\t\tif (IsSet (this.parameters)) {\r\n\t\t\tif (IsSet (this.parameters.id)) {\r\n\t\t\t\tthis.menuItemDiv.attr ('id', this.parameters.id);\r\n\t\t\t}\r\n\t\t\tif (IsSet (this.parameters.openCloseButton)) {\r\n\t\t\t\tthis.AddOpenCloseButton ();\r\n\t\t\t}\r\n\t\t\tif (IsSet (this.parameters.userButtons)) {\r\n\t\t\t\tvar i, userButton;\r\n\t\t\t\tfor (i = 0; i < this.parameters.userButtons.length; i++) {\r\n\t\t\t\t\tuserButton = this.parameters.userButtons[i];\r\n\t\t\t\t\tthis.AddUserButton (userButton);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar menuItemTextDiv = $('<div>').addClass ('menuitem').html (name).attr ('title', name).appendTo (this.menuItemDiv);\r\n\t\tif (IsSet (this.parameters) && IsSet (this.parameters.openCloseButton)) {\r\n\t\t\tmenuItemTextDiv.css ('cursor', 'pointer');\r\n\t\t}\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.AddSubItem = function (name, parameters)\r\n\t{\r\n\t\treturn new ImporterMenuItem (this.contentDiv, name, parameters);\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.GetContentDiv = function ()\r\n\t{\r\n\t\treturn this.contentDiv;\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.AddOpenCloseButton = function ()\r\n\t{\r\n\t\tvar myThis = this;\r\n\t\tthis.isOpen = false;\r\n\t\tthis.contentDiv = $('<div>').addClass ('menuitemcontent').hide ().appendTo (this.parentDiv);\r\n\t\tthis.openCloseImage = $('<img>').addClass ('menubutton').attr ('title', this.parameters.openCloseButton.title).appendTo (this.menuItemDiv);\r\n\t\tthis.openCloseImage.attr ('src', 'images/closed.png');\r\n\t\tthis.menuItemDiv.click (function () {\r\n\t\t\tmyThis.SetOpen (!myThis.isOpen);\r\n\t\t});\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.AddUserButton = function (userButton)\r\n\t{\r\n\t\tvar userImage = $('<img>').addClass ('menubutton').attr ('title', userButton.title).appendTo (this.menuItemDiv);\r\n\t\tif (IsSet (userButton.id)) {\r\n\t\t\tuserImage.attr ('id', userButton.id);\r\n\t\t}\r\n\t\tif (IsSet (userButton.onCreate)) {\r\n\t\t\tuserButton.onCreate (userImage, userButton.userData);\r\n\t\t}\r\n\t\tif (IsSet (userButton.onClick) || IsSet (userButton.onCtrlClick)) {\r\n\t\t\tuserImage.click (function (event) {\r\n\t\t\t\tevent.stopPropagation ();\r\n\t\t\t\tif (event.ctrlKey && IsSet (userButton.onCtrlClick)) {\r\n\t\t\t\t\tuserButton.onCtrlClick (userImage, userButton.userData);\r\n\t\t\t\t} else if (IsSet (userButton.onClick)) {\r\n\t\t\t\t\tuserButton.onClick (userImage, userButton.userData);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.SetOpen = function (isOpen)\r\n\t{\r\n\t\tthis.isOpen = isOpen;\r\n\t\tif (this.isOpen) {\r\n\t\t\tif (IsSet (this.parameters.openCloseButton.onOpen)) {\r\n\t\t\t\tthis.parameters.openCloseButton.onOpen (this.contentDiv, this.parameters.openCloseButton.userData);\r\n\t\t\t}\r\n\t\t\tthis.contentDiv.show ();\r\n\t\t\tthis.openCloseImage.attr ('src', 'images/opened.png');\r\n\t\t} else {\r\n\t\t\tif (IsSet (this.parameters.openCloseButton.onClose)) {\r\n\t\t\t\tthis.parameters.openCloseButton.onClose (this.contentDiv, this.parameters.openCloseButton.userData);\r\n\t\t\t}\r\n\t\t\tthis.contentDiv.hide ();\r\n\t\t\tthis.openCloseImage.attr ('src', 'images/closed.png');\r\n\t\t}\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.Highlight = function (highlight)\r\n\t{\r\n\t\tif (highlight) {\r\n\t\t\tthis.menuItemDiv.addClass ('highlighted');\r\n\t\t} else {\r\n\t\t\tthis.menuItemDiv.removeClass ('highlighted');\r\n\t\t}\r\n\t};\r\n\r\n\tImporterMenuItem.prototype.IsHighlighted = function ()\r\n\t{\r\n\t\treturn this.menuItemDiv.hasClass ('highlighted');\r\n\t};\r\n\r\n\tvar ImporterMenu = function (parentDiv)\r\n\t{\r\n\t\tthis.parentDiv = parentDiv;\r\n\t\tthis.parentDiv.empty ();\r\n\t};\r\n\r\n\tImporterMenu.prototype.AddGroup = function (name, parameters)\r\n\t{\r\n\t\treturn new ImporterMenuItem (this.parentDiv, name, parameters);\r\n\t};\r\n\r\n\r\n\treturn ImporterMenu;\r\n});\r\n\ndefine('skylark-threejs/three',[], function () { \r\n\t'use strict';\r\n\r\n\tvar exports = {};\r\n\r\n\t// Polyfills\r\n\r\n\tif ( Number.EPSILON === undefined ) {\r\n\r\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n\t}\r\n\r\n\tif ( Number.isInteger === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\r\n\r\n\t\tNumber.isInteger = function ( value ) {\r\n\r\n\t\t\treturn typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tif ( Math.sign === undefined ) {\r\n\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\t\tMath.sign = function ( x ) {\r\n\r\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tif ( 'name' in Function.prototype === false ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\t\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*([^\\(\\s]*)/ )[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tif ( Object.assign === undefined ) {\r\n\r\n\t\t// Missing in IE\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\t\tObject.assign = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = Object( target );\r\n\r\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\r\n\r\n\t\t\t\tvar source = arguments[ index ];\r\n\r\n\t\t\t\tif ( source !== undefined && source !== null ) {\r\n\r\n\t\t\t\t\tfor ( var nextKey in source ) {\r\n\r\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\r\n\r\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar REVISION = '111';\r\n\tvar MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\n\tvar TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\n\tvar CullFaceNone = 0;\r\n\tvar CullFaceBack = 1;\r\n\tvar CullFaceFront = 2;\r\n\tvar CullFaceFrontBack = 3;\r\n\tvar FrontFaceDirectionCW = 0;\r\n\tvar FrontFaceDirectionCCW = 1;\r\n\tvar BasicShadowMap = 0;\r\n\tvar PCFShadowMap = 1;\r\n\tvar PCFSoftShadowMap = 2;\r\n\tvar VSMShadowMap = 3;\r\n\tvar FrontSide = 0;\r\n\tvar BackSide = 1;\r\n\tvar DoubleSide = 2;\r\n\tvar FlatShading = 1;\r\n\tvar SmoothShading = 2;\r\n\tvar NoColors = 0;\r\n\tvar FaceColors = 1;\r\n\tvar VertexColors = 2;\r\n\tvar NoBlending = 0;\r\n\tvar NormalBlending = 1;\r\n\tvar AdditiveBlending = 2;\r\n\tvar SubtractiveBlending = 3;\r\n\tvar MultiplyBlending = 4;\r\n\tvar CustomBlending = 5;\r\n\tvar AddEquation = 100;\r\n\tvar SubtractEquation = 101;\r\n\tvar ReverseSubtractEquation = 102;\r\n\tvar MinEquation = 103;\r\n\tvar MaxEquation = 104;\r\n\tvar ZeroFactor = 200;\r\n\tvar OneFactor = 201;\r\n\tvar SrcColorFactor = 202;\r\n\tvar OneMinusSrcColorFactor = 203;\r\n\tvar SrcAlphaFactor = 204;\r\n\tvar OneMinusSrcAlphaFactor = 205;\r\n\tvar DstAlphaFactor = 206;\r\n\tvar OneMinusDstAlphaFactor = 207;\r\n\tvar DstColorFactor = 208;\r\n\tvar OneMinusDstColorFactor = 209;\r\n\tvar SrcAlphaSaturateFactor = 210;\r\n\tvar NeverDepth = 0;\r\n\tvar AlwaysDepth = 1;\r\n\tvar LessDepth = 2;\r\n\tvar LessEqualDepth = 3;\r\n\tvar EqualDepth = 4;\r\n\tvar GreaterEqualDepth = 5;\r\n\tvar GreaterDepth = 6;\r\n\tvar NotEqualDepth = 7;\r\n\tvar MultiplyOperation = 0;\r\n\tvar MixOperation = 1;\r\n\tvar AddOperation = 2;\r\n\tvar NoToneMapping = 0;\r\n\tvar LinearToneMapping = 1;\r\n\tvar ReinhardToneMapping = 2;\r\n\tvar Uncharted2ToneMapping = 3;\r\n\tvar CineonToneMapping = 4;\r\n\tvar ACESFilmicToneMapping = 5;\r\n\r\n\tvar UVMapping = 300;\r\n\tvar CubeReflectionMapping = 301;\r\n\tvar CubeRefractionMapping = 302;\r\n\tvar EquirectangularReflectionMapping = 303;\r\n\tvar EquirectangularRefractionMapping = 304;\r\n\tvar SphericalReflectionMapping = 305;\r\n\tvar CubeUVReflectionMapping = 306;\r\n\tvar CubeUVRefractionMapping = 307;\r\n\tvar RepeatWrapping = 1000;\r\n\tvar ClampToEdgeWrapping = 1001;\r\n\tvar MirroredRepeatWrapping = 1002;\r\n\tvar NearestFilter = 1003;\r\n\tvar NearestMipmapNearestFilter = 1004;\r\n\tvar NearestMipMapNearestFilter = 1004;\r\n\tvar NearestMipmapLinearFilter = 1005;\r\n\tvar NearestMipMapLinearFilter = 1005;\r\n\tvar LinearFilter = 1006;\r\n\tvar LinearMipmapNearestFilter = 1007;\r\n\tvar LinearMipMapNearestFilter = 1007;\r\n\tvar LinearMipmapLinearFilter = 1008;\r\n\tvar LinearMipMapLinearFilter = 1008;\r\n\tvar UnsignedByteType = 1009;\r\n\tvar ByteType = 1010;\r\n\tvar ShortType = 1011;\r\n\tvar UnsignedShortType = 1012;\r\n\tvar IntType = 1013;\r\n\tvar UnsignedIntType = 1014;\r\n\tvar FloatType = 1015;\r\n\tvar HalfFloatType = 1016;\r\n\tvar UnsignedShort4444Type = 1017;\r\n\tvar UnsignedShort5551Type = 1018;\r\n\tvar UnsignedShort565Type = 1019;\r\n\tvar UnsignedInt248Type = 1020;\r\n\tvar AlphaFormat = 1021;\r\n\tvar RGBFormat = 1022;\r\n\tvar RGBAFormat = 1023;\r\n\tvar LuminanceFormat = 1024;\r\n\tvar LuminanceAlphaFormat = 1025;\r\n\tvar RGBEFormat = RGBAFormat;\r\n\tvar DepthFormat = 1026;\r\n\tvar DepthStencilFormat = 1027;\r\n\tvar RedFormat = 1028;\r\n\tvar RGB_S3TC_DXT1_Format = 33776;\r\n\tvar RGBA_S3TC_DXT1_Format = 33777;\r\n\tvar RGBA_S3TC_DXT3_Format = 33778;\r\n\tvar RGBA_S3TC_DXT5_Format = 33779;\r\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\r\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\r\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\r\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\r\n\tvar RGB_ETC1_Format = 36196;\r\n\tvar RGBA_ASTC_4x4_Format = 37808;\r\n\tvar RGBA_ASTC_5x4_Format = 37809;\r\n\tvar RGBA_ASTC_5x5_Format = 37810;\r\n\tvar RGBA_ASTC_6x5_Format = 37811;\r\n\tvar RGBA_ASTC_6x6_Format = 37812;\r\n\tvar RGBA_ASTC_8x5_Format = 37813;\r\n\tvar RGBA_ASTC_8x6_Format = 37814;\r\n\tvar RGBA_ASTC_8x8_Format = 37815;\r\n\tvar RGBA_ASTC_10x5_Format = 37816;\r\n\tvar RGBA_ASTC_10x6_Format = 37817;\r\n\tvar RGBA_ASTC_10x8_Format = 37818;\r\n\tvar RGBA_ASTC_10x10_Format = 37819;\r\n\tvar RGBA_ASTC_12x10_Format = 37820;\r\n\tvar RGBA_ASTC_12x12_Format = 37821;\r\n\tvar LoopOnce = 2200;\r\n\tvar LoopRepeat = 2201;\r\n\tvar LoopPingPong = 2202;\r\n\tvar InterpolateDiscrete = 2300;\r\n\tvar InterpolateLinear = 2301;\r\n\tvar InterpolateSmooth = 2302;\r\n\tvar ZeroCurvatureEnding = 2400;\r\n\tvar ZeroSlopeEnding = 2401;\r\n\tvar WrapAroundEnding = 2402;\r\n\tvar TrianglesDrawMode = 0;\r\n\tvar TriangleStripDrawMode = 1;\r\n\tvar TriangleFanDrawMode = 2;\r\n\tvar LinearEncoding = 3000;\r\n\tvar sRGBEncoding = 3001;\r\n\tvar GammaEncoding = 3007;\r\n\tvar RGBEEncoding = 3002;\r\n\tvar LogLuvEncoding = 3003;\r\n\tvar RGBM7Encoding = 3004;\r\n\tvar RGBM16Encoding = 3005;\r\n\tvar RGBDEncoding = 3006;\r\n\tvar BasicDepthPacking = 3200;\r\n\tvar RGBADepthPacking = 3201;\r\n\tvar TangentSpaceNormalMap = 0;\r\n\tvar ObjectSpaceNormalMap = 1;\r\n\r\n\tvar ZeroStencilOp = 0;\r\n\tvar KeepStencilOp = 7680;\r\n\tvar ReplaceStencilOp = 7681;\r\n\tvar IncrementStencilOp = 7682;\r\n\tvar DecrementStencilOp = 7683;\r\n\tvar IncrementWrapStencilOp = 34055;\r\n\tvar DecrementWrapStencilOp = 34056;\r\n\tvar InvertStencilOp = 5386;\r\n\r\n\tvar NeverStencilFunc = 512;\r\n\tvar LessStencilFunc = 513;\r\n\tvar EqualStencilFunc = 514;\r\n\tvar LessEqualStencilFunc = 515;\r\n\tvar GreaterStencilFunc = 516;\r\n\tvar NotEqualStencilFunc = 517;\r\n\tvar GreaterEqualStencilFunc = 518;\r\n\tvar AlwaysStencilFunc = 519;\r\n\r\n\tvar StaticDrawUsage = 35044;\r\n\tvar DynamicDrawUsage = 35048;\r\n\tvar StreamDrawUsage = 35040;\r\n\tvar StaticReadUsage = 35045;\r\n\tvar DynamicReadUsage = 35049;\r\n\tvar StreamReadUsage = 35041;\r\n\tvar StaticCopyUsage = 35046;\r\n\tvar DynamicCopyUsage = 35050;\r\n\tvar StreamCopyUsage = 35042;\r\n\r\n\t/**\r\n\t * https://github.com/mrdoob/eventdispatcher.js/\r\n\t */\r\n\r\n\tfunction EventDispatcher() {}\r\n\r\n\tObject.assign( EventDispatcher.prototype, {\r\n\r\n\t\taddEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { this._listeners = {}; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\thasEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return false; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\r\n\t\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t\t},\r\n\r\n\t\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tdispatchEvent: function ( event ) {\r\n\r\n\t\t\tif ( this._listeners === undefined ) { return; }\r\n\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\t\tevent.target = this;\r\n\r\n\t\t\t\tvar array = listenerArray.slice( 0 );\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _lut = [];\r\n\r\n\tfor ( var i = 0; i < 256; i ++ ) {\r\n\r\n\t\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\r\n\r\n\t}\r\n\r\n\tvar _Math = {\r\n\r\n\t\tDEG2RAD: Math.PI / 180,\r\n\t\tRAD2DEG: 180 / Math.PI,\r\n\r\n\t\tgenerateUUID: function () {\r\n\r\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\r\n\t\t\tvar uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\r\n\r\n\t\t\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n\t\t\treturn uuid.toUpperCase();\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( value, min, max ) {\r\n\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t\t},\r\n\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t\t},\r\n\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t\t},\r\n\r\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\r\n\r\n\t\tlerp: function ( x, y, t ) {\r\n\r\n\t\t\treturn ( 1 - t ) * x + t * y;\r\n\r\n\t\t},\r\n\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) { return 0; }\r\n\t\t\tif ( x >= max ) { return 1; }\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t\t},\r\n\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\t\tif ( x <= min ) { return 0; }\r\n\t\t\tif ( x >= max ) { return 1; }\r\n\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t\t},\r\n\r\n\t\t// Random integer from <low, high> interval\r\n\r\n\t\trandInt: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <low, high> interval\r\n\r\n\t\trandFloat: function ( low, high ) {\r\n\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t\t},\r\n\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\r\n\t\trandFloatSpread: function ( range ) {\r\n\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t\t},\r\n\r\n\t\tdegToRad: function ( degrees ) {\r\n\r\n\t\t\treturn degrees * _Math.DEG2RAD;\r\n\r\n\t\t},\r\n\r\n\t\tradToDeg: function ( radians ) {\r\n\r\n\t\t\treturn radians * _Math.RAD2DEG;\r\n\r\n\t\t},\r\n\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t\t},\r\n\r\n\t\tceilPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloorPowerOfTwo: function ( value ) {\r\n\r\n\t\t\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tfunction Vector2( x, y ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector2.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.x = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.y = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tisVector2: true,\r\n\r\n\t\tset: function ( x, y ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v ) {\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tangle: function () {\r\n\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\t\tif ( angle < 0 ) { angle += 2 * Math.PI; }\r\n\r\n\t\t\treturn angle;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateAround: function ( center, angle ) {\r\n\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Quaternion( x, y, z, w ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.assign( Quaternion, {\r\n\r\n\t\tslerp: function ( qa, qb, qm, t ) {\r\n\r\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t\t},\r\n\r\n\t\tslerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\t\tx0 *= f;\r\n\t\t\t\t\ty0 *= f;\r\n\t\t\t\t\tz0 *= f;\r\n\t\t\t\t\tw0 *= f;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdst[ dstOffset ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Quaternion.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tw: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._w = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Quaternion.prototype, {\r\n\r\n\t\tisQuaternion: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( quaternion ) {\r\n\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar x = euler._x, y = euler._y, z = euler._z, order = euler.order;\r\n\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\t\tvar cos = Math.cos;\r\n\t\t\tvar sin = Math.sin;\r\n\r\n\t\t\tvar c1 = cos( x / 2 );\r\n\t\t\tvar c2 = cos( y / 2 );\r\n\t\t\tvar c3 = cos( z / 2 );\r\n\r\n\t\t\tvar s1 = sin( x / 2 );\r\n\t\t\tvar s2 = sin( y / 2 );\r\n\t\t\tvar s3 = sin( z / 2 );\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\r\n\t\t\tif ( trace > 0 ) {\r\n\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromUnitVectors: function ( vFrom, vTo ) {\r\n\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\r\n\t\t\tvar r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\t\tthis._z = 0;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\t\tthis._w = r;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( q ) {\r\n\r\n\t\t\treturn 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t\t},\r\n\r\n\t\trotateTowards: function ( q, step ) {\r\n\r\n\t\t\tvar angle = this.angleTo( q );\r\n\r\n\t\t\tif ( angle === 0 ) { return this; }\r\n\r\n\t\t\tvar t = Math.min( 1, step / angle );\r\n\r\n\t\t\tthis.slerp( q, t );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tinverse: function () {\r\n\r\n\t\t\t// quaternion is assumed to have unit length\r\n\r\n\t\t\treturn this.conjugate();\r\n\r\n\t\t},\r\n\r\n\t\tconjugate: function () {\r\n\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tvar l = this.length();\r\n\r\n\t\t\tif ( l === 0 ) {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tl = 1 / l;\r\n\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( q, p ) {\r\n\r\n\t\t\tif ( p !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( q ) {\r\n\r\n\t\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tslerp: function ( qb, t ) {\r\n\r\n\t\t\tif ( t === 0 ) { return this; }\r\n\t\t\tif ( t === 1 ) { return this.copy( qb ); }\r\n\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.copy( qb );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\t\tvar s = 1 - t;\r\n\t\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\t\tthis.normalize();\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( quaternion ) {\r\n\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _vector = new Vector3();\r\n\tvar _quaternion = new Quaternion();\r\n\r\n\tfunction Vector3( x, y, z ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tisVector3: true,\r\n\r\n\t\tset: function ( x, y, z ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix3: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyNormalMatrix: function ( m ) {\r\n\r\n\t\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tvar w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t\t// calculate quat * vector\r\n\r\n\t\t\tvar ix = qw * x + qy * z - qz * y;\r\n\t\t\tvar iy = qw * y + qz * x - qx * z;\r\n\t\t\tvar iz = qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t\t// calculate result * inverse quat\r\n\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tunproject: function ( camera ) {\r\n\r\n\t\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\ttransformDirection: function ( m ) {\r\n\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tdivide: function ( v ) {\r\n\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t\t},\r\n\r\n\t\t// TODO lengthSquared?\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tcross: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.crossVectors( this, v );\r\n\r\n\t\t},\r\n\r\n\t\tcrossVectors: function ( a, b ) {\r\n\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnVector: function ( v ) {\r\n\r\n\t\t\t// v cannot be the zero v\r\n\r\n\t\t\tvar scalar = v.dot( this ) / v.lengthSq();\r\n\r\n\t\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t\t},\r\n\r\n\t\tprojectOnPlane: function ( planeNormal ) {\r\n\r\n\t\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( _vector );\r\n\r\n\t\t},\r\n\r\n\t\treflect: function ( normal ) {\r\n\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\r\n\t\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tangleTo: function ( v ) {\r\n\r\n\t\t\tvar denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\t\tif ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\\'t handle zero length vectors.' ); }\r\n\r\n\t\t\tvar theta = this.dot( v ) / denominator;\r\n\r\n\t\t\t// clamp, to handle numerical problems\r\n\r\n\t\t\treturn Math.acos( _Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSquared: function ( v ) {\r\n\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanDistanceTo: function ( v ) {\r\n\r\n\t\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSpherical: function ( s ) {\r\n\r\n\t\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromSphericalCoords: function ( radius, phi, theta ) {\r\n\r\n\t\t\tvar sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindrical: function ( c ) {\r\n\r\n\t\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCylindricalCoords: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.x = radius * Math.sin( theta );\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 12 ];\r\n\t\t\tthis.y = e[ 13 ];\r\n\t\t\tthis.z = e[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t * @author tschw\r\n\t */\r\n\r\n\tvar _vector$1 = new Vector3();\r\n\r\n\tfunction Matrix3() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tisMatrix3: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix4: function ( m ) {\r\n\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector$1.x = attribute.getX( i );\r\n\t\t\t\t_vector$1.y = attribute.getY( i );\r\n\t\t\t\t_vector$1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t_vector$1.applyMatrix3( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\t\tif ( matrix && matrix.isMatrix4 ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar me = matrix.elements,\r\n\t\t\t\tte = this.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\t\tte[ 3 ] = t12 * detInv;\r\n\t\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\t\tte[ 6 ] = t13 * detInv;\r\n\t\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar tmp, m = this.elements;\r\n\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t\t},\r\n\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\t\tvar m = this.elements;\r\n\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\t\tvar c = Math.cos( rotation );\r\n\t\t\tvar s = Math.sin( rotation );\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t\t0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( sx, sy ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\r\n\t\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotate: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta );\r\n\t\t\tvar s = Math.sin( theta );\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\r\n\t\t\tvar a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\r\n\r\n\t\t\tte[ 0 ] = c * a11 + s * a21;\r\n\t\t\tte[ 3 ] = c * a12 + s * a22;\r\n\t\t\tte[ 6 ] = c * a13 + s * a23;\r\n\r\n\t\t\tte[ 1 ] = - s * a11 + c * a21;\r\n\t\t\tte[ 4 ] = - s * a12 + c * a22;\r\n\t\t\tte[ 7 ] = - s * a13 + c * a23;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( tx, ty ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\r\n\t\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar _canvas;\r\n\r\n\tvar ImageUtils = {\r\n\r\n\t\tgetDataURL: function ( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\r\n\r\n\t\t\t\treturn image.src;\r\n\r\n\t\t\t} else if ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }\r\n\r\n\t\t\t\t_canvas.width = image.width;\r\n\t\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\t\tvar context = _canvas.getContext( '2d' );\r\n\r\n\t\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcanvas = _canvas;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\r\n\tvar textureId = 0;\r\n\r\n\tfunction Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\tthis.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;\r\n\r\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;\r\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;\r\n\r\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBAFormat;\r\n\t\tthis.type = type !== undefined ? type : UnsignedByteType;\r\n\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.matrixAutoUpdate = true;\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t\t//\r\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\t\tthis.encoding = encoding !== undefined ? encoding : LinearEncoding;\r\n\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\r\n\t}\r\n\r\n\tTexture.DEFAULT_IMAGE = undefined;\r\n\tTexture.DEFAULT_MAPPING = UVMapping;\r\n\r\n\tTexture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Texture,\r\n\r\n\t\tisTexture: true,\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.image = source.image;\r\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\t\tthis.mapping = source.mapping;\r\n\r\n\t\t\tthis.wrapS = source.wrapS;\r\n\t\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\t\tthis.magFilter = source.magFilter;\r\n\t\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\t\tthis.format = source.format;\r\n\t\t\tthis.type = source.type;\r\n\r\n\t\t\tthis.offset.copy( source.offset );\r\n\t\t\tthis.repeat.copy( source.repeat );\r\n\t\t\tthis.center.copy( source.center );\r\n\t\t\tthis.rotation = source.rotation;\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\t\tthis.flipY = source.flipY;\r\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\t\tthis.encoding = source.encoding;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = {\r\n\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Texture',\r\n\t\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t\t},\r\n\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\tname: this.name,\r\n\r\n\t\t\t\tmapping: this.mapping,\r\n\r\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\t\trotation: this.rotation,\r\n\r\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\t\tformat: this.format,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\tencoding: this.encoding,\r\n\r\n\t\t\t\tminFilter: this.minFilter,\r\n\t\t\t\tmagFilter: this.magFilter,\r\n\t\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\t\tflipY: this.flipY,\r\n\r\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\r\n\t\t\t\tunpackAlignment: this.unpackAlignment\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\t\tvar image = this.image;\r\n\r\n\t\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\t\timage.uuid = _Math.generateUUID(); // UGH\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tvar url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( image ) ) {\r\n\r\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\r\n\r\n\t\t\t\t\t\turl = [];\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = image.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\turl.push( ImageUtils.getDataURL( image[ i ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// process single image\r\n\r\n\t\t\t\t\t\turl = ImageUtils.getDataURL( image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\t\turl: url\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\toutput.image = image.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t},\r\n\r\n\t\ttransformUv: function ( uv ) {\r\n\r\n\t\t\tif ( this.mapping !== UVMapping ) { return uv; }\r\n\r\n\t\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.flipY ) {\r\n\r\n\t\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uv;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Texture.prototype, \"needsUpdate\", {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Vector4( x, y, z, w ) {\r\n\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( Vector4.prototype, {\r\n\r\n\t\t\"width\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.z = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t\"height\": {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.w;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis.w = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tisVector4: true,\r\n\r\n\t\tset: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\t\tthis.w = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( x ) {\r\n\r\n\t\t\tthis.x = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( y ) {\r\n\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( z ) {\r\n\r\n\t\t\tthis.z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( w ) {\r\n\r\n\t\t\tthis.w = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponent: function ( index, value ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetComponent: function ( index ) {\r\n\r\n\t\t\tswitch ( index ) {\r\n\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( v ) {\r\n\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScaledVector: function ( v, s ) {\r\n\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( v, w ) {\r\n\r\n\t\t\tif ( w !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubScalar: function ( s ) {\r\n\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsubVectors: function ( a, b ) {\r\n\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\t\tvar e = m.elements;\r\n\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdivideScalar: function ( scalar ) {\r\n\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t\t// q is assumed to be normalized\r\n\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t\tthis.x = 1;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.x = q.x / s;\r\n\t\t\t\tthis.y = q.y / s;\r\n\t\t\t\tthis.z = q.z / s;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\t\tte = m.elements,\r\n\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\t\tangle = Math.PI;\r\n\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) { s = 1; }\r\n\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmin: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmax: function ( v ) {\r\n\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclamp: function ( min, max ) {\r\n\r\n\t\t\t// assumes min < max, componentwise\r\n\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampScalar: function ( minVal, maxVal ) {\r\n\r\n\t\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\r\n\t\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\r\n\t\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\r\n\t\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclampLength: function ( min, max ) {\r\n\r\n\t\t\tvar length = this.length();\r\n\r\n\t\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\r\n\r\n\t\t},\r\n\r\n\t\tfloor: function () {\r\n\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tceil: function () {\r\n\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tround: function () {\r\n\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\troundToZero: function () {\r\n\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdot: function ( v ) {\r\n\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t\t},\r\n\r\n\t\tlengthSq: function () {\r\n\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t\t},\r\n\r\n\t\tlength: function () {\r\n\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t\t},\r\n\r\n\t\tmanhattanLength: function () {\r\n\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t\t},\r\n\r\n\t\tsetLength: function ( length ) {\r\n\r\n\t\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( v, alpha ) {\r\n\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( v ) {\r\n\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.x = attribute.getX( index );\r\n\t\t\tthis.y = attribute.getY( index );\r\n\t\t\tthis.z = attribute.getZ( index );\r\n\t\t\tthis.w = attribute.getW( index );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Marius Kintel / https://github.com/kintel\r\n\t */\r\n\r\n\t/*\r\n\t In options, we can specify:\r\n\t * Texture parameters for an auto-generated target texture\r\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n\t*/\r\n\tfunction WebGLRenderTarget( width, height, options ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\toptions = options || {};\r\n\r\n\t\tthis.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\r\n\r\n\t\tthis.texture.image = {};\r\n\t\tthis.texture.image.width = width;\r\n\t\tthis.texture.image.height = height;\r\n\r\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\r\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\r\n\r\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\r\n\r\n\t}\r\n\r\n\tWebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: WebGLRenderTarget,\r\n\r\n\t\tisWebGLRenderTarget: true,\r\n\r\n\t\tsetSize: function ( width, height ) {\r\n\r\n\t\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\r\n\t\t\t\tthis.texture.image.width = width;\r\n\t\t\t\tthis.texture.image.height = height;\r\n\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\t\tthis.texture = source.texture.clone();\r\n\r\n\t\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\t\tthis.depthTexture = source.depthTexture;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t */\r\n\r\n\tfunction WebGLMultisampleRenderTarget( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.samples = 4;\r\n\r\n\t}\r\n\r\n\tWebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\r\n\r\n\t\tconstructor: WebGLMultisampleRenderTarget,\r\n\r\n\t\tisWebGLMultisampleRenderTarget: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.samples = source.samples;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _v1 = new Vector3();\r\n\tvar _m1 = new Matrix4();\r\n\tvar _zero = new Vector3( 0, 0, 0 );\r\n\tvar _one = new Vector3( 1, 1, 1 );\r\n\tvar _x = new Vector3();\r\n\tvar _y = new Vector3();\r\n\tvar _z = new Vector3();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author jordi_ros / http://plattsoft.com\r\n\t * @author D1plo1d / http://github.com/D1plo1d\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author timknip / http://www.floorplanner.com/\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Matrix4() {\r\n\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( arguments.length > 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\tisMatrix4: true,\r\n\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tidentity: function () {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyPosition: function ( m ) {\r\n\r\n\t\t\tvar te = this.elements, me = m.elements;\r\n\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\textractRotation: function ( m ) {\r\n\r\n\t\t\t// this method does not support reflection matrices\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tif ( ! ( euler && euler.isEuler ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bottom row\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\t// last column\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( eye, target, up ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\t_z.subVectors( eye, target );\r\n\r\n\t\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t\t_z.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\t// up and z are parallel\r\n\r\n\t\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_z.normalize();\r\n\t\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_x.normalize();\r\n\t\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( m, n ) {\r\n\r\n\t\t\tif ( n !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t\t},\r\n\r\n\t\tpremultiply: function ( m ) {\r\n\r\n\t\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyToBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_v1.x = attribute.getX( i );\r\n\t\t\t\t_v1.y = attribute.getY( i );\r\n\t\t\t\t_v1.z = attribute.getZ( i );\r\n\r\n\t\t\t\t_v1.applyMatrix4( this );\r\n\r\n\t\t\t\tattribute.setXYZ( i, _v1.x, _v1.y, _v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn attribute;\r\n\r\n\t\t},\r\n\r\n\t\tdeterminant: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\ttranspose: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPosition: function ( x, y, z ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\tte[ 12 ] = x.x;\r\n\t\t\t\tte[ 13 ] = x.y;\r\n\t\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tte[ 12 ] = x;\r\n\t\t\t\tte[ 13 ] = y;\r\n\t\t\t\tte[ 14 ] = z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements,\r\n\t\t\t\tme = m.elements,\r\n\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\t\tif ( det === 0 ) {\r\n\r\n\t\t\t\tvar msg = \"THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0\";\r\n\r\n\t\t\t\tif ( throwOnDegenerate === true ) {\r\n\r\n\t\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this.identity();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar detInv = 1 / det;\r\n\r\n\t\t\tte[ 0 ] = t11 * detInv;\r\n\t\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 4 ] = t12 * detInv;\r\n\t\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 8 ] = t13 * detInv;\r\n\t\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\t\tte[ 12 ] = t14 * detInv;\r\n\t\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( v ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t\t},\r\n\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationX: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s, c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationY: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts, c, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\t return this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeShear: function ( x, y, z ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, y, z, 0,\r\n\t\t\t\tx, 1, z, 0,\r\n\t\t\t\tx, y, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\t\tvar x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\t\tvar sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\t\tte[ 3 ] = 0;\r\n\r\n\t\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\t\tte[ 7 ] = 0;\r\n\r\n\t\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\t\tte[ 11 ] = 0;\r\n\r\n\t\t\tte[ 12 ] = position.x;\r\n\t\t\tte[ 13 ] = position.y;\r\n\t\t\tte[ 14 ] = position.z;\r\n\t\t\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdecompose: function ( position, quaternion, scale ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) { sx = - sx; }\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\t\t\t_m1.copy( this );\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakePerspective: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tif ( far === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = 1.0 / ( right - left );\r\n\t\t\tvar h = 1.0 / ( top - bottom );\r\n\t\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\t\tvar x = ( right + left ) * w;\r\n\t\t\tvar y = ( top + bottom ) * h;\r\n\t\t\tvar z = ( far + near ) * p;\r\n\r\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( matrix ) {\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _matrix = new Matrix4();\r\n\tvar _quaternion$1 = new Quaternion();\r\n\r\n\tfunction Euler( x, y, z, order ) {\r\n\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._order = order || Euler.DefaultOrder;\r\n\r\n\t}\r\n\r\n\tEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\n\tEuler.DefaultOrder = 'XYZ';\r\n\r\n\tObject.defineProperties( Euler.prototype, {\r\n\r\n\t\tx: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._x;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._x = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ty: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._y;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._y = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tz: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._z;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._z = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\torder: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this._order;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tthis._order = value;\r\n\t\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Euler.prototype, {\r\n\r\n\t\tisEuler: true,\r\n\r\n\t\tset: function ( x, y, z, order ) {\r\n\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( euler ) {\r\n\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\t\tvar clamp = _Math.clamp;\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\t\torder = order || this._order;\r\n\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._order = order;\r\n\r\n\t\t\tif ( update !== false ) { this._onChangeCallback(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromQuaternion: function ( q, order, update ) {\r\n\r\n\t\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t\t},\r\n\r\n\t\treorder: function ( newOrder ) {\r\n\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\t\t_quaternion$1.setFromEuler( this );\r\n\r\n\t\t\treturn this.setFromQuaternion( _quaternion$1, newOrder );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( euler ) {\r\n\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array ) {\r\n\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }\r\n\r\n\t\t\tthis._onChangeCallback();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\t\tif ( optionalResult ) {\r\n\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new Vector3( this._x, this._y, this._z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_onChange: function ( callback ) {\r\n\r\n\t\t\tthis._onChangeCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t_onChangeCallback: function () {}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Layers() {\r\n\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Layers.prototype, {\r\n\r\n\t\tset: function ( channel ) {\r\n\r\n\t\t\tthis.mask = 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenable: function ( channel ) {\r\n\r\n\t\t\tthis.mask |= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tenableAll: function () {\r\n\r\n\t\t\tthis.mask = 0xffffffff | 0;\r\n\r\n\t\t},\r\n\r\n\t\ttoggle: function ( channel ) {\r\n\r\n\t\t\tthis.mask ^= 1 << channel | 0;\r\n\r\n\t\t},\r\n\r\n\t\tdisable: function ( channel ) {\r\n\r\n\t\t\tthis.mask &= ~ ( 1 << channel | 0 );\r\n\r\n\t\t},\r\n\r\n\t\tdisableAll: function () {\r\n\r\n\t\t\tthis.mask = 0;\r\n\r\n\t\t},\r\n\r\n\t\ttest: function ( layers ) {\r\n\r\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _object3DId = 0;\r\n\r\n\tvar _v1$1 = new Vector3();\r\n\tvar _q1 = new Quaternion();\r\n\tvar _m1$1 = new Matrix4();\r\n\tvar _target = new Vector3();\r\n\r\n\tvar _position = new Vector3();\r\n\tvar _scale = new Vector3();\r\n\tvar _quaternion$2 = new Quaternion();\r\n\r\n\tvar _xAxis = new Vector3( 1, 0, 0 );\r\n\tvar _yAxis = new Vector3( 0, 1, 0 );\r\n\tvar _zAxis = new Vector3( 0, 0, 1 );\r\n\r\n\tvar _addedEvent = { type: 'added' };\r\n\tvar _removedEvent = { type: 'removed' };\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author elephantatwork / www.elephantatwork.ch\r\n\t */\r\n\r\n\tfunction Object3D() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\r\n\t\tthis.up = Object3D.DefaultUp.clone();\r\n\r\n\t\tvar position = new Vector3();\r\n\t\tvar rotation = new Euler();\r\n\t\tvar quaternion = new Quaternion();\r\n\t\tvar scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.matrix = new Matrix4();\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\tthis.layers = new Layers();\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tObject3D.DefaultUp = new Vector3( 0, 1, 0 );\r\n\tObject3D.DefaultMatrixAutoUpdate = true;\r\n\r\n\tObject3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Object3D,\r\n\r\n\t\tisObject3D: true,\r\n\r\n\t\tonBeforeRender: function () {},\r\n\t\tonAfterRender: function () {},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t},\r\n\r\n\t\tapplyQuaternion: function ( q ) {\r\n\r\n\t\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t\t// assumes axis is normalized\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t\t},\r\n\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\t// assumes q is normalized\r\n\r\n\t\t\tthis.quaternion.copy( q );\r\n\r\n\t\t},\r\n\r\n\t\trotateOnAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// rotate object on axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateOnWorldAxis: function ( axis, angle ) {\r\n\r\n\t\t\t// rotate object on axis in world space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\t\t// method assumes no rotated parent\r\n\r\n\t\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateOnAxis: function ( axis, distance ) {\r\n\r\n\t\t\t// translate object by distance along axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\r\n\t\t\t_v1$1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( _v1$1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslateX: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateY: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\ttranslateZ: function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t\t},\r\n\r\n\t\tlocalToWorld: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tworldToLocal: function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( x, y, z ) {\r\n\r\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t\t_target.copy( x );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_target.set( x, y, z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t\t_m1$1.lookAt( _position, _target, this.up );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_m1$1.lookAt( _target, _position, this.up );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\r\n\r\n\t\t\tif ( parent ) {\r\n\r\n\t\t\t\t_m1$1.extractRotation( parent.matrixWorld );\r\n\t\t\t\t_q1.setFromRotationMatrix( _m1$1 );\r\n\t\t\t\tthis.quaternion.premultiply( _q1.inverse() );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object === this ) {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( object && object.isObject3D ) ) {\r\n\r\n\t\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.parent = this;\r\n\t\t\t\tthis.children.push( object );\r\n\r\n\t\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( object ) {\r\n\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tobject.parent = null;\r\n\t\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( object ) {\r\n\r\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1$1.getInverse( this.matrixWorld );\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t\t_m1$1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.applyMatrix( _m1$1 );\r\n\r\n\t\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectById: function ( id ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByName: function ( name ) {\r\n\r\n\t\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\t\tif ( this[ name ] === value ) { return this; }\r\n\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar child = this.children[ i ];\r\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldPosition: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldQuaternion: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );\r\n\t\t\t\ttarget = new Quaternion();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldScale: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldScale() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position, _quaternion$2, target );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\traycast: function () {},\r\n\r\n\t\ttraverse: function ( callback ) {\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseVisible: function ( callback ) {\r\n\r\n\t\t\tif ( this.visible === false ) { return; }\r\n\r\n\t\t\tcallback( this );\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tcallback( parent );\r\n\r\n\t\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrix: function () {\r\n\r\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\t\tforce = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tvar children = this.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( force );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateWorldMatrix: function ( updateParents, updateChildren ) {\r\n\r\n\t\t\tvar parent = this.parent;\r\n\r\n\t\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.matrixAutoUpdate ) { this.updateMatrix(); }\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update children\r\n\r\n\t\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\t\tvar children = this.children;\r\n\r\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\t// meta is a string when called from JSON.stringify\r\n\t\t\tvar isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tvar output = {};\r\n\r\n\t\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t\t// not providing it implies that this is the root object\r\n\t\t\t// being serialized.\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\t// initialize meta obj\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\tgeometries: {},\r\n\t\t\t\t\tmaterials: {},\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {},\r\n\t\t\t\t\tshapes: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t\toutput.metadata = {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Object',\r\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// standard Object3D serialization\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tobject.uuid = this.uuid;\r\n\t\t\tobject.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) { object.name = this.name; }\r\n\t\t\tif ( this.castShadow === true ) { object.castShadow = true; }\r\n\t\t\tif ( this.receiveShadow === true ) { object.receiveShadow = true; }\r\n\t\t\tif ( this.visible === false ) { object.visible = false; }\r\n\t\t\tif ( this.frustumCulled === false ) { object.frustumCulled = false; }\r\n\t\t\tif ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }\r\n\r\n\t\t\tobject.layers = this.layers.mask;\r\n\t\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t\tif ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }\r\n\r\n\t\t\t// object specific properties\r\n\r\n\t\t\tif ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }\r\n\r\n\t\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\t\tobject.count = this.count;\r\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn element.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\t\tvar parameters = this.geometry.parameters;\r\n\r\n\t\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\t\tvar shapes = parameters.shapes;\r\n\r\n\t\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\t\tvar uuids = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\t\tobject.children = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRootObject ) {\r\n\r\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\t\t\tvar shapes = extractFromCache( meta.shapes );\r\n\r\n\t\t\t\tif ( geometries.length > 0 ) { output.geometries = geometries; }\r\n\t\t\t\tif ( materials.length > 0 ) { output.materials = materials; }\r\n\t\t\t\tif ( textures.length > 0 ) { output.textures = textures; }\r\n\t\t\t\tif ( images.length > 0 ) { output.images = images; }\r\n\t\t\t\tif ( shapes.length > 0 ) { output.shapes = shapes; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.object = object;\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t\t// extract data from the cache hash\r\n\t\t\t// remove metadata on each item\r\n\t\t\t// and return as array\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function ( recursive ) {\r\n\r\n\t\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tif ( recursive === undefined ) { recursive = true; }\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.up.copy( source.up );\r\n\r\n\t\t\tthis.position.copy( source.position );\r\n\t\t\tthis.quaternion.copy( source.quaternion );\r\n\t\t\tthis.scale.copy( source.scale );\r\n\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\t\tthis.layers.mask = source.layers.mask;\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.castShadow = source.castShadow;\r\n\t\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\tif ( recursive === true ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Scene() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Scene';\r\n\r\n\t\tthis.background = null;\r\n\t\tthis.fog = null;\r\n\t\tthis.overrideMaterial = null;\r\n\r\n\t\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tScene.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Scene,\r\n\r\n\t\tisScene: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tif ( source.background !== null ) { this.background = source.background.clone(); }\r\n\t\t\tif ( source.fog !== null ) { this.fog = source.fog.clone(); }\r\n\t\t\tif ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }\r\n\t\t\tif ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _points = [\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3(),\r\n\t\tnew Vector3()\r\n\t];\r\n\r\n\tvar _vector$2 = new Vector3();\r\n\r\n\tvar _box = new Box3();\r\n\r\n\t// triangle centered vertices\r\n\r\n\tvar _v0 = new Vector3();\r\n\tvar _v1$2 = new Vector3();\r\n\tvar _v2 = new Vector3();\r\n\r\n\t// triangle edge vectors\r\n\r\n\tvar _f0 = new Vector3();\r\n\tvar _f1 = new Vector3();\r\n\tvar _f2 = new Vector3();\r\n\r\n\tvar _center = new Vector3();\r\n\tvar _extents = new Vector3();\r\n\tvar _triangleNormal = new Vector3();\r\n\tvar _testAxis = new Vector3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tisBox3: true,\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromArray: function ( array ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar x = array[ i ];\r\n\t\t\t\tvar y = array[ i + 1 ];\r\n\t\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\tif ( z < minZ ) { minZ = z; }\r\n\r\n\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromBufferAttribute: function ( attribute ) {\r\n\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\r\n\t\t\tfor ( var i = 0, l = attribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar x = attribute.getX( i );\r\n\t\t\t\tvar y = attribute.getY( i );\r\n\t\t\t\tvar z = attribute.getZ( i );\r\n\r\n\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\tif ( z < minZ ) { minZ = z; }\r\n\r\n\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\t\t\t\tif ( z > maxZ ) { maxZ = z; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\treturn this.expandByObject( object );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByObject: function ( object ) {\r\n\r\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box.copy( geometry.boundingBox );\r\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tthis.expandByPoint( _box.min );\r\n\t\t\t\tthis.expandByPoint( _box.max );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByObject( children[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, _vector$2 );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\t\tvar min, max;\r\n\r\n\t\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsTriangle: function ( triangle ) {\r\n\r\n\t\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute box center and extents\r\n\t\t\tthis.getCenter( _center );\r\n\t\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t\t// translate triangle to aabb origin\r\n\t\t\t_v0.subVectors( triangle.a, _center );\r\n\t\t\t_v1$2.subVectors( triangle.b, _center );\r\n\t\t\t_v2.subVectors( triangle.c, _center );\r\n\r\n\t\t\t// compute edge vectors for triangle\r\n\t\t\t_f0.subVectors( _v1$2, _v0 );\r\n\t\t\t_f1.subVectors( _v2, _v1$2 );\r\n\t\t\t_f2.subVectors( _v0, _v2 );\r\n\r\n\t\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\t\tvar axes = [\r\n\t\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t\t];\r\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// test 3 face normals from the aabb\r\n\t\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\t\tif ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// finally testing the face normal of the triangle\r\n\t\t\t// use already existing triangle edge vectors here\r\n\t\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\t\treturn satForAxes( axes, _v0, _v1$2, _v2, _extents );\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingSphere: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Box3: .getBoundingSphere() target is now required' );\r\n\t\t\t\t//target = new Sphere(); // removed to avoid cyclic dependency\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( _vector$2 ).length() * 0.5;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\t\tif ( this.isEmpty() ) { this.makeEmpty(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif ( this.isEmpty() ) { return this; }\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\t\tthis.setFromPoints( _points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tfor ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t\t_testAxis.fromArray( axes, i );\r\n\t\t\t// project the aabb onto the seperating axis\r\n\t\t\tvar r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t\t// project all 3 vertices of the triangle onto the seperating axis\r\n\t\t\tvar p0 = v0.dot( _testAxis );\r\n\t\t\tvar p1 = v1.dot( _testAxis );\r\n\t\t\tvar p2 = v2.dot( _testAxis );\r\n\t\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t\t// the axis is seperating and we can exit\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tvar _box$1 = new Box3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Sphere( center, radius ) {\r\n\r\n\t\tthis.center = ( center !== undefined ) ? center : new Vector3();\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Sphere.prototype, {\r\n\r\n\t\tset: function ( center, radius ) {\r\n\r\n\t\t\tthis.center.copy( center );\r\n\t\t\tthis.radius = radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_box$1.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sphere ) {\r\n\r\n\t\t\tthis.center.copy( sphere.center );\r\n\t\t\tthis.radius = sphere.radius;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tempty: function () {\r\n\r\n\t\t\treturn ( this.radius <= 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsSphere( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.copy( point );\r\n\r\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetBoundingBox: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );\r\n\t\t\t\ttarget = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.set( this.center, this.center );\r\n\t\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.center.applyMatrix4( matrix );\r\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.center.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _vector$3 = new Vector3();\r\n\tvar _segCenter = new Vector3();\r\n\tvar _segDir = new Vector3();\r\n\tvar _diff = new Vector3();\r\n\r\n\tvar _edge1 = new Vector3();\r\n\tvar _edge2 = new Vector3();\r\n\tvar _normal = new Vector3();\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tfunction Ray( origin, direction ) {\r\n\r\n\t\tthis.origin = ( origin !== undefined ) ? origin : new Vector3();\r\n\t\tthis.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );\r\n\r\n\t}\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\tthis.origin.copy( origin );\r\n\t\t\tthis.direction.copy( direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( ray ) {\r\n\r\n\t\t\tthis.origin.copy( ray.origin );\r\n\t\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( v ) {\r\n\r\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trecast: function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, _vector$3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\t\tvar directionDistance = target.dot( this.direction );\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToPoint: function ( point ) {\r\n\r\n\t\t\tvar directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn _vector$3.distanceToSquared( point );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( _segDir );\r\n\t\t\tvar b0 = _diff.dot( this.direction );\r\n\t\t\tvar b1 = - _diff.dot( _segDir );\r\n\t\t\tvar c = _diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t},\r\n\r\n\t\tintersectSphere: function ( sphere, target ) {\r\n\r\n\t\t\t_vector$3.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = _vector$3.dot( this.direction );\r\n\t\t\tvar d2 = _vector$3.dot( _vector$3 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) { return null; }\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) { return null; }\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) { return this.at( t1, target ); }\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t\t// Return if the ray never intersects the plane\r\n\r\n\t\t\treturn t >= 0 ? t : null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectPlane: function ( plane, target ) {\r\n\r\n\t\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\t\tif ( t === null ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.at( t, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t\t// check if the ray lies on the plane first\r\n\r\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t},\r\n\r\n\t\tintersectBox: function ( box, target ) {\r\n\r\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\t\tvar origin = this.origin;\r\n\r\n\t\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }\r\n\r\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\t\tif ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }\r\n\r\n\t\t\tif ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }\r\n\r\n\t\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }\r\n\r\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }\r\n\r\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }\r\n\r\n\t\t\t//return point closest to the ray (positive side)\r\n\r\n\t\t\tif ( tmax < 0 ) { return null; }\r\n\r\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, _vector$3 ) !== null;\r\n\r\n\t\t},\r\n\r\n\t\tintersectTriangle: function ( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\t_edge1.subVectors( b, a );\r\n\t\t\t_edge2.subVectors( c, a );\r\n\t\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( _normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) { return null; }\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_diff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( ray ) {\r\n\r\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _vector1 = new Vector3();\r\n\tvar _vector2 = new Vector3();\r\n\tvar _normalMatrix = new Matrix3();\r\n\r\n\tfunction Plane( normal, constant ) {\r\n\r\n\t\t// normal is assumed to be normalized\r\n\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Plane.prototype, {\r\n\r\n\t\tisPlane: true,\r\n\r\n\t\tset: function ( normal, constant ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCoplanarPoints: function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( plane ) {\r\n\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnegate: function () {\r\n\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t\t},\r\n\r\n\t\tprojectPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .projectPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\r\n\r\n\t\t},\r\n\r\n\t\tintersectLine: function ( line, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .intersectLine() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar direction = line.delta( _vector1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsLine: function ( line ) {\r\n\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t\t},\r\n\r\n\t\tcoplanarPoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .coplanarPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\t\tvar referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( plane ) {\r\n\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _v0$1 = new Vector3();\r\n\tvar _v1$3 = new Vector3();\r\n\tvar _v2$1 = new Vector3();\r\n\tvar _v3 = new Vector3();\r\n\r\n\tvar _vab = new Vector3();\r\n\tvar _vac = new Vector3();\r\n\tvar _vbc = new Vector3();\r\n\tvar _vap = new Vector3();\r\n\tvar _vbp = new Vector3();\r\n\tvar _vcp = new Vector3();\r\n\r\n\tfunction Triangle( a, b, c ) {\r\n\r\n\t\tthis.a = ( a !== undefined ) ? a : new Vector3();\r\n\t\tthis.b = ( b !== undefined ) ? b : new Vector3();\r\n\t\tthis.c = ( c !== undefined ) ? c : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tgetNormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getNormal() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.subVectors( c, b );\r\n\t\t\t_v0$1.subVectors( a, b );\r\n\t\t\ttarget.cross( _v0$1 );\r\n\r\n\t\t\tvar targetLengthSq = target.lengthSq();\r\n\t\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t\t},\r\n\r\n\t\t// static/instance method to calculate barycentric coordinates\r\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\t\tgetBarycoord: function ( point, a, b, c, target ) {\r\n\r\n\t\t\t_v0$1.subVectors( c, a );\r\n\t\t\t_v1$3.subVectors( b, a );\r\n\t\t\t_v2$1.subVectors( point, a );\r\n\r\n\t\t\tvar dot00 = _v0$1.dot( _v0$1 );\r\n\t\t\tvar dot01 = _v0$1.dot( _v1$3 );\r\n\t\t\tvar dot02 = _v0$1.dot( _v2$1 );\r\n\t\t\tvar dot11 = _v1$3.dot( _v1$3 );\r\n\t\t\tvar dot12 = _v1$3.dot( _v2$1 );\r\n\r\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getBarycoord() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// collinear or singular triangle\r\n\t\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\treturn target.set( - 2, - 1, - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar invDenom = 1 / denom;\r\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point, a, b, c ) {\r\n\r\n\t\t\tTriangle.getBarycoord( point, a, b, c, _v3 );\r\n\r\n\t\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\tthis.getBarycoord( point, p1, p2, p3, _v3 );\r\n\r\n\t\t\ttarget.set( 0, 0 );\r\n\t\t\ttarget.addScaledVector( uv1, _v3.x );\r\n\t\t\ttarget.addScaledVector( uv2, _v3.y );\r\n\t\t\ttarget.addScaledVector( uv3, _v3.z );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tisFrontFacing: function ( a, b, c, direction ) {\r\n\r\n\t\t\t_v0$1.subVectors( c, b );\r\n\t\t\t_v1$3.subVectors( a, b );\r\n\r\n\t\t\t// strictly front facing\r\n\t\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tset: function ( a, b, c ) {\r\n\r\n\t\t\tthis.a.copy( a );\r\n\t\t\tthis.b.copy( b );\r\n\t\t\tthis.c.copy( c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\t\tthis.a.copy( points[ i0 ] );\r\n\t\t\tthis.b.copy( points[ i1 ] );\r\n\t\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( triangle ) {\r\n\r\n\t\t\tthis.a.copy( triangle.a );\r\n\t\t\tthis.b.copy( triangle.b );\r\n\t\t\tthis.c.copy( triangle.c );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetArea: function () {\r\n\r\n\t\t\t_v0$1.subVectors( this.c, this.b );\r\n\t\t\t_v1$3.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tgetMidpoint: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getMidpoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t\t},\r\n\r\n\t\tgetNormal: function ( target ) {\r\n\r\n\t\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetPlane: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .getPlane() target is now required' );\r\n\t\t\t\ttarget = new Plane();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tgetBarycoord: function ( point, target ) {\r\n\r\n\t\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t\t},\r\n\r\n\t\tgetUV: function ( point, uv1, uv2, uv3, target ) {\r\n\r\n\t\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t\t},\r\n\r\n\t\tisFrontFacing: function ( direction ) {\r\n\r\n\t\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\treturn box.intersectsTriangle( this );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( p, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar a = this.a, b = this.b, c = this.c;\r\n\t\t\tvar v, w;\r\n\r\n\t\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t\t_vab.subVectors( b, a );\r\n\t\t\t_vac.subVectors( c, a );\r\n\t\t\t_vap.subVectors( p, a );\r\n\t\t\tvar d1 = _vab.dot( _vap );\r\n\t\t\tvar d2 = _vac.dot( _vap );\r\n\t\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\t\treturn target.copy( a );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vbp.subVectors( p, b );\r\n\t\t\tvar d3 = _vab.dot( _vbp );\r\n\t\t\tvar d4 = _vac.dot( _vbp );\r\n\t\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\t\treturn target.copy( b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vc = d1 * d4 - d3 * d2;\r\n\t\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vcp.subVectors( p, c );\r\n\t\t\tvar d5 = _vab.dot( _vcp );\r\n\t\t\tvar d6 = _vac.dot( _vcp );\r\n\t\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\t\treturn target.copy( c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vb = d5 * d2 - d1 * d6;\r\n\t\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar va = d3 * d6 - d5 * d4;\r\n\t\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t\t_vbc.subVectors( c, b );\r\n\t\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face region\r\n\t\t\tvar denom = 1 / ( va + vb + vc );\r\n\t\t\t// u = va * denom\r\n\t\t\tv = vb * denom;\r\n\t\t\tw = vc * denom;\r\n\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( triangle ) {\r\n\r\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n\tvar _hslA = { h: 0, s: 0, l: 0 };\r\n\tvar _hslB = { h: 0, s: 0, l: 0 };\r\n\r\n\tfunction Color( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\t\t\treturn this.set( r );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.setRGB( r, g, b );\r\n\r\n\t}\r\n\r\n\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\tif ( t < 0 ) { t += 1; }\r\n\t\tif ( t > 1 ) { t -= 1; }\r\n\t\tif ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }\r\n\t\tif ( t < 1 / 2 ) { return q; }\r\n\t\tif ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction SRGBToLinear( c ) {\r\n\r\n\t\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n\t}\r\n\r\n\tfunction LinearToSRGB( c ) {\r\n\r\n\t\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n\t}\r\n\r\n\tObject.assign( Color.prototype, {\r\n\r\n\t\tisColor: true,\r\n\r\n\t\tr: 1, g: 1, b: 1,\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.r = scalar;\r\n\t\t\tthis.g = scalar;\r\n\t\t\tthis.b = scalar;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHex: function ( hex ) {\r\n\r\n\t\t\thex = Math.floor( hex );\r\n\r\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\t\tthis.r = r;\r\n\t\t\tthis.g = g;\r\n\t\t\tthis.b = b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetHSL: function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = _Math.euclideanModulo( h, 1 );\r\n\t\t\ts = _Math.clamp( s, 0, 1 );\r\n\t\t\tl = _Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetStyle: function ( style ) {\r\n\r\n\t\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\t\tif ( string === undefined ) { return; }\r\n\r\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar m;\r\n\r\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t\t// rgb / hsl\r\n\r\n\t\t\t\tvar color;\r\n\t\t\t\tvar name = m[ 1 ];\r\n\t\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'rgb':\r\n\t\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'hsl':\r\n\t\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t\t// hex color\r\n\r\n\t\t\t\tvar hex = m[ 1 ];\r\n\t\t\t\tvar size = hex.length;\r\n\r\n\t\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t\t// #ff0\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t\t// #ff0000\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t\treturn this.setColorName( style );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetColorName: function ( style ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = _colorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( color ) {\r\n\r\n\t\t\tthis.r = color.r;\r\n\t\t\tthis.g = color.g;\r\n\t\t\tthis.b = color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\r\n\r\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\t\tif ( gammaFactor === undefined ) { gammaFactor = 2.0; }\r\n\r\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertGammaToLinear: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyGammaToLinear( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToGamma: function ( gammaFactor ) {\r\n\r\n\t\t\tthis.copyLinearToGamma( this, gammaFactor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopySRGBToLinear: function ( color ) {\r\n\r\n\t\t\tthis.r = SRGBToLinear( color.r );\r\n\t\t\tthis.g = SRGBToLinear( color.g );\r\n\t\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyLinearToSRGB: function ( color ) {\r\n\r\n\t\t\tthis.r = LinearToSRGB( color.r );\r\n\t\t\tthis.g = LinearToSRGB( color.g );\r\n\t\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertSRGBToLinear: function () {\r\n\r\n\t\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconvertLinearToSRGB: function () {\r\n\r\n\t\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetHex: function () {\r\n\r\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t\t},\r\n\r\n\t\tgetHexString: function () {\r\n\r\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t\t},\r\n\r\n\t\tgetHSL: function ( target ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: .getHSL() target is now required' );\r\n\t\t\t\ttarget = { h: 0, s: 0, l: 0 };\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\t\tvar max = Math.max( r, g, b );\r\n\t\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\t\tvar hue, saturation;\r\n\t\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\t\tif ( min === max ) {\r\n\r\n\t\t\t\thue = 0;\r\n\t\t\t\tsaturation = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar delta = max - min;\r\n\r\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thue /= 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.h = hue;\r\n\t\t\ttarget.s = saturation;\r\n\t\t\ttarget.l = lightness;\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tgetStyle: function () {\r\n\r\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t\t},\r\n\r\n\t\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\t\tthis.getHSL( _hslA );\r\n\r\n\t\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\r\n\r\n\t\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( color ) {\r\n\r\n\t\t\tthis.r += color.r;\r\n\t\t\tthis.g += color.g;\r\n\t\t\tthis.b += color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddColors: function ( color1, color2 ) {\r\n\r\n\t\t\tthis.r = color1.r + color2.r;\r\n\t\t\tthis.g = color1.g + color2.g;\r\n\t\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddScalar: function ( s ) {\r\n\r\n\t\t\tthis.r += s;\r\n\t\t\tthis.g += s;\r\n\t\t\tthis.b += s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsub: function ( color ) {\r\n\r\n\t\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiply: function ( color ) {\r\n\r\n\t\t\tthis.r *= color.r;\r\n\t\t\tthis.g *= color.g;\r\n\t\t\tthis.b *= color.b;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmultiplyScalar: function ( s ) {\r\n\r\n\t\t\tthis.r *= s;\r\n\t\t\tthis.g *= s;\r\n\t\t\tthis.b *= s;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( color, alpha ) {\r\n\r\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerpHSL: function ( color, alpha ) {\r\n\r\n\t\t\tthis.getHSL( _hslA );\r\n\t\t\tcolor.getHSL( _hslB );\r\n\r\n\t\t\tvar h = _Math.lerp( _hslA.h, _hslB.h, alpha );\r\n\t\t\tvar s = _Math.lerp( _hslA.s, _hslB.s, alpha );\r\n\t\t\tvar l = _Math.lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\t\tthis.setHSL( h, s, l );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( c ) {\r\n\r\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.r = array[ offset ];\r\n\t\t\tthis.g = array[ offset + 1 ];\r\n\t\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tarray[ offset ] = this.r;\r\n\t\t\tarray[ offset + 1 ] = this.g;\r\n\t\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn this.getHex();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tColor.NAMES = _colorKeywords;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Face3( a, b, c, normal, color, materialIndex ) {\r\n\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\r\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\r\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\r\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( Face3.prototype, {\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.a = source.a;\r\n\t\t\tthis.b = source.b;\r\n\t\t\tthis.c = source.c;\r\n\r\n\t\t\tthis.normal.copy( source.normal );\r\n\t\t\tthis.color.copy( source.color );\r\n\r\n\t\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar materialId = 0;\r\n\r\n\tfunction Material() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.blending = NormalBlending;\r\n\t\tthis.side = FrontSide;\r\n\t\tthis.flatShading = false;\r\n\t\tthis.vertexTangents = false;\r\n\t\tthis.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\r\n\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\t\tthis.stencilRef = 0;\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\tthis.clippingPlanes = null;\r\n\t\tthis.clipIntersection = false;\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\tthis.dithering = false;\r\n\r\n\t\tthis.alphaTest = 0;\r\n\t\tthis.premultipliedAlpha = false;\r\n\r\n\t\tthis.visible = true;\r\n\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tMaterial.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Material,\r\n\r\n\t\tisMaterial: true,\r\n\r\n\t\tonBeforeCompile: function () {},\r\n\r\n\t\tsetValues: function ( values ) {\r\n\r\n\t\t\tif ( values === undefined ) { return; }\r\n\r\n\t\t\tfor ( var key in values ) {\r\n\r\n\t\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for backward compatability if shading is set in the constructor\r\n\t\t\t\tif ( key === 'shading' ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Material',\r\n\t\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Material serialization\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\r\n\t\t\tif ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }\r\n\r\n\t\t\tif ( this.roughness !== undefined ) { data.roughness = this.roughness; }\r\n\t\t\tif ( this.metalness !== undefined ) { data.metalness = this.metalness; }\r\n\r\n\t\t\tif ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }\r\n\t\t\tif ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }\r\n\t\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }\r\n\r\n\t\t\tif ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }\r\n\t\t\tif ( this.shininess !== undefined ) { data.shininess = this.shininess; }\r\n\t\t\tif ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }\r\n\t\t\tif ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }\r\n\r\n\t\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }\r\n\t\t\tif ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }\r\n\r\n\t\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\r\n\r\n\t\t\t\tif ( this.combine !== undefined ) { data.combine = this.combine; }\r\n\t\t\t\tif ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.size !== undefined ) { data.size = this.size; }\r\n\t\t\tif ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }\r\n\r\n\t\t\tif ( this.blending !== NormalBlending ) { data.blending = this.blending; }\r\n\t\t\tif ( this.flatShading === true ) { data.flatShading = this.flatShading; }\r\n\t\t\tif ( this.side !== FrontSide ) { data.side = this.side; }\r\n\t\t\tif ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }\r\n\r\n\t\t\tif ( this.opacity < 1 ) { data.opacity = this.opacity; }\r\n\t\t\tif ( this.transparent === true ) { data.transparent = this.transparent; }\r\n\r\n\t\t\tdata.depthFunc = this.depthFunc;\r\n\t\t\tdata.depthTest = this.depthTest;\r\n\t\t\tdata.depthWrite = this.depthWrite;\r\n\r\n\t\t\tdata.stencilWrite = this.stencilWrite;\r\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\r\n\t\t\tdata.stencilFunc = this.stencilFunc;\r\n\t\t\tdata.stencilRef = this.stencilRef;\r\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\r\n\t\t\tdata.stencilFail = this.stencilFail;\r\n\t\t\tdata.stencilZFail = this.stencilZFail;\r\n\t\t\tdata.stencilZPass = this.stencilZPass;\r\n\r\n\t\t\t// rotation (SpriteMaterial)\r\n\t\t\tif ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }\r\n\r\n\t\t\tif ( this.polygonOffset === true ) { data.polygonOffset = true; }\r\n\t\t\tif ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }\r\n\t\t\tif ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }\r\n\r\n\t\t\tif ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }\r\n\t\t\tif ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }\r\n\t\t\tif ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }\r\n\t\t\tif ( this.scale !== undefined ) { data.scale = this.scale; }\r\n\r\n\t\t\tif ( this.dithering === true ) { data.dithering = true; }\r\n\r\n\t\t\tif ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }\r\n\t\t\tif ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }\r\n\r\n\t\t\tif ( this.wireframe === true ) { data.wireframe = this.wireframe; }\r\n\t\t\tif ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }\r\n\t\t\tif ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }\r\n\t\t\tif ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }\r\n\r\n\t\t\tif ( this.morphTargets === true ) { data.morphTargets = true; }\r\n\t\t\tif ( this.morphNormals === true ) { data.morphNormals = true; }\r\n\t\t\tif ( this.skinning === true ) { data.skinning = true; }\r\n\r\n\t\t\tif ( this.visible === false ) { data.visible = false; }\r\n\r\n\t\t\tif ( this.toneMapped === false ) { data.toneMapped = false; }\r\n\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }\r\n\r\n\t\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn values;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isRoot ) {\r\n\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\t\tif ( textures.length > 0 ) { data.textures = textures; }\r\n\t\t\t\tif ( images.length > 0 ) { data.images = images; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\tthis.fog = source.fog;\r\n\r\n\t\t\tthis.blending = source.blending;\r\n\t\t\tthis.side = source.side;\r\n\t\t\tthis.flatShading = source.flatShading;\r\n\t\t\tthis.vertexTangents = source.vertexTangents;\r\n\t\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\t\tthis.opacity = source.opacity;\r\n\t\t\tthis.transparent = source.transparent;\r\n\r\n\t\t\tthis.blendSrc = source.blendSrc;\r\n\t\t\tthis.blendDst = source.blendDst;\r\n\t\t\tthis.blendEquation = source.blendEquation;\r\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\t\tthis.depthFunc = source.depthFunc;\r\n\t\t\tthis.depthTest = source.depthTest;\r\n\t\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\t\tthis.stencilRef = source.stencilRef;\r\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\t\tthis.stencilFail = source.stencilFail;\r\n\t\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\t\tvar srcPlanes = source.clippingPlanes,\r\n\t\t\t\tdstPlanes = null;\r\n\r\n\t\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\t\tvar n = srcPlanes.length;\r\n\t\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\t\t{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.clippingPlanes = dstPlanes;\r\n\t\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\t\tthis.precision = source.precision;\r\n\r\n\t\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\t\tthis.dithering = source.dithering;\r\n\r\n\t\t\tthis.alphaTest = source.alphaTest;\r\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\t\tthis.visible = source.visible;\r\n\r\n\t\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Material.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshBasicMaterial.prototype.constructor = MeshBasicMaterial;\r\n\r\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\r\n\r\n\tMeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( BufferAttribute.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\r\n\t\tisBufferAttribute: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetUsage: function ( value ) {\r\n\r\n\t\t\tthis.usage = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.name = source.name;\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.itemSize = source.itemSize;\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.normalized = source.normalized;\r\n\r\n\t\t\tthis.usage = source.usage;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.itemSize;\r\n\t\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyArray: function ( array ) {\r\n\r\n\t\t\tthis.array.set( array );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\t\tcolor = new Color();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector2();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector3();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\t\tvar array = this.array, offset = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new Vector4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t\t},\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex *= this.itemSize;\r\n\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\treturn {\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\ttype: this.array.constructor.name,\r\n\t\t\t\tarray: Array.prototype.slice.call( this.array ),\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction Int8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\r\n\r\n\r\n\tfunction Uint8ClampedBufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\r\n\r\n\r\n\tfunction Int16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\r\n\r\n\r\n\tfunction Uint16BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\r\n\r\n\r\n\tfunction Int32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tInt32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\r\n\r\n\r\n\tfunction Uint32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tUint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\r\n\r\n\r\n\tfunction Float32BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\r\n\r\n\r\n\tfunction Float64BufferAttribute( array, itemSize, normalized ) {\r\n\r\n\t\tBufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n\tFloat64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );\r\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectGeometry() {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.uvs2 = [];\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.morphTargets = {};\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\t// this.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( DirectGeometry.prototype, {\r\n\r\n\t\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\t\tvar group;\r\n\t\t\tvar groups = [];\r\n\t\t\tvar materialIndex = undefined;\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\t// materials\r\n\r\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgroup = {\r\n\t\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.groups = groups;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\t\tvar morphTargetsPosition;\r\n\r\n\t\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ i ] = {\r\n\t\t\t\t\t\tname: morphTargets[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = geometry.morphNormals;\r\n\t\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\t\tvar morphTargetsNormal;\r\n\r\n\t\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ i ] = {\r\n\t\t\t\t\t\tname: morphNormals[ i ].name,\r\n\t\t\t\t\t \tdata: []\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tvar skinIndices = geometry.skinIndices;\r\n\t\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( vertices.length > 0 && faces.length === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// morphs\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// skins\r\n\r\n\t\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeGroups( geometry );\r\n\r\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction arrayMax( array ) {\r\n\r\n\t\tif ( array.length === 0 ) { return - Infinity; }\r\n\r\n\t\tvar max = array[ 0 ];\r\n\r\n\t\tfor ( var i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\t\tif ( array[ i ] > max ) { max = array[ i ]; }\r\n\r\n\t\t}\r\n\r\n\t\treturn max;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id\r\n\r\n\tvar _m1$2 = new Matrix4();\r\n\tvar _obj = new Object3D();\r\n\tvar _offset = new Vector3();\r\n\tvar _box$2 = new Box3();\r\n\tvar _boxMorphTargets = new Box3();\r\n\tvar _vector$4 = new Vector3();\r\n\r\n\tfunction BufferGeometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.morphTargetsRelative = false;\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\tBufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometry,\r\n\r\n\t\tisBufferGeometry: true,\r\n\r\n\t\tgetIndex: function () {\r\n\r\n\t\t\treturn this.index;\r\n\r\n\t\t},\r\n\r\n\t\tsetIndex: function ( index ) {\r\n\r\n\t\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.index = index;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetAttribute: function ( name ) {\r\n\r\n\t\t\treturn this.attributes[ name ];\r\n\r\n\t\t},\r\n\r\n\t\tsetAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdeleteAttribute: function ( name ) {\r\n\r\n\t\t\tdelete this.attributes[ name ];\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\t\tthis.groups.push( {\r\n\r\n\t\t\t\tstart: start,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclearGroups: function () {\r\n\r\n\t\t\tthis.groups = [];\r\n\r\n\t\t},\r\n\r\n\t\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\t\tthis.drawRange.start = start;\r\n\t\t\tthis.drawRange.count = count;\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tmatrix.applyToBufferAttribute( position );\r\n\t\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normal = this.attributes.normal;\r\n\r\n\t\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normal );\r\n\t\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tangent = this.attributes.tangent;\r\n\r\n\t\t\tif ( tangent !== undefined ) {\r\n\r\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t\t// Tangent is vec4, but the '.w' component is a sign value (+1/-1).\r\n\t\t\t\tnormalMatrix.applyToBufferAttribute( tangent );\r\n\t\t\t\ttangent.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\t_m1$2.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\t_m1$2.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\t_m1$2.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( x, y, z ) {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\t_m1$2.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( x, y, z ) {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\t_m1$2.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$2 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( vector ) {\r\n\r\n\t\t\t_obj.lookAt( vector );\r\n\r\n\t\t\t_obj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( _obj.matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( _offset ).negate();\r\n\r\n\t\t\tthis.translate( _offset.x, _offset.y, _offset.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromObject: function ( object ) {\r\n\r\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isPoints || object.isLine ) {\r\n\r\n\t\t\t\tvar positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\r\n\t\t\t\tvar colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\t\tthis.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\t\tthis.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\t\tvar lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\t\tthis.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tvar position = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateFromObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\t\tif ( geometry.elementsNeedUpdate === true ) {\r\n\r\n\t\t\t\t\tdirect = undefined;\r\n\t\t\t\t\tgeometry.elementsNeedUpdate = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t\tgeometry = direct;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\r\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.position;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.normal;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\t\tattribute = this.attributes.color;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.uv;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\t\tattribute = this.attributes.lineDistance;\r\n\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromGeometry: function ( geometry ) {\r\n\r\n\t\t\tgeometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t\t},\r\n\r\n\t\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\t\tthis.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\t\tthis.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\t\tthis.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\t\tthis.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\t\tvar attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\r\n\t\t\t\t\tattribute.name = morphTarget.name;\r\n\r\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning\r\n\r\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\t\tvar skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\t\tthis.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\t\tvar skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\t\tthis.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\t\tif ( position !== undefined ) {\r\n\r\n\t\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\t_box$2.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.min, _box$2.min );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( this.boundingBox.max, _box$2.max );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.min );\r\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$2.max );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar position = this.attributes.position;\r\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\t\tif ( position ) {\r\n\r\n\t\t\t\t// first, find the center of the bounding sphere\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\t_box$2.setFromBufferAttribute( position );\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t\t_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _vector$4 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.min );\r\n\t\t\t\t\t\t\t_box$2.expandByPoint( _boxMorphTargets.max );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box$2.getCenter( center );\r\n\r\n\t\t\t\t// second, try to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t_vector$4.fromBufferAttribute( position, i );\r\n\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// process morph attributes if present\r\n\r\n\t\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute( morphAttribute, j );\r\n\r\n\t\t\t\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\r\n\t\t\t\t\t\t\t\t_vector$4.add( _offset );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\t// backwards compatibility\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function () {\r\n\r\n\t\t\tvar index = this.index;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tif ( attributes.position ) {\r\n\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\t\tthis.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\t// indexed elements\r\n\r\n\t\t\t\tif ( index ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, offset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( offset === undefined ) {\r\n\r\n\t\t\t\toffset = 0;\r\n\r\n\t\t\t\tconsole.warn(\r\n\t\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\r\n\t\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) { continue; }\r\n\r\n\t\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\r\n\t\t\t\tvar length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\r\n\r\n\t\t\t\tfor ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeNormals: function () {\r\n\r\n\t\t\tvar normals = this.attributes.normal;\r\n\r\n\t\t\tfor ( var i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t_vector$4.x = normals.getX( i );\r\n\t\t\t\t_vector$4.y = normals.getY( i );\r\n\t\t\t\t_vector$4.z = normals.getZ( i );\r\n\r\n\t\t\t\t_vector$4.normalize();\r\n\r\n\t\t\t\tnormals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoNonIndexed: function () {\r\n\r\n\t\t\tfunction convertBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\t\tvar array = attribute.array;\r\n\t\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new BufferAttribute( array2, itemSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.index === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry2 = new BufferGeometry();\r\n\r\n\t\t\tvar indices = this.index.array;\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\tgeometry2.setAttribute( name, newAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = this.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar morphArray = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar attribute = morphAttribute[ i ];\r\n\r\n\t\t\t\t\tvar newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\t\tmorphArray.push( newAttribute );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry2;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard BufferGeometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\t\t\tif ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = { attributes: {} };\r\n\r\n\t\t\tvar index = this.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdata.data.index = {\r\n\t\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\t\tarray: Array.prototype.slice.call( index.array )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = this.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\t\tvar attributeData = attribute.toJSON();\r\n\r\n\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\r\n\r\n\t\t\t\tdata.data.attributes[ key ] = attributeData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = {};\r\n\t\t\tvar hasMorphAttributes = false;\r\n\r\n\t\t\tfor ( var key in this.morphAttributes ) {\r\n\r\n\t\t\t\tvar attributeArray = this.morphAttributes[ key ];\r\n\r\n\t\t\t\tvar array = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar attribute = attributeArray[ i ];\r\n\r\n\t\t\t\t\tvar attributeData = attribute.toJSON();\r\n\r\n\t\t\t\t\tif ( attribute.name !== '' ) { attributeData.name = attribute.name; }\r\n\r\n\t\t\t\t\tarray.push( attributeData );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( array.length > 0 ) {\r\n\r\n\t\t\t\t\tmorphAttributes[ key ] = array;\r\n\r\n\t\t\t\t\thasMorphAttributes = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasMorphAttributes ) {\r\n\r\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\r\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = this.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new BufferGeometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar name, i, l;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.index = null;\r\n\t\t\tthis.attributes = {};\r\n\t\t\tthis.morphAttributes = {};\r\n\t\t\tthis.groups = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// index\r\n\r\n\t\t\tvar index = source.index;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// attributes\r\n\r\n\t\t\tvar attributes = source.attributes;\r\n\r\n\t\t\tfor ( name in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\t\t\tthis.setAttribute( name, attribute.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph attributes\r\n\r\n\t\t\tvar morphAttributes = source.morphAttributes;\r\n\r\n\t\t\tfor ( name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\t\tfor ( i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tarray.push( morphAttribute[ i ].clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n\t\t\t// groups\r\n\r\n\t\t\tvar groups = source.groups;\r\n\r\n\t\t\tfor ( i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// draw range\r\n\r\n\t\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t\t// user data\r\n\r\n\t\t\tthis.userData = source.userData;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author jonobr1 / http://jonobr1.com/\r\n\t */\r\n\r\n\tvar _inverseMatrix = new Matrix4();\r\n\tvar _ray = new Ray();\r\n\tvar _sphere = new Sphere();\r\n\r\n\tvar _vA = new Vector3();\r\n\tvar _vB = new Vector3();\r\n\tvar _vC = new Vector3();\r\n\r\n\tvar _tempA = new Vector3();\r\n\tvar _tempB = new Vector3();\r\n\tvar _tempC = new Vector3();\r\n\r\n\tvar _morphA = new Vector3();\r\n\tvar _morphB = new Vector3();\r\n\tvar _morphC = new Vector3();\r\n\r\n\tvar _uvA = new Vector2();\r\n\tvar _uvB = new Vector2();\r\n\tvar _uvC = new Vector2();\r\n\r\n\tvar _intersectionPoint = new Vector3();\r\n\tvar _intersectionPointWorld = new Vector3();\r\n\r\n\tfunction Mesh( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.drawMode = TrianglesDrawMode;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tMesh.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Mesh,\r\n\r\n\t\tisMesh: true,\r\n\r\n\t\tsetDrawMode: function ( value ) {\r\n\r\n\t\t\tthis.drawMode = value;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.drawMode = source.drawMode;\r\n\r\n\t\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\tif ( material === undefined ) { return; }\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix.getInverse( matrixWorld );\r\n\t\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t\t// Check boundingBox before continuing\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// check unsupported draw modes\r\n\r\n\t\t\tif ( this.drawMode !== TrianglesDrawMode ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar intersection;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar position = geometry.attributes.position;\r\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\r\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\r\n\t\t\t\tvar uv = geometry.attributes.uv;\r\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\r\n\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\tvar drawRange = geometry.drawRange;\r\n\t\t\t\tvar i, j, il, jl;\r\n\t\t\t\tvar group, groupMaterial;\r\n\t\t\t\tvar start, end;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t// indexed buffer geometry\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = index.getX( j );\r\n\t\t\t\t\t\t\t\tb = index.getX( j + 1 );\r\n\t\t\t\t\t\t\t\tc = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\ta = index.getX( i );\r\n\t\t\t\t\t\t\tb = index.getX( i + 1 );\r\n\t\t\t\t\t\t\tc = index.getX( i + 2 );\r\n\r\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tgroup = groups[ i ];\r\n\t\t\t\t\t\t\tgroupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tstart = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\ta = j;\r\n\t\t\t\t\t\t\t\tb = j + 1;\r\n\t\t\t\t\t\t\t\tc = j + 2;\r\n\r\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstart = Math.max( 0, drawRange.start );\r\n\t\t\t\t\t\tend = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\ta = i;\r\n\t\t\t\t\t\t\tb = i + 1;\r\n\t\t\t\t\t\t\tc = i + 2;\r\n\r\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\r\n\r\n\t\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isMultiMaterial = Array.isArray( material );\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar uvs;\r\n\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }\r\n\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;\r\n\r\n\t\t\t\t\tif ( faceMaterial === undefined ) { continue; }\r\n\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\t\tintersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tif ( uvs && uvs[ f ] ) {\r\n\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\t_uvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\t_uvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\t_uvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\tvar intersect;\r\n\r\n\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\r\n\r\n\t\t}\r\n\r\n\t\tif ( intersect === null ) { return null; }\r\n\r\n\t\t_intersectionPointWorld.copy( point );\r\n\t\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return null; }\r\n\r\n\t\treturn {\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: _intersectionPointWorld.clone(),\r\n\t\t\tobject: object\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\r\n\r\n\t\t_vA.fromBufferAttribute( position, a );\r\n\t\t_vB.fromBufferAttribute( position, b );\r\n\t\t_vC.fromBufferAttribute( position, c );\r\n\r\n\t\tvar morphInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( material.morphTargets && morphPosition && morphInfluences ) {\r\n\r\n\t\t\t_morphA.set( 0, 0, 0 );\r\n\t\t\t_morphB.set( 0, 0, 0 );\r\n\t\t\t_morphC.set( 0, 0, 0 );\r\n\r\n\t\t\tfor ( var i = 0, il = morphPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphInfluences[ i ];\r\n\t\t\t\tvar morphAttribute = morphPosition[ i ];\r\n\r\n\t\t\t\tif ( influence === 0 ) { continue; }\r\n\r\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\r\n\t\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\r\n\t\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\r\n\r\n\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\r\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\r\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\r\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\r\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_vA.add( _morphA );\r\n\t\t\t_vB.add( _morphB );\r\n\t\t\t_vC.add( _morphC );\r\n\r\n\t\t}\r\n\r\n\t\tvar intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\r\n\r\n\t\tif ( intersection ) {\r\n\r\n\t\t\tif ( uv ) {\r\n\r\n\t\t\t\t_uvA.fromBufferAttribute( uv, a );\r\n\t\t\t\t_uvB.fromBufferAttribute( uv, b );\r\n\t\t\t\t_uvC.fromBufferAttribute( uv, c );\r\n\r\n\t\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uv2 ) {\r\n\r\n\t\t\t\t_uvA.fromBufferAttribute( uv2, a );\r\n\t\t\t\t_uvB.fromBufferAttribute( uv2, b );\r\n\t\t\t\t_uvC.fromBufferAttribute( uv2, c );\r\n\r\n\t\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar face = new Face3( a, b, c );\r\n\t\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\r\n\r\n\t\t\tintersection.face = face;\r\n\r\n\t\t}\r\n\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _geometryId = 0; // Geometry uses even numbers as Id\r\n\tvar _m1$3 = new Matrix4();\r\n\tvar _obj$1 = new Object3D();\r\n\tvar _offset$1 = new Vector3();\r\n\r\n\tfunction Geometry() {\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _geometryId += 2 } );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Geometry';\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [[]];\r\n\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\r\n\t\tthis.lineDistances = [];\r\n\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// update flags\r\n\r\n\t\tthis.elementsNeedUpdate = false;\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.lineDistancesNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\r\n\t}\r\n\r\n\tGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: Geometry,\r\n\r\n\t\tisGeometry: true,\r\n\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateX: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world x-axis\r\n\r\n\t\t\t_m1$3.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateY: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world y-axis\r\n\r\n\t\t\t_m1$3.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\trotateZ: function ( angle ) {\r\n\r\n\t\t\t// rotate geometry around world z-axis\r\n\r\n\t\t\t_m1$3.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( x, y, z ) {\r\n\r\n\t\t\t// translate geometry\r\n\r\n\t\t\t_m1$3.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tscale: function ( x, y, z ) {\r\n\r\n\t\t\t// scale geometry\r\n\r\n\t\t\t_m1$3.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( _m1$3 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlookAt: function ( vector ) {\r\n\r\n\t\t\t_obj$1.lookAt( vector );\r\n\r\n\t\t\t_obj$1.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( _obj$1.matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\r\n\t\t\tif ( attributes.position === undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\t\tif ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }\r\n\r\n\t\t\tfor ( var i = 0; i < positions.length; i += 3 ) {\r\n\r\n\t\t\t\tscope.vertices.push( new Vector3().fromArray( positions, i ) );\r\n\r\n\t\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\t\tscope.colors.push( new Color().fromArray( colors, i ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\t\tvar vertexColors = ( colors === undefined ) ? [] : [\r\n\t\t\t\t\tscope.colors[ a ].clone(),\r\n\t\t\t\t\tscope.colors[ b ].clone(),\r\n\t\t\t\t\tscope.colors[ c ].clone() ];\r\n\r\n\t\t\t\tvar vertexNormals = ( normals === undefined ) ? [] : [\r\n\t\t\t\t\tnew Vector3().fromArray( normals, a * 3 ),\r\n\t\t\t\t\tnew Vector3().fromArray( normals, b * 3 ),\r\n\t\t\t\t\tnew Vector3().fromArray( normals, c * 3 )\r\n\t\t\t\t];\r\n\r\n\t\t\t\tvar face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\t\tscope.faces.push( face );\r\n\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, a * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, b * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs, c * 2 )\r\n\t\t\t\t\t] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, a * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, b * 2 ),\r\n\t\t\t\t\t\tnew Vector2().fromArray( uvs2, c * 2 )\r\n\t\t\t\t\t] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function () {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t\tthis.boundingBox.getCenter( _offset$1 ).negate();\r\n\r\n\t\t\tthis.translate( _offset$1.x, _offset$1.y, _offset$1.z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tnormalize: function () {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t\tvar center = this.boundingSphere.center;\r\n\t\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\t\tvar matrix = new Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\r\n\t\t\tthis.applyMatrix( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFaceNormals: function () {\r\n\r\n\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tcb.normalize();\r\n\r\n\t\t\t\tface.normal.copy( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\t\tif ( areaWeighted === undefined ) { areaWeighted = true; }\r\n\r\n\t\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ] = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFlatVertexNormals: function () {\r\n\r\n\t\t\tvar f, fl, face;\r\n\r\n\t\t\tthis.computeFaceNormals();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeMorphNormals: function () {\r\n\r\n\t\t\tvar i, il, f, fl, face;\r\n\r\n\t\t\t// save original normals\r\n\t\t\t// - create temp variables on first access\r\n\t\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }\r\n\r\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\t\tvar tmpGeo = new Geometry();\r\n\t\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// create on first access\r\n\r\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\tfaceNormal = new Vector3();\r\n\t\t\t\t\t\tvertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\r\n\r\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t\t// set vertices to morph target\r\n\r\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t// compute morph normals\r\n\r\n\t\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t\t// store morph normals\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// restore original normals\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingBox: function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeBoundingSphere: function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t\t},\r\n\r\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normalMatrix,\r\n\t\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\t\tvertices1 = this.vertices,\r\n\t\t\t\tvertices2 = geometry.vertices,\r\n\t\t\t\tfaces1 = this.faces,\r\n\t\t\t\tfaces2 = geometry.faces,\r\n\t\t\t\tcolors1 = this.colors,\r\n\t\t\t\tcolors2 = geometry.colors;\r\n\r\n\t\t\tif ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }\r\n\r\n\t\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\t\tif ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }\r\n\r\n\t\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tfor ( var i = 0, il = colors2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tcolors1.push( colors2[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tfor ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs2 = geometry.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }\r\n\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tmergeMesh: function ( mesh ) {\r\n\r\n\t\t\tif ( ! ( mesh && mesh.isMesh ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }\r\n\r\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t\t},\r\n\r\n\t\t/*\r\n\t\t * Checks for duplicate vertices with hashmap.\r\n\t\t * Duplicated vertices are removed\r\n\t\t * and faces' vertices are updated.\r\n\t\t */\r\n\r\n\t\tmergeVertices: function () {\r\n\r\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\t\tvar unique = [], changes = [];\r\n\r\n\t\t\tvar v, key;\r\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\t\tvar i, il, face;\r\n\t\t\tvar indices, j, jl;\r\n\r\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tv = this.vertices[ i ];\r\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t\t// have to remove them from the geometry.\r\n\t\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Use unique set of vertices\r\n\r\n\t\t\tvar diff = this.vertices.length - unique.length;\r\n\t\t\tthis.vertices = unique;\r\n\t\t\treturn diff;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.vertices = [];\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\t\tvar faces = this.faces;\r\n\t\t\tvar length = faces.length;\r\n\r\n\t\t\t// tag faces\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// sort faces\r\n\r\n\t\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t\t// sort uvs\r\n\r\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\t\tvar newUvs1, newUvs2;\r\n\r\n\t\t\tif ( uvs1 && uvs1.length === length ) { newUvs1 = []; }\r\n\t\t\tif ( uvs2 && uvs2.length === length ) { newUvs2 = []; }\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\t\tif ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }\r\n\t\t\t\tif ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }\r\n\t\t\tif ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Geometry',\r\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// standard Geometry serialization\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) { data.name = this.name; }\r\n\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertices = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar normalsHash = {};\r\n\t\t\tvar colors = [];\r\n\t\t\tvar colorsHash = {};\r\n\t\t\tvar uvs = [];\r\n\t\t\tvar uvsHash = {};\r\n\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\t\tvar hasMaterial = true;\r\n\t\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\t\tvar faceType = 0;\r\n\r\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\t\tfaces.push( faceType );\r\n\t\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdata.data = {};\r\n\r\n\t\t\tdata.data.vertices = vertices;\r\n\t\t\tdata.data.normals = normals;\r\n\t\t\tif ( colors.length > 0 ) { data.data.colors = colors; }\r\n\t\t\tif ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility\r\n\t\t\tdata.data.faces = faces;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\t/*\r\n\t\t\t // Handle primitives\r\n\r\n\t\t\t var parameters = this.parameters;\r\n\r\n\t\t\t if ( parameters !== undefined ) {\r\n\r\n\t\t\t var values = [];\r\n\r\n\t\t\t for ( var key in parameters ) {\r\n\r\n\t\t\t values.push( parameters[ key ] );\r\n\r\n\t\t\t }\r\n\r\n\t\t\t var geometry = Object.create( this.constructor.prototype );\r\n\t\t\t this.constructor.apply( geometry, values );\r\n\t\t\t return geometry;\r\n\r\n\t\t\t }\r\n\r\n\t\t\t return new this.constructor().copy( this );\r\n\t\t\t */\r\n\r\n\t\t\treturn new Geometry().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tvar i, il, j, jl, k, kl;\r\n\r\n\t\t\t// reset\r\n\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.colors = [];\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.faceVertexUvs = [[]];\r\n\t\t\tthis.morphTargets = [];\r\n\t\t\tthis.morphNormals = [];\r\n\t\t\tthis.skinWeights = [];\r\n\t\t\tthis.skinIndices = [];\r\n\t\t\tthis.lineDistances = [];\r\n\t\t\tthis.boundingBox = null;\r\n\t\t\tthis.boundingSphere = null;\r\n\r\n\t\t\t// name\r\n\r\n\t\t\tthis.name = source.name;\r\n\r\n\t\t\t// vertices\r\n\r\n\t\t\tvar vertices = source.vertices;\r\n\r\n\t\t\tfor ( i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// colors\r\n\r\n\t\t\tvar colors = source.colors;\r\n\r\n\t\t\tfor ( i = 0, il = colors.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.colors.push( colors[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// faces\r\n\r\n\t\t\tvar faces = source.faces;\r\n\r\n\t\t\tfor ( i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// face vertex uvs\r\n\r\n\t\t\tfor ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\t\tfor ( k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphTargets = source.morphTargets;\r\n\r\n\t\t\tfor ( i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = {};\r\n\t\t\t\tmorphTarget.name = morphTargets[ i ].name;\r\n\r\n\t\t\t\t// vertices\r\n\r\n\t\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.vertices = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// normals\r\n\r\n\t\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphTarget.normals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph normals\r\n\r\n\t\t\tvar morphNormals = source.morphNormals;\r\n\r\n\t\t\tfor ( i = 0, il = morphNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = {};\r\n\r\n\t\t\t\t// vertex normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.vertexNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tvar srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\r\n\t\t\t\t\t\tvar destVertexNormal = {};\r\n\r\n\t\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\r\n\t\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\r\n\t\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\r\n\r\n\t\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// face normals\r\n\r\n\t\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\r\n\r\n\t\t\t\t\tmorphNormal.faceNormals = [];\r\n\r\n\t\t\t\t\tfor ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.morphNormals.push( morphNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin weights\r\n\r\n\t\t\tvar skinWeights = source.skinWeights;\r\n\r\n\t\t\tfor ( i = 0, il = skinWeights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skin indices\r\n\r\n\t\t\tvar skinIndices = source.skinIndices;\r\n\r\n\t\t\tfor ( i = 0, il = skinIndices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// line distances\r\n\r\n\t\t\tvar lineDistances = source.lineDistances;\r\n\r\n\t\t\tfor ( i = 0, il = lineDistances.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.lineDistances.push( lineDistances[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding box\r\n\r\n\t\t\tvar boundingBox = source.boundingBox;\r\n\r\n\t\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// bounding sphere\r\n\r\n\t\t\tvar boundingSphere = source.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update flags\r\n\r\n\t\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\r\n\t\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\r\n\t\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdispose: function () {\r\n\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// BoxGeometry\r\n\r\n\tvar BoxGeometry = /*@__PURE__*/(function (Geometry) {\r\n\t\tfunction BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\t\tGeometry.call(this);\r\n\r\n\t\t\tthis.type = 'BoxGeometry';\r\n\r\n\t\t\tthis.parameters = {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepth: depth,\r\n\t\t\t\twidthSegments: widthSegments,\r\n\t\t\t\theightSegments: heightSegments,\r\n\t\t\t\tdepthSegments: depthSegments\r\n\t\t\t};\r\n\r\n\t\t\tthis.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\t\t\tthis.mergeVertices();\r\n\r\n\t\t}\r\n\r\n\t\tif ( Geometry ) BoxGeometry.__proto__ = Geometry;\r\n\t\tBoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );\r\n\t\tBoxGeometry.prototype.constructor = BoxGeometry;\r\n\r\n\t\treturn BoxGeometry;\r\n\t}(Geometry));\r\n\r\n\t// BoxBufferGeometry\r\n\r\n\tvar BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {\r\n\t\tfunction BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\t\t\tBufferGeometry.call(this);\r\n\r\n\t\t\tthis.type = 'BoxBufferGeometry';\r\n\r\n\t\t\tthis.parameters = {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tdepth: depth,\r\n\t\t\t\twidthSegments: widthSegments,\r\n\t\t\t\theightSegments: heightSegments,\r\n\t\t\t\tdepthSegments: depthSegments\r\n\t\t\t};\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\twidth = width || 1;\r\n\t\t\theight = height || 1;\r\n\t\t\tdepth = depth || 1;\r\n\r\n\t\t\t// segments\r\n\r\n\t\t\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\t\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\t\t\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t\t\t// buffers\r\n\r\n\t\t\tvar indices = [];\r\n\t\t\tvar vertices = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar uvs = [];\r\n\r\n\t\t\t// helper variables\r\n\r\n\t\t\tvar numberOfVertices = 0;\r\n\t\t\tvar groupStart = 0;\r\n\r\n\t\t\t// build each side of the box geometry\r\n\r\n\t\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\r\n\t\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\r\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\r\n\t\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\r\n\t\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\r\n\t\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t\t\t// build geometry\r\n\r\n\t\t\tthis.setIndex( indices );\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\t\t\tvar segmentWidth = width / gridX;\r\n\t\t\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\t\t\tvar widthHalf = width / 2;\r\n\t\t\t\tvar heightHalf = height / 2;\r\n\t\t\t\tvar depthHalf = depth / 2;\r\n\r\n\t\t\t\tvar gridX1 = gridX + 1;\r\n\t\t\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\t\t\tvar vertexCounter = 0;\r\n\t\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t\tvar ix, iy;\r\n\r\n\t\t\t\tvar vector = new Vector3();\r\n\r\n\t\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t\t\t// now apply vector to vertex buffer\r\n\r\n\t\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t\t\t// now apply vector to normal buffer\r\n\r\n\t\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t\t\t\t// counters\r\n\r\n\t\t\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t\t// increase counter\r\n\r\n\t\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t\t\t// calculate new start value for groups\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\r\n\t\t\t\t// update total number of vertices\r\n\r\n\t\t\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;\r\n\t\tBoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );\r\n\t\tBoxBufferGeometry.prototype.constructor = BoxBufferGeometry;\r\n\r\n\t\treturn BoxBufferGeometry;\r\n\t}(BufferGeometry));\r\n\r\n\t/**\r\n\t * Uniform Utilities\r\n\t */\r\n\r\n\tfunction cloneUniforms( src ) {\r\n\r\n\t\tvar dst = {};\r\n\r\n\t\tfor ( var u in src ) {\r\n\r\n\t\t\tdst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in src[ u ] ) {\r\n\r\n\t\t\t\tvar property = src[ u ][ p ];\r\n\r\n\t\t\t\tif ( property && ( property.isColor ||\r\n\t\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\r\n\t\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\r\n\t\t\t\t\tproperty.isTexture ) ) {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( property ) ) {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdst[ u ][ p ] = property;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\tfunction mergeUniforms( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = cloneUniforms( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t}\r\n\r\n\t// Legacy\r\n\r\n\tvar UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\r\n\r\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\r\n\r\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  defines: { \"label\" : \"value\" },\r\n\t *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\r\n\t *\r\n\t *  fragmentShader: <string>,\r\n\t *  vertexShader: <string>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  lights: <bool>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShaderMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShaderMaterial';\r\n\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\r\n\t\tthis.vertexShader = default_vertex;\r\n\t\tthis.fragmentShader = default_fragment;\r\n\r\n\t\tthis.linewidth = 1;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\t\tthis.skinning = false; // set to use skinning attribute streams\r\n\t\tthis.morphTargets = false; // set to use morph targets\r\n\t\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\t\tthis.extensions = {\r\n\t\t\tderivatives: false, // set to use derivatives\r\n\t\t\tfragDepth: false, // set to use fragment depth values\r\n\t\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t\t};\r\n\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv2': [ 0, 0 ]\r\n\t\t};\r\n\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\tthis.uniformsNeedUpdate = false;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setValues( parameters );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShaderMaterial.prototype = Object.create( Material.prototype );\r\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\r\n\r\n\tShaderMaterial.prototype.isShaderMaterial = true;\r\n\r\n\tShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\r\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\r\n\r\n\t\tthis.defines = Object.assign( {}, source.defines );\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.lights = source.lights;\r\n\t\tthis.clipping = source.clipping;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\tthis.extensions = source.extensions;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\t\tvar data = Material.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.uniforms = {};\r\n\r\n\t\tfor ( var name in this.uniforms ) {\r\n\r\n\t\t\tvar uniform = this.uniforms[ name ];\r\n\t\t\tvar value = uniform.value;\r\n\r\n\t\t\tif ( value && value.isTexture ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 't',\r\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isColor ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'c',\r\n\t\t\t\t\tvalue: value.getHex()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector2 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v2',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isVector4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'v4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix3 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm3',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( value && value.isMatrix4 ) {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\ttype: 'm4',\r\n\t\t\t\t\tvalue: value.toArray()\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.uniforms[ name ] = {\r\n\t\t\t\t\tvalue: value\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }\r\n\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\tfor ( var key in this.extensions ) {\r\n\r\n\t\t\tif ( this.extensions[ key ] === true ) { extensions[ key ] = true; }\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\r\n\tfunction Camera() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tCamera.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Camera,\r\n\r\n\t\tisCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetWorldDirection: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Camera: .getWorldDirection() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tvar e = this.matrixWorld.elements;\r\n\r\n\t\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tthis.matrixWorldInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author greggman / http://games.greggman.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PerspectiveCamera( fov, aspect, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\tthis.fov = fov !== undefined ? fov : 50;\r\n\t\tthis.zoom = 1;\r\n\r\n\t\tthis.near = near !== undefined ? near : 0.1;\r\n\t\tthis.far = far !== undefined ? far : 2000;\r\n\t\tthis.focus = 10;\r\n\r\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tPerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: PerspectiveCamera,\r\n\r\n\t\tisPerspectiveCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.fov = source.fov;\r\n\t\t\tthis.zoom = source.zoom;\r\n\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\t\t\tthis.focus = source.focus;\r\n\r\n\t\t\tthis.aspect = source.aspect;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\tthis.filmGauge = source.filmGauge;\r\n\t\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t\t *\r\n\t\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t\t * a 35mm (full frame) camera.\r\n\t\t *\r\n\t\t * Values for focal length and film gauge must have the same unit.\r\n\t\t */\r\n\t\tsetFocalLength: function ( focalLength ) {\r\n\r\n\t\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\t\tthis.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t\t */\r\n\t\tgetFocalLength: function () {\r\n\r\n\t\t\tvar vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t\t},\r\n\r\n\t\tgetEffectiveFOV: function () {\r\n\r\n\t\t\treturn _Math.RAD2DEG * 2 * Math.atan(\r\n\t\t\t\tMath.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmWidth: function () {\r\n\r\n\t\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tgetFilmHeight: function () {\r\n\r\n\t\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t\t * multi-monitor/multi-machine setups.\r\n\t\t *\r\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t\t * the monitors are in grid like this\r\n\t\t *\r\n\t\t *   +---+---+---+\r\n\t\t *   | A | B | C |\r\n\t\t *   +---+---+---+\r\n\t\t *   | D | E | F |\r\n\t\t *   +---+---+---+\r\n\t\t *\r\n\t\t * then for each monitor you would call it like this\r\n\t\t *\r\n\t\t *   var w = 1920;\r\n\t\t *   var h = 1080;\r\n\t\t *   var fullWidth = w * 3;\r\n\t\t *   var fullHeight = h * 2;\r\n\t\t *\r\n\t\t *   --A--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t\t *   --B--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t\t *   --C--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t\t *   --D--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t\t *   --E--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t\t *   --F--\r\n\t\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t\t *\r\n\t\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t\t */\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar near = this.near,\r\n\t\t\t\ttop = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\r\n\t\t\t\theight = 2 * top,\r\n\t\t\t\twidth = this.aspect * height,\r\n\t\t\t\tleft = - 0.5 * width,\r\n\t\t\t\tview = this.view;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar fullWidth = view.fullWidth,\r\n\t\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\t\twidth *= view.width / fullWidth;\r\n\t\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar skew = this.filmOffset;\r\n\t\t\tif ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }\r\n\r\n\t\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.fov = this.fov;\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\t\t\tdata.object.focus = this.focus;\r\n\r\n\t\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\r\n\r\n\t\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Camera for rendering cube maps\r\n\t *\t- renders scene into axis-aligned cube\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tfunction CubeCamera( near, far, cubeResolution, options ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'CubeCamera';\r\n\r\n\t\tvar cameraPX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\r\n\t\tthis.add( cameraPX );\r\n\r\n\t\tvar cameraNX = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\r\n\t\tthis.add( cameraNX );\r\n\r\n\t\tvar cameraPY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\r\n\t\tthis.add( cameraPY );\r\n\r\n\t\tvar cameraNY = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\r\n\t\tthis.add( cameraNY );\r\n\r\n\t\tvar cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\r\n\t\tthis.add( cameraPZ );\r\n\r\n\t\tvar cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\r\n\t\tthis.add( cameraNZ );\r\n\r\n\t\toptions = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };\r\n\r\n\t\tthis.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\t\tthis.renderTarget.texture.name = \"CubeCamera\";\r\n\r\n\t\tthis.update = function ( renderer, scene ) {\r\n\r\n\t\t\tif ( this.parent === null ) { this.updateMatrixWorld(); }\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 0 );\r\n\t\t\trenderer.render( scene, cameraPX );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 1 );\r\n\t\t\trenderer.render( scene, cameraNX );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 2 );\r\n\t\t\trenderer.render( scene, cameraPY );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 3 );\r\n\t\t\trenderer.render( scene, cameraNY );\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 4 );\r\n\t\t\trenderer.render( scene, cameraPZ );\r\n\r\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\t\trenderer.setRenderTarget( renderTarget, 5 );\r\n\t\t\trenderer.render( scene, cameraNZ );\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( renderer, color, depth, stencil ) {\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderer.setRenderTarget( renderTarget, i );\r\n\r\n\t\t\t\trenderer.clear( color, depth, stencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tCubeCamera.prototype = Object.create( Object3D.prototype );\r\n\tCubeCamera.prototype.constructor = CubeCamera;\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction WebGLRenderTargetCube( width, height, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t}\r\n\r\n\tWebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );\r\n\tWebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;\r\n\r\n\tWebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;\r\n\r\n\tWebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {\r\n\r\n\t\tthis.texture.type = texture.type;\r\n\t\tthis.texture.format = texture.format;\r\n\t\tthis.texture.encoding = texture.encoding;\r\n\r\n\t\tvar scene = new Scene();\r\n\r\n\t\tvar shader = {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\"varying vec3 vWorldDirection;\",\r\n\r\n\t\t\t\t\"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {\",\r\n\r\n\t\t\t\t\"\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\",\r\n\r\n\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"\tvWorldDirection = transformDirection( position, modelMatrix );\",\r\n\r\n\t\t\t\t\"\t#include <begin_vertex>\",\r\n\t\t\t\t\"\t#include <project_vertex>\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\"uniform sampler2D tEquirect;\",\r\n\r\n\t\t\t\t\"varying vec3 vWorldDirection;\",\r\n\r\n\t\t\t\t\"#define RECIPROCAL_PI 0.31830988618\",\r\n\t\t\t\t\"#define RECIPROCAL_PI2 0.15915494\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\"\tvec3 direction = normalize( vWorldDirection );\",\r\n\r\n\t\t\t\t\"\tvec2 sampleUV;\",\r\n\r\n\t\t\t\t\"\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\",\r\n\r\n\t\t\t\t\"\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\",\r\n\r\n\t\t\t\t\"\tgl_FragColor = texture2D( tEquirect, sampleUV );\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( '\\n' ),\r\n\t\t};\r\n\r\n\t\tvar material = new ShaderMaterial( {\r\n\r\n\t\t\ttype: 'CubemapFromEquirect',\r\n\r\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader,\r\n\t\t\tside: BackSide,\r\n\t\t\tblending: NoBlending\r\n\r\n\t\t} );\r\n\r\n\t\tmaterial.uniforms.tEquirect.value = texture;\r\n\r\n\t\tvar mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );\r\n\r\n\t\tscene.add( mesh );\r\n\r\n\t\tvar camera = new CubeCamera( 1, 10, 1 );\r\n\r\n\t\tcamera.renderTarget = this;\r\n\t\tcamera.renderTarget.texture.name = 'CubeCameraTexture';\r\n\r\n\t\tcamera.update( renderer, scene );\r\n\r\n\t\tmesh.geometry.dispose();\r\n\t\tmesh.material.dispose();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1 };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tDataTexture.prototype = Object.create( Texture.prototype );\r\n\tDataTexture.prototype.constructor = DataTexture;\r\n\r\n\tDataTexture.prototype.isDataTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _sphere$1 = new Sphere();\r\n\tvar _vector$5 = new Vector3();\r\n\r\n\tfunction Frustum( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tthis.planes = [\r\n\r\n\t\t\t( p0 !== undefined ) ? p0 : new Plane(),\r\n\t\t\t( p1 !== undefined ) ? p1 : new Plane(),\r\n\t\t\t( p2 !== undefined ) ? p2 : new Plane(),\r\n\t\t\t( p3 !== undefined ) ? p3 : new Plane(),\r\n\t\t\t( p4 !== undefined ) ? p4 : new Plane(),\r\n\t\t\t( p5 !== undefined ) ? p5 : new Plane()\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( Frustum.prototype, {\r\n\r\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tplanes[ 0 ].copy( p0 );\r\n\t\t\tplanes[ 1 ].copy( p1 );\r\n\t\t\tplanes[ 2 ].copy( p2 );\r\n\t\t\tplanes[ 3 ].copy( p3 );\r\n\t\t\tplanes[ 4 ].copy( p4 );\r\n\t\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( frustum ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromMatrix: function ( m ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar me = m.elements;\r\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsObject: function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( _sphere$1 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSprite: function ( sprite ) {\r\n\r\n\t\t\t_sphere$1.center.set( 0, 0, 0 );\r\n\t\t\t_sphere$1.radius = 0.7071067811865476;\r\n\t\t\t_sphere$1.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( _sphere$1 );\r\n\r\n\t\t},\r\n\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar center = sphere.center;\r\n\t\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\t// corner at max distance\r\n\r\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tif ( plane.distanceToPoint( _vector$5 ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\r\n\r\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\r\n\r\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\r\n\r\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\r\n\r\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\r\n\r\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE  = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha  = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\r\n\r\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 );\\n\\t\\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\r\n\r\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\t\\tvarying vec3 vViewPosition;\\n\\t#endif\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\r\n\r\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\";\r\n\r\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\";\r\n\r\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_pars_vertex = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\r\n\r\n\tvar color_vertex = \"#ifdef USE_COLOR\\n\\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n\tvar common = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define PI_HALF 1.5707963267949\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n  return m[ 2 ][ 3 ] == - 1.0;\\n}\";\r\n\r\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\\tvec3 absDirection = abs(direction);\\n\\tint face = -1;\\n\\tif( absDirection.x > absDirection.z ) {\\n\\t\\tif(absDirection.x > absDirection.y )\\n\\t\\t\\tface = direction.x > 0.0 ? 0 : 3;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\telse {\\n\\t\\tif(absDirection.z > absDirection.y )\\n\\t\\t\\tface = direction.z > 0.0 ? 2 : 5;\\n\\t\\telse\\n\\t\\t\\tface = direction.y > 0.0 ? 1 : 4;\\n\\t}\\n\\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\\tfloat dxRoughness = dFdx(roughness);\\n\\tfloat dyRoughness = dFdy(roughness);\\n\\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\\tfloat mipLevel = 0.5 * log2(d);\\n\\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\\tbool bRes = mipLevel == 0.0;\\n\\tscale =  bRes && (scale < a) ? a : scale;\\n\\tvec3 r;\\n\\tvec2 offset;\\n\\tint face = getFaceFromDirection(direction);\\n\\tfloat rcpPowScale = 1.0 / powScale;\\n\\tif( face == 0) {\\n\\t\\tr = vec3(direction.x, -direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 1) {\\n\\t\\tr = vec3(direction.y, direction.x, direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 2) {\\n\\t\\tr = vec3(direction.z, direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\\n\\t}\\n\\telse if( face == 3) {\\n\\t\\tr = vec3(direction.x, direction.z, direction.y);\\n\\t\\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse if( face == 4) {\\n\\t\\tr = vec3(direction.y, direction.x, -direction.z);\\n\\t\\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\telse {\\n\\t\\tr = vec3(direction.z, -direction.x, direction.y);\\n\\t\\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\\t\\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\\n\\t}\\n\\tr = normalize(r);\\n\\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\\tvec2 base = offset + vec2( texelOffset );\\n\\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\\n\\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\\tfloat r1 = floor(roughnessVal);\\n\\tfloat r2 = r1 + 1.0;\\n\\tfloat t = fract(roughnessVal);\\n\\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\\tfloat s = mipInfo.y;\\n\\tfloat level0 = mipInfo.x;\\n\\tfloat level1 = level0 + 1.0;\\n\\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\\tvec4 result = mix(color10, color20, t);\\n\\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\";\r\n\r\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = normalMatrix * objectTangent;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\r\n\r\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\r\n\r\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\r\n\r\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\r\n\r\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\r\n\r\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = min( floor( D ) / 255.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\r\n\r\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\t\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t}  else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\tvec2 sampleUV;\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\tvec4 envColor = texture2D( envMap, sampleUV );\\n\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\treflectVec = normalize( reflectVec );\\n\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\\t\\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\r\n\r\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) { \\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\r\n\r\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = -mvPosition.z;\\n#endif\";\r\n\r\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\r\n\r\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\r\n\r\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar gradientmap_pars_fragment = \"#ifdef TOON\\n\\tuniform sampler2D gradientMap;\\n\\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\t\\tfloat dotNL = dot( normal, lightDirection );\\n\\t\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t\\t#ifdef USE_GRADIENTMAP\\n\\t\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t\\tfloat shadowCameraNear;\\n\\t\\tfloat shadowCameraFar;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t\\tint shadow;\\n\\t\\tfloat shadowBias;\\n\\t\\tfloat shadowRadius;\\n\\t\\tvec2 shadowMapSize;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\r\n\r\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t  vec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\\n\\t\\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\\t\\t\\tvec2 sampleUV;\\n\\t\\t\\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\t\\t\\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\\t\\t\\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\r\n\r\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\r\n\r\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tvec3\\tspecularColor;\\n\\tfloat\\tspecularShininess;\\n\\tfloat\\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t#ifdef TOON\\n\\t\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#else\\n\\t\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\t\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#endif\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\r\n\r\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = saturate( clearcoat );\\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\r\n\r\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3\\tdiffuseColor;\\n\\tfloat\\tspecularRoughness;\\n\\tvec3\\tspecularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\r\n\r\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\r\n\r\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\r\n\r\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\r\n\r\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\r\n\r\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\r\n\r\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\r\n\r\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\r\n\r\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\r\n\r\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\r\n\r\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar normal_fragment_begin = \"#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t\\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\r\n\r\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\";\r\n\r\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\\n\\t\\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\\n\\t\\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\\n\\t\\tvec3 N = normalize( surf_norm );\\n\\t\\tmat3 tsn = mat3( S, T, N );\\n\\t\\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\\t\\treturn normalize( tsn * mapN );\\n\\t}\\n#endif\";\r\n\r\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\r\n\r\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\\n\\t#endif\\n#endif\";\r\n\r\n\tvar clearcoat_normalmap_pars_fragment = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\r\n\r\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpack2HalfToRGBA( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\r\n\r\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\r\n\r\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\r\n\r\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\r\n\r\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\r\n\r\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\r\n\r\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\\t\\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / size;\\n\\t\\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\\n\\t\\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\\t\\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\\t\\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\\t\\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\\t\\tvec2 f = fract( uv * size + 0.5 );\\n\\t\\tfloat a = mix( lb, lt, f.y );\\n\\t\\tfloat b = mix( rb, rt, f.y );\\n\\t\\tfloat c = mix( a, b, f.x );\\n\\t\\treturn c;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\r\n\r\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\r\n\r\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLight directionalLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLight spotLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLight pointLight;\\n\\t#pragma unroll_loop\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\r\n\r\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\r\n\r\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\r\n\r\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\r\n\r\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\r\n\r\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\\n}\";\r\n\r\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\r\n\r\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\r\n\r\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\r\n\r\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = uv2;\\n#endif\";\r\n\r\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\r\n\r\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\r\n\r\n\tvar cube_frag = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\r\n\r\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\\t#endif\\n}\";\r\n\r\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n}\";\r\n\r\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\r\n\r\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\r\n\r\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV;\\n\\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\r\n\r\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\r\n\r\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\tvLineDistance = scale * lineDistance;\\n\\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\r\n\r\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSPARENCY\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSPARENCY\\n\\tuniform float transparency;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSPARENCY\\n\\t\\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\r\n\r\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\r\n\r\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\r\n\r\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar shadow_vert = \"#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\r\n\r\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\r\n\r\n\tvar ShaderChunk = {\r\n\t\talphamap_fragment: alphamap_fragment,\r\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\r\n\t\talphatest_fragment: alphatest_fragment,\r\n\t\taomap_fragment: aomap_fragment,\r\n\t\taomap_pars_fragment: aomap_pars_fragment,\r\n\t\tbegin_vertex: begin_vertex,\r\n\t\tbeginnormal_vertex: beginnormal_vertex,\r\n\t\tbsdfs: bsdfs,\r\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\r\n\t\tclipping_planes_fragment: clipping_planes_fragment,\r\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\r\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\r\n\t\tclipping_planes_vertex: clipping_planes_vertex,\r\n\t\tcolor_fragment: color_fragment,\r\n\t\tcolor_pars_fragment: color_pars_fragment,\r\n\t\tcolor_pars_vertex: color_pars_vertex,\r\n\t\tcolor_vertex: color_vertex,\r\n\t\tcommon: common,\r\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\r\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\r\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\r\n\t\tdisplacementmap_vertex: displacementmap_vertex,\r\n\t\temissivemap_fragment: emissivemap_fragment,\r\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\r\n\t\tencodings_fragment: encodings_fragment,\r\n\t\tencodings_pars_fragment: encodings_pars_fragment,\r\n\t\tenvmap_fragment: envmap_fragment,\r\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\r\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\r\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\r\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\r\n\t\tenvmap_vertex: envmap_vertex,\r\n\t\tfog_vertex: fog_vertex,\r\n\t\tfog_pars_vertex: fog_pars_vertex,\r\n\t\tfog_fragment: fog_fragment,\r\n\t\tfog_pars_fragment: fog_pars_fragment,\r\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\r\n\t\tlightmap_fragment: lightmap_fragment,\r\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\r\n\t\tlights_lambert_vertex: lights_lambert_vertex,\r\n\t\tlights_pars_begin: lights_pars_begin,\r\n\t\tlights_phong_fragment: lights_phong_fragment,\r\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\r\n\t\tlights_physical_fragment: lights_physical_fragment,\r\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\r\n\t\tlights_fragment_begin: lights_fragment_begin,\r\n\t\tlights_fragment_maps: lights_fragment_maps,\r\n\t\tlights_fragment_end: lights_fragment_end,\r\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\r\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\r\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\r\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\r\n\t\tmap_fragment: map_fragment,\r\n\t\tmap_pars_fragment: map_pars_fragment,\r\n\t\tmap_particle_fragment: map_particle_fragment,\r\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\r\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\r\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\r\n\t\tmorphnormal_vertex: morphnormal_vertex,\r\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\r\n\t\tmorphtarget_vertex: morphtarget_vertex,\r\n\t\tnormal_fragment_begin: normal_fragment_begin,\r\n\t\tnormal_fragment_maps: normal_fragment_maps,\r\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\r\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\r\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\r\n\t\tclearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,\r\n\t\tpacking: packing,\r\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\r\n\t\tproject_vertex: project_vertex,\r\n\t\tdithering_fragment: dithering_fragment,\r\n\t\tdithering_pars_fragment: dithering_pars_fragment,\r\n\t\troughnessmap_fragment: roughnessmap_fragment,\r\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\r\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\r\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\r\n\t\tshadowmap_vertex: shadowmap_vertex,\r\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\r\n\t\tskinbase_vertex: skinbase_vertex,\r\n\t\tskinning_pars_vertex: skinning_pars_vertex,\r\n\t\tskinning_vertex: skinning_vertex,\r\n\t\tskinnormal_vertex: skinnormal_vertex,\r\n\t\tspecularmap_fragment: specularmap_fragment,\r\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\r\n\t\ttonemapping_fragment: tonemapping_fragment,\r\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\r\n\t\tuv_pars_fragment: uv_pars_fragment,\r\n\t\tuv_pars_vertex: uv_pars_vertex,\r\n\t\tuv_vertex: uv_vertex,\r\n\t\tuv2_pars_fragment: uv2_pars_fragment,\r\n\t\tuv2_pars_vertex: uv2_pars_vertex,\r\n\t\tuv2_vertex: uv2_vertex,\r\n\t\tworldpos_vertex: worldpos_vertex,\r\n\r\n\t\tbackground_frag: background_frag,\r\n\t\tbackground_vert: background_vert,\r\n\t\tcube_frag: cube_frag,\r\n\t\tcube_vert: cube_vert,\r\n\t\tdepth_frag: depth_frag,\r\n\t\tdepth_vert: depth_vert,\r\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\r\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\r\n\t\tequirect_frag: equirect_frag,\r\n\t\tequirect_vert: equirect_vert,\r\n\t\tlinedashed_frag: linedashed_frag,\r\n\t\tlinedashed_vert: linedashed_vert,\r\n\t\tmeshbasic_frag: meshbasic_frag,\r\n\t\tmeshbasic_vert: meshbasic_vert,\r\n\t\tmeshlambert_frag: meshlambert_frag,\r\n\t\tmeshlambert_vert: meshlambert_vert,\r\n\t\tmeshmatcap_frag: meshmatcap_frag,\r\n\t\tmeshmatcap_vert: meshmatcap_vert,\r\n\t\tmeshphong_frag: meshphong_frag,\r\n\t\tmeshphong_vert: meshphong_vert,\r\n\t\tmeshphysical_frag: meshphysical_frag,\r\n\t\tmeshphysical_vert: meshphysical_vert,\r\n\t\tnormal_frag: normal_frag,\r\n\t\tnormal_vert: normal_vert,\r\n\t\tpoints_frag: points_frag,\r\n\t\tpoints_vert: points_vert,\r\n\t\tshadow_frag: shadow_frag,\r\n\t\tshadow_vert: shadow_vert,\r\n\t\tsprite_frag: sprite_frag,\r\n\t\tsprite_vert: sprite_vert\r\n\t};\r\n\r\n\t/**\r\n\t * Uniforms library for shared webgl shaders\r\n\t */\r\n\r\n\tvar UniformsLib = {\r\n\r\n\t\tcommon: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\r\n\t\t\tmap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() },\r\n\r\n\t\t\talphaMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tspecularmap: {\r\n\r\n\t\t\tspecularMap: { value: null },\r\n\r\n\t\t},\r\n\r\n\t\tenvmap: {\r\n\r\n\t\t\tenvMap: { value: null },\r\n\t\t\tflipEnvMap: { value: - 1 },\r\n\t\t\treflectivity: { value: 1.0 },\r\n\t\t\trefractionRatio: { value: 0.98 },\r\n\t\t\tmaxMipLevel: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\taomap: {\r\n\r\n\t\t\taoMap: { value: null },\r\n\t\t\taoMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tlightmap: {\r\n\r\n\t\t\tlightMap: { value: null },\r\n\t\t\tlightMapIntensity: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\temissivemap: {\r\n\r\n\t\t\temissiveMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tbumpmap: {\r\n\r\n\t\t\tbumpMap: { value: null },\r\n\t\t\tbumpScale: { value: 1 }\r\n\r\n\t\t},\r\n\r\n\t\tnormalmap: {\r\n\r\n\t\t\tnormalMap: { value: null },\r\n\t\t\tnormalScale: { value: new Vector2( 1, 1 ) }\r\n\r\n\t\t},\r\n\r\n\t\tdisplacementmap: {\r\n\r\n\t\t\tdisplacementMap: { value: null },\r\n\t\t\tdisplacementScale: { value: 1 },\r\n\t\t\tdisplacementBias: { value: 0 }\r\n\r\n\t\t},\r\n\r\n\t\troughnessmap: {\r\n\r\n\t\t\troughnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tmetalnessmap: {\r\n\r\n\t\t\tmetalnessMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tgradientmap: {\r\n\r\n\t\t\tgradientMap: { value: null }\r\n\r\n\t\t},\r\n\r\n\t\tfog: {\r\n\r\n\t\t\tfogDensity: { value: 0.00025 },\r\n\t\t\tfogNear: { value: 1 },\r\n\t\t\tfogFar: { value: 2000 },\r\n\t\t\tfogColor: { value: new Color( 0xffffff ) }\r\n\r\n\t\t},\r\n\r\n\t\tlights: {\r\n\r\n\t\t\tambientLightColor: { value: [] },\r\n\r\n\t\t\tlightProbe: { value: [] },\r\n\r\n\t\t\tdirectionalLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tcolor: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tdirectionalShadowMap: { value: [] },\r\n\t\t\tdirectionalShadowMatrix: { value: [] },\r\n\r\n\t\t\tspotLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tdistance: {},\r\n\t\t\t\tconeCos: {},\r\n\t\t\t\tpenumbraCos: {},\r\n\t\t\t\tdecay: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {}\r\n\t\t\t} },\r\n\r\n\t\t\tspotShadowMap: { value: [] },\r\n\t\t\tspotShadowMatrix: { value: [] },\r\n\r\n\t\t\tpointLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\tdecay: {},\r\n\t\t\t\tdistance: {},\r\n\r\n\t\t\t\tshadow: {},\r\n\t\t\t\tshadowBias: {},\r\n\t\t\t\tshadowRadius: {},\r\n\t\t\t\tshadowMapSize: {},\r\n\t\t\t\tshadowCameraNear: {},\r\n\t\t\t\tshadowCameraFar: {}\r\n\t\t\t} },\r\n\r\n\t\t\tpointShadowMap: { value: [] },\r\n\t\t\tpointShadowMatrix: { value: [] },\r\n\r\n\t\t\themisphereLights: { value: [], properties: {\r\n\t\t\t\tdirection: {},\r\n\t\t\t\tskyColor: {},\r\n\t\t\t\tgroundColor: {}\r\n\t\t\t} },\r\n\r\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\r\n\t\t\trectAreaLights: { value: [], properties: {\r\n\t\t\t\tcolor: {},\r\n\t\t\t\tposition: {},\r\n\t\t\t\twidth: {},\r\n\t\t\t\theight: {}\r\n\t\t\t} }\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tsize: { value: 1.0 },\r\n\t\t\tscale: { value: 1.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\talphaMap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tdiffuse: { value: new Color( 0xeeeeee ) },\r\n\t\t\topacity: { value: 1.0 },\r\n\t\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\r\n\t\t\trotation: { value: 0.0 },\r\n\t\t\tmap: { value: null },\r\n\t\t\talphaMap: { value: null },\r\n\t\t\tuvTransform: { value: new Matrix3() }\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t */\r\n\r\n\tvar ShaderLib = {\r\n\r\n\t\tbasic: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\r\n\r\n\t\t},\r\n\r\n\t\tlambert: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\r\n\r\n\t\t},\r\n\r\n\t\tphong: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.specularmap,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.gradientmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\tspecular: { value: new Color( 0x111111 ) },\r\n\t\t\t\t\tshininess: { value: 30 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\r\n\r\n\t\t},\r\n\r\n\t\tstandard: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.envmap,\r\n\t\t\t\tUniformsLib.aomap,\r\n\t\t\t\tUniformsLib.lightmap,\r\n\t\t\t\tUniformsLib.emissivemap,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.roughnessmap,\r\n\t\t\t\tUniformsLib.metalnessmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\t{\r\n\t\t\t\t\temissive: { value: new Color( 0x000000 ) },\r\n\t\t\t\t\troughness: { value: 0.5 },\r\n\t\t\t\t\tmetalness: { value: 0.5 },\r\n\t\t\t\t\tenvMapIntensity: { value: 1 } // temporary\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t\t},\r\n\r\n\t\tmatcap: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tmatcap: { value: null }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\r\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\r\n\r\n\t\t},\r\n\r\n\t\tpoints: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.points,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.points_vert,\r\n\t\t\tfragmentShader: ShaderChunk.points_frag\r\n\r\n\t\t},\r\n\r\n\t\tdashed: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tscale: { value: 1 },\r\n\t\t\t\t\tdashSize: { value: 1 },\r\n\t\t\t\t\ttotalSize: { value: 2 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\r\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\r\n\r\n\t\t},\r\n\r\n\t\tdepth: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.depth_vert,\r\n\t\t\tfragmentShader: ShaderChunk.depth_frag\r\n\r\n\t\t},\r\n\r\n\t\tnormal: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.bumpmap,\r\n\t\t\t\tUniformsLib.normalmap,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.normal_vert,\r\n\t\t\tfragmentShader: ShaderChunk.normal_frag\r\n\r\n\t\t},\r\n\r\n\t\tsprite: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.sprite,\r\n\t\t\t\tUniformsLib.fog\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\r\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\r\n\r\n\t\t},\r\n\r\n\t\tbackground: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tuvTransform: { value: new Matrix3() },\r\n\t\t\t\tt2D: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.background_vert,\r\n\t\t\tfragmentShader: ShaderChunk.background_frag\r\n\r\n\t\t},\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\r\n\t\tcube: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttCube: { value: null },\r\n\t\t\t\ttFlip: { value: - 1 },\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.cube_vert,\r\n\t\t\tfragmentShader: ShaderChunk.cube_frag\r\n\r\n\t\t},\r\n\r\n\t\tequirect: {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\ttEquirect: { value: null },\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\r\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\r\n\r\n\t\t},\r\n\r\n\t\tdistanceRGBA: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.common,\r\n\t\t\t\tUniformsLib.displacementmap,\r\n\t\t\t\t{\r\n\t\t\t\t\treferencePosition: { value: new Vector3() },\r\n\t\t\t\t\tnearDistance: { value: 1 },\r\n\t\t\t\t\tfarDistance: { value: 1000 }\r\n\t\t\t\t}\r\n\t\t\t] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\r\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\r\n\r\n\t\t},\r\n\r\n\t\tshadow: {\r\n\r\n\t\t\tuniforms: mergeUniforms( [\r\n\t\t\t\tUniformsLib.lights,\r\n\t\t\t\tUniformsLib.fog,\r\n\t\t\t\t{\r\n\t\t\t\t\tcolor: { value: new Color( 0x00000 ) },\r\n\t\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t\t} ] ),\r\n\r\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\r\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tShaderLib.physical = {\r\n\r\n\t\tuniforms: mergeUniforms( [\r\n\t\t\tShaderLib.standard.uniforms,\r\n\t\t\t{\r\n\t\t\t\ttransparency: { value: 0 },\r\n\t\t\t\tclearcoat: { value: 0 },\r\n\t\t\t\tclearcoatRoughness: { value: 0 },\r\n\t\t\t\tsheen: { value: new Color( 0x000000 ) },\r\n\t\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\r\n\t\t\t\tclearcoatNormalMap: { value: null },\r\n\t\t\t}\r\n\t\t] ),\r\n\r\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\r\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAnimation() {\r\n\r\n\t\tvar context = null;\r\n\t\tvar isAnimating = false;\r\n\t\tvar animationLoop = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tif ( isAnimating === false ) { return; }\r\n\r\n\t\t\tanimationLoop( time, frame );\r\n\r\n\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tstart: function () {\r\n\r\n\t\t\t\tif ( isAnimating === true ) { return; }\r\n\t\t\t\tif ( animationLoop === null ) { return; }\r\n\r\n\t\t\t\tcontext.requestAnimationFrame( onAnimationFrame );\r\n\r\n\t\t\t\tisAnimating = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tstop: function () {\r\n\r\n\t\t\t\tisAnimating = false;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetAnimationLoop: function ( callback ) {\r\n\r\n\t\t\t\tanimationLoop = callback;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t\tcontext = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLAttributes( gl ) {\r\n\r\n\t\tvar buffers = new WeakMap();\r\n\r\n\t\tfunction createBuffer( attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar usage = attribute.usage;\r\n\r\n\t\t\tvar buffer = gl.createBuffer();\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\t\t\tgl.bufferData( bufferType, array, usage );\r\n\r\n\t\t\tattribute.onUploadCallback();\r\n\r\n\t\t\tvar type = 5126;\r\n\r\n\t\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\t\ttype = 5126;\r\n\r\n\t\t\t} else if ( array instanceof Float64Array ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\r\n\r\n\t\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\t\ttype = 5123;\r\n\r\n\t\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\t\ttype = 5122;\r\n\r\n\t\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\t\ttype = 5125;\r\n\r\n\t\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\t\ttype = 5124;\r\n\r\n\t\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\t\ttype = 5120;\r\n\r\n\t\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\t\ttype = 5121;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tbuffer: buffer,\r\n\t\t\t\ttype: type,\r\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\r\n\t\t\t\tversion: attribute.version\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateBuffer( buffer, attribute, bufferType ) {\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar updateRange = attribute.updateRange;\r\n\r\n\t\t\tgl.bindBuffer( bufferType, buffer );\r\n\r\n\t\t\tif ( updateRange.count === - 1 ) {\r\n\r\n\t\t\t\t// Not using update ranges\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, 0, array );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\r\n\r\n\t\t\t\tupdateRange.count = - 1; // reset range\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction get( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\treturn buffers.get( attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( attribute ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data ) {\r\n\r\n\t\t\t\tgl.deleteBuffer( data.buffer );\r\n\r\n\t\t\t\tbuffers.delete( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( attribute, bufferType ) {\r\n\r\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }\r\n\r\n\t\t\tvar data = buffers.get( attribute );\r\n\r\n\t\t\tif ( data === undefined ) {\r\n\r\n\t\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\r\n\r\n\t\t\t} else if ( data.version < attribute.version ) {\r\n\r\n\t\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\r\n\r\n\t\t\t\tdata.version = attribute.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PlaneGeometry\r\n\r\n\tfunction PlaneGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPlaneGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPlaneGeometry.prototype.constructor = PlaneGeometry;\r\n\r\n\t// PlaneBufferGeometry\r\n\r\n\tfunction PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\r\n\t\twidth = width || 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\r\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar segment_width = width / gridX;\r\n\t\tvar segment_height = height / gridY;\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\t\tvertices.push( x, - y, 0 );\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tPlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBackground( renderer, state, objects, premultipliedAlpha ) {\r\n\r\n\t\tvar clearColor = new Color( 0x000000 );\r\n\t\tvar clearAlpha = 0;\r\n\r\n\t\tvar planeMesh;\r\n\t\tvar boxMesh;\r\n\t\t// Store the current background texture and its `version`\r\n\t\t// so we can recompile the material accordingly.\r\n\t\tvar currentBackground = null;\r\n\t\tvar currentBackgroundVersion = 0;\r\n\r\n\t\tfunction render( renderList, scene, camera, forceClear ) {\r\n\r\n\t\t\tvar background = scene.background;\r\n\r\n\t\t\t// Ignore background in AR\r\n\t\t\t// TODO: Reconsider this.\r\n\r\n\t\t\tvar vr = renderer.vr;\r\n\t\t\tvar session = vr.getSession && vr.getSession();\r\n\r\n\t\t\tif ( session && session.environmentBlendMode === 'additive' ) {\r\n\r\n\t\t\t\tbackground = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background === null ) {\r\n\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\t\t\t\tcurrentBackground = null;\r\n\t\t\t\tcurrentBackgroundVersion = 0;\r\n\r\n\t\t\t} else if ( background && background.isColor ) {\r\n\r\n\t\t\t\tsetClear( background, 1 );\r\n\t\t\t\tforceClear = true;\r\n\t\t\t\tcurrentBackground = null;\r\n\t\t\t\tcurrentBackgroundVersion = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderer.autoClear || forceClear ) {\r\n\r\n\t\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {\r\n\r\n\t\t\t\tif ( boxMesh === undefined ) {\r\n\r\n\t\t\t\t\tboxMesh = new Mesh(\r\n\t\t\t\t\t\tnew BoxBufferGeometry( 1, 1, 1 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\ttype: 'BackgroundCubeMaterial',\r\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\r\n\t\t\t\t\t\t\tside: BackSide,\r\n\t\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\r\n\t\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\r\n\r\n\t\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// enable code injection for non-built-in material\r\n\t\t\t\t\tObject.defineProperty( boxMesh.material, 'map', {\r\n\r\n\t\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\t\treturn this.uniforms.tCube.value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tobjects.update( boxMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = background.isWebGLRenderTargetCube ? background.texture : background;\r\n\t\t\t\tboxMesh.material.uniforms.tCube.value = texture;\r\n\t\t\t\tboxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;\r\n\r\n\t\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\t     currentBackgroundVersion !== texture.version ) {\r\n\r\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\t\tcurrentBackground = background;\r\n\t\t\t\t\tcurrentBackgroundVersion = texture.version;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\r\n\r\n\t\t\t} else if ( background && background.isTexture ) {\r\n\r\n\t\t\t\tif ( planeMesh === undefined ) {\r\n\r\n\t\t\t\t\tplaneMesh = new Mesh(\r\n\t\t\t\t\t\tnew PlaneBufferGeometry( 2, 2 ),\r\n\t\t\t\t\t\tnew ShaderMaterial( {\r\n\t\t\t\t\t\t\ttype: 'BackgroundMaterial',\r\n\t\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\r\n\t\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\r\n\t\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\r\n\t\t\t\t\t\t\tside: FrontSide,\r\n\t\t\t\t\t\t\tdepthTest: false,\r\n\t\t\t\t\t\t\tdepthWrite: false,\r\n\t\t\t\t\t\t\tfog: false\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\r\n\r\n\t\t\t\t\t// enable code injection for non-built-in material\r\n\t\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\r\n\r\n\t\t\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tobjects.update( planeMesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\r\n\r\n\t\t\t\tif ( background.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tbackground.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\r\n\r\n\t\t\t\tif ( currentBackground !== background ||\r\n\t\t\t\t\t   currentBackgroundVersion !== background.version ) {\r\n\r\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\t\tcurrentBackground = background;\r\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t// push to the pre-sorted opaque render list\r\n\t\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setClear( color, alpha ) {\r\n\r\n\t\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tgetClearColor: function () {\r\n\r\n\t\t\t\treturn clearColor;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearColor: function ( color, alpha ) {\r\n\r\n\t\t\t\tclearColor.set( color );\r\n\t\t\t\tclearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\tgetClearAlpha: function () {\r\n\r\n\t\t\t\treturn clearAlpha;\r\n\r\n\t\t\t},\r\n\t\t\tsetClearAlpha: function ( alpha ) {\r\n\r\n\t\t\t\tclearAlpha = alpha;\r\n\t\t\t\tsetClear( clearColor, clearAlpha );\r\n\r\n\t\t\t},\r\n\t\t\trender: render\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawArrays( mode, start, count );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\r\n\r\n\t\t\tif ( primcount === 0 ) { return; }\r\n\r\n\t\t\tvar extension, methodName;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\t\t\t\tmethodName = 'drawArraysInstanced';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ methodName ]( mode, start, count, primcount );\r\n\r\n\t\t\tinfo.update( count, mode, primcount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n\t\tvar maxAnisotropy;\r\n\r\n\t\tfunction getMaxAnisotropy() {\r\n\r\n\t\t\tif ( maxAnisotropy !== undefined ) { return maxAnisotropy; }\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaxAnisotropy = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxAnisotropy;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\r\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'highp';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprecision = 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\r\n\t\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\r\n\r\n\t\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 'lowp';\r\n\r\n\t\t}\r\n\r\n\t\t/* eslint-disable no-undef */\r\n\t\tvar isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\r\n\t\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\r\n\t\t/* eslint-enable no-undef */\r\n\r\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\t\tvar maxPrecision = getMaxPrecision( precision );\r\n\r\n\t\tif ( maxPrecision !== precision ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n\t\t\tprecision = maxPrecision;\r\n\r\n\t\t}\r\n\r\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n\t\tvar maxTextures = gl.getParameter( 34930 );\r\n\t\tvar maxVertexTextures = gl.getParameter( 35660 );\r\n\t\tvar maxTextureSize = gl.getParameter( 3379 );\r\n\t\tvar maxCubemapSize = gl.getParameter( 34076 );\r\n\r\n\t\tvar maxAttributes = gl.getParameter( 34921 );\r\n\t\tvar maxVertexUniforms = gl.getParameter( 36347 );\r\n\t\tvar maxVaryings = gl.getParameter( 36348 );\r\n\t\tvar maxFragmentUniforms = gl.getParameter( 36349 );\r\n\r\n\t\tvar vertexTextures = maxVertexTextures > 0;\r\n\t\tvar floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );\r\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\r\n\r\n\t\treturn {\r\n\r\n\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\r\n\t\t\tgetMaxPrecision: getMaxPrecision,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\tmaxTextures: maxTextures,\r\n\t\t\tmaxVertexTextures: maxVertexTextures,\r\n\t\t\tmaxTextureSize: maxTextureSize,\r\n\t\t\tmaxCubemapSize: maxCubemapSize,\r\n\r\n\t\t\tmaxAttributes: maxAttributes,\r\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\r\n\t\t\tmaxVaryings: maxVaryings,\r\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\r\n\r\n\t\t\tvertexTextures: vertexTextures,\r\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\r\n\t\t\tfloatVertexTextures: floatVertexTextures,\r\n\r\n\t\t\tmaxSamples: maxSamples\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLClipping() {\r\n\r\n\t\tvar scope = this,\r\n\r\n\t\t\tglobalState = null,\r\n\t\t\tnumGlobalPlanes = 0,\r\n\t\t\tlocalClippingEnabled = false,\r\n\t\t\trenderingShadows = false,\r\n\r\n\t\t\tplane = new Plane(),\r\n\t\t\tviewNormalMatrix = new Matrix3(),\r\n\r\n\t\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\t\tthis.uniform = uniform;\r\n\t\tthis.numPlanes = 0;\r\n\t\tthis.numIntersection = 0;\r\n\r\n\t\tthis.init = function ( planes, enableLocalClipping, camera ) {\r\n\r\n\t\t\tvar enabled =\r\n\t\t\t\tplanes.length !== 0 ||\r\n\t\t\t\tenableLocalClipping ||\r\n\t\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t\t// run another frame in order to reset the state:\r\n\t\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\t\tlocalClippingEnabled;\r\n\r\n\t\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\t\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\t\treturn enabled;\r\n\r\n\t\t};\r\n\r\n\t\tthis.beginShadows = function () {\r\n\r\n\t\t\trenderingShadows = true;\r\n\t\t\tprojectPlanes( null );\r\n\r\n\t\t};\r\n\r\n\t\tthis.endShadows = function () {\r\n\r\n\t\t\trenderingShadows = false;\r\n\t\t\tresetGlobalState();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {\r\n\r\n\t\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\r\n\r\n\t\t\t\t// there's no local clipping\r\n\r\n\t\t\t\tif ( renderingShadows ) {\r\n\r\n\t\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresetGlobalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\t\tlGlobal = nGlobal * 4,\r\n\r\n\t\t\t\t\tdstArray = cache.clippingState || null;\r\n\r\n\t\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\r\n\r\n\t\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcache.clippingState = dstArray;\r\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\r\n\t\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t};\r\n\r\n\t\tfunction resetGlobalState() {\r\n\r\n\t\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\t\tuniform.value = globalState;\r\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = numGlobalPlanes;\r\n\t\t\tscope.numIntersection = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0,\r\n\t\t\t\tdstArray = null;\r\n\r\n\t\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniform.value = dstArray;\r\n\t\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.numPlanes = nPlanes;\r\n\r\n\t\t\treturn dstArray;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLExtensions( gl ) {\r\n\r\n\t\tvar extensions = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( name ) {\r\n\r\n\t\t\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn extensions[ name ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar extension;\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\textensions[ name ] = extension;\r\n\r\n\t\t\t\treturn extension;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLGeometries( gl, attributes, info ) {\r\n\r\n\t\tvar geometries = new WeakMap();\r\n\t\tvar wireframeAttributes = new WeakMap();\r\n\r\n\t\tfunction onGeometryDispose( event ) {\r\n\r\n\t\t\tvar geometry = event.target;\r\n\t\t\tvar buffergeometry = geometries.get( geometry );\r\n\r\n\t\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.index );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in buffergeometry.attributes ) {\r\n\r\n\t\t\t\tattributes.remove( buffergeometry.attributes[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tgeometries.delete( geometry );\r\n\r\n\t\t\tvar attribute = wireframeAttributes.get( buffergeometry );\r\n\r\n\t\t\tif ( attribute ) {\r\n\r\n\t\t\t\tattributes.remove( attribute );\r\n\t\t\t\twireframeAttributes.delete( buffergeometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinfo.memory.geometries --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( object, geometry ) {\r\n\r\n\t\t\tvar buffergeometry = geometries.get( geometry );\r\n\r\n\t\t\tif ( buffergeometry ) { return buffergeometry; }\r\n\r\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\t\tgeometry._bufferGeometry = new BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometries.set( geometry, buffergeometry );\r\n\r\n\t\t\tinfo.memory.geometries ++;\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( geometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattributes.update( index, 34963 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var name in geometryAttributes ) {\r\n\r\n\t\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morph targets\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tattributes.update( array[ i ], 34962 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar indices = [];\r\n\r\n\t\t\tvar geometryIndex = geometry.index;\r\n\t\t\tvar geometryPosition = geometry.attributes.position;\r\n\t\t\tvar version = 0;\r\n\r\n\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\tvar array = geometryIndex.array;\r\n\t\t\t\tversion = geometryIndex.version;\r\n\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar array = geometryPosition.array;\r\n\t\t\t\tversion = geometryPosition.version;\r\n\r\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\tvar a = i + 0;\r\n\t\t\t\t\tvar b = i + 1;\r\n\t\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\r\n\t\t\tattribute.version = version;\r\n\r\n\t\t\tattributes.update( attribute, 34963 );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar previousAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\t\tif ( previousAttribute ) { attributes.remove( previousAttribute ); }\r\n\r\n\t\t\t//\r\n\r\n\t\t\twireframeAttributes.set( geometry, attribute );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\t\tvar currentAttribute = wireframeAttributes.get( geometry );\r\n\r\n\t\t\tif ( currentAttribute ) {\r\n\r\n\t\t\t\tvar geometryIndex = geometry.index;\r\n\r\n\t\t\t\tif ( geometryIndex !== null ) {\r\n\r\n\t\t\t\t\t// if the attribute is obsolete, create a new one\r\n\r\n\t\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\r\n\r\n\t\t\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tupdateWireframeAttribute( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn wireframeAttributes.get( geometry );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: get,\r\n\t\t\tupdate: update,\r\n\r\n\t\t\tgetWireframeAttribute: getWireframeAttribute\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tvar mode;\r\n\r\n\t\tfunction setMode( value ) {\r\n\r\n\t\t\tmode = value;\r\n\r\n\t\t}\r\n\r\n\t\tvar type, bytesPerElement;\r\n\r\n\t\tfunction setIndex( value ) {\r\n\r\n\t\t\ttype = value.type;\r\n\t\t\tbytesPerElement = value.bytesPerElement;\r\n\r\n\t\t}\r\n\r\n\t\tfunction render( start, count ) {\r\n\r\n\t\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\r\n\r\n\t\t\tinfo.update( count, mode );\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderInstances( geometry, start, count, primcount ) {\r\n\r\n\t\t\tif ( primcount === 0 ) { return; }\r\n\r\n\t\t\tvar extension, methodName;\r\n\r\n\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\textension = gl;\r\n\t\t\t\tmethodName = 'drawElementsInstanced';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\r\n\r\n\t\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\r\n\r\n\t\t\tinfo.update( count, mode, primcount );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.setIndex = setIndex;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLInfo( gl ) {\r\n\r\n\t\tvar memory = {\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\t};\r\n\r\n\t\tvar render = {\r\n\t\t\tframe: 0,\r\n\t\t\tcalls: 0,\r\n\t\t\ttriangles: 0,\r\n\t\t\tpoints: 0,\r\n\t\t\tlines: 0\r\n\t\t};\r\n\r\n\t\tfunction update( count, mode, instanceCount ) {\r\n\r\n\t\t\tinstanceCount = instanceCount || 1;\r\n\r\n\t\t\trender.calls ++;\r\n\r\n\t\t\tswitch ( mode ) {\r\n\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count / 3 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 5:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\trender.triangles += instanceCount * ( count - 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\trender.lines += instanceCount * ( count / 2 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\trender.lines += instanceCount * ( count - 1 );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\trender.lines += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\trender.points += instanceCount * count;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\trender.frame ++;\r\n\t\t\trender.calls = 0;\r\n\t\t\trender.triangles = 0;\r\n\t\t\trender.points = 0;\r\n\t\t\trender.lines = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmemory: memory,\r\n\t\t\trender: render,\r\n\t\t\tprograms: null,\r\n\t\t\tautoReset: true,\r\n\t\t\treset: reset,\r\n\t\t\tupdate: update\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\r\n\r\n\t}\r\n\r\n\tfunction WebGLMorphtargets( gl ) {\r\n\r\n\t\tvar influencesList = {};\r\n\t\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\t\tfunction update( object, geometry, material, program ) {\r\n\r\n\t\t\tvar objectInfluences = object.morphTargetInfluences;\r\n\r\n\t\t\tvar length = objectInfluences.length;\r\n\r\n\t\t\tvar influences = influencesList[ geometry.id ];\r\n\r\n\t\t\tif ( influences === undefined ) {\r\n\r\n\t\t\t\t// initialise list\r\n\r\n\t\t\t\tinfluences = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\r\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\r\n\r\n\t\t\t// Remove current morphAttributes\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence[ 1 ] !== 0 ) {\r\n\r\n\t\t\t\t\tif ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }\r\n\t\t\t\t\tif ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Collect influences\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tinfluence[ 0 ] = i;\r\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfluences.sort( absNumericalSort );\r\n\r\n\t\t\t// Add morphAttributes\r\n\r\n\t\t\tvar morphInfluencesSum = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 8; i ++ ) {\r\n\r\n\t\t\t\tvar influence = influences[ i ];\r\n\r\n\t\t\t\tif ( influence ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 0 ];\r\n\t\t\t\t\tvar value = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( value ) {\r\n\r\n\t\t\t\t\t\tif ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }\r\n\t\t\t\t\t\tif ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }\r\n\r\n\t\t\t\t\t\tmorphInfluences[ i ] = value;\r\n\t\t\t\t\t\tmorphInfluencesSum += value;\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmorphInfluences[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\r\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\r\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\r\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\r\n\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\r\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLObjects( gl, geometries, attributes, info ) {\r\n\r\n\t\tvar updateList = {};\r\n\r\n\t\tfunction update( object ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\t\t\tvar buffergeometry = geometries.get( object, geometry );\r\n\r\n\t\t\t// Update once per frame\r\n\r\n\t\t\tif ( updateList[ buffergeometry.id ] !== frame ) {\r\n\r\n\t\t\t\tif ( geometry.isGeometry ) {\r\n\r\n\t\t\t\t\tbuffergeometry.updateFromObject( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometries.update( buffergeometry );\r\n\r\n\t\t\t\tupdateList[ buffergeometry.id ] = frame;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\tattributes.update( object.instanceMatrix, 34962 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffergeometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tupdateList = {};\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\t\timages = images !== undefined ? images : [];\r\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\r\n\t\tformat = format !== undefined ? format : RGBFormat;\r\n\r\n\t\tTexture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t}\r\n\r\n\tCubeTexture.prototype = Object.create( Texture.prototype );\r\n\tCubeTexture.prototype.constructor = CubeTexture;\r\n\r\n\tCubeTexture.prototype.isCubeTexture = true;\r\n\r\n\tObject.defineProperty( CubeTexture.prototype, 'images', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.image;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tthis.image = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction DataTexture2DArray( data, width, height, depth ) {\r\n\r\n\t\tTexture.call( this, null );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tDataTexture2DArray.prototype = Object.create( Texture.prototype );\r\n\tDataTexture2DArray.prototype.constructor = DataTexture2DArray;\r\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\r\n\r\n\t/**\r\n\t * @author Artur Trzesiok\r\n\t */\r\n\r\n\tfunction DataTexture3D( data, width, height, depth ) {\r\n\r\n\t\t// We're going to add .setXXX() methods for setting properties later.\r\n\t\t// Users can still set in DataTexture3D directly.\r\n\t\t//\r\n\t\t//\tvar texture = new THREE.DataTexture3D( data, width, height, depth );\r\n\t\t// \ttexture.anisotropy = 16;\r\n\t\t//\r\n\t\t// See #14839\r\n\r\n\t\tTexture.call( this, null );\r\n\r\n\t\tthis.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };\r\n\r\n\t\tthis.magFilter = NearestFilter;\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\t\tthis.flipY = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\r\n\t}\r\n\r\n\tDataTexture3D.prototype = Object.create( Texture.prototype );\r\n\tDataTexture3D.prototype.constructor = DataTexture3D;\r\n\tDataTexture3D.prototype.isDataTexture3D = true;\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Uniforms of a program.\r\n\t * Those form a tree structure with a special top-level container for the root,\r\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\r\n\t *\r\n\t *\r\n\t * Properties of inner nodes including the top-level container:\r\n\t *\r\n\t * .seq - array of nested uniforms\r\n\t * .map - nested uniforms by name\r\n\t *\r\n\t *\r\n\t * Methods of all nodes except the top-level container:\r\n\t *\r\n\t * .setValue( gl, value, [textures] )\r\n\t *\r\n\t * \t\tuploads a uniform value(s)\r\n\t *  \tthe 'textures' parameter is needed for sampler uniforms\r\n\t *\r\n\t *\r\n\t * Static methods of the top-level container (textures factorizations):\r\n\t *\r\n\t * .upload( gl, seq, values, textures )\r\n\t *\r\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n\t *\r\n\t * .seqWithValue( seq, values ) : filteredSeq\r\n\t *\r\n\t * \t\tfilters 'seq' entries with corresponding entry in values\r\n\t *\r\n\t *\r\n\t * Methods of the top-level container (textures factorizations):\r\n\t *\r\n\t * .setValue( gl, name, value, textures )\r\n\t *\r\n\t * \t\tsets uniform with  name 'name' to 'value'\r\n\t *\r\n\t * .setOptional( gl, obj, prop )\r\n\t *\r\n\t * \t\tlike .set for an optional property of the object\r\n\t *\r\n\t */\r\n\r\n\tvar emptyTexture = new Texture();\r\n\tvar emptyTexture2dArray = new DataTexture2DArray();\r\n\tvar emptyTexture3d = new DataTexture3D();\r\n\tvar emptyCubeTexture = new CubeTexture();\r\n\r\n\t// --- Utilities ---\r\n\r\n\t// Array Caches (provide typed arrays for temporary by size)\r\n\r\n\tvar arrayCacheF32 = [];\r\n\tvar arrayCacheI32 = [];\r\n\r\n\t// Float32Array caches used for uploading Matrix uniforms\r\n\r\n\tvar mat4array = new Float32Array( 16 );\r\n\tvar mat3array = new Float32Array( 9 );\r\n\tvar mat2array = new Float32Array( 4 );\r\n\r\n\t// Flattening for arrays of vectors and matrices\r\n\r\n\tfunction flatten( array, nBlocks, blockSize ) {\r\n\r\n\t\tvar firstElem = array[ 0 ];\r\n\r\n\t\tif ( firstElem <= 0 || firstElem > 0 ) { return array; }\r\n\t\t// unoptimized: ! isNaN( firstElem )\r\n\t\t// see http://jacksondunstan.com/articles/983\r\n\r\n\t\tvar n = nBlocks * blockSize,\r\n\t\t\tr = arrayCacheF32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Float32Array( n );\r\n\t\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tif ( nBlocks !== 0 ) {\r\n\r\n\t\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\t\toffset += blockSize;\r\n\t\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\tfunction arraysEqual( a, b ) {\r\n\r\n\t\tif ( a.length !== b.length ) { return false; }\r\n\r\n\t\tfor ( var i = 0, l = a.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( a[ i ] !== b[ i ] ) { return false; }\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction copyArray( a, b ) {\r\n\r\n\t\tfor ( var i = 0, l = b.length; i < l; i ++ ) {\r\n\r\n\t\t\ta[ i ] = b[ i ];\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Texture unit allocation\r\n\r\n\tfunction allocTexUnits( textures, n ) {\r\n\r\n\t\tvar r = arrayCacheI32[ n ];\r\n\r\n\t\tif ( r === undefined ) {\r\n\r\n\t\t\tr = new Int32Array( n );\r\n\t\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t{ r[ i ] = textures.allocateTextureUnit(); }\r\n\r\n\t\treturn r;\r\n\r\n\t}\r\n\r\n\t// --- Setters ---\r\n\r\n\t// Note: Defining these methods externally, because they come in a bunch\r\n\t// and this way their names minify.\r\n\r\n\t// Single scalar\r\n\r\n\tfunction setValueV1f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) { return; }\r\n\r\n\t\tgl.uniform1f( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\t// Single float vector (from flat array or THREE.VectorN)\r\n\r\n\tfunction setValueV2f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\r\n\r\n\t\t\t\tgl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform2fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueV3f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( v.r !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\r\n\r\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\r\n\t\t\t\tcache[ 0 ] = v.r;\r\n\t\t\t\tcache[ 1 ] = v.g;\r\n\t\t\t\tcache[ 2 ] = v.b;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueV4f( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( v.x !== undefined ) {\r\n\r\n\t\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\r\n\r\n\t\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t\t\tcache[ 0 ] = v.x;\r\n\t\t\t\tcache[ 1 ] = v.y;\r\n\t\t\t\tcache[ 2 ] = v.z;\r\n\t\t\t\tcache[ 3 ] = v.w;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniform4fv( this.addr, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single matrix (from flat array or MatrixN)\r\n\r\n\tfunction setValueM2( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat2array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueM3( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat3array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueM4( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar elements = v.elements;\r\n\r\n\t\tif ( elements === undefined ) {\r\n\r\n\t\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v );\r\n\r\n\t\t\tcopyArray( cache, v );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( arraysEqual( cache, elements ) ) { return; }\r\n\r\n\t\t\tmat4array.set( elements );\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\r\n\r\n\t\t\tcopyArray( cache, elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Single texture (2D / Cube)\r\n\r\n\tfunction setValueT1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.safeSetTexture2D( v || emptyTexture, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT2DArray1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT3D1( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.setTexture3D( v || emptyTexture3d, unit );\r\n\r\n\t}\r\n\r\n\tfunction setValueT6( gl, v, textures ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\t\tvar unit = textures.allocateTextureUnit();\r\n\r\n\t\tif ( cache[ 0 ] !== unit ) {\r\n\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tcache[ 0 ] = unit;\r\n\r\n\t\t}\r\n\r\n\t\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\r\n\tfunction setValueV1i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( cache[ 0 ] === v ) { return; }\r\n\r\n\t\tgl.uniform1i( this.addr, v );\r\n\r\n\t\tcache[ 0 ] = v;\r\n\r\n\t}\r\n\r\n\tfunction setValueV2i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4i( gl, v ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( arraysEqual( cache, v ) ) { return; }\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t\tcopyArray( cache, v );\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for the singular case\r\n\r\n\tfunction getSingularSetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValueV1f; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2f; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3f; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4f; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES\r\n\t\t\tcase 0x8b5f: return setValueT3D1; // SAMPLER_3D\r\n\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\r\n\t\t\tcase 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Array of scalars\r\n\tfunction setValueV1fArray( gl, v ) {\r\n\r\n\t\tgl.uniform1fv( this.addr, v );\r\n\r\n\t}\r\n\r\n\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\tfunction setValueV1iArray( gl, v ) {\r\n\r\n\t\tgl.uniform1iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV2iArray( gl, v ) {\r\n\r\n\t\tgl.uniform2iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3iArray( gl, v ) {\r\n\r\n\t\tgl.uniform3iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4iArray( gl, v ) {\r\n\r\n\t\tgl.uniform4iv( this.addr, v );\r\n\r\n\t}\r\n\r\n\r\n\t// Array of vectors (flat or from THREE classes)\r\n\r\n\tfunction setValueV2fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 2 );\r\n\r\n\t\tgl.uniform2fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV3fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 3 );\r\n\r\n\t\tgl.uniform3fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueV4fArray( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tgl.uniform4fv( this.addr, data );\r\n\r\n\t}\r\n\r\n\t// Array of matrices (flat or from THREE clases)\r\n\r\n\tfunction setValueM2Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 4 );\r\n\r\n\t\tgl.uniformMatrix2fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM3Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 9 );\r\n\r\n\t\tgl.uniformMatrix3fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\tfunction setValueM4Array( gl, v ) {\r\n\r\n\t\tvar data = flatten( v, this.size, 16 );\r\n\r\n\t\tgl.uniformMatrix4fv( this.addr, false, data );\r\n\r\n\t}\r\n\r\n\t// Array of textures (2D / Cube)\r\n\r\n\tfunction setValueT1Array( gl, v, textures ) {\r\n\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( textures, n );\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setValueT6Array( gl, v, textures ) {\r\n\r\n\t\tvar n = v.length;\r\n\r\n\t\tvar units = allocTexUnits( textures, n );\r\n\r\n\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n\tfunction getPureArraySetter( type ) {\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 0x1406: return setValueV1fArray; // FLOAT\r\n\t\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\r\n\t\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\r\n\t\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\r\n\r\n\t\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\r\n\t\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\r\n\t\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\r\n\r\n\t\t\tcase 0x8b5e: return setValueT1Array; // SAMPLER_2D\r\n\t\t\tcase 0x8b60: return setValueT6Array; // SAMPLER_CUBE\r\n\r\n\t\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\r\n\t\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\r\n\t\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\r\n\t\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// --- Uniform Classes ---\r\n\r\n\tfunction SingleUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tfunction PureArrayUniform( id, activeInfo, addr ) {\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.addr = addr;\r\n\t\tthis.cache = [];\r\n\t\tthis.size = activeInfo.size;\r\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t}\r\n\r\n\tPureArrayUniform.prototype.updateCache = function ( data ) {\r\n\r\n\t\tvar cache = this.cache;\r\n\r\n\t\tif ( data instanceof Float32Array && cache.length !== data.length ) {\r\n\r\n\t\t\tthis.cache = new Float32Array( data.length );\r\n\r\n\t\t}\r\n\r\n\t\tcopyArray( cache, data );\r\n\r\n\t};\r\n\r\n\tfunction StructuredUniform( id ) {\r\n\r\n\t\tthis.id = id;\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t}\r\n\r\n\tStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\r\n\r\n\t\tvar seq = this.seq;\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ], textures );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// --- Top-level ---\r\n\r\n\t// Parser - builds up the property tree from the path strings\r\n\r\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g;\r\n\r\n\t// extracts\r\n\t// \t- the identifier (member name or array index)\r\n\t//  - followed by an optional right bracket (found when array index)\r\n\t//  - followed by an optional left bracket or dot (type of subscript)\r\n\t//\r\n\t// Note: These portions can be read in a non-overlapping fashion and\r\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\r\n\t// in the uniform names.\r\n\r\n\tfunction addUniform( container, uniformObject ) {\r\n\r\n\t\tcontainer.seq.push( uniformObject );\r\n\t\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n\t}\r\n\r\n\tfunction parseUniform( activeInfo, addr, container ) {\r\n\r\n\t\tvar path = activeInfo.name,\r\n\t\t\tpathLength = path.length;\r\n\r\n\t\t// reset RegExp object, because of the early exit of a previous run\r\n\t\tRePathPart.lastIndex = 0;\r\n\r\n\t\twhile ( true ) {\r\n\r\n\t\t\tvar match = RePathPart.exec( path ),\r\n\t\t\t\tmatchEnd = RePathPart.lastIndex,\r\n\r\n\t\t\t\tid = match[ 1 ],\r\n\t\t\t\tidIsIndex = match[ 2 ] === ']',\r\n\t\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\t\tif ( idIsIndex ) { id = id | 0; } // convert to integer\r\n\r\n\t\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\r\n\r\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\t\tvar map = container.map, next = map[ id ];\r\n\r\n\t\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontainer = next;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Root Container\r\n\r\n\tfunction WebGLUniforms( gl, program ) {\r\n\r\n\t\tthis.seq = [];\r\n\t\tthis.map = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, 35718 );\r\n\r\n\t\tfor ( var i = 0; i < n; ++ i ) {\r\n\r\n\t\t\tvar info = gl.getActiveUniform( program, i ),\r\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\r\n\r\n\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) { u.setValue( gl, value, textures ); }\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\r\n\r\n\t\tvar v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) { this.setValue( gl, name, v ); }\r\n\r\n\t};\r\n\r\n\r\n\t// Static interface\r\n\r\n\tWebGLUniforms.upload = function ( gl, seq, values, textures ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\t\t\t\tu.setValue( gl, v.value, textures );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.seqWithValue = function ( seq, values ) {\r\n\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tif ( u.id in values ) { r.push( u ); }\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\treturn shader;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase LinearEncoding:\r\n\t\t\t\treturn [ 'Linear', '( value )' ];\r\n\t\t\tcase sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB', '( value )' ];\r\n\t\t\tcase RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE', '( value )' ];\r\n\t\t\tcase RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\r\n\t\t\tcase RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\r\n\t\t\tcase RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\r\n\t\t\tcase GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tcase LogLuvEncoding:\r\n\t\t\t\treturn [ 'LogLuv', '( value )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getShaderErrors( gl, shader, type ) {\r\n\r\n\t\tvar status = gl.getShaderParameter( shader, 35713 );\r\n\t\tvar log = gl.getShaderInfoLog( shader ).trim();\r\n\r\n\t\tif ( status && log === '' ) { return ''; }\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\tvar source = gl.getShaderSource( shader );\r\n\r\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers( source );\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase LinearToneMapping:\r\n\t\t\t\ttoneMappingName = 'Linear';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = 'Reinhard';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = 'Uncharted2';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase CineonToneMapping:\r\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase ACESFilmicToneMapping:\r\n\t\t\t\ttoneMappingName = 'ACESFilmic';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) { continue; }\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, 35721 );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\r\n\t\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\r\n\t\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\r\n\t\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\r\n\r\n\t}\r\n\r\n\tfunction replaceClippingPlaneNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\r\n\t\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\r\n\r\n\t}\r\n\r\n\t// Resolve Includes\r\n\r\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n\r\n\tfunction resolveIncludes( string ) {\r\n\r\n\t\treturn string.replace( includePattern, includeReplacer );\r\n\r\n\t}\r\n\r\n\tfunction includeReplacer( match, include ) {\r\n\r\n\t\tvar string = ShaderChunk[ include ];\r\n\r\n\t\tif ( string === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t}\r\n\r\n\t\treturn resolveIncludes( string );\r\n\r\n\t}\r\n\r\n\t// Unroll Loops\r\n\r\n\tvar loopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\treturn string.replace( loopPattern, loopReplacer );\r\n\r\n\t}\r\n\r\n\tfunction loopReplacer( match, start, end, snippet ) {\r\n\r\n\t\tvar string = '';\r\n\r\n\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\tstring += snippet\r\n\t\t\t\t.replace( /\\[ i \\]/g, '[ ' + i + ' ]' )\r\n\t\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\r\n\r\n\t\t}\r\n\r\n\t\treturn string;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction generatePrecision( parameters ) {\r\n\r\n\t\tvar precisionstring = \"precision \" + parameters.precision + \" float;\\nprecision \" + parameters.precision + \" int;\";\r\n\r\n\t\tif ( parameters.precision === \"highp\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define HIGH_PRECISION\";\r\n\r\n\t\t} else if ( parameters.precision === \"mediump\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define MEDIUM_PRECISION\";\r\n\r\n\t\t} else if ( parameters.precision === \"lowp\" ) {\r\n\r\n\t\t\tprecisionstring += \"\\n#define LOW_PRECISION\";\r\n\r\n\t\t}\r\n\r\n\t\treturn precisionstring;\r\n\r\n\t}\r\n\r\n\tfunction generateShadowMapTypeDefine( parameters ) {\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\r\n\r\n\t\t}\r\n\r\n\t\treturn shadowMapTypeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapTypeDefine( parameters ) {\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\t\tcase CubeReflectionMapping:\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase CubeUVReflectionMapping:\r\n\t\t\t\tcase CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase EquirectangularReflectionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapTypeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapModeDefine( parameters ) {\r\n\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.envMapMode ) {\r\n\r\n\t\t\t\tcase CubeRefractionMapping:\r\n\t\t\t\tcase EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapModeDefine;\r\n\r\n\t}\r\n\r\n\tfunction generateEnvMapBlendingDefine( parameters ) {\r\n\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( parameters.combine ) {\r\n\r\n\t\t\t\tcase MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn envMapBlendingDefine;\r\n\r\n\t}\r\n\r\n\tfunction WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {\r\n\r\n\t\tvar gl = renderer.getContext();\r\n\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = shader.vertexShader;\r\n\t\tvar fragmentShader = shader.fragmentShader;\r\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\r\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine( parameters );\r\n\t\tvar envMapModeDefine = generateEnvMapModeDefine( parameters );\r\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\r\n\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tvar numMultiviewViews = parameters.numMultiviewViews;\r\n\r\n\t\tif ( material.isRawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixVertex.length > 0 ) {\r\n\r\n\t\t\t\tprefixVertex += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\t\t\t\tcustomDefines\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tif ( prefixFragment.length > 0 ) {\r\n\r\n\t\t\t\tprefixFragment += '\\n';\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\r\n\r\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\r\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\r\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t\t'#ifdef USE_INSTANCING',\r\n\r\n\t\t\t\t' attribute mat4 instanceMatrix;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_TANGENT',\r\n\r\n\t\t\t\t'\tattribute vec4 tangent;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\tgeneratePrecision( parameters ),\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + shader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\r\n\t\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\r\n\t\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\r\n\t\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\r\n\r\n\t\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\r\n\t\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\r\n\r\n\t\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\t\t\t'uniform bool isOrthographic;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\r\n\r\n\t\t\t\tparameters.dithering ? '#define DITHERING' : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?\r\n\t\t\t\t\tShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = resolveIncludes( vertexShader );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\t\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = resolveIncludes( fragmentShader );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\r\n\r\n\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\tif ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {\r\n\r\n\t\t\tvar isGLSL3ShaderMaterial = false;\r\n\r\n\t\t\tvar versionRegex = /^\\s*#version\\s+300\\s+es\\s*\\n/;\r\n\r\n\t\t\tif ( material.isShaderMaterial &&\r\n\t\t\t\tvertexShader.match( versionRegex ) !== null &&\r\n\t\t\t\tfragmentShader.match( versionRegex ) !== null ) {\r\n\r\n\t\t\t\tisGLSL3ShaderMaterial = true;\r\n\r\n\t\t\t\tvertexShader = vertexShader.replace( versionRegex, '' );\r\n\t\t\t\tfragmentShader = fragmentShader.replace( versionRegex, '' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// GLSL 3.0 conversion\r\n\r\n\t\t\tprefixVertex = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define attribute in',\r\n\t\t\t\t'#define varying out',\r\n\t\t\t\t'#define texture2D texture'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixVertex;\r\n\r\n\t\t\tprefixFragment = [\r\n\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t'#define varying in',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',\r\n\t\t\t\tisGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',\r\n\t\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\r\n\t\t\t\t'#define texture2D texture',\r\n\t\t\t\t'#define textureCube texture',\r\n\t\t\t\t'#define texture2DProj textureProj',\r\n\t\t\t\t'#define texture2DLodEXT textureLod',\r\n\t\t\t\t'#define texture2DProjLodEXT textureProjLod',\r\n\t\t\t\t'#define textureCubeLodEXT textureLod',\r\n\t\t\t\t'#define texture2DGradEXT textureGrad',\r\n\t\t\t\t'#define texture2DProjGradEXT textureProjGrad',\r\n\t\t\t\t'#define textureCubeGradEXT textureGrad'\r\n\t\t\t].join( '\\n' ) + '\\n' + prefixFragment;\r\n\r\n\t\t\t// Multiview\r\n\r\n\t\t\tif ( numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\tprefixVertex = prefixVertex.replace(\r\n\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\r\n\t\t\t\t\t\t'layout(num_views = ' + numMultiviewViews + ') in;',\r\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixVertex = prefixVertex.replace(\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t\t'uniform mat3 normalMatrix;'\r\n\t\t\t\t\t].join( '\\n' ),\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'uniform mat3 normalMatrices[' + numMultiviewViews + '];',\r\n\r\n\t\t\t\t\t\t'#define modelViewMatrix modelViewMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define projectionMatrix projectionMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]',\r\n\t\t\t\t\t\t'#define normalMatrix normalMatrices[VIEW_ID]'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixFragment = prefixFragment.replace(\r\n\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'#version 300 es\\n',\r\n\t\t\t\t\t\t'#extension GL_OVR_multiview2 : require',\r\n\t\t\t\t\t\t'#define VIEW_ID gl_ViewID_OVR'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprefixFragment = prefixFragment.replace(\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t'uniform mat4 viewMatrices[' + numMultiviewViews + '];',\r\n\t\t\t\t\t\t'#define viewMatrix viewMatrices[VIEW_ID]'\r\n\t\t\t\t\t].join( '\\n' )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\r\n\t\tvar glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\t// check for link errors\r\n\t\tif ( renderer.debug.checkShaderErrors ) {\r\n\r\n\t\t\tvar programLog = gl.getProgramInfoLog( program ).trim();\r\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\r\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\r\n\r\n\t\t\tvar runnable = true;\r\n\t\t\tvar haveDiagnostics = true;\r\n\r\n\t\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\r\n\r\n\t\t\t\trunnable = false;\r\n\r\n\t\t\t\tvar vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\r\n\t\t\t\tvar fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );\r\n\r\n\t\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\t\thaveDiagnostics = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\t\trunnable: runnable,\r\n\t\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function () {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function () {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function () {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.name = shader.name;\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.cacheKey = cacheKey;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\t\tthis.numMultiviewViews = numMultiviewViews;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLPrograms( renderer, extensions, capabilities ) {\r\n\r\n\t\tvar programs = [];\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\r\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\r\n\t\tvar precision = capabilities.precision;\r\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\tvar vertexTextures = capabilities.vertexTextures;\r\n\r\n\t\tvar shaderIDs = {\r\n\t\t\tMeshDepthMaterial: 'depth',\r\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\r\n\t\t\tMeshNormalMaterial: 'normal',\r\n\t\t\tMeshBasicMaterial: 'basic',\r\n\t\t\tMeshLambertMaterial: 'lambert',\r\n\t\t\tMeshPhongMaterial: 'phong',\r\n\t\t\tMeshToonMaterial: 'phong',\r\n\t\t\tMeshStandardMaterial: 'physical',\r\n\t\t\tMeshPhysicalMaterial: 'physical',\r\n\t\t\tMeshMatcapMaterial: 'matcap',\r\n\t\t\tLineBasicMaterial: 'basic',\r\n\t\t\tLineDashedMaterial: 'dashed',\r\n\t\t\tPointsMaterial: 'points',\r\n\t\t\tShadowMaterial: 'shadow',\r\n\t\t\tSpriteMaterial: 'sprite'\r\n\t\t};\r\n\r\n\t\tvar parameterNames = [\r\n\t\t\t\"precision\", \"isWebGL2\", \"supportsVertexTextures\", \"outputEncoding\", \"instancing\", \"numMultiviewViews\",\r\n\t\t\t\"map\", \"mapEncoding\", \"matcap\", \"matcapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"envMapCubeUV\",\r\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"objectSpaceNormalMap\", \"tangentSpaceNormalMap\", \"clearcoatNormalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\t\"roughnessMap\", \"metalnessMap\", \"gradientMap\",\r\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"vertexTangents\", \"vertexUvs\", \"uvsVertexOnly\", \"fog\", \"useFog\", \"fogExp2\",\r\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"numRectAreaLights\",\r\n\t\t\t\"numDirLightShadows\", \"numPointLightShadows\", \"numSpotLightShadows\",\r\n\t\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"numClipIntersection\", \"depthPacking\", \"dithering\",\r\n\t\t\t\"sheen\"\r\n\t\t];\r\n\r\n\r\n\t\tfunction allocateBones( object ) {\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\tif ( floatVertexTextures ) {\r\n\r\n\t\t\t\treturn 1024;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// default for when object is not specified\r\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t\t//\r\n\t\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\r\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\t\tvar maxBones = Math.min( nVertexMatrices, bones.length );\r\n\r\n\t\t\t\tif ( maxBones < bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\r\n\t\t\t\t\treturn 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn maxBones;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\t\tvar encoding;\r\n\r\n\t\t\tif ( ! map ) {\r\n\r\n\t\t\t\tencoding = LinearEncoding;\r\n\r\n\t\t\t} else if ( map.isTexture ) {\r\n\r\n\t\t\t\tencoding = map.encoding;\r\n\r\n\t\t\t} else if ( map.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\t\tif ( encoding === LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\t\tencoding = GammaEncoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn encoding;\r\n\r\n\t\t}\r\n\r\n\t\tthis.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {\r\n\r\n\t\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t\t// (not to blow over maxLights budget)\r\n\r\n\t\t\tvar maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;\r\n\r\n\t\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\r\n\t\t\tvar numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;\r\n\r\n\t\t\tvar parameters = {\r\n\r\n\t\t\t\tisWebGL2: isWebGL2,\r\n\r\n\t\t\t\tshaderID: shaderID,\r\n\r\n\t\t\t\tprecision: precision,\r\n\r\n\t\t\t\tinstancing: object.isInstancedMesh === true,\r\n\r\n\t\t\t\tsupportsVertexTextures: vertexTextures,\r\n\t\t\t\tnumMultiviewViews: numMultiviewViews,\r\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\r\n\t\t\t\tmap: !! material.map,\r\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\t\tmatcap: !! material.matcap,\r\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),\r\n\t\t\t\tenvMap: !! material.envMap,\r\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),\r\n\t\t\t\tlightMap: !! material.lightMap,\r\n\t\t\t\taoMap: !! material.aoMap,\r\n\t\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\r\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\r\n\t\t\t\tclearcoatNormalMap: !! material.clearcoatNormalMap,\r\n\t\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\t\tgradientMap: !! material.gradientMap,\r\n\r\n\t\t\t\tsheen: !! material.sheen,\r\n\r\n\t\t\t\tcombine: material.combine,\r\n\r\n\t\t\t\tvertexTangents: ( material.normalMap && material.vertexTangents ),\r\n\t\t\t\tvertexColors: material.vertexColors,\r\n\t\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,\r\n\t\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,\r\n\r\n\t\t\t\tfog: !! fog,\r\n\t\t\t\tuseFog: material.fog,\r\n\t\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\r\n\r\n\t\t\t\tflatShading: material.flatShading,\r\n\r\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n\t\t\t\tskinning: material.skinning && maxBones > 0,\r\n\t\t\t\tmaxBones: maxBones,\r\n\t\t\t\tuseVertexTexture: floatVertexTextures,\r\n\r\n\t\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\t\tnumPointLights: lights.point.length,\r\n\t\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\r\n\t\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\r\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\r\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\r\n\r\n\t\t\t\tnumClippingPlanes: nClipPlanes,\r\n\t\t\t\tnumClipIntersection: nClipIntersection,\r\n\r\n\t\t\t\tdithering: material.dithering,\r\n\r\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\r\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\r\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\t\talphaTest: material.alphaTest,\r\n\t\t\t\tdoubleSided: material.side === DoubleSide,\r\n\t\t\t\tflipSided: material.side === BackSide,\r\n\r\n\t\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\r\n\r\n\t\t\t};\r\n\r\n\t\t\treturn parameters;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getProgramCacheKey = function ( material, parameters ) {\r\n\r\n\t\t\tvar array = [];\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tarray.push( material.fragmentShader );\r\n\t\t\t\tarray.push( material.vertexShader );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\t\tarray.push( name );\r\n\t\t\t\t\tarray.push( material.defines[ name ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray.push( material.onBeforeCompile.toString() );\r\n\r\n\t\t\tarray.push( renderer.gammaOutput );\r\n\r\n\t\t\tarray.push( renderer.gammaFactor );\r\n\r\n\t\t\treturn array.join();\r\n\r\n\t\t};\r\n\r\n\t\tthis.acquireProgram = function ( material, shader, parameters, cacheKey ) {\r\n\r\n\t\t\tvar program;\r\n\r\n\t\t\t// Check if code has been already compiled\r\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tvar preexistingProgram = programs[ p ];\r\n\r\n\t\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\r\n\r\n\t\t\t\t\tprogram = preexistingProgram;\r\n\t\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\tprogram = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );\r\n\t\t\t\tprograms.push( program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t};\r\n\r\n\t\tthis.releaseProgram = function ( program ) {\r\n\r\n\t\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t\t// Remove from unordered set\r\n\t\t\t\tvar i = programs.indexOf( program );\r\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\t\tprograms.pop();\r\n\r\n\t\t\t\t// Free WebGL resources\r\n\t\t\t\tprogram.destroy();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tthis.programs = programs;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fordacious / fordacious.github.io\r\n\t */\r\n\r\n\tfunction WebGLProperties() {\r\n\r\n\t\tvar properties = new WeakMap();\r\n\r\n\t\tfunction get( object ) {\r\n\r\n\t\t\tvar map = properties.get( object );\r\n\r\n\t\t\tif ( map === undefined ) {\r\n\r\n\t\t\t\tmap = {};\r\n\t\t\t\tproperties.set( object, map );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn map;\r\n\r\n\t\t}\r\n\r\n\t\tfunction remove( object ) {\r\n\r\n\t\t\tproperties.delete( object );\r\n\r\n\t\t}\r\n\r\n\t\tfunction update( object, key, value ) {\r\n\r\n\t\t\tproperties.get( object )[ key ] = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tproperties = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tremove: remove,\r\n\t\t\tupdate: update,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction painterSortStable( a, b ) {\r\n\r\n\t\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.program !== b.program ) {\r\n\r\n\t\t\treturn a.program.id - b.program.id;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable( a, b ) {\r\n\r\n\t\tif ( a.groupOrder !== b.groupOrder ) {\r\n\r\n\t\t\treturn a.groupOrder - b.groupOrder;\r\n\r\n\t\t} else if ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction WebGLRenderList() {\r\n\r\n\t\tvar renderItems = [];\r\n\t\tvar renderItemsIndex = 0;\r\n\r\n\t\tvar opaque = [];\r\n\t\tvar transparent = [];\r\n\r\n\t\tvar defaultProgram = { id: - 1 };\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\trenderItemsIndex = 0;\r\n\r\n\t\t\topaque.length = 0;\r\n\t\t\ttransparent.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = renderItems[ renderItemsIndex ];\r\n\r\n\t\t\tif ( renderItem === undefined ) {\r\n\r\n\t\t\t\trenderItem = {\r\n\t\t\t\t\tid: object.id,\r\n\t\t\t\t\tobject: object,\r\n\t\t\t\t\tgeometry: geometry,\r\n\t\t\t\t\tmaterial: material,\r\n\t\t\t\t\tprogram: material.program || defaultProgram,\r\n\t\t\t\t\tgroupOrder: groupOrder,\r\n\t\t\t\t\trenderOrder: object.renderOrder,\r\n\t\t\t\t\tz: z,\r\n\t\t\t\t\tgroup: group\r\n\t\t\t\t};\r\n\r\n\t\t\t\trenderItems[ renderItemsIndex ] = renderItem;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderItem.id = object.id;\r\n\t\t\t\trenderItem.object = object;\r\n\t\t\t\trenderItem.geometry = geometry;\r\n\t\t\t\trenderItem.material = material;\r\n\t\t\t\trenderItem.program = material.program || defaultProgram;\r\n\t\t\t\trenderItem.groupOrder = groupOrder;\r\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\r\n\t\t\t\trenderItem.z = z;\r\n\t\t\t\trenderItem.group = group;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderItemsIndex ++;\r\n\r\n\t\t\treturn renderItem;\r\n\r\n\t\t}\r\n\r\n\t\tfunction push( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\r\n\r\n\t\t\tvar renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\r\n\r\n\t\t\t( material.transparent === true ? transparent : opaque ).unshift( renderItem );\r\n\r\n\t\t}\r\n\r\n\t\tfunction sort() {\r\n\r\n\t\t\tif ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }\r\n\t\t\tif ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\topaque: opaque,\r\n\t\t\ttransparent: transparent,\r\n\r\n\t\t\tinit: init,\r\n\t\t\tpush: push,\r\n\t\t\tunshift: unshift,\r\n\r\n\t\t\tsort: sort\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderLists() {\r\n\r\n\t\tvar lists = new WeakMap();\r\n\r\n\t\tfunction onSceneDispose( event ) {\r\n\r\n\t\t\tvar scene = event.target;\r\n\r\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\tlists.delete( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar cameras = lists.get( scene );\r\n\t\t\tvar list;\r\n\t\t\tif ( cameras === undefined ) {\r\n\r\n\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\tlists.set( scene, new WeakMap() );\r\n\t\t\t\tlists.get( scene ).set( camera, list );\r\n\r\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlist = cameras.get( camera );\r\n\t\t\t\tif ( list === undefined ) {\r\n\r\n\t\t\t\t\tlist = new WebGLRenderList();\r\n\t\t\t\t\tcameras.set( camera, list );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\tlists = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction UniformsCache() {\r\n\r\n\t\tvar lights = {};\r\n\r\n\t\treturn {\r\n\r\n\t\t\tget: function ( light ) {\r\n\r\n\t\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\t\t\treturn lights[ light.id ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniforms;\r\n\r\n\t\t\t\tswitch ( light.type ) {\r\n\r\n\t\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\r\n\t\t\t\t\t\t\tshadowCameraNear: 1,\r\n\t\t\t\t\t\t\tshadowCameraFar: 1000\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'HemisphereLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tdirection: new Vector3(),\r\n\t\t\t\t\t\t\tskyColor: new Color(),\r\n\t\t\t\t\t\t\tgroundColor: new Color()\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RectAreaLight':\r\n\t\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\t\tcolor: new Color(),\r\n\t\t\t\t\t\t\tposition: new Vector3(),\r\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\r\n\t\t\t\t\t\t\thalfHeight: new Vector3()\r\n\t\t\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\t\t\treturn uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar nextVersion = 0;\r\n\r\n\tfunction shadowCastingLightsFirst( lightA, lightB ) {\r\n\r\n\t\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\r\n\r\n\t}\r\n\r\n\tfunction WebGLLights() {\r\n\r\n\t\tvar cache = new UniformsCache();\r\n\r\n\t\tvar state = {\r\n\r\n\t\t\tversion: 0,\r\n\r\n\t\t\thash: {\r\n\t\t\t\tdirectionalLength: - 1,\r\n\t\t\t\tpointLength: - 1,\r\n\t\t\t\tspotLength: - 1,\r\n\t\t\t\trectAreaLength: - 1,\r\n\t\t\t\themiLength: - 1,\r\n\r\n\t\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\t\tnumPointShadows: - 1,\r\n\t\t\t\tnumSpotShadows: - 1,\r\n\t\t\t},\r\n\r\n\t\t\tambient: [ 0, 0, 0 ],\r\n\t\t\tprobe: [],\r\n\t\t\tdirectional: [],\r\n\t\t\tdirectionalShadowMap: [],\r\n\t\t\tdirectionalShadowMatrix: [],\r\n\t\t\tspot: [],\r\n\t\t\tspotShadowMap: [],\r\n\t\t\tspotShadowMatrix: [],\r\n\t\t\trectArea: [],\r\n\t\t\tpoint: [],\r\n\t\t\tpointShadowMap: [],\r\n\t\t\tpointShadowMatrix: [],\r\n\t\t\themi: [],\r\n\r\n\t\t\tnumDirectionalShadows: - 1,\r\n\t\t\tnumPointShadows: - 1,\r\n\t\t\tnumSpotShadows: - 1\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }\r\n\r\n\t\tvar vector3 = new Vector3();\r\n\t\tvar matrix4 = new Matrix4();\r\n\t\tvar matrix42 = new Matrix4();\r\n\r\n\t\tfunction setup( lights, shadows, camera ) {\r\n\r\n\t\t\tvar r = 0, g = 0, b = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }\r\n\r\n\t\t\tvar directionalLength = 0;\r\n\t\t\tvar pointLength = 0;\r\n\t\t\tvar spotLength = 0;\r\n\t\t\tvar rectAreaLength = 0;\r\n\t\t\tvar hemiLength = 0;\r\n\r\n\t\t\tvar numDirectionalShadows = 0;\r\n\t\t\tvar numPointShadows = 0;\r\n\t\t\tvar numSpotShadows = 0;\r\n\r\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\tlights.sort( shadowCastingLightsFirst );\r\n\r\n\t\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\t\tvar color = light.color;\r\n\t\t\t\tvar intensity = light.intensity;\r\n\t\t\t\tvar distance = light.distance;\r\n\r\n\t\t\t\tvar shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\t\tif ( light.isAmbientLight ) {\r\n\r\n\t\t\t\t\tr += color.r * intensity;\r\n\t\t\t\t\tg += color.g * intensity;\r\n\t\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t\t} else if ( light.isLightProbe ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 9; j ++ ) {\r\n\r\n\t\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( light.isDirectionalLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumDirectionalShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.directional[ directionalLength ] = uniforms;\r\n\r\n\t\t\t\t\tdirectionalLength ++;\r\n\r\n\t\t\t\t} else if ( light.isSpotLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\r\n\t\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumSpotShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.spot[ spotLength ] = uniforms;\r\n\r\n\t\t\t\t\tspotLength ++;\r\n\r\n\t\t\t\t} else if ( light.isRectAreaLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\t// (a) intensity is the total visible light emitted\r\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\r\n\r\n\t\t\t\t\t// (b) intensity is the brightness of the light\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\t// extract local rotation of light to derive width/height half vectors\r\n\t\t\t\t\tmatrix42.identity();\r\n\t\t\t\t\tmatrix4.copy( light.matrixWorld );\r\n\t\t\t\t\tmatrix4.premultiply( viewMatrix );\r\n\t\t\t\t\tmatrix42.extractRotation( matrix4 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\r\n\t\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\r\n\r\n\t\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\r\n\t\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\r\n\r\n\t\t\t\t\t// TODO (abelnation): RectAreaLight distance?\r\n\t\t\t\t\t// uniforms.distance = distance;\r\n\r\n\t\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\r\n\r\n\t\t\t\t\trectAreaLength ++;\r\n\r\n\t\t\t\t} else if ( light.isPointLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\t\tuniforms.decay = light.decay;\r\n\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\t\t\tuniforms.shadowBias = shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = shadow.mapSize;\r\n\t\t\t\t\t\tuniforms.shadowCameraNear = shadow.camera.near;\r\n\t\t\t\t\t\tuniforms.shadowCameraFar = shadow.camera.far;\r\n\r\n\t\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\r\n\t\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\r\n\r\n\t\t\t\t\t\tnumPointShadows ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tstate.point[ pointLength ] = uniforms;\r\n\r\n\t\t\t\t\tpointLength ++;\r\n\r\n\t\t\t\t} else if ( light.isHemisphereLight ) {\r\n\r\n\t\t\t\t\tvar uniforms = cache.get( light );\r\n\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\r\n\r\n\t\t\t\t\themiLength ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.ambient[ 0 ] = r;\r\n\t\t\tstate.ambient[ 1 ] = g;\r\n\t\t\tstate.ambient[ 2 ] = b;\r\n\r\n\t\t\tvar hash = state.hash;\r\n\r\n\t\t\tif ( hash.directionalLength !== directionalLength ||\r\n\t\t\t\thash.pointLength !== pointLength ||\r\n\t\t\t\thash.spotLength !== spotLength ||\r\n\t\t\t\thash.rectAreaLength !== rectAreaLength ||\r\n\t\t\t\thash.hemiLength !== hemiLength ||\r\n\t\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\r\n\t\t\t\thash.numPointShadows !== numPointShadows ||\r\n\t\t\t\thash.numSpotShadows !== numSpotShadows ) {\r\n\r\n\t\t\t\tstate.directional.length = directionalLength;\r\n\t\t\t\tstate.spot.length = spotLength;\r\n\t\t\t\tstate.rectArea.length = rectAreaLength;\r\n\t\t\t\tstate.point.length = pointLength;\r\n\t\t\t\tstate.hemi.length = hemiLength;\r\n\r\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\r\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\r\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\r\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\r\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\r\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\r\n\r\n\t\t\t\thash.directionalLength = directionalLength;\r\n\t\t\t\thash.pointLength = pointLength;\r\n\t\t\t\thash.spotLength = spotLength;\r\n\t\t\t\thash.rectAreaLength = rectAreaLength;\r\n\t\t\t\thash.hemiLength = hemiLength;\r\n\r\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\r\n\t\t\t\thash.numPointShadows = numPointShadows;\r\n\t\t\t\thash.numSpotShadows = numSpotShadows;\r\n\r\n\t\t\t\tstate.version = nextVersion ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsetup: setup,\r\n\t\t\tstate: state\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WebGLRenderState() {\r\n\r\n\t\tvar lights = new WebGLLights();\r\n\r\n\t\tvar lightsArray = [];\r\n\t\tvar shadowsArray = [];\r\n\r\n\t\tfunction init() {\r\n\r\n\t\t\tlightsArray.length = 0;\r\n\t\t\tshadowsArray.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushLight( light ) {\r\n\r\n\t\t\tlightsArray.push( light );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushShadow( shadowLight ) {\r\n\r\n\t\t\tshadowsArray.push( shadowLight );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setupLights( camera ) {\r\n\r\n\t\t\tlights.setup( lightsArray, shadowsArray, camera );\r\n\r\n\t\t}\r\n\r\n\t\tvar state = {\r\n\t\t\tlightsArray: lightsArray,\r\n\t\t\tshadowsArray: shadowsArray,\r\n\r\n\t\t\tlights: lights\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\tinit: init,\r\n\t\t\tstate: state,\r\n\t\t\tsetupLights: setupLights,\r\n\r\n\t\t\tpushLight: pushLight,\r\n\t\t\tpushShadow: pushShadow\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction WebGLRenderStates() {\r\n\r\n\t\tvar renderStates = new WeakMap();\r\n\r\n\t\tfunction onSceneDispose( event ) {\r\n\r\n\t\t\tvar scene = event.target;\r\n\r\n\t\t\tscene.removeEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\trenderStates.delete( scene );\r\n\r\n\t\t}\r\n\r\n\t\tfunction get( scene, camera ) {\r\n\r\n\t\t\tvar renderState;\r\n\r\n\t\t\tif ( renderStates.has( scene ) === false ) {\r\n\r\n\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\trenderStates.set( scene, new WeakMap() );\r\n\t\t\t\trenderStates.get( scene ).set( camera, renderState );\r\n\r\n\t\t\t\tscene.addEventListener( 'dispose', onSceneDispose );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( renderStates.get( scene ).has( camera ) === false ) {\r\n\r\n\t\t\t\t\trenderState = new WebGLRenderState();\r\n\t\t\t\t\trenderStates.get( scene ).set( camera, renderState );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderState = renderStates.get( scene ).get( camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn renderState;\r\n\r\n\t\t}\r\n\r\n\t\tfunction dispose() {\r\n\r\n\t\t\trenderStates = new WeakMap();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tget: get,\r\n\t\t\tdispose: dispose\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / https://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDepthMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\r\n\t\tthis.depthPacking = BasicDepthPacking;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDepthMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDepthMaterial.prototype.constructor = MeshDepthMaterial;\r\n\r\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\r\n\r\n\tMeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.depthPacking = source.depthPacking;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  referencePosition: <float>,\r\n\t *  nearDistance: <float>,\r\n\t *  farDistance: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshDistanceMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshDistanceMaterial';\r\n\r\n\t\tthis.referencePosition = new Vector3();\r\n\t\tthis.nearDistance = 1;\r\n\t\tthis.farDistance = 1000;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshDistanceMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;\r\n\r\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\r\n\r\n\tMeshDistanceMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.referencePosition.copy( source.referencePosition );\r\n\t\tthis.nearDistance = source.nearDistance;\r\n\t\tthis.farDistance = source.farDistance;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n  float mean = 0.0;\\n  float squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n    #ifdef HORIZONAL_PASS\\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n      mean += distribution.x;\\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n    #else\\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\\n      mean += depth;\\n      squared_mean += depth * depth;\\n    #endif\\n  }\\n  mean = mean * HALF_SAMPLE_RATE;\\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\\n  float std_dev = sqrt( squared_mean - mean * mean );\\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\r\n\r\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLShadowMap( _renderer, _objects, maxTextureSize ) {\r\n\r\n\t\tvar _frustum = new Frustum(),\r\n\r\n\t\t\t_shadowMapSize = new Vector2(),\r\n\t\t\t_viewportSize = new Vector2(),\r\n\r\n\t\t\t_viewport = new Vector4(),\r\n\r\n\t\t\t_depthMaterials = [],\r\n\t\t\t_distanceMaterials = [],\r\n\r\n\t\t\t_materialCache = {};\r\n\r\n\t\tvar shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\r\n\r\n\t\tvar shadowMaterialVertical = new ShaderMaterial( {\r\n\r\n\t\t\tdefines: {\r\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\r\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\r\n\t\t\t},\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tshadow_pass: { value: null },\r\n\t\t\t\tresolution: { value: new Vector2() },\r\n\t\t\t\tradius: { value: 4.0 }\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: vsm_vert,\r\n\r\n\t\t\tfragmentShader: vsm_frag\r\n\r\n\t\t} );\r\n\r\n\t\tvar shadowMaterialHorizonal = shadowMaterialVertical.clone();\r\n\t\tshadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;\r\n\r\n\t\tvar fullScreenTri = new BufferGeometry();\r\n\t\tfullScreenTri.setAttribute(\r\n\t\t\t\"position\",\r\n\t\t\tnew BufferAttribute(\r\n\t\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\r\n\t\t\t\t3\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tvar fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tthis.type = PCFShadowMap;\r\n\r\n\t\tthis.render = function ( lights, scene, camera ) {\r\n\r\n\t\t\tif ( scope.enabled === false ) { return; }\r\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }\r\n\r\n\t\t\tif ( lights.length === 0 ) { return; }\r\n\r\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\r\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\r\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\r\n\r\n\t\t\tvar _state = _renderer.state;\r\n\r\n\t\t\t// Set GL state for depth map.\r\n\t\t\t_state.setBlending( NoBlending );\r\n\t\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\r\n\t\t\t_state.buffers.depth.setTest( true );\r\n\t\t\t_state.setScissorTest( false );\r\n\r\n\t\t\t// render depth map\r\n\r\n\t\t\tfor ( var i = 0, il = lights.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar light = lights[ i ];\r\n\t\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\r\n\r\n\t\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\r\n\r\n\t\t\t\t_viewportSize.copy( shadow.mapSize );\r\n\r\n\t\t\t\tif ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );\r\n\r\n\t\t\t\t\tif ( _shadowMapSize.x > maxTextureSize ) {\r\n\r\n\t\t\t\t\t\t_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );\r\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\r\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _shadowMapSize.y > maxTextureSize ) {\r\n\r\n\t\t\t\t\t\t_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );\r\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\r\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\r\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\t\tvar pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\r\n\r\n\t\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\t\t\t\tshadow.map.texture.name = light.name + \".shadowMap\";\r\n\r\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_renderer.setRenderTarget( shadow.map );\r\n\t\t\t\t_renderer.clear();\r\n\r\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\r\n\r\n\t\t\t\tfor ( var vp = 0; vp < viewportCount; vp ++ ) {\r\n\r\n\t\t\t\t\tvar viewport = shadow.getViewport( vp );\r\n\r\n\t\t\t\t\t_viewport.set(\r\n\t\t\t\t\t\t_viewportSize.x * viewport.x,\r\n\t\t\t\t\t\t_viewportSize.y * viewport.y,\r\n\t\t\t\t\t\t_viewportSize.x * viewport.z,\r\n\t\t\t\t\t\t_viewportSize.y * viewport.w\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t_state.viewport( _viewport );\r\n\r\n\t\t\t\t\tshadow.updateMatrices( light, vp );\r\n\r\n\t\t\t\t\t_frustum = shadow.getFrustum();\r\n\r\n\t\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// do blur pass for VSM\r\n\r\n\t\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\r\n\r\n\t\t\t\t\tVSMPass( shadow, camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.needsUpdate = false;\r\n\r\n\t\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\r\n\r\n\t\t};\r\n\r\n\t\tfunction VSMPass( shadow, camera ) {\r\n\r\n\t\t\tvar geometry = _objects.update( fullScreenMesh );\r\n\r\n\t\t\t// vertical pass\r\n\r\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\r\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\r\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\r\n\t\t\t_renderer.setRenderTarget( shadow.mapPass );\r\n\t\t\t_renderer.clear();\r\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\r\n\r\n\t\t\t// horizonal pass\r\n\r\n\t\t\tshadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;\r\n\t\t\tshadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;\r\n\t\t\tshadowMaterialHorizonal.uniforms.radius.value = shadow.radius;\r\n\t\t\t_renderer.setRenderTarget( shadow.map );\r\n\t\t\t_renderer.clear();\r\n\t\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {\r\n\r\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\r\n\r\n\t\t\tvar material = _depthMaterials[ index ];\r\n\r\n\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\tmaterial = new MeshDepthMaterial( {\r\n\r\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\r\n\r\n\t\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_depthMaterials[ index ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {\r\n\r\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\r\n\r\n\t\t\tvar material = _distanceMaterials[ index ];\r\n\r\n\t\t\tif ( material === undefined ) {\r\n\r\n\t\t\t\tmaterial = new MeshDistanceMaterial( {\r\n\r\n\t\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\t\tskinning: useSkinning\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t_distanceMaterials[ index ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tvar result = null;\r\n\r\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\r\n\t\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\t\tif ( light.isPointLight === true ) {\r\n\r\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\r\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( customMaterial === undefined ) {\r\n\r\n\t\t\t\tvar useMorphing = false;\r\n\r\n\t\t\t\tif ( material.morphTargets === true ) {\r\n\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\r\n\r\n\t\t\t\t\t} else if ( geometry.isGeometry === true ) {\r\n\r\n\t\t\t\t\t\tuseMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useSkinning = false;\r\n\r\n\t\t\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\t\t\tif ( material.skinning === true ) {\r\n\r\n\t\t\t\t\t\tuseSkinning = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\r\n\r\n\t\t\t\tresult = getMaterialVariant( useMorphing, useSkinning, useInstancing );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = customMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _renderer.localClippingEnabled &&\r\n\t\t\t\t\tmaterial.clipShadows === true &&\r\n\t\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\r\n\r\n\t\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t\t// appropriate state\r\n\r\n\t\t\t\tvar keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\t\tvar materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.visible = material.visible;\r\n\t\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\t\tif ( type === VSMShadowMap ) {\r\n\r\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult.clipShadows = material.clipShadows;\r\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\t\t\tresult.clipIntersection = material.clipIntersection;\r\n\r\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\r\n\r\n\t\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tresult.nearDistance = shadowCameraNear;\r\n\t\t\t\tresult.farDistance = shadowCameraFar;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, camera, shadowCamera, light, type ) {\r\n\r\n\t\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\r\n\r\n\t\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\r\n\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );\r\n\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLState( gl, extensions, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tfunction ColorBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar color = new Vector4();\r\n\t\t\tvar currentColorMask = null;\r\n\t\t\tvar currentColorClear = new Vector4( 0, 0, 0, 0 );\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetMask: function ( colorMask ) {\r\n\r\n\t\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\t\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha === true ) {\r\n\r\n\t\t\t\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcolor.set( r, g, b, a );\r\n\r\n\t\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentColorMask = null;\r\n\t\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction DepthBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentDepthMask = null;\r\n\t\t\tvar currentDepthFunc = null;\r\n\t\t\tvar currentDepthClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( depthTest ) {\r\n\r\n\t\t\t\t\tif ( depthTest ) {\r\n\r\n\t\t\t\t\t\tenable( 2929 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tdisable( 2929 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( depthMask ) {\r\n\r\n\t\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.depthMask( depthMask );\r\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( depthFunc ) {\r\n\r\n\t\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\t\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\t\t\t\tcase NeverDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase EqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase GreaterDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tgl.depthFunc( 515 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( depth ) {\r\n\r\n\t\t\t\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentDepthMask = null;\r\n\t\t\t\t\tcurrentDepthFunc = null;\r\n\t\t\t\t\tcurrentDepthClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction StencilBuffer() {\r\n\r\n\t\t\tvar locked = false;\r\n\r\n\t\t\tvar currentStencilMask = null;\r\n\t\t\tvar currentStencilFunc = null;\r\n\t\t\tvar currentStencilRef = null;\r\n\t\t\tvar currentStencilFuncMask = null;\r\n\t\t\tvar currentStencilFail = null;\r\n\t\t\tvar currentStencilZFail = null;\r\n\t\t\tvar currentStencilZPass = null;\r\n\t\t\tvar currentStencilClear = null;\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tsetTest: function ( stencilTest ) {\r\n\r\n\t\t\t\t\tif ( ! locked ) {\r\n\r\n\t\t\t\t\t\tif ( stencilTest ) {\r\n\r\n\t\t\t\t\t\t\tenable( 2960 );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tdisable( 2960 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetMask: function ( stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\t\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t\t     currentStencilRef \t!== stencilRef \t||\r\n\t\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\r\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\t\t\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t\t\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\r\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetLocked: function ( lock ) {\r\n\r\n\t\t\t\t\tlocked = lock;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsetClear: function ( stencil ) {\r\n\r\n\t\t\t\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\treset: function () {\r\n\r\n\t\t\t\t\tlocked = false;\r\n\r\n\t\t\t\t\tcurrentStencilMask = null;\r\n\t\t\t\t\tcurrentStencilFunc = null;\r\n\t\t\t\t\tcurrentStencilRef = null;\r\n\t\t\t\t\tcurrentStencilFuncMask = null;\r\n\t\t\t\t\tcurrentStencilFail = null;\r\n\t\t\t\t\tcurrentStencilZFail = null;\r\n\t\t\t\t\tcurrentStencilZPass = null;\r\n\t\t\t\t\tcurrentStencilClear = null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar colorBuffer = new ColorBuffer();\r\n\t\tvar depthBuffer = new DepthBuffer();\r\n\t\tvar stencilBuffer = new StencilBuffer();\r\n\r\n\t\tvar maxVertexAttributes = gl.getParameter( 34921 );\r\n\t\tvar newAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\r\n\t\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\r\n\r\n\t\tvar enabledCapabilities = {};\r\n\r\n\t\tvar currentProgram = null;\r\n\r\n\t\tvar currentBlendingEnabled = null;\r\n\t\tvar currentBlending = null;\r\n\t\tvar currentBlendEquation = null;\r\n\t\tvar currentBlendSrc = null;\r\n\t\tvar currentBlendDst = null;\r\n\t\tvar currentBlendEquationAlpha = null;\r\n\t\tvar currentBlendSrcAlpha = null;\r\n\t\tvar currentBlendDstAlpha = null;\r\n\t\tvar currentPremultipledAlpha = false;\r\n\r\n\t\tvar currentFlipSided = null;\r\n\t\tvar currentCullFace = null;\r\n\r\n\t\tvar currentLineWidth = null;\r\n\r\n\t\tvar currentPolygonOffsetFactor = null;\r\n\t\tvar currentPolygonOffsetUnits = null;\r\n\r\n\t\tvar maxTextures = gl.getParameter( 35661 );\r\n\r\n\t\tvar lineWidthAvailable = false;\r\n\t\tvar version = 0;\r\n\t\tvar glVersion = gl.getParameter( 7938 );\r\n\r\n\t\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^WebGL\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 1.0 );\r\n\r\n\t\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\r\n\r\n\t\t\tversion = parseFloat( /^OpenGL\\ ES\\ ([0-9])/.exec( glVersion )[ 1 ] );\r\n\t\t\tlineWidthAvailable = ( version >= 2.0 );\r\n\r\n\t\t}\r\n\r\n\t\tvar currentTextureSlot = null;\r\n\t\tvar currentBoundTextures = {};\r\n\r\n\t\tvar currentScissor = new Vector4();\r\n\t\tvar currentViewport = new Vector4();\r\n\r\n\t\tfunction createTexture( type, target, count ) {\r\n\r\n\t\t\tvar data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\r\n\t\t\tvar texture = gl.createTexture();\r\n\r\n\t\t\tgl.bindTexture( type, texture );\r\n\t\t\tgl.texParameteri( type, 10241, 9728 );\r\n\t\t\tgl.texParameteri( type, 10240, 9728 );\r\n\r\n\t\t\tfor ( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t\tvar emptyTextures = {};\r\n\t\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\r\n\t\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\r\n\r\n\t\t// init\r\n\r\n\t\tcolorBuffer.setClear( 0, 0, 0, 1 );\r\n\t\tdepthBuffer.setClear( 1 );\r\n\t\tstencilBuffer.setClear( 0 );\r\n\r\n\t\tenable( 2929 );\r\n\t\tdepthBuffer.setFunc( LessEqualDepth );\r\n\r\n\t\tsetFlipSided( false );\r\n\t\tsetCullFace( CullFaceBack );\r\n\t\tenable( 2884 );\r\n\r\n\t\tsetBlending( NoBlending );\r\n\r\n\t\t//\r\n\r\n\t\tfunction initAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttribute( attribute ) {\r\n\r\n\t\t\tenableAttributeAndDivisor( attribute, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\r\n\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\t\tvar extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t\textension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\r\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disableUnusedAttributes() {\r\n\r\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction enable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== true ) {\r\n\r\n\t\t\t\tgl.enable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction disable( id ) {\r\n\r\n\t\t\tif ( enabledCapabilities[ id ] !== false ) {\r\n\r\n\t\t\t\tgl.disable( id );\r\n\t\t\t\tenabledCapabilities[ id ] = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction useProgram( program ) {\r\n\r\n\t\t\tif ( currentProgram !== program ) {\r\n\r\n\t\t\t\tgl.useProgram( program );\r\n\r\n\t\t\t\tcurrentProgram = program;\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tvar equationToGL = {};\r\n\t\tequationToGL[ AddEquation ] = 32774;\r\n\t\tequationToGL[ SubtractEquation ] = 32778;\r\n\t\tequationToGL[ ReverseSubtractEquation ] = 32779;\r\n\r\n\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\tequationToGL[ MinEquation ] = 32775;\r\n\t\t\tequationToGL[ MaxEquation ] = 32776;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\r\n\t\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar factorToGL = {};\r\n\t\tfactorToGL[ ZeroFactor ] = 0;\r\n\t\tfactorToGL[ OneFactor ] = 1;\r\n\t\tfactorToGL[ SrcColorFactor ] = 768;\r\n\t\tfactorToGL[ SrcAlphaFactor ] = 770;\r\n\t\tfactorToGL[ SrcAlphaSaturateFactor ] = 776;\r\n\t\tfactorToGL[ DstColorFactor ] = 774;\r\n\t\tfactorToGL[ DstAlphaFactor ] = 772;\r\n\t\tfactorToGL[ OneMinusSrcColorFactor ] = 769;\r\n\t\tfactorToGL[ OneMinusSrcAlphaFactor ] = 771;\r\n\t\tfactorToGL[ OneMinusDstColorFactor ] = 775;\r\n\t\tfactorToGL[ OneMinusDstAlphaFactor ] = 773;\r\n\r\n\t\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\t\tif ( blending === NoBlending ) {\r\n\r\n\t\t\t\tif ( currentBlendingEnabled ) {\r\n\r\n\t\t\t\t\tdisable( 3042 );\r\n\t\t\t\t\tcurrentBlendingEnabled = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! currentBlendingEnabled ) {\r\n\r\n\t\t\t\tenable( 3042 );\r\n\t\t\t\tcurrentBlendingEnabled = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blending !== CustomBlending ) {\r\n\r\n\t\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\r\n\r\n\t\t\t\t\t\tgl.blendEquation( 32774 );\r\n\r\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\r\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tswitch ( blending ) {\r\n\r\n\t\t\t\t\t\t\tcase NormalBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase AdditiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase SubtractiveBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase MultiplyBlending:\r\n\t\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// custom blending\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMaterial( material, frontFaceCW ) {\r\n\r\n\t\t\tmaterial.side === DoubleSide\r\n\t\t\t\t? disable( 2884 )\r\n\t\t\t\t: enable( 2884 );\r\n\r\n\t\t\tvar flipSided = ( material.side === BackSide );\r\n\t\t\tif ( frontFaceCW ) { flipSided = ! flipSided; }\r\n\r\n\t\t\tsetFlipSided( flipSided );\r\n\r\n\t\t\t( material.blending === NormalBlending && material.transparent === false )\r\n\t\t\t\t? setBlending( NoBlending )\r\n\t\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t\tdepthBuffer.setFunc( material.depthFunc );\r\n\t\t\tdepthBuffer.setTest( material.depthTest );\r\n\t\t\tdepthBuffer.setMask( material.depthWrite );\r\n\t\t\tcolorBuffer.setMask( material.colorWrite );\r\n\r\n\t\t\tvar stencilWrite = material.stencilWrite;\r\n\t\t\tstencilBuffer.setTest( stencilWrite );\r\n\t\t\tif ( stencilWrite ) {\r\n\r\n\t\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\r\n\t\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\r\n\t\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setFlipSided( flipSided ) {\r\n\r\n\t\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\t\tgl.frontFace( 2304 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.frontFace( 2305 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setCullFace( cullFace ) {\r\n\r\n\t\t\tif ( cullFace !== CullFaceNone ) {\r\n\r\n\t\t\t\tenable( 2884 );\r\n\r\n\t\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\t\tif ( cullFace === CullFaceBack ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1029 );\r\n\r\n\t\t\t\t\t} else if ( cullFace === CullFaceFront ) {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1028 );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tgl.cullFace( 1032 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 2884 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentCullFace = cullFace;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setLineWidth( width ) {\r\n\r\n\t\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\t\tif ( lineWidthAvailable ) { gl.lineWidth( width ); }\r\n\r\n\t\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setPolygonOffset( polygonOffset, factor, units ) {\r\n\r\n\t\t\tif ( polygonOffset ) {\r\n\r\n\t\t\t\tenable( 32823 );\r\n\r\n\t\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 32823 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setScissorTest( scissorTest ) {\r\n\r\n\t\t\tif ( scissorTest ) {\r\n\r\n\t\t\t\tenable( 3089 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdisable( 3089 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// texture\r\n\r\n\t\tfunction activeTexture( webglSlot ) {\r\n\r\n\t\t\tif ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }\r\n\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction bindTexture( webglType, webglTexture ) {\r\n\r\n\t\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t\tactiveTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\t\tboundTexture.type = webglType;\r\n\t\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction unbindTexture() {\r\n\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\r\n\r\n\t\t\t\tgl.bindTexture( boundTexture.type, null );\r\n\r\n\t\t\t\tboundTexture.type = undefined;\r\n\t\t\t\tboundTexture.texture = undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction compressedTexImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage2D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction texImage3D() {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tgl.texImage3D.apply( gl, arguments );\r\n\r\n\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLState:', error );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction scissor( scissor ) {\r\n\r\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction viewport( viewport ) {\r\n\r\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction reset() {\r\n\r\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tenabledCapabilities = {};\r\n\r\n\t\t\tcurrentTextureSlot = null;\r\n\t\t\tcurrentBoundTextures = {};\r\n\r\n\t\t\tcurrentProgram = null;\r\n\r\n\t\t\tcurrentBlending = null;\r\n\r\n\t\t\tcurrentFlipSided = null;\r\n\t\t\tcurrentCullFace = null;\r\n\r\n\t\t\tcolorBuffer.reset();\r\n\t\t\tdepthBuffer.reset();\r\n\t\t\tstencilBuffer.reset();\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tbuffers: {\r\n\t\t\t\tcolor: colorBuffer,\r\n\t\t\t\tdepth: depthBuffer,\r\n\t\t\t\tstencil: stencilBuffer\r\n\t\t\t},\r\n\r\n\t\t\tinitAttributes: initAttributes,\r\n\t\t\tenableAttribute: enableAttribute,\r\n\t\t\tenableAttributeAndDivisor: enableAttributeAndDivisor,\r\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes,\r\n\t\t\tenable: enable,\r\n\t\t\tdisable: disable,\r\n\r\n\t\t\tuseProgram: useProgram,\r\n\r\n\t\t\tsetBlending: setBlending,\r\n\t\t\tsetMaterial: setMaterial,\r\n\r\n\t\t\tsetFlipSided: setFlipSided,\r\n\t\t\tsetCullFace: setCullFace,\r\n\r\n\t\t\tsetLineWidth: setLineWidth,\r\n\t\t\tsetPolygonOffset: setPolygonOffset,\r\n\r\n\t\t\tsetScissorTest: setScissorTest,\r\n\r\n\t\t\tactiveTexture: activeTexture,\r\n\t\t\tbindTexture: bindTexture,\r\n\t\t\tunbindTexture: unbindTexture,\r\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\r\n\t\t\ttexImage2D: texImage2D,\r\n\t\t\ttexImage3D: texImage3D,\r\n\r\n\t\t\tscissor: scissor,\r\n\t\t\tviewport: viewport,\r\n\r\n\t\t\treset: reset\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\t\tvar maxTextures = capabilities.maxTextures;\r\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\r\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\r\n\t\tvar maxSamples = capabilities.maxSamples;\r\n\r\n\t\tvar _videoTextures = new WeakMap();\r\n\t\tvar _canvas;\r\n\r\n\t\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\r\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\r\n\r\n\t\tvar useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\r\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( \"2d\" ) ) !== null;\r\n\r\n\t\tfunction createCanvas( width, height ) {\r\n\r\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\r\n\r\n\t\t\treturn useOffscreenCanvas ?\r\n\t\t\t\tnew OffscreenCanvas( width, height ) :\r\n\t\t\t\tdocument.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );\r\n\r\n\t\t}\r\n\r\n\t\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\r\n\r\n\t\t\tvar scale = 1;\r\n\r\n\t\t\t// handle case if texture exceeds max size\r\n\r\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t\tscale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only perform resize if necessary\r\n\r\n\t\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\r\n\r\n\t\t\t\t// only perform resize for certain image types\r\n\r\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\t\t\tvar floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;\r\n\r\n\t\t\t\t\tvar width = floor( scale * image.width );\r\n\t\t\t\t\tvar height = floor( scale * image.height );\r\n\r\n\t\t\t\t\tif ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }\r\n\r\n\t\t\t\t\t// cube textures can't reuse the same canvas\r\n\r\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\r\n\r\n\t\t\t\t\tcanvas.width = width;\r\n\t\t\t\t\tcanvas.height = height;\r\n\r\n\t\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\r\n\r\n\t\t\t\t\treturn canvas;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( 'data' in image ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn image;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\t\treturn _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\t\tif ( isWebGL2 ) { return false; }\r\n\r\n\t\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\r\n\t\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\r\n\r\n\t\t}\r\n\r\n\t\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\r\n\r\n\t\t\treturn texture.generateMipmaps && supportsMips &&\r\n\t\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateMipmap( target, texture, width, height ) {\r\n\r\n\t\t\t_gl.generateMipmap( target );\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\t// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11\r\n\t\t\ttextureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getInternalFormat( glFormat, glType ) {\r\n\r\n\t\t\tif ( isWebGL2 === false ) { return glFormat; }\r\n\r\n\t\t\tvar internalFormat = glFormat;\r\n\r\n\t\t\tif ( glFormat === 6403 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 33326; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 33325; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 33321; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === 6407 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34837; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34843; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32849; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( glFormat === 6408 ) {\r\n\r\n\t\t\t\tif ( glType === 5126 ) { internalFormat = 34836; }\r\n\t\t\t\tif ( glType === 5131 ) { internalFormat = 34842; }\r\n\t\t\t\tif ( glType === 5121 ) { internalFormat = 32856; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\r\n\t\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\r\n\r\n\t\t\t\textensions.get( 'EXT_color_buffer_float' );\r\n\r\n\t\t\t} else if ( internalFormat === 34843 || internalFormat === 34837 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn internalFormat;\r\n\r\n\t\t}\r\n\r\n\t\t// Fallback filters for non-power-of-2 textures\r\n\r\n\t\tfunction filterFallback( f ) {\r\n\r\n\t\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\r\n\r\n\t\t\t\treturn 9728;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn 9729;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction onTextureDispose( event ) {\r\n\r\n\t\t\tvar texture = event.target;\r\n\r\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\tdeallocateTexture( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) {\r\n\r\n\t\t\t\t_videoTextures.delete( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\t\tvar renderTarget = event.target;\r\n\r\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t\tinfo.memory.textures --;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction deallocateTexture( texture ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) { return; }\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\tproperties.remove( texture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\tif ( ! renderTarget ) { return; }\r\n\r\n\t\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultiviewRenderTarget ) {\r\n\r\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglColorTexture );\r\n\t\t\t\t_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );\r\n\r\n\t\t\t\tinfo.memory.textures -= 2;\r\n\r\n\t\t\t\tfor ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tproperties.remove( renderTarget.texture );\r\n\t\t\tproperties.remove( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar textureUnits = 0;\r\n\r\n\t\tfunction resetTextureUnits() {\r\n\r\n\t\t\ttextureUnits = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction allocateTextureUnit() {\r\n\r\n\t\t\tvar textureUnit = textureUnits;\r\n\r\n\t\t\tif ( textureUnit >= maxTextures ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureUnits += 1;\r\n\r\n\t\t\treturn textureUnit;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.isVideoTexture ) { updateVideoTexture( texture ); }\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tvar image = texture.image;\r\n\r\n\t\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\r\n\r\n\t\t\t\t} else if ( image.complete === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTexture2DArray( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTexture3D( texture, slot ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCube( texture, slot ) {\r\n\r\n\t\t\tif ( texture.image.length !== 6 ) { return; }\r\n\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tinitTexture( textureProperties, texture );\r\n\r\n\t\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\r\n\t\t\t\t_gl.pixelStorei( 37440, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = ( texture && texture.isCompressedTexture );\r\n\t\t\t\tvar isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\t\tsupportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\tsetTextureParameters( 34067, texture, supportsMips );\r\n\r\n\t\t\t\tvar mipmaps;\r\n\r\n\t\t\t\tif ( isCompressed ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmipmaps = texture.mipmaps;\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\t\t\t\t\t\t\t\tvar mipmapImage = mipmap.image[ i ].image;\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0; j < mipmaps.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar mipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\t// We assume images for cube map have the same size.\r\n\t\t\t\t\tgenerateMipmap( 34067, texture, image.width, image.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setTextureCubeDynamic( texture, slot ) {\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( 34067, properties.get( texture ).__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tvar wrappingToGL = {};\r\n\t\twrappingToGL[ RepeatWrapping ] = 10497;\r\n\t\twrappingToGL[ ClampToEdgeWrapping ] = 33071;\r\n\t\twrappingToGL[ MirroredRepeatWrapping ] = 33648;\r\n\r\n\t\tvar filterToGL = {};\r\n\t\tfilterToGL[ NearestFilter ] = 9728;\r\n\t\tfilterToGL[ NearestMipmapNearestFilter ] = 9984;\r\n\t\tfilterToGL[ NearestMipmapLinearFilter ] = 9986;\r\n\t\tfilterToGL[ LinearFilter ] = 9729;\r\n\t\tfilterToGL[ LinearMipmapNearestFilter ] = 9985;\r\n\t\tfilterToGL[ LinearMipmapLinearFilter ] = 9987;\r\n\r\n\t\tfunction setTextureParameters( textureType, texture, supportsMips ) {\r\n\r\n\t\t\tif ( supportsMips ) {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\r\n\t\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\r\n\r\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\r\n\r\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\r\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\r\n\t\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\r\n\r\n\t\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\r\n\r\n\t\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension ) {\r\n\r\n\t\t\t\tif ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }\r\n\t\t\t\tif ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }\r\n\r\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\r\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction initTexture( textureProperties, texture ) {\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\t\tvar textureType = 3553;\r\n\r\n\t\t\tif ( texture.isDataTexture2DArray ) { textureType = 35866; }\r\n\t\t\tif ( texture.isDataTexture3D ) { textureType = 32879; }\r\n\r\n\t\t\tinitTexture( textureProperties, texture );\r\n\r\n\t\t\tstate.activeTexture( 33984 + slot );\r\n\t\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\r\n\r\n\t\t\t_gl.pixelStorei( 37440, texture.flipY );\r\n\t\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\r\n\r\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;\r\n\t\t\tvar image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\r\n\r\n\t\t\tvar supportsMips = isPowerOfTwo( image ) || isWebGL2,\r\n\t\t\t\tglFormat = utils.convert( texture.format ),\r\n\t\t\t\tglType = utils.convert( texture.type ),\r\n\t\t\t\tglInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\r\n\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\t\tif ( texture.isDepthTexture ) {\r\n\r\n\t\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\t\tglInternalFormat = 6402;\r\n\r\n\t\t\t\tif ( texture.type === FloatType ) {\r\n\r\n\t\t\t\t\tif ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }\r\n\t\t\t\t\tglInternalFormat = 36012;\r\n\r\n\t\t\t\t} else if ( isWebGL2 ) {\r\n\r\n\t\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\r\n\t\t\t\t\tglInternalFormat = 33189;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\r\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\tif ( texture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t\tglInternalFormat = 34041;\r\n\r\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\r\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\r\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\r\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\r\n\r\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\r\n\t\t\t\t\t\tglType = utils.convert( texture.type );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t\t} else if ( texture.isDataTexture ) {\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( texture.isCompressedTexture ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\r\n\r\n\t\t\t\t\t\tif ( glFormat !== null ) {\r\n\r\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t} else if ( texture.isDataTexture2DArray ) {\r\n\r\n\t\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t} else if ( texture.isDataTexture3D ) {\r\n\r\n\t\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\r\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\r\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tgenerateMipmap( 3553, texture, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\tif ( texture.onUpdate ) { texture.onUpdate( texture ); }\r\n\r\n\t\t}\r\n\r\n\t\t// Render targets\r\n\r\n\t\t// Setup storage for target texture and bind it to correct framebuffer\r\n\t\tfunction setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\t\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\r\n\r\n\t\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\r\n\r\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\r\n\r\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\r\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindRenderbuffer( 36161, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\t\tfunction setupDepthTexture( framebuffer, renderTarget ) {\r\n\r\n\t\t\tvar isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );\r\n\t\t\tif ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }\r\n\r\n\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\r\n\t\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// upload an empty depth texture with framebuffer size\r\n\t\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\r\n\t\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\r\n\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'Unknown depthTexture format' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Setup GL resources for a non-texture depth buffer\r\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\r\n\t\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\t\tif ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }\r\n\r\n\t\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Set up GL resources for the render target\r\n\t\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\tinfo.memory.textures ++;\r\n\r\n\t\t\tvar isCube = ( renderTarget.isWebGLRenderTargetCube === true );\r\n\t\t\tvar isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );\r\n\t\t\tvar isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );\r\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t\t// Setup framebuffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t\t\tif ( isMultisample ) {\r\n\r\n\t\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\r\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\r\n\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t\t\tvar glFormat = utils.convert( renderTarget.texture.format );\r\n\t\t\t\t\t\tvar glType = utils.convert( renderTarget.texture.type );\r\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat( glFormat, glType );\r\n\t\t\t\t\t\tvar samples = getRenderTargetSamples( renderTarget );\r\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\r\n\t\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\r\n\r\n\t\t\t\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\r\n\t\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( isMultiview ) {\r\n\r\n\t\t\t\t\tvar width = renderTarget.width;\r\n\t\t\t\t\tvar height = renderTarget.height;\r\n\t\t\t\t\tvar numViews = renderTarget.numViews;\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\t\tvar ext = extensions.get( 'OVR_multiview2' );\r\n\r\n\t\t\t\t\tinfo.memory.textures += 2;\r\n\r\n\t\t\t\t\tvar colorTexture = _gl.createTexture();\r\n\t\t\t\t\t_gl.bindTexture( 35866, colorTexture );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\r\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );\r\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );\r\n\r\n\t\t\t\t\tvar depthStencilTexture = _gl.createTexture();\r\n\t\t\t\t\t_gl.bindTexture( 35866, depthStencilTexture );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10240, 9728 );\r\n\t\t\t\t\t_gl.texParameteri( 35866, 10241, 9728 );\r\n\t\t\t\t\t_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );\r\n\t\t\t\t\text.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );\r\n\r\n\t\t\t\t\tvar viewFramebuffers = new Array( numViews );\r\n\t\t\t\t\tfor ( var i = 0; i < numViews; ++ i ) {\r\n\r\n\t\t\t\t\t\tviewFramebuffers[ i ] = _gl.createFramebuffer();\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );\r\n\t\t\t\t\t\t_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trenderTargetProperties.__webglColorTexture = colorTexture;\r\n\t\t\t\t\trenderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;\r\n\t\t\t\t\trenderTargetProperties.__webglViewFramebuffers = viewFramebuffers;\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, null );\r\n\t\t\t\t\t_gl.bindTexture( 35866, null );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup color buffer\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( 34067, renderTarget.texture, supportsMips );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( 34067, null );\r\n\r\n\t\t\t} else if ( ! isMultiview ) {\r\n\r\n\t\t\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( 3553, renderTarget.texture, supportsMips );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );\r\n\r\n\t\t\t\tif ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {\r\n\r\n\t\t\t\t\tgenerateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.bindTexture( 3553, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Setup depth and stencil buffers\r\n\r\n\t\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\t\t\tvar supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;\r\n\r\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\r\n\r\n\t\t\t\tvar target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;\r\n\t\t\t\tvar webglTexture = properties.get( texture ).__webglTexture;\r\n\r\n\t\t\t\tstate.bindTexture( target, webglTexture );\r\n\t\t\t\tgenerateMipmap( target, texture, renderTarget.width, renderTarget.height );\r\n\t\t\t\tstate.bindTexture( target, null );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateMultisampleRenderTarget( renderTarget ) {\r\n\r\n\t\t\tif ( renderTarget.isWebGLMultisampleRenderTarget ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) {\r\n\r\n\t\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\r\n\t\t\t\t\t_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\r\n\r\n\t\t\t\t\tvar width = renderTarget.width;\r\n\t\t\t\t\tvar height = renderTarget.height;\r\n\t\t\t\t\tvar mask = 16384;\r\n\r\n\t\t\t\t\tif ( renderTarget.depthBuffer ) { mask |= 256; }\r\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) { mask |= 1024; }\r\n\r\n\t\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getRenderTargetSamples( renderTarget ) {\r\n\r\n\t\t\treturn ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?\r\n\t\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateVideoTexture( texture ) {\r\n\r\n\t\t\tvar frame = info.render.frame;\r\n\r\n\t\t\t// Check the last frame we updated the VideoTexture\r\n\r\n\t\t\tif ( _videoTextures.get( texture ) !== frame ) {\r\n\r\n\t\t\t\t_videoTextures.set( texture, frame );\r\n\t\t\t\ttexture.update();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t\tvar warnedTexture2D = false;\r\n\t\tvar warnedTextureCube = false;\r\n\r\n\t\tfunction safeSetTexture2D( texture, slot ) {\r\n\r\n\t\t\tif ( texture && texture.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\tif ( warnedTexture2D === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarnedTexture2D = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( texture, slot );\r\n\r\n\t\t}\r\n\r\n\t\tfunction safeSetTextureCube( texture, slot ) {\r\n\r\n\t\t\tif ( texture && texture.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tif ( warnedTextureCube === false ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarnedTextureCube = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\r\n\t\t\t// TODO: unify these code paths\r\n\t\t\tif ( ( texture && texture.isCubeTexture ) ||\r\n\t\t\t\t( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t// this function alone should take care of cube textures\r\n\t\t\t\tsetTextureCube( texture, slot );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\r\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\r\n\t\tthis.resetTextureUnits = resetTextureUnits;\r\n\r\n\t\tthis.setTexture2D = setTexture2D;\r\n\t\tthis.setTexture2DArray = setTexture2DArray;\r\n\t\tthis.setTexture3D = setTexture3D;\r\n\t\tthis.setTextureCube = setTextureCube;\r\n\t\tthis.setTextureCubeDynamic = setTextureCubeDynamic;\r\n\t\tthis.setupRenderTarget = setupRenderTarget;\r\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\r\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\r\n\r\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\r\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author thespite / http://www.twitter.com/thespite\r\n\t */\r\n\r\n\tfunction WebGLUtils( gl, extensions, capabilities ) {\r\n\r\n\t\tvar isWebGL2 = capabilities.isWebGL2;\r\n\r\n\t\tfunction convert( p ) {\r\n\r\n\t\t\tvar extension;\r\n\r\n\t\t\tif ( p === UnsignedByteType ) { return 5121; }\r\n\t\t\tif ( p === UnsignedShort4444Type ) { return 32819; }\r\n\t\t\tif ( p === UnsignedShort5551Type ) { return 32820; }\r\n\t\t\tif ( p === UnsignedShort565Type ) { return 33635; }\r\n\r\n\t\t\tif ( p === ByteType ) { return 5120; }\r\n\t\t\tif ( p === ShortType ) { return 5122; }\r\n\t\t\tif ( p === UnsignedShortType ) { return 5123; }\r\n\t\t\tif ( p === IntType ) { return 5124; }\r\n\t\t\tif ( p === UnsignedIntType ) { return 5125; }\r\n\t\t\tif ( p === FloatType ) { return 5126; }\r\n\r\n\t\t\tif ( p === HalfFloatType ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) { return 5131; }\r\n\r\n\t\t\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === AlphaFormat ) { return 6406; }\r\n\t\t\tif ( p === RGBFormat ) { return 6407; }\r\n\t\t\tif ( p === RGBAFormat ) { return 6408; }\r\n\t\t\tif ( p === LuminanceFormat ) { return 6409; }\r\n\t\t\tif ( p === LuminanceAlphaFormat ) { return 6410; }\r\n\t\t\tif ( p === DepthFormat ) { return 6402; }\r\n\t\t\tif ( p === DepthStencilFormat ) { return 34041; }\r\n\t\t\tif ( p === RedFormat ) { return 6403; }\r\n\r\n\t\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\r\n\t\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }\r\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\r\n\t\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }\r\n\t\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGB_ETC1_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\r\n\t\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\r\n\t\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\t// TODO Complete?\r\n\r\n\t\t\t\t\treturn p;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p === UnsignedInt248Type ) {\r\n\r\n\t\t\t\tif ( isWebGL2 ) { return 34042; }\r\n\r\n\t\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\r\n\r\n\t\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { convert: convert };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author fernandojsg / http://fernandojsg.com\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction WebGLMultiviewRenderTarget( width, height, numViews, options ) {\r\n\r\n\t\tWebGLRenderTarget.call( this, width, height, options );\r\n\r\n\t\tthis.depthBuffer = false;\r\n\t\tthis.stencilBuffer = false;\r\n\r\n\t\tthis.numViews = numViews;\r\n\r\n\t}\r\n\r\n\tWebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {\r\n\r\n\t\tconstructor: WebGLMultiviewRenderTarget,\r\n\r\n\t\tisWebGLMultiviewRenderTarget: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tWebGLRenderTarget.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.numViews = source.numViews;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetNumViews: function ( numViews ) {\r\n\r\n\t\t\tif ( this.numViews !== numViews ) {\r\n\r\n\t\t\t\tthis.numViews = numViews;\r\n\t\t\t\tthis.dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author fernandojsg / http://fernandojsg.com\r\n\t * @author Takahiro https://github.com/takahirox\r\n\t */\r\n\r\n\tfunction WebGLMultiview( renderer, gl ) {\r\n\r\n\t\tvar DEFAULT_NUMVIEWS = 2;\r\n\r\n\t\tvar extensions = renderer.extensions;\r\n\t\tvar properties = renderer.properties;\r\n\r\n\t\tvar renderTarget, currentRenderTarget;\r\n\t\tvar mat3, mat4, cameraArray, renderSize;\r\n\r\n\t\tvar available;\r\n\t\tvar maxNumViews = 0;\r\n\r\n\t\t//\r\n\r\n\t\tfunction isAvailable() {\r\n\r\n\t\t\tif ( available === undefined ) {\r\n\r\n\t\t\t\tvar extension = extensions.get( 'OVR_multiview2' );\r\n\r\n\t\t\t\tavailable = extension !== null && gl.getContextAttributes().antialias === false;\r\n\r\n\t\t\t\tif ( available ) {\r\n\r\n\t\t\t\t\tmaxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );\r\n\t\t\t\t\trenderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );\r\n\r\n\t\t\t\t\trenderSize = new Vector2();\r\n\t\t\t\t\tmat4 = [];\r\n\t\t\t\t\tmat3 = [];\r\n\t\t\t\t\tcameraArray = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < maxNumViews; i ++ ) {\r\n\r\n\t\t\t\t\t\tmat4[ i ] = new Matrix4();\r\n\t\t\t\t\t\tmat3[ i ] = new Matrix3();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn available;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getCameraArray( camera ) {\r\n\r\n\t\t\tif ( camera.isArrayCamera ) { return camera.cameras; }\r\n\r\n\t\t\tcameraArray[ 0 ] = camera;\r\n\r\n\t\t\treturn cameraArray;\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCameraProjectionMatricesUniform( camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].copy( cameras[ i ].projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'projectionMatrices', mat4 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateCameraViewMatricesUniform( camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].copy( cameras[ i ].matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'viewMatrices', mat4 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateObjectMatricesUniforms( object, camera, uniforms ) {\r\n\r\n\t\t\tvar cameras = getCameraArray( camera );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tmat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\tmat3[ i ].getNormalMatrix( mat4[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.setValue( gl, 'modelViewMatrices', mat4 );\r\n\t\t\tuniforms.setValue( gl, 'normalMatrices', mat3 );\r\n\r\n\t\t}\r\n\r\n\t\tfunction isMultiviewCompatible( camera ) {\r\n\r\n\t\t\tif ( camera.isArrayCamera === undefined ) { return true; }\r\n\r\n\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\tif ( cameras.length > maxNumViews ) { return false; }\r\n\r\n\t\t\tfor ( var i = 1, il = cameras.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||\r\n\t\t\t\t\tcameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction resizeRenderTarget( camera ) {\r\n\r\n\t\t\tif ( currentRenderTarget ) {\r\n\r\n\t\t\t\trenderSize.set( currentRenderTarget.width, currentRenderTarget.height );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getDrawingBufferSize( renderSize );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tvar viewport = camera.cameras[ 0 ].viewport;\r\n\r\n\t\t\t\trenderTarget.setSize( viewport.z, viewport.w );\r\n\t\t\t\trenderTarget.setNumViews( camera.cameras.length );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderTarget.setSize( renderSize.x, renderSize.y );\r\n\t\t\t\trenderTarget.setNumViews( DEFAULT_NUMVIEWS );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction attachCamera( camera ) {\r\n\r\n\t\t\tif ( isMultiviewCompatible( camera ) === false ) { return; }\r\n\r\n\t\t\tcurrentRenderTarget = renderer.getRenderTarget();\r\n\t\t\tresizeRenderTarget( camera );\r\n\t\t\trenderer.setRenderTarget( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\tfunction detachCamera( camera ) {\r\n\r\n\t\t\tif ( renderTarget !== renderer.getRenderTarget() ) { return; }\r\n\r\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t\t\tflush( camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction flush( camera ) {\r\n\r\n\t\t\tvar srcRenderTarget = renderTarget;\r\n\t\t\tvar numViews = srcRenderTarget.numViews;\r\n\r\n\t\t\tvar srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;\r\n\r\n\t\t\tvar viewWidth = srcRenderTarget.width;\r\n\t\t\tvar viewHeight = srcRenderTarget.height;\r\n\r\n\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < numViews; i ++ ) {\r\n\r\n\t\t\t\t\tvar viewport = camera.cameras[ i ].viewport;\r\n\r\n\t\t\t\t\tvar x1 = viewport.x;\r\n\t\t\t\t\tvar y1 = viewport.y;\r\n\t\t\t\t\tvar x2 = x1 + viewport.z;\r\n\t\t\t\t\tvar y2 = y1 + viewport.w;\r\n\r\n\t\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ i ] );\r\n\t\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );\r\n\t\t\t\tgl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.isAvailable = isAvailable;\r\n\t\tthis.attachCamera = attachCamera;\r\n\t\tthis.detachCamera = detachCamera;\r\n\t\tthis.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;\r\n\t\tthis.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;\r\n\t\tthis.updateObjectMatricesUniforms = updateObjectMatricesUniforms;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Group() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Group';\r\n\r\n\t}\r\n\r\n\tGroup.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Group,\r\n\r\n\t\tisGroup: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ArrayCamera( array ) {\r\n\r\n\t\tPerspectiveCamera.call( this );\r\n\r\n\t\tthis.cameras = array || [];\r\n\r\n\t}\r\n\r\n\tArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {\r\n\r\n\t\tconstructor: ArrayCamera,\r\n\r\n\t\tisArrayCamera: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author jsantell / https://www.jsantell.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar cameraLPos = new Vector3();\r\n\tvar cameraRPos = new Vector3();\r\n\r\n\t/**\r\n\t * Assumes 2 cameras that are parallel and share an X-axis, and that\r\n\t * the cameras' projection and world matrices have already been set.\r\n\t * And that near and far planes are identical for both cameras.\r\n\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\r\n\t */\r\n\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\r\n\r\n\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\r\n\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\r\n\r\n\t\tvar ipd = cameraLPos.distanceTo( cameraRPos );\r\n\r\n\t\tvar projL = cameraL.projectionMatrix.elements;\r\n\t\tvar projR = cameraR.projectionMatrix.elements;\r\n\r\n\t\t// VR systems will have identical far and near planes, and\r\n\t\t// most likely identical top and bottom frustum extents.\r\n\t\t// Use the left camera for these values.\r\n\t\tvar near = projL[ 14 ] / ( projL[ 10 ] - 1 );\r\n\t\tvar far = projL[ 14 ] / ( projL[ 10 ] + 1 );\r\n\t\tvar topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\r\n\t\tvar bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\r\n\r\n\t\tvar leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\r\n\t\tvar rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\r\n\t\tvar left = near * leftFov;\r\n\t\tvar right = near * rightFov;\r\n\r\n\t\t// Calculate the new camera's position offset from the\r\n\t\t// left camera. xOffset should be roughly half `ipd`.\r\n\t\tvar zOffset = ipd / ( - leftFov + rightFov );\r\n\t\tvar xOffset = zOffset * - leftFov;\r\n\r\n\t\t// TODO: Better way to apply this offset?\r\n\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\r\n\t\tcamera.translateX( xOffset );\r\n\t\tcamera.translateZ( zOffset );\r\n\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t// Find the union of the frustum values of the cameras and scale\r\n\t\t// the values so that the near plane's position does not change in world space,\r\n\t\t// although must now be relative to the new union camera.\r\n\t\tvar near2 = near + zOffset;\r\n\t\tvar far2 = far + zOffset;\r\n\t\tvar left2 = left - xOffset;\r\n\t\tvar right2 = right + ( ipd - xOffset );\r\n\t\tvar top2 = topFov * far / far2 * near2;\r\n\t\tvar bottom2 = bottomFov * far / far2 * near2;\r\n\r\n\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebVRManager( renderer ) {\r\n\r\n\t\tvar renderWidth, renderHeight;\r\n\t\tvar scope = this;\r\n\r\n\t\tvar device = null;\r\n\t\tvar frameData = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar standingMatrix = new Matrix4();\r\n\t\tvar standingMatrixInverse = new Matrix4();\r\n\r\n\t\tvar framebufferScaleFactor = 1.0;\r\n\r\n\t\tvar referenceSpaceType = 'local-floor';\r\n\r\n\t\tif ( typeof window !== 'undefined' && 'VRFrameData' in window ) {\r\n\r\n\t\t\tframeData = new window.VRFrameData();\r\n\t\t\twindow.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );\r\n\r\n\t\t}\r\n\r\n\t\tvar matrixWorldInverse = new Matrix4();\r\n\t\tvar tempQuaternion = new Quaternion();\r\n\t\tvar tempPosition = new Vector3();\r\n\r\n\t\tvar tempCamera = new PerspectiveCamera();\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.viewport = new Vector4();\r\n\t\tcameraL.layers.enable( 1 );\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.viewport = new Vector4();\r\n\t\tcameraR.layers.enable( 2 );\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn device !== null && device.isPresenting === true;\r\n\r\n\t\t}\r\n\r\n\t\tvar currentSize = new Vector2(), currentPixelRatio;\r\n\r\n\t\tfunction onVRDisplayPresentChange() {\r\n\r\n\t\t\tif ( isPresenting() ) {\r\n\r\n\t\t\t\tvar eyeParameters = device.getEyeParameters( 'left' );\r\n\t\t\t\trenderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;\r\n\t\t\t\trenderHeight = eyeParameters.renderHeight * framebufferScaleFactor;\r\n\r\n\t\t\t\tcurrentPixelRatio = renderer.getPixelRatio();\r\n\t\t\t\trenderer.getSize( currentSize );\r\n\r\n\t\t\t\trenderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );\r\n\r\n\t\t\t\tcameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );\r\n\t\t\t\tcameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );\r\n\r\n\t\t\t\tanimation.start();\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( scope.enabled ) {\r\n\r\n\t\t\t\t\trenderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimation.stop();\r\n\r\n\t\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar triggers = [];\r\n\t\tvar grips = [];\r\n\r\n\t\tfunction findGamepad( id ) {\r\n\r\n\t\t\tvar gamepads = navigator.getGamepads && navigator.getGamepads();\r\n\r\n\t\t\tfor ( var i = 0, l = gamepads.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar gamepad = gamepads[ i ];\r\n\r\n\t\t\t\tif ( gamepad && ( gamepad.id === 'Daydream Controller' ||\r\n\t\t\t\t\tgamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||\r\n\t\t\t\t\tgamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'HTC Vive Focus' ) ||\r\n\t\t\t\t\tgamepad.id.startsWith( 'Spatial Controller' ) ) ) {\r\n\r\n\t\t\t\t\tvar hand = gamepad.hand;\r\n\r\n\t\t\t\t\tif ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }\r\n\t\t\t\t\tif ( id === 1 && ( hand === 'left' ) ) { return gamepad; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateControllers() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar gamepad = findGamepad( i );\r\n\r\n\t\t\t\tif ( gamepad !== undefined && gamepad.pose !== undefined ) {\r\n\r\n\t\t\t\t\tif ( gamepad.pose === null ) { return; }\r\n\r\n\t\t\t\t\t// Pose\r\n\r\n\t\t\t\t\tvar pose = gamepad.pose;\r\n\r\n\t\t\t\t\tif ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }\r\n\r\n\t\t\t\t\tif ( pose.position !== null ) { controller.position.fromArray( pose.position ); }\r\n\t\t\t\t\tif ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }\r\n\t\t\t\t\tcontroller.matrix.compose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrix.premultiply( standingMatrix );\r\n\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.quaternion, controller.scale );\r\n\t\t\t\t\tcontroller.matrixWorldNeedsUpdate = true;\r\n\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t// Trigger\r\n\r\n\t\t\t\t\tvar buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;\r\n\r\n\t\t\t\t\tif ( triggers[ i ] === undefined ) { triggers[ i ] = false; }\r\n\r\n\t\t\t\t\tif ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\ttriggers[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\tif ( triggers[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectstart' } );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'selectend' } );\r\n\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'select' } );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Grip\r\n\t\t\t\t\tbuttonId = 2;\r\n\r\n\t\t\t\t\tif ( grips[ i ] === undefined ) { grips[ i ] = false; }\r\n\r\n\t\t\t\t\t// Skip if the grip button doesn't exist on this controller\r\n\t\t\t\t\tif ( gamepad.buttons[ buttonId ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {\r\n\r\n\t\t\t\t\t\t\tgrips[ i ] = gamepad.buttons[ buttonId ].pressed;\r\n\r\n\t\t\t\t\t\t\tif ( grips[ i ] === true ) {\r\n\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezestart' } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeezeend' } );\r\n\t\t\t\t\t\t\t\tcontroller.dispatchEvent( { type: 'squeeze' } );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateViewportFromBounds( viewport, bounds ) {\r\n\r\n\t\t\tif ( bounds !== null && bounds.length === 4 ) {\r\n\r\n\t\t\t\tviewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\treturn device;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function ( value ) {\r\n\r\n\t\t\tif ( value !== undefined ) { device = value; }\r\n\r\n\t\t\tanimation.setContext( value );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\r\n\r\n\t\t\tframebufferScaleFactor = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tvar userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;\r\n\r\n\t\t\tdevice.depthNear = camera.near;\r\n\t\t\tdevice.depthFar = camera.far;\r\n\r\n\t\t\tdevice.getFrameData( frameData );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\r\n\r\n\t\t\t\tvar stageParameters = device.stageParameters;\r\n\r\n\t\t\t\tif ( stageParameters ) {\r\n\r\n\t\t\t\t\tstandingMatrix.fromArray( stageParameters.sittingToStandingTransform );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstandingMatrix.makeTranslation( 0, userHeight, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar pose = frameData.pose;\r\n\r\n\t\t\ttempCamera.matrix.copy( standingMatrix );\r\n\t\t\ttempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );\r\n\r\n\t\t\tif ( pose.orientation !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.fromArray( pose.orientation );\r\n\t\t\t\ttempCamera.quaternion.multiply( tempQuaternion );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pose.position !== null ) {\r\n\r\n\t\t\t\ttempQuaternion.setFromRotationMatrix( standingMatrix );\r\n\t\t\t\ttempPosition.fromArray( pose.position );\r\n\t\t\t\ttempPosition.applyQuaternion( tempQuaternion );\r\n\t\t\t\ttempCamera.position.add( tempPosition );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttempCamera.updateMatrixWorld();\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcamera.matrixWorld.copy( tempCamera.matrixWorld );\r\n\r\n\t\t\tvar children = camera.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcameraL.near = camera.near;\r\n\t\t\tcameraR.near = camera.near;\r\n\r\n\t\t\tcameraL.far = camera.far;\r\n\t\t\tcameraR.far = camera.far;\r\n\r\n\t\t\tcameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );\r\n\t\t\tcameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );\r\n\r\n\t\t\t// TODO (mrdoob) Double check this code\r\n\r\n\t\t\tstandingMatrixInverse.getInverse( standingMatrix );\r\n\r\n\t\t\tif ( referenceSpaceType === 'local-floor' ) {\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( standingMatrixInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar parent = camera.parent;\r\n\r\n\t\t\tif ( parent !== null ) {\r\n\r\n\t\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\r\n\t\t\t\tcameraL.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\t\t\t\tcameraR.matrixWorldInverse.multiply( matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// envMap and Mirror needs camera.matrixWorld\r\n\r\n\t\t\tcameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );\r\n\t\t\tcameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );\r\n\r\n\t\t\tcameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );\r\n\t\t\tcameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );\r\n\r\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar layers = device.getLayers();\r\n\r\n\t\t\tif ( layers.length ) {\r\n\r\n\t\t\t\tvar layer = layers[ 0 ];\r\n\r\n\t\t\t\tupdateViewportFromBounds( cameraL.viewport, layer.leftBounds );\r\n\t\t\t\tupdateViewportFromBounds( cameraR.viewport, layer.rightBounds );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateControllers();\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\treturn standingMatrix;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tanimation.setAnimationLoop( callback );\r\n\r\n\t\t\tif ( isPresenting() ) { animation.start(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {\r\n\r\n\t\t\tif ( isPresenting() ) { device.submitFrame(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\tif ( typeof window !== 'undefined' ) {\r\n\r\n\t\t\t\twindow.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.setFrameOfReferenceType = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( WebVRManager.prototype, EventDispatcher.prototype );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction WebXRManager( renderer, gl ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar session = null;\r\n\r\n\t\t// var framebufferScaleFactor = 1.0;\r\n\r\n\t\tvar referenceSpace = null;\r\n\t\tvar referenceSpaceType = 'local-floor';\r\n\r\n\t\tvar pose = null;\r\n\r\n\t\tvar controllers = [];\r\n\t\tvar sortedInputSources = [];\r\n\r\n\t\tfunction isPresenting() {\r\n\r\n\t\t\treturn session !== null && referenceSpace !== null;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar cameraL = new PerspectiveCamera();\r\n\t\tcameraL.layers.enable( 1 );\r\n\t\tcameraL.viewport = new Vector4();\r\n\r\n\t\tvar cameraR = new PerspectiveCamera();\r\n\t\tcameraR.layers.enable( 2 );\r\n\t\tcameraR.viewport = new Vector4();\r\n\r\n\t\tvar cameraVR = new ArrayCamera( [ cameraL, cameraR ] );\r\n\t\tcameraVR.layers.enable( 1 );\r\n\t\tcameraVR.layers.enable( 2 );\r\n\r\n\t\t//\r\n\r\n\t\tthis.enabled = false;\r\n\r\n\t\tthis.getController = function ( id ) {\r\n\r\n\t\t\tvar controller = controllers[ id ];\r\n\r\n\t\t\tif ( controller === undefined ) {\r\n\r\n\t\t\t\tcontroller = new Group();\r\n\t\t\t\tcontroller.matrixAutoUpdate = false;\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t\tcontrollers[ id ] = controller;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn controller;\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tfunction onSessionEvent( event ) {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tif ( sortedInputSources[ i ] === event.inputSource ) {\r\n\r\n\t\t\t\t\tcontrollers[ i ].dispatchEvent( { type: event.type } );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction onSessionEnd() {\r\n\r\n\t\t\trenderer.setFramebuffer( null );\r\n\t\t\trenderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830\r\n\t\t\tanimation.stop();\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onRequestReferenceSpace( value ) {\r\n\r\n\t\t\treferenceSpace = value;\r\n\r\n\t\t\tanimation.setContext( session );\r\n\t\t\tanimation.start();\r\n\r\n\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setFramebufferScaleFactor = function ( /* value */ ) {\r\n\r\n\t\t\t// framebufferScaleFactor = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setReferenceSpaceType = function ( value ) {\r\n\r\n\t\t\treferenceSpaceType = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSession = function () {\r\n\r\n\t\t\treturn session;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSession = function ( value ) {\r\n\r\n\t\t\tsession = value;\r\n\r\n\t\t\tif ( session !== null ) {\r\n\r\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\r\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\r\n\r\n\t\t\t\t// eslint-disable-next-line no-undef\r\n\t\t\t\tsession.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );\r\n\r\n\t\t\t\tsession.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tsession.addEventListener( 'inputsourceschange', updateInputSources );\r\n\r\n\t\t\t\tupdateInputSources();\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction updateInputSources() {\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tsortedInputSources[ i ] = findInputSource( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction findInputSource( id ) {\r\n\r\n\t\t\tvar inputSources = session.inputSources;\r\n\r\n\t\t\tfor ( var i = 0; i < inputSources.length; i ++ ) {\r\n\r\n\t\t\t\tvar inputSource = inputSources[ i ];\r\n\t\t\t\tvar handedness = inputSource.handedness;\r\n\r\n\t\t\t\tif ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }\r\n\t\t\t\tif ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction updateCamera( camera, parent ) {\r\n\r\n\t\t\tif ( parent === null ) {\r\n\r\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.getCamera = function ( camera ) {\r\n\r\n\t\t\tvar parent = camera.parent;\r\n\t\t\tvar cameras = cameraVR.cameras;\r\n\r\n\t\t\tupdateCamera( cameraVR, parent );\r\n\r\n\t\t\tfor ( var i = 0; i < cameras.length; i ++ ) {\r\n\r\n\t\t\t\tupdateCamera( cameras[ i ], parent );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update camera and its children\r\n\r\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\r\n\r\n\t\t\tvar children = camera.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\r\n\r\n\t\t\treturn cameraVR;\r\n\r\n\t\t};\r\n\r\n\t\tthis.isPresenting = isPresenting;\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time, frame ) {\r\n\r\n\t\t\tpose = frame.getViewerPose( referenceSpace );\r\n\r\n\t\t\tif ( pose !== null ) {\r\n\r\n\t\t\t\tvar views = pose.views;\r\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\r\n\r\n\t\t\t\trenderer.setFramebuffer( baseLayer.framebuffer );\r\n\r\n\t\t\t\tfor ( var i = 0; i < views.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar view = views[ i ];\r\n\t\t\t\t\tvar viewport = baseLayer.getViewport( view );\r\n\t\t\t\t\tvar viewMatrix = view.transform.inverse.matrix;\r\n\r\n\t\t\t\t\tvar camera = cameraVR.cameras[ i ];\r\n\t\t\t\t\tcamera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );\r\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\r\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\r\n\r\n\t\t\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < controllers.length; i ++ ) {\r\n\r\n\t\t\t\tvar controller = controllers[ i ];\r\n\r\n\t\t\t\tvar inputSource = sortedInputSources[ i ];\r\n\r\n\t\t\t\tif ( inputSource ) {\r\n\r\n\t\t\t\t\tvar inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\r\n\r\n\t\t\t\t\tif ( inputPose !== null ) {\r\n\r\n\t\t\t\t\t\tcontroller.matrix.fromArray( inputPose.transform.matrix );\r\n\t\t\t\t\t\tcontroller.matrix.decompose( controller.position, controller.rotation, controller.scale );\r\n\t\t\t\t\t\tcontroller.visible = true;\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcontroller.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\r\n\t\t};\r\n\r\n\t\tthis.dispose = function () {};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tthis.getStandingMatrix = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );\r\n\t\t\treturn new Matrix4();\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDevice = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDevice = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setFrameOfReferenceType = function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );\r\n\r\n\t\t};\r\n\r\n\t\tthis.submitFrame = function () {};\r\n\r\n\t}\r\n\r\n\tObject.assign( WebXRManager.prototype, EventDispatcher.prototype );\r\n\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction WebGLRenderer( parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),\r\n\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\r\n\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\r\n\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\r\n\r\n\t\tvar currentRenderList = null;\r\n\t\tvar currentRenderState = null;\r\n\r\n\t\t// public properties\r\n\r\n\t\tthis.domElement = _canvas;\r\n\r\n\t\t// Debug configuration container\r\n\t\tthis.debug = {\r\n\r\n\t\t\t/**\r\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tcheckShaderErrors: true\r\n\t\t};\r\n\r\n\t\t// clearing\r\n\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\r\n\t\t// scene graph\r\n\r\n\t\tthis.sortObjects = true;\r\n\r\n\t\t// user-defined clipping\r\n\r\n\t\tthis.clippingPlanes = [];\r\n\t\tthis.localClippingEnabled = false;\r\n\r\n\t\t// physically based shading\r\n\r\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\t\tthis.gammaInput = false;\r\n\t\tthis.gammaOutput = false;\r\n\r\n\t\t// physical lights\r\n\r\n\t\tthis.physicallyCorrectLights = false;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tthis.toneMapping = LinearToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\t\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tthis.maxMorphTargets = 8;\r\n\t\tthis.maxMorphNormals = 4;\r\n\r\n\t\t// internal properties\r\n\r\n\t\tvar _this = this,\r\n\r\n\t\t\t_isContextLost = false,\r\n\r\n\t\t\t// internal state cache\r\n\r\n\t\t\t_framebuffer = null,\r\n\r\n\t\t\t_currentActiveCubeFace = 0,\r\n\t\t\t_currentActiveMipmapLevel = 0,\r\n\t\t\t_currentRenderTarget = null,\r\n\t\t\t_currentFramebuffer = null,\r\n\t\t\t_currentMaterialId = - 1,\r\n\r\n\t\t\t// geometry and program caching\r\n\r\n\t\t\t_currentGeometryProgram = {\r\n\t\t\t\tgeometry: null,\r\n\t\t\t\tprogram: null,\r\n\t\t\t\twireframe: false\r\n\t\t\t},\r\n\r\n\t\t\t_currentCamera = null,\r\n\t\t\t_currentArrayCamera = null,\r\n\r\n\t\t\t_currentViewport = new Vector4(),\r\n\t\t\t_currentScissor = new Vector4(),\r\n\t\t\t_currentScissorTest = null,\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_width = _canvas.width,\r\n\t\t\t_height = _canvas.height,\r\n\r\n\t\t\t_pixelRatio = 1,\r\n\r\n\t\t\t_viewport = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissor = new Vector4( 0, 0, _width, _height ),\r\n\t\t\t_scissorTest = false,\r\n\r\n\t\t\t// frustum\r\n\r\n\t\t\t_frustum = new Frustum(),\r\n\r\n\t\t\t// clipping\r\n\r\n\t\t\t_clipping = new WebGLClipping(),\r\n\t\t\t_clippingEnabled = false,\r\n\t\t\t_localClippingEnabled = false,\r\n\r\n\t\t\t// camera matrices cache\r\n\r\n\t\t\t_projScreenMatrix = new Matrix4(),\r\n\r\n\t\t\t_vector3 = new Vector3();\r\n\r\n\t\tfunction getTargetPixelRatio() {\r\n\r\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t\t}\r\n\r\n\t\t// initialize\r\n\r\n\t\tvar _gl;\r\n\r\n\t\ttry {\r\n\r\n\t\t\tvar contextAttributes = {\r\n\t\t\t\talpha: _alpha,\r\n\t\t\t\tdepth: _depth,\r\n\t\t\t\tstencil: _stencil,\r\n\t\t\t\tantialias: _antialias,\r\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\r\n\t\t\t\tpowerPreference: _powerPreference,\r\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,\r\n\t\t\t\txrCompatible: true\r\n\t\t\t};\r\n\r\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\r\n\r\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );\r\n\r\n\t\t\tif ( _gl === null ) {\r\n\r\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\r\n\t\t\tthrow error;\r\n\r\n\t\t}\r\n\r\n\t\tvar extensions, capabilities, state, info;\r\n\t\tvar properties, textures, attributes, geometries, objects;\r\n\t\tvar programCache, renderLists, renderStates;\r\n\r\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\r\n\r\n\t\tvar utils;\r\n\r\n\t\tfunction initGLContext() {\r\n\r\n\t\t\textensions = new WebGLExtensions( _gl );\r\n\r\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\t\t\tif ( capabilities.isWebGL2 === false ) {\r\n\r\n\t\t\t\textensions.get( 'WEBGL_depth_texture' );\r\n\t\t\t\textensions.get( 'OES_texture_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float' );\r\n\t\t\t\textensions.get( 'OES_texture_half_float_linear' );\r\n\t\t\t\textensions.get( 'OES_standard_derivatives' );\r\n\t\t\t\textensions.get( 'OES_element_index_uint' );\r\n\t\t\t\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\textensions.get( 'OES_texture_float_linear' );\r\n\r\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\r\n\r\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t\tinfo = new WebGLInfo( _gl );\r\n\t\t\tproperties = new WebGLProperties();\r\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\r\n\t\t\tattributes = new WebGLAttributes( _gl );\r\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info );\r\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\r\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl );\r\n\t\t\tprogramCache = new WebGLPrograms( _this, extensions, capabilities );\r\n\t\t\trenderLists = new WebGLRenderLists();\r\n\t\t\trenderStates = new WebGLRenderStates();\r\n\r\n\t\t\tbackground = new WebGLBackground( _this, state, objects, _premultipliedAlpha );\r\n\r\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\r\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\r\n\r\n\t\t\tinfo.programs = programCache.programs;\r\n\r\n\t\t\t_this.capabilities = capabilities;\r\n\t\t\t_this.extensions = extensions;\r\n\t\t\t_this.properties = properties;\r\n\t\t\t_this.renderLists = renderLists;\r\n\t\t\t_this.state = state;\r\n\t\t\t_this.info = info;\r\n\r\n\t\t}\r\n\r\n\t\tinitGLContext();\r\n\r\n\t\t// vr\r\n\r\n\t\tvar vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );\r\n\r\n\t\tthis.vr = vr;\r\n\r\n\t\t// Multiview\r\n\r\n\t\tvar multiview = new WebGLMultiview( _this, _gl );\r\n\r\n\t\t// shadow map\r\n\r\n\t\tvar shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );\r\n\r\n\t\tthis.shadowMap = shadowMap;\r\n\r\n\t\t// API\r\n\r\n\t\tthis.getContext = function () {\r\n\r\n\t\t\treturn _gl;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getContextAttributes = function () {\r\n\r\n\t\t\treturn _gl.getContextAttributes();\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextLoss = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) { extension.loseContext(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.forceContextRestore = function () {\r\n\r\n\t\t\tvar extension = extensions.get( 'WEBGL_lose_context' );\r\n\t\t\tif ( extension ) { extension.restoreContext(); }\r\n\r\n\t\t};\r\n\r\n\t\tthis.getPixelRatio = function () {\r\n\r\n\t\t\treturn _pixelRatio;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\t\tif ( value === undefined ) { return; }\r\n\r\n\t\t\t_pixelRatio = value;\r\n\r\n\t\t\tthis.setSize( _width, _height, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getSize = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( _width, _height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_canvas.width = Math.floor( width * _pixelRatio );\r\n\t\t\t_canvas.height = Math.floor( height * _pixelRatio );\r\n\r\n\t\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getDrawingBufferSize = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\r\n\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\r\n\t\t\t_pixelRatio = pixelRatio;\r\n\r\n\t\t\t_canvas.width = Math.floor( width * pixelRatio );\r\n\t\t\t_canvas.height = Math.floor( height * pixelRatio );\r\n\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getCurrentViewport = function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );\r\n\r\n\t\t\t\ttarget = new Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( _currentViewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getViewport = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _viewport );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_viewport.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissor = function ( target ) {\r\n\r\n\t\t\treturn target.copy( _scissor );\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\t\tif ( x.isVector4 ) {\r\n\r\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_scissor.set( x, y, width, height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getScissorTest = function () {\r\n\r\n\t\t\treturn _scissorTest;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t\t};\r\n\r\n\t\t// Clearing\r\n\r\n\t\tthis.getClearColor = function () {\r\n\r\n\t\t\treturn background.getClearColor();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearColor = function () {\r\n\r\n\t\t\tbackground.setClearColor.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.getClearAlpha = function () {\r\n\r\n\t\t\treturn background.getClearAlpha();\r\n\r\n\t\t};\r\n\r\n\t\tthis.setClearAlpha = function () {\r\n\r\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\t\tvar bits = 0;\r\n\r\n\t\t\tif ( color === undefined || color ) { bits |= 16384; }\r\n\t\t\tif ( depth === undefined || depth ) { bits |= 256; }\r\n\t\t\tif ( stencil === undefined || stencil ) { bits |= 1024; }\r\n\r\n\t\t\t_gl.clear( bits );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearColor = function () {\r\n\r\n\t\t\tthis.clear( true, false, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearDepth = function () {\r\n\r\n\t\t\tthis.clear( false, true, false );\r\n\r\n\t\t};\r\n\r\n\t\tthis.clearStencil = function () {\r\n\r\n\t\t\tthis.clear( false, false, true );\r\n\r\n\t\t};\r\n\r\n\t\t//\r\n\r\n\t\tthis.dispose = function () {\r\n\r\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\r\n\r\n\t\t\trenderLists.dispose();\r\n\t\t\trenderStates.dispose();\r\n\t\t\tproperties.dispose();\r\n\t\t\tobjects.dispose();\r\n\r\n\t\t\tvr.dispose();\r\n\r\n\t\t\tanimation.stop();\r\n\r\n\t\t};\r\n\r\n\t\t// Events\r\n\r\n\t\tfunction onContextLost( event ) {\r\n\r\n\t\t\tevent.preventDefault();\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\r\n\r\n\t\t\t_isContextLost = true;\r\n\r\n\t\t}\r\n\r\n\t\tfunction onContextRestore( /* event */ ) {\r\n\r\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\r\n\r\n\t\t\t_isContextLost = false;\r\n\r\n\t\t\tinitGLContext();\r\n\r\n\t\t}\r\n\r\n\t\tfunction onMaterialDispose( event ) {\r\n\r\n\t\t\tvar material = event.target;\r\n\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\tdeallocateMaterial( material );\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer deallocation\r\n\r\n\t\tfunction deallocateMaterial( material ) {\r\n\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\tproperties.remove( material );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\t\tmaterial.program = undefined;\r\n\r\n\t\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Buffer rendering\r\n\r\n\t\tfunction renderObjectImmediate( object, program ) {\r\n\r\n\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t_this.renderBufferImmediate( object, program );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tthis.renderBufferImmediate = function ( object, program ) {\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar buffers = properties.get( object );\r\n\r\n\t\t\tif ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }\r\n\t\t\tif ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.position );\r\n\t\t\t\t_gl.bufferData( 34962, object.positionArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.normal );\r\n\t\t\t\t_gl.bufferData( 34962, object.normalArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.normal );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasUvs ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.uv );\r\n\t\t\t\t_gl.bufferData( 34962, object.uvArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.uv );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.hasColors ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( 34962, buffers.color );\r\n\t\t\t\t_gl.bufferData( 34962, object.colorArray, 35048 );\r\n\r\n\t\t\t\tstate.enableAttribute( programAttributes.color );\r\n\t\t\t\t_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t\t_gl.drawArrays( 4, 0, object.count );\r\n\r\n\t\t\tobject.count = 0;\r\n\r\n\t\t};\r\n\r\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\t\tvar frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\r\n\r\n\t\t\tstate.setMaterial( material, frontFaceCW );\r\n\r\n\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\tvar updateBuffers = false;\r\n\r\n\t\t\tif ( _currentGeometryProgram.geometry !== geometry.id ||\r\n\t\t\t\t_currentGeometryProgram.program !== program.id ||\r\n\t\t\t\t_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = geometry.id;\r\n\t\t\t\t_currentGeometryProgram.program = program.id;\r\n\t\t\t\t_currentGeometryProgram.wireframe = material.wireframe === true;\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.morphTargetInfluences ) {\r\n\r\n\t\t\t\tmorphtargets.update( object, geometry, material, program );\r\n\r\n\t\t\t\tupdateBuffers = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar position = geometry.attributes.position;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( index !== null && index.count === 0 ) { return; }\r\n\t\t\tif ( position === undefined || position.count === 0 ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar rangeFactor = 1;\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\r\n\t\t\t\trangeFactor = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attribute;\r\n\t\t\tvar renderer = bufferRenderer;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tattribute = attributes.get( index );\r\n\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( updateBuffers ) {\r\n\r\n\t\t\t\tsetupVertexAttributes( object, geometry, material, program );\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\t_gl.bindBuffer( 34963, attribute.buffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar dataCount = Infinity;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tdataCount = index.count;\r\n\r\n\t\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t\tdataCount = position.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\r\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\r\n\r\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\r\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\r\n\r\n\t\t\tvar drawStart = Math.max( rangeStart, groupStart );\r\n\t\t\tvar drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t\tif ( drawCount === 0 ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( object.isMesh ) {\r\n\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\t\trenderer.setMode( 1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\t\tcase TrianglesDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 4 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleStripDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 5 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase TriangleFanDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( 6 );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isLine ) {\r\n\r\n\t\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\t\tif ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material\r\n\r\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\t\tif ( object.isLineSegments ) {\r\n\r\n\t\t\t\t\trenderer.setMode( 1 );\r\n\r\n\t\t\t\t} else if ( object.isLineLoop ) {\r\n\r\n\t\t\t\t\trenderer.setMode( 2 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\trenderer.setMode( 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.isPoints ) {\r\n\r\n\t\t\t\trenderer.setMode( 0 );\r\n\r\n\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\trenderer.setMode( 4 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.isInstancedMesh ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, object.count );\r\n\r\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction setupVertexAttributes( object, geometry, material, program ) {\r\n\r\n\t\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\r\n\r\n\t\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.initAttributes();\r\n\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\r\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( geometryAttribute );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );\r\n\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( name === 'instanceMatrix' ) {\r\n\r\n\t\t\t\t\t\tvar attribute = attributes.get( object.instanceMatrix );\r\n\r\n\t\t\t\t\t\t// TODO Attribute may not be available on context restore\r\n\r\n\t\t\t\t\t\tif ( attribute === undefined ) { continue; }\r\n\r\n\t\t\t\t\t\tvar buffer = attribute.buffer;\r\n\t\t\t\t\t\tvar type = attribute.type;\r\n\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 0, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 1, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 2, 1 );\r\n\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute + 3, 1 );\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( 34962, buffer );\r\n\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );\r\n\r\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t}\r\n\r\n\t\t// Compile\r\n\r\n\t\tthis.compile = function ( scene, camera ) {\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tscene.traverse( function ( object ) {\r\n\r\n\t\t\t\tif ( object.material ) {\r\n\r\n\t\t\t\t\tif ( Array.isArray( object.material ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < object.material.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tinitMaterial( object.material[ i ], scene.fog, object );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tinitMaterial( object.material, scene.fog, object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t\t// Animation Loop\r\n\r\n\t\tvar onAnimationFrameCallback = null;\r\n\r\n\t\tfunction onAnimationFrame( time ) {\r\n\r\n\t\t\tif ( vr.isPresenting() ) { return; }\r\n\t\t\tif ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }\r\n\r\n\t\t}\r\n\r\n\t\tvar animation = new WebGLAnimation();\r\n\t\tanimation.setAnimationLoop( onAnimationFrame );\r\n\r\n\t\tif ( typeof window !== 'undefined' ) { animation.setContext( window ); }\r\n\r\n\t\tthis.setAnimationLoop = function ( callback ) {\r\n\r\n\t\t\tonAnimationFrameCallback = callback;\r\n\t\t\tvr.setAnimationLoop( callback );\r\n\r\n\t\t\tanimation.start();\r\n\r\n\t\t};\r\n\r\n\t\t// Rendering\r\n\r\n\t\tthis.render = function ( scene, camera ) {\r\n\r\n\t\t\tvar renderTarget, forceClear;\r\n\r\n\t\t\tif ( arguments[ 2 ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );\r\n\t\t\t\trenderTarget = arguments[ 2 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arguments[ 3 ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );\r\n\t\t\t\tforceClear = arguments[ 3 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! ( camera && camera.isCamera ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _isContextLost ) { return; }\r\n\r\n\t\t\t// reset caching for this frame\r\n\r\n\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t_currentGeometryProgram.wireframe = false;\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tif ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }\r\n\r\n\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\tif ( camera.parent === null ) { camera.updateMatrixWorld(); }\r\n\r\n\t\t\tif ( vr.enabled && vr.isPresenting() ) {\r\n\r\n\t\t\t\tcamera = vr.getCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tcurrentRenderState = renderStates.get( scene, camera );\r\n\t\t\tcurrentRenderState.init();\r\n\r\n\t\t\tscene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );\r\n\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t\t_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\r\n\r\n\t\t\tcurrentRenderList = renderLists.get( scene, camera );\r\n\t\t\tcurrentRenderList.init();\r\n\r\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\r\n\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\tcurrentRenderList.sort();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _clippingEnabled ) { _clipping.beginShadows(); }\r\n\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\r\n\r\n\t\t\tcurrentRenderState.setupLights( camera );\r\n\r\n\t\t\tif ( _clippingEnabled ) { _clipping.endShadows(); }\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( this.info.autoReset ) { this.info.reset(); }\r\n\r\n\t\t\tif ( renderTarget !== undefined ) {\r\n\r\n\t\t\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\r\n\r\n\t\t\t\tmultiview.attachCamera( camera );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tbackground.render( currentRenderList, scene, camera, forceClear );\r\n\r\n\t\t\t// render scene\r\n\r\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\r\n\t\t\tvar transparentObjects = currentRenderList.transparent;\r\n\r\n\t\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }\r\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\t\tif ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }\r\n\r\n\t\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\t\tif ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tscene.onAfterRender( _this, scene, camera );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( _currentRenderTarget !== null ) {\r\n\r\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\r\n\r\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\r\n\r\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\t\tstate.buffers.depth.setTest( true );\r\n\t\t\tstate.buffers.depth.setMask( true );\r\n\t\t\tstate.buffers.color.setMask( true );\r\n\r\n\t\t\tstate.setPolygonOffset( false );\r\n\r\n\t\t\tif ( vr.enabled ) {\r\n\r\n\t\t\t\tif ( multiview.isAvailable() ) {\r\n\r\n\t\t\t\t\tmultiview.detachCamera( camera );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvr.submitFrame();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// _gl.finish();\r\n\r\n\t\t\tcurrentRenderList = null;\r\n\t\t\tcurrentRenderState = null;\r\n\r\n\t\t};\r\n\r\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\r\n\r\n\t\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\t\tvar visible = object.layers.test( camera.layers );\r\n\r\n\t\t\tif ( visible ) {\r\n\r\n\t\t\t\tif ( object.isGroup ) {\r\n\r\n\t\t\t\t\tgroupOrder = object.renderOrder;\r\n\r\n\t\t\t\t} else if ( object.isLOD ) {\r\n\r\n\t\t\t\t\tif ( object.autoUpdate === true ) { object.update( camera ); }\r\n\r\n\t\t\t\t} else if ( object.isLight ) {\r\n\r\n\t\t\t\t\tcurrentRenderState.pushLight( object );\r\n\r\n\t\t\t\t\tif ( object.castShadow ) {\r\n\r\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isSprite ) {\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcurrentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\r\n\r\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\r\n\r\n\t\t\t\t\t\t// update skeleton only once in a frame\r\n\r\n\t\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\r\n\r\n\t\t\t\t\t\t\tobject.skeleton.update();\r\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\r\n\r\n\t\t\t\t\t\tif ( sortObjects ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\r\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\r\n\r\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else if ( material.visible ) {\r\n\r\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObjects( renderList, scene, camera, overrideMaterial ) {\r\n\r\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\t\tvar object = renderItem.object;\r\n\t\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\t\tif ( camera.isArrayCamera ) {\r\n\r\n\t\t\t\t\t_currentArrayCamera = camera;\r\n\r\n\t\t\t\t\tif ( vr.enabled && multiview.isAvailable() ) {\r\n\r\n\t\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar cameras = camera.cameras;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = cameras.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar camera2 = cameras[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( object.layers.test( camera2.layers ) ) {\r\n\r\n\t\t\t\t\t\t\t\tstate.viewport( _currentViewport.copy( camera2.viewport ) );\r\n\r\n\t\t\t\t\t\t\t\tcurrentRenderState.setupLights( camera2 );\r\n\r\n\t\t\t\t\t\t\t\trenderObject( object, scene, camera2, geometry, material, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_currentArrayCamera = null;\r\n\r\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\r\n\r\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object.isImmediateRenderObject ) {\r\n\r\n\t\t\t\tstate.setMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, scene.fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram.geometry = null;\r\n\t\t\t\t_currentGeometryProgram.program = null;\r\n\t\t\t\t_currentGeometryProgram.wireframe = false;\r\n\r\n\t\t\t\trenderObjectImmediate( object, program );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\r\n\t\t\tcurrentRenderState = renderStates.get( scene, _currentArrayCamera || camera );\r\n\r\n\t\t}\r\n\r\n\t\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\r\n\r\n\t\t\tvar lightsStateVersion = lights.state.version;\r\n\r\n\t\t\tvar parameters = programCache.getParameters(\r\n\t\t\t\tmaterial, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );\r\n\r\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey( material, parameters );\r\n\r\n\t\t\tvar program = materialProperties.program;\r\n\t\t\tvar programChange = true;\r\n\r\n\t\t\tif ( program === undefined ) {\r\n\r\n\t\t\t\t// new material\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t\t} else if ( program.cacheKey !== programCacheKey ) {\r\n\r\n\t\t\t\t// changed glsl or parameters\r\n\t\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t\t} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {\r\n\r\n\t\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t\t// same glsl and uniform list\r\n\t\t\t\treturn;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// only rebuild uniform list\r\n\t\t\t\tprogramChange = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( programChange ) {\r\n\r\n\t\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\t\tvar shader = ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: cloneUniforms( shader.uniforms ),\r\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmaterialProperties.shader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.onBeforeCompile( materialProperties.shader, _this );\r\n\r\n\t\t\t\t// Computing cache key again as onBeforeCompile may have changed the shaders\r\n\t\t\t\tprogramCacheKey = programCache.getProgramCacheKey( material, parameters );\r\n\r\n\t\t\t\tprogram = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );\r\n\r\n\t\t\t\tmaterialProperties.program = program;\r\n\t\t\t\tmaterial.program = program;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\t\tif ( programAttributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( ! material.isShaderMaterial &&\r\n\t\t\t\t! material.isRawShaderMaterial ||\r\n\t\t\t\tmaterial.clipping === true ) {\r\n\r\n\t\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\r\n\t\t\t\tmaterialProperties.numIntersection = _clipping.numIntersection;\r\n\t\t\t\tuniforms.clippingPlanes = _clipping.uniform;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterialProperties.fog = fog;\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\r\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\r\n\r\n\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\r\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\r\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\r\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\r\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\r\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\r\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\r\n\r\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\r\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\r\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\r\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\r\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\r\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\r\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar progUniforms = materialProperties.program.getUniforms(),\r\n\t\t\t\tuniformsList =\r\n\t\t\t\t\tWebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\r\n\r\n\t\t\tmaterialProperties.uniformsList = uniformsList;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t\ttextures.resetTextureUnits();\r\n\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\t\tvar lights = currentRenderState.state.lights;\r\n\r\n\t\t\tif ( _clippingEnabled ) {\r\n\r\n\t\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\r\n\r\n\t\t\t\t\tvar useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t\t_clipping.setState(\r\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipIntersection, material.clipShadows,\r\n\t\t\t\t\t\tcamera, materialProperties, useCache );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.version === materialProperties.__version ) {\r\n\r\n\t\t\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\t\t( materialProperties.numClippingPlanes !== _clipping.numPlanes ||\r\n\t\t\t\t\tmaterialProperties.numIntersection !== _clipping.numIntersection ) ) {\r\n\r\n\t\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.version !== materialProperties.__version ) {\r\n\r\n\t\t\t\tinitMaterial( material, fog, object );\r\n\t\t\t\tmaterialProperties.__version = material.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar refreshProgram = false;\r\n\t\t\tvar refreshMaterial = false;\r\n\t\t\tvar refreshLights = false;\r\n\r\n\t\t\tvar program = materialProperties.program,\r\n\t\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.shader.uniforms;\r\n\r\n\t\t\tif ( state.useProgram( program.program ) ) {\r\n\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\t\trefreshMaterial = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\r\n\r\n\t\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\t\tmultiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _currentCamera !== camera ) {\r\n\r\n\t\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// load material specific uniforms\r\n\t\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.envMap ) {\r\n\r\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\t\tuCamPos.setValue( _gl,\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshPhongMaterial ||\r\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\r\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\r\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.isShaderMaterial ||\r\n\t\t\t\t\tmaterial.skinning ) {\r\n\r\n\t\t\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\t\t\tmultiview.updateCameraViewMatricesUniform( camera, p_uniforms );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\t\tif ( material.skinning ) {\r\n\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\t\tvar bones = skeleton.bones;\r\n\r\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\r\n\r\n\t\t\t\t\t\tif ( skeleton.boneTexture === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t\t\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t\t\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t\t\t\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t\t\t\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t\t\t\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\r\n\t\t\t\t\t\t\tvar size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\t\t\t\t\t\tsize = _Math.ceilPowerOfTwo( size );\r\n\t\t\t\t\t\t\tsize = Math.max( size, 4 );\r\n\r\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\r\n\t\t\t\t\t\t\tboneMatrices.set( skeleton.boneMatrices ); // copy current values\r\n\r\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\r\n\r\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\r\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\r\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\r\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\r\n\r\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\r\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );\r\n\r\n\t\t\t\tif ( materialProperties.needsLights ) {\r\n\r\n\t\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t\t// values\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( material.isMeshBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshLambertMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshPhongMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshToonMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsToon( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshStandardMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isMeshPhysicalMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isMeshMatcapMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t\t\trefreshUniformsMatcap( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDepthMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDepth( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshDistanceMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDistance( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isMeshNormalMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsNormal( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isLineBasicMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t\t\tif ( material.isLineDashedMaterial ) {\r\n\r\n\t\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( material.isPointsMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\t\trefreshUniformsSprites( m_uniforms, material );\r\n\r\n\t\t\t\t} else if ( material.isShadowMaterial ) {\r\n\r\n\t\t\t\t\tm_uniforms.color.value.copy( material.color );\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// RectAreaLight Texture\r\n\t\t\t\t// TODO (mrdoob): Find a nicer implementation\r\n\r\n\t\t\t\tif ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }\r\n\t\t\t\tif ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\r\n\r\n\t\t\t\tif ( material.isShaderMaterial ) {\r\n\r\n\t\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\r\n\r\n\t\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\r\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.isSpriteMaterial ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// common matrices\r\n\r\n\t\t\tif ( program.numMultiviewViews > 0 ) {\r\n\r\n\t\t\t\tmultiview.updateObjectMatricesUniforms( object, camera, p_uniforms );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\r\n\t\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\t\t\treturn program;\r\n\r\n\t\t}\r\n\r\n\t\t// Uniforms (refresh uniforms objects)\r\n\r\n\t\tfunction refreshUniformsCommon( uniforms, material ) {\r\n\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t\tif ( material.color ) {\r\n\r\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissive ) {\r\n\r\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.specularMap ) {\r\n\r\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\tuniforms.envMap.value = material.envMap;\r\n\r\n\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\r\n\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\r\n\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\r\n\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\r\n\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\r\n\r\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t\t\t\tuniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.lightMap ) {\r\n\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.aoMap ) {\r\n\r\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. specular map\r\n\t\t\t// 3. normal map\r\n\t\t\t// 4. bump map\r\n\t\t\t// 5. alpha map\r\n\t\t\t// 6. emissive map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\t// backwards compatibility\r\n\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\r\n\r\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLine( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDash( uniforms, material ) {\r\n\r\n\t\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\t\tuniforms.scale.value = material.scale;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPoints( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\t\tuniforms.scale.value = _height * 0.5;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. alpha map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsSprites( uniforms, material ) {\r\n\r\n\t\t\tuniforms.diffuse.value.copy( material.color );\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.rotation.value = material.rotation;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuniforms.map.value = material.map;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.alphaMap ) {\r\n\r\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. alpha map\r\n\r\n\t\t\tvar uvScaleMap;\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\r\n\r\n\t\t\t\t\tuvScaleMap.updateMatrix();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsFog( uniforms, fog ) {\r\n\r\n\t\t\tuniforms.fogColor.value.copy( fog.color );\r\n\r\n\t\t\tif ( fog.isFog ) {\r\n\r\n\t\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t\t} else if ( fog.isFogExp2 ) {\r\n\r\n\t\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsLambert( uniforms, material ) {\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhong( uniforms, material ) {\r\n\r\n\t\t\tuniforms.specular.value.copy( material.specular );\r\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsToon( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsPhong( uniforms, material );\r\n\r\n\t\t\tif ( material.gradientMap ) {\r\n\r\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsStandard( uniforms, material ) {\r\n\r\n\t\t\tuniforms.roughness.value = material.roughness;\r\n\t\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.envMap ) {\r\n\r\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsPhysical( uniforms, material ) {\r\n\r\n\t\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\r\n\r\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\r\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\r\n\t\t\tif ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\r\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\r\n\r\n\t\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.transparency.value = material.transparency;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsMatcap( uniforms, material ) {\r\n\r\n\t\t\tif ( material.matcap ) {\r\n\r\n\t\t\t\tuniforms.matcap.value = material.matcap;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDepth( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsDistance( uniforms, material ) {\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms.referencePosition.value.copy( material.referencePosition );\r\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\r\n\t\t\tuniforms.farDistance.value = material.farDistance;\r\n\r\n\t\t}\r\n\r\n\t\tfunction refreshUniformsNormal( uniforms, material ) {\r\n\r\n\t\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\t\t\tif ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\r\n\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\t\t\tuniforms.lightProbe.needsUpdate = value;\r\n\r\n\t\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t\t}\r\n\r\n\t\tfunction materialNeedsLights( material ) {\r\n\r\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshPhongMaterial ||\r\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\r\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\t\tthis.setFramebuffer = function ( value ) {\r\n\r\n\t\t\tif ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }\r\n\r\n\t\t\t_framebuffer = value;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveCubeFace = function () {\r\n\r\n\t\t\treturn _currentActiveCubeFace;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getActiveMipmapLevel = function () {\r\n\r\n\t\t\treturn _currentActiveMipmapLevel;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getRenderTarget = function () {\r\n\r\n\t\t\treturn _currentRenderTarget;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {\r\n\r\n\t\t\t_currentRenderTarget = renderTarget;\r\n\t\t\t_currentActiveCubeFace = activeCubeFace;\r\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\r\n\r\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = _framebuffer;\r\n\t\t\tvar isCube = false;\r\n\r\n\t\t\tif ( renderTarget ) {\r\n\r\n\t\t\t\tvar __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\t\tif ( renderTarget.isWebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace || 0 ];\r\n\t\t\t\t\tisCube = true;\r\n\r\n\t\t\t\t} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {\r\n\r\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tframebuffer = __webglFramebuffer;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\r\n\t\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\t\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.viewport( _currentViewport );\r\n\t\t\tstate.scissor( _currentScissor );\r\n\t\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\r\n\r\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\t\tif ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {\r\n\r\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( framebuffer ) {\r\n\r\n\t\t\t\tvar restore = false;\r\n\r\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( 36160, framebuffer );\r\n\r\n\t\t\t\t\trestore = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar texture = renderTarget.texture;\r\n\t\t\t\t\tvar textureFormat = texture.format;\r\n\t\t\t\t\tvar textureType = texture.type;\r\n\r\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)\r\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\r\n\t\t\t\t\t\t! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\r\n\r\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} finally {\r\n\r\n\t\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t\t_gl.bindFramebuffer( 36160, _currentFramebuffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level ) {\r\n\r\n\t\t\tif ( level === undefined ) { level = 0; }\r\n\r\n\t\t\tvar levelScale = Math.pow( 2, - level );\r\n\t\t\tvar width = Math.floor( texture.image.width * levelScale );\r\n\t\t\tvar height = Math.floor( texture.image.height * levelScale );\r\n\t\t\tvar glFormat = utils.convert( texture.format );\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {\r\n\r\n\t\t\tvar width = srcTexture.image.width;\r\n\t\t\tvar height = srcTexture.image.height;\r\n\t\t\tvar glFormat = utils.convert( dstTexture.format );\r\n\t\t\tvar glType = utils.convert( dstTexture.type );\r\n\r\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\r\n\r\n\t\t\tif ( srcTexture.isDataTexture ) {\r\n\r\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tthis.initTexture = function ( texture ) {\r\n\r\n\t\t\ttextures.setTexture2D( texture, 0 );\r\n\r\n\t\t\tstate.unbindTexture();\r\n\r\n\t\t};\r\n\r\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction FogExp2( color, density ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n\t}\r\n\r\n\tObject.assign( FogExp2.prototype, {\r\n\r\n\t\tisFogExp2: true,\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new FogExp2( this.color, this.density );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( /* meta */ ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'FogExp2',\r\n\t\t\t\tcolor: this.color.getHex(),\r\n\t\t\t\tdensity: this.density\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Fog( color, near, far ) {\r\n\r\n\t\tthis.name = '';\r\n\r\n\t\tthis.color = new Color( color );\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n\t}\r\n\r\n\tObject.assign( Fog.prototype, {\r\n\r\n\t\tisFog: true,\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Fog( this.color, this.near, this.far );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( /* meta */ ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttype: 'Fog',\r\n\t\t\t\tcolor: this.color.getHex(),\r\n\t\t\t\tnear: this.near,\r\n\t\t\t\tfar: this.far\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBuffer( array, stride ) {\r\n\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\tthis.usage = StaticDrawUsage;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tObject.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {\r\n\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tif ( value === true ) { this.version ++; }\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\r\n\t\tisInterleavedBuffer: true,\r\n\r\n\t\tonUploadCallback: function () {},\r\n\r\n\t\tsetUsage: function ( value ) {\r\n\r\n\t\t\tthis.usage = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.count = source.count;\r\n\t\t\tthis.stride = source.stride;\r\n\t\t\tthis.usage = source.usage;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\t\tindex1 *= this.stride;\r\n\t\t\tindex2 *= attribute.stride;\r\n\r\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tset: function ( value, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tthis.array.set( value, offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tonUpload: function ( callback ) {\r\n\r\n\t\t\tthis.onUploadCallback = callback;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {\r\n\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\r\n\t\tthis.normalized = normalized === true;\r\n\r\n\t}\r\n\r\n\tObject.defineProperties( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tcount: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tarray: {\r\n\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.data.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBufferAttribute.prototype, {\r\n\r\n\t\tisInterleavedBufferAttribute: true,\r\n\r\n\t\tsetX: function ( index, x ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetY: function ( index, y ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetZ: function ( index, z ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetW: function ( index, w ) {\r\n\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetX: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\t},\r\n\r\n\t\tgetY: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetZ: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\t},\r\n\r\n\t\tgetW: function ( index ) {\r\n\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetXY: function ( index, x, y ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *  rotation: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction SpriteMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'SpriteMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.rotation = 0;\r\n\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tSpriteMaterial.prototype = Object.create( Material.prototype );\r\n\tSpriteMaterial.prototype.constructor = SpriteMaterial;\r\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\r\n\r\n\tSpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar _geometry;\r\n\r\n\tvar _intersectPoint = new Vector3();\r\n\tvar _worldScale = new Vector3();\r\n\tvar _mvPosition = new Vector3();\r\n\r\n\tvar _alignedPosition = new Vector2();\r\n\tvar _rotatedPosition = new Vector2();\r\n\tvar _viewWorldMatrix = new Matrix4();\r\n\r\n\tvar _vA$1 = new Vector3();\r\n\tvar _vB$1 = new Vector3();\r\n\tvar _vC$1 = new Vector3();\r\n\r\n\tvar _uvA$1 = new Vector2();\r\n\tvar _uvB$1 = new Vector2();\r\n\tvar _uvC$1 = new Vector2();\r\n\r\n\tfunction Sprite( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tif ( _geometry === undefined ) {\r\n\r\n\t\t\t_geometry = new BufferGeometry();\r\n\r\n\t\t\tvar float32Array = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\r\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\r\n\t\t\t\t0.5, 0.5, 0, 1, 1,\r\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\r\n\t\t\t] );\r\n\r\n\t\t\tvar interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\r\n\r\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\r\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\r\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.geometry = _geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\r\n\r\n\t\tthis.center = new Vector2( 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\tSprite.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Sprite,\r\n\r\n\t\tisSprite: true,\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tif ( raycaster.camera === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\r\n\r\n\t\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\r\n\t\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\r\n\r\n\t\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\r\n\r\n\t\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\r\n\r\n\t\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar rotation = this.material.rotation;\r\n\t\t\tvar sin, cos;\r\n\t\t\tif ( rotation !== 0 ) {\r\n\r\n\t\t\t\tcos = Math.cos( rotation );\r\n\t\t\t\tsin = Math.sin( rotation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\ttransformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\ttransformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\ttransformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\r\n\t\t\t_uvA$1.set( 0, 0 );\r\n\t\t\t_uvB$1.set( 1, 0 );\r\n\t\t\t_uvC$1.set( 1, 1 );\r\n\r\n\t\t\t// check first triangle\r\n\t\t\tvar intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );\r\n\r\n\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t// check second triangle\r\n\t\t\t\ttransformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\r\n\t\t\t\t_uvB$1.set( 0, 1 );\r\n\r\n\t\t\t\tintersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );\r\n\t\t\t\tif ( intersect === null ) {\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( _intersectPoint );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: _intersectPoint.clone(),\r\n\t\t\t\tuv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\r\n\t\t\t} );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.material ).copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tif ( source.center !== undefined ) { this.center.copy( source.center ); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\r\n\t} );\r\n\r\n\tfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\r\n\r\n\t\t// compute position in camera space\r\n\t\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\r\n\r\n\t\t// to check if rotation is not zero\r\n\t\tif ( sin !== undefined ) {\r\n\r\n\t\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\r\n\t\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_rotatedPosition.copy( _alignedPosition );\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvertexPosition.copy( mvPosition );\r\n\t\tvertexPosition.x += _rotatedPosition.x;\r\n\t\tvertexPosition.y += _rotatedPosition.y;\r\n\r\n\t\t// transform to world space\r\n\t\tvertexPosition.applyMatrix4( _viewWorldMatrix );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _v1$4 = new Vector3();\r\n\tvar _v2$2 = new Vector3();\r\n\r\n\tfunction LOD() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'LOD';\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t}\r\n\r\n\tLOD.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: LOD,\r\n\r\n\t\tisLOD: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\t\tvar levels = source.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoUpdate = source.autoUpdate;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\taddLevel: function ( object, distance ) {\r\n\r\n\t\t\tif ( distance === undefined ) { distance = 0; }\r\n\r\n\t\t\tdistance = Math.abs( distance );\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\t\t\tthis.add( object );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetObjectForDistance: function ( distance ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn levels[ i - 1 ].object;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 0 ) {\r\n\r\n\t\t\t\t_v1$4.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( _v1$4 );\r\n\r\n\t\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: function ( camera ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t\t_v1$4.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t_v2$2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = _v1$4.distanceTo( _v2$2 );\r\n\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tif ( this.autoUpdate === false ) { data.object.autoUpdate = false; }\r\n\r\n\t\t\tdata.object.levels = [];\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\t\tdata.object.levels.push( {\r\n\t\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\t\tdistance: level.distance\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction SkinnedMesh( geometry, material ) {\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'SkinnedMesh';\r\n\r\n\t\tthis.bindMode = 'attached';\r\n\t\tthis.bindMatrix = new Matrix4();\r\n\t\tthis.bindMatrixInverse = new Matrix4();\r\n\r\n\t}\r\n\r\n\tSkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: SkinnedMesh,\r\n\r\n\t\tisSkinnedMesh: true,\r\n\r\n\t\tbind: function ( skeleton, bindMatrix ) {\r\n\r\n\t\t\tthis.skeleton = skeleton;\r\n\r\n\t\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tthis.skeleton.pose();\r\n\r\n\t\t},\r\n\r\n\t\tnormalizeSkinWeights: function () {\r\n\r\n\t\t\tvar vector = new Vector4();\r\n\r\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\t\tfor ( var i = 0, l = skinWeight.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvector.x = skinWeight.getX( i );\r\n\t\t\t\tvector.y = skinWeight.getY( i );\r\n\t\t\t\tvector.z = skinWeight.getZ( i );\r\n\t\t\t\tvector.w = skinWeight.getW( i );\r\n\r\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tvector.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tMesh.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.bindMode === 'attached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t\t} else if ( this.bindMode === 'detached' ) {\r\n\r\n\t\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author michael guerrero / http://realitymeltdown.com\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tvar _offsetMatrix = new Matrix4();\r\n\tvar _identityMatrix = new Matrix4();\r\n\r\n\tfunction Skeleton( bones, boneInverses ) {\r\n\r\n\t\t// copy the bone array\r\n\r\n\t\tbones = bones || [];\r\n\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\tthis.boneMatrices = new Float32Array( this.bones.length * 16 );\r\n\r\n\t\tthis.frame = - 1;\r\n\r\n\t\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\t\tif ( boneInverses === undefined ) {\r\n\r\n\t\t\tthis.calculateInverses();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton boneInverses is the wrong length.' );\r\n\r\n\t\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Skeleton.prototype, {\r\n\r\n\t\tcalculateInverses: function () {\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar inverse = new Matrix4();\r\n\r\n\t\t\t\tif ( this.bones[ i ] ) {\r\n\r\n\t\t\t\t\tinverse.getInverse( this.bones[ i ].matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tpose: function () {\r\n\r\n\t\t\tvar bone, i, il;\r\n\r\n\t\t\t// recover the bind-time world matrices\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\t\tfor ( i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tbone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone ) {\r\n\r\n\t\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar bones = this.bones;\r\n\t\t\tvar boneInverses = this.boneInverses;\r\n\t\t\tvar boneMatrices = this.boneMatrices;\r\n\t\t\tvar boneTexture = this.boneTexture;\r\n\r\n\t\t\t// flatten bone matrices to array\r\n\r\n\t\t\tfor ( var i = 0, il = bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\t\tvar matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\r\n\r\n\t\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\r\n\t\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( boneTexture !== undefined ) {\r\n\r\n\t\t\t\tboneTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new Skeleton( this.bones, this.boneInverses );\r\n\r\n\t\t},\r\n\r\n\t\tgetBoneByName: function ( name ) {\r\n\r\n\t\t\tfor ( var i = 0, il = this.bones.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar bone = this.bones[ i ];\r\n\r\n\t\t\t\tif ( bone.name === name ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\r\n\tfunction Bone() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Bone';\r\n\r\n\t}\r\n\r\n\tBone.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Bone,\r\n\r\n\t\tisBone: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _instanceLocalMatrix = new Matrix4();\r\n\tvar _instanceWorldMatrix = new Matrix4();\r\n\r\n\tvar _instanceIntersects = [];\r\n\r\n\tvar _mesh = new Mesh();\r\n\r\n\tfunction InstancedMesh( geometry, material, count ) {\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );\r\n\r\n\t\tthis.count = count;\r\n\r\n\t}\r\n\r\n\tInstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {\r\n\r\n\t\tconstructor: InstancedMesh,\r\n\r\n\t\tisInstancedMesh: true,\r\n\r\n\t\tgetMatrixAt: function ( index, matrix ) {\r\n\r\n\t\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar raycastTimes = this.count;\r\n\r\n\t\t\t_mesh.geometry = this.geometry;\r\n\t\t\t_mesh.material = this.material;\r\n\r\n\t\t\tif ( _mesh.material === undefined ) { return; }\r\n\r\n\t\t\tfor ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\r\n\r\n\t\t\t\t// calculate the world matrix for each instance\r\n\r\n\t\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\r\n\r\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\r\n\r\n\t\t\t\t// the mesh represents this single instance\r\n\r\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\r\n\r\n\t\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\r\n\r\n\t\t\t\t// process the result of raycast\r\n\r\n\t\t\t\tif ( _instanceIntersects.length > 0 ) {\r\n\r\n\t\t\t\t\t_instanceIntersects[ 0 ].instanceId = instanceId;\r\n\t\t\t\t\t_instanceIntersects[ 0 ].object = this;\r\n\r\n\t\t\t\t\tintersects.push( _instanceIntersects[ 0 ] );\r\n\r\n\t\t\t\t\t_instanceIntersects.length = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsetMatrixAt: function ( index, matrix ) {\r\n\r\n\t\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *  linecap: \"round\",\r\n\t *  linejoin: \"round\"\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineBasicMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineBasicMaterial.prototype = Object.create( Material.prototype );\r\n\tLineBasicMaterial.prototype.constructor = LineBasicMaterial;\r\n\r\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\r\n\r\n\tLineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _start = new Vector3();\r\n\tvar _end = new Vector3();\r\n\tvar _inverseMatrix$1 = new Matrix4();\r\n\tvar _ray$1 = new Ray();\r\n\tvar _sphere$2 = new Sphere();\r\n\r\n\tfunction Line( geometry, material, mode ) {\r\n\r\n\t\tif ( mode === 1 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Line';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t}\r\n\r\n\tLine.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Line,\r\n\r\n\t\tisLine: true,\r\n\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\tvar lineDistances = [ 0 ];\r\n\r\n\t\t\t\t\tfor ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i - 1 );\r\n\t\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i ] += _start.distanceTo( _end );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\tlineDistances[ 0 ] = 0;\r\n\r\n\t\t\t\tfor ( var i = 1, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$2.copy( geometry.boundingSphere );\r\n\t\t\t_sphere$2.applyMatrix4( matrixWorld );\r\n\t\t\t_sphere$2.radius += precision;\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix$1.getInverse( matrixWorld );\r\n\t\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\r\n\r\n\t\t\tvar localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localPrecisionSq = localPrecision * localPrecision;\r\n\r\n\t\t\tvar vStart = new Vector3();\r\n\t\t\tvar vEnd = new Vector3();\r\n\t\t\tvar interSegment = new Vector3();\r\n\t\t\tvar interRay = new Vector3();\r\n\t\t\tvar step = ( this && this.isLineSegments ) ? 2 : 1;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > localPrecisionSq ) { continue; }\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { continue; }\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _start$1 = new Vector3();\r\n\tvar _end$1 = new Vector3();\r\n\r\n\tfunction LineSegments( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineSegments';\r\n\r\n\t}\r\n\r\n\tLineSegments.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineSegments,\r\n\r\n\t\tisLineSegments: true,\r\n\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t// we assume non-indexed geometry\r\n\r\n\t\t\t\tif ( geometry.index === null ) {\r\n\r\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\r\n\t\t\t\t\tvar lineDistances = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i );\r\n\t\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i + 1 );\r\n\r\n\t\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry.isGeometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar lineDistances = geometry.lineDistances;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t_start$1.copy( vertices[ i ] );\r\n\t\t\t\t\t_end$1.copy( vertices[ i + 1 ] );\r\n\r\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\r\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mgreter / http://github.com/mgreter\r\n\t */\r\n\r\n\tfunction LineLoop( geometry, material ) {\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\tthis.type = 'LineLoop';\r\n\r\n\t}\r\n\r\n\tLineLoop.prototype = Object.assign( Object.create( Line.prototype ), {\r\n\r\n\t\tconstructor: LineLoop,\r\n\r\n\t\tisLineLoop: true,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  size: <float>,\r\n\t *  sizeAttenuation: <bool>\r\n\t *\r\n\t *  morphTargets: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction PointsMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'PointsMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff );\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\r\n\t\tthis.morphTargets = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tPointsMaterial.prototype = Object.create( Material.prototype );\r\n\tPointsMaterial.prototype.constructor = PointsMaterial;\r\n\r\n\tPointsMaterial.prototype.isPointsMaterial = true;\r\n\r\n\tPointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tvar _inverseMatrix$2 = new Matrix4();\r\n\tvar _ray$2 = new Ray();\r\n\tvar _sphere$3 = new Sphere();\r\n\tvar _position$1 = new Vector3();\r\n\r\n\tfunction Points( geometry, material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Points';\r\n\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new BufferGeometry();\r\n\t\tthis.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tPoints.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Points,\r\n\r\n\t\tisPoints: true,\r\n\r\n\t\traycast: function ( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }\r\n\r\n\t\t\t_sphere$3.copy( geometry.boundingSphere );\r\n\t\t\t_sphere$3.applyMatrix4( matrixWorld );\r\n\t\t\t_sphere$3.radius += threshold;\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }\r\n\r\n\t\t\t//\r\n\r\n\t\t\t_inverseMatrix$2.getInverse( matrixWorld );\r\n\t\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\r\n\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\t\t_position$1.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t_position$1.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\ttestPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tupdateMorphTargets: function () {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar m, ml, name;\r\n\r\n\t\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\t\t\tvar keys = Object.keys( morphAttributes );\r\n\r\n\t\t\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\t\t\tvar morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\t\t\tfor ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tname = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\r\n\t\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\r\n\r\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint( point );\r\n\r\n\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\tvar intersectPoint = new Vector3();\r\n\r\n\t\t\t_ray$2.closestPointToPoint( point, intersectPoint );\r\n\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) { return; }\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\tpoint: intersectPoint,\r\n\t\t\t\tindex: index,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: object\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.format = format !== undefined ? format : RGBFormat;\r\n\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tVideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {\r\n\r\n\t\tconstructor: VideoTexture,\r\n\r\n\t\tisVideoTexture: true,\r\n\r\n\t\tupdate: function () {\r\n\r\n\t\t\tvar video = this.image;\r\n\r\n\t\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\t\tthis.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\r\n\t\tthis.flipY = false;\r\n\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t}\r\n\r\n\tCompressedTexture.prototype = Object.create( Texture.prototype );\r\n\tCompressedTexture.prototype.constructor = CompressedTexture;\r\n\r\n\tCompressedTexture.prototype.isCompressedTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\t\tTexture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tCanvasTexture.prototype = Object.create( Texture.prototype );\r\n\tCanvasTexture.prototype.constructor = CanvasTexture;\r\n\tCanvasTexture.prototype.isCanvasTexture = true;\r\n\r\n\t/**\r\n\t * @author Matt DesLauriers / @mattdesl\r\n\t * @author atix / arthursilber.de\r\n\t */\r\n\r\n\tfunction DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\r\n\r\n\t\tformat = format !== undefined ? format : DepthFormat;\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }\r\n\t\tif ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }\r\n\r\n\t\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\tthis.image = { width: width, height: height };\r\n\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\r\n\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps\t= false;\r\n\r\n\t}\r\n\r\n\tDepthTexture.prototype = Object.create( Texture.prototype );\r\n\tDepthTexture.prototype.constructor = DepthTexture;\r\n\tDepthTexture.prototype.isDepthTexture = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction WireframeGeometry( geometry ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'WireframeGeometry';\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j, l, o, ol;\r\n\t\tvar edge = [ 0, 0 ], edges = {}, e, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\t\tvar vertex;\r\n\r\n\t\t// different logic for Geometry and BufferGeometry\r\n\r\n\t\tif ( geometry && geometry.isGeometry ) {\r\n\r\n\t\t\t// create a data structure that contains all edges without duplicates\r\n\r\n\t\t\tvar faces = geometry.faces;\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate vertices\r\n\r\n\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = geometry.vertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry && geometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar position, indices, groups;\r\n\t\t\tvar group, start, count;\r\n\t\t\tvar index1, index2;\r\n\r\n\t\t\tvertex = new Vector3();\r\n\r\n\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t// indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\t\t\t\tindices = geometry.index;\r\n\t\t\t\tgroups = geometry.groups;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a data structure that contains all eges without duplicates\r\n\r\n\t\t\t\tfor ( o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\t\tgroup = groups[ o ];\r\n\r\n\t\t\t\t\tstart = group.start;\r\n\t\t\t\t\tcount = group.count;\r\n\r\n\t\t\t\t\tfor ( i = start, l = ( start + count ); i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tedge1 = indices.getX( i + j );\r\n\t\t\t\t\t\t\tedge2 = indices.getX( i + ( j + 1 ) % 3 );\r\n\t\t\t\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates\r\n\t\t\t\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// generate vertices\r\n\r\n\t\t\t\tfor ( key in edges ) {\r\n\r\n\t\t\t\t\te = edges[ key ];\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index1 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\tvertex.fromBufferAttribute( position, e.index2 );\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\t\tposition = geometry.attributes.position;\r\n\r\n\t\t\t\tfor ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\r\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\r\n\r\n\t\t\t\t\t\tindex1 = 3 * i + j;\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index1 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t\tindex2 = 3 * i + ( ( j + 1 ) % 3 );\r\n\t\t\t\t\t\tvertex.fromBufferAttribute( position, index2 );\r\n\t\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tWireframeGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tWireframeGeometry.prototype.constructor = WireframeGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Parametric Surfaces Geometry\r\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n\t */\r\n\r\n\t// ParametricGeometry\r\n\r\n\tfunction ParametricGeometry( func, slices, stacks ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tParametricGeometry.prototype = Object.create( Geometry.prototype );\r\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\r\n\r\n\t// ParametricBufferGeometry\r\n\r\n\tfunction ParametricBufferGeometry( func, slices, stacks ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ParametricBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\tvar EPS = 0.00001;\r\n\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar p0 = new Vector3(), p1 = new Vector3();\r\n\t\tvar pu = new Vector3(), pv = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tif ( func.length < 3 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tvar sliceCount = slices + 1;\r\n\r\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\t\tvar v = i / stacks;\r\n\r\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\t\tvar u = j / slices;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tfunc( u, v, p0 );\r\n\t\t\t\tvertices.push( p0.x, p0.y, p0.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\t// approximate tangent vectors via finite differences\r\n\r\n\t\t\t\tif ( u - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u - EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u + EPS, v, p1 );\r\n\t\t\t\t\tpu.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( v - EPS >= 0 ) {\r\n\r\n\t\t\t\t\tfunc( u, v - EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p0, p1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfunc( u, v + EPS, p1 );\r\n\t\t\t\t\tpv.subVectors( p1, p0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// cross product of tangent vectors returns surface normal\r\n\r\n\t\t\t\tnormal.crossVectors( pu, pv ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u, v );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\t\tvar a = i * sliceCount + j;\r\n\t\t\t\tvar b = i * sliceCount + j + 1;\r\n\t\t\t\tvar c = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\t\tvar d = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\t\t// faces one and two\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;\r\n\r\n\t/**\r\n\t * @author clockworkgeek / https://github.com/clockworkgeek\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// PolyhedronGeometry\r\n\r\n\tfunction PolyhedronGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tPolyhedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tPolyhedronGeometry.prototype.constructor = PolyhedronGeometry;\r\n\r\n\t// PolyhedronBufferGeometry\r\n\r\n\tfunction PolyhedronBufferGeometry( vertices, indices, radius, detail ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'PolyhedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tdetail = detail || 0;\r\n\r\n\t\t// default buffer data\r\n\r\n\t\tvar vertexBuffer = [];\r\n\t\tvar uvBuffer = [];\r\n\r\n\t\t// the subdivision creates the vertex buffer data\r\n\r\n\t\tsubdivide( detail );\r\n\r\n\t\t// all vertices should lie on a conceptual sphere with a given radius\r\n\r\n\t\tapplyRadius( radius );\r\n\r\n\t\t// finally, create the uv data\r\n\r\n\t\tgenerateUVs();\r\n\r\n\t\t// build non-indexed geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\r\n\r\n\t\tif ( detail === 0 ) {\r\n\r\n\t\t\tthis.computeVertexNormals(); // flat normals\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.normalizeNormals(); // smooth normals\r\n\r\n\t\t}\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction subdivide( detail ) {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\r\n\r\n\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t// get the vertices of the face\r\n\r\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\r\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\r\n\r\n\t\t\t\t// perform subdivision\r\n\r\n\t\t\t\tsubdivideFace( a, b, c, detail );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction subdivideFace( a, b, c, detail ) {\r\n\r\n\t\t\tvar cols = Math.pow( 2, detail );\r\n\r\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\r\n\r\n\t\t\tvar v = [];\r\n\r\n\t\t\tvar i, j;\r\n\r\n\t\t\t// construct all of the vertices for this subdivision\r\n\r\n\t\t\tfor ( i = 0; i <= cols; i ++ ) {\r\n\r\n\t\t\t\tv[ i ] = [];\r\n\r\n\t\t\t\tvar aj = a.clone().lerp( c, i / cols );\r\n\t\t\t\tvar bj = b.clone().lerp( c, i / cols );\r\n\r\n\t\t\t\tvar rows = cols - i;\r\n\r\n\t\t\t\tfor ( j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// construct all of the faces\r\n\r\n\t\t\tfor ( i = 0; i < cols; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\r\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction applyRadius( radius ) {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\r\n\r\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\r\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\r\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tfor ( var i = 0; i < vertexBuffer.length; i += 3 ) {\r\n\r\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\r\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\r\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\r\n\r\n\t\t\t\tvar u = azimuth( vertex ) / 2 / Math.PI + 0.5;\r\n\t\t\t\tvar v = inclination( vertex ) / Math.PI + 0.5;\r\n\t\t\t\tuvBuffer.push( u, 1 - v );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcorrectUVs();\r\n\r\n\t\t\tcorrectSeam();\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctSeam() {\r\n\r\n\t\t\t// handle case when face straddles the seam, see #3269\r\n\r\n\t\t\tfor ( var i = 0; i < uvBuffer.length; i += 6 ) {\r\n\r\n\t\t\t\t// uv data of a single face\r\n\r\n\t\t\t\tvar x0 = uvBuffer[ i + 0 ];\r\n\t\t\t\tvar x1 = uvBuffer[ i + 2 ];\r\n\t\t\t\tvar x2 = uvBuffer[ i + 4 ];\r\n\r\n\t\t\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\t\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t\t\tif ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }\r\n\t\t\t\t\tif ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }\r\n\t\t\t\t\tif ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushVertex( vertex ) {\r\n\r\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getVertexByIndex( index, vertex ) {\r\n\r\n\t\t\tvar stride = index * 3;\r\n\r\n\t\t\tvertex.x = vertices[ stride + 0 ];\r\n\t\t\tvertex.y = vertices[ stride + 1 ];\r\n\t\t\tvertex.z = vertices[ stride + 2 ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUVs() {\r\n\r\n\t\t\tvar a = new Vector3();\r\n\t\t\tvar b = new Vector3();\r\n\t\t\tvar c = new Vector3();\r\n\r\n\t\t\tvar centroid = new Vector3();\r\n\r\n\t\t\tvar uvA = new Vector2();\r\n\t\t\tvar uvB = new Vector2();\r\n\t\t\tvar uvC = new Vector2();\r\n\r\n\t\t\tfor ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\r\n\r\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\r\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\r\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\r\n\r\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\r\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\r\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\r\n\r\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\r\n\r\n\t\t\t\tvar azi = azimuth( centroid );\r\n\r\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\r\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\r\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\r\n\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\r\n\r\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\t\tfunction azimuth( vector ) {\r\n\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Angle above the XZ plane.\r\n\r\n\t\tfunction inclination( vector ) {\r\n\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tPolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TetrahedronGeometry\r\n\r\n\tfunction TetrahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTetrahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTetrahedronGeometry.prototype.constructor = TetrahedronGeometry;\r\n\r\n\t// TetrahedronBufferGeometry\r\n\r\n\tfunction TetrahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'TetrahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tTetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tTetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// OctahedronGeometry\r\n\r\n\tfunction OctahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tOctahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tOctahedronGeometry.prototype.constructor = OctahedronGeometry;\r\n\r\n\t// OctahedronBufferGeometry\r\n\r\n\tfunction OctahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar vertices = [\r\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\r\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\r\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\r\n\t\t\t1, 3, 4,\t1, 4, 2\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'OctahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tOctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tOctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// IcosahedronGeometry\r\n\r\n\tfunction IcosahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tIcosahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tIcosahedronGeometry.prototype.constructor = IcosahedronGeometry;\r\n\r\n\t// IcosahedronBufferGeometry\r\n\r\n\tfunction IcosahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\r\n\t\t\t 0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\r\n\t\t\t t, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t 0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\r\n\t\t\t 1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\r\n\t\t\t 3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\r\n\t\t\t 4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'IcosahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tIcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tIcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Abe Pazos / https://hamoid.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// DodecahedronGeometry\r\n\r\n\tfunction DodecahedronGeometry( radius, detail ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tDodecahedronGeometry.prototype = Object.create( Geometry.prototype );\r\n\tDodecahedronGeometry.prototype.constructor = DodecahedronGeometry;\r\n\r\n\t// DodecahedronBufferGeometry\r\n\r\n\tfunction DodecahedronBufferGeometry( radius, detail ) {\r\n\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tvar r = 1 / t;\r\n\r\n\t\tvar vertices = [\r\n\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\r\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\r\n\t\t\t1, - 1, - 1, 1, - 1, 1,\r\n\t\t\t1, 1, - 1, 1, 1, 1,\r\n\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t 0, - r, - t, 0, - r, t,\r\n\t\t\t 0, r, - t, 0, r, t,\r\n\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t, 0, - r, t, 0,\r\n\t\t\t r, - t, 0, r, t, 0,\r\n\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t, 0, - r, t, 0, - r,\r\n\t\t\t- t, 0, r, t, 0, r\r\n\t\t];\r\n\r\n\t\tvar indices = [\r\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\r\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\r\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\r\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\r\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\r\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\r\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\r\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\r\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\r\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\r\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\r\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\r\n\t\t];\r\n\r\n\t\tPolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\t\tthis.type = 'DodecahedronBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tDodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );\r\n\tDodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode / https://github.com/oosmoxiecode\r\n\t * @author WestLangley / https://github.com/WestLangley\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author miningold / https://github.com/miningold\r\n\t * @author jonobr1 / https://github.com/jonobr1\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t */\r\n\r\n\t// TubeGeometry\r\n\r\n\tfunction TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\tif ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }\r\n\r\n\t\tvar bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = bufferGeometry.tangents;\r\n\t\tthis.normals = bufferGeometry.normals;\r\n\t\tthis.binormals = bufferGeometry.binormals;\r\n\r\n\t\t// create geometry\r\n\r\n\t\tthis.fromBufferGeometry( bufferGeometry );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTubeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTubeGeometry.prototype.constructor = TubeGeometry;\r\n\r\n\t// TubeBufferGeometry\r\n\r\n\tfunction TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TubeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed\r\n\t\t};\r\n\r\n\t\ttubularSegments = tubularSegments || 64;\r\n\t\tradius = radius || 1;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\tclosed = closed || false;\r\n\r\n\t\tvar frames = path.computeFrenetFrames( tubularSegments, closed );\r\n\r\n\t\t// expose internals\r\n\r\n\t\tthis.tangents = frames.tangents;\r\n\t\tthis.normals = frames.normals;\r\n\t\tthis.binormals = frames.binormals;\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar P = new Vector3();\r\n\r\n\t\tvar i, j;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\t\tvar indices = [];\r\n\r\n\t\t// create buffer data\r\n\r\n\t\tgenerateBufferData();\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction generateBufferData() {\r\n\r\n\t\t\tfor ( i = 0; i < tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tgenerateSegment( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\r\n\t\t\t// at the regular position on the given path\r\n\t\t\t//\r\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\r\n\r\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\r\n\r\n\t\t\t// uvs are generated in a separate function.\r\n\t\t\t// this makes it easy compute correct values for closed geometries\r\n\r\n\t\t\tgenerateUVs();\r\n\r\n\t\t\t// finally create faces\r\n\r\n\t\t\tgenerateIndices();\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateSegment( i ) {\r\n\r\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\r\n\r\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\r\n\r\n\t\t\t// retrieve corresponding normal and binormal\r\n\r\n\t\t\tvar N = frames.normals[ i ];\r\n\t\t\tvar B = frames.binormals[ i ];\r\n\r\n\t\t\t// generate normals and vertices for the current segment\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\tvar sin = Math.sin( v );\r\n\t\t\t\tvar cos = - Math.cos( v );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\r\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\r\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\r\n\t\t\t\tnormal.normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = P.x + radius * normal.x;\r\n\t\t\t\tvertex.y = P.y + radius * normal.y;\r\n\t\t\t\tvertex.z = P.z + radius * normal.z;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateIndices() {\r\n\r\n\t\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateUVs() {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\t\t\tuv.x = i / tubularSegments;\r\n\t\t\t\t\tuv.y = j / radialSegments;\r\n\r\n\t\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTubeBufferGeometry.prototype.constructor = TubeBufferGeometry;\r\n\r\n\tTubeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tdata.path = this.parameters.path.toJSON();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * based on http://www.blackpawn.com/texts/pqtorus/\r\n\t */\r\n\r\n\t// TorusKnotGeometry\r\n\r\n\tfunction TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tif ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }\r\n\r\n\t\tthis.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusKnotGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusKnotGeometry.prototype.constructor = TorusKnotGeometry;\r\n\r\n\t// TorusKnotBufferGeometry\r\n\r\n\tfunction TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\tp = p || 2;\r\n\t\tq = q || 3;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, j;\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar P1 = new Vector3();\r\n\t\tvar P2 = new Vector3();\r\n\r\n\t\tvar B = new Vector3();\r\n\t\tvar T = new Vector3();\r\n\t\tvar N = new Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t\t// calculate orthonormal basis\r\n\r\n\t\t\tT.subVectors( P2, P1 );\r\n\t\t\tN.addVectors( P2, P1 );\r\n\t\t\tB.crossVectors( T, N );\r\n\t\t\tN.crossVectors( B, T );\r\n\r\n\t\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\t\tB.normalize();\r\n\t\t\tN.normalize();\r\n\r\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t\t// now calculate the final vertex position.\r\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\r\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// this function calculates the current position on the torus curve\r\n\r\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\t\tvar cu = Math.cos( u );\r\n\t\t\tvar su = Math.sin( u );\r\n\t\t\tvar quOverP = q / p * u;\r\n\t\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tTorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;\r\n\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// TorusGeometry\r\n\r\n\tfunction TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTorusGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTorusGeometry.prototype.constructor = TorusGeometry;\r\n\r\n\t// TorusBufferGeometry\r\n\r\n\tfunction TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'TorusBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\ttube = tube || 0.4;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\t\tarc = arc || Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar center = new Vector3();\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( i / tubularSegments );\r\n\t\t\t\tuvs.push( j / radialSegments );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\r\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tTorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tTorusBufferGeometry.prototype.constructor = TorusBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * Port from https://github.com/mapbox/earcut (v2.1.5)\r\n\t */\r\n\r\n\tvar Earcut = {\r\n\r\n\t\ttriangulate: function ( data, holeIndices, dim ) {\r\n\r\n\t\t\tdim = dim || 2;\r\n\r\n\t\t\tvar hasHoles = holeIndices && holeIndices.length,\r\n\t\t\t\touterLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,\r\n\t\t\t\touterNode = linkedList( data, 0, outerLen, dim, true ),\r\n\t\t\t\ttriangles = [];\r\n\r\n\t\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }\r\n\r\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n\t\t\tif ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\r\n\r\n\t\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\t\t\tif ( data.length > 80 * dim ) {\r\n\r\n\t\t\t\tminX = maxX = data[ 0 ];\r\n\t\t\t\tminY = maxY = data[ 1 ];\r\n\r\n\t\t\t\tfor ( var i = dim; i < outerLen; i += dim ) {\r\n\r\n\t\t\t\t\tx = data[ i ];\r\n\t\t\t\t\ty = data[ i + 1 ];\r\n\t\t\t\t\tif ( x < minX ) { minX = x; }\r\n\t\t\t\t\tif ( y < minY ) { minY = y; }\r\n\t\t\t\t\tif ( x > maxX ) { maxX = x; }\r\n\t\t\t\t\tif ( y > maxY ) { maxY = y; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\t\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\r\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\treturn triangles;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// create a circular doubly linked list from polygon points in the specified winding order\r\n\tfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n\t\tvar i, last;\r\n\r\n\t\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n\t\t\tfor ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n\t\t}\r\n\r\n\t\tif ( last && equals( last, last.next ) ) {\r\n\r\n\t\t\tremoveNode( last );\r\n\t\t\tlast = last.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn last;\r\n\r\n\t}\r\n\r\n\t// eliminate colinear or duplicate points\r\n\tfunction filterPoints( start, end ) {\r\n\r\n\t\tif ( ! start ) { return start; }\r\n\t\tif ( ! end ) { end = start; }\r\n\r\n\t\tvar p = start,\r\n\t\t\tagain;\r\n\t\tdo {\r\n\r\n\t\t\tagain = false;\r\n\r\n\t\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tp = end = p.prev;\r\n\t\t\t\tif ( p === p.next ) { break; }\r\n\t\t\t\tagain = true;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tp = p.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t} while ( again || p !== end );\r\n\r\n\t\treturn end;\r\n\r\n\t}\r\n\r\n\t// main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\tfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\r\n\r\n\t\tif ( ! ear ) { return; }\r\n\r\n\t\t// interlink polygon nodes in z-order\r\n\t\tif ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\r\n\r\n\t\tvar stop = ear,\r\n\t\t\tprev, next;\r\n\r\n\t\t// iterate through ears, slicing them one by one\r\n\t\twhile ( ear.prev !== ear.next ) {\r\n\r\n\t\t\tprev = ear.prev;\r\n\t\t\tnext = ear.next;\r\n\r\n\t\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n\t\t\t\t// cut off the triangle\r\n\t\t\t\ttriangles.push( prev.i / dim );\r\n\t\t\t\ttriangles.push( ear.i / dim );\r\n\t\t\t\ttriangles.push( next.i / dim );\r\n\r\n\t\t\t\tremoveNode( ear );\r\n\r\n\t\t\t\t// skipping the next vertex leads to less sliver triangles\r\n\t\t\t\tear = next.next;\r\n\t\t\t\tstop = next.next;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tear = next;\r\n\r\n\t\t\t// if we looped through the whole remaining polygon and can't find any more ears\r\n\t\t\tif ( ear === stop ) {\r\n\r\n\t\t\t\t// try filtering points and slicing again\r\n\t\t\t\tif ( ! pass ) {\r\n\r\n\t\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n\t\t\t\t\t// if this didn't work, try curing all small self-intersections locally\r\n\r\n\t\t\t\t} else if ( pass === 1 ) {\r\n\r\n\t\t\t\t\tear = cureLocalIntersections( ear, triangles, dim );\r\n\t\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n\t\t\t\t\t// as a last resort, try splitting the remaining polygon into two\r\n\r\n\t\t\t\t} else if ( pass === 2 ) {\r\n\r\n\t\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// check whether a polygon node forms a valid ear with adjacent nodes\r\n\tfunction isEar( ear ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n\t\t// now make sure we don't have other points inside the potential ear\r\n\t\tvar p = ear.next.next;\r\n\r\n\t\twhile ( p !== ear.prev ) {\r\n\r\n\t\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n\t\tvar a = ear.prev,\r\n\t\t\tb = ear,\r\n\t\t\tc = ear.next;\r\n\r\n\t\tif ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n\t\t// triangle bbox; min & max are calculated like this for speed\r\n\t\tvar minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n\t\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n\t\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n\t\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n\t\t// z-order range for the current triangle bbox;\r\n\t\tvar minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n\t\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n\t\tvar p = ear.prevZ,\r\n\t\t\tn = ear.nextZ;\r\n\r\n\t\t// look for points inside the triangle in both directions\r\n\t\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\r\n\t\t\tn = n.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\t// look for remaining points in decreasing z-order\r\n\t\twhile ( p && p.z >= minZ ) {\r\n\r\n\t\t\tif ( p !== ear.prev && p !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n\t\t\t\tarea( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\t\t\tp = p.prevZ;\r\n\r\n\t\t}\r\n\r\n\t\t// look for remaining points in increasing z-order\r\n\t\twhile ( n && n.z <= maxZ ) {\r\n\r\n\t\t\tif ( n !== ear.prev && n !== ear.next &&\r\n\t\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\r\n\t\t\t\tarea( n.prev, n, n.next ) >= 0 ) { return false; }\r\n\t\t\tn = n.nextZ;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t// go through all polygon nodes and cure small local self-intersections\r\n\tfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n\t\tvar p = start;\r\n\t\tdo {\r\n\r\n\t\t\tvar a = p.prev,\r\n\t\t\t\tb = p.next.next;\r\n\r\n\t\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n\t\t\t\ttriangles.push( a.i / dim );\r\n\t\t\t\ttriangles.push( p.i / dim );\r\n\t\t\t\ttriangles.push( b.i / dim );\r\n\r\n\t\t\t\t// remove two nodes involved\r\n\t\t\t\tremoveNode( p );\r\n\t\t\t\tremoveNode( p.next );\r\n\r\n\t\t\t\tp = start = b;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\t// try splitting polygon into two and triangulate them independently\r\n\tfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n\t\t// look for a valid diagonal that divides the polygon into two\r\n\t\tvar a = start;\r\n\t\tdo {\r\n\r\n\t\t\tvar b = a.next.next;\r\n\t\t\twhile ( b !== a.prev ) {\r\n\r\n\t\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n\t\t\t\t\t// split the polygon in two by the diagonal\r\n\t\t\t\t\tvar c = splitPolygon( a, b );\r\n\r\n\t\t\t\t\t// filter colinear points around the cuts\r\n\t\t\t\t\ta = filterPoints( a, a.next );\r\n\t\t\t\t\tc = filterPoints( c, c.next );\r\n\r\n\t\t\t\t\t// run earcut on each half\r\n\t\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tb = b.next;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ta = a.next;\r\n\r\n\t\t} while ( a !== start );\r\n\r\n\t}\r\n\r\n\t// link every hole into the outer loop, producing a single-ring polygon without holes\r\n\tfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n\t\tvar queue = [],\r\n\t\t\ti, len, start, end, list;\r\n\r\n\t\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n\t\t\tstart = holeIndices[ i ] * dim;\r\n\t\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n\t\t\tlist = linkedList( data, start, end, dim, false );\r\n\t\t\tif ( list === list.next ) { list.steiner = true; }\r\n\t\t\tqueue.push( getLeftmost( list ) );\r\n\r\n\t\t}\r\n\r\n\t\tqueue.sort( compareX );\r\n\r\n\t\t// process holes from left to right\r\n\t\tfor ( i = 0; i < queue.length; i ++ ) {\r\n\r\n\t\t\teliminateHole( queue[ i ], outerNode );\r\n\t\t\touterNode = filterPoints( outerNode, outerNode.next );\r\n\r\n\t\t}\r\n\r\n\t\treturn outerNode;\r\n\r\n\t}\r\n\r\n\tfunction compareX( a, b ) {\r\n\r\n\t\treturn a.x - b.x;\r\n\r\n\t}\r\n\r\n\t// find a bridge between vertices that connects hole with an outer ring and and link it\r\n\tfunction eliminateHole( hole, outerNode ) {\r\n\r\n\t\touterNode = findHoleBridge( hole, outerNode );\r\n\t\tif ( outerNode ) {\r\n\r\n\t\t\tvar b = splitPolygon( outerNode, hole );\r\n\t\t\tfilterPoints( b, b.next );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\tfunction findHoleBridge( hole, outerNode ) {\r\n\r\n\t\tvar p = outerNode,\r\n\t\t\thx = hole.x,\r\n\t\t\thy = hole.y,\r\n\t\t\tqx = - Infinity,\r\n\t\t\tm;\r\n\r\n\t\t// find a segment intersected by a ray from the hole's leftmost point to the left;\r\n\t\t// segment's endpoint with lesser x will be potential connection point\r\n\t\tdo {\r\n\r\n\t\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n\t\t\t\tvar x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\t\t\t\tif ( x <= hx && x > qx ) {\r\n\r\n\t\t\t\t\tqx = x;\r\n\t\t\t\t\tif ( x === hx ) {\r\n\r\n\t\t\t\t\t\tif ( hy === p.y ) { return p; }\r\n\t\t\t\t\t\tif ( hy === p.next.y ) { return p.next; }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== outerNode );\r\n\r\n\t\tif ( ! m ) { return null; }\r\n\r\n\t\tif ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\r\n\r\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\r\n\t\t// if there are no points found, we have a valid connection;\r\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n\t\tvar stop = m,\r\n\t\t\tmx = m.x,\r\n\t\t\tmy = m.y,\r\n\t\t\ttanMin = Infinity,\r\n\t\t\ttan;\r\n\r\n\t\tp = m.next;\r\n\r\n\t\twhile ( p !== stop ) {\r\n\r\n\t\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n\t\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n\t\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n\t\t\t\tif ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\r\n\r\n\t\t\t\t\tm = p;\r\n\t\t\t\t\ttanMin = tan;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp = p.next;\r\n\r\n\t\t}\r\n\r\n\t\treturn m;\r\n\r\n\t}\r\n\r\n\t// interlink polygon nodes in z-order\r\n\tfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n\t\tvar p = start;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\r\n\t\t\tp.prevZ = p.prev;\r\n\t\t\tp.nextZ = p.next;\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\tp.prevZ.nextZ = null;\r\n\t\tp.prevZ = null;\r\n\r\n\t\tsortLinked( p );\r\n\r\n\t}\r\n\r\n\t// Simon Tatham's linked list merge sort algorithm\r\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\tfunction sortLinked( list ) {\r\n\r\n\t\tvar i, p, q, e, tail, numMerges, pSize, qSize,\r\n\t\t\tinSize = 1;\r\n\r\n\t\tdo {\r\n\r\n\t\t\tp = list;\r\n\t\t\tlist = null;\r\n\t\t\ttail = null;\r\n\t\t\tnumMerges = 0;\r\n\r\n\t\t\twhile ( p ) {\r\n\r\n\t\t\t\tnumMerges ++;\r\n\t\t\t\tq = p;\r\n\t\t\t\tpSize = 0;\r\n\t\t\t\tfor ( i = 0; i < inSize; i ++ ) {\r\n\r\n\t\t\t\t\tpSize ++;\r\n\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\tif ( ! q ) { break; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tqSize = inSize;\r\n\r\n\t\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n\t\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n\t\t\t\t\t\te = p;\r\n\t\t\t\t\t\tp = p.nextZ;\r\n\t\t\t\t\t\tpSize --;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\te = q;\r\n\t\t\t\t\t\tq = q.nextZ;\r\n\t\t\t\t\t\tqSize --;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( tail ) { tail.nextZ = e; }\r\n\t\t\t\t\telse { list = e; }\r\n\r\n\t\t\t\t\te.prevZ = tail;\r\n\t\t\t\t\ttail = e;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tp = q;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttail.nextZ = null;\r\n\t\t\tinSize *= 2;\r\n\r\n\t\t} while ( numMerges > 1 );\r\n\r\n\t\treturn list;\r\n\r\n\t}\r\n\r\n\t// z-order of a point given coords and inverse of the longer side of data bbox\r\n\tfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n\t\t// coords are transformed into non-negative 15-bit integer range\r\n\t\tx = 32767 * ( x - minX ) * invSize;\r\n\t\ty = 32767 * ( y - minY ) * invSize;\r\n\r\n\t\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n\t\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n\t\tx = ( x | ( x << 2 ) ) & 0x33333333;\r\n\t\tx = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n\t\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n\t\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n\t\ty = ( y | ( y << 2 ) ) & 0x33333333;\r\n\t\ty = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n\t\treturn x | ( y << 1 );\r\n\r\n\t}\r\n\r\n\t// find the leftmost node of a polygon ring\r\n\tfunction getLeftmost( start ) {\r\n\r\n\t\tvar p = start,\r\n\t\t\tleftmost = start;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== start );\r\n\r\n\t\treturn leftmost;\r\n\r\n\t}\r\n\r\n\t// check if a point lies within a convex triangle\r\n\tfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n\t\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n\t\t\t   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n\t\t\t   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n\t}\r\n\r\n\t// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\tfunction isValidDiagonal( a, b ) {\r\n\r\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\r\n\t\t\t   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\r\n\r\n\t}\r\n\r\n\t// signed area of a triangle\r\n\tfunction area( p, q, r ) {\r\n\r\n\t\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n\t}\r\n\r\n\t// check if two points are equal\r\n\tfunction equals( p1, p2 ) {\r\n\r\n\t\treturn p1.x === p2.x && p1.y === p2.y;\r\n\r\n\t}\r\n\r\n\t// check if two segments intersect\r\n\tfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n\t\tif ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||\r\n\t\t\t( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\r\n\t\treturn area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\r\n\t\t\t   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal intersects any polygon segments\r\n\tfunction intersectsPolygon( a, b ) {\r\n\r\n\t\tvar p = a;\r\n\t\tdo {\r\n\r\n\t\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n\t\t\t\t\tintersects( p, p.next, a, b ) ) { return true; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t// check if a polygon diagonal is locally inside the polygon\r\n\tfunction locallyInside( a, b ) {\r\n\r\n\t\treturn area( a.prev, a, a.next ) < 0 ?\r\n\t\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n\t\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n\t}\r\n\r\n\t// check if the middle point of a polygon diagonal is inside the polygon\r\n\tfunction middleInside( a, b ) {\r\n\r\n\t\tvar p = a,\r\n\t\t\tinside = false,\r\n\t\t\tpx = ( a.x + b.x ) / 2,\r\n\t\t\tpy = ( a.y + b.y ) / 2;\r\n\t\tdo {\r\n\r\n\t\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n\t\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\r\n\t\t\t\t{ inside = ! inside; }\r\n\t\t\tp = p.next;\r\n\r\n\t\t} while ( p !== a );\r\n\r\n\t\treturn inside;\r\n\r\n\t}\r\n\r\n\t// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\tfunction splitPolygon( a, b ) {\r\n\r\n\t\tvar a2 = new Node( a.i, a.x, a.y ),\r\n\t\t\tb2 = new Node( b.i, b.x, b.y ),\r\n\t\t\tan = a.next,\r\n\t\t\tbp = b.prev;\r\n\r\n\t\ta.next = b;\r\n\t\tb.prev = a;\r\n\r\n\t\ta2.next = an;\r\n\t\tan.prev = a2;\r\n\r\n\t\tb2.next = a2;\r\n\t\ta2.prev = b2;\r\n\r\n\t\tbp.next = b2;\r\n\t\tb2.prev = bp;\r\n\r\n\t\treturn b2;\r\n\r\n\t}\r\n\r\n\t// create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\tfunction insertNode( i, x, y, last ) {\r\n\r\n\t\tvar p = new Node( i, x, y );\r\n\r\n\t\tif ( ! last ) {\r\n\r\n\t\t\tp.prev = p;\r\n\t\t\tp.next = p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tp.next = last.next;\r\n\t\t\tp.prev = last;\r\n\t\t\tlast.next.prev = p;\r\n\t\t\tlast.next = p;\r\n\r\n\t\t}\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tfunction removeNode( p ) {\r\n\r\n\t\tp.next.prev = p.prev;\r\n\t\tp.prev.next = p.next;\r\n\r\n\t\tif ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\r\n\t\tif ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\r\n\r\n\t}\r\n\r\n\tfunction Node( i, x, y ) {\r\n\r\n\t\t// vertex index in coordinates array\r\n\t\tthis.i = i;\r\n\r\n\t\t// vertex coordinates\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\t// previous and next vertex nodes in a polygon ring\r\n\t\tthis.prev = null;\r\n\t\tthis.next = null;\r\n\r\n\t\t// z-order curve value\r\n\t\tthis.z = null;\r\n\r\n\t\t// previous and next nodes in z-order\r\n\t\tthis.prevZ = null;\r\n\t\tthis.nextZ = null;\r\n\r\n\t\t// indicates whether this is a steiner point\r\n\t\tthis.steiner = false;\r\n\r\n\t}\r\n\r\n\tfunction signedArea( data, start, end, dim ) {\r\n\r\n\t\tvar sum = 0;\r\n\t\tfor ( var i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n\t\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n\t\t\tj = i;\r\n\r\n\t\t}\r\n\r\n\t\treturn sum;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\r\n\tvar ShapeUtils = {\r\n\r\n\t\t// calculate area of the contour polygon\r\n\r\n\t\tarea: function ( contour ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\t\t\tvar a = 0.0;\r\n\r\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn a * 0.5;\r\n\r\n\t\t},\r\n\r\n\t\tisClockWise: function ( pts ) {\r\n\r\n\t\t\treturn ShapeUtils.area( pts ) < 0;\r\n\r\n\t\t},\r\n\r\n\t\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\r\n\t\t\tvar holeIndices = []; // array of hole indices\r\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\r\n\r\n\t\t\tremoveDupEndPts( contour );\r\n\t\t\taddContour( vertices, contour );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar holeIndex = contour.length;\r\n\r\n\t\t\tholes.forEach( removeDupEndPts );\r\n\r\n\t\t\tfor ( var i = 0; i < holes.length; i ++ ) {\r\n\r\n\t\t\t\tholeIndices.push( holeIndex );\r\n\t\t\t\tholeIndex += holes[ i ].length;\r\n\t\t\t\taddContour( vertices, holes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar triangles = Earcut.triangulate( vertices, holeIndices );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( var i = 0; i < triangles.length; i += 3 ) {\r\n\r\n\t\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn faces;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction removeDupEndPts( points ) {\r\n\r\n\t\tvar l = points.length;\r\n\r\n\t\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\tpoints.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction addContour( vertices, contour ) {\r\n\r\n\t\tfor ( var i = 0; i < contour.length; i ++ ) {\r\n\r\n\t\t\tvertices.push( contour[ i ].x );\r\n\t\t\tvertices.push( contour[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Creates extruded geometry from a path shape.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n\t *  depth: <float>, // Depth to extrude the shape\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n\t *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\r\n\t *  bevelOffset: <float>, // how far from shape outline does bevel start\r\n\t *  bevelSegments: <int>, // number of bevel layers\r\n\t *\r\n\t *  extrudePath: <THREE.Curve> // curve to extrude shape along\r\n\t *\r\n\t *  UVGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t */\r\n\r\n\t// ExtrudeGeometry\r\n\r\n\tfunction ExtrudeGeometry( shapes, options ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tExtrudeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tExtrudeGeometry.prototype.constructor = ExtrudeGeometry;\r\n\r\n\tExtrudeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t// ExtrudeBufferGeometry\r\n\r\n\tfunction ExtrudeBufferGeometry( shapes, options ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ExtrudeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\toptions: options\r\n\t\t};\r\n\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar verticesArray = [];\r\n\t\tvar uvArray = [];\r\n\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar shape = shapes[ i ];\r\n\t\t\taddShape( shape );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar placeholder = [];\r\n\r\n\t\t\t// options\r\n\r\n\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\r\n\r\n\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\r\n\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\r\n\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\r\n\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\r\n\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\t\t\tvar extrudePath = options.extrudePath;\r\n\r\n\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\r\n\r\n\t\t\t// deprecated options\r\n\r\n\t\t\tif ( options.amount !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\r\n\t\t\t\tdepth = options.amount;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar extrudePts, extrudeByPath = false;\r\n\t\t\tvar splineTube, binormal, normal, position2;\r\n\r\n\t\t\tif ( extrudePath ) {\r\n\r\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\t\t\textrudeByPath = true;\r\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t\t\t// SETUP TNB variables\r\n\r\n\t\t\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\r\n\r\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\t\t\tbinormal = new Vector3();\r\n\t\t\t\tnormal = new Vector3();\r\n\t\t\t\tposition2 = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Safeguards if bevels are not enabled\r\n\r\n\t\t\tif ( ! bevelEnabled ) {\r\n\r\n\t\t\t\tbevelSegments = 0;\r\n\t\t\t\tbevelThickness = 0;\r\n\t\t\t\tbevelSize = 0;\r\n\t\t\t\tbevelOffset = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Variables initialization\r\n\r\n\t\t\tvar ahole, h, hl; // looping of holes\r\n\r\n\t\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar vertices = shapePoints.shape;\r\n\t\t\tvar holes = shapePoints.holes;\r\n\r\n\t\t\tvar reverse = ! ShapeUtils.isClockWise( vertices );\r\n\r\n\t\t\tif ( reverse ) {\r\n\r\n\t\t\t\tvertices = vertices.reverse();\r\n\r\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t\t\t/* Vertices */\r\n\r\n\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\tvertices = vertices.concat( ahole );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction scalePt2( pt, vec, size ) {\r\n\r\n\t\t\t\tif ( ! vec ) { console.error( \"THREE.ExtrudeGeometry: vec does not exist\" ); }\r\n\r\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar b, bs, t, z,\r\n\t\t\t\tvert, vlen = vertices.length,\r\n\t\t\t\tface, flen = faces.length;\r\n\r\n\r\n\t\t\t// Find directions for point movement\r\n\r\n\r\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t\t//\r\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\r\n\r\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\r\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\r\n\t\t\t\tvar v_next_x = inNext.x - inPt.x,\r\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\r\n\r\n\t\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t\t\t// check for collinear edges\r\n\t\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not collinear\r\n\r\n\t\t\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\t\t\tvar sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\r\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\t\t\tvar direction_eq = false; // assumes: opposite\r\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\t\tv_trans_y = v_prev_x;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tvar contourMovements = [];\r\n\r\n\t\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\tif ( j === il ) { j = 0; }\r\n\t\t\t\tif ( k === il ) { k = 0; }\r\n\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesMovements = [],\r\n\t\t\t\toneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tahole = holes[ h ];\r\n\r\n\t\t\t\toneHoleMovements = [];\r\n\r\n\t\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\t\t\tif ( j === il ) { j = 0; }\r\n\t\t\t\t\tif ( k === il ) { k = 0; }\r\n\r\n\t\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\t\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbs = bevelSize + bevelOffset;\r\n\r\n\t\t\t// Back facing vertices\r\n\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Add stepped vertices...\r\n\t\t\t// Including front facing vertices\r\n\r\n\t\t\tvar s;\r\n\r\n\t\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// Add bevel segments planes\r\n\r\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\t\t\tt = b / bevelSegments;\r\n\t\t\t\tz = bevelThickness * Math.cos( t * Math.PI / 2 );\r\n\t\t\t\tbs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\r\n\r\n\t\t\t\t// contract shape\r\n\r\n\t\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// expand holes\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* Faces */\r\n\r\n\t\t\t// Top and bottom faces\r\n\r\n\t\t\tbuildLidFaces();\r\n\r\n\t\t\t// Sides faces\r\n\r\n\t\t\tbuildSideFaces();\r\n\r\n\r\n\t\t\t/////  Internal functions\r\n\r\n\t\t\tfunction buildLidFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\r\n\t\t\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Bottom faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Top faces\r\n\r\n\t\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Create faces for the z-sides of the shape\r\n\r\n\t\t\tfunction buildSideFaces() {\r\n\r\n\t\t\t\tvar start = verticesArray.length / 3;\r\n\t\t\t\tvar layeroffset = 0;\r\n\t\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\t\tlayeroffset += contour.length;\r\n\r\n\t\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\t\tahole = holes[ h ];\r\n\t\t\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t\t\t//, true\r\n\t\t\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\t\t\tvar j, k;\r\n\t\t\t\ti = contour.length;\r\n\r\n\t\t\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\t\t\tj = i;\r\n\t\t\t\t\tk = i - 1;\r\n\t\t\t\t\tif ( k < 0 ) { k = contour.length - 1; }\r\n\r\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\t\t\tvar s = 0,\r\n\t\t\t\t\t\tsl = steps + bevelSegments * 2;\r\n\r\n\t\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\t\t\tf4( a, b, c, d );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction v( x, y, z ) {\r\n\r\n\t\t\t\tplaceholder.push( x );\r\n\t\t\t\tplaceholder.push( y );\r\n\t\t\t\tplaceholder.push( z );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction f3( a, b, c ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction f4( a, b, c, d ) {\r\n\r\n\t\t\t\taddVertex( a );\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( d );\r\n\r\n\t\t\t\taddVertex( b );\r\n\t\t\t\taddVertex( c );\r\n\t\t\t\taddVertex( d );\r\n\r\n\r\n\t\t\t\tvar nextIndex = verticesArray.length / 3;\r\n\t\t\t\tvar uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\r\n\r\n\t\t\t\taddUV( uvs[ 0 ] );\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t\taddUV( uvs[ 1 ] );\r\n\t\t\t\taddUV( uvs[ 2 ] );\r\n\t\t\t\taddUV( uvs[ 3 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction addVertex( index ) {\r\n\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\r\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfunction addUV( vector2 ) {\r\n\r\n\t\t\t\tuvArray.push( vector2.x );\r\n\t\t\t\tuvArray.push( vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;\r\n\r\n\tExtrudeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\t\tvar options = this.parameters.options;\r\n\r\n\t\treturn toJSON( shapes, options, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar WorldUVGenerator = {\r\n\r\n\t\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew Vector2( a_x, a_y ),\r\n\t\t\t\tnew Vector2( b_x, b_y ),\r\n\t\t\t\tnew Vector2( c_x, c_y )\r\n\t\t\t];\r\n\r\n\t\t},\r\n\r\n\t\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\t\tvar a_x = vertices[ indexA * 3 ];\r\n\t\t\tvar a_y = vertices[ indexA * 3 + 1 ];\r\n\t\t\tvar a_z = vertices[ indexA * 3 + 2 ];\r\n\t\t\tvar b_x = vertices[ indexB * 3 ];\r\n\t\t\tvar b_y = vertices[ indexB * 3 + 1 ];\r\n\t\t\tvar b_z = vertices[ indexB * 3 + 2 ];\r\n\t\t\tvar c_x = vertices[ indexC * 3 ];\r\n\t\t\tvar c_y = vertices[ indexC * 3 + 1 ];\r\n\t\t\tvar c_z = vertices[ indexC * 3 + 2 ];\r\n\t\t\tvar d_x = vertices[ indexD * 3 ];\r\n\t\t\tvar d_y = vertices[ indexD * 3 + 1 ];\r\n\t\t\tvar d_z = vertices[ indexD * 3 + 2 ];\r\n\r\n\t\t\tif ( Math.abs( a_y - b_y ) < 0.01 ) {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_x, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_x, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_x, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_x, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew Vector2( a_y, 1 - a_z ),\r\n\t\t\t\t\tnew Vector2( b_y, 1 - b_z ),\r\n\t\t\t\t\tnew Vector2( c_y, 1 - c_z ),\r\n\t\t\t\t\tnew Vector2( d_y, 1 - d_z )\r\n\t\t\t\t];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t};\r\n\r\n\tfunction toJSON( shapes, options, data ) {\r\n\r\n\t\t//\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Text = 3D Text\r\n\t *\r\n\t * parameters = {\r\n\t *  font: <THREE.Font>, // font\r\n\t *\r\n\t *  size: <float>, // size of the text\r\n\t *  height: <float>, // thickness to extrude text\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into text bevel goes\r\n\t *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\r\n\t *  bevelOffset: <float> // how far from text outline does bevel start\r\n\t * }\r\n\t */\r\n\r\n\t// TextGeometry\r\n\r\n\tfunction TextGeometry( text, parameters ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'TextGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\ttext: text,\r\n\t\t\tparameters: parameters\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tTextGeometry.prototype = Object.create( Geometry.prototype );\r\n\tTextGeometry.prototype.constructor = TextGeometry;\r\n\r\n\t// TextBufferGeometry\r\n\r\n\tfunction TextBufferGeometry( text, parameters ) {\r\n\r\n\t\tparameters = parameters || {};\r\n\r\n\t\tvar font = parameters.font;\r\n\r\n\t\tif ( ! ( font && font.isFont ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\t\treturn new Geometry();\r\n\r\n\t\t}\r\n\r\n\t\tvar shapes = font.generateShapes( text, parameters.size );\r\n\r\n\t\t// translate parameters to ExtrudeGeometry API\r\n\r\n\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t\t// defaults\r\n\r\n\t\tif ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }\r\n\t\tif ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }\r\n\t\tif ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }\r\n\r\n\t\tExtrudeBufferGeometry.call( this, shapes, parameters );\r\n\r\n\t\tthis.type = 'TextBufferGeometry';\r\n\r\n\t}\r\n\r\n\tTextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );\r\n\tTextBufferGeometry.prototype.constructor = TextBufferGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// SphereGeometry\r\n\r\n\tfunction SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tSphereGeometry.prototype = Object.create( Geometry.prototype );\r\n\tSphereGeometry.prototype.constructor = SphereGeometry;\r\n\r\n\t// SphereBufferGeometry\r\n\r\n\tfunction SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'SphereBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\t\tvar thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\r\n\r\n\t\tvar ix, iy;\r\n\r\n\t\tvar index = 0;\r\n\t\tvar grid = [];\r\n\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tvar verticesRow = [];\r\n\r\n\t\t\tvar v = iy / heightSegments;\r\n\r\n\t\t\t// special case for the poles\r\n\r\n\t\t\tvar uOffset = 0;\r\n\r\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\r\n\r\n\t\t\t\tuOffset = 0.5 / widthSegments;\r\n\r\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\r\n\r\n\t\t\t\tuOffset = - 0.5 / widthSegments;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.copy( vertex ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tvar a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tvar b = grid[ iy ][ ix ];\r\n\t\t\t\tvar c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tvar d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tSphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tSphereBufferGeometry.prototype.constructor = SphereBufferGeometry;\r\n\r\n\t/**\r\n\t * @author Kaleb Murphy\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// RingGeometry\r\n\r\n\tfunction RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tRingGeometry.prototype = Object.create( Geometry.prototype );\r\n\tRingGeometry.prototype.constructor = RingGeometry;\r\n\r\n\t// RingBufferGeometry\r\n\r\n\tfunction RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'RingBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tinnerRadius = innerRadius || 0.5;\r\n\t\touterRadius = outerRadius || 1;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// some helper variables\r\n\r\n\t\tvar segment;\r\n\t\tvar radius = innerRadius;\r\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar j, i;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\t\t// values are generate from the inside of the ring to the outside\r\n\r\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// increase the radius for next row of vertices\r\n\r\n\t\t\tradius += radiusStep;\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t\tvar a = segment;\r\n\t\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tRingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tRingBufferGeometry.prototype.constructor = RingBufferGeometry;\r\n\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// LatheGeometry\r\n\r\n\tfunction LatheGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tLatheGeometry.prototype = Object.create( Geometry.prototype );\r\n\tLatheGeometry.prototype.constructor = LatheGeometry;\r\n\r\n\t// LatheBufferGeometry\r\n\r\n\tfunction LatheBufferGeometry( points, segments, phiStart, phiLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'LatheBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\r\n\t\tsegments = Math.floor( segments ) || 12;\r\n\t\tphiStart = phiStart || 0;\r\n\t\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\r\n\t\tphiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar base;\r\n\t\tvar inverseSegments = 1.0 / segments;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\t\tvar i, j;\r\n\r\n\t\t// generate vertices and uvs\r\n\r\n\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\t\tvar sin = Math.sin( phi );\r\n\t\t\tvar cos = Math.cos( phi );\r\n\r\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\t\tvertex.y = points[ j ].y;\r\n\t\t\t\tvertex.z = points[ j ].x * cos;\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = i / segments;\r\n\t\t\t\tuv.y = j / ( points.length - 1 );\r\n\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t\tvar a = base;\r\n\t\t\t\tvar b = base + points.length;\r\n\t\t\t\tvar c = base + points.length + 1;\r\n\t\t\t\tvar d = base + 1;\r\n\r\n\t\t\t\t// faces\r\n\r\n\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\t// generate normals\r\n\r\n\t\tthis.computeVertexNormals();\r\n\r\n\t\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\t\tif ( phiLength === Math.PI * 2 ) {\r\n\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\t\tvar n1 = new Vector3();\r\n\t\t\tvar n2 = new Vector3();\r\n\t\t\tvar n = new Vector3();\r\n\r\n\t\t\t// this is the buffer offset for the last line of vertices\r\n\r\n\t\t\tbase = segments * points.length * 3;\r\n\r\n\t\t\tfor ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t\t// select the normal of the vertex in the first line\r\n\r\n\t\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t\t// select the normal of the vertex in the last line\r\n\r\n\t\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t\t// average normals\r\n\r\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t\t// assign the new values to both normals\r\n\r\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tLatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tLatheBufferGeometry.prototype.constructor = LatheBufferGeometry;\r\n\r\n\t/**\r\n\t * @author jonobr1 / http://jonobr1.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// ShapeGeometry\r\n\r\n\tfunction ShapeGeometry( shapes, curveSegments ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeGeometry';\r\n\r\n\t\tif ( typeof curveSegments === 'object' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );\r\n\r\n\t\t\tcurveSegments = curveSegments.curveSegments;\r\n\r\n\t\t}\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tShapeGeometry.prototype = Object.create( Geometry.prototype );\r\n\tShapeGeometry.prototype.constructor = ShapeGeometry;\r\n\r\n\tShapeGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Geometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t// ShapeBufferGeometry\r\n\r\n\tfunction ShapeBufferGeometry( shapes, curveSegments ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'ShapeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tshapes: shapes,\r\n\t\t\tcurveSegments: curveSegments\r\n\t\t};\r\n\r\n\t\tcurveSegments = curveSegments || 12;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar groupStart = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\t// allow single and array values for \"shapes\" parameter\r\n\r\n\t\tif ( Array.isArray( shapes ) === false ) {\r\n\r\n\t\t\taddShape( shapes );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < shapes.length; i ++ ) {\r\n\r\n\t\t\t\taddShape( shapes[ i ] );\r\n\r\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\r\n\r\n\t\t\t\tgroupStart += groupCount;\r\n\t\t\t\tgroupCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\r\n\t\t// helper functions\r\n\r\n\t\tfunction addShape( shape ) {\r\n\r\n\t\t\tvar i, l, shapeHole;\r\n\r\n\t\t\tvar indexOffset = vertices.length / 3;\r\n\t\t\tvar points = shape.extractPoints( curveSegments );\r\n\r\n\t\t\tvar shapeVertices = points.shape;\r\n\t\t\tvar shapeHoles = points.holes;\r\n\r\n\t\t\t// check direction of vertices\r\n\r\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\r\n\r\n\t\t\t\tshapeVertices = shapeVertices.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\r\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\r\n\r\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\r\n\r\n\t\t\t// join vertices of inner and outer paths to a single array\r\n\r\n\t\t\tfor ( i = 0, l = shapeHoles.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tshapeHole = shapeHoles[ i ];\r\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// vertices, normals, uvs\r\n\r\n\t\t\tfor ( i = 0, l = shapeVertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar vertex = shapeVertices[ i ];\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\r\n\t\t\t\tnormals.push( 0, 0, 1 );\r\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// incides\r\n\r\n\t\t\tfor ( i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tvar a = face[ 0 ] + indexOffset;\r\n\t\t\t\tvar b = face[ 1 ] + indexOffset;\r\n\t\t\t\tvar c = face[ 2 ] + indexOffset;\r\n\r\n\t\t\t\tindices.push( a, b, c );\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;\r\n\r\n\tShapeBufferGeometry.prototype.toJSON = function () {\r\n\r\n\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\tvar shapes = this.parameters.shapes;\r\n\r\n\t\treturn toJSON$1( shapes, data );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction toJSON$1( shapes, data ) {\r\n\r\n\t\tdata.shapes = [];\r\n\r\n\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar shape = shapes[ i ];\r\n\r\n\t\t\t\tdata.shapes.push( shape.uuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.shapes.push( shapes.uuid );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction EdgesGeometry( geometry, thresholdAngle ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'EdgesGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tthresholdAngle: thresholdAngle\r\n\t\t};\r\n\r\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\t\t// buffer\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );\r\n\t\tvar edge = [ 0, 0 ], edges = {}, edge1, edge2;\r\n\t\tvar key, keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\t// prepare source geometry\r\n\r\n\t\tvar geometry2;\r\n\r\n\t\tif ( geometry.isBufferGeometry ) {\r\n\r\n\t\t\tgeometry2 = new Geometry();\r\n\t\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgeometry2 = geometry.clone();\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.mergeVertices();\r\n\t\tgeometry2.computeFaceNormals();\r\n\r\n\t\tvar sourceVertices = geometry2.vertices;\r\n\t\tvar faces = geometry2.faces;\r\n\r\n\t\t// now create a data structure where each entry represents an edge with its adjoining faces\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge1 = face[ keys[ j ] ];\r\n\t\t\t\tedge2 = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge[ 0 ] = Math.min( edge1, edge2 );\r\n\t\t\t\tedge[ 1 ] = Math.max( edge1, edge2 );\r\n\r\n\t\t\t\tkey = edge[ 0 ] + ',' + edge[ 1 ];\r\n\r\n\t\t\t\tif ( edges[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tedges[ key ].face2 = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// generate vertices\r\n\r\n\t\tfor ( key in edges ) {\r\n\r\n\t\t\tvar e = edges[ key ];\r\n\r\n\t\t\t// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\r\n\r\n\t\t\tif ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\t\tvar vertex = sourceVertices[ e.index1 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\tvertex = sourceVertices[ e.index2 ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t}\r\n\r\n\tEdgesGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tEdgesGeometry.prototype.constructor = EdgesGeometry;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\t// CylinderGeometry\r\n\r\n\tfunction CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCylinderGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCylinderGeometry.prototype.constructor = CylinderGeometry;\r\n\r\n\t// CylinderBufferGeometry\r\n\r\n\tfunction CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 1;\r\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 1;\r\n\t\theight = height || 1;\r\n\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar index = 0;\r\n\t\tvar indexArray = [];\r\n\t\tvar halfHeight = height / 2;\r\n\t\tvar groupStart = 0;\r\n\r\n\t\t// generate geometry\r\n\r\n\t\tgenerateTorso();\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tif ( radiusTop > 0 ) { generateCap( true ); }\r\n\t\t\tif ( radiusBottom > 0 ) { generateCap( false ); }\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction generateTorso() {\r\n\r\n\t\t\tvar x, y;\r\n\t\t\tvar normal = new Vector3();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\t// this will be used to calculate the normal\r\n\t\t\tvar slope = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\t\tvar indexRow = [];\r\n\r\n\t\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t\t// calculate the radius of the current row\r\n\r\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\t\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\r\n\t\t\t\t\t// vertex\r\n\r\n\t\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t\t// normal\r\n\r\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\r\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t\t// uv\r\n\r\n\t\t\t\t\tuvs.push( u, 1 - v );\r\n\r\n\t\t\t\t\t// save index of vertex in respective row\r\n\r\n\t\t\t\t\tindexRow.push( index ++ );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// now save vertices of the row in our index array\r\n\r\n\t\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t\t// we use the index array to access the correct indices\r\n\r\n\t\t\t\t\tvar a = indexArray[ y ][ x ];\r\n\t\t\t\t\tvar b = indexArray[ y + 1 ][ x ];\r\n\t\t\t\t\tvar c = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\t\tvar d = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// update group counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t\tfunction generateCap( top ) {\r\n\r\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\r\n\t\t\tvar uv = new Vector2();\r\n\t\t\tvar vertex = new Vector3();\r\n\r\n\t\t\tvar groupCount = 0;\r\n\r\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t\t// save the index of the first center vertex\r\n\t\t\tcenterIndexStart = index;\r\n\r\n\t\t\t// first we generate the center vertex data of the cap.\r\n\t\t\t// because the geometry needs one set of uvs per face,\r\n\t\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// save the index of the last center vertex\r\n\r\n\t\t\tcenterIndexEnd = index;\r\n\r\n\t\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\t\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\t\tvar cosTheta = Math.cos( theta );\r\n\t\t\t\tvar sinTheta = Math.sin( theta );\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormals.push( 0, sign, 0 );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\t\t// increase index\r\n\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// generate indices\r\n\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar c = centerIndexStart + x;\r\n\t\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t\t// face top\r\n\r\n\t\t\t\t\tindices.push( i, i + 1, c );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// face bottom\r\n\r\n\t\t\t\t\tindices.push( i + 1, i, c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroupCount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tCylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\t// ConeGeometry\r\n\r\n\tfunction ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeGeometry.prototype = Object.create( CylinderGeometry.prototype );\r\n\tConeGeometry.prototype.constructor = ConeGeometry;\r\n\r\n\t// ConeBufferGeometry\r\n\r\n\tfunction ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\t\tCylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\r\n\r\n\t\tthis.type = 'ConeBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );\r\n\tConeBufferGeometry.prototype.constructor = ConeBufferGeometry;\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t * @author hughes\r\n\t */\r\n\r\n\t// CircleGeometry\r\n\r\n\tfunction CircleGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tthis.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\r\n\t}\r\n\r\n\tCircleGeometry.prototype = Object.create( Geometry.prototype );\r\n\tCircleGeometry.prototype.constructor = CircleGeometry;\r\n\r\n\t// CircleBufferGeometry\r\n\r\n\tfunction CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'CircleBufferGeometry';\r\n\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\tradius = radius || 1;\r\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\t\t// buffers\r\n\r\n\t\tvar indices = [];\r\n\t\tvar vertices = [];\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tvar i, s;\r\n\t\tvar vertex = new Vector3();\r\n\t\tvar uv = new Vector2();\r\n\r\n\t\t// center point\r\n\r\n\t\tvertices.push( 0, 0, 0 );\r\n\t\tnormals.push( 0, 0, 1 );\r\n\t\tuvs.push( 0.5, 0.5 );\r\n\r\n\t\tfor ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {\r\n\r\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\r\n\t\t\tnormals.push( 0, 0, 1 );\r\n\r\n\t\t\t// uvs\r\n\r\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tCircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );\r\n\tCircleBufferGeometry.prototype.constructor = CircleBufferGeometry;\r\n\r\n\r\n\r\n\tvar Geometries = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tWireframeGeometry: WireframeGeometry,\r\n\t\tParametricGeometry: ParametricGeometry,\r\n\t\tParametricBufferGeometry: ParametricBufferGeometry,\r\n\t\tTetrahedronGeometry: TetrahedronGeometry,\r\n\t\tTetrahedronBufferGeometry: TetrahedronBufferGeometry,\r\n\t\tOctahedronGeometry: OctahedronGeometry,\r\n\t\tOctahedronBufferGeometry: OctahedronBufferGeometry,\r\n\t\tIcosahedronGeometry: IcosahedronGeometry,\r\n\t\tIcosahedronBufferGeometry: IcosahedronBufferGeometry,\r\n\t\tDodecahedronGeometry: DodecahedronGeometry,\r\n\t\tDodecahedronBufferGeometry: DodecahedronBufferGeometry,\r\n\t\tPolyhedronGeometry: PolyhedronGeometry,\r\n\t\tPolyhedronBufferGeometry: PolyhedronBufferGeometry,\r\n\t\tTubeGeometry: TubeGeometry,\r\n\t\tTubeBufferGeometry: TubeBufferGeometry,\r\n\t\tTorusKnotGeometry: TorusKnotGeometry,\r\n\t\tTorusKnotBufferGeometry: TorusKnotBufferGeometry,\r\n\t\tTorusGeometry: TorusGeometry,\r\n\t\tTorusBufferGeometry: TorusBufferGeometry,\r\n\t\tTextGeometry: TextGeometry,\r\n\t\tTextBufferGeometry: TextBufferGeometry,\r\n\t\tSphereGeometry: SphereGeometry,\r\n\t\tSphereBufferGeometry: SphereBufferGeometry,\r\n\t\tRingGeometry: RingGeometry,\r\n\t\tRingBufferGeometry: RingBufferGeometry,\r\n\t\tPlaneGeometry: PlaneGeometry,\r\n\t\tPlaneBufferGeometry: PlaneBufferGeometry,\r\n\t\tLatheGeometry: LatheGeometry,\r\n\t\tLatheBufferGeometry: LatheBufferGeometry,\r\n\t\tShapeGeometry: ShapeGeometry,\r\n\t\tShapeBufferGeometry: ShapeBufferGeometry,\r\n\t\tExtrudeGeometry: ExtrudeGeometry,\r\n\t\tExtrudeBufferGeometry: ExtrudeBufferGeometry,\r\n\t\tEdgesGeometry: EdgesGeometry,\r\n\t\tConeGeometry: ConeGeometry,\r\n\t\tConeBufferGeometry: ConeBufferGeometry,\r\n\t\tCylinderGeometry: CylinderGeometry,\r\n\t\tCylinderBufferGeometry: CylinderBufferGeometry,\r\n\t\tCircleGeometry: CircleGeometry,\r\n\t\tCircleBufferGeometry: CircleBufferGeometry,\r\n\t\tBoxGeometry: BoxGeometry,\r\n\t\tBoxBufferGeometry: BoxBufferGeometry\r\n\t});\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <THREE.Color>\r\n\t * }\r\n\t */\r\n\r\n\tfunction ShadowMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'ShadowMaterial';\r\n\r\n\t\tthis.color = new Color( 0x000000 );\r\n\t\tthis.transparent = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tShadowMaterial.prototype = Object.create( Material.prototype );\r\n\tShadowMaterial.prototype.constructor = ShadowMaterial;\r\n\r\n\tShadowMaterial.prototype.isShadowMaterial = true;\r\n\r\n\tShadowMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction RawShaderMaterial( parameters ) {\r\n\r\n\t\tShaderMaterial.call( this, parameters );\r\n\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\r\n\t}\r\n\r\n\tRawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );\r\n\tRawShaderMaterial.prototype.constructor = RawShaderMaterial;\r\n\r\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  roughness: <float>,\r\n\t *  metalness: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  roughnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  metalnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  envMapIntensity: <float>\r\n\t *\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshStandardMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 0.5;\r\n\t\tthis.metalness = 0.5;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.roughnessMap = null;\r\n\r\n\t\tthis.metalnessMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapIntensity = 1.0;\r\n\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshStandardMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\r\n\r\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\r\n\r\n\tMeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'STANDARD': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  reflectivity: <float>\r\n\t *  clearcoat: <float>\r\n\t *  clearcoatRoughness: <float>\r\n\t *\r\n\t *  sheen: <Color>\r\n\t *\r\n\t *  clearcoatNormalScale: <Vector2>,\r\n\t *  clearcoatNormalMap: new THREE.Texture( <Image> ),\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhysicalMaterial( parameters ) {\r\n\r\n\t\tMeshStandardMaterial.call( this );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n\t\tthis.clearcoat = 0.0;\r\n\t\tthis.clearcoatRoughness = 0.0;\r\n\r\n\t\tthis.sheen = null; // null will disable sheen bsdf\r\n\r\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\r\n\t\tthis.clearcoatNormalMap = null;\r\n\r\n\t\tthis.transparency = 0.0;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );\r\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\r\n\r\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\r\n\r\n\tMeshPhysicalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshStandardMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = {\r\n\r\n\t\t\t'STANDARD': '',\r\n\t\t\t'PHYSICAL': ''\r\n\r\n\t\t};\r\n\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\r\n\t\tthis.clearcoat = source.clearcoat;\r\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\r\n\r\n\t\tif ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }\r\n\t\telse { this.sheen = null; }\r\n\r\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\r\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\r\n\r\n\t\tthis.transparency = source.transparency;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  specular: <hex>,\r\n\t *  shininess: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.MultiplyOperation,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshPhongMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshPhongMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshPhongMaterial.prototype.constructor = MeshPhongMaterial;\r\n\r\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\r\n\r\n\tMeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author takahirox / http://github.com/takahirox\r\n\t *\r\n\t * parameters = {\r\n\t *  gradientMap: new THREE.Texture( <Image> )\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshToonMaterial( parameters ) {\r\n\r\n\t\tMeshPhongMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'TOON': '' };\r\n\r\n\t\tthis.type = 'MeshToonMaterial';\r\n\r\n\t\tthis.gradientMap = null;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );\r\n\tMeshToonMaterial.prototype.constructor = MeshToonMaterial;\r\n\r\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\r\n\r\n\tMeshToonMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMeshPhongMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.gradientMap = source.gradientMap;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshNormalMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\tthis.fog = false;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshNormalMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshNormalMaterial.prototype.constructor = MeshNormalMaterial;\r\n\r\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\r\n\r\n\tMeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshLambertMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\tthis.emissive = new Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\r\n\t\tthis.specularMap = null;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshLambertMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshLambertMaterial.prototype.constructor = MeshLambertMaterial;\r\n\r\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\r\n\r\n\tMeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  matcap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalMapType: THREE.TangentSpaceNormalMap,\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>\r\n\t * }\r\n\t */\r\n\r\n\tfunction MeshMatcapMaterial( parameters ) {\r\n\r\n\t\tMaterial.call( this );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.type = 'MeshMatcapMaterial';\r\n\r\n\t\tthis.color = new Color( 0xffffff ); // diffuse\r\n\r\n\t\tthis.matcap = null;\r\n\r\n\t\tthis.map = null;\r\n\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\t\tthis.normalScale = new Vector2( 1, 1 );\r\n\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tMeshMatcapMaterial.prototype = Object.create( Material.prototype );\r\n\tMeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;\r\n\r\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\r\n\r\n\tMeshMatcapMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.defines = { 'MATCAP': '' };\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.matcap = source.matcap;\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalMapType = source.normalMapType;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *\r\n\t *  scale: <float>,\r\n\t *  dashSize: <float>,\r\n\t *  gapSize: <float>\r\n\t * }\r\n\t */\r\n\r\n\tfunction LineDashedMaterial( parameters ) {\r\n\r\n\t\tLineBasicMaterial.call( this );\r\n\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tLineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );\r\n\tLineDashedMaterial.prototype.constructor = LineDashedMaterial;\r\n\r\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\r\n\r\n\tLineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\t\tLineBasicMaterial.prototype.copy.call( this, source );\r\n\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Materials = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tShadowMaterial: ShadowMaterial,\r\n\t\tSpriteMaterial: SpriteMaterial,\r\n\t\tRawShaderMaterial: RawShaderMaterial,\r\n\t\tShaderMaterial: ShaderMaterial,\r\n\t\tPointsMaterial: PointsMaterial,\r\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\r\n\t\tMeshStandardMaterial: MeshStandardMaterial,\r\n\t\tMeshPhongMaterial: MeshPhongMaterial,\r\n\t\tMeshToonMaterial: MeshToonMaterial,\r\n\t\tMeshNormalMaterial: MeshNormalMaterial,\r\n\t\tMeshLambertMaterial: MeshLambertMaterial,\r\n\t\tMeshDepthMaterial: MeshDepthMaterial,\r\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\r\n\t\tMeshBasicMaterial: MeshBasicMaterial,\r\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\r\n\t\tLineDashedMaterial: LineDashedMaterial,\r\n\t\tLineBasicMaterial: LineBasicMaterial,\r\n\t\tMaterial: Material\r\n\t});\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tvar AnimationUtils = {\r\n\r\n\t\t// same as Array.prototype.slice, but also works on typed arrays\r\n\t\tarraySlice: function ( array, from, to ) {\r\n\r\n\t\t\tif ( AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\r\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\r\n\t\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array.slice( from, to );\r\n\r\n\t\t},\r\n\r\n\t\t// converts an array to a specific type\r\n\t\tconvertArray: function ( array, type, forceClone ) {\r\n\r\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t! forceClone && array.constructor === type ) { return array; }\r\n\r\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t\t},\r\n\r\n\t\tisTypedArray: function ( object ) {\r\n\r\n\t\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t\t},\r\n\r\n\t\t// returns an array by which times and values can be sorted\r\n\t\tgetKeyframeOrder: function ( times ) {\r\n\r\n\t\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar n = times.length;\r\n\t\t\tvar result = new Array( n );\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }\r\n\r\n\t\t\tresult.sort( compareTime );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\t\tsortedArray: function ( values, stride, order ) {\r\n\r\n\t\t\tvar nValues = values.length;\r\n\t\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// function for parsing AOS keyframe formats\r\n\t\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( key === undefined ) { return; } // no data\r\n\r\n\t\t\tvar value = key[ valuePropertyName ];\r\n\t\t\tif ( value === undefined ) { return; } // no data\r\n\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else if ( value.toArray !== undefined ) {\r\n\r\n\t\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// otherwise push as-is\r\n\r\n\t\t\t\tdo {\r\n\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t\t} while ( key !== undefined );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps ) {\r\n\r\n\t\t\tfps = fps || 30;\r\n\r\n\t\t\tvar clip = sourceClip.clone();\r\n\r\n\t\t\tclip.name = name;\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tvar track = clip.tracks[ i ];\r\n\t\t\t\tvar valueSize = track.getValueSize();\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tfor ( var j = 0; j < track.times.length; ++ j ) {\r\n\r\n\t\t\t\t\tvar frame = track.times[ j ] * fps;\r\n\r\n\t\t\t\t\tif ( frame < startFrame || frame >= endFrame ) { continue; }\r\n\r\n\t\t\t\t\ttimes.push( track.times[ j ] );\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < valueSize; ++ k ) {\r\n\r\n\t\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( times.length === 0 ) { continue; }\r\n\r\n\t\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\r\n\t\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\r\n\r\n\t\t\t\ttracks.push( track );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip.tracks = tracks;\r\n\r\n\t\t\t// find minimum .times value across all tracks in the trimmed clip\r\n\r\n\t\t\tvar minStartTime = Infinity;\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\r\n\r\n\t\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// shift all tracks such that clip begins at t=0\r\n\r\n\t\t\tfor ( var i = 0; i < clip.tracks.length; ++ i ) {\r\n\r\n\t\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tclip.resetDuration();\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Abstract base class of interpolants over parametric samples.\r\n\t *\r\n\t * The parameter domain is one dimensional, typically the time or a path\r\n\t * along a curve defined by the data.\r\n\t *\r\n\t * The sample values can have any dimensionality and derived classes may\r\n\t * apply special interpretations to the data.\r\n\t *\r\n\t * This class provides the interval seek in a Template Method, deferring\r\n\t * the actual interpolation to derived classes.\r\n\t *\r\n\t * Time complexity is O(1) for linear access crossing at most two points\r\n\t * and O(log N) for random access, where N is the number of positions.\r\n\t *\r\n\t * References:\r\n\t *\r\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\r\n\t}\r\n\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\tevaluate: function ( t ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\t\tt1 = pp[ i1 ],\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\tvalidate_interval: {\r\n\r\n\t\t\t\tseek: {\r\n\r\n\t\t\t\t\tvar right;\r\n\r\n\t\t\t\t\tlinear_scan: {\r\n\r\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\r\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) { break forward_scan; }\r\n\r\n\t\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\r\n\r\n\t\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//- slower code:\r\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ; ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) { break; } // this loop\r\n\r\n\t\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t\t// binary search\r\n\r\n\t\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tt1 = pp[ i1 ];\r\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // seek\r\n\r\n\t\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t\t} // validate_interval\r\n\r\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t\t},\r\n\r\n\t\tsettings: null, // optional, subclass-specific settings structure\r\n\t\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t\t// --- Protected interface\r\n\r\n\t\tDefaultSettings_: {},\r\n\r\n\t\tgetSettings_: function () {\r\n\r\n\t\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t\t},\r\n\r\n\t\tcopySampleValue_: function ( index ) {\r\n\r\n\t\t\t// copies a sample value to the result buffer\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = index * stride;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t},\r\n\r\n\t\t// Template methods for derived classes:\r\n\r\n\t\tinterpolate_: function ( /* i1, t0, t, t1 */ ) {\r\n\r\n\t\t\tthrow new Error( 'call to abstract method' );\r\n\t\t\t// implementations shall return this.resultBuffer\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( /* i1, t0, t1 */ ) {\r\n\r\n\t\t\t// empty\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( Interpolant.prototype, {\r\n\r\n\t\t//( 0, t, t0 ), returns this.resultBuffer\r\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Fast and simple cubic spline interpolant.\r\n\t *\r\n\t * It was derived from a Hermitian construction setting the first derivative\r\n\t * at each sample position to the linear slope between neighboring positions\r\n\t * over their parameter interval.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t\tthis._weightPrev = - 0;\r\n\t\tthis._offsetPrev = - 0;\r\n\t\tthis._weightNext = - 0;\r\n\t\tthis._offsetNext = - 0;\r\n\r\n\t}\r\n\r\n\tCubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: CubicInterpolant,\r\n\r\n\t\tDefaultSettings_: {\r\n\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\r\n\t\t},\r\n\r\n\t\tintervalChanged_: function ( i1, t0, t1 ) {\r\n\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\tiPrev = i1 - 2,\r\n\t\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\t\tcase ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase WrapAroundEnding:\r\n\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\t\tstride = this.valueSize;\r\n\r\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\t\tthis._offsetPrev = iPrev * stride;\r\n\t\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t\t},\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tpp = p * p,\r\n\t\t\t\tppp = pp * p;\r\n\r\n\t\t\t// evaluate polynomials\r\n\r\n\t\t\tvar sP = - wP * ppp + 2 * wP * pp - wP * p;\r\n\t\t\tvar s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\r\n\t\t\tvar s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\r\n\t\t\tvar sN = wN * ppp - wN * pp;\r\n\r\n\t\t\t// combine data linearly\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: LinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset1 = i1 * stride,\r\n\t\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Interpolant that evaluates to the sample value at the position preceeding\r\n\t * the parameter.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tDiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: DiscreteInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1 /*, t0, t, t1 */ ) {\r\n\r\n\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A timed sequence of keyframes for a specific property.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction KeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tif ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }\r\n\t\tif ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\t}\r\n\r\n\t// Static methods\r\n\r\n\tObject.assign( KeyframeTrack, {\r\n\r\n\t\t// Serialization (in static context, because of constructor invocation\r\n\t\t// and automatic invocation of .toJSON):\r\n\r\n\t\ttoJSON: function ( track ) {\r\n\r\n\t\t\tvar trackType = track.constructor;\r\n\r\n\t\t\tvar json;\r\n\r\n\t\t\t// derived classes can define a static toJSON method\r\n\t\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\t\tjson = {\r\n\r\n\t\t\t\t\t'name': track.name,\r\n\t\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( KeyframeTrack.prototype, {\r\n\r\n\t\tconstructor: KeyframeTrack,\r\n\r\n\t\tTimeBufferType: Float32Array,\r\n\r\n\t\tValueBufferType: Float32Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodDiscrete: function ( result ) {\r\n\r\n\t\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: function ( result ) {\r\n\r\n\t\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tsetInterpolation: function ( interpolation ) {\r\n\r\n\t\t\tvar factoryMethod;\r\n\r\n\t\t\tswitch ( interpolation ) {\r\n\r\n\t\t\t\tcase InterpolateDiscrete:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateLinear:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase InterpolateSmooth:\r\n\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetInterpolation: function () {\r\n\r\n\t\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\t\treturn InterpolateDiscrete;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\t\treturn InterpolateLinear;\r\n\r\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\t\treturn InterpolateSmooth;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetValueSize: function () {\r\n\r\n\t\t\treturn this.values.length / this.times.length;\r\n\r\n\t\t},\r\n\r\n\t\t// move all keyframes either forwards or backwards in time\r\n\t\tshift: function ( timeOffset ) {\r\n\r\n\t\t\tif ( timeOffset !== 0.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\t\tscale: function ( timeScale ) {\r\n\r\n\t\t\tif ( timeScale !== 1.0 ) {\r\n\r\n\t\t\t\tvar times = this.times;\r\n\r\n\t\t\t\tfor ( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\t\ttrim: function ( startTime, endTime ) {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tnKeys = times.length,\r\n\t\t\t\tfrom = 0,\r\n\t\t\t\tto = nKeys - 1;\r\n\r\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\r\n\r\n\t\t\t\t++ from;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\r\n\r\n\t\t\t\t-- to;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\t\tif ( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\t\tif ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }\r\n\r\n\t\t\t\tvar stride = this.getValueSize();\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tvar valueSize = this.getValueSize();\r\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\r\n\t\t\t\tnKeys = times.length;\r\n\r\n\t\t\tif ( nKeys === 0 ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\r\n\t\t\t\tvalid = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar prevTime = null;\r\n\r\n\t\t\tfor ( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tprevTime = currTime;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( values !== undefined ) {\r\n\r\n\t\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\r\n\t\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\t// removes equivalent sequential keys as common in morph target sequences\r\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\t\toptimize: function () {\r\n\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\t\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\r\n\r\n\t\t\t\twriteIndex = 1,\r\n\t\t\t\tlastIndex = times.length - 1;\r\n\r\n\t\t\tfor ( var i = 1; i < lastIndex; ++ i ) {\r\n\r\n\t\t\t\tvar keep = false;\r\n\r\n\t\t\t\tvar time = times[ i ];\r\n\t\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t\tif ( ! smoothInterpolation ) {\r\n\r\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\r\n\t\t\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// in-place compaction\r\n\r\n\t\t\t\tif ( keep ) {\r\n\r\n\t\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// flush last keyframe (compaction looks ahead)\r\n\r\n\t\t\tif ( lastIndex > 0 ) {\r\n\r\n\t\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\r\n\r\n\t\t\t\tfor ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\tvar times = AnimationUtils.arraySlice( this.times, 0 );\r\n\t\t\tvar values = AnimationUtils.arraySlice( this.values, 0 );\r\n\r\n\t\t\tvar TypedKeyframeTrack = this.constructor;\r\n\t\t\tvar track = new TypedKeyframeTrack( this.name, times, values );\r\n\r\n\t\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\r\n\t\t\ttrack.createInterpolant = this.createInterpolant;\r\n\r\n\t\t\treturn track;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of Boolean keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction BooleanKeyframeTrack( name, times, values ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values );\r\n\r\n\t}\r\n\r\n\tBooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: BooleanKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'bool',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t\t// Note: Actually this track could have a optimized / compressed\r\n\t\t// representation of a single value and a custom interpolant that\r\n\t\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of keyframe values that represent color.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction ColorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: ColorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'color'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t\t// Note: Very basic implementation and nothing special yet.\r\n\t\t// However, this is the place for color space parameterization.\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of numeric keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction NumberKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tNumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: NumberKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'number'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * Spherical linear unit quaternion interpolant.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\t\tInterpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\t}\r\n\r\n\tQuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {\r\n\r\n\t\tconstructor: QuaternionLinearInterpolant,\r\n\r\n\t\tinterpolate_: function ( i1, t0, t, t1 ) {\r\n\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toffset = i1 * stride,\r\n\r\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of quaternion keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction QuaternionKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tQuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: QuaternionKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'quaternion',\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\tDefaultInterpolation: InterpolateLinear,\r\n\r\n\t\tInterpolantFactoryMethodLinear: function ( result ) {\r\n\r\n\t\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\r\n\r\n\t\t},\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Strings\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction StringKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tStringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: StringKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'string',\r\n\t\tValueBufferType: Array,\r\n\r\n\t\tDefaultInterpolation: InterpolateDiscrete,\r\n\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A Track of vectored keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction VectorKeyframeTrack( name, times, values, interpolation ) {\r\n\r\n\t\tKeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n\t}\r\n\r\n\tVectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {\r\n\r\n\t\tconstructor: VectorKeyframeTrack,\r\n\r\n\t\tValueTypeName: 'vector'\r\n\r\n\t\t// ValueBufferType is inherited\r\n\r\n\t\t// DefaultInterpolation is inherited\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Reusable set of Tracks that represent an animation.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\r\n\tfunction AnimationClip( name, duration, tracks ) {\r\n\r\n\t\tthis.name = name;\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = ( duration !== undefined ) ? duration : - 1;\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\r\n\t\t\tthis.resetDuration();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTrackTypeForValueTypeName( typeName ) {\r\n\r\n\t\tswitch ( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase 'scalar':\r\n\t\t\tcase 'double':\r\n\t\t\tcase 'float':\r\n\t\t\tcase 'number':\r\n\t\t\tcase 'integer':\r\n\r\n\t\t\t\treturn NumberKeyframeTrack;\r\n\r\n\t\t\tcase 'vector':\r\n\t\t\tcase 'vector2':\r\n\t\t\tcase 'vector3':\r\n\t\t\tcase 'vector4':\r\n\r\n\t\t\t\treturn VectorKeyframeTrack;\r\n\r\n\t\t\tcase 'color':\r\n\r\n\t\t\t\treturn ColorKeyframeTrack;\r\n\r\n\t\t\tcase 'quaternion':\r\n\r\n\t\t\t\treturn QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase 'bool':\r\n\t\t\tcase 'boolean':\r\n\r\n\t\t\t\treturn BooleanKeyframeTrack;\r\n\r\n\t\t\tcase 'string':\r\n\r\n\t\t\t\treturn StringKeyframeTrack;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\r\n\r\n\t}\r\n\r\n\tfunction parseKeyframeTrack( json ) {\r\n\r\n\t\tif ( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume a constructor compatible with the base\r\n\t\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationClip, {\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tjsonTracks = json.tracks,\r\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( clip ) {\r\n\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\t\tvar json = {\r\n\r\n\t\t\t\t'name': clip.name,\r\n\t\t\t\t'duration': clip.duration,\r\n\t\t\t\t'tracks': tracks,\r\n\t\t\t\t'uuid': clip.uuid\r\n\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn json;\r\n\r\n\t\t},\r\n\r\n\t\tCreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder( times );\r\n\t\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t\t// last frame as well for perfect loop.\r\n\t\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttracks.push(\r\n\t\t\t\t\tnew NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( name, - 1, tracks );\r\n\r\n\t\t},\r\n\r\n\t\tfindByName: function ( objectOrClipArray, name ) {\r\n\r\n\t\t\tvar clipArray = objectOrClipArray;\r\n\r\n\t\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\t\tvar o = objectOrClipArray;\r\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\tCreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {\r\n\r\n\t\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t\t// sort morph target names into animation groups based\r\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clips = [];\r\n\r\n\t\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\t\tclips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn clips;\r\n\r\n\t\t},\r\n\r\n\t\t// parse the animation.hierarchy format\r\n\t\tparseAnimation: function ( animation, bones ) {\r\n\r\n\t\t\tif ( ! animation ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t\t// only return track if there are actually keys.\r\n\t\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tvar clipName = animation.name || 'default';\r\n\t\t\t// automatic length determination in AnimationClip.\r\n\t\t\tvar duration = animation.length || - 1;\r\n\t\t\tvar fps = animation.fps || 30;\r\n\r\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t\t// skip empty tracks\r\n\t\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) { continue; }\r\n\r\n\t\t\t\t// process morph targets\r\n\t\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\r\n\r\n\t\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\t\tvar morphTargetNames = {};\r\n\r\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t\t// the morphTarget is named.\r\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\t\tvar times = [];\r\n\t\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\t\tvar animationKey = animationKeys[ k ];\r\n\r\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar clip = new AnimationClip( clipName, duration, tracks );\r\n\r\n\t\t\treturn clip;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( AnimationClip.prototype, {\r\n\r\n\t\tresetDuration: function () {\r\n\r\n\t\t\tvar tracks = this.tracks, duration = 0;\r\n\r\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.duration = duration;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttrim: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tvalidate: function () {\r\n\r\n\t\t\tvar valid = true;\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tvalid = valid && this.tracks[ i ].validate();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn valid;\r\n\r\n\t\t},\r\n\r\n\t\toptimize: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\tvar tracks = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\t\ttracks.push( this.tracks[ i ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new AnimationClip( this.name, this.duration, tracks );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar Cache = {\r\n\r\n\t\tenabled: false,\r\n\r\n\t\tfiles: {},\r\n\r\n\t\tadd: function ( key, file ) {\r\n\r\n\t\t\tif ( this.enabled === false ) { return; }\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\t\tthis.files[ key ] = file;\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( key ) {\r\n\r\n\t\t\tif ( this.enabled === false ) { return; }\r\n\r\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\t\treturn this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tremove: function ( key ) {\r\n\r\n\t\t\tdelete this.files[ key ];\r\n\r\n\t\t},\r\n\r\n\t\tclear: function () {\r\n\r\n\t\t\tthis.files = {};\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LoadingManager( onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar isLoading = false;\r\n\t\tvar itemsLoaded = 0;\r\n\t\tvar itemsTotal = 0;\r\n\t\tvar urlModifier = undefined;\r\n\t\tvar handlers = [];\r\n\r\n\t\t// Refer to #5689 for the reason why we don't set .onStart\r\n\t\t// in the constructor\r\n\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\r\n\t\tthis.itemStart = function ( url ) {\r\n\r\n\t\t\titemsTotal ++;\r\n\r\n\t\t\tif ( isLoading === false ) {\r\n\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tisLoading = true;\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemEnd = function ( url ) {\r\n\r\n\t\t\titemsLoaded ++;\r\n\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\t\tisLoading = false;\r\n\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.itemError = function ( url ) {\r\n\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\t\tscope.onError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tthis.resolveURL = function ( url ) {\r\n\r\n\t\t\tif ( urlModifier ) {\r\n\r\n\t\t\t\treturn urlModifier( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn url;\r\n\r\n\t\t};\r\n\r\n\t\tthis.setURLModifier = function ( transform ) {\r\n\r\n\t\t\turlModifier = transform;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.addHandler = function ( regex, loader ) {\r\n\r\n\t\t\thandlers.push( regex, loader );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.removeHandler = function ( regex ) {\r\n\r\n\t\t\tvar index = handlers.indexOf( regex );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\thandlers.splice( index, 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t\tthis.getHandler = function ( file ) {\r\n\r\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\tvar regex = handlers[ i ];\r\n\t\t\t\tvar loader = handlers[ i + 1 ];\r\n\r\n\t\t\t\tif ( regex.global ) { regex.lastIndex = 0; } // see #17920\r\n\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\t\treturn loader;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tvar DefaultLoadingManager = new LoadingManager();\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Loader( manager ) {\r\n\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\t\tthis.path = '';\r\n\t\tthis.resourcePath = '';\r\n\r\n\t}\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\tload: function ( /* url, onLoad, onProgress, onError */ ) {},\r\n\r\n\t\tparse: function ( /* data */ ) {},\r\n\r\n\t\tsetCrossOrigin: function ( crossOrigin ) {\r\n\r\n\t\t\tthis.crossOrigin = crossOrigin;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetPath: function ( path ) {\r\n\r\n\t\t\tthis.path = path;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetResourcePath: function ( resourcePath ) {\r\n\r\n\t\t\tthis.resourcePath = resourcePath;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar loading = {};\r\n\r\n\tfunction FileLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: FileLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) { url = ''; }\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check if request is duplicate\r\n\r\n\t\t\tif ( loading[ url ] !== undefined ) {\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Check for data: URI\r\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\r\n\t\t\tvar dataUriRegexResult = url.match( dataUriRegex );\r\n\r\n\t\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\r\n\t\t\tif ( dataUriRegexResult ) {\r\n\r\n\t\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\r\n\t\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\r\n\t\t\t\tvar data = dataUriRegexResult[ 3 ];\r\n\r\n\t\t\t\tdata = decodeURIComponent( data );\r\n\r\n\t\t\t\tif ( isBase64 ) { data = atob( data ); }\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tvar response;\r\n\t\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\r\n\r\n\t\t\t\t\tswitch ( responseType ) {\r\n\r\n\t\t\t\t\t\tcase 'arraybuffer':\r\n\t\t\t\t\t\tcase 'blob':\r\n\r\n\t\t\t\t\t\t\tvar view = new Uint8Array( data.length );\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( responseType === 'blob' ) {\r\n\r\n\t\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tresponse = view.buffer;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'document':\r\n\r\n\t\t\t\t\t\t\tvar parser = new DOMParser();\r\n\t\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'json':\r\n\r\n\t\t\t\t\t\t\tresponse = JSON.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault: // 'text' or other\r\n\r\n\t\t\t\t\t\t\tresponse = data;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( response ); }\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\r\n\t\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\t\tif ( onError ) { onError( error ); }\r\n\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Initialise array for duplicate requests\r\n\r\n\t\t\t\tloading[ url ] = [];\r\n\r\n\t\t\t\tloading[ url ].push( {\r\n\r\n\t\t\t\t\tonLoad: onLoad,\r\n\t\t\t\t\tonProgress: onProgress,\r\n\t\t\t\t\tonError: onError\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tvar request = new XMLHttpRequest();\r\n\r\n\t\t\t\trequest.open( 'GET', url, true );\r\n\r\n\t\t\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\t\t\tvar response = this.response;\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\r\n\r\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\t\t\tif ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }\r\n\r\n\t\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\r\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\r\n\t\t\t\t\t\tCache.add( url, response );\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onLoad ) { callback.onLoad( response ); }\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onProgress ) { callback.onProgress( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\trequest.addEventListener( 'abort', function ( event ) {\r\n\r\n\t\t\t\t\tvar callbacks = loading[ url ];\r\n\r\n\t\t\t\t\tdelete loading[ url ];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar callback = callbacks[ i ];\r\n\t\t\t\t\t\tif ( callback.onError ) { callback.onError( event ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, false );\r\n\r\n\t\t\t\tif ( this.responseType !== undefined ) { request.responseType = this.responseType; }\r\n\t\t\t\tif ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }\r\n\r\n\t\t\t\tif ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }\r\n\r\n\t\t\t\tfor ( var header in this.requestHeader ) {\r\n\r\n\t\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\trequest.send( null );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn request;\r\n\r\n\t\t},\r\n\r\n\t\tsetResponseType: function ( value ) {\r\n\r\n\t\t\tthis.responseType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetWithCredentials: function ( value ) {\r\n\r\n\t\t\tthis.withCredentials = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMimeType: function ( value ) {\r\n\r\n\t\t\tthis.mimeType = value;\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetRequestHeader: function ( value ) {\r\n\r\n\t\t\tthis.requestHeader = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io/\r\n\t */\r\n\r\n\tfunction AnimationLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tAnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: AnimationLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n\t *\r\n\t * Sub classes have to implement the parse() method which will be used in load().\r\n\t */\r\n\r\n\tfunction CompressedTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tCompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: CompressedTextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar images = [];\r\n\r\n\t\t\tvar texture = new CompressedTexture();\r\n\t\t\ttexture.image = images;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\t\t{ texture.minFilter = LinearFilter; }\r\n\r\n\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\tvar loaded = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t\tvar texDatas = scope.parse( buffer, true );\r\n\r\n\t\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t}, onProgress, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Nikos M. / https://github.com/foo123/\r\n\t *\r\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n\t *\r\n\t * Sub classes have to implement the parse() method which will be used in load().\r\n\t */\r\n\r\n\tfunction DataTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: DataTextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar texture = new DataTexture();\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texData = scope.parse( buffer );\r\n\r\n\t\t\t\tif ( ! texData ) { return; }\r\n\r\n\t\t\t\tif ( texData.image !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t\t} else if ( texData.data !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\r\n\r\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\r\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\r\n\r\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\r\n\r\n\t\t\t\tif ( texData.format !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( texData.type !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texData.mipmaps !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texData.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( texture, texData ); }\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ImageLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ImageLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );\r\n\r\n\t\t\tfunction onImageLoad() {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tCache.add( url, this );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( this ); }\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction onImageError( event ) {\r\n\r\n\t\t\t\timage.removeEventListener( 'load', onImageLoad, false );\r\n\t\t\t\timage.removeEventListener( 'error', onImageError, false );\r\n\r\n\t\t\t\tif ( onError ) { onError( event ); }\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\timage.addEventListener( 'load', onImageLoad, false );\r\n\t\t\timage.addEventListener( 'error', onImageError, false );\r\n\r\n\t\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\r\n\r\n\t\t\t\tif ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\timage.src = url;\r\n\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction CubeTextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tCubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: CubeTextureLoader,\r\n\r\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new CubeTexture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\t\tloaded ++;\r\n\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\t\tif ( onLoad ) { onLoad( texture ); }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}, undefined, onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction TextureLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: TextureLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar texture = new Texture();\r\n\r\n\t\t\tvar loader = new ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\r\n\t\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\t\ttexture.image = image;\r\n\r\n\t\t\t\t// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\r\n\t\t\t\tvar isJPEG = url.search( /\\.jpe?g($|\\?)/i ) > 0 || url.search( /^data\\:image\\/jpeg/ ) === 0;\r\n\r\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t\treturn texture;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Extensible curve object\r\n\t *\r\n\t * Some common of curve methods:\r\n\t * .getPoint( t, optionalTarget ), .getTangent( t )\r\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u )\r\n\t * .getPoints(), .getSpacedPoints()\r\n\t * .getLength()\r\n\t * .updateArcLengths()\r\n\t *\r\n\t * This following curves inherit from THREE.Curve:\r\n\t *\r\n\t * -- 2D curves --\r\n\t * THREE.ArcCurve\r\n\t * THREE.CubicBezierCurve\r\n\t * THREE.EllipseCurve\r\n\t * THREE.LineCurve\r\n\t * THREE.QuadraticBezierCurve\r\n\t * THREE.SplineCurve\r\n\t *\r\n\t * -- 3D curves --\r\n\t * THREE.CatmullRomCurve3\r\n\t * THREE.CubicBezierCurve3\r\n\t * THREE.LineCurve3\r\n\t * THREE.QuadraticBezierCurve3\r\n\t *\r\n\t * A series of curves can be represented as a THREE.CurvePath.\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tAbstract Curve base class\r\n\t **************************************************************/\r\n\r\n\tfunction Curve() {\r\n\r\n\t\tthis.type = 'Curve';\r\n\r\n\t\tthis.arcLengthDivisions = 200;\r\n\r\n\t}\r\n\r\n\tObject.assign( Curve.prototype, {\r\n\r\n\t\t// Virtual base class method to overwrite and implement in subclasses\r\n\t\t//\t- t [0 .. 1]\r\n\r\n\t\tgetPoint: function ( /* t, optionalTarget */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// Get point at relative position in curve according to arc length\r\n\t\t// - u [0 .. 1]\r\n\r\n\t\tgetPointAt: function ( u, optionalTarget ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getPoint( t, optionalTarget );\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPoint( t )\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get sequence of points using getPointAt( u )\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 5; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\t// Get total curve arc length\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lengths = this.getLengths();\r\n\t\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// Get list of cumulative segment lengths\r\n\r\n\t\tgetLengths: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = this.arcLengthDivisions; }\r\n\r\n\t\t\tif ( this.cacheArcLengths &&\r\n\t\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\r\n\t\t\t\t! this.needsUpdate ) {\r\n\r\n\t\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.needsUpdate = false;\r\n\r\n\t\t\tvar cache = [];\r\n\t\t\tvar current, last = this.getPoint( 0 );\r\n\t\t\tvar p, sum = 0;\r\n\r\n\t\t\tcache.push( 0 );\r\n\r\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\t\tcurrent = this.getPoint( p / divisions );\r\n\t\t\t\tsum += current.distanceTo( last );\r\n\t\t\t\tcache.push( sum );\r\n\t\t\t\tlast = current;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\r\n\r\n\t\t},\r\n\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.getLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\t\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\t\tif ( distance ) {\r\n\r\n\t\t\t\ttargetArcLength = distance;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\t\twhile ( low <= high ) {\r\n\r\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\thigh = i;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// DONE\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti = high;\r\n\r\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\t\treturn i / ( il - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t\t// add that fractional amount to t\r\n\r\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\t// Returns a unit vector tangent at t\r\n\t\t// In case any sub curve does not implement its tangent derivation,\r\n\t\t// 2 points a small delta apart will be used to find its gradient\r\n\t\t// which seems to give a reasonable approximation\r\n\r\n\t\tgetTangent: function ( t ) {\r\n\r\n\t\t\tvar delta = 0.0001;\r\n\t\t\tvar t1 = t - delta;\r\n\t\t\tvar t2 = t + delta;\r\n\r\n\t\t\t// Capping in case of danger\r\n\r\n\t\t\tif ( t1 < 0 ) { t1 = 0; }\r\n\t\t\tif ( t2 > 1 ) { t2 = 1; }\r\n\r\n\t\t\tvar pt1 = this.getPoint( t1 );\r\n\t\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\t\treturn vec.normalize();\r\n\r\n\t\t},\r\n\r\n\t\tgetTangentAt: function ( u ) {\r\n\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getTangent( t );\r\n\r\n\t\t},\r\n\r\n\t\tcomputeFrenetFrames: function ( segments, closed ) {\r\n\r\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\r\n\t\t\tvar normal = new Vector3();\r\n\r\n\t\t\tvar tangents = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar binormals = [];\r\n\r\n\t\t\tvar vec = new Vector3();\r\n\t\t\tvar mat = new Matrix4();\r\n\r\n\t\t\tvar i, u, theta;\r\n\r\n\t\t\t// compute the tangent vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tu = i / segments;\r\n\r\n\t\t\t\ttangents[ i ] = this.getTangentAt( u );\r\n\t\t\t\ttangents[ i ].normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t\t// and in the direction of the minimum tangent xyz component\r\n\r\n\t\t\tnormals[ 0 ] = new Vector3();\r\n\t\t\tbinormals[ 0 ] = new Vector3();\r\n\t\t\tvar min = Number.MAX_VALUE;\r\n\t\t\tvar tx = Math.abs( tangents[ 0 ].x );\r\n\t\t\tvar ty = Math.abs( tangents[ 0 ].y );\r\n\t\t\tvar tz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\t\tif ( tx <= min ) {\r\n\r\n\t\t\t\tmin = tx;\r\n\t\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ty <= min ) {\r\n\r\n\t\t\t\tmin = ty;\r\n\t\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tz <= min ) {\r\n\r\n\t\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\r\n\t\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\r\n\r\n\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tvec.normalize();\r\n\r\n\t\t\t\t\ttheta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\t\t\tif ( closed === true ) {\r\n\r\n\t\t\t\ttheta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\r\n\t\t\t\ttheta /= segments;\r\n\r\n\t\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\r\n\r\n\t\t\t\t\ttheta = - theta;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 1; i <= segments; i ++ ) {\r\n\r\n\t\t\t\t\t// twist a little...\r\n\t\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\ttangents: tangents,\r\n\t\t\t\tnormals: normals,\r\n\t\t\t\tbinormals: binormals\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.5,\r\n\t\t\t\t\ttype: 'Curve',\r\n\t\t\t\t\tgenerator: 'Curve.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\r\n\t\t\tdata.type = this.type;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'EllipseCurve';\r\n\r\n\t\tthis.aX = aX || 0;\r\n\t\tthis.aY = aY || 0;\r\n\r\n\t\tthis.xRadius = xRadius || 1;\r\n\t\tthis.yRadius = yRadius || 1;\r\n\r\n\t\tthis.aStartAngle = aStartAngle || 0;\r\n\t\tthis.aEndAngle = aEndAngle || 2 * Math.PI;\r\n\r\n\t\tthis.aClockwise = aClockwise || false;\r\n\r\n\t\tthis.aRotation = aRotation || 0;\r\n\r\n\t}\r\n\r\n\tEllipseCurve.prototype = Object.create( Curve.prototype );\r\n\tEllipseCurve.prototype.constructor = EllipseCurve;\r\n\r\n\tEllipseCurve.prototype.isEllipseCurve = true;\r\n\r\n\tEllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar twoPi = Math.PI * 2;\r\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\tvar samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\r\n\r\n\t\t// ensures that deltaAngle is 0 .. 2 PI\r\n\t\twhile ( deltaAngle < 0 ) { deltaAngle += twoPi; }\r\n\t\twhile ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }\r\n\r\n\t\tif ( deltaAngle < Number.EPSILON ) {\r\n\r\n\t\t\tif ( samePoints ) {\r\n\r\n\t\t\t\tdeltaAngle = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aClockwise === true && ! samePoints ) {\r\n\r\n\t\t\tif ( deltaAngle === twoPi ) {\r\n\r\n\t\t\t\tdeltaAngle = - twoPi;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar angle = this.aStartAngle + t * deltaAngle;\r\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\t\tvar cos = Math.cos( this.aRotation );\r\n\t\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\t\tvar tx = x - this.aX;\r\n\t\t\tvar ty = y - this.aY;\r\n\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = tx * cos - ty * sin + this.aX;\r\n\t\t\ty = tx * sin + ty * cos + this.aY;\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( x, y );\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.aX = source.aX;\r\n\t\tthis.aY = source.aY;\r\n\r\n\t\tthis.xRadius = source.xRadius;\r\n\t\tthis.yRadius = source.yRadius;\r\n\r\n\t\tthis.aStartAngle = source.aStartAngle;\r\n\t\tthis.aEndAngle = source.aEndAngle;\r\n\r\n\t\tthis.aClockwise = source.aClockwise;\r\n\r\n\t\tthis.aRotation = source.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\tEllipseCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.aX = this.aX;\r\n\t\tdata.aY = this.aY;\r\n\r\n\t\tdata.xRadius = this.xRadius;\r\n\t\tdata.yRadius = this.yRadius;\r\n\r\n\t\tdata.aStartAngle = this.aStartAngle;\r\n\t\tdata.aEndAngle = this.aEndAngle;\r\n\r\n\t\tdata.aClockwise = this.aClockwise;\r\n\r\n\t\tdata.aRotation = this.aRotation;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tEllipseCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.aX = json.aX;\r\n\t\tthis.aY = json.aY;\r\n\r\n\t\tthis.xRadius = json.xRadius;\r\n\t\tthis.yRadius = json.yRadius;\r\n\r\n\t\tthis.aStartAngle = json.aStartAngle;\r\n\t\tthis.aEndAngle = json.aEndAngle;\r\n\r\n\t\tthis.aClockwise = json.aClockwise;\r\n\r\n\t\tthis.aRotation = json.aRotation;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tEllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\tthis.type = 'ArcCurve';\r\n\r\n\t}\r\n\r\n\tArcCurve.prototype = Object.create( EllipseCurve.prototype );\r\n\tArcCurve.prototype.constructor = ArcCurve;\r\n\r\n\tArcCurve.prototype.isArcCurve = true;\r\n\r\n\t/**\r\n\t * @author zz85 https://github.com/zz85\r\n\t *\r\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\r\n\t * cusps and self-intersections in non-uniform catmull rom curves.\r\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n\t *\r\n\t * curve.type accepts centripetal(default), chordal and catmullrom\r\n\t * curve.tension is used for catmullrom which defaults to 0.5\r\n\t */\r\n\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t\tvar c0 = 0, c1 = 0, c2 = 0, c3 = 0;\r\n\r\n\t\t/*\r\n\t\t * Compute coefficients for a cubic polynomial\r\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t\t * such that\r\n\t\t *   p(0) = x0, p(1) = x1\r\n\t\t *  and\r\n\t\t *   p'(0) = t0, p'(1) = t1.\r\n\t\t */\r\n\t\tfunction init( x0, x1, t0, t1 ) {\r\n\r\n\t\t\tc0 = x0;\r\n\t\t\tc1 = t0;\r\n\t\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\r\n\r\n\t\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\t\tt1 *= dt1;\r\n\t\t\t\tt2 *= dt1;\r\n\r\n\t\t\t\tinit( x1, x2, t1, t2 );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tcalc: function ( t ) {\r\n\r\n\t\t\t\tvar t2 = t * t;\r\n\t\t\t\tvar t3 = t2 * t;\r\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar tmp = new Vector3();\r\n\tvar px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\r\n\r\n\tfunction CatmullRomCurve3( points, closed, curveType, tension ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CatmullRomCurve3';\r\n\r\n\t\tthis.points = points || [];\r\n\t\tthis.closed = closed || false;\r\n\t\tthis.curveType = curveType || 'centripetal';\r\n\t\tthis.tension = tension || 0.5;\r\n\r\n\t}\r\n\r\n\tCatmullRomCurve3.prototype = Object.create( Curve.prototype );\r\n\tCatmullRomCurve3.prototype.constructor = CatmullRomCurve3;\r\n\r\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\r\n\r\n\tCatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar l = points.length;\r\n\r\n\t\tvar p = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tif ( this.closed ) {\r\n\r\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\r\n\r\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\tintPoint = l - 2;\r\n\t\t\tweight = 1;\r\n\r\n\t\t}\r\n\r\n\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate first point\r\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\tp0 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tp1 = points[ intPoint % l ];\r\n\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// extrapolate last point\r\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\tp3 = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\r\n\r\n\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\r\n\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t// safety check for repeated points\r\n\t\t\tif ( dt1 < 1e-4 ) { dt1 = 1.0; }\r\n\t\t\tif ( dt0 < 1e-4 ) { dt0 = dt1; }\r\n\t\t\tif ( dt2 < 1e-4 ) { dt2 = dt1; }\r\n\r\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t} else if ( this.curveType === 'catmullrom' ) {\r\n\r\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\r\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\r\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\r\n\r\n\t\t}\r\n\r\n\t\tpoint.set(\r\n\t\t\tpx.calc( weight ),\r\n\t\t\tpy.calc( weight ),\r\n\t\t\tpz.calc( weight )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = source.closed;\r\n\t\tthis.curveType = source.curveType;\r\n\t\tthis.tension = source.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\tdata.closed = this.closed;\r\n\t\tdata.curveType = this.curveType;\r\n\t\tdata.tension = this.tension;\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCatmullRomCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.closed = json.closed;\r\n\t\tthis.curveType = json.curveType;\r\n\t\tthis.tension = json.tension;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Bezier Curves formulas obtained from\r\n\t * http://en.wikipedia.org/wiki/Bézier_curve\r\n\t */\r\n\r\n\tfunction CatmullRom( t, p0, p1, p2, p3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction QuadraticBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP1( t, p ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezierP2( t, p ) {\r\n\r\n\t\treturn t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction QuadraticBezier( t, p0, p1, p2 ) {\r\n\r\n\t\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\r\n\t\t\tQuadraticBezierP2( t, p2 );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction CubicBezierP0( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn k * k * k * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP1( t, p ) {\r\n\r\n\t\tvar k = 1 - t;\r\n\t\treturn 3 * k * k * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP2( t, p ) {\r\n\r\n\t\treturn 3 * ( 1 - t ) * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierP3( t, p ) {\r\n\r\n\t\treturn t * t * t * p;\r\n\r\n\t}\r\n\r\n\tfunction CubicBezier( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\r\n\t\t\tCubicBezierP3( t, p3 );\r\n\r\n\t}\r\n\r\n\tfunction CubicBezierCurve( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\t\tthis.v3 = v3 || new Vector2();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve.prototype.constructor = CubicBezierCurve;\r\n\r\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\r\n\r\n\tCubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction CubicBezierCurve3( v0, v1, v2, v3 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CubicBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\t\tthis.v3 = v3 || new Vector3();\r\n\r\n\t}\r\n\r\n\tCubicBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tCubicBezierCurve3.prototype.constructor = CubicBezierCurve3;\r\n\r\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\r\n\r\n\tCubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\r\n\r\n\t\tpoint.set(\r\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\r\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\r\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\t\tthis.v3.copy( source.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\t\tdata.v3 = this.v3.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tCubicBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\t\tthis.v3.fromArray( json.v3 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve';\r\n\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tLineCurve.prototype = Object.create( Curve.prototype );\r\n\tLineCurve.prototype.constructor = LineCurve;\r\n\r\n\tLineCurve.prototype.isLineCurve = true;\r\n\r\n\tLineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.getTangent = function ( /* t */ ) {\r\n\r\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\t\treturn tangent.normalize();\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction LineCurve3( v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'LineCurve3';\r\n\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tLineCurve3.prototype = Object.create( Curve.prototype );\r\n\tLineCurve3.prototype.constructor = LineCurve3;\r\n\r\n\tLineCurve3.prototype.isLineCurve3 = true;\r\n\r\n\tLineCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tpoint.copy( this.v2 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\r\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\r\n\tLineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {\r\n\r\n\t\treturn this.getPoint( u, optionalTarget );\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tLineCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve';\r\n\r\n\t\tthis.v0 = v0 || new Vector2();\r\n\t\tthis.v1 = v1 || new Vector2();\r\n\t\tthis.v2 = v2 || new Vector2();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;\r\n\r\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\r\n\r\n\tQuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction QuadraticBezierCurve3( v0, v1, v2 ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'QuadraticBezierCurve3';\r\n\r\n\t\tthis.v0 = v0 || new Vector3();\r\n\t\tthis.v1 = v1 || new Vector3();\r\n\t\tthis.v2 = v2 || new Vector3();\r\n\r\n\t}\r\n\r\n\tQuadraticBezierCurve3.prototype = Object.create( Curve.prototype );\r\n\tQuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;\r\n\r\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\r\n\r\n\tQuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector3();\r\n\r\n\t\tvar v0 = this.v0, v1 = this.v1, v2 = this.v2;\r\n\r\n\t\tpoint.set(\r\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\r\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\r\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.v0.copy( source.v0 );\r\n\t\tthis.v1.copy( source.v1 );\r\n\t\tthis.v2.copy( source.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.v0 = this.v0.toArray();\r\n\t\tdata.v1 = this.v1.toArray();\r\n\t\tdata.v2 = this.v2.toArray();\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tQuadraticBezierCurve3.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.v0.fromArray( json.v0 );\r\n\t\tthis.v1.fromArray( json.v1 );\r\n\t\tthis.v2.fromArray( json.v2 );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tfunction SplineCurve( points /* array of Vector2 */ ) {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'SplineCurve';\r\n\r\n\t\tthis.points = points || [];\r\n\r\n\t}\r\n\r\n\tSplineCurve.prototype = Object.create( Curve.prototype );\r\n\tSplineCurve.prototype.constructor = SplineCurve;\r\n\r\n\tSplineCurve.prototype.isSplineCurve = true;\r\n\r\n\tSplineCurve.prototype.getPoint = function ( t, optionalTarget ) {\r\n\r\n\t\tvar point = optionalTarget || new Vector2();\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar p = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( p );\r\n\t\tvar weight = p - intPoint;\r\n\r\n\t\tvar p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar p1 = points[ intPoint ];\r\n\t\tvar p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tpoint.set(\r\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\r\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\r\n\t\t);\r\n\r\n\t\treturn point;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.copy = function ( source ) {\r\n\r\n\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = source.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = source.points[ i ];\r\n\r\n\t\t\tthis.points.push( point.clone() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.toJSON = function () {\r\n\r\n\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\tdata.points = [];\r\n\r\n\t\tfor ( var i = 0, l = this.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = this.points[ i ];\r\n\t\t\tdata.points.push( point.toArray() );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t};\r\n\r\n\tSplineCurve.prototype.fromJSON = function ( json ) {\r\n\r\n\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0, l = json.points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = json.points[ i ];\r\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\r\n\r\n\tvar Curves = /*#__PURE__*/Object.freeze({\r\n\t\t__proto__: null,\r\n\t\tArcCurve: ArcCurve,\r\n\t\tCatmullRomCurve3: CatmullRomCurve3,\r\n\t\tCubicBezierCurve: CubicBezierCurve,\r\n\t\tCubicBezierCurve3: CubicBezierCurve3,\r\n\t\tEllipseCurve: EllipseCurve,\r\n\t\tLineCurve: LineCurve,\r\n\t\tLineCurve3: LineCurve3,\r\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\r\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\r\n\t\tSplineCurve: SplineCurve\r\n\t});\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t **/\r\n\r\n\t/**************************************************************\r\n\t *\tCurved Path - a curve path is simply a array of connected\r\n\t *  curves, but retains the api of a curve\r\n\t **************************************************************/\r\n\r\n\tfunction CurvePath() {\r\n\r\n\t\tCurve.call( this );\r\n\r\n\t\tthis.type = 'CurvePath';\r\n\r\n\t\tthis.curves = [];\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\r\n\t}\r\n\r\n\tCurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {\r\n\r\n\t\tconstructor: CurvePath,\r\n\r\n\t\tadd: function ( curve ) {\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t},\r\n\r\n\t\tclosePath: function () {\r\n\r\n\t\t\t// Add a line curve if start and end of lines are not connected\r\n\t\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// To get accurate point with reference to\r\n\t\t// entire path distance at time t,\r\n\t\t// following has to be done:\r\n\r\n\t\t// 1. Length of each sub path have to be known\r\n\t\t// 2. Locate and identify type of curve\r\n\t\t// 3. Get t for the curve\r\n\t\t// 4. Return curve.getPointAt(t')\r\n\r\n\t\tgetPoint: function ( t ) {\r\n\r\n\t\t\tvar d = t * this.getLength();\r\n\t\t\tvar curveLengths = this.getCurveLengths();\r\n\t\t\tvar i = 0;\r\n\r\n\t\t\t// To think about boundaries points.\r\n\r\n\t\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\t\tvar segmentLength = curve.getLength();\r\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\r\n\r\n\t\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t\t},\r\n\r\n\t\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t\t// getPoint() depends on getLength\r\n\r\n\t\tgetLength: function () {\r\n\r\n\t\t\tvar lens = this.getCurveLengths();\r\n\t\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t\t},\r\n\r\n\t\t// cacheLengths must be recalculated.\r\n\t\tupdateArcLengths: function () {\r\n\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.cacheLengths = null;\r\n\t\t\tthis.getCurveLengths();\r\n\r\n\t\t},\r\n\r\n\t\t// Compute lengths and cache them\r\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\t\tgetCurveLengths: function () {\r\n\r\n\t\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\t\treturn this.cacheLengths;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Get length of sub-curve\r\n\t\t\t// Push sums into cached array\r\n\r\n\t\t\tvar lengths = [], sums = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\t\tlengths.push( sums );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cacheLengths = lengths;\r\n\r\n\t\t\treturn lengths;\r\n\r\n\t\t},\r\n\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\t\tif ( divisions === undefined ) { divisions = 40; }\r\n\r\n\t\t\tvar points = [];\r\n\r\n\t\t\tfor ( var i = 0; i <= divisions; i ++ ) {\r\n\r\n\t\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tgetPoints: function ( divisions ) {\r\n\r\n\t\t\tdivisions = divisions || 12;\r\n\r\n\t\t\tvar points = [], last;\r\n\r\n\t\t\tfor ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {\r\n\r\n\t\t\t\tvar curve = curves[ i ];\r\n\t\t\t\tvar resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\r\n\t\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\r\n\t\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\r\n\t\t\t\t\t\t\t: divisions;\r\n\r\n\t\t\t\tvar pts = curve.getPoints( resolution );\r\n\r\n\t\t\t\tfor ( var j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\t\tvar point = pts[ j ];\r\n\r\n\t\t\t\t\tif ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates\r\n\r\n\t\t\t\t\tpoints.push( point );\r\n\t\t\t\t\tlast = point;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\r\n\r\n\t\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn points;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurve.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = source.curves[ i ];\r\n\r\n\t\t\t\tthis.curves.push( curve.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.autoClose = source.autoClose;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Curve.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.autoClose = this.autoClose;\r\n\t\t\tdata.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\t\t\t\tdata.curves.push( curve.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurve.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.autoClose = json.autoClose;\r\n\t\t\tthis.curves = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar curve = json.curves[ i ];\r\n\t\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Creates free form 2d path using series of points, lines or curves.\r\n\t **/\r\n\r\n\tfunction Path( points ) {\r\n\r\n\t\tCurvePath.call( this );\r\n\r\n\t\tthis.type = 'Path';\r\n\r\n\t\tthis.currentPoint = new Vector2();\r\n\r\n\t\tif ( points ) {\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tPath.prototype = Object.assign( Object.create( CurvePath.prototype ), {\r\n\r\n\t\tconstructor: Path,\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\r\n\r\n\t\t\tfor ( var i = 1, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tvar curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tvar curve = new QuadraticBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCPx, aCPy ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tvar curve = new CubicBezierCurve(\r\n\t\t\t\tthis.currentPoint.clone(),\r\n\t\t\t\tnew Vector2( aCP1x, aCP1y ),\r\n\t\t\t\tnew Vector2( aCP2x, aCP2y ),\r\n\t\t\t\tnew Vector2( aX, aY )\r\n\t\t\t);\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.set( aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\t\tvar npts = [ this.currentPoint.clone() ].concat( pts );\r\n\r\n\t\t\tvar curve = new SplineCurve( npts );\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar x0 = this.currentPoint.x;\r\n\t\t\tvar y0 = this.currentPoint.y;\r\n\r\n\t\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\t\tvar curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t\t\tif ( this.curves.length > 0 ) {\r\n\r\n\t\t\t\t// if a previous curve is present, attempt to join\r\n\t\t\t\tvar firstPoint = curve.getPoint( 0 );\r\n\r\n\t\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\r\n\r\n\t\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.curves.push( curve );\r\n\r\n\t\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\t\tthis.currentPoint.copy( lastPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tCurvePath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.currentPoint.copy( source.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = CurvePath.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tCurvePath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.currentPoint.fromArray( json.currentPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Defines a 2d shape plane using paths.\r\n\t **/\r\n\r\n\t// STEP 1 Create a path.\r\n\t// STEP 2 Turn path into shape.\r\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n\t// STEP 3a - Extract points from each shape, turn to vertices\r\n\t// STEP 3b - Triangulate each shape, add faces.\r\n\r\n\tfunction Shape( points ) {\r\n\r\n\t\tPath.call( this, points );\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\tthis.type = 'Shape';\r\n\r\n\t\tthis.holes = [];\r\n\r\n\t}\r\n\r\n\tShape.prototype = Object.assign( Object.create( Path.prototype ), {\r\n\r\n\t\tconstructor: Shape,\r\n\r\n\t\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\t\tvar holesPts = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn holesPts;\r\n\r\n\t\t},\r\n\r\n\t\t// get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\t\textractPoints: function ( divisions ) {\r\n\r\n\t\t\treturn {\r\n\r\n\t\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tPath.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = source.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = source.holes[ i ];\r\n\r\n\t\t\t\tthis.holes.push( hole.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = Path.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = this.holes[ i ];\r\n\t\t\t\tdata.holes.push( hole.toJSON() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t},\r\n\r\n\t\tfromJSON: function ( json ) {\r\n\r\n\t\t\tPath.prototype.fromJSON.call( this, json );\r\n\r\n\t\t\tthis.uuid = json.uuid;\r\n\t\t\tthis.holes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = json.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar hole = json.holes[ i ];\r\n\t\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Light( color, intensity ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Light';\r\n\r\n\t\tthis.color = new Color( color );\r\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\t\tthis.receiveShadow = undefined;\r\n\r\n\t}\r\n\r\n\tLight.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Light,\r\n\r\n\t\tisLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tObject3D.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.color.copy( source.color );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.color = this.color.getHex();\r\n\t\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\t\tif ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }\r\n\r\n\t\t\tif ( this.distance !== undefined ) { data.object.distance = this.distance; }\r\n\t\t\tif ( this.angle !== undefined ) { data.object.angle = this.angle; }\r\n\t\t\tif ( this.decay !== undefined ) { data.object.decay = this.decay; }\r\n\t\t\tif ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }\r\n\r\n\t\t\tif ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction HemisphereLight( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLight.call( this, skyColor, intensity );\r\n\r\n\t\tthis.type = 'HemisphereLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.groundColor = new Color( groundColor );\r\n\r\n\t}\r\n\r\n\tHemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLight,\r\n\r\n\t\tisHemisphereLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction LightShadow( camera ) {\r\n\r\n\t\tthis.camera = camera;\r\n\r\n\t\tthis.bias = 0;\r\n\t\tthis.radius = 1;\r\n\r\n\t\tthis.mapSize = new Vector2( 512, 512 );\r\n\r\n\t\tthis.map = null;\r\n\t\tthis.mapPass = null;\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t\tthis._frustum = new Frustum();\r\n\t\tthis._frameExtents = new Vector2( 1, 1 );\r\n\r\n\t\tthis._viewportCount = 1;\r\n\r\n\t\tthis._viewports = [\r\n\r\n\t\t\tnew Vector4( 0, 0, 1, 1 )\r\n\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tObject.assign( LightShadow.prototype, {\r\n\r\n\t\t_projScreenMatrix: new Matrix4(),\r\n\r\n\t\t_lightPositionWorld: new Vector3(),\r\n\r\n\t\t_lookTarget: new Vector3(),\r\n\r\n\t\tgetViewportCount: function () {\r\n\r\n\t\t\treturn this._viewportCount;\r\n\r\n\t\t},\r\n\r\n\t\tgetFrustum: function () {\r\n\r\n\t\t\treturn this._frustum;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tvar shadowCamera = this.camera,\r\n\t\t\t\tshadowMatrix = this.matrix,\r\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix,\r\n\t\t\t\tlookTarget = this._lookTarget,\r\n\t\t\t\tlightPositionWorld = this._lightPositionWorld;\r\n\r\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tshadowCamera.position.copy( lightPositionWorld );\r\n\r\n\t\t\tlookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\tshadowCamera.lookAt( lookTarget );\r\n\t\t\tshadowCamera.updateMatrixWorld();\r\n\r\n\t\t\tprojScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\r\n\r\n\t\t\tshadowMatrix.set(\r\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t);\r\n\r\n\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t},\r\n\r\n\t\tgetViewport: function ( viewportIndex ) {\r\n\r\n\t\t\treturn this._viewports[ viewportIndex ];\r\n\r\n\t\t},\r\n\r\n\t\tgetFrameExtents: function () {\r\n\r\n\t\t\treturn this._frameExtents;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tthis.camera = source.camera.clone();\r\n\r\n\t\t\tthis.bias = source.bias;\r\n\t\t\tthis.radius = source.radius;\r\n\r\n\t\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar object = {};\r\n\r\n\t\t\tif ( this.bias !== 0 ) { object.bias = this.bias; }\r\n\t\t\tif ( this.radius !== 1 ) { object.radius = this.radius; }\r\n\t\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }\r\n\r\n\t\t\tobject.camera = this.camera.toJSON( false ).object;\r\n\t\t\tdelete object.camera.matrix;\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction SpotLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tSpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: SpotLightShadow,\r\n\r\n\t\tisSpotLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tvar camera = this.camera;\r\n\r\n\t\t\tvar fov = _Math.RAD2DEG * 2 * light.angle;\r\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\r\n\t\t\tvar far = light.distance || camera.far;\r\n\r\n\t\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\t\tcamera.fov = fov;\r\n\t\t\t\tcamera.aspect = aspect;\r\n\t\t\t\tcamera.far = far;\r\n\t\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction SpotLight( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'SpotLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / Math.PI;\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new SpotLightShadow();\r\n\r\n\t}\r\n\r\n\tSpotLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: SpotLight,\r\n\r\n\t\tisSpotLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.angle = source.angle;\r\n\t\t\tthis.penumbra = source.penumbra;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction PointLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n\t\tthis._frameExtents = new Vector2( 4, 2 );\r\n\r\n\t\tthis._viewportCount = 6;\r\n\r\n\t\tthis._viewports = [\r\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t// following orientation:\r\n\t\t\t//\r\n\t\t\t//  xzXZ\r\n\t\t\t//   y Y\r\n\t\t\t//\r\n\t\t\t// X - Positive x direction\r\n\t\t\t// x - Negative x direction\r\n\t\t\t// Y - Positive y direction\r\n\t\t\t// y - Negative y direction\r\n\t\t\t// Z - Positive z direction\r\n\t\t\t// z - Negative z direction\r\n\r\n\t\t\t// positive X\r\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\r\n\t\t\t// negative X\r\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\r\n\t\t\t// positive Z\r\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\r\n\t\t\t// negative Z\r\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\r\n\t\t\t// positive Y\r\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\r\n\t\t\t// negative Y\r\n\t\t\tnew Vector4( 1, 0, 1, 1 )\r\n\t\t];\r\n\r\n\t\tthis._cubeDirections = [\r\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\r\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\r\n\t\tthis._cubeUps = [\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\r\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\r\n\t}\r\n\r\n\tPointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: PointLightShadow,\r\n\r\n\t\tisPointLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light, viewportIndex ) {\r\n\r\n\t\t\tif ( viewportIndex === undefined ) { viewportIndex = 0; }\r\n\r\n\t\t\tvar camera = this.camera,\r\n\t\t\t\tshadowMatrix = this.matrix,\r\n\t\t\t\tlightPositionWorld = this._lightPositionWorld,\r\n\t\t\t\tlookTarget = this._lookTarget,\r\n\t\t\t\tprojScreenMatrix = this._projScreenMatrix;\r\n\r\n\t\t\tlightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tcamera.position.copy( lightPositionWorld );\r\n\r\n\t\t\tlookTarget.copy( camera.position );\r\n\t\t\tlookTarget.add( this._cubeDirections[ viewportIndex ] );\r\n\t\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\r\n\t\t\tcamera.lookAt( lookTarget );\r\n\t\t\tcamera.updateMatrixWorld();\r\n\r\n\t\t\tshadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );\r\n\r\n\t\t\tprojScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\tthis._frustum.setFromMatrix( projScreenMatrix );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction PointLight( color, intensity, distance, decay ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'PointLight';\r\n\r\n\t\tObject.defineProperty( this, 'power', {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( power ) {\r\n\r\n\t\t\t\t// intensity = power per solid angle.\r\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\t\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\t\tthis.shadow = new PointLightShadow();\r\n\r\n\t}\r\n\r\n\tPointLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: PointLight,\r\n\r\n\t\tisPointLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.distance = source.distance;\r\n\t\t\tthis.decay = source.decay;\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author arose / http://github.com/arose\r\n\t */\r\n\r\n\tfunction OrthographicCamera( left, right, top, bottom, near, far ) {\r\n\r\n\t\tCamera.call( this );\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\tthis.zoom = 1;\r\n\t\tthis.view = null;\r\n\r\n\t\tthis.left = ( left !== undefined ) ? left : - 1;\r\n\t\tthis.right = ( right !== undefined ) ? right : 1;\r\n\t\tthis.top = ( top !== undefined ) ? top : 1;\r\n\t\tthis.bottom = ( bottom !== undefined ) ? bottom : - 1;\r\n\r\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tOrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {\r\n\r\n\t\tconstructor: OrthographicCamera,\r\n\r\n\t\tisOrthographicCamera: true,\r\n\r\n\t\tcopy: function ( source, recursive ) {\r\n\r\n\t\t\tCamera.prototype.copy.call( this, source, recursive );\r\n\r\n\t\t\tthis.left = source.left;\r\n\t\t\tthis.right = source.right;\r\n\t\t\tthis.top = source.top;\r\n\t\t\tthis.bottom = source.bottom;\r\n\t\t\tthis.near = source.near;\r\n\t\t\tthis.far = source.far;\r\n\r\n\t\t\tthis.zoom = source.zoom;\r\n\t\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\t\tif ( this.view === null ) {\r\n\r\n\t\t\t\tthis.view = {\r\n\t\t\t\t\tenabled: true,\r\n\t\t\t\t\tfullWidth: 1,\r\n\t\t\t\t\tfullHeight: 1,\r\n\t\t\t\t\toffsetX: 0,\r\n\t\t\t\t\toffsetY: 0,\r\n\t\t\t\t\twidth: 1,\r\n\t\t\t\t\theight: 1\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.view.enabled = true;\r\n\t\t\tthis.view.fullWidth = fullWidth;\r\n\t\t\tthis.view.fullHeight = fullHeight;\r\n\t\t\tthis.view.offsetX = x;\r\n\t\t\tthis.view.offsetY = y;\r\n\t\t\tthis.view.width = width;\r\n\t\t\tthis.view.height = height;\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tclearViewOffset: function () {\r\n\r\n\t\t\tif ( this.view !== null ) {\r\n\r\n\t\t\t\tthis.view.enabled = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.updateProjectionMatrix();\r\n\r\n\t\t},\r\n\r\n\t\tupdateProjectionMatrix: function () {\r\n\r\n\t\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\t\tvar left = cx - dx;\r\n\t\t\tvar right = cx + dx;\r\n\t\t\tvar top = cy + dy;\r\n\t\t\tvar bottom = cy - dy;\r\n\r\n\t\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\t\tvar zoomW = this.zoom / ( this.view.width / this.view.fullWidth );\r\n\t\t\t\tvar zoomH = this.zoom / ( this.view.height / this.view.fullHeight );\r\n\t\t\t\tvar scaleW = ( this.right - this.left ) / this.view.width;\r\n\t\t\t\tvar scaleH = ( this.top - this.bottom ) / this.view.height;\r\n\r\n\t\t\t\tleft += scaleW * ( this.view.offsetX / zoomW );\r\n\t\t\t\tright = left + scaleW * ( this.view.width / zoomW );\r\n\t\t\t\ttop -= scaleH * ( this.view.offsetY / zoomH );\r\n\t\t\t\tbottom = top - scaleH * ( this.view.height / zoomH );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\r\n\r\n\t\t\tthis.projectionMatrixInverse.getInverse( this.projectionMatrix );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.zoom = this.zoom;\r\n\t\t\tdata.object.left = this.left;\r\n\t\t\tdata.object.right = this.right;\r\n\t\t\tdata.object.top = this.top;\r\n\t\t\tdata.object.bottom = this.bottom;\r\n\t\t\tdata.object.near = this.near;\r\n\t\t\tdata.object.far = this.far;\r\n\r\n\t\t\tif ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction DirectionalLightShadow() {\r\n\r\n\t\tLightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n\t}\r\n\r\n\tDirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLightShadow,\r\n\r\n\t\tisDirectionalLightShadow: true,\r\n\r\n\t\tupdateMatrices: function ( light ) {\r\n\r\n\t\t\tLightShadow.prototype.updateMatrices.call( this, light );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction DirectionalLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'DirectionalLight';\r\n\r\n\t\tthis.position.copy( Object3D.DefaultUp );\r\n\t\tthis.updateMatrix();\r\n\r\n\t\tthis.target = new Object3D();\r\n\r\n\t\tthis.shadow = new DirectionalLightShadow();\r\n\r\n\t}\r\n\r\n\tDirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: DirectionalLight,\r\n\r\n\t\tisDirectionalLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.target = source.target.clone();\r\n\r\n\t\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AmbientLight( color, intensity ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'AmbientLight';\r\n\r\n\t\tthis.castShadow = undefined;\r\n\r\n\t}\r\n\r\n\tAmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: AmbientLight,\r\n\r\n\t\tisAmbientLight: true\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t */\r\n\r\n\tfunction RectAreaLight( color, intensity, width, height ) {\r\n\r\n\t\tLight.call( this, color, intensity );\r\n\r\n\t\tthis.type = 'RectAreaLight';\r\n\r\n\t\tthis.width = ( width !== undefined ) ? width : 10;\r\n\t\tthis.height = ( height !== undefined ) ? height : 10;\r\n\r\n\t}\r\n\r\n\tRectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: RectAreaLight,\r\n\r\n\t\tisRectAreaLight: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\tdata.object.width = this.width;\r\n\t\t\tdata.object.height = this.height;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction MaterialLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t\tthis.textures = {};\r\n\r\n\t}\r\n\r\n\tMaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: MaterialLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar textures = this.textures;\r\n\r\n\t\t\tfunction getTexture( name ) {\r\n\r\n\t\t\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn textures[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar material = new Materials[ json.type ]();\r\n\r\n\t\t\tif ( json.uuid !== undefined ) { material.uuid = json.uuid; }\r\n\t\t\tif ( json.name !== undefined ) { material.name = json.name; }\r\n\t\t\tif ( json.color !== undefined ) { material.color.setHex( json.color ); }\r\n\t\t\tif ( json.roughness !== undefined ) { material.roughness = json.roughness; }\r\n\t\t\tif ( json.metalness !== undefined ) { material.metalness = json.metalness; }\r\n\t\t\tif ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }\r\n\t\t\tif ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }\r\n\t\t\tif ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }\r\n\t\t\tif ( json.shininess !== undefined ) { material.shininess = json.shininess; }\r\n\t\t\tif ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }\r\n\t\t\tif ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }\r\n\t\t\tif ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }\r\n\t\t\tif ( json.fog !== undefined ) { material.fog = json.fog; }\r\n\t\t\tif ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }\r\n\t\t\tif ( json.blending !== undefined ) { material.blending = json.blending; }\r\n\t\t\tif ( json.combine !== undefined ) { material.combine = json.combine; }\r\n\t\t\tif ( json.side !== undefined ) { material.side = json.side; }\r\n\t\t\tif ( json.opacity !== undefined ) { material.opacity = json.opacity; }\r\n\t\t\tif ( json.transparent !== undefined ) { material.transparent = json.transparent; }\r\n\t\t\tif ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }\r\n\t\t\tif ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }\r\n\t\t\tif ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }\r\n\t\t\tif ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }\r\n\r\n\t\t\tif ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }\r\n\t\t\tif ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }\r\n\t\t\tif ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }\r\n\t\t\tif ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }\r\n\t\t\tif ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }\r\n\t\t\tif ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }\r\n\t\t\tif ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }\r\n\t\t\tif ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }\r\n\r\n\t\t\tif ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }\r\n\t\t\tif ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }\r\n\t\t\tif ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }\r\n\t\t\tif ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }\r\n\r\n\t\t\tif ( json.rotation !== undefined ) { material.rotation = json.rotation; }\r\n\r\n\t\t\tif ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }\r\n\t\t\tif ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }\r\n\t\t\tif ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }\r\n\t\t\tif ( json.scale !== undefined ) { material.scale = json.scale; }\r\n\r\n\t\t\tif ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }\r\n\t\t\tif ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }\r\n\t\t\tif ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }\r\n\r\n\t\t\tif ( json.skinning !== undefined ) { material.skinning = json.skinning; }\r\n\t\t\tif ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }\r\n\t\t\tif ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }\r\n\t\t\tif ( json.dithering !== undefined ) { material.dithering = json.dithering; }\r\n\r\n\t\t\tif ( json.visible !== undefined ) { material.visible = json.visible; }\r\n\r\n\t\t\tif ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }\r\n\r\n\t\t\tif ( json.userData !== undefined ) { material.userData = json.userData; }\r\n\r\n\t\t\t// Shader Material\r\n\r\n\t\t\tif ( json.uniforms !== undefined ) {\r\n\r\n\t\t\t\tfor ( var name in json.uniforms ) {\r\n\r\n\t\t\t\t\tvar uniform = json.uniforms[ name ];\r\n\r\n\t\t\t\t\tmaterial.uniforms[ name ] = {};\r\n\r\n\t\t\t\t\tswitch ( uniform.type ) {\r\n\r\n\t\t\t\t\t\tcase 't':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v2':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'v4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'm3':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\r\n\r\n\t\t\t\t\t\tcase 'm4':\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.defines !== undefined ) { material.defines = json.defines; }\r\n\t\t\tif ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }\r\n\t\t\tif ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }\r\n\r\n\t\t\tif ( json.extensions !== undefined ) {\r\n\r\n\t\t\t\tfor ( var key in json.extensions ) {\r\n\r\n\t\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Deprecated\r\n\r\n\t\t\tif ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading\r\n\r\n\t\t\t// for PointsMaterial\r\n\r\n\t\t\tif ( json.size !== undefined ) { material.size = json.size; }\r\n\t\t\tif ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }\r\n\r\n\t\t\t// maps\r\n\r\n\t\t\tif ( json.map !== undefined ) { material.map = getTexture( json.map ); }\r\n\t\t\tif ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }\r\n\r\n\t\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\t\tmaterial.alphaMap = getTexture( json.alphaMap );\r\n\t\t\t\tmaterial.transparent = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }\r\n\t\t\tif ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }\r\n\r\n\t\t\tif ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }\r\n\t\t\tif ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }\r\n\t\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }\r\n\t\t\tif ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }\r\n\t\t\tif ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }\r\n\r\n\t\t\tif ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }\r\n\t\t\tif ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }\r\n\r\n\t\t\tif ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }\r\n\t\t\tif ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }\r\n\r\n\t\t\tif ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }\r\n\r\n\t\t\tif ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }\r\n\t\t\tif ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }\r\n\r\n\t\t\tif ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }\r\n\t\t\tif ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }\r\n\r\n\t\t\tif ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }\r\n\t\t\tif ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }\r\n\r\n\t\t\tif ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }\r\n\t\t\tif ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }\r\n\r\n\t\t\tif ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }\r\n\r\n\t\t\tif ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }\r\n\t\t\tif ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t},\r\n\r\n\t\tsetTextures: function ( value ) {\r\n\r\n\t\t\tthis.textures = value;\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Don McCurdy / https://www.donmccurdy.com\r\n\t */\r\n\r\n\tvar LoaderUtils = {\r\n\r\n\t\tdecodeText: function ( array ) {\r\n\r\n\t\t\tif ( typeof TextDecoder !== 'undefined' ) {\r\n\r\n\t\t\t\treturn new TextDecoder().decode( array );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\r\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\r\n\r\n\t\t\tvar s = '';\r\n\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t// Implicitly assumes little-endian.\r\n\t\t\t\ts += String.fromCharCode( array[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\t// merges multi-byte utf-8 characters.\r\n\r\n\t\t\t\treturn decodeURIComponent( escape( s ) );\r\n\r\n\t\t\t} catch ( e ) { // see #16358\r\n\r\n\t\t\t\treturn s;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tvar index = url.lastIndexOf( '/' );\r\n\r\n\t\t\tif ( index === - 1 ) { return './'; }\r\n\r\n\t\t\treturn url.substr( 0, index + 1 );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferGeometry() {\r\n\r\n\t\tBufferGeometry.call( this );\r\n\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.maxInstancedCount = undefined;\r\n\r\n\t}\r\n\r\n\tInstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferGeometry,\r\n\r\n\t\tisInstancedBufferGeometry: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferGeometry.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.maxInstancedCount = source.maxInstancedCount;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function () {\r\n\r\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.maxInstancedCount = this.maxInstancedCount;\r\n\r\n\t\t\tdata.isInstancedBufferGeometry = true;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {\r\n\r\n\t\tif ( typeof ( normalized ) === 'number' ) {\r\n\r\n\t\t\tmeshPerAttribute = normalized;\r\n\r\n\t\t\tnormalized = false;\r\n\r\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\r\n\r\n\t\t}\r\n\r\n\t\tBufferAttribute.call( this, array, itemSize, normalized );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {\r\n\r\n\t\tconstructor: InstancedBufferAttribute,\r\n\r\n\t\tisInstancedBufferAttribute: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tBufferAttribute.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ()\t{\r\n\r\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call( this );\r\n\r\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\t\tdata.isInstancedBufferAttribute = true;\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction BufferGeometryLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tBufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: BufferGeometryLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( scope.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\r\n\r\n\t\t\tvar index = json.data.index;\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar attributes = json.data.attributes;\r\n\r\n\t\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\r\n\t\t\t\tvar bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\r\n\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\r\n\t\t\t\tgeometry.setAttribute( key, bufferAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = json.data.morphAttributes;\r\n\r\n\t\t\tif ( morphAttributes ) {\r\n\r\n\t\t\t\tfor ( var key in morphAttributes ) {\r\n\r\n\t\t\t\t\tvar attributeArray = morphAttributes[ key ];\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar attribute = attributeArray[ i ];\r\n\t\t\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\t\t\t\tvar bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\r\n\t\t\t\t\t\tif ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }\r\n\t\t\t\t\t\tarray.push( bufferAttribute );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.morphAttributes[ key ] = array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\r\n\r\n\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\tgeometry.morphTargetsRelative = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\t\tvar center = new Vector3();\r\n\r\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.name ) { geometry.name = json.name; }\r\n\t\t\tif ( json.userData ) { geometry.userData = json.userData; }\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TYPED_ARRAYS = {\r\n\t\tInt8Array: Int8Array,\r\n\t\tUint8Array: Uint8Array,\r\n\t\t// Workaround for IE11 pre KB2929437. See #11440\r\n\t\tUint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,\r\n\t\tInt16Array: Int16Array,\r\n\t\tUint16Array: Uint16Array,\r\n\t\tInt32Array: Int32Array,\r\n\t\tUint32Array: Uint32Array,\r\n\t\tFloat32Array: Float32Array,\r\n\t\tFloat64Array: Float64Array\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction ObjectLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ObjectLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\t\t\tthis.resourcePath = this.resourcePath || path;\r\n\r\n\t\t\tvar loader = new FileLoader( scope.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json = null;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\tif ( onError !== undefined ) { onError( error ); }\r\n\r\n\t\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\r\n\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.parse( json, onLoad );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json, onLoad ) {\r\n\r\n\t\t\tvar shapes = this.parseShape( json.shapes );\r\n\t\t\tvar geometries = this.parseGeometries( json.geometries, shapes );\r\n\r\n\t\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tvar textures = this.parseTextures( json.textures, images );\r\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\t\tif ( json.animations ) {\r\n\r\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\t\tif ( onLoad !== undefined ) { onLoad( object ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t},\r\n\r\n\t\tparseShape: function ( json ) {\r\n\r\n\t\t\tvar shapes = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar shape = new Shape().fromJSON( json[ i ] );\r\n\r\n\t\t\t\t\tshapes[ shape.uuid ] = shape;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t},\r\n\r\n\t\tparseGeometries: function ( json, shapes ) {\r\n\r\n\t\t\tvar geometries = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar geometry;\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ConeGeometry':\r\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'TubeGeometry':\r\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\r\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.closed\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'LatheGeometry':\r\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\r\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.vertices,\r\n\t\t\t\t\t\t\t\tdata.indices,\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.details\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'ShapeGeometry':\r\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.curveSegments\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\r\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\r\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tvar geometryShapes = [];\r\n\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar shape = shapes[ data.shapes[ j ] ];\r\n\r\n\t\t\t\t\t\t\t\tgeometryShapes.push( shape );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\r\n\r\n\t\t\t\t\t\t\tif ( extrudePath !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tgeometry = new Geometries[ data.type ](\r\n\t\t\t\t\t\t\t\tgeometryShapes,\r\n\t\t\t\t\t\t\t\tdata.options\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'BufferGeometry':\r\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\r\n\r\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\t\tif ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {\r\n\r\n\t\t\t\t\t\t\t\tvar geometryLoader = new THREE.LegacyJSONLoader();\r\n\t\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data, this.resourcePath ).geometry;\r\n\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type \"Geometry\".' );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) { geometry.name = data.name; }\r\n\t\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }\r\n\r\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometries;\r\n\r\n\t\t},\r\n\r\n\t\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\t\tvar cache = {}; // MultiMaterial\r\n\t\t\tvar materials = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tvar loader = new MaterialLoader();\r\n\t\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.type === 'MultiMaterial' ) {\r\n\r\n\t\t\t\t\t\t// Deprecated\r\n\r\n\t\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0; j < data.materials.length; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar material = data.materials[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = array;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn materials;\r\n\r\n\t\t},\r\n\r\n\t\tparseAnimations: function ( json ) {\r\n\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tvar clip = AnimationClip.parse( data );\r\n\r\n\t\t\t\tif ( data.uuid !== undefined ) { clip.uuid = data.uuid; }\r\n\r\n\t\t\t\tanimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn animations;\r\n\r\n\t\t},\r\n\r\n\t\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\t\tvar scope = this;\r\n\t\t\tvar images = {};\r\n\r\n\t\t\tfunction loadImage( url ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, undefined, function () {\r\n\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\t\tvar manager = new LoadingManager( onLoad );\r\n\r\n\t\t\t\tvar loader = new ImageLoader( manager );\r\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\t\tfor ( var i = 0, il = json.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar image = json[ i ];\r\n\t\t\t\t\tvar url = image.url;\r\n\r\n\t\t\t\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\t\t\t\t// load array of images e.g CubeTexture\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = [];\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = url.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar currentUrl = url[ j ];\r\n\r\n\t\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;\r\n\r\n\t\t\t\t\t\t\timages[ image.uuid ].push( loadImage( path ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// load single image\r\n\r\n\t\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;\r\n\r\n\t\t\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn images;\r\n\r\n\t\t},\r\n\r\n\t\tparseTextures: function ( json, images ) {\r\n\r\n\t\t\tfunction parseConstant( value, type ) {\r\n\r\n\t\t\t\tif ( typeof value === 'number' ) { return value; }\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\t\treturn type[ value ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tif ( json !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar texture;\r\n\r\n\t\t\t\t\tif ( Array.isArray( images[ data.image ] ) ) {\r\n\r\n\t\t\t\t\t\ttexture = new CubeTexture( images[ data.image ] );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ttexture = new Texture( images[ data.image ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\t\tif ( data.name !== undefined ) { texture.name = data.name; }\r\n\r\n\t\t\t\t\tif ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }\r\n\r\n\t\t\t\t\tif ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }\r\n\t\t\t\t\tif ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }\r\n\t\t\t\t\tif ( data.center !== undefined ) { texture.center.fromArray( data.center ); }\r\n\t\t\t\t\tif ( data.rotation !== undefined ) { texture.rotation = data.rotation; }\r\n\r\n\t\t\t\t\tif ( data.wrap !== undefined ) {\r\n\r\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\r\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.format !== undefined ) { texture.format = data.format; }\r\n\t\t\t\t\tif ( data.type !== undefined ) { texture.type = data.type; }\r\n\t\t\t\t\tif ( data.encoding !== undefined ) { texture.encoding = data.encoding; }\r\n\r\n\t\t\t\t\tif ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }\r\n\t\t\t\t\tif ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }\r\n\t\t\t\t\tif ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }\r\n\r\n\t\t\t\t\tif ( data.flipY !== undefined ) { texture.flipY = data.flipY; }\r\n\r\n\t\t\t\t\tif ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }\r\n\t\t\t\t\tif ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }\r\n\r\n\t\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn textures;\r\n\r\n\t\t},\r\n\r\n\t\tparseObject: function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) { return undefined; }\r\n\r\n\t\t\t\tif ( Array.isArray( name ) ) {\r\n\r\n\t\t\t\t\tvar array = [];\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = name.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar uuid = name[ i ];\r\n\r\n\t\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tarray.push( materials[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new Scene();\r\n\r\n\t\t\t\t\tif ( data.background !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\r\n\r\n\t\t\t\t\t\t\tobject.background = new Color( data.background );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( data.fog !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\r\n\r\n\t\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\r\n\r\n\t\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.focus !== undefined ) { object.focus = data.focus; }\r\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\r\n\t\t\t\t\tif ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }\r\n\t\t\t\t\tif ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }\r\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.zoom !== undefined ) { object.zoom = data.zoom; }\r\n\t\t\t\t\tif ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'RectAreaLight':\r\n\r\n\t\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SkinnedMesh':\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'InstancedMesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\t\t\t\t\tvar count = data.count;\r\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\r\n\r\n\t\t\t\t\tobject = new InstancedMesh( geometry, material, count );\r\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineLoop':\r\n\r\n\t\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LineSegments':\r\n\r\n\t\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) { object.name = data.name; }\r\n\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tobject.matrix.fromArray( data.matrix );\r\n\r\n\t\t\t\tif ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }\r\n\t\t\t\tif ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) { object.position.fromArray( data.position ); }\r\n\t\t\t\tif ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }\r\n\t\t\t\tif ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }\r\n\t\t\t\tif ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }\r\n\t\t\tif ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }\r\n\r\n\t\t\tif ( data.shadow ) {\r\n\r\n\t\t\t\tif ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }\r\n\t\t\t\tif ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }\r\n\t\t\t\tif ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }\r\n\t\t\t\tif ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.visible !== undefined ) { object.visible = data.visible; }\r\n\t\t\tif ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }\r\n\t\t\tif ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }\r\n\t\t\tif ( data.userData !== undefined ) { object.userData = data.userData; }\r\n\t\t\tif ( data.layers !== undefined ) { object.layers.mask = data.layers; }\r\n\r\n\t\t\tif ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tvar children = data.children;\r\n\r\n\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tif ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar TEXTURE_MAPPING = {\r\n\t\tUVMapping: UVMapping,\r\n\t\tCubeReflectionMapping: CubeReflectionMapping,\r\n\t\tCubeRefractionMapping: CubeRefractionMapping,\r\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\r\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\r\n\t\tSphericalReflectionMapping: SphericalReflectionMapping,\r\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\r\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\r\n\t};\r\n\r\n\tvar TEXTURE_WRAPPING = {\r\n\t\tRepeatWrapping: RepeatWrapping,\r\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\r\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\r\n\t};\r\n\r\n\tvar TEXTURE_FILTER = {\r\n\t\tNearestFilter: NearestFilter,\r\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\r\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\r\n\t\tLinearFilter: LinearFilter,\r\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\r\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\r\n\t};\r\n\r\n\t/**\r\n\t * @author thespite / http://clicktorelease.com/\r\n\t */\r\n\r\n\r\n\tfunction ImageBitmapLoader( manager ) {\r\n\r\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof fetch === 'undefined' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t\tthis.options = undefined;\r\n\r\n\t}\r\n\r\n\tImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: ImageBitmapLoader,\r\n\r\n\t\tsetOptions: function setOptions( options ) {\r\n\r\n\t\t\tthis.options = options;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tif ( url === undefined ) { url = ''; }\r\n\r\n\t\t\tif ( this.path !== undefined ) { url = this.path + url; }\r\n\r\n\t\t\turl = this.manager.resolveURL( url );\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar cached = Cache.get( url );\r\n\r\n\t\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tif ( onLoad ) { onLoad( cached ); }\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t\treturn cached;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfetch( url ).then( function ( res ) {\r\n\r\n\t\t\t\treturn res.blob();\r\n\r\n\t\t\t} ).then( function ( blob ) {\r\n\r\n\t\t\t\tif ( scope.options === undefined ) {\r\n\r\n\t\t\t\t\t// Workaround for FireFox. It causes an error if you pass options.\r\n\t\t\t\t\treturn createImageBitmap( blob );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn createImageBitmap( blob, scope.options );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} ).then( function ( imageBitmap ) {\r\n\r\n\t\t\t\tCache.add( url, imageBitmap );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( imageBitmap ); }\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} ).catch( function ( e ) {\r\n\r\n\t\t\t\tif ( onError ) { onError( e ); }\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\r\n\t **/\r\n\r\n\tfunction ShapePath() {\r\n\r\n\t\tthis.type = 'ShapePath';\r\n\r\n\t\tthis.color = new Color();\r\n\r\n\t\tthis.subPaths = [];\r\n\t\tthis.currentPath = null;\r\n\r\n\t}\r\n\r\n\tObject.assign( ShapePath.prototype, {\r\n\r\n\t\tmoveTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath = new Path();\r\n\t\t\tthis.subPaths.push( this.currentPath );\r\n\t\t\tthis.currentPath.moveTo( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlineTo: function ( x, y ) {\r\n\r\n\t\t\tthis.currentPath.lineTo( x, y );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsplineThru: function ( pts ) {\r\n\r\n\t\t\tthis.currentPath.splineThru( pts );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoShapes: function ( isCCW, noHoles ) {\r\n\r\n\t\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\t\tvar shapes = [];\r\n\r\n\t\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\t\tvar tmpShape = new Shape();\r\n\t\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\t\tvar inside = false;\r\n\t\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\t\tvar edgeLowPt = inPolygon[ p ];\r\n\t\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\t// not parallel\r\n\t\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\t{ continue; }\r\n\r\n\t\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\t{ return\ttrue; }\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\t{ return\ttrue; }\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\t{ continue; }\r\n\t\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\t{ continue; }\t\t\t// parallel\r\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\t{ return\ttrue; }\t// inPt: Point on contour !\r\n\t\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tinside;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\r\n\r\n\t\t\tvar subPaths = this.subPaths;\r\n\t\t\tif ( subPaths.length === 0 ) { return []; }\r\n\r\n\t\t\tif ( noHoles === true )\t{ return\ttoShapesNoHoles( subPaths ); }\r\n\r\n\r\n\t\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\t\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\t\ttmpShape = new Shape();\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\treturn shapes;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\t\tvar betterShapeHoles = [];\r\n\t\t\tvar newShapes = [];\r\n\t\t\tvar newShapeHoles = [];\r\n\t\t\tvar mainIdx = 0;\r\n\t\t\tvar tmpPoints;\r\n\r\n\t\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\t\tif ( solid ) {\r\n\r\n\t\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\t{ mainIdx ++; }\r\n\r\n\t\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\r\n\t\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\t\tif ( holesFirst )\t{ mainIdx ++; }\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\t\tif ( ! newShapes[ 0 ] )\t{ return\ttoShapesNoHoles( subPaths ); }\r\n\r\n\r\n\t\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\t\tvar ambiguous = false;\r\n\t\t\t\tvar toChange = [];\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\t{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }\r\n\t\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\t\tif ( ! ambiguous )\t{ newShapeHoles = betterShapeHoles; }\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tmpHoles;\r\n\r\n\t\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\r\n\tfunction Font( data ) {\r\n\r\n\t\tthis.type = 'Font';\r\n\r\n\t\tthis.data = data;\r\n\r\n\t}\r\n\r\n\tObject.assign( Font.prototype, {\r\n\r\n\t\tisFont: true,\r\n\r\n\t\tgenerateShapes: function ( text, size ) {\r\n\r\n\t\t\tif ( size === undefined ) { size = 100; }\r\n\r\n\t\t\tvar shapes = [];\r\n\t\t\tvar paths = createPaths( text, size, this.data );\r\n\r\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tfunction createPaths( text, size, data ) {\r\n\r\n\t\tvar chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988\r\n\t\tvar scale = size / data.resolution;\r\n\t\tvar line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\r\n\r\n\t\tvar paths = [];\r\n\r\n\t\tvar offsetX = 0, offsetY = 0;\r\n\r\n\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\tvar char = chars[ i ];\r\n\r\n\t\t\tif ( char === '\\n' ) {\r\n\r\n\t\t\t\toffsetX = 0;\r\n\t\t\t\toffsetY -= line_height;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar ret = createPath( char, scale, offsetX, offsetY, data );\r\n\t\t\t\toffsetX += ret.offsetX;\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn paths;\r\n\r\n\t}\r\n\r\n\tfunction createPath( char, scale, offsetX, offsetY, data ) {\r\n\r\n\t\tvar glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\r\n\r\n\t\tif ( ! glyph ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar path = new ShapePath();\r\n\r\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\r\n\r\n\t\tif ( glyph.o ) {\r\n\r\n\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\r\n\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\r\n\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\r\n\r\n\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn { offsetX: glyph.ha * scale, path: path };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction FontLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tFontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: FontLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\t\tvar json;\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar font = scope.parse( json );\r\n\r\n\t\t\t\tif ( onLoad ) { onLoad( font ); }\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t},\r\n\r\n\t\tparse: function ( json ) {\r\n\r\n\t\t\treturn new Font( json );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _context;\r\n\r\n\tvar AudioContext = {\r\n\r\n\t\tgetContext: function () {\r\n\r\n\t\t\tif ( _context === undefined ) {\r\n\r\n\t\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn _context;\r\n\r\n\t\t},\r\n\r\n\t\tsetContext: function ( value ) {\r\n\r\n\t\t\t_context = value;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction AudioLoader( manager ) {\r\n\r\n\t\tLoader.call( this, manager );\r\n\r\n\t}\r\n\r\n\tAudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\r\n\r\n\t\tconstructor: AudioLoader,\r\n\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\t\tvar loader = new FileLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\r\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\r\n\t\t\t\tvar bufferCopy = buffer.slice( 0 );\r\n\r\n\t\t\t\tvar context = AudioContext.getContext();\r\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\r\n\r\n\t\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Primary reference:\r\n\t *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\t *\r\n\t * Secondary reference:\r\n\t *   https://www.ppsloan.org/publications/StupidSH36.pdf\r\n\t */\r\n\r\n\t// 3-band SH defined by 9 coefficients\r\n\r\n\tfunction SphericalHarmonics3() {\r\n\r\n\t\tthis.coefficients = [];\r\n\r\n\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.coefficients.push( new Vector3() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( SphericalHarmonics3.prototype, {\r\n\r\n\t\tisSphericalHarmonics3: true,\r\n\r\n\t\tset: function ( coefficients ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tzero: function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// get the radiance in the direction of the normal\r\n\t\t// target is a Vector3\r\n\t\tgetAt: function ( normal, target ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\tvar coeff = this.coefficients;\r\n\r\n\t\t\t// band 0\r\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\r\n\r\n\t\t\t// band 1\r\n\t\t\ttarget.addScale( coeff[ 1 ], 0.488603 * y );\r\n\t\t\ttarget.addScale( coeff[ 2 ], 0.488603 * z );\r\n\t\t\ttarget.addScale( coeff[ 3 ], 0.488603 * x );\r\n\r\n\t\t\t// band 2\r\n\t\t\ttarget.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );\r\n\t\t\ttarget.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );\r\n\t\t\ttarget.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\r\n\t\t\ttarget.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );\r\n\t\t\ttarget.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\r\n\t\t// target is a Vector3\r\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\r\n\t\tgetIrradianceAt: function ( normal, target ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\tvar coeff = this.coefficients;\r\n\r\n\t\t\t// band 0\r\n\t\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\r\n\r\n\t\t\t// band 1\r\n\t\t\ttarget.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\r\n\t\t\ttarget.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );\r\n\t\t\ttarget.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );\r\n\r\n\t\t\t// band 2\r\n\t\t\ttarget.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\r\n\t\t\ttarget.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );\r\n\t\t\ttarget.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\r\n\t\t\ttarget.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );\r\n\t\t\ttarget.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\r\n\r\n\t\t\treturn target;\r\n\r\n\t\t},\r\n\r\n\t\tadd: function ( sh ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\r\n\t\tscale: function ( s ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].multiplyScalar( s );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tlerp: function ( sh, alpha ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( sh ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( sh ) {\r\n\r\n\t\t\treturn this.set( sh.coefficients );\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tfromArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar coefficients = this.coefficients;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoArray: function ( array, offset ) {\r\n\r\n\t\t\tif ( array === undefined ) { array = []; }\r\n\t\t\tif ( offset === undefined ) { offset = 0; }\r\n\r\n\t\t\tvar coefficients = this.coefficients;\r\n\r\n\t\t\tfor ( var i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( SphericalHarmonics3, {\r\n\r\n\t\t// evaluate the basis functions\r\n\t\t// shBasis is an Array[ 9 ]\r\n\t\tgetBasisAt: function ( normal, shBasis ) {\r\n\r\n\t\t\t// normal is assumed to be unit length\r\n\r\n\t\t\tvar x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t\t\t// band 0\r\n\t\t\tshBasis[ 0 ] = 0.282095;\r\n\r\n\t\t\t// band 1\r\n\t\t\tshBasis[ 1 ] = 0.488603 * y;\r\n\t\t\tshBasis[ 2 ] = 0.488603 * z;\r\n\t\t\tshBasis[ 3 ] = 0.488603 * x;\r\n\r\n\t\t\t// band 2\r\n\t\t\tshBasis[ 4 ] = 1.092548 * x * y;\r\n\t\t\tshBasis[ 5 ] = 1.092548 * y * z;\r\n\t\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\r\n\t\t\tshBasis[ 7 ] = 1.092548 * x * z;\r\n\t\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * A LightProbe is a source of indirect-diffuse light\r\n\t */\r\n\r\n\tfunction LightProbe( sh, intensity ) {\r\n\r\n\t\tLight.call( this, undefined, intensity );\r\n\r\n\t\tthis.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();\r\n\r\n\t}\r\n\r\n\tLightProbe.prototype = Object.assign( Object.create( Light.prototype ), {\r\n\r\n\t\tconstructor: LightProbe,\r\n\r\n\t\tisLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLight.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.sh.copy( source.sh );\r\n\t\t\tthis.intensity = source.intensity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = Light.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction HemisphereLightProbe( skyColor, groundColor, intensity ) {\r\n\r\n\t\tLightProbe.call( this, undefined, intensity );\r\n\r\n\t\tvar color1 = new Color().set( skyColor );\r\n\t\tvar color2 = new Color().set( groundColor );\r\n\r\n\t\tvar sky = new Vector3( color1.r, color1.g, color1.b );\r\n\t\tvar ground = new Vector3( color2.r, color2.g, color2.b );\r\n\r\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\r\n\t\tvar c0 = Math.sqrt( Math.PI );\r\n\t\tvar c1 = c0 * Math.sqrt( 0.75 );\r\n\r\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\r\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\r\n\r\n\t}\r\n\r\n\tHemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\r\n\r\n\t\tconstructor: HemisphereLightProbe,\r\n\r\n\t\tisHemisphereLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) { // modifying colors not currently supported\r\n\r\n\t\t\tLightProbe.prototype.copy.call( this, source );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction AmbientLightProbe( color, intensity ) {\r\n\r\n\t\tLightProbe.call( this, undefined, intensity );\r\n\r\n\t\tvar color1 = new Color().set( color );\r\n\r\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\r\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\r\n\r\n\t}\r\n\r\n\tAmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {\r\n\r\n\t\tconstructor: AmbientLightProbe,\r\n\r\n\t\tisAmbientLightProbe: true,\r\n\r\n\t\tcopy: function ( source ) { // modifying color not currently supported\r\n\r\n\t\t\tLightProbe.prototype.copy.call( this, source );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttoJSON: function ( meta ) {\r\n\r\n\t\t\tvar data = LightProbe.prototype.toJSON.call( this, meta );\r\n\r\n\t\t\t// data.sh = this.sh.toArray(); // todo\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tvar _eyeRight = new Matrix4();\r\n\tvar _eyeLeft = new Matrix4();\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction StereoCamera() {\r\n\r\n\t\tthis.type = 'StereoCamera';\r\n\r\n\t\tthis.aspect = 1;\r\n\r\n\t\tthis.eyeSep = 0.064;\r\n\r\n\t\tthis.cameraL = new PerspectiveCamera();\r\n\t\tthis.cameraL.layers.enable( 1 );\r\n\t\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\t\tthis.cameraR = new PerspectiveCamera();\r\n\t\tthis.cameraR.layers.enable( 2 );\r\n\t\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n\t\tthis._cache = {\r\n\t\t\tfocus: null,\r\n\t\t\tfov: null,\r\n\t\t\taspect: null,\r\n\t\t\tnear: null,\r\n\t\t\tfar: null,\r\n\t\t\tzoom: null,\r\n\t\t\teyeSep: null\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( StereoCamera.prototype, {\r\n\r\n\t\tupdate: function ( camera ) {\r\n\r\n\t\t\tvar cache = this._cache;\r\n\r\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\r\n\t\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\r\n\t\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\r\n\r\n\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\tcache.focus = camera.focus;\r\n\t\t\t\tcache.fov = camera.fov;\r\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\r\n\t\t\t\tcache.near = camera.near;\r\n\t\t\t\tcache.far = camera.far;\r\n\t\t\t\tcache.zoom = camera.zoom;\r\n\t\t\t\tcache.eyeSep = this.eyeSep;\r\n\r\n\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\r\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\r\n\t\t\t\tvar ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\r\n\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\r\n\t\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\r\n\r\n\t\t\t\t// for left eye\r\n\r\n\t\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t// for right eye\r\n\r\n\t\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\r\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction Clock( autoStart ) {\r\n\r\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\r\n\t\tthis.running = false;\r\n\r\n\t}\r\n\r\n\tObject.assign( Clock.prototype, {\r\n\r\n\t\tstart: function () {\r\n\r\n\t\t\tthis.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\r\n\r\n\t\t\tthis.oldTime = this.startTime;\r\n\t\t\tthis.elapsedTime = 0;\r\n\t\t\tthis.running = true;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis.getElapsedTime();\r\n\t\t\tthis.running = false;\r\n\t\t\tthis.autoStart = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetElapsedTime: function () {\r\n\r\n\t\t\tthis.getDelta();\r\n\t\t\treturn this.elapsedTime;\r\n\r\n\t\t},\r\n\r\n\t\tgetDelta: function () {\r\n\r\n\t\t\tvar diff = 0;\r\n\r\n\t\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\t\tthis.start();\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.running ) {\r\n\r\n\t\t\t\tvar newTime = ( typeof performance === 'undefined' ? Date : performance ).now();\r\n\r\n\t\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn diff;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _position$2 = new Vector3();\r\n\tvar _quaternion$3 = new Quaternion();\r\n\tvar _scale$1 = new Vector3();\r\n\tvar _orientation = new Vector3();\r\n\r\n\tfunction AudioListener() {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'AudioListener';\r\n\r\n\t\tthis.context = AudioContext.getContext();\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\r\n\t\tthis.filter = null;\r\n\r\n\t\tthis.timeDelta = 0;\r\n\r\n\t\t// private\r\n\r\n\t\tthis._clock = new Clock();\r\n\r\n\t}\r\n\r\n\tAudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: AudioListener,\r\n\r\n\t\tgetInput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tremoveFilter: function ( ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\t\tthis.filter = null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.filter;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( value ) {\r\n\r\n\t\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filter = value;\r\n\t\t\tthis.gain.connect( this.filter );\r\n\t\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMasterVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetMasterVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\r\n\t\t\tthis.timeDelta = this._clock.getDelta();\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );\r\n\r\n\t\t\t_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );\r\n\r\n\t\t\tif ( listener.positionX ) {\r\n\r\n\t\t\t\t// code path for Chrome (see #14393)\r\n\r\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\r\n\r\n\t\t\t\tlistener.positionX.linearRampToValueAtTime( _position$2.x, endTime );\r\n\t\t\t\tlistener.positionY.linearRampToValueAtTime( _position$2.y, endTime );\r\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );\r\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );\r\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );\r\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );\r\n\t\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\r\n\t\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\r\n\t\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlistener.setPosition( _position$2.x, _position$2.y, _position$2.z );\r\n\t\t\t\tlistener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n\t */\r\n\r\n\tfunction Audio( listener ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.type = 'Audio';\r\n\r\n\t\tthis.listener = listener;\r\n\t\tthis.context = listener.context;\r\n\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( listener.getInput() );\r\n\r\n\t\tthis.autoplay = false;\r\n\r\n\t\tthis.buffer = null;\r\n\t\tthis.detune = 0;\r\n\t\tthis.loop = false;\r\n\t\tthis.loopStart = 0;\r\n\t\tthis.loopEnd = 0;\r\n\t\tthis.offset = 0;\r\n\t\tthis.duration = undefined;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.hasPlaybackControl = true;\r\n\t\tthis.sourceType = 'empty';\r\n\r\n\t\tthis._startedAt = 0;\r\n\t\tthis._pausedAt = 0;\r\n\r\n\t\tthis.filters = [];\r\n\r\n\t}\r\n\r\n\tAudio.prototype = Object.assign( Object.create( Object3D.prototype ), {\r\n\r\n\t\tconstructor: Audio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.gain;\r\n\r\n\t\t},\r\n\r\n\t\tsetNodeSource: function ( audioNode ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'audioNode';\r\n\t\t\tthis.source = audioNode;\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaElementSource: function ( mediaElement ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaNode';\r\n\t\t\tthis.source = this.context.createMediaElementSource( mediaElement );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetMediaStreamSource: function ( mediaStream ) {\r\n\r\n\t\t\tthis.hasPlaybackControl = false;\r\n\t\t\tthis.sourceType = 'mediaStreamNode';\r\n\t\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\r\n\t\t\tthis.connect();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetBuffer: function ( audioBuffer ) {\r\n\r\n\t\t\tthis.buffer = audioBuffer;\r\n\t\t\tthis.sourceType = 'buffer';\r\n\r\n\t\t\tif ( this.autoplay ) { this.play(); }\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tplay: function ( delay ) {\r\n\r\n\t\t\tif ( delay === undefined ) { delay = 0; }\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._startedAt = this.context.currentTime + delay;\r\n\r\n\t\t\tvar source = this.context.createBufferSource();\r\n\t\t\tsource.buffer = this.buffer;\r\n\t\t\tsource.loop = this.loop;\r\n\t\t\tsource.loopStart = this.loopStart;\r\n\t\t\tsource.loopEnd = this.loopEnd;\r\n\t\t\tsource.onended = this.onEnded.bind( this );\r\n\t\t\tsource.start( this._startedAt, this._pausedAt + this.offset, this.duration );\r\n\r\n\t\t\tthis.isPlaying = true;\r\n\r\n\t\t\tthis.source = source;\r\n\r\n\t\t\tthis.setDetune( this.detune );\r\n\t\t\tthis.setPlaybackRate( this.playbackRate );\r\n\r\n\t\t\treturn this.connect();\r\n\r\n\t\t},\r\n\r\n\t\tpause: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;\r\n\r\n\t\t\t\tthis.source.stop();\r\n\t\t\t\tthis.source.onended = null;\r\n\r\n\t\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pausedAt = 0;\r\n\r\n\t\t\tthis.source.stop();\r\n\t\t\tthis.source.onended = null;\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tdisconnect: function () {\r\n\r\n\t\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilters: function () {\r\n\r\n\t\t\treturn this.filters;\r\n\r\n\t\t},\r\n\r\n\t\tsetFilters: function ( value ) {\r\n\r\n\t\t\tif ( ! value ) { value = []; }\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.disconnect();\r\n\t\t\t\tthis.filters = value;\r\n\t\t\t\tthis.connect();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.filters = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDetune: function ( value ) {\r\n\r\n\t\t\tthis.detune = value;\r\n\r\n\t\t\tif ( this.source.detune === undefined ) { return; } // only set detune when available\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDetune: function () {\r\n\r\n\t\t\treturn this.detune;\r\n\r\n\t\t},\r\n\r\n\t\tgetFilter: function () {\r\n\r\n\t\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t\t},\r\n\r\n\t\tsetFilter: function ( filter ) {\r\n\r\n\t\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t\t},\r\n\r\n\t\tsetPlaybackRate: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.playbackRate = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetPlaybackRate: function () {\r\n\r\n\t\t\treturn this.playbackRate;\r\n\r\n\t\t},\r\n\r\n\t\tonEnded: function () {\r\n\r\n\t\t\tthis.isPlaying = false;\r\n\r\n\t\t},\r\n\r\n\t\tgetLoop: function () {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.loop;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( value ) {\r\n\r\n\t\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.loop = value;\r\n\r\n\t\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\t\tthis.source.loop = this.loop;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoopStart: function ( value ) {\r\n\r\n\t\t\tthis.loopStart = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoopEnd: function ( value ) {\r\n\r\n\t\t\tthis.loopEnd = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetVolume: function () {\r\n\r\n\t\t\treturn this.gain.gain.value;\r\n\r\n\t\t},\r\n\r\n\t\tsetVolume: function ( value ) {\r\n\r\n\t\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tvar _position$3 = new Vector3();\r\n\tvar _quaternion$4 = new Quaternion();\r\n\tvar _scale$2 = new Vector3();\r\n\tvar _orientation$1 = new Vector3();\r\n\r\n\tfunction PositionalAudio( listener ) {\r\n\r\n\t\tAudio.call( this, listener );\r\n\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.panningModel = 'HRTF';\r\n\t\tthis.panner.connect( this.gain );\r\n\r\n\t}\r\n\r\n\tPositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {\r\n\r\n\t\tconstructor: PositionalAudio,\r\n\r\n\t\tgetOutput: function () {\r\n\r\n\t\t\treturn this.panner;\r\n\r\n\t\t},\r\n\r\n\t\tgetRefDistance: function () {\r\n\r\n\t\t\treturn this.panner.refDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetRefDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.refDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetRolloffFactor: function () {\r\n\r\n\t\t\treturn this.panner.rolloffFactor;\r\n\r\n\t\t},\r\n\r\n\t\tsetRolloffFactor: function ( value ) {\r\n\r\n\t\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetDistanceModel: function () {\r\n\r\n\t\t\treturn this.panner.distanceModel;\r\n\r\n\t\t},\r\n\r\n\t\tsetDistanceModel: function ( value ) {\r\n\r\n\t\t\tthis.panner.distanceModel = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetMaxDistance: function () {\r\n\r\n\t\t\treturn this.panner.maxDistance;\r\n\r\n\t\t},\r\n\r\n\t\tsetMaxDistance: function ( value ) {\r\n\r\n\t\t\tthis.panner.maxDistance = value;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\r\n\r\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\r\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\r\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }\r\n\r\n\t\t\tthis.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );\r\n\r\n\t\t\t_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );\r\n\r\n\t\t\tvar panner = this.panner;\r\n\r\n\t\t\tif ( panner.positionX ) {\r\n\r\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\r\n\r\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\r\n\r\n\t\t\t\tpanner.positionX.linearRampToValueAtTime( _position$3.x, endTime );\r\n\t\t\t\tpanner.positionY.linearRampToValueAtTime( _position$3.y, endTime );\r\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );\r\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );\r\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );\r\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tpanner.setPosition( _position$3.x, _position$3.y, _position$3.z );\r\n\t\t\t\tpanner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AudioAnalyser( audio, fftSize ) {\r\n\r\n\t\tthis.analyser = audio.context.createAnalyser();\r\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\t\taudio.getOutput().connect( this.analyser );\r\n\r\n\t}\r\n\r\n\tObject.assign( AudioAnalyser.prototype, {\r\n\r\n\t\tgetFrequencyData: function () {\r\n\r\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\t\treturn this.data;\r\n\r\n\t\t},\r\n\r\n\t\tgetAverageFrequency: function () {\r\n\r\n\t\t\tvar value = 0, data = this.getFrequencyData();\r\n\r\n\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tvalue += data[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value / data.length;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Buffered scene graph property that allows weighted accumulation.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction PropertyMixer( binding, typeName, valueSize ) {\r\n\r\n\t\tthis.binding = binding;\r\n\t\tthis.valueSize = valueSize;\r\n\r\n\t\tvar bufferType = Float64Array,\r\n\t\t\tmixFunction;\r\n\r\n\t\tswitch ( typeName ) {\r\n\r\n\t\t\tcase 'quaternion':\r\n\t\t\t\tmixFunction = this._slerp;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'bool':\r\n\t\t\t\tbufferType = Array;\r\n\t\t\t\tmixFunction = this._select;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t\t}\r\n\r\n\t\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t\t//\r\n\t\t// interpolators can use .buffer as their .result\r\n\t\t// the data then goes to 'incoming'\r\n\t\t//\r\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t\t// the cumulative result and are compared to detect\r\n\t\t// changes\r\n\t\t//\r\n\t\t// 'orig' stores the original state of the property\r\n\r\n\t\tthis._mixBufferRegion = mixFunction;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tthis.useCount = 0;\r\n\t\tthis.referenceCount = 0;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyMixer.prototype, {\r\n\r\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\t\taccumulate: function ( accuIndex, weight ) {\r\n\r\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrentWeight = weight;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\t\tcurrentWeight += weight;\r\n\t\t\t\tvar mix = weight / currentWeight;\r\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\t\tapply: function ( accuIndex ) {\r\n\r\n\t\t\tvar stride = this.valueSize,\r\n\t\t\t\tbuffer = this.buffer,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\t\tbinding = this.binding;\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remember the state of the bound property and copy it to both accus\r\n\t\tsaveOriginalState: function () {\r\n\r\n\t\t\tvar binding = this.binding;\r\n\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\r\n\t\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\t},\r\n\r\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\t\trestoreOriginalState: function () {\r\n\r\n\t\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// mix functions\r\n\r\n\t\t_select: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_slerp: function ( buffer, dstOffset, srcOffset, t ) {\r\n\r\n\t\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t\t},\r\n\r\n\t\t_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\t\tvar s = 1 - t;\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A reference to a real property in the scene graph.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\t// Characters [].:/ are reserved for track binding syntax.\r\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\r\n\tvar _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\r\n\r\n\t// Attempts to allow node names from any language. ES5's `\\w` regexp matches\r\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\r\n\t// instead, we exclude reserved characters and match everything else.\r\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\r\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\r\n\r\n\t// Parent directories, delimited by '/' or ':'. Currently unused, but must\r\n\t// be matched to parse the rest of the track name.\r\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\r\n\r\n\t// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\r\n\tvar _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\r\n\r\n\t// Object on target node, and accessor. May not contain reserved\r\n\t// characters. Accessor may contain any character except closing bracket.\r\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\r\n\r\n\t// Property and accessor. May not contain reserved characters. Accessor may\r\n\t// contain any non-bracket characters.\r\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\r\n\r\n\tvar _trackRe = new RegExp( ''\r\n\t\t+ '^'\r\n\t\t+ _directoryRe\r\n\t\t+ _nodeRe\r\n\t\t+ _objectRe\r\n\t\t+ _propertyRe\r\n\t\t+ '$'\r\n\t);\r\n\r\n\tvar _supportedObjectNames = [ 'material', 'materials', 'bones' ];\r\n\r\n\tfunction Composite( targetGroup, path, optionalParsedPath ) {\r\n\r\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis._targetGroup = targetGroup;\r\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n\t}\r\n\r\n\tObject.assign( Composite.prototype, {\r\n\r\n\t\tgetValue: function ( array, offset ) {\r\n\r\n\t\t\tthis.bind(); // bind all binding\r\n\r\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t\t// and only call .getValue on the first\r\n\t\t\tif ( binding !== undefined ) { binding.getValue( array, offset ); }\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function ( array, offset ) {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].bind();\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tvar bindings = this._bindings;\r\n\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\r\n\tfunction PropertyBinding( rootNode, path, parsedPath ) {\r\n\r\n\t\tthis.path = path;\r\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\r\n\r\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\t\tthis.rootNode = rootNode;\r\n\r\n\t}\r\n\r\n\tObject.assign( PropertyBinding, {\r\n\r\n\t\tComposite: Composite,\r\n\r\n\t\tcreate: function ( root, path, parsedPath ) {\r\n\r\n\t\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\r\n\r\n\t\t\t\treturn new PropertyBinding( root, path, parsedPath );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Replaces spaces with underscores and removes unsupported characters from\r\n\t\t * node names, to ensure compatibility with parseTrackName().\r\n\t\t *\r\n\t\t * @param {string} name Node name to be sanitized.\r\n\t\t * @return {string}\r\n\t\t */\r\n\t\tsanitizeNodeName: function ( name ) {\r\n\r\n\t\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\r\n\r\n\t\t},\r\n\r\n\t\tparseTrackName: function ( trackName ) {\r\n\r\n\t\t\tvar matches = _trackRe.exec( trackName );\r\n\r\n\t\t\tif ( ! matches ) {\r\n\r\n\t\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar results = {\r\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\r\n\t\t\t\tnodeName: matches[ 2 ],\r\n\t\t\t\tobjectName: matches[ 3 ],\r\n\t\t\t\tobjectIndex: matches[ 4 ],\r\n\t\t\t\tpropertyName: matches[ 5 ], // required\r\n\t\t\t\tpropertyIndex: matches[ 6 ]\r\n\t\t\t};\r\n\r\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\r\n\r\n\t\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\r\n\r\n\t\t\t\tvar objectName = results.nodeName.substring( lastDot + 1 );\r\n\r\n\t\t\t\t// Object names must be checked against a whitelist. Otherwise, there\r\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\r\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\r\n\t\t\t\t// include '.' characters).\r\n\t\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\r\n\r\n\t\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\r\n\t\t\t\t\tresults.objectName = objectName;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\r\n\t\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn results;\r\n\r\n\t\t},\r\n\r\n\t\tfindNode: function ( root, nodeName ) {\r\n\r\n\t\t\tif ( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\t\t\treturn root;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into skeleton bones.\r\n\t\t\tif ( root.skeleton ) {\r\n\r\n\t\t\t\tvar bone = root.skeleton.getBoneByName( nodeName );\r\n\r\n\t\t\t\tif ( bone !== undefined ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// search into node subtree.\r\n\t\t\tif ( root.children ) {\r\n\r\n\t\t\t\tvar searchNodeSubtree = function ( children ) {\r\n\r\n\t\t\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar childNode = children[ i ];\r\n\r\n\t\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\t\t\tif ( result ) { return result; }\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\t\t\tif ( subTreeNode ) {\r\n\r\n\t\t\t\t\treturn subTreeNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t\t// these are used to \"bind\" a nonexistent property\r\n\t\t_getValue_unavailable: function () {},\r\n\t\t_setValue_unavailable: function () {},\r\n\r\n\t\tBindingType: {\r\n\t\t\tDirect: 0,\r\n\t\t\tEntireArray: 1,\r\n\t\t\tArrayElement: 2,\r\n\t\t\tHasFromToArray: 3\r\n\t\t},\r\n\r\n\t\tVersioning: {\r\n\t\t\tNone: 0,\r\n\t\t\tNeedsUpdate: 1,\r\n\t\t\tMatrixWorldNeedsUpdate: 2\r\n\t\t},\r\n\r\n\t\tGetterByBindingType: [\r\n\r\n\t\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t],\r\n\r\n\t\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t\t[\r\n\t\t\t\t// Direct\r\n\r\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// EntireArray\r\n\r\n\t\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// ArrayElement\r\n\r\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t], [\r\n\r\n\t\t\t\t// HasToFromArray\r\n\r\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t]\r\n\r\n\t\t],\r\n\r\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t\t// prototype version of these methods with one that represents\r\n\t\t\t// the bound state. When the property is not found, the methods\r\n\t\t\t// become no-ops.\r\n\r\n\t\t},\r\n\r\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\t\tthis.bind();\r\n\t\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t\t},\r\n\r\n\t\t// create getter / setter pair for a property in the scene graph\r\n\t\tbind: function () {\r\n\r\n\t\t\tvar targetObject = this.node,\r\n\t\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\t\tthis.node = targetObject;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// set fail state so we can just 'return' on error\r\n\t\t\tthis.getValue = this._getValue_unavailable;\r\n\t\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n\t\t\t// ensure there is a value node\r\n\t\t\tif ( ! targetObject ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectName ) {\r\n\r\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// resolve property\r\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\t\tif ( nodeProperty === undefined ) {\r\n\r\n\t\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\r\n\t\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine versioning scheme\r\n\t\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\r\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// determine how the property gets bound\r\n\t\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\t\tif ( propertyIndex !== undefined ) {\r\n\r\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\r\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\r\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else if ( Array.isArray( nodeProperty ) ) {\r\n\r\n\t\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// select getter / setter\r\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t\t},\r\n\r\n\t\tunbind: function () {\r\n\r\n\t\t\tthis.node = null;\r\n\r\n\t\t\t// back to the prototype version of getValue / setValue\r\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\t\tthis.getValue = this._getValue_unbound;\r\n\t\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//!\\ DECLARE ALIAS AFTER assign prototype !\r\n\tObject.assign( PropertyBinding.prototype, {\r\n\r\n\t\t// initial state of these methods that calls 'bind'\r\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\r\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue,\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * A group of objects that receives a shared animation state.\r\n\t *\r\n\t * Usage:\r\n\t *\r\n\t *  - Add objects you would otherwise pass as 'root' to the\r\n\t *    constructor or the .clipAction method of AnimationMixer.\r\n\t *\r\n\t *  - Instead pass this object as 'root'.\r\n\t *\r\n\t *  - You can also add and remove objects later when the mixer\r\n\t *    is running.\r\n\t *\r\n\t * Note:\r\n\t *\r\n\t *    Objects of this class appear as one object to the mixer,\r\n\t *    so cache control of the individual objects must be done\r\n\t *    on the group.\r\n\t *\r\n\t * Limitation:\r\n\t *\r\n\t *  - The animated properties must be compatible among the\r\n\t *    all objects in the group.\r\n\t *\r\n\t *  - A single property can either be controlled through a\r\n\t *    target group or directly, but not both.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationObjectGroup() {\r\n\r\n\t\tthis.uuid = _Math.generateUUID();\r\n\r\n\t\t// cached objects followed by the active ones\r\n\t\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\t\tthis.nCachedObjects_ = 0; // threshold\r\n\t\t// note: read by PropertyBinding.Composite\r\n\r\n\t\tvar indices = {};\r\n\t\tthis._indicesByUUID = indices; // for bookkeeping\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t\t}\r\n\r\n\t\tthis._paths = []; // inside: string\r\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\r\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\r\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tobjects: {\r\n\t\t\t\tget total() {\r\n\r\n\t\t\t\t\treturn scope._objects.length;\r\n\r\n\t\t\t\t},\r\n\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tget bindingsPerObject() {\r\n\r\n\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationObjectGroup.prototype, {\r\n\r\n\t\tisAnimationObjectGroup: true,\r\n\r\n\t\tadd: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tpaths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length,\r\n\t\t\t\tknownObject = undefined;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\t\tindex = nObjects ++;\r\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\tknownObject = objects[ index ];\r\n\r\n\t\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( objects[ index ] !== knownObject ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\r\n\t\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\r\n\r\n\t\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\tremove: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// remove & forget\r\n\t\tuncache: function () {\r\n\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} // cached or active\r\n\r\n\t\t\t\t} // if object is known\r\n\r\n\t\t\t} // for arguments\r\n\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t\t},\r\n\r\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\t\tsubscribe_: function ( path, parsedPath ) {\r\n\r\n\t\t\t// returns an array of bindings for the given path that is changed\r\n\t\t\t// according to the contained objects in the group\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ],\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( index !== undefined ) { return bindings[ index ]; }\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tobjects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\t\tindex = bindings.length;\r\n\r\n\t\t\tindicesByPath[ path ] = index;\r\n\r\n\t\t\tpaths.push( path );\r\n\t\t\tparsedPaths.push( parsedPath );\r\n\t\t\tbindings.push( bindingsForPath );\r\n\r\n\t\t\tfor ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar object = objects[ i ];\r\n\t\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bindingsForPath;\r\n\r\n\t\t},\r\n\r\n\t\tunsubscribe_: function ( path ) {\r\n\r\n\t\t\t// tells the group to forget about a property path and no longer\r\n\t\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tvar paths = this._paths,\r\n\t\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\t\tbindings = this._bindings,\r\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\t\tbindings.pop();\r\n\r\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\t\tparsedPaths.pop();\r\n\r\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\t\tpaths.pop();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Action provided by AnimationMixer for scheduling clip playback on specific\r\n\t * objects.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t *\r\n\t */\r\n\r\n\tfunction AnimationAction( mixer, clip, localRoot ) {\r\n\r\n\t\tthis._mixer = mixer;\r\n\t\tthis._clip = clip;\r\n\t\tthis._localRoot = localRoot || null;\r\n\r\n\t\tvar tracks = clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tinterpolants = new Array( nTracks );\r\n\r\n\t\tvar interpolantSettings = {\r\n\t\t\tendingStart: ZeroCurvatureEnding,\r\n\t\t\tendingEnd: ZeroCurvatureEnding\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\t\tinterpolants[ i ] = interpolant;\r\n\t\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t\t}\r\n\r\n\t\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\t\tthis._interpolants = interpolants; // bound by the mixer\r\n\r\n\t\t// inside: PropertyMixer (managed by the mixer)\r\n\t\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\t\tthis._cacheIndex = null; // for the memory manager\r\n\t\tthis._byClipCacheIndex = null; // for the memory manager\r\n\r\n\t\tthis._timeScaleInterpolant = null;\r\n\t\tthis._weightInterpolant = null;\r\n\r\n\t\tthis.loop = LoopRepeat;\r\n\t\tthis._loopCount = - 1;\r\n\r\n\t\t// global mixer time when the action is to be started\r\n\t\t// it's set back to 'null' upon start of the action\r\n\t\tthis._startTime = null;\r\n\r\n\t\t// scaled local time of the action\r\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1;\r\n\t\tthis._effectiveTimeScale = 1;\r\n\r\n\t\tthis.weight = 1;\r\n\t\tthis._effectiveWeight = 1;\r\n\r\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\r\n\r\n\t\tthis.paused = false; // true -> zero effective time scale\r\n\t\tthis.enabled = true; // false -> zero effective weight\r\n\r\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\r\n\r\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\r\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\r\n\r\n\t}\r\n\r\n\tObject.assign( AnimationAction.prototype, {\r\n\r\n\t\t// State & Scheduling\r\n\r\n\t\tplay: function () {\r\n\r\n\t\t\tthis._mixer._activateAction( this );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstop: function () {\r\n\r\n\t\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\t\treturn this.reset();\r\n\r\n\t\t},\r\n\r\n\t\treset: function () {\r\n\r\n\t\t\tthis.paused = false;\r\n\t\t\tthis.enabled = true;\r\n\r\n\t\t\tthis.time = 0; // restart clip\r\n\t\t\tthis._loopCount = - 1;// forget previous loops\r\n\t\t\tthis._startTime = null;// forget scheduling\r\n\r\n\t\t\treturn this.stopFading().stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tisRunning: function () {\r\n\r\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\t// return true when play has been called\r\n\t\tisScheduled: function () {\r\n\r\n\t\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t\t},\r\n\r\n\t\tstartAt: function ( time ) {\r\n\r\n\t\t\tthis._startTime = time;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetLoop: function ( mode, repetitions ) {\r\n\r\n\t\t\tthis.loop = mode;\r\n\t\t\tthis.repetitions = repetitions;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Weight\r\n\r\n\t\t// set the weight stopping any scheduled fading\r\n\t\t// although .enabled = false yields an effective weight of zero, this\r\n\t\t// method does *not* change .enabled, because it would be confusing\r\n\t\tsetEffectiveWeight: function ( weight ) {\r\n\r\n\t\t\tthis.weight = weight;\r\n\r\n\t\t\t// note: same logic as when updated at runtime\r\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\t\treturn this.stopFading();\r\n\r\n\t\t},\r\n\r\n\t\t// return the weight considering fading and .enabled\r\n\t\tgetEffectiveWeight: function () {\r\n\r\n\t\t\treturn this._effectiveWeight;\r\n\r\n\t\t},\r\n\r\n\t\tfadeIn: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t\t},\r\n\r\n\t\tfadeOut: function ( duration ) {\r\n\r\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeFrom: function ( fadeOutAction, duration, warp ) {\r\n\r\n\t\t\tfadeOutAction.fadeOut( duration );\r\n\t\t\tthis.fadeIn( duration );\r\n\r\n\t\t\tif ( warp ) {\r\n\r\n\t\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcrossFadeTo: function ( fadeInAction, duration, warp ) {\r\n\r\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t\t},\r\n\r\n\t\tstopFading: function () {\r\n\r\n\t\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._weightInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Time Scale Control\r\n\r\n\t\t// set the time scale stopping any scheduled warping\r\n\t\t// although .paused = true yields an effective time scale of zero, this\r\n\t\t// method does *not* change .paused, because it would be confusing\r\n\t\tsetEffectiveTimeScale: function ( timeScale ) {\r\n\r\n\t\t\tthis.timeScale = timeScale;\r\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\t// return the time scale considering warping and .paused\r\n\t\tgetEffectiveTimeScale: function () {\r\n\r\n\t\t\treturn this._effectiveTimeScale;\r\n\r\n\t\t},\r\n\r\n\t\tsetDuration: function ( duration ) {\r\n\r\n\t\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\tsyncWith: function ( action ) {\r\n\r\n\t\t\tthis.time = action.time;\r\n\t\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\t\treturn this.stopWarping();\r\n\r\n\t\t},\r\n\r\n\t\thalt: function ( duration ) {\r\n\r\n\t\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t\t},\r\n\r\n\t\twarp: function ( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tstopWarping: function () {\r\n\r\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Object Accessors\r\n\r\n\t\tgetMixer: function () {\r\n\r\n\t\t\treturn this._mixer;\r\n\r\n\t\t},\r\n\r\n\t\tgetClip: function () {\r\n\r\n\t\t\treturn this._clip;\r\n\r\n\t\t},\r\n\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t\t},\r\n\r\n\t\t// Interna\r\n\r\n\t\t_update: function ( time, deltaTime, timeDirection, accuIndex ) {\r\n\r\n\t\t\t// called by the mixer\r\n\r\n\t\t\tif ( ! this.enabled ) {\r\n\r\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\r\n\r\n\t\t\t\tthis._updateWeight( time );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar startTime = this._startTime;\r\n\r\n\t\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t\t// check for scheduled start of action\r\n\r\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// start\r\n\r\n\t\t\t\tthis._startTime = null; // unschedule\r\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply time scale and advance time\r\n\r\n\t\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t\t// note: _updateTime may disable the action resulting in\r\n\t\t\t// an effective weight of 0\r\n\r\n\t\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\t\tif ( weight > 0 ) {\r\n\r\n\t\t\t\tvar interpolants = this._interpolants;\r\n\t\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_updateWeight: function ( time ) {\r\n\r\n\t\t\tvar weight = 0;\r\n\r\n\t\t\tif ( this.enabled ) {\r\n\r\n\t\t\t\tweight = this.weight;\r\n\t\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveWeight = weight;\r\n\t\t\treturn weight;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTimeScale: function ( time ) {\r\n\r\n\t\t\tvar timeScale = 0;\r\n\r\n\t\t\tif ( ! this.paused ) {\r\n\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._effectiveTimeScale = timeScale;\r\n\t\t\treturn timeScale;\r\n\r\n\t\t},\r\n\r\n\t\t_updateTime: function ( deltaTime ) {\r\n\r\n\t\t\tvar time = this.time + deltaTime;\r\n\t\t\tvar duration = this._clip.duration;\r\n\t\t\tvar loop = this.loop;\r\n\t\t\tvar loopCount = this._loopCount;\r\n\r\n\t\t\tvar pingPong = ( loop === LoopPingPong );\r\n\r\n\t\t\tif ( deltaTime === 0 ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) { return time; }\r\n\r\n\t\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( loop === LoopOnce ) {\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tthis._loopCount = 0;\r\n\t\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\thandle_stop: {\r\n\r\n\t\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tbreak handle_stop;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\r\n\t\t\t\t\telse { this.enabled = false; }\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\t\tif ( loopCount === - 1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( time >= duration || time < 0 ) {\r\n\r\n\t\t\t\t\t// wrap around\r\n\r\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\t\tif ( pending <= 0 ) {\r\n\r\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\t\tif ( this.clampWhenFinished ) { this.paused = true; }\r\n\t\t\t\t\t\telse { this.enabled = false; }\r\n\r\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\t\tif ( pending === 1 ) {\r\n\r\n\t\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\r\n\t\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\t\treturn duration - time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn time;\r\n\r\n\t\t},\r\n\r\n\t\t_setEndings: function ( atStart, atEnd, pingPong ) {\r\n\r\n\t\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\t\tif ( pingPong ) {\r\n\r\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\r\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_scheduleFading: function ( duration, weightNow, weightThen ) {\r\n\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant === null ) {\r\n\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\r\n\t\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\tvalues[ 0 ] = weightNow;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\t\t\tvalues[ 1 ] = weightThen;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t *\r\n\t * Player for AnimationClips.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\r\n\tfunction AnimationMixer( root ) {\r\n\r\n\t\tthis._root = root;\r\n\t\tthis._initMemoryManager();\r\n\t\tthis._accuIndex = 0;\r\n\r\n\t\tthis.time = 0;\r\n\r\n\t\tthis.timeScale = 1.0;\r\n\r\n\t}\r\n\r\n\tAnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {\r\n\r\n\t\tconstructor: AnimationMixer,\r\n\r\n\t\t_bindAction: function ( action, prototypeAction ) {\r\n\r\n\t\t\tvar root = action._localRoot || this._root,\r\n\t\t\t\ttracks = action._clip.tracks,\r\n\t\t\t\tnTracks = tracks.length,\r\n\t\t\t\tbindings = action._propertyBindings,\r\n\t\t\t\tinterpolants = action._interpolants,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\t\tbindingsByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\t\tvar track = tracks[ i ],\r\n\t\t\t\t\ttrackName = track.name,\r\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\t\tbinding = new PropertyMixer(\r\n\t\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_activateAction: function ( action ) {\r\n\r\n\t\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// increment reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._lendAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_deactivateAction: function ( action ) {\r\n\r\n\t\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t\t// decrement reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Memory manager\r\n\r\n\t\t_initMemoryManager: function () {\r\n\r\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\t\tthis._nActiveActions = 0;\r\n\r\n\t\t\tthis._actionsByClip = {};\r\n\t\t\t// inside:\r\n\t\t\t// {\r\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\r\n\t\t\t// \tactionByRoot: AnimationAction - lookup\r\n\t\t\t// }\r\n\r\n\r\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\t\tthis._controlInterpolants = []; // same game as above\r\n\t\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tthis.stats = {\r\n\r\n\t\t\t\tactions: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._actions.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveActions;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tbindings: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._bindings.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveBindings;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tcontrolInterpolants: {\r\n\t\t\t\t\tget total() {\r\n\r\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\r\n\r\n\t\t\t\t\t},\r\n\t\t\t\t\tget inUse() {\r\n\r\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for AnimationAction objects\r\n\r\n\t\t_isActiveAction: function ( action ) {\r\n\r\n\t\t\tvar index = action._cacheIndex;\r\n\t\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t\t},\r\n\r\n\t\t_addInactiveAction: function ( action, clipUuid, rootUuid ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\t\tactionsForClip = {\r\n\r\n\t\t\t\t\tknownActions: [ action ],\r\n\t\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\t\tknownActions.push( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taction._cacheIndex = actions.length;\r\n\t\t\tactions.push( action );\r\n\r\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveAction: function ( action ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\tactions.pop();\r\n\r\n\t\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\t\tvar clipUuid = action._clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\t\tlastKnownAction =\r\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\t\tknownActionsForClip.pop();\r\n\r\n\t\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\r\n\r\n\t\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBindingsForAction: function ( action ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendAction: function ( action ) {\r\n\r\n\t\t\t// [ active actions |  inactive actions  ]\r\n\t\t\t// [  active actions >| inactive actions ]\r\n\t\t\t//                 s        a\r\n\t\t\t//                  <-swap->\r\n\t\t\t//                 a        s\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = lastActiveIndex;\r\n\t\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackAction: function ( action ) {\r\n\r\n\t\t\t// [  active actions  | inactive actions ]\r\n\t\t\t// [ active actions |< inactive actions  ]\r\n\t\t\t//        a        s\r\n\t\t\t//         <-swap->\r\n\t\t\t//        s        a\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t\t},\r\n\r\n\t\t// Memory management for PropertyMixer objects\r\n\r\n\t\t_addInactiveBinding: function ( binding, rootUuid, trackName ) {\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tbindings = this._bindings;\r\n\r\n\t\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\t\tbindingByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\t\tbinding._cacheIndex = bindings.length;\r\n\t\t\tbindings.push( binding );\r\n\r\n\t\t},\r\n\r\n\t\t_removeInactiveBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tpropBinding = binding.binding,\r\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\t\ttrackName = propBinding.path,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\t\tif ( Object.keys( bindingByName ).length === 0 ) {\r\n\r\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t_lendBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackBinding: function ( binding ) {\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t\t_lendControlInterpolant: function () {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\t\tinterpolant = new LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn interpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_takeBackControlInterpolant: function ( interpolant ) {\r\n\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t\t},\r\n\r\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 ),\r\n\r\n\t\t// return an action for a clip optionally using a custom root target\r\n\t\t// object (this method allocates a lot of dynamic memory in case a\r\n\t\t// previously unknown clip/root combination is specified)\r\n\t\tclipAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\r\n\t\t\t\tprototypeAction = null;\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\tvar existingAction =\r\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\t\treturn existingAction;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t\t// the bindings again but can just copy\r\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t\t// also, take the clip from the prototype action\r\n\t\t\t\tif ( clipObject === null )\r\n\t\t\t\t\t{ clipObject = prototypeAction._clip; }\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// clip must be known when specified via string\r\n\t\t\tif ( clipObject === null ) { return null; }\r\n\r\n\t\t\t// allocate all resources required to run it\r\n\t\t\tvar newAction = new AnimationAction( this, clipObject, optionalRoot );\r\n\r\n\t\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t\t// and make the action known to the memory manager\r\n\t\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\t\treturn newAction;\r\n\r\n\t\t},\r\n\r\n\t\t// get an existing action\r\n\t\texistingAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t},\r\n\r\n\t\t// deactivates all previously scheduled actions\r\n\t\tstopAllAction: function () {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tthis._nActiveActions = 0;\r\n\t\t\tthis._nActiveBindings = 0;\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tactions[ i ].reset();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// advance the time and update apply the animation\r\n\t\tupdate: function ( deltaTime ) {\r\n\r\n\t\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\t\ttime = this.time += deltaTime,\r\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t\t// run active actions\r\n\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update scene graph\r\n\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// Allows you to seek to a specific time in an animation.\r\n\t\tsetTime: function ( timeInSeconds ) {\r\n\r\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\r\n\t\t\tfor ( var i = 0; i < this._actions.length; i ++ ) {\r\n\r\n\t\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\r\n\r\n\t\t},\r\n\r\n\t\t// return this mixer's root target object\r\n\t\tgetRoot: function () {\r\n\r\n\t\t\treturn this._root;\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular clip\r\n\t\tuncacheClip: function ( clip ) {\r\n\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tclipUuid = clip.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t\t// just throw away\r\n\r\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\t\tactions.pop();\r\n\r\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// free all resources specific to a particular root target object\r\n\t\tuncacheRoot: function ( root ) {\r\n\r\n\t\t\tvar rootUuid = root.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\t\tfor ( var clipUuid in actionsByClip ) {\r\n\r\n\t\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// remove a targeted clip from the cache\r\n\t\tuncacheAction: function ( clip, optionalRoot ) {\r\n\r\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\t\tif ( action !== null ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Uniform( value ) {\r\n\r\n\t\tif ( typeof value === 'string' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\r\n\t\t\tvalue = arguments[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\tUniform.prototype.clone = function () {\r\n\r\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\r\n\tfunction InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {\r\n\r\n\t\tInterleavedBuffer.call( this, array, stride );\r\n\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n\t}\r\n\r\n\tInstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {\r\n\r\n\t\tconstructor: InstancedInterleavedBuffer,\r\n\r\n\t\tisInstancedInterleavedBuffer: true,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tInterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author bhouston / http://clara.io/\r\n\t * @author stephomi / http://stephaneginier.com/\r\n\t */\r\n\r\n\tfunction Raycaster( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\t\tthis.camera = null;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) { return; }\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tObject.assign( Raycaster.prototype, {\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( ( camera && camera.isPerspectiveCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\t\t\t\tthis.camera = camera;\r\n\r\n\t\t\t} else if ( ( camera && camera.isOrthographicCamera ) ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\t\t\tthis.camera = camera;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive, optionalTarget ) {\r\n\r\n\t\t\tvar intersects = optionalTarget || [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n\t *\r\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\r\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\r\n\t */\r\n\r\n\tfunction Spherical( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // polar angle\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Spherical.prototype, {\r\n\r\n\t\tset: function ( radius, phi, theta ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.phi = phi;\r\n\t\t\tthis.theta = theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.phi = other.phi;\r\n\t\t\tthis.theta = other.theta;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\t// restrict phi to be betwee EPS and PI-EPS\r\n\t\tmakeSafe: function () {\r\n\r\n\t\t\tvar EPS = 0.000001;\r\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\t\tthis.theta = 0;\r\n\t\t\t\tthis.phi = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\t\tthis.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\r\n\t *\r\n\t */\r\n\r\n\tfunction Cylindrical( radius, theta, y ) {\r\n\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\r\n\t\tthis.y = ( y !== undefined ) ? y : 0; // height above the x-z plane\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tObject.assign( Cylindrical.prototype, {\r\n\r\n\t\tset: function ( radius, theta, y ) {\r\n\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.theta = theta;\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( other ) {\r\n\r\n\t\t\tthis.radius = other.radius;\r\n\t\t\tthis.theta = other.theta;\r\n\t\t\tthis.y = other.y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromVector3: function ( v ) {\r\n\r\n\t\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCartesianCoords: function ( x, y, z ) {\r\n\r\n\t\t\tthis.radius = Math.sqrt( x * x + z * z );\r\n\t\t\tthis.theta = Math.atan2( x, z );\r\n\t\t\tthis.y = y;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _vector$6 = new Vector2();\r\n\r\n\tfunction Box2( min, max ) {\r\n\r\n\t\tthis.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );\r\n\r\n\t}\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tset: function ( min, max ) {\r\n\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromPoints: function ( points ) {\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCenterAndSize: function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( box ) {\r\n\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tmakeEmpty: function () {\r\n\r\n\t\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tisEmpty: function () {\r\n\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tgetSize: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getSize() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t\t},\r\n\r\n\t\texpandByPoint: function ( point ) {\r\n\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByVector: function ( vector ) {\r\n\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\texpandByScalar: function ( scalar ) {\r\n\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsPoint: function ( point ) {\r\n\r\n\t\t\treturn point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tcontainsBox: function ( box ) {\r\n\r\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\r\n\r\n\t\t},\r\n\r\n\t\tgetParameter: function ( point, target ) {\r\n\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .getParameter() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t\t);\r\n\r\n\t\t},\r\n\r\n\t\tintersectsBox: function ( box ) {\r\n\r\n\t\t\t// using 4 splitting planes to rule out intersections\r\n\r\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\r\n\r\n\t\t},\r\n\r\n\t\tclampPoint: function ( point, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .clampPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceToPoint: function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t},\r\n\r\n\t\tintersect: function ( box ) {\r\n\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tunion: function ( box ) {\r\n\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\ttranslate: function ( offset ) {\r\n\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( box ) {\r\n\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\r\n\tvar _startP = new Vector3();\r\n\tvar _startEnd = new Vector3();\r\n\r\n\tfunction Line3( start, end ) {\r\n\r\n\t\tthis.start = ( start !== undefined ) ? start : new Vector3();\r\n\t\tthis.end = ( end !== undefined ) ? end : new Vector3();\r\n\r\n\t}\r\n\r\n\tObject.assign( Line3.prototype, {\r\n\r\n\t\tset: function ( start, end ) {\r\n\r\n\t\t\tthis.start.copy( start );\r\n\t\t\tthis.end.copy( end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t},\r\n\r\n\t\tcopy: function ( line ) {\r\n\r\n\t\t\tthis.start.copy( line.start );\r\n\t\t\tthis.end.copy( line.end );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tgetCenter: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .getCenter() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t\t},\r\n\r\n\t\tdelta: function ( target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .delta() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn target.subVectors( this.end, this.start );\r\n\r\n\t\t},\r\n\r\n\t\tdistanceSq: function () {\r\n\r\n\t\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tdistance: function () {\r\n\r\n\t\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t\t},\r\n\r\n\t\tat: function ( t, target ) {\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .at() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPointParameter: function ( point, clampToLine ) {\r\n\r\n\t\t\t_startP.subVectors( point, this.start );\r\n\t\t\t_startEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = _startEnd.dot( _startEnd );\r\n\t\t\tvar startEnd_startP = _startEnd.dot( _startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = _Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t},\r\n\r\n\t\tclosestPointToPoint: function ( point, clampToLine, target ) {\r\n\r\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\t\tif ( target === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );\r\n\t\t\t\ttarget = new Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\r\n\r\n\t\t},\r\n\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\t\tthis.start.applyMatrix4( matrix );\r\n\t\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tequals: function ( line ) {\r\n\r\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\r\n\tfunction ImmediateRenderObject( material ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.material = material;\r\n\t\tthis.render = function ( /* renderCallback */ ) {};\r\n\r\n\t}\r\n\r\n\tImmediateRenderObject.prototype = Object.create( Object3D.prototype );\r\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\r\n\r\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$5 = new Vector3();\r\n\tvar _v2$3 = new Vector3();\r\n\tvar _normalMatrix$1 = new Matrix3();\r\n\tvar _keys = [ 'a', 'b', 'c' ];\r\n\r\n\tfunction VertexNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.attributes.normal.count;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.setAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tVertexNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tVertexNormalsHelper.prototype.constructor = VertexNormalsHelper;\r\n\r\n\tVertexNormalsHelper.prototype.update = function () {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ _keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\t_v1$5.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\t_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry && objGeometry.isBufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\t_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _vector$7 = new Vector3();\r\n\r\n\tfunction SpotLightHelper( light, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = [\r\n\t\t\t0, 0, 0, \t0, 0, 1,\r\n\t\t\t0, 0, 0, \t1, 0, 1,\r\n\t\t\t0, 0, 0,\t- 1, 0, 1,\r\n\t\t\t0, 0, 0, \t0, 1, 1,\r\n\t\t\t0, 0, 0, \t0, - 1, 1\r\n\t\t];\r\n\r\n\t\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\t\tvar p1 = ( i / l ) * Math.PI * 2;\r\n\t\t\tvar p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\t\tpositions.push(\r\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.cone = new LineSegments( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tSpotLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tSpotLightHelper.prototype.constructor = SpotLightHelper;\r\n\r\n\tSpotLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\r\n\t};\r\n\r\n\tSpotLightHelper.prototype.update = function () {\r\n\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\t_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( _vector$7 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.cone.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.cone.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author Sean Griffin / http://twitter.com/sgrif\r\n\t * @author Michael Guerrero / http://realitymeltdown.com\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author ikerr / http://verold.com\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _vector$8 = new Vector3();\r\n\tvar _boneMatrix = new Matrix4();\r\n\tvar _matrixWorldInv = new Matrix4();\r\n\r\n\tfunction getBoneList( object ) {\r\n\r\n\t\tvar boneList = [];\r\n\r\n\t\tif ( object && object.isBone ) {\r\n\r\n\t\t\tboneList.push( object );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn boneList;\r\n\r\n\t}\r\n\r\n\tfunction SkeletonHelper( object ) {\r\n\r\n\t\tvar bones = getBoneList( object );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar color1 = new Color( 0, 0, 1 );\r\n\t\tvar color2 = new Color( 0, 1, 0 );\r\n\r\n\t\tfor ( var i = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\r\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.root = object;\r\n\t\tthis.bones = bones;\r\n\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t}\r\n\r\n\tSkeletonHelper.prototype = Object.create( LineSegments.prototype );\r\n\tSkeletonHelper.prototype.constructor = SkeletonHelper;\r\n\r\n\tSkeletonHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar bones = this.bones;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t_matrixWorldInv.getInverse( this.root.matrixWorld );\r\n\r\n\t\tfor ( var i = 0, j = 0; i < bones.length; i ++ ) {\r\n\r\n\t\t\tvar bone = bones[ i ];\r\n\r\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );\r\n\r\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\t_vector$8.setFromMatrixPosition( _boneMatrix );\r\n\t\t\t\tposition.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );\r\n\r\n\t\t\t\tj += 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction PointLightHelper( light, sphereSize, color ) {\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( sphereSize, 4, 2 );\r\n\t\tvar material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\r\n\t\t/*\r\n\t\tvar distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\r\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\t\tvar d = light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\r\n\t\tthis.add( this.lightDistance );\r\n\t\t*/\r\n\r\n\t}\r\n\r\n\tPointLightHelper.prototype = Object.create( Mesh.prototype );\r\n\tPointLightHelper.prototype.constructor = PointLightHelper;\r\n\r\n\tPointLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tPointLightHelper.prototype.update = function () {\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\tvar d = this.light.distance;\r\n\r\n\t\tif ( d === 0.0 ) {\r\n\r\n\t\t\tthis.lightDistance.visible = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t\t}\r\n\t\t*/\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author abelnation / http://github.com/abelnation\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t *  This helper must be added as a child of the light\r\n\t */\r\n\r\n\tfunction RectAreaLightHelper( light, color ) {\r\n\r\n\t\tthis.type = 'RectAreaLightHelper';\r\n\r\n\t\tthis.light = light;\r\n\r\n\t\tthis.color = color; // optional hardwired color for the helper\r\n\r\n\t\tvar positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tLine.call( this, geometry, material );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tRectAreaLightHelper.prototype = Object.create( Line.prototype );\r\n\tRectAreaLightHelper.prototype.constructor = RectAreaLightHelper;\r\n\r\n\tRectAreaLightHelper.prototype.update = function () {\r\n\r\n\t\tthis.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\t\t\tthis.children[ 0 ].material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\t\t// prevent hue shift\r\n\t\t\tvar c = this.material.color;\r\n\t\t\tvar max = Math.max( c.r, c.g, c.b );\r\n\t\t\tif ( max > 1 ) { c.multiplyScalar( 1 / max ); }\r\n\r\n\t\t\tthis.children[ 0 ].material.color.copy( this.material.color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tRectAreaLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _vector$9 = new Vector3();\r\n\tvar _color1 = new Color();\r\n\tvar _color2 = new Color();\r\n\r\n\tfunction HemisphereLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tvar geometry = new OctahedronBufferGeometry( size );\r\n\t\tgeometry.rotateY( Math.PI * 0.5 );\r\n\r\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\tif ( this.color === undefined ) { this.material.vertexColors = VertexColors; }\r\n\r\n\t\tvar position = geometry.getAttribute( 'position' );\r\n\t\tvar colors = new Float32Array( position.count * 3 );\r\n\r\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\r\n\r\n\t\tthis.add( new Mesh( geometry, this.material ) );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tHemisphereLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tHemisphereLightHelper.prototype.constructor = HemisphereLightHelper;\r\n\r\n\tHemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.children[ 0 ].geometry.dispose();\r\n\t\tthis.children[ 0 ].material.dispose();\r\n\r\n\t};\r\n\r\n\tHemisphereLightHelper.prototype.update = function () {\r\n\r\n\t\tvar mesh = this.children[ 0 ];\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar colors = mesh.geometry.getAttribute( 'color' );\r\n\r\n\t\t\t_color1.copy( this.light.color );\r\n\t\t\t_color2.copy( this.light.groundColor );\r\n\r\n\t\t\tfor ( var i = 0, l = colors.count; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar color = ( i < ( l / 2 ) ) ? _color1 : _color2;\r\n\r\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolors.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction LightProbeHelper( lightProbe, size ) {\r\n\r\n\t\tthis.lightProbe = lightProbe;\r\n\r\n\t\tthis.size = size;\r\n\r\n\t\tvar defines = {};\r\n\t\tdefines[ 'GAMMA_OUTPUT' ] = \"\";\r\n\r\n\t\t// material\r\n\t\tvar material = new ShaderMaterial( {\r\n\r\n\t\t\tdefines: defines,\r\n\r\n\t\t\tuniforms: {\r\n\r\n\t\t\t\tsh: { value: this.lightProbe.sh.coefficients }, // by reference\r\n\r\n\t\t\t\tintensity: { value: this.lightProbe.intensity }\r\n\r\n\t\t\t},\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t'varying vec3 vNormal;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tvNormal = normalize( normalMatrix * normal );',\r\n\r\n\t\t\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\r\n\r\n\t\t\t\t'}' ].join( '\\n' ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t'#define RECIPROCAL_PI 0.318309886',\r\n\r\n\t\t\t\t'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',\r\n\r\n\t\t\t\t'\t// matrix is assumed to be orthogonal',\r\n\r\n\t\t\t\t'\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'vec3 linearToOutput( in vec3 a ) {',\r\n\r\n\t\t\t\t'\t#ifdef GAMMA_OUTPUT',\r\n\r\n\t\t\t\t'\t\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\treturn a;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',\r\n\t\t\t\t'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',\r\n\r\n\t\t\t\t'\t// normal is assumed to have unit length',\r\n\r\n\t\t\t\t'\tfloat x = normal.x, y = normal.y, z = normal.z;',\r\n\r\n\t\t\t\t'\t// band 0',\r\n\t\t\t\t'\tvec3 result = shCoefficients[ 0 ] * 0.886227;',\r\n\r\n\t\t\t\t'\t// band 1',\r\n\t\t\t\t'\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',\r\n\t\t\t\t'\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',\r\n\r\n\t\t\t\t'\t// band 2',\r\n\t\t\t\t'\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',\r\n\t\t\t\t'\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',\r\n\t\t\t\t'\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',\r\n\t\t\t\t'\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',\r\n\r\n\t\t\t\t'\treturn result;',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t\t'uniform vec3 sh[ 9 ]; // sh coefficients',\r\n\r\n\t\t\t\t'uniform float intensity; // light probe intensity',\r\n\r\n\t\t\t\t'varying vec3 vNormal;',\r\n\r\n\t\t\t\t'void main() {',\r\n\r\n\t\t\t\t'\tvec3 normal = normalize( vNormal );',\r\n\r\n\t\t\t\t'\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',\r\n\r\n\t\t\t\t'\tvec3 irradiance = shGetIrradianceAt( worldNormal, sh );',\r\n\r\n\t\t\t\t'\tvec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',\r\n\r\n\t\t\t\t'\toutgoingLight = linearToOutput( outgoingLight );',\r\n\r\n\t\t\t\t'\tgl_FragColor = vec4( outgoingLight, 1.0 );',\r\n\r\n\t\t\t\t'}'\r\n\r\n\t\t\t].join( '\\n' )\r\n\r\n\t\t} );\r\n\r\n\t\tvar geometry = new SphereBufferGeometry( 1, 32, 16 );\r\n\r\n\t\tMesh.call( this, geometry, material );\r\n\r\n\t\tthis.onBeforeRender();\r\n\r\n\t}\r\n\r\n\tLightProbeHelper.prototype = Object.create( Mesh.prototype );\r\n\tLightProbeHelper.prototype.constructor = LightProbeHelper;\r\n\r\n\tLightProbeHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\r\n\t};\r\n\r\n\tLightProbeHelper.prototype.onBeforeRender = function () {\r\n\r\n\t\tthis.position.copy( this.lightProbe.position );\r\n\r\n\t\tthis.scale.set( 1, 1, 1 ).multiplyScalar( this.size );\r\n\r\n\t\tthis.material.uniforms.intensity.value = this.lightProbe.intensity;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction GridHelper( size, divisions, color1, color2 ) {\r\n\r\n\t\tsize = size || 10;\r\n\t\tdivisions = divisions || 10;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar center = divisions / 2;\r\n\t\tvar step = size / divisions;\r\n\t\tvar halfSize = size / 2;\r\n\r\n\t\tvar vertices = [], colors = [];\r\n\r\n\t\tfor ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\r\n\r\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\r\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\r\n\r\n\t\t\tvar color = i === center ? color1 : color2;\r\n\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {\r\n\r\n\t\tconstructor: GridHelper,\r\n\r\n\t\tcopy: function ( source ) {\r\n\r\n\t\t\tLineSegments.prototype.copy.call( this, source );\r\n\r\n\t\t\tthis.geometry.copy( source.geometry );\r\n\t\t\tthis.material.copy( source.material );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\r\n\t\tclone: function () {\r\n\r\n\t\t\treturn new this.constructor().copy( this );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t * @author Hectate / http://www.github.com/Hectate\r\n\t */\r\n\r\n\tfunction PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {\r\n\r\n\t\tradius = radius || 10;\r\n\t\tradials = radials || 16;\r\n\t\tcircles = circles || 8;\r\n\t\tdivisions = divisions || 64;\r\n\t\tcolor1 = new Color( color1 !== undefined ? color1 : 0x444444 );\r\n\t\tcolor2 = new Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar x, z;\r\n\t\tvar v, i, j, r, color;\r\n\r\n\t\t// create the radials\r\n\r\n\t\tfor ( i = 0; i <= radials; i ++ ) {\r\n\r\n\t\t\tv = ( i / radials ) * ( Math.PI * 2 );\r\n\r\n\t\t\tx = Math.sin( v ) * radius;\r\n\t\t\tz = Math.cos( v ) * radius;\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tvertices.push( x, 0, z );\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t}\r\n\r\n\t\t// create the circles\r\n\r\n\t\tfor ( i = 0; i <= circles; i ++ ) {\r\n\r\n\t\t\tcolor = ( i & 1 ) ? color1 : color2;\r\n\r\n\t\t\tr = radius - ( radius / circles * i );\r\n\r\n\t\t\tfor ( j = 0; j < divisions; j ++ ) {\r\n\r\n\t\t\t\t// first vertex\r\n\r\n\t\t\t\tv = ( j / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t\t// second vertex\r\n\r\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\r\n\r\n\t\t\t\tx = Math.sin( v ) * r;\r\n\t\t\t\tz = Math.cos( v ) * r;\r\n\r\n\t\t\t\tvertices.push( x, 0, z );\r\n\t\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tPolarGridHelper.prototype = Object.create( LineSegments.prototype );\r\n\tPolarGridHelper.prototype.constructor = PolarGridHelper;\r\n\r\n\t/**\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tfunction PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {\r\n\r\n\t\tthis.audio = audio;\r\n\t\tthis.range = range || 1;\r\n\t\tthis.divisionsInnerAngle = divisionsInnerAngle || 16;\r\n\t\tthis.divisionsOuterAngle = divisionsOuterAngle || 2;\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;\r\n\t\tvar positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tvar materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );\r\n\t\tvar materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );\r\n\r\n\t\tLine.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tPositionalAudioHelper.prototype = Object.create( Line.prototype );\r\n\tPositionalAudioHelper.prototype.constructor = PositionalAudioHelper;\r\n\r\n\tPositionalAudioHelper.prototype.update = function () {\r\n\r\n\t\tvar audio = this.audio;\r\n\t\tvar range = this.range;\r\n\t\tvar divisionsInnerAngle = this.divisionsInnerAngle;\r\n\t\tvar divisionsOuterAngle = this.divisionsOuterAngle;\r\n\r\n\t\tvar coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );\r\n\t\tvar coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );\r\n\r\n\t\tvar halfConeInnerAngle = coneInnerAngle / 2;\r\n\t\tvar halfConeOuterAngle = coneOuterAngle / 2;\r\n\r\n\t\tvar start = 0;\r\n\t\tvar count = 0;\r\n\t\tvar i, stride;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar positionAttribute = geometry.attributes.position;\r\n\r\n\t\tgeometry.clearGroups();\r\n\r\n\t\t//\r\n\r\n\t\tfunction generateSegment( from, to, divisions, materialIndex ) {\r\n\r\n\t\t\tvar step = ( to - from ) / divisions;\r\n\r\n\t\t\tpositionAttribute.setXYZ( start, 0, 0, 0 );\r\n\t\t\tcount ++;\r\n\r\n\t\t\tfor ( i = from; i < to; i += step ) {\r\n\r\n\t\t\t\tstride = start + count;\r\n\r\n\t\t\t\tpositionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );\r\n\t\t\t\tpositionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );\r\n\t\t\t\tpositionAttribute.setXYZ( stride + 2, 0, 0, 0 );\r\n\r\n\t\t\t\tcount += 3;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.addGroup( start, count, materialIndex );\r\n\r\n\t\t\tstart += count;\r\n\t\t\tcount = 0;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tgenerateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );\r\n\t\tgenerateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );\r\n\t\tgenerateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );\r\n\r\n\t\t//\r\n\r\n\t\tpositionAttribute.needsUpdate = true;\r\n\r\n\t\tif ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }\r\n\r\n\t};\r\n\r\n\tPositionalAudioHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material[ 0 ].dispose();\r\n\t\tthis.material[ 1 ].dispose();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$6 = new Vector3();\r\n\tvar _v2$4 = new Vector3();\r\n\tvar _normalMatrix$2 = new Matrix3();\r\n\r\n\tfunction FaceNormalsHelper( object, size, hex, linewidth ) {\r\n\r\n\t\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t\t//\r\n\r\n\t\tvar nNormals = 0;\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry && objGeometry.isGeometry ) {\r\n\r\n\t\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tvar positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );\r\n\r\n\t\tgeometry.setAttribute( 'position', positions );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t\t//\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tFaceNormalsHelper.prototype = Object.create( LineSegments.prototype );\r\n\tFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\r\n\r\n\tFaceNormalsHelper.prototype.update = function () {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\t_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t_v1$6.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );\r\n\r\n\t\t\tposition.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tvar _v1$7 = new Vector3();\r\n\tvar _v2$5 = new Vector3();\r\n\tvar _v3$1 = new Vector3();\r\n\r\n\tfunction DirectionalLightHelper( light, size, color ) {\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.color = color;\r\n\r\n\t\tif ( size === undefined ) { size = 1; }\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\r\n\t\t\t- size, size, 0,\r\n\t\t\tsize, size, 0,\r\n\t\t\tsize, - size, 0,\r\n\t\t\t- size, - size, 0,\r\n\t\t\t- size, size, 0\r\n\t\t], 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { fog: false } );\r\n\r\n\t\tthis.lightPlane = new Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\r\n\t\tgeometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\t\tthis.targetLine = new Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tDirectionalLightHelper.prototype = Object.create( Object3D.prototype );\r\n\tDirectionalLightHelper.prototype.constructor = DirectionalLightHelper;\r\n\r\n\tDirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\r\n\t};\r\n\r\n\tDirectionalLightHelper.prototype.update = function () {\r\n\r\n\t\t_v1$7.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t_v3$1.subVectors( _v2$5, _v1$7 );\r\n\r\n\t\tthis.lightPlane.lookAt( _v2$5 );\r\n\r\n\t\tif ( this.color !== undefined ) {\r\n\r\n\t\t\tthis.lightPlane.material.color.set( this.color );\r\n\t\t\tthis.targetLine.material.color.set( this.color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\r\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\r\n\r\n\t\t}\r\n\r\n\t\tthis.targetLine.lookAt( _v2$5 );\r\n\t\tthis.targetLine.scale.z = _v3$1.length();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t *\t- shows frustum, line of sight and up of the camera\r\n\t *\t- suitable for fast updates\r\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\r\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n\t */\r\n\r\n\tvar _vector$a = new Vector3();\r\n\tvar _camera = new Camera();\r\n\r\n\tfunction CameraHelper( camera ) {\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tvar material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );\r\n\r\n\t\tvar vertices = [];\r\n\t\tvar colors = [];\r\n\r\n\t\tvar pointMap = {};\r\n\r\n\t\t// colors\r\n\r\n\t\tvar colorFrustum = new Color( 0xffaa00 );\r\n\t\tvar colorCone = new Color( 0xff0000 );\r\n\t\tvar colorUp = new Color( 0x00aaff );\r\n\t\tvar colorTarget = new Color( 0xffffff );\r\n\t\tvar colorCross = new Color( 0x333333 );\r\n\r\n\t\t// near\r\n\r\n\t\taddLine( 'n1', 'n2', colorFrustum );\r\n\t\taddLine( 'n2', 'n4', colorFrustum );\r\n\t\taddLine( 'n4', 'n3', colorFrustum );\r\n\t\taddLine( 'n3', 'n1', colorFrustum );\r\n\r\n\t\t// far\r\n\r\n\t\taddLine( 'f1', 'f2', colorFrustum );\r\n\t\taddLine( 'f2', 'f4', colorFrustum );\r\n\t\taddLine( 'f4', 'f3', colorFrustum );\r\n\t\taddLine( 'f3', 'f1', colorFrustum );\r\n\r\n\t\t// sides\r\n\r\n\t\taddLine( 'n1', 'f1', colorFrustum );\r\n\t\taddLine( 'n2', 'f2', colorFrustum );\r\n\t\taddLine( 'n3', 'f3', colorFrustum );\r\n\t\taddLine( 'n4', 'f4', colorFrustum );\r\n\r\n\t\t// cone\r\n\r\n\t\taddLine( 'p', 'n1', colorCone );\r\n\t\taddLine( 'p', 'n2', colorCone );\r\n\t\taddLine( 'p', 'n3', colorCone );\r\n\t\taddLine( 'p', 'n4', colorCone );\r\n\r\n\t\t// up\r\n\r\n\t\taddLine( 'u1', 'u2', colorUp );\r\n\t\taddLine( 'u2', 'u3', colorUp );\r\n\t\taddLine( 'u3', 'u1', colorUp );\r\n\r\n\t\t// target\r\n\r\n\t\taddLine( 'c', 't', colorTarget );\r\n\t\taddLine( 'p', 'c', colorCross );\r\n\r\n\t\t// cross\r\n\r\n\t\taddLine( 'cn1', 'cn2', colorCross );\r\n\t\taddLine( 'cn3', 'cn4', colorCross );\r\n\r\n\t\taddLine( 'cf1', 'cf2', colorCross );\r\n\t\taddLine( 'cf3', 'cf4', colorCross );\r\n\r\n\t\tfunction addLine( a, b, color ) {\r\n\r\n\t\t\taddPoint( a, color );\r\n\t\t\taddPoint( b, color );\r\n\r\n\t\t}\r\n\r\n\t\tfunction addPoint( id, color ) {\r\n\r\n\t\t\tvertices.push( 0, 0, 0 );\r\n\t\t\tcolors.push( color.r, color.g, color.b );\r\n\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t\tthis.camera = camera;\r\n\t\tif ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }\r\n\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.pointMap = pointMap;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tCameraHelper.prototype = Object.create( LineSegments.prototype );\r\n\tCameraHelper.prototype.constructor = CameraHelper;\r\n\r\n\tCameraHelper.prototype.update = function () {\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar pointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix inverse\r\n\t\t// world matrix must be identity\r\n\r\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\r\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\r\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\r\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\r\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\r\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\r\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\r\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\r\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\r\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\r\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\r\n\r\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\r\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\r\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\r\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\r\n\r\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\r\n\r\n\t};\r\n\r\n\tfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\r\n\r\n\t\t_vector$a.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tvar position = geometry.getAttribute( 'position' );\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tposition.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author Mugen87 / http://github.com/Mugen87\r\n\t */\r\n\r\n\tvar _box$3 = new Box3();\r\n\r\n\tfunction BoxHelper( object, color ) {\r\n\r\n\t\tthis.object = object;\r\n\r\n\t\tif ( color === undefined ) { color = 0xffff00; }\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.matrixAutoUpdate = false;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tBoxHelper.prototype = Object.create( LineSegments.prototype );\r\n\tBoxHelper.prototype.constructor = BoxHelper;\r\n\r\n\tBoxHelper.prototype.update = function ( object ) {\r\n\r\n\t\tif ( object !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.object !== undefined ) {\r\n\r\n\t\t\t_box$3.setFromObject( this.object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _box$3.isEmpty() ) { return; }\r\n\r\n\t\tvar min = _box$3.min;\r\n\t\tvar max = _box$3.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\r\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\r\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\r\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.setFromObject = function ( object ) {\r\n\r\n\t\tthis.object = object;\r\n\t\tthis.update();\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.copy = function ( source ) {\r\n\r\n\t\tLineSegments.prototype.copy.call( this, source );\r\n\r\n\t\tthis.object = source.object;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tBoxHelper.prototype.clone = function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction Box3Helper( box, color ) {\r\n\r\n\t\tthis.type = 'Box3Helper';\r\n\r\n\t\tthis.box = box;\r\n\r\n\t\tcolor = color || 0xffff00;\r\n\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\r\n\t\tvar positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\r\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\r\n\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\r\n\t\tLineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t}\r\n\r\n\tBox3Helper.prototype = Object.create( LineSegments.prototype );\r\n\tBox3Helper.prototype.constructor = Box3Helper;\r\n\r\n\tBox3Helper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar box = this.box;\r\n\r\n\t\tif ( box.isEmpty() ) { return; }\r\n\r\n\t\tbox.getCenter( this.position );\r\n\r\n\t\tbox.getSize( this.scale );\r\n\r\n\t\tthis.scale.multiplyScalar( 0.5 );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\r\n\tfunction PlaneHelper( plane, size, hex ) {\r\n\r\n\t\tthis.type = 'PlaneHelper';\r\n\r\n\t\tthis.plane = plane;\r\n\r\n\t\tthis.size = ( size === undefined ) ? 1 : size;\r\n\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\t\tvar positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tLine.call( this, geometry, new LineBasicMaterial( { color: color } ) );\r\n\r\n\t\t//\r\n\r\n\t\tvar positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\r\n\r\n\t\tvar geometry2 = new BufferGeometry();\r\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\r\n\t\tgeometry2.computeBoundingSphere();\r\n\r\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );\r\n\r\n\t}\r\n\r\n\tPlaneHelper.prototype = Object.create( Line.prototype );\r\n\tPlaneHelper.prototype.constructor = PlaneHelper;\r\n\r\n\tPlaneHelper.prototype.updateMatrixWorld = function ( force ) {\r\n\r\n\t\tvar scale = - this.plane.constant;\r\n\r\n\t\tif ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter\r\n\r\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\r\n\r\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\r\n\r\n\t\tthis.lookAt( this.plane.normal );\r\n\r\n\t\tObject3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author zz85 / http://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t *\r\n\t * Creates an arrow for visualizing directions\r\n\t *\r\n\t * Parameters:\r\n\t *  dir - Vector3\r\n\t *  origin - Vector3\r\n\t *  length - Number\r\n\t *  color - color in hex value\r\n\t *  headLength - Number\r\n\t *  headWidth - Number\r\n\t */\r\n\r\n\tvar _axis = new Vector3();\r\n\tvar _lineGeometry, _coneGeometry;\r\n\r\n\tfunction ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tObject3D.call( this );\r\n\r\n\t\tif ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }\r\n\t\tif ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }\r\n\t\tif ( length === undefined ) { length = 1; }\r\n\t\tif ( color === undefined ) { color = 0xffff00; }\r\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\r\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\r\n\r\n\t\tif ( _lineGeometry === undefined ) {\r\n\r\n\t\t\t_lineGeometry = new BufferGeometry();\r\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\t\t\t_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n\tArrowHelper.prototype = Object.create( Object3D.prototype );\r\n\tArrowHelper.prototype.constructor = ArrowHelper;\r\n\r\n\tArrowHelper.prototype.setDirection = function ( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tvar radians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\t\tif ( headLength === undefined ) { headLength = 0.2 * length; }\r\n\t\tif ( headWidth === undefined ) { headWidth = 0.2 * headLength; }\r\n\r\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\r\n\t\tthis.line.updateMatrix();\r\n\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\t\tthis.line.material.color.set( color );\r\n\t\tthis.cone.material.color.set( color );\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.copy = function ( source ) {\r\n\r\n\t\tObject3D.prototype.copy.call( this, source, false );\r\n\r\n\t\tthis.line.copy( source.line );\r\n\t\tthis.cone.copy( source.cone );\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n\tArrowHelper.prototype.clone = function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @author sroucheray / http://sroucheray.org/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction AxesHelper( size ) {\r\n\r\n\t\tsize = size || 1;\r\n\r\n\t\tvar vertices = [\r\n\t\t\t0, 0, 0,\tsize, 0, 0,\r\n\t\t\t0, 0, 0,\t0, size, 0,\r\n\t\t\t0, 0, 0,\t0, 0, size\r\n\t\t];\r\n\r\n\t\tvar colors = [\r\n\t\t\t1, 0, 0,\t1, 0.6, 0,\r\n\t\t\t0, 1, 0,\t0.6, 1, 0,\r\n\t\t\t0, 0, 1,\t0, 0.6, 1\r\n\t\t];\r\n\r\n\t\tvar geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\r\n\t\tvar material = new LineBasicMaterial( { vertexColors: VertexColors } );\r\n\r\n\t\tLineSegments.call( this, geometry, material );\r\n\r\n\t}\r\n\r\n\tAxesHelper.prototype = Object.create( LineSegments.prototype );\r\n\tAxesHelper.prototype.constructor = AxesHelper;\r\n\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\r\n\tfunction Face4( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new Face3( a, b, c, normal, color, materialIndex );\r\n\r\n\t}\r\n\r\n\tvar LineStrip = 0;\r\n\r\n\tvar LinePieces = 1;\r\n\r\n\tfunction MeshFaceMaterial( materials ) {\r\n\r\n\t\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction MultiMaterial( materials ) {\r\n\r\n\t\tif ( materials === undefined ) { materials = []; }\r\n\r\n\t\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\r\n\t\tmaterials.isMultiMaterial = true;\r\n\t\tmaterials.materials = materials;\r\n\t\tmaterials.clone = function () {\r\n\r\n\t\t\treturn materials.slice();\r\n\r\n\t\t};\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tfunction PointCloud( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction Particle( material ) {\r\n\r\n\t\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\r\n\t\treturn new Sprite( material );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystem( geometry, material ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n\tfunction PointCloudMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleBasicMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction ParticleSystemMaterial( parameters ) {\r\n\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new PointsMaterial( parameters );\r\n\r\n\t}\r\n\r\n\tfunction Vertex( x, y, z ) {\r\n\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new Vector3( x, y, z );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction DynamicBufferAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\t\treturn new BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n\t}\r\n\r\n\tfunction Int8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\r\n\t\treturn new Int8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\r\n\t\treturn new Uint8BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint8ClampedAttribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\r\n\t\treturn new Uint8ClampedBufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\r\n\t\treturn new Int16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint16Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\r\n\t\treturn new Uint16BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Int32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\r\n\t\treturn new Int32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Uint32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\r\n\t\treturn new Uint32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float32Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\r\n\t\treturn new Float32BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\tfunction Float64Attribute( array, itemSize ) {\r\n\r\n\t\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\r\n\t\treturn new Float64BufferAttribute( array, itemSize );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tCurve.create = function ( construct, getPoint ) {\r\n\r\n\t\tconsole.log( 'THREE.Curve.create() has been deprecated' );\r\n\r\n\t\tconstruct.prototype = Object.create( Curve.prototype );\r\n\t\tconstruct.prototype.constructor = construct;\r\n\t\tconstruct.prototype.getPoint = getPoint;\r\n\r\n\t\treturn construct;\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.assign( CurvePath.prototype, {\r\n\r\n\t\tcreatePointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from path points (for Line or Points objects)\r\n\r\n\t\t\tvar pts = this.getPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateSpacedPointsGeometry: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\t// generate geometry from equidistant sampling along the path\r\n\r\n\t\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\t\treturn this.createGeometry( pts );\r\n\r\n\t\t},\r\n\r\n\t\tcreateGeometry: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );\r\n\r\n\t\t\tvar geometry = new Geometry();\r\n\r\n\t\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar point = points[ i ];\r\n\t\t\t\tgeometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Path.prototype, {\r\n\r\n\t\tfromPoints: function ( points ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\r\n\t\t\treturn this.setFromPoints( points );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction ClosedSplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\t\tthis.closed = true;\r\n\r\n\t}\r\n\r\n\tClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction SplineCurve3( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\t//\r\n\r\n\tfunction Spline( points ) {\r\n\r\n\t\tconsole.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );\r\n\r\n\t\tCatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\r\n\t}\r\n\r\n\tSpline.prototype = Object.create( CatmullRomCurve3.prototype );\r\n\r\n\tObject.assign( Spline.prototype, {\r\n\r\n\t\tinitFromArray: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .initFromArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetControlPointsArray: function ( /* optionalTarget */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\treparametrizeByArcLength: function ( /* samplingCoef */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tfunction AxisHelper( size ) {\r\n\r\n\t\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\r\n\t\treturn new AxesHelper( size );\r\n\r\n\t}\r\n\r\n\tfunction BoundingBoxHelper( object, color ) {\r\n\r\n\t\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\r\n\t\treturn new BoxHelper( object, color );\r\n\r\n\t}\r\n\r\n\tfunction EdgesHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\r\n\t\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\tGridHelper.prototype.setColors = function () {\r\n\r\n\t\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\r\n\r\n\t};\r\n\r\n\tSkeletonHelper.prototype.update = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\r\n\r\n\t};\r\n\r\n\tfunction WireframeHelper( object, hex ) {\r\n\r\n\t\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\r\n\t\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tObject.assign( Loader.prototype, {\r\n\r\n\t\textractUrlBase: function ( url ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\r\n\t\t\treturn LoaderUtils.extractUrlBase( url );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tLoader.Handlers = {\r\n\r\n\t\tadd: function ( /* regex, loader */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\r\n\r\n\t\t},\r\n\r\n\t\tget: function ( /* file */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction XHRLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\r\n\t\treturn new FileLoader( manager );\r\n\r\n\t}\r\n\r\n\tfunction BinaryTextureLoader( manager ) {\r\n\r\n\t\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\r\n\t\treturn new DataTextureLoader( manager );\r\n\r\n\t}\r\n\r\n\tObject.assign( ObjectLoader.prototype, {\r\n\r\n\t\tsetTexturePath: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\r\n\t\t\treturn this.setResourcePath( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Box2.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( Box3.prototype, {\r\n\r\n\t\tcenter: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\r\n\t\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t\t},\r\n\t\tempty: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\r\n\t\t},\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t},\r\n\t\tsize: function ( optionalTarget ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\r\n\t\t\treturn this.getSize( optionalTarget );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tLine3.prototype.center = function ( optionalTarget ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\r\n\t\treturn this.getCenter( optionalTarget );\r\n\r\n\t};\r\n\r\n\tObject.assign( _Math, {\r\n\r\n\t\trandom16: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );\r\n\t\t\treturn Math.random();\r\n\r\n\t\t},\r\n\r\n\t\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );\r\n\t\t\treturn _Math.floorPowerOfTwo( value );\r\n\r\n\t\t},\r\n\r\n\t\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );\r\n\t\t\treturn _Math.ceilPowerOfTwo( value );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix3.prototype, {\r\n\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix3( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Matrix4.prototype, {\r\n\r\n\t\textractPosition: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\treturn this.copyPosition( m );\r\n\r\n\t\t},\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\" );\r\n\t\t\treturn this.toArray( array, offset );\r\n\r\n\t\t},\r\n\t\tgetPosition: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\t\t\treturn new Vector3().setFromMatrixColumn( this, 3 );\r\n\r\n\t\t},\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\r\n\t\t},\r\n\t\tmultiplyToArray: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector4: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\tmultiplyVector3Array: function ( /* a */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateAxis: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\t\tv.transformDirection( this );\r\n\r\n\t\t},\r\n\t\tcrossVector: function ( vector ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\r\n\t\t},\r\n\t\ttranslate: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateX: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateY: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateZ: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\r\n\t\t},\r\n\t\trotateByAxis: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\r\n\t\t},\r\n\t\tapplyToBuffer: function ( buffer /*, offset, length */ ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );\r\n\t\t\treturn this.applyToBufferAttribute( buffer );\r\n\r\n\t\t},\r\n\t\tapplyToVector3Array: function ( /* array, offset, length */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\r\n\r\n\t\t},\r\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\r\n\t\t\treturn this.makePerspective( left, right, top, bottom, near, far );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tPlane.prototype.isIntersectionLine = function ( line ) {\r\n\r\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\treturn this.intersectsLine( line );\r\n\r\n\t};\r\n\r\n\tQuaternion.prototype.multiplyVector3 = function ( vector ) {\r\n\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\r\n\t};\r\n\r\n\tObject.assign( Ray.prototype, {\r\n\r\n\t\tisIntersectionBox: function ( box ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\r\n\t\t},\r\n\t\tisIntersectionPlane: function ( plane ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\t\treturn this.intersectsPlane( plane );\r\n\r\n\t\t},\r\n\t\tisIntersectionSphere: function ( sphere ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle.prototype, {\r\n\r\n\t\tarea: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\r\n\t\t\treturn this.getArea();\r\n\r\n\t\t},\r\n\t\tbarycoordFromPoint: function ( point, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn this.getBarycoord( point, target );\r\n\r\n\t\t},\r\n\t\tmidpoint: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\r\n\t\t\treturn this.getMidpoint( target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn this.getNormal( target );\r\n\r\n\t\t},\r\n\t\tplane: function ( target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\r\n\t\t\treturn this.getPlane( target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Triangle, {\r\n\r\n\t\tbarycoordFromPoint: function ( point, a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\r\n\t\t\treturn Triangle.getBarycoord( point, a, b, c, target );\r\n\r\n\t\t},\r\n\t\tnormal: function ( a, b, c, target ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\r\n\t\t\treturn Triangle.getNormal( a, b, c, target );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Shape.prototype, {\r\n\r\n\t\textractAllPoints: function ( divisions ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\r\n\t\t\treturn this.extractPoints( divisions );\r\n\r\n\t\t},\r\n\t\textrude: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\r\n\t\t\treturn new ExtrudeGeometry( this, options );\r\n\r\n\t\t},\r\n\t\tmakeGeometry: function ( options ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\r\n\t\t\treturn new ShapeGeometry( this, options );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector2.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector3.prototype, {\r\n\r\n\t\tsetEulerFromRotationMatrix: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\r\n\t\t},\r\n\t\tsetEulerFromQuaternion: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\r\n\t\t},\r\n\t\tgetPositionFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\t\treturn this.setFromMatrixPosition( m );\r\n\r\n\t\t},\r\n\t\tgetScaleFromMatrix: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\t\treturn this.setFromMatrixScale( m );\r\n\r\n\t\t},\r\n\t\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\t\treturn this.setFromMatrixColumn( matrix, index );\r\n\r\n\t\t},\r\n\t\tapplyProjection: function ( m ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\r\n\t\t\treturn this.applyMatrix4( m );\r\n\r\n\t\t},\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tdistanceToManhattan: function ( v ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\r\n\t\t\treturn this.manhattanDistanceTo( v );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Vector4.prototype, {\r\n\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\r\n\t\t\treturn this.fromBufferAttribute( attribute, index, offset );\r\n\r\n\t\t},\r\n\t\tlengthManhattan: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\r\n\t\t\treturn this.manhattanLength();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( Geometry.prototype, {\r\n\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeLineDistances: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( Object3D.prototype, {\r\n\r\n\t\tgetChildByName: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\treturn this.getObjectByName( name );\r\n\r\n\t\t},\r\n\t\trenderDepth: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\r\n\t\t},\r\n\t\ttranslate: function ( distance, axis ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\treturn this.translateOnAxis( axis, distance );\r\n\r\n\t\t},\r\n\t\tgetWorldRotation: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( Object3D.prototype, {\r\n\r\n\t\teulerOrder: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\treturn this.rotation.order;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\tthis.rotation.order = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuseQuaternion: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( LOD.prototype, {\r\n\r\n\t\tobjects: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\treturn this.levels;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperty( Skeleton.prototype, 'useVertexTexture', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t},\r\n\t\tset: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tSkinnedMesh.prototype.initBones = function () {\r\n\r\n\t\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\r\n\r\n\t};\r\n\r\n\tObject.defineProperty( Curve.prototype, '__arcLengthDivisions', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\treturn this.arcLengthDivisions;\r\n\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );\r\n\t\t\tthis.arcLengthDivisions = value;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\r\n\r\n\t\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\r\n\t\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\r\n\r\n\t\tif ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }\r\n\t\tthis.setFocalLength( focalLength );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Light.prototype, {\r\n\t\tonlyShadow: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFov: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\t\tthis.shadow.camera.fov = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraLeft: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\t\tthis.shadow.camera.left = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraRight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\t\tthis.shadow.camera.right = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraTop: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\t\tthis.shadow.camera.top = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraBottom: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\t\tthis.shadow.camera.bottom = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraNear: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\t\tthis.shadow.camera.near = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFar: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\t\tthis.shadow.camera.far = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraVisible: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowBias: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\t\tthis.shadow.bias = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowDarkness: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapWidth: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\t\tthis.shadow.mapSize.width = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapHeight: {\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\t\tthis.shadow.mapSize.height = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( BufferAttribute.prototype, {\r\n\r\n\t\tlength: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\r\n\t\t\t\treturn this.array.length;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tdynamic: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\r\n\t\t\t\treturn this.usage === DynamicDrawUsage;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\r\n\t\t\t\tthis.setUsage( DynamicDrawUsage );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( BufferAttribute.prototype, {\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\r\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\t\tcopyIndicesArray: function ( /* indices */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetArray: function ( /* array */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.assign( BufferGeometry.prototype, {\r\n\r\n\t\taddIndex: function ( index ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\tthis.setIndex( index );\r\n\r\n\t\t},\r\n\t\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\r\n\r\n\t\t\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( name === 'index' ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.setAttribute( name, attribute );\r\n\r\n\t\t},\r\n\t\taddDrawCall: function ( start, count, indexOffset ) {\r\n\r\n\t\t\tif ( indexOffset !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\r\n\t\t\t}\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\tthis.addGroup( start, count );\r\n\r\n\t\t},\r\n\t\tclearDrawCalls: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\tthis.clearGroups();\r\n\r\n\t\t},\r\n\t\tcomputeTangents: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\r\n\t\t},\r\n\t\tcomputeOffsets: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\r\n\t\t},\r\n\t\tremoveAttribute: function ( name ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\r\n\r\n\t\t\treturn this.deleteAttribute( name );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\tObject.defineProperties( BufferGeometry.prototype, {\r\n\r\n\t\tdrawcalls: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffsets: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( InterleavedBuffer.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\r\n\t\t\t\treturn this.usage === DynamicDrawUsage;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );\r\n\t\t\t\tthis.setUsage( value );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.assign( InterleavedBuffer.prototype, {\r\n\t\tsetDynamic: function ( value ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\r\n\t\t\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\r\n\t\t\treturn this;\r\n\r\n\t\t},\r\n\t\tsetArray: function ( /* array */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\r\n\r\n\t\t}\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( ExtrudeBufferGeometry.prototype, {\r\n\r\n\t\tgetArrays: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShapeList: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );\r\n\r\n\t\t},\r\n\r\n\t\taddShape: function () {\r\n\r\n\t\t\tconsole.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Uniform.prototype, {\r\n\r\n\t\tdynamic: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tonUpdate: {\r\n\t\t\tvalue: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Material.prototype, {\r\n\r\n\t\twrapAround: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\toverdraw: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\twrapRGB: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\r\n\t\t\t\treturn new Color();\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tshading: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\r\n\t\t\t\tthis.flatShading = ( value === FlatShading );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstencilMask: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\r\n\t\t\t\treturn this.stencilFuncMask;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\r\n\t\t\t\tthis.stencilFuncMask = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( MeshPhongMaterial.prototype, {\r\n\r\n\t\tmetal: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( ShaderMaterial.prototype, {\r\n\r\n\t\tderivatives: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\treturn this.extensions.derivatives;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\tthis.extensions.derivatives = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.assign( WebGLRenderer.prototype, {\r\n\r\n\t\tclearTarget: function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\t\tthis.clear( color, depth, stencil );\r\n\r\n\t\t},\r\n\t\tanimate: function ( callback ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\r\n\t\t\tthis.setAnimationLoop( callback );\r\n\r\n\t\t},\r\n\t\tgetCurrentRenderTarget: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\r\n\t\t\treturn this.getRenderTarget();\r\n\r\n\t\t},\r\n\t\tgetMaxAnisotropy: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\r\n\t\t\treturn this.capabilities.getMaxAnisotropy();\r\n\r\n\t\t},\r\n\t\tgetPrecision: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\r\n\t\t\treturn this.capabilities.precision;\r\n\r\n\t\t},\r\n\t\tresetGLState: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\r\n\t\t\treturn this.state.reset();\r\n\r\n\t\t},\r\n\t\tsupportsFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\r\n\t\t},\r\n\t\tsupportsHalfFloatTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\t},\r\n\t\tsupportsStandardDerivatives: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTextureS3TC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\t},\r\n\t\tsupportsCompressedTexturePVRTC: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\t},\r\n\t\tsupportsBlendMinMax: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\t},\r\n\t\tsupportsVertexTextures: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\r\n\t\t\treturn this.capabilities.vertexTextures;\r\n\r\n\t\t},\r\n\t\tsupportsInstancedArrays: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t},\r\n\t\tenableScissorTest: function ( boolean ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\t\tthis.setScissorTest( boolean );\r\n\r\n\t\t},\r\n\t\tinitMaterial: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPrePlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\taddPostPlugin: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\r\n\t\t},\r\n\t\tupdateShadowMap: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetFaceCulling: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\r\n\r\n\t\t},\r\n\t\tallocTextureUnit: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTexture: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTexture2D: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\r\n\r\n\t\t},\r\n\t\tsetTextureCube: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\r\n\r\n\t\t},\r\n\t\tgetActiveMipMapLevel: function () {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\r\n\t\t\treturn this.getActiveMipmapLevel();\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLRenderer.prototype, {\r\n\r\n\t\tshadowMapEnabled: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.enabled;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\tthis.shadowMap.enabled = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapType: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\treturn this.shadowMap.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\tthis.shadowMap.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapCullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tcontext: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\r\n\t\t\t\treturn this.getContext();\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tObject.defineProperties( WebGLShadowMap.prototype, {\r\n\r\n\t\tcullFace: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( /* cullFace */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderReverseSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderSingleSided: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t},\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTargetCube.prototype, {\r\n\r\n\t\tactiveCubeFace: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tactiveMipMapLevel: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebGLRenderTarget.prototype, {\r\n\r\n\t\twrapS: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\treturn this.texture.wrapS;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\tthis.texture.wrapS = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapT: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\treturn this.texture.wrapT;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\tthis.texture.wrapT = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tmagFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\treturn this.texture.magFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\tthis.texture.magFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tminFilter: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\treturn this.texture.minFilter;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\tthis.texture.minFilter = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tanisotropy: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\treturn this.texture.anisotropy;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\tthis.texture.anisotropy = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\toffset: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\treturn this.texture.offset;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\tthis.texture.offset = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\trepeat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\treturn this.texture.repeat;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\tthis.texture.repeat = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tformat: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\treturn this.texture.format;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\tthis.texture.format = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\ttype: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\treturn this.texture.type;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\tthis.texture.type = value;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tgenerateMipmaps: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\treturn this.texture.generateMipmaps;\r\n\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\tthis.texture.generateMipmaps = value;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( WebVRManager.prototype, {\r\n\r\n\t\tstanding: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .standing has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tuserHeight: {\r\n\t\t\tset: function ( /* value */ ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebVRManager: .userHeight has been removed.' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\t//\r\n\r\n\tObject.defineProperties( Audio.prototype, {\r\n\r\n\t\tload: {\r\n\t\t\tvalue: function ( file ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\r\n\t\t\t\tvar scope = this;\r\n\t\t\t\tvar audioLoader = new AudioLoader();\r\n\t\t\t\taudioLoader.load( file, function ( buffer ) {\r\n\r\n\t\t\t\t\tscope.setBuffer( buffer );\r\n\r\n\t\t\t\t} );\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tstartTime: {\r\n\t\t\tset: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Audio: .startTime is now .play( delay ).' );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\tAudioAnalyser.prototype.getData = function () {\r\n\r\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\r\n\t\treturn this.getFrequencyData();\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\r\n\t\treturn this.update( renderer, scene );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar GeometryUtils = {\r\n\r\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\t\t\tvar matrix;\r\n\r\n\t\t\tif ( geometry2.isMesh ) {\r\n\r\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\t\tmatrix = geometry2.matrix;\r\n\t\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t\t},\r\n\r\n\t\tcenter: function ( geometry ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\t\treturn geometry.center();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tImageUtils.crossOrigin = undefined;\r\n\r\n\tImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) { texture.mapping = mapping; }\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) { texture.mapping = mapping; }\r\n\r\n\t\treturn texture;\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTexture = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\tImageUtils.loadCompressedTextureCube = function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction CanvasRenderer() {\r\n\r\n\t\tconsole.error( 'THREE.CanvasRenderer has been removed' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction JSONLoader() {\r\n\r\n\t\tconsole.error( 'THREE.JSONLoader has been removed.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar SceneUtils = {\r\n\r\n\t\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tdetach: function ( /* child, parent, scene */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t},\r\n\r\n\t\tattach: function ( /* child, scene, parent */ ) {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction LensFlare() {\r\n\r\n\t\tconsole.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );\r\n\r\n\t}\r\n\r\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\r\n\r\n\t\t/* eslint-disable no-undef */\r\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\r\n\t\t\trevision: REVISION,\r\n\t\t} } ) );\r\n\t\t/* eslint-enable no-undef */\r\n\r\n\t}\r\n\r\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\r\n\texports.AddEquation = AddEquation;\r\n\texports.AddOperation = AddOperation;\r\n\texports.AdditiveBlending = AdditiveBlending;\r\n\texports.AlphaFormat = AlphaFormat;\r\n\texports.AlwaysDepth = AlwaysDepth;\r\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\r\n\texports.AmbientLight = AmbientLight;\r\n\texports.AmbientLightProbe = AmbientLightProbe;\r\n\texports.AnimationClip = AnimationClip;\r\n\texports.AnimationLoader = AnimationLoader;\r\n\texports.AnimationMixer = AnimationMixer;\r\n\texports.AnimationObjectGroup = AnimationObjectGroup;\r\n\texports.AnimationUtils = AnimationUtils;\r\n\texports.ArcCurve = ArcCurve;\r\n\texports.ArrayCamera = ArrayCamera;\r\n\texports.ArrowHelper = ArrowHelper;\r\n\texports.Audio = Audio;\r\n\texports.AudioAnalyser = AudioAnalyser;\r\n\texports.AudioContext = AudioContext;\r\n\texports.AudioListener = AudioListener;\r\n\texports.AudioLoader = AudioLoader;\r\n\texports.AxesHelper = AxesHelper;\r\n\texports.AxisHelper = AxisHelper;\r\n\texports.BackSide = BackSide;\r\n\texports.BasicDepthPacking = BasicDepthPacking;\r\n\texports.BasicShadowMap = BasicShadowMap;\r\n\texports.BinaryTextureLoader = BinaryTextureLoader;\r\n\texports.Bone = Bone;\r\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\r\n\texports.BoundingBoxHelper = BoundingBoxHelper;\r\n\texports.Box2 = Box2;\r\n\texports.Box3 = Box3;\r\n\texports.Box3Helper = Box3Helper;\r\n\texports.BoxBufferGeometry = BoxBufferGeometry;\r\n\texports.BoxGeometry = BoxGeometry;\r\n\texports.BoxHelper = BoxHelper;\r\n\texports.BufferAttribute = BufferAttribute;\r\n\texports.BufferGeometry = BufferGeometry;\r\n\texports.BufferGeometryLoader = BufferGeometryLoader;\r\n\texports.ByteType = ByteType;\r\n\texports.Cache = Cache;\r\n\texports.Camera = Camera;\r\n\texports.CameraHelper = CameraHelper;\r\n\texports.CanvasRenderer = CanvasRenderer;\r\n\texports.CanvasTexture = CanvasTexture;\r\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\r\n\texports.CineonToneMapping = CineonToneMapping;\r\n\texports.CircleBufferGeometry = CircleBufferGeometry;\r\n\texports.CircleGeometry = CircleGeometry;\r\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\r\n\texports.Clock = Clock;\r\n\texports.ClosedSplineCurve3 = ClosedSplineCurve3;\r\n\texports.Color = Color;\r\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\r\n\texports.CompressedTexture = CompressedTexture;\r\n\texports.CompressedTextureLoader = CompressedTextureLoader;\r\n\texports.ConeBufferGeometry = ConeBufferGeometry;\r\n\texports.ConeGeometry = ConeGeometry;\r\n\texports.CubeCamera = CubeCamera;\r\n\texports.CubeGeometry = BoxGeometry;\r\n\texports.CubeReflectionMapping = CubeReflectionMapping;\r\n\texports.CubeRefractionMapping = CubeRefractionMapping;\r\n\texports.CubeTexture = CubeTexture;\r\n\texports.CubeTextureLoader = CubeTextureLoader;\r\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\r\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\r\n\texports.CubicBezierCurve = CubicBezierCurve;\r\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\r\n\texports.CubicInterpolant = CubicInterpolant;\r\n\texports.CullFaceBack = CullFaceBack;\r\n\texports.CullFaceFront = CullFaceFront;\r\n\texports.CullFaceFrontBack = CullFaceFrontBack;\r\n\texports.CullFaceNone = CullFaceNone;\r\n\texports.Curve = Curve;\r\n\texports.CurvePath = CurvePath;\r\n\texports.CustomBlending = CustomBlending;\r\n\texports.CylinderBufferGeometry = CylinderBufferGeometry;\r\n\texports.CylinderGeometry = CylinderGeometry;\r\n\texports.Cylindrical = Cylindrical;\r\n\texports.DataTexture = DataTexture;\r\n\texports.DataTexture2DArray = DataTexture2DArray;\r\n\texports.DataTexture3D = DataTexture3D;\r\n\texports.DataTextureLoader = DataTextureLoader;\r\n\texports.DecrementStencilOp = DecrementStencilOp;\r\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\r\n\texports.DefaultLoadingManager = DefaultLoadingManager;\r\n\texports.DepthFormat = DepthFormat;\r\n\texports.DepthStencilFormat = DepthStencilFormat;\r\n\texports.DepthTexture = DepthTexture;\r\n\texports.DirectionalLight = DirectionalLight;\r\n\texports.DirectionalLightHelper = DirectionalLightHelper;\r\n\texports.DirectionalLightShadow = DirectionalLightShadow;\r\n\texports.DiscreteInterpolant = DiscreteInterpolant;\r\n\texports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;\r\n\texports.DodecahedronGeometry = DodecahedronGeometry;\r\n\texports.DoubleSide = DoubleSide;\r\n\texports.DstAlphaFactor = DstAlphaFactor;\r\n\texports.DstColorFactor = DstColorFactor;\r\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\r\n\texports.DynamicCopyUsage = DynamicCopyUsage;\r\n\texports.DynamicDrawUsage = DynamicDrawUsage;\r\n\texports.DynamicReadUsage = DynamicReadUsage;\r\n\texports.EdgesGeometry = EdgesGeometry;\r\n\texports.EdgesHelper = EdgesHelper;\r\n\texports.EllipseCurve = EllipseCurve;\r\n\texports.EqualDepth = EqualDepth;\r\n\texports.EqualStencilFunc = EqualStencilFunc;\r\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\r\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\r\n\texports.Euler = Euler;\r\n\texports.EventDispatcher = EventDispatcher;\r\n\texports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;\r\n\texports.ExtrudeGeometry = ExtrudeGeometry;\r\n\texports.Face3 = Face3;\r\n\texports.Face4 = Face4;\r\n\texports.FaceColors = FaceColors;\r\n\texports.FaceNormalsHelper = FaceNormalsHelper;\r\n\texports.FileLoader = FileLoader;\r\n\texports.FlatShading = FlatShading;\r\n\texports.Float32Attribute = Float32Attribute;\r\n\texports.Float32BufferAttribute = Float32BufferAttribute;\r\n\texports.Float64Attribute = Float64Attribute;\r\n\texports.Float64BufferAttribute = Float64BufferAttribute;\r\n\texports.FloatType = FloatType;\r\n\texports.Fog = Fog;\r\n\texports.FogExp2 = FogExp2;\r\n\texports.Font = Font;\r\n\texports.FontLoader = FontLoader;\r\n\texports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;\r\n\texports.FrontFaceDirectionCW = FrontFaceDirectionCW;\r\n\texports.FrontSide = FrontSide;\r\n\texports.Frustum = Frustum;\r\n\texports.GammaEncoding = GammaEncoding;\r\n\texports.Geometry = Geometry;\r\n\texports.GeometryUtils = GeometryUtils;\r\n\texports.GreaterDepth = GreaterDepth;\r\n\texports.GreaterEqualDepth = GreaterEqualDepth;\r\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\r\n\texports.GreaterStencilFunc = GreaterStencilFunc;\r\n\texports.GridHelper = GridHelper;\r\n\texports.Group = Group;\r\n\texports.HalfFloatType = HalfFloatType;\r\n\texports.HemisphereLight = HemisphereLight;\r\n\texports.HemisphereLightHelper = HemisphereLightHelper;\r\n\texports.HemisphereLightProbe = HemisphereLightProbe;\r\n\texports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;\r\n\texports.IcosahedronGeometry = IcosahedronGeometry;\r\n\texports.ImageBitmapLoader = ImageBitmapLoader;\r\n\texports.ImageLoader = ImageLoader;\r\n\texports.ImageUtils = ImageUtils;\r\n\texports.ImmediateRenderObject = ImmediateRenderObject;\r\n\texports.IncrementStencilOp = IncrementStencilOp;\r\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\r\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\r\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\r\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\r\n\texports.InstancedMesh = InstancedMesh;\r\n\texports.Int16Attribute = Int16Attribute;\r\n\texports.Int16BufferAttribute = Int16BufferAttribute;\r\n\texports.Int32Attribute = Int32Attribute;\r\n\texports.Int32BufferAttribute = Int32BufferAttribute;\r\n\texports.Int8Attribute = Int8Attribute;\r\n\texports.Int8BufferAttribute = Int8BufferAttribute;\r\n\texports.IntType = IntType;\r\n\texports.InterleavedBuffer = InterleavedBuffer;\r\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\r\n\texports.Interpolant = Interpolant;\r\n\texports.InterpolateDiscrete = InterpolateDiscrete;\r\n\texports.InterpolateLinear = InterpolateLinear;\r\n\texports.InterpolateSmooth = InterpolateSmooth;\r\n\texports.InvertStencilOp = InvertStencilOp;\r\n\texports.JSONLoader = JSONLoader;\r\n\texports.KeepStencilOp = KeepStencilOp;\r\n\texports.KeyframeTrack = KeyframeTrack;\r\n\texports.LOD = LOD;\r\n\texports.LatheBufferGeometry = LatheBufferGeometry;\r\n\texports.LatheGeometry = LatheGeometry;\r\n\texports.Layers = Layers;\r\n\texports.LensFlare = LensFlare;\r\n\texports.LessDepth = LessDepth;\r\n\texports.LessEqualDepth = LessEqualDepth;\r\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\r\n\texports.LessStencilFunc = LessStencilFunc;\r\n\texports.Light = Light;\r\n\texports.LightProbe = LightProbe;\r\n\texports.LightProbeHelper = LightProbeHelper;\r\n\texports.LightShadow = LightShadow;\r\n\texports.Line = Line;\r\n\texports.Line3 = Line3;\r\n\texports.LineBasicMaterial = LineBasicMaterial;\r\n\texports.LineCurve = LineCurve;\r\n\texports.LineCurve3 = LineCurve3;\r\n\texports.LineDashedMaterial = LineDashedMaterial;\r\n\texports.LineLoop = LineLoop;\r\n\texports.LinePieces = LinePieces;\r\n\texports.LineSegments = LineSegments;\r\n\texports.LineStrip = LineStrip;\r\n\texports.LinearEncoding = LinearEncoding;\r\n\texports.LinearFilter = LinearFilter;\r\n\texports.LinearInterpolant = LinearInterpolant;\r\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\r\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\r\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\r\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\r\n\texports.LinearToneMapping = LinearToneMapping;\r\n\texports.Loader = Loader;\r\n\texports.LoaderUtils = LoaderUtils;\r\n\texports.LoadingManager = LoadingManager;\r\n\texports.LogLuvEncoding = LogLuvEncoding;\r\n\texports.LoopOnce = LoopOnce;\r\n\texports.LoopPingPong = LoopPingPong;\r\n\texports.LoopRepeat = LoopRepeat;\r\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\r\n\texports.LuminanceFormat = LuminanceFormat;\r\n\texports.MOUSE = MOUSE;\r\n\texports.Material = Material;\r\n\texports.MaterialLoader = MaterialLoader;\r\n\texports.Math = _Math;\r\n\texports.Matrix3 = Matrix3;\r\n\texports.Matrix4 = Matrix4;\r\n\texports.MaxEquation = MaxEquation;\r\n\texports.Mesh = Mesh;\r\n\texports.MeshBasicMaterial = MeshBasicMaterial;\r\n\texports.MeshDepthMaterial = MeshDepthMaterial;\r\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\r\n\texports.MeshFaceMaterial = MeshFaceMaterial;\r\n\texports.MeshLambertMaterial = MeshLambertMaterial;\r\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\r\n\texports.MeshNormalMaterial = MeshNormalMaterial;\r\n\texports.MeshPhongMaterial = MeshPhongMaterial;\r\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\r\n\texports.MeshStandardMaterial = MeshStandardMaterial;\r\n\texports.MeshToonMaterial = MeshToonMaterial;\r\n\texports.MinEquation = MinEquation;\r\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\r\n\texports.MixOperation = MixOperation;\r\n\texports.MultiMaterial = MultiMaterial;\r\n\texports.MultiplyBlending = MultiplyBlending;\r\n\texports.MultiplyOperation = MultiplyOperation;\r\n\texports.NearestFilter = NearestFilter;\r\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\r\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\r\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\r\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\r\n\texports.NeverDepth = NeverDepth;\r\n\texports.NeverStencilFunc = NeverStencilFunc;\r\n\texports.NoBlending = NoBlending;\r\n\texports.NoColors = NoColors;\r\n\texports.NoToneMapping = NoToneMapping;\r\n\texports.NormalBlending = NormalBlending;\r\n\texports.NotEqualDepth = NotEqualDepth;\r\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\r\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\r\n\texports.Object3D = Object3D;\r\n\texports.ObjectLoader = ObjectLoader;\r\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\r\n\texports.OctahedronBufferGeometry = OctahedronBufferGeometry;\r\n\texports.OctahedronGeometry = OctahedronGeometry;\r\n\texports.OneFactor = OneFactor;\r\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\r\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\r\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\r\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\r\n\texports.OrthographicCamera = OrthographicCamera;\r\n\texports.PCFShadowMap = PCFShadowMap;\r\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\r\n\texports.ParametricBufferGeometry = ParametricBufferGeometry;\r\n\texports.ParametricGeometry = ParametricGeometry;\r\n\texports.Particle = Particle;\r\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\r\n\texports.ParticleSystem = ParticleSystem;\r\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\r\n\texports.Path = Path;\r\n\texports.PerspectiveCamera = PerspectiveCamera;\r\n\texports.Plane = Plane;\r\n\texports.PlaneBufferGeometry = PlaneBufferGeometry;\r\n\texports.PlaneGeometry = PlaneGeometry;\r\n\texports.PlaneHelper = PlaneHelper;\r\n\texports.PointCloud = PointCloud;\r\n\texports.PointCloudMaterial = PointCloudMaterial;\r\n\texports.PointLight = PointLight;\r\n\texports.PointLightHelper = PointLightHelper;\r\n\texports.Points = Points;\r\n\texports.PointsMaterial = PointsMaterial;\r\n\texports.PolarGridHelper = PolarGridHelper;\r\n\texports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;\r\n\texports.PolyhedronGeometry = PolyhedronGeometry;\r\n\texports.PositionalAudio = PositionalAudio;\r\n\texports.PositionalAudioHelper = PositionalAudioHelper;\r\n\texports.PropertyBinding = PropertyBinding;\r\n\texports.PropertyMixer = PropertyMixer;\r\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\r\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\r\n\texports.Quaternion = Quaternion;\r\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\r\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\r\n\texports.REVISION = REVISION;\r\n\texports.RGBADepthPacking = RGBADepthPacking;\r\n\texports.RGBAFormat = RGBAFormat;\r\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\r\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\r\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\r\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\r\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\r\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\r\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\r\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\r\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\r\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\r\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\r\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\r\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\r\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\r\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\r\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\r\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\r\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\r\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\r\n\texports.RGBDEncoding = RGBDEncoding;\r\n\texports.RGBEEncoding = RGBEEncoding;\r\n\texports.RGBEFormat = RGBEFormat;\r\n\texports.RGBFormat = RGBFormat;\r\n\texports.RGBM16Encoding = RGBM16Encoding;\r\n\texports.RGBM7Encoding = RGBM7Encoding;\r\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\r\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\r\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\r\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\r\n\texports.RawShaderMaterial = RawShaderMaterial;\r\n\texports.Ray = Ray;\r\n\texports.Raycaster = Raycaster;\r\n\texports.RectAreaLight = RectAreaLight;\r\n\texports.RectAreaLightHelper = RectAreaLightHelper;\r\n\texports.RedFormat = RedFormat;\r\n\texports.ReinhardToneMapping = ReinhardToneMapping;\r\n\texports.RepeatWrapping = RepeatWrapping;\r\n\texports.ReplaceStencilOp = ReplaceStencilOp;\r\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\r\n\texports.RingBufferGeometry = RingBufferGeometry;\r\n\texports.RingGeometry = RingGeometry;\r\n\texports.Scene = Scene;\r\n\texports.SceneUtils = SceneUtils;\r\n\texports.ShaderChunk = ShaderChunk;\r\n\texports.ShaderLib = ShaderLib;\r\n\texports.ShaderMaterial = ShaderMaterial;\r\n\texports.ShadowMaterial = ShadowMaterial;\r\n\texports.Shape = Shape;\r\n\texports.ShapeBufferGeometry = ShapeBufferGeometry;\r\n\texports.ShapeGeometry = ShapeGeometry;\r\n\texports.ShapePath = ShapePath;\r\n\texports.ShapeUtils = ShapeUtils;\r\n\texports.ShortType = ShortType;\r\n\texports.Skeleton = Skeleton;\r\n\texports.SkeletonHelper = SkeletonHelper;\r\n\texports.SkinnedMesh = SkinnedMesh;\r\n\texports.SmoothShading = SmoothShading;\r\n\texports.Sphere = Sphere;\r\n\texports.SphereBufferGeometry = SphereBufferGeometry;\r\n\texports.SphereGeometry = SphereGeometry;\r\n\texports.Spherical = Spherical;\r\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\r\n\texports.SphericalReflectionMapping = SphericalReflectionMapping;\r\n\texports.Spline = Spline;\r\n\texports.SplineCurve = SplineCurve;\r\n\texports.SplineCurve3 = SplineCurve3;\r\n\texports.SpotLight = SpotLight;\r\n\texports.SpotLightHelper = SpotLightHelper;\r\n\texports.SpotLightShadow = SpotLightShadow;\r\n\texports.Sprite = Sprite;\r\n\texports.SpriteMaterial = SpriteMaterial;\r\n\texports.SrcAlphaFactor = SrcAlphaFactor;\r\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\r\n\texports.SrcColorFactor = SrcColorFactor;\r\n\texports.StaticCopyUsage = StaticCopyUsage;\r\n\texports.StaticDrawUsage = StaticDrawUsage;\r\n\texports.StaticReadUsage = StaticReadUsage;\r\n\texports.StereoCamera = StereoCamera;\r\n\texports.StreamCopyUsage = StreamCopyUsage;\r\n\texports.StreamDrawUsage = StreamDrawUsage;\r\n\texports.StreamReadUsage = StreamReadUsage;\r\n\texports.StringKeyframeTrack = StringKeyframeTrack;\r\n\texports.SubtractEquation = SubtractEquation;\r\n\texports.SubtractiveBlending = SubtractiveBlending;\r\n\texports.TOUCH = TOUCH;\r\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\r\n\texports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;\r\n\texports.TetrahedronGeometry = TetrahedronGeometry;\r\n\texports.TextBufferGeometry = TextBufferGeometry;\r\n\texports.TextGeometry = TextGeometry;\r\n\texports.Texture = Texture;\r\n\texports.TextureLoader = TextureLoader;\r\n\texports.TorusBufferGeometry = TorusBufferGeometry;\r\n\texports.TorusGeometry = TorusGeometry;\r\n\texports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;\r\n\texports.TorusKnotGeometry = TorusKnotGeometry;\r\n\texports.Triangle = Triangle;\r\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\r\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\r\n\texports.TrianglesDrawMode = TrianglesDrawMode;\r\n\texports.TubeBufferGeometry = TubeBufferGeometry;\r\n\texports.TubeGeometry = TubeGeometry;\r\n\texports.UVMapping = UVMapping;\r\n\texports.Uint16Attribute = Uint16Attribute;\r\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\r\n\texports.Uint32Attribute = Uint32Attribute;\r\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\r\n\texports.Uint8Attribute = Uint8Attribute;\r\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\r\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\r\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\r\n\texports.Uncharted2ToneMapping = Uncharted2ToneMapping;\r\n\texports.Uniform = Uniform;\r\n\texports.UniformsLib = UniformsLib;\r\n\texports.UniformsUtils = UniformsUtils;\r\n\texports.UnsignedByteType = UnsignedByteType;\r\n\texports.UnsignedInt248Type = UnsignedInt248Type;\r\n\texports.UnsignedIntType = UnsignedIntType;\r\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\r\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\r\n\texports.UnsignedShort565Type = UnsignedShort565Type;\r\n\texports.UnsignedShortType = UnsignedShortType;\r\n\texports.VSMShadowMap = VSMShadowMap;\r\n\texports.Vector2 = Vector2;\r\n\texports.Vector3 = Vector3;\r\n\texports.Vector4 = Vector4;\r\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\r\n\texports.Vertex = Vertex;\r\n\texports.VertexColors = VertexColors;\r\n\texports.VertexNormalsHelper = VertexNormalsHelper;\r\n\texports.VideoTexture = VideoTexture;\r\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\r\n\texports.WebGLRenderTarget = WebGLRenderTarget;\r\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\r\n\texports.WebGLRenderer = WebGLRenderer;\r\n\texports.WebGLUtils = WebGLUtils;\r\n\texports.WireframeGeometry = WireframeGeometry;\r\n\texports.WireframeHelper = WireframeHelper;\r\n\texports.WrapAroundEnding = WrapAroundEnding;\r\n\texports.XHRLoader = XHRLoader;\r\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\r\n\texports.ZeroFactor = ZeroFactor;\r\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\r\n\texports.ZeroStencilOp = ZeroStencilOp;\r\n\texports.sRGBEncoding = sRGBEncoding;\r\n\r\n    return exports;\r\n});\r\n\ndefine('skylark-threejs/main',[\r\n\t\"skylark-langx/skylark\",\r\n    \"./three\"\r\n], function(skylark,threejs) {\r\n    return skylark.attach(\"intg.threejs\",threejs);\r\n});\r\n\ndefine('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });\n\ndefine('skylark-online3dviewer/ImporterViewer',[\r\n\t\"skylark-threejs\",\r\n\t\"skylark-jsmodeler\"\r\n],function(THREE,JSM){\r\n\tJSM.THREE = THREE;\r\n\t\r\n\tvar ImporterViewer = function ()\r\n\t{\r\n\t\tthis.viewer = null;\r\n\t\tthis.jsonData = null;\r\n\t};\r\n\r\n\tImporterViewer.prototype.Init = function (canvasName)\r\n\t{\r\n\t\tvar viewerSettings = {\r\n\t\t\tcameraEyePosition : [8.0, -6.0, 4.0],\r\n\t\t\tcameraCenterPosition : [0.0, 0.0, 0.0],\r\n\t\t\tcameraUpVector : [0, 0, 1]\r\n\t\t};\r\n\r\n\t\tthis.viewer = new JSM.ThreeViewer ();\r\n\t\tvar canvas = document.getElementById (canvasName);\r\n\t\tif (!this.viewer.Start (canvas, viewerSettings)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.viewer.navigation.SetNearDistanceLimit (0.1);\r\n\t\tthis.viewer.navigation.SetFarDistanceLimit (100000.0);\r\n\t\tthis.viewer.SetClearColor (0xdddddd);\r\n\t\tthis.viewer.Draw ();\r\n\t\t\r\n\t\treturn true;\r\n\t};\r\n\r\n\tImporterViewer.prototype.GetJsonData = function ()\r\n\t{\r\n\t\treturn this.jsonData;\r\n\t};\r\n\r\n\tImporterViewer.prototype.SetJsonData = function (jsonData)\r\n\t{\r\n\t\tthis.jsonData = jsonData;\r\n\t};\r\n\r\n\tImporterViewer.prototype.RemoveMeshes = function ()\r\n\t{\r\n\t\tthis.viewer.RemoveMeshes ();\r\n\t};\r\n\r\n\tImporterViewer.prototype.ShowAllMeshes = function (inEnvironment)\r\n\t{\r\n\t\tthis.RemoveMeshes ();\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tvar currentMeshIndex = 0;\r\n\t\tvar environment = {\r\n\t\t\tonStart : function (taskCount/*, meshes*/) {\r\n\t\t\t\tinEnvironment.onStart (taskCount);\r\n\t\t\t\tmyThis.viewer.EnableDraw (false);\r\n\t\t\t},\r\n\t\t\tonProgress : function (currentTask, meshes) {\r\n\t\t\t\twhile (currentMeshIndex < meshes.length) {\r\n\t\t\t\t\tmyThis.viewer.AddMesh (meshes[currentMeshIndex]);\r\n\t\t\t\t\tcurrentMeshIndex = currentMeshIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\tinEnvironment.onProgress (currentTask);\r\n\t\t\t},\r\n\t\t\tonFinish : function (meshes) {\r\n\t\t\t\tmyThis.AdjustClippingPlanes (50.0);\r\n\t\t\t\tmyThis.FitInWindow ();\r\n\t\t\t\tmyThis.viewer.EnableDraw (true);\r\n\t\t\t\tmyThis.viewer.Draw ();\r\n\t\t\t\tinEnvironment.onFinish (meshes);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tJSM.ConvertJSONDataToThreeMeshes (this.jsonData, this.Draw.bind (this), environment);\r\n\t};\r\n\r\n\tImporterViewer.prototype.GetMeshesUnderPosition = function (x, y)\r\n\t{\r\n\t\tvar objects = this.viewer.GetObjectsUnderPosition (x, y);\r\n\t\tvar meshes = [];\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < objects.length; i++) {\r\n\t\t\tif (objects[i].object instanceof THREE.Mesh) {\r\n\t\t\t\tmeshes.push (objects[i].object);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn meshes;\r\n\t};\r\n\r\n\tImporterViewer.prototype.ShowMesh = function (index, show)\r\n\t{\r\n\t\tthis.viewer.scene.traverse (function (current) {\r\n\t\t\tif (current instanceof THREE.Mesh) {\r\n\t\t\t\tif (current.originalJsonMeshIndex == index) {\r\n\t\t\t\t\tif (show) {\r\n\t\t\t\t\t\tcurrent.visible = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrent.visible = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tImporterViewer.prototype.GetMeshesByMaterial = function (materialIndex)\r\n\t{\r\n\t\tvar meshIndices = [];\r\n\t\tthis.viewer.scene.traverse (function (current) {\r\n\t\t\tif (current instanceof THREE.Mesh) {\r\n\t\t\t\tif (current.originalJsonMaterialIndex == materialIndex) {\r\n\t\t\t\t\tif (meshIndices.length === 0 || meshIndices[meshIndices.length - 1] != current.originalJsonMeshIndex) {\r\n\t\t\t\t\t\tmeshIndices.push (current.originalJsonMeshIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn meshIndices;\r\n\t};\r\n\r\n\tImporterViewer.prototype.HighlightMesh = function (index, highlight)\r\n\t{\r\n\t\tthis.viewer.scene.traverse (function (current) {\r\n\t\t\tif (current instanceof THREE.Mesh) {\r\n\t\t\t\tif (current.originalJsonMeshIndex == index) {\r\n\t\t\t\t\tif (highlight) {\r\n\t\t\t\t\t\tcurrent.material.emissive.setHex (0x555555);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrent.material.emissive.setHex (0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tImporterViewer.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tthis.viewer.FitInWindow ();\r\n\t};\r\n\r\n\tImporterViewer.prototype.FitMeshInWindow = function (index)\r\n\t{\r\n\t\tvar meshes = [];\r\n\t\tthis.viewer.scene.traverse (function (current) {\r\n\t\t\tif (current instanceof THREE.Mesh) {\r\n\t\t\t\tif (current.originalJsonMeshIndex == index) {\r\n\t\t\t\t\tmeshes.push (current);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.viewer.FitMeshesInWindow (meshes);\r\n\t};\r\n\r\n\tImporterViewer.prototype.FitMeshesInWindow = function (meshIndices)\r\n\t{\r\n\t\tvar meshes = [];\r\n\t\tthis.viewer.scene.traverse (function (current) {\r\n\t\t\tif (current instanceof THREE.Mesh) {\r\n\t\t\t\tif (meshIndices.indexOf (current.originalJsonMeshIndex) != -1) {\r\n\t\t\t\t\tmeshes.push (current);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.viewer.FitMeshesInWindow (meshes);\r\n\t};\r\n\r\n\tImporterViewer.prototype.AdjustClippingPlanes = function ()\r\n\t{\r\n\t\tif (this.viewer.MeshCount () > 0) {\r\n\t\t\tthis.viewer.AdjustClippingPlanes (50.0);\r\n\t\t}\r\n\t};\r\n\r\n\tImporterViewer.prototype.SetFixUp = function ()\r\n\t{\r\n\t\tthis.viewer.navigation.EnableFixUp (!this.viewer.navigation.cameraFixUp);\r\n\t};\r\n\r\n\tImporterViewer.prototype.SetNamedView = function (viewName)\r\n\t{\r\n\t\tvar eye, center, up;\r\n\t\tif (viewName == 'z') {\r\n\t\t\teye = new JSM.Coord (1.0, 0.0, 0.0);\r\n\t\t\tcenter = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tup = new JSM.Coord (0.0, 0.0, 1.0);\r\n\t\t} else if (viewName == '-z') {\r\n\t\t\teye = new JSM.Coord (-1.0, 0.0, 0.0);\r\n\t\t\tcenter = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tup = new JSM.Coord (0.0, 0.0, -1.0);\r\n\t\t} else if (viewName == 'y') {\r\n\t\t\teye = new JSM.Coord (1.0, 0.0, 0.0);\r\n\t\t\tcenter = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tup = new JSM.Coord (0.0, 1.0, 0.0);\r\n\t\t} else if (viewName == '-y') {\r\n\t\t\teye = new JSM.Coord (-1.0, 0.0, 0.0);\r\n\t\t\tcenter = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tup = new JSM.Coord (0.0, -1.0, 0.0);\r\n\t\t} else if (viewName == 'x') {\r\n\t\t\teye = new JSM.Coord (0.0, 1.0, 0.0);\r\n\t\t\tcenter = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tup = new JSM.Coord (1.0, 0.0, 0.0);\r\n\t\t} else if (viewName == '-x') {\r\n\t\t\teye = new JSM.Coord (0.0, -1.0, 0.0);\r\n\t\t\tcenter = new JSM.Coord (0.0, 0.0, 0.0);\r\n\t\t\tup = new JSM.Coord (-1.0, 0.0, 0.0);\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.viewer.cameraMove.Set (eye, center, up);\r\n\t\tthis.viewer.FitInWindow ();\r\n\t};\r\n\r\n\tImporterViewer.prototype.Draw = function ()\r\n\t{\r\n\t\tthis.viewer.Draw ();\r\n\t};\r\n\r\n\treturn ImporterViewer;\r\n});\r\n\ndefine('skylark-online3dviewer/ImporterApp',[\r\n\t\"skylark-jquery\",\r\n\t\"skylark-jsmodeler\",\r\n\t\"./InfoTable\",\r\n\t\"./FloatingControl\",\r\n\t\"./FloatingDialog\",\r\n\t\"./ExtensionInterface\",\r\n\t\"./ExtensionButtons\",\r\n\t\"./ImporterProgressBar\",\r\n\t\"./ImporterButtons\",\r\n\t\"./ImporterMenu\",\r\n\t\"./ImporterViewer\"\r\n],function($,JSM,InfoTable,FloatingControl,FloatingDialog,ExtensionInterface,ExtensionButtons, ImporterProgressBar,ImporterButtons, ImporterMenu,ImporterViewer){\r\n\tvar ImporterApp = function ()\r\n\t{\r\n\t\tthis.canvas = null;\r\n\t\tthis.viewer = null;\r\n\t\tthis.fileNames = null;\r\n\t\tthis.inGenerate = false;\r\n\t\tthis.meshesGroup = null;\r\n\t\tthis.materialMenuItems = null;\r\n\t\tthis.meshMenuItems = null;\r\n\t\tthis.extensions = [];\r\n\t\tthis.importerButtons = null;\r\n\t\tthis.extensionButtons = null;\r\n\t\tthis.introControl = null;\r\n\t\tthis.floatingDialog = null;\r\n\t\tthis.isMobile = null;\r\n\t\tthis.readyForTest = null;\r\n\t};\r\n\r\n\tImporterApp.prototype.Init = function ()\r\n\t{\r\n\t\tif (!JSM.IsWebGLEnabled () || !JSM.IsFileApiEnabled ()) {\r\n\t\t\twhile (document.body.lastChild) {\r\n\t\t\t\tdocument.body.removeChild (document.body.lastChild);\r\n\t\t\t}\r\n\r\n\t\t\tvar div = $('<div>').addClass ('nosupport').appendTo ($('body'));\r\n\t\t\tdiv.html ([\r\n\t\t\t\t'<div id=\"nosupport\">',\r\n\t\t\t\tthis.GetWelcomeText (),\r\n\t\t\t\t'<div class=\"nosupporterror\">You need a browser which supports the following technologies: WebGL, WebGLRenderingContext, File, FileReader, FileList, Blob, URL.</div>',\r\n\t\t\t\t'</div>'\r\n\t\t\t].join (''));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tvar top = $('#top');\r\n\t\tthis.importerButtons = new ImporterButtons (top);\r\n\t\tthis.importerButtons.AddLogo ('Online 3D Viewer <span class=\"version\">v 0.6.6</span>');\r\n\t\tthis.importerButtons.AddButton ('images/openfile.png', 'Open File', function () { myThis.OpenFile (); });\r\n\t\tthis.importerButtons.AddButton ('images/fitinwindow.png', 'Fit In Window', function () { myThis.FitInWindow (); });\r\n\t\tthis.importerButtons.AddToggleButton ('images/fixup.png', 'images/fixupgray.png', 'Enable/Disable Fixed Up Vector', function () { myThis.SetFixUp (); });\r\n\t\tthis.importerButtons.AddButton ('images/top.png', 'Set Up Vector (Z)', function () { myThis.SetNamedView ('z'); });\r\n\t\tthis.importerButtons.AddButton ('images/bottom.png', 'Set Up Vector (-Z)', function () { myThis.SetNamedView ('-z'); });\r\n\t\tthis.importerButtons.AddButton ('images/front.png', 'Set Up Vector (Y)', function () { myThis.SetNamedView ('y'); });\r\n\t\tthis.importerButtons.AddButton ('images/back.png', 'Set Up Vector (-Y)', function () { myThis.SetNamedView ('-y'); });\r\n\t\tthis.importerButtons.AddButton ('images/left.png', 'Set Up Vector (X)', function () { myThis.SetNamedView ('x'); });\r\n\t\tthis.importerButtons.AddButton ('images/right.png', 'Set Up Vector (-X)', function () { myThis.SetNamedView ('-x'); });\r\n\t\t\r\n\t\tthis.extensionButtons = new ExtensionButtons (top);\r\n\t\tthis.introControl = new FloatingControl ();\r\n\t\tthis.floatingDialog = new FloatingDialog ();\r\n\t\t\r\n\t\tvar match = window.matchMedia ('(max-device-width : 600px)');\r\n\t\tthis.isMobile = match.matches;\r\n\r\n\t\twindow.addEventListener ('resize', this.Resize.bind (this), false);\r\n\t\tthis.Resize ();\r\n\r\n\t\tvar canvasName = 'modelcanvas';\r\n\t\tthis.canvas = $('#' + canvasName);\r\n\t\tthis.RegisterCanvasClick ();\r\n\t\tthis.viewer = new ImporterViewer ();\r\n\t\tthis.viewer.Init (canvasName);\r\n\r\n\t\twindow.addEventListener ('dragover', this.DragOver.bind (this), false);\r\n\t\twindow.addEventListener ('drop', this.Drop.bind (this), false);\r\n\t\t\r\n\t\tvar fileInput = document.getElementById ('file');\r\n\t\tfileInput.addEventListener ('change', this.FileSelected.bind (this), false);\r\n\t\t\r\n\t\twindow.onhashchange = this.LoadFilesFromHash.bind (this);\r\n\t\tvar hasHashModel = this.LoadFilesFromHash ();\r\n\t\tif (!hasHashModel && !this.isMobile) {\r\n\t\t\tthis.ShowIntroControl ();\r\n\t\t}\r\n\t};\r\n\r\n\tImporterApp.prototype.ClearReadyForTest = function ()\r\n\t{\r\n\t\tif (this.readyForTest !== null) {\r\n\t\t\tthis.readyForTest.remove ();\r\n\t\t\tthis.readyForTest = null;\r\n\t\t}\r\n\t};\r\n\r\n\tImporterApp.prototype.SetReadyForTest = function ()\r\n\t{\r\n\t\tthis.readyForTest = $('<div>').attr ('id', 'readyfortest').hide ().appendTo ($('body'));\r\n\t};\r\n\r\n\tImporterApp.prototype.AddExtension = function (extension)\r\n\t{\r\n\t\tif (!extension.IsEnabled ()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar extInterface = new ExtensionInterface (this);\r\n\t\textension.Init (extInterface);\r\n\t};\r\n\r\n\tImporterApp.prototype.ShowIntroControl = function ()\r\n\t{\r\n\t\tvar dialogText = [\r\n\t\t\t'<div class=\"importerdialog\">',\r\n\t\t\tthis.GetWelcomeText (),\r\n\t\t\t'</div>',\r\n\t\t].join ('');\r\n\t\tthis.introControl.Open ({\r\n\t\t\tparent : this.canvas,\r\n\t\t\ttext : dialogText\r\n\t\t});\r\n\t\tthis.Resize ();\r\n\t};\r\n\r\n\tImporterApp.prototype.HideIntroControl = function ()\r\n\t{\r\n\t\tthis.introControl.Close ();\r\n\t\tthis.Resize ();\r\n\t};\r\n\r\n\tImporterApp.prototype.GetWelcomeText = function ()\r\n\t{\r\n\t\tvar welcomeText = [\r\n\t\t\t'<div class=\"welcometitle\">Welcome to Online 3D Viewer!</div>',\r\n\t\t\t'<div class=\"welcometext\">Here you can view your local 3D models online. You have three ways to open a file. Use the open button above to select files, simply drag and drop files to this browser window, or define the url of the files as location hash.</div>',\r\n\t\t\t'<div class=\"welcometextformats\">Supported formats: 3ds, obj, stl, off.</div>',\r\n\t\t\t'<div class=\"welcometext\">Powered by <a target=\"_blank\" href=\"https://github.com/mrdoob/three.js/\">Three.js</a> and <a target=\"_blank\" href=\"https://github.com/kovacsv/JSModeler\">JSModeler</a>.</div>',\r\n\t\t\t'<div class=\"welcometext\"><a target=\"_blank\" href=\"https://github.com/kovacsv/Online3DViewer\"><img src=\"images/githublogo.png\"/></a></div>',\r\n\t\t].join ('');\r\n\t\treturn welcomeText;\r\n\t};\r\n\r\n\tImporterApp.prototype.Resize = function ()\r\n\t{\r\n\t\tfunction SetWidth (elem, value)\r\n\t\t{\r\n\t\t\telem.width = value;\r\n\t\t\telem.style.width = value + 'px';\r\n\t\t}\r\n\r\n\t\tfunction SetHeight (elem, value)\r\n\t\t{\r\n\t\t\telem.height = value;\r\n\t\t\telem.style.height = value + 'px';\r\n\t\t}\r\n\r\n\t\tvar top = document.getElementById ('top');\r\n\t\tvar left = document.getElementById ('left');\r\n\t\tvar canvas = document.getElementById ('modelcanvas');\r\n\t\tvar height = document.body.clientHeight - top.offsetHeight;\r\n\r\n\t\tSetHeight (left, height);\r\n\t\tSetHeight (canvas, height);\r\n\t\tSetWidth (canvas, document.body.clientWidth - left.offsetWidth);\r\n\t\t\r\n\t\tthis.introControl.Resize ();\r\n\t\tthis.floatingDialog.Resize ();\r\n\t};\r\n\r\n\tImporterApp.prototype.JsonLoaded = function (progressBar)\r\n\t{\r\n\t\tthis.Generate (progressBar);\r\n\t};\r\n\r\n\tImporterApp.prototype.GenerateMenu = function ()\r\n\t{\r\n\t\tfunction AddDefaultGroup (menu, name, id)\r\n\t\t{\r\n\t\t\tvar group = menu.AddGroup (name, {\r\n\t\t\t\tid : id,\r\n\t\t\t\topenCloseButton : {\r\n\t\t\t\t\ttitle : 'Show/Hide ' + name\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn group;\r\n\t\t}\r\n\r\n\t\tfunction AddInformation (infoGroup, jsonData)\r\n\t\t{\r\n\t\t\tvar infoTable = new InfoTable (infoGroup.GetContentDiv ());\r\n\r\n\t\t\tvar materialCount = jsonData.materials.length;\r\n\t\t\tvar vertexCount = 0;\r\n\t\t\tvar triangleCount = 0;\r\n\t\t\t\r\n\t\t\tvar i, j, mesh, triangles;\r\n\t\t\tfor (i = 0; i < jsonData.meshes.length; i++) {\r\n\t\t\t\tmesh = jsonData.meshes[i];\r\n\t\t\t\tvertexCount += mesh.vertices.length / 3;\r\n\t\t\t\tfor (j = 0; j < mesh.triangles.length; j++) {\r\n\t\t\t\t\ttriangles = mesh.triangles[j];\r\n\t\t\t\t\ttriangleCount += triangles.parameters.length / 9;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\r\n\t\t\tinfoTable.AddRow ('Material count', materialCount);\t\r\n\t\t\tinfoTable.AddRow ('Vertex count', vertexCount);\t\r\n\t\t\tinfoTable.AddRow ('Triangle count', triangleCount);\t\r\n\t\t}\r\n\t\t\r\n\t\tfunction AddMaterial (importerApp, importerMenu, materialsGroup, materialIndex, material)\r\n\t\t{\r\n\t\t\tvar materialMenuItem = materialsGroup.AddSubItem (material.name, {\r\n\t\t\t\topenCloseButton : {\r\n\t\t\t\t\ttitle : 'Show/Hide Information',\r\n\t\t\t\t\tonOpen : function (contentDiv, material) {\r\n\t\t\t\t\t\tcontentDiv.empty ();\r\n\t\t\t\t\t\tvar materialButtons = $('<div>').addClass ('submenubuttons').appendTo (contentDiv);\r\n\t\t\t\t\t\tvar highlightButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/highlightmesh.png').attr ('title', 'Highlight Meshes By Material').appendTo (materialButtons);\r\n\t\t\t\t\t\thighlightButton.click (function () {\r\n\t\t\t\t\t\t\timporterApp.HighlightMeshesByMaterial (materialIndex);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar fitInWindowButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/fitinwindowsmall.png').attr ('title', 'Fit Meshes In Window By Material').appendTo (materialButtons);\r\n\t\t\t\t\t\tfitInWindowButton.click (function () {\r\n\t\t\t\t\t\t\timporterApp.FitMeshesByMaterialInWindow (materialIndex);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar table = new InfoTable (contentDiv);\r\n\t\t\t\t\t\ttable.AddColorRow ('Ambient', material.ambient);\r\n\t\t\t\t\t\ttable.AddColorRow ('Diffuse', material.diffuse);\r\n\t\t\t\t\t\ttable.AddColorRow ('Specular', material.specular);\r\n\t\t\t\t\t\ttable.AddRow ('Shininess', material.shininess.toFixed (2));\r\n\t\t\t\t\t\ttable.AddRow ('Opacity', material.opacity.toFixed (2));\r\n\t\t\t\t\t},\r\n\t\t\t\t\tuserData : material\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn materialMenuItem;\r\n\t\t}\r\n\r\n\t\tfunction AddMesh (importerApp, importerMenu, meshesGroup, mesh, meshIndex)\r\n\t\t{\r\n\t\t\tfunction AddMeshButtons (importerApp, contentDiv, meshName, meshIndex)\r\n\t\t\t{\r\n\t\t\t\tfunction CopyToClipboard (text) {\r\n\t\t\t\t\tvar input = document.createElement ('input');\r\n\t\t\t\t\tinput.style.position = 'absolute';\r\n\t\t\t\t\tinput.style.left = '0';\r\n\t\t\t\t\tinput.style.top = '0';\r\n\t\t\t\t\tinput.setAttribute ('value', text);\r\n\t\t\t\t\tdocument.body.appendChild (input);\r\n\t\t\t\t\tinput.select ();\r\n\t\t\t\t\tdocument.execCommand ('copy');\r\n\t\t\t\t\tdocument.body.removeChild(input);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar meshButtons = $('<div>').addClass ('submenubuttons').appendTo (contentDiv);\r\n\t\t\t\tvar fitInWindowButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/fitinwindowsmall.png').attr ('title', 'Fit Mesh In Window').appendTo (meshButtons);\r\n\t\t\t\tfitInWindowButton.click (function () {\r\n\t\t\t\t\timporterApp.FitMeshInWindow (meshIndex);\r\n\t\t\t\t});\r\n\t\t\t\tvar highlightButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/highlightmesh.png').attr ('title', 'Highlight Mesh').appendTo (meshButtons);\r\n\t\t\t\thighlightButton.click (function () {\r\n\t\t\t\t\timporterApp.HighlightMesh (meshIndex);\r\n\t\t\t\t});\r\n\t\t\t\tvar copyNameToClipboardButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/copytoclipboard.png').attr ('title', 'Copy Mesh Name To Clipboard').appendTo (meshButtons);\r\n\t\t\t\tcopyNameToClipboardButton.click (function () {\r\n\t\t\t\t\tCopyToClipboard (meshName);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar visibleImage = null;\r\n\t\t\tvar meshMenuItem = meshesGroup.AddSubItem (mesh.name, {\r\n\t\t\t\tid : 'meshmenuitem-' + meshIndex.toString (),\r\n\t\t\t\topenCloseButton : {\r\n\t\t\t\t\ttitle : 'Show/Hide Details',\r\n\t\t\t\t\tonOpen : function (contentDiv, mesh) {\r\n\t\t\t\t\t\tcontentDiv.empty ();\r\n\r\n\t\t\t\t\t\tAddMeshButtons (importerApp, contentDiv, mesh.name, meshIndex);\r\n\t\t\t\t\t\tvar table = new InfoTable (contentDiv);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);\r\n\t\t\t\t\t\tvar max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);\r\n\t\t\t\t\t\tvar i, vertex;\r\n\t\t\t\t\t\tfor (i = 0; i < mesh.vertices.length; i =  i + 3) {\r\n\t\t\t\t\t\t\tvertex = new JSM.Coord (mesh.vertices[i], mesh.vertices[i + 1], mesh.vertices[i + 2]);\r\n\t\t\t\t\t\t\tmin.x = JSM.Minimum (min.x, vertex.x);\r\n\t\t\t\t\t\t\tmin.y = JSM.Minimum (min.y, vertex.y);\r\n\t\t\t\t\t\t\tmin.z = JSM.Minimum (min.z, vertex.z);\r\n\t\t\t\t\t\t\tmax.x = JSM.Maximum (max.x, vertex.x);\r\n\t\t\t\t\t\t\tmax.y = JSM.Maximum (max.y, vertex.y);\r\n\t\t\t\t\t\t\tmax.z = JSM.Maximum (max.z, vertex.z);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttable.AddRow ('X Size', (max.x - min.x).toFixed (2));\r\n\t\t\t\t\t\ttable.AddRow ('Y Size', (max.y - min.y).toFixed (2));\r\n\t\t\t\t\t\ttable.AddRow ('Z Size', (max.z - min.z).toFixed (2));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar triangleCount = 0;\r\n\t\t\t\t\t\tvar triangles;\r\n\t\t\t\t\t\tfor (i = 0; i < mesh.triangles.length; i++) {\r\n\t\t\t\t\t\t\ttriangles = mesh.triangles[i];\r\n\t\t\t\t\t\t\ttriangleCount += triangles.parameters.length / 9;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\ttable.AddRow ('Vertex count', mesh.vertices.length / 3);\r\n\t\t\t\t\t\ttable.AddRow ('Triangle count', triangleCount);\r\n\t\t\t\t\t},\r\n\t\t\t\t\tuserData : mesh\r\n\t\t\t\t},\r\n\t\t\t\tuserButtons : [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid : 'showhidemesh-' + meshIndex,\r\n\t\t\t\t\t\ttitle : 'Show/Hide Mesh',\r\n\t\t\t\t\t\tonCreate : function (image) {\r\n\t\t\t\t\t\t\timage.attr ('src', 'images/visible.png');\r\n\t\t\t\t\t\t\tvisibleImage = image;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonClick : function (image, meshIndex) {\r\n\t\t\t\t\t\t\timporterApp.ShowHideMesh (meshIndex);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonCtrlClick : function (image, meshIndex) {\r\n\t\t\t\t\t\t\timporterApp.IsolateMesh (meshIndex);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tuserData : meshIndex\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tmeshMenuItem.isVisible = true;\r\n\t\t\tmeshMenuItem.visibleImage = visibleImage;\r\n\t\t\treturn meshMenuItem;\r\n\t\t}\t\t\r\n\t\t\r\n\t\tvar jsonData = this.viewer.GetJsonData ();\r\n\t\tvar menu = $('#menu');\r\n\t\tvar importerMenu = new ImporterMenu (menu);\r\n\r\n\t\tvar filesGroup = AddDefaultGroup (importerMenu, 'Files', 'filesmenuitem');\r\n\t\tfilesGroup.AddSubItem (this.fileNames.main);\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.fileNames.requested.length; i++) {\r\n\t\t\tfilesGroup.AddSubItem (this.fileNames.requested[i]);\r\n\t\t}\r\n\t\t\r\n\t\tif (this.fileNames.missing.length > 0) {\r\n\t\t\tvar missingFilesGroup = AddDefaultGroup (importerMenu, 'Missing Files', 'missingfilesmenuitem');\r\n\t\t\tfor (i = 0; i < this.fileNames.missing.length; i++) {\r\n\t\t\t\tmissingFilesGroup.AddSubItem (this.fileNames.missing[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar infoGroup = AddDefaultGroup (importerMenu, 'Information', 'informationmenuitem');\r\n\t\tAddInformation (infoGroup, jsonData);\r\n\t\t\r\n\t\tthis.materialMenuItems = [];\r\n\t\tvar materialsGroup = AddDefaultGroup (importerMenu, 'Materials', 'materialsmenuitem');\r\n\t\tvar material, materialMenuItem;\r\n\t\tfor (i = 0; i < jsonData.materials.length; i++) {\r\n\t\t\tmaterial = jsonData.materials[i];\r\n\t\t\tmaterialMenuItem = AddMaterial (this, importerMenu, materialsGroup, i, material);\r\n\t\t\tthis.materialMenuItems.push (materialMenuItem);\r\n\t\t}\r\n\t\t\r\n\t\tthis.meshesGroup = AddDefaultGroup (importerMenu, 'Meshes', 'meshesmenuitem');\r\n\t\tthis.meshMenuItems = [];\r\n\t\tvar mesh, meshMenuItem;\r\n\t\tfor (i = 0; i < jsonData.meshes.length; i++) {\r\n\t\t\tmesh = jsonData.meshes[i];\r\n\t\t\tmeshMenuItem = AddMesh (this, importerMenu, this.meshesGroup, mesh, i);\r\n\t\t\tthis.meshMenuItems.push (meshMenuItem);\r\n\t\t}\r\n\t\t\r\n\t\tthis.Resize ();\r\n\t};\r\n\r\n\tImporterApp.prototype.GenerateError = function (errorMessage)\r\n\t{\r\n\t\tthis.viewer.RemoveMeshes ();\r\n\t\tvar menu = $('#menu');\r\n\t\tmenu.empty ();\r\n\t\t\r\n\t\tthis.floatingDialog.Open ({\r\n\t\t\ttitle : 'Error',\r\n\t\t\ttext : '<div class=\"importerdialog\">' + errorMessage + '</div>',\r\n\t\t\tbuttons : [\r\n\t\t\t\t{\r\n\t\t\t\t\ttext : 'ok',\r\n\t\t\t\t\tcallback : function (dialog) {\r\n\t\t\t\t\t\tdialog.Close ();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t});\t\r\n\t};\r\n\r\n\tImporterApp.prototype.Generate = function (progressBar)\r\n\t{\r\n\t\tfunction ShowMeshes (importerApp, progressBar, merge)\r\n\t\t{\r\n\t\t\timporterApp.inGenerate = true;\r\n\t\t\tvar environment = {\r\n\t\t\t\tonStart : function (taskCount) {\r\n\t\t\t\t\tprogressBar.Init (taskCount);\r\n\t\t\t\t},\r\n\t\t\t\tonProgress : function (currentTask) {\r\n\t\t\t\t\tprogressBar.Step (currentTask + 1);\r\n\t\t\t\t},\r\n\t\t\t\tonFinish : function () {\r\n\t\t\t\t\timporterApp.GenerateMenu ();\r\n\t\t\t\t\timporterApp.inGenerate = false;\r\n\t\t\t\t\timporterApp.SetReadyForTest ();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (merge) {\r\n\t\t\t\tvar jsonData = importerApp.viewer.GetJsonData ();\r\n\t\t\t\timporterApp.viewer.SetJsonData (JSM.MergeJsonDataMeshes (jsonData));\r\n\t\t\t}\r\n\t\t\timporterApp.viewer.ShowAllMeshes (environment);\r\n\t\t}\r\n\r\n\t\tvar jsonData = this.viewer.GetJsonData ();\r\n\t\tif (jsonData.materials.length === 0 || jsonData.meshes.length === 0) {\r\n\t\t\tthis.GenerateError ('Failed to open file. Maybe something is wrong with your file.');\r\n\t\t\tthis.SetReadyForTest ();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tif (jsonData.meshes.length > 250) {\r\n\t\t\tthis.floatingDialog.Open ({\r\n\t\t\t\ttitle : 'Information',\r\n\t\t\t\ttext : '<div class=\"importerdialog\">The model contains a large number of meshes. It can cause performance problems. Would you like to merge meshes?</div>',\r\n\t\t\t\tbuttons : [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext : 'yes',\r\n\t\t\t\t\t\tcallback : function (dialog) {\r\n\t\t\t\t\t\t\tShowMeshes (myThis, progressBar, true);\r\n\t\t\t\t\t\t\tdialog.Close ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttext : 'no',\r\n\t\t\t\t\t\tcallback : function (dialog) {\r\n\t\t\t\t\t\t\tShowMeshes (myThis, progressBar, false);\r\n\t\t\t\t\t\t\tdialog.Close ();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tShowMeshes (myThis, progressBar, false);\r\n\t\t}\r\n\t};\r\n\r\n\tImporterApp.prototype.FitInWindow = function ()\r\n\t{\r\n\t\tthis.viewer.FitInWindow ();\r\n\t};\r\n\r\n\tImporterApp.prototype.FitMeshInWindow = function (meshIndex)\r\n\t{\r\n\t\tthis.viewer.FitMeshInWindow (meshIndex);\r\n\t};\r\n\r\n\tImporterApp.prototype.FitMeshesByMaterialInWindow = function (materialIndex)\r\n\t{\r\n\t\tvar meshIndices = this.viewer.GetMeshesByMaterial (materialIndex);\r\n\t\tif (meshIndices.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.viewer.FitMeshesInWindow (meshIndices);\r\n\t};\r\n\r\n\tImporterApp.prototype.SetFixUp = function ()\r\n\t{\r\n\t\tthis.viewer.SetFixUp ();\r\n\t};\r\n\r\n\tImporterApp.prototype.SetNamedView = function (viewName)\r\n\t{\r\n\t\tthis.viewer.SetNamedView (viewName);\r\n\t};\r\n\r\n\tImporterApp.prototype.SetView = function (viewType)\r\n\t{\r\n\t\tthis.viewer.SetView (viewType);\r\n\t};\r\n\r\n\tImporterApp.prototype.ShowHideMesh = function (meshIndex)\r\n\t{\r\n\t\tvar meshMenuItem = this.meshMenuItems[meshIndex];\r\n\t\tthis.ShowHideMeshInternal (meshIndex, !meshMenuItem.isVisible);\r\n\t\tthis.viewer.Draw ();\r\n\t};\r\n\r\n\tImporterApp.prototype.IsolateMesh = function (meshIndex)\r\n\t{\r\n\t\tvar i, meshMenuItem;\r\n\t\t\r\n\t\tvar onlyThisVisible = true;\r\n\t\tif (!this.meshMenuItems[meshIndex].isVisible) {\r\n\t\t\tonlyThisVisible = false;\r\n\t\t} else {\r\n\t\t\tfor (i = 0; i < this.meshMenuItems.length; i++) {\r\n\t\t\t\tmeshMenuItem = this.meshMenuItems[i];\r\n\t\t\t\tif (meshMenuItem.isVisible && i !== meshIndex) {\r\n\t\t\t\t\tonlyThisVisible = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < this.meshMenuItems.length; i++) {\r\n\t\t\tif (onlyThisVisible) {\r\n\t\t\t\tthis.ShowHideMeshInternal (i, true);\r\n\t\t\t} else {\r\n\t\t\t\tif (i == meshIndex) {\r\n\t\t\t\t\tthis.ShowHideMeshInternal (i, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.ShowHideMeshInternal (i, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.viewer.Draw ();\r\n\t};\r\n\r\n\tImporterApp.prototype.ShowHideMeshInternal = function (meshIndex, isVisible)\r\n\t{\r\n\t\tvar meshMenuItem = this.meshMenuItems[meshIndex];\r\n\t\tmeshMenuItem.isVisible = isVisible;\r\n\t\tmeshMenuItem.visibleImage.attr ('src', meshMenuItem.isVisible ? 'images/visible.png' : 'images/hidden.png');\r\n\t\tthis.viewer.ShowMesh (meshIndex, meshMenuItem.isVisible);\r\n\t};\r\n\r\n\tImporterApp.prototype.HighlightMeshInternal = function (meshIndex, highlight)\r\n\t{\r\n\t\tvar meshMenuItem = this.meshMenuItems[meshIndex];\r\n\t\tmeshMenuItem.Highlight (highlight);\r\n\t\tthis.viewer.HighlightMesh (meshIndex, highlight);\r\n\t};\r\n\r\n\tImporterApp.prototype.ProcessFiles = function (fileList, isUrl)\r\n\t{\r\n\t\tthis.ClearReadyForTest ();\r\n\t\tthis.HideIntroControl ();\r\n\t\tthis.floatingDialog.Close ();\r\n\t\tif (this.inGenerate) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tvar userFiles = fileList;\r\n\t\tif (userFiles.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tthis.fileNames = null;\r\n\t\t\r\n\t\tvar myThis = this;\r\n\t\tvar processorFunc = JSM.ConvertFileListToJsonData;\r\n\t\tif (isUrl) {\r\n\t\t\tprocessorFunc = JSM.ConvertURLListToJsonData;\r\n\t\t}\r\n\r\n\t\tvar menu = $('#menu');\r\n\t\tmenu.empty ();\r\n\t\tif (isUrl) {\r\n\t\t\tmenu.html ('Downloading files...');\r\n\t\t} else {\r\n\t\t\tmenu.html ('Loading files...');\r\n\t\t}\r\n\t\t\r\n\t\tprocessorFunc (userFiles, {\r\n\t\t\tonError : function () {\r\n\t\t\t\tmyThis.GenerateError ('No readable file found. You can open 3ds, obj, stl, and off files.');\r\n\t\t\t\tmyThis.SetReadyForTest ();\r\n\t\t\t\treturn;\r\n\t\t\t},\r\n\t\t\tonReady : function (fileNames, jsonData) {\r\n\t\t\t\tmyThis.fileNames = fileNames;\r\n\t\t\t\tmyThis.viewer.SetJsonData (jsonData);\r\n\t\t\t\tmenu.empty ();\r\n\t\t\t\tvar progressBar = new ImporterProgressBar (menu);\r\n\t\t\t\tmyThis.JsonLoaded (progressBar);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\tImporterApp.prototype.RegisterCanvasClick = function ()\r\n\t{\r\n\t\tvar myThis = this;\r\n\t\tvar mousePosition = null;\r\n\t\tthis.canvas.mousedown (function () {\r\n\t\t\tmousePosition = [event.pageX, event.pageY];\r\n\t\t});\r\n\t\tthis.canvas.mouseup (function (event) {\r\n\t\t\tvar mouseMoved = (mousePosition == null || event.pageX != mousePosition[0] || event.pageY != mousePosition[1]);\r\n\t\t\tif (!mouseMoved) {\r\n\t\t\t\tvar x = event.pageX - $(this).offset ().left;\r\n\t\t\t\tvar y = event.pageY - $(this).offset ().top;\r\n\t\t\t\tmyThis.OnCanvasClick (x, y);\r\n\t\t\t}\r\n\t\t\tmousePosition = null;\r\n\t\t});\r\n\t};\r\n\r\n\tImporterApp.prototype.ScrollMeshIntoView = function (meshIndex)\r\n\t{\r\n\t\tif (meshIndex == -1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar menuItem = this.meshMenuItems[meshIndex];\r\n\t\tmenuItem.menuItemDiv.get (0).scrollIntoView ();\r\n\t};\r\n\r\n\tImporterApp.prototype.HighlightMesh = function (meshIndex)\r\n\t{\r\n\t\tvar i, menuItem, highlight;\r\n\t\tif (meshIndex != -1) {\r\n\t\t\tfor (i = 0; i < this.meshMenuItems.length; i++) {\r\n\t\t\t\tmenuItem = this.meshMenuItems[i];\r\n\t\t\t\thighlight = false;\r\n\t\t\t\tif (i == meshIndex) {\r\n\t\t\t\t\tif (!menuItem.IsHighlighted ()) {\r\n\t\t\t\t\t\tthis.HighlightMeshInternal (i, true);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.HighlightMeshInternal (i, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (i = 0; i < this.meshMenuItems.length; i++) {\r\n\t\t\t\tmenuItem = this.meshMenuItems[i];\r\n\t\t\t\tif (menuItem.IsHighlighted ()) {\r\n\t\t\t\t\tthis.HighlightMeshInternal (i, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tthis.viewer.Draw ();\r\n\t};\r\n\r\n\tImporterApp.prototype.HighlightMeshesByMaterial = function (materialIndex)\r\n\t{\r\n\t\tvar meshIndices = this.viewer.GetMeshesByMaterial (materialIndex);\r\n\t\tif (meshIndices.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tvar i, meshIndex, meshMenuItem;\r\n\t\tthis.HighlightMesh (-1);\r\n\t\tfor (i = 0; i < meshIndices.length; i++) {\r\n\t\t\tmeshIndex = meshIndices[i];\r\n\t\t\tmeshMenuItem = this.meshMenuItems[meshIndex];\r\n\t\t\tthis.HighlightMeshInternal (meshIndex, true);\r\n\t\t}\r\n\r\n\t\tthis.meshesGroup.SetOpen (true);\r\n\t\tthis.ScrollMeshIntoView (meshIndices[0]);\r\n\t\tthis.viewer.Draw ();\r\n\t};\r\n\r\n\tImporterApp.prototype.OnCanvasClick = function (x, y)\r\n\t{\r\n\t\tif (this.meshMenuItems == null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar objects = this.viewer.GetMeshesUnderPosition (x, y);\r\n\t\tvar meshIndex = -1;\r\n\t\tif (objects.length > 0) {\r\n\t\t\tmeshIndex = objects[0].originalJsonMeshIndex;\r\n\t\t\tthis.meshesGroup.SetOpen (true);\r\n\t\t}\r\n\t\t\r\n\t\tthis.HighlightMesh (meshIndex);\r\n\t\tthis.ScrollMeshIntoView (meshIndex);\r\n\t};\r\n\r\n\tImporterApp.prototype.DragOver = function (event)\r\n\t{\r\n\t\tevent.stopPropagation ();\r\n\t\tevent.preventDefault ();\r\n\t\tevent.dataTransfer.dropEffect = 'copy';\r\n\t};\r\n\r\n\tImporterApp.prototype.Drop = function (event)\r\n\t{\r\n\t\tevent.stopPropagation ();\r\n\t\tevent.preventDefault ();\r\n\t\tthis.ResetHash ();\r\n\t\tthis.ProcessFiles (event.dataTransfer.files, false);\r\n\t};\r\n\r\n\tImporterApp.prototype.FileSelected = function (event)\r\n\t{\r\n\t\tevent.stopPropagation ();\r\n\t\tevent.preventDefault ();\r\n\t\tthis.ResetHash ();\r\n\t\tthis.ProcessFiles (event.target.files, false);\r\n\t};\r\n\r\n\tImporterApp.prototype.OpenFile = function ()\r\n\t{\r\n\t\tvar fileInput = document.getElementById ('file');\r\n\t\tfileInput.click ();\r\n\t};\r\n\r\n\tImporterApp.prototype.ResetHash = function ()\r\n\t{\r\n\t\tif (window.location.hash.length > 1) {\r\n\t\t\twindow.location.hash = '';\r\n\t\t}\r\n\t};\r\n\r\n\tImporterApp.prototype.LoadFilesFromHash = function ()\r\n\t{\r\n\t\tif (window.location.hash.length < 2) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tvar fileInput = $('#file');\r\n\t\tvar hash = window.location.hash;\r\n\t\tif (hash == '#testmode') {\r\n\t\t\tfileInput.css ('display', '');\r\n\t\t\tfileInput.css ('position', 'absolute');\r\n\t\t\tfileInput.css ('right', '10px');\r\n\t\t\tfileInput.css ('bottom', '10px');\r\n\t\t\treturn false;\t\r\n\t\t}\r\n\t\t\r\n\t\tfileInput.css ('display', 'none');\r\n\t\tvar hash = hash.substr (1, hash.length - 1);\r\n\t\tvar fileList = hash.split (',');\r\n\t\tthis.ProcessFiles (fileList, true);\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn ImporterApp;\r\n});\ndefine('skylark-online3dviewer/main',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"./ImporterApp\"\r\n],function(skylark,ImporterApp) {\r\n\treturn skylark.attach(\"intg.jsmodeler.Online3dViewer\",ImporterApp);\r\n});\ndefine('skylark-online3dviewer', ['skylark-online3dviewer/main'], function (main) { return main; });\n\n"]}