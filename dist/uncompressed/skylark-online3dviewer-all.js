/**
 * skylark-online3dviewer - A version of online3dviewer that ported to running on skylarkjs
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-integration/skylark-online3dviewer/
 * @license MIT
 */
(function(factory,globals) {
  var define = globals.define,
      require = globals.require,
      isAmd = (typeof define === 'function' && define.amd),
      isCmd = (!isAmd && typeof exports !== 'undefined');

  if (!isAmd && !define) {
    var map = {};
    function absolute(relative, base) {
        if (relative[0]!==".") {
          return relative;
        }
        var stack = base.split("/"),
            parts = relative.split("/");
        stack.pop(); 
        for (var i=0; i<parts.length; i++) {
            if (parts[i] == ".")
                continue;
            if (parts[i] == "..")
                stack.pop();
            else
                stack.push(parts[i]);
        }
        return stack.join("/");
    }
    define = globals.define = function(id, deps, factory) {
        if (typeof factory == 'function') {
            map[id] = {
                factory: factory,
                deps: deps.map(function(dep){
                  return absolute(dep,id);
                }),
                resolved: false,
                exports: null
            };
            require(id);
        } else {
            map[id] = {
                factory : null,
                resolved : true,
                exports : factory
            };
        }
    };
    require = globals.require = function(id) {
        if (!map.hasOwnProperty(id)) {
            throw new Error('Module ' + id + ' has not been defined');
        }
        var module = map[id];
        if (!module.resolved) {
            var args = [];

            module.deps.forEach(function(dep){
                args.push(require(dep));
            })

            module.exports = module.factory.apply(globals, args) || null;
            module.resolved = true;
        }
        return module.exports;
    };
  }
  
  if (!define) {
     throw new Error("The module utility (ex: requirejs or skylark-utils) is not loaded!");
  }

  factory(define,require);

  if (!isAmd) {
    var skylarkjs = require("skylark-langx/skylark");

    if (isCmd) {
      module.exports = skylarkjs;
    } else {
      globals.skylarkjs  = skylarkjs;
    }
  }

})(function(define,require) {

define('skylark-langx-ns/_attach',[],function(){
    return  function attach(obj1,path,obj2) {
        if (typeof path == "string") {
            path = path.split(".");//[path]
        };
        var length = path.length,
            ns=obj1,
            i=0,
            name = path[i++];

        while (i < length) {
            ns = ns[name] = ns[name] || {};
            name = path[i++];
        }

        return ns[name] = obj2;
    }
});
define('skylark-langx-ns/ns',[
    "./_attach"
], function(_attach) {
    var skylark = {
    	attach : function(path,obj) {
    		return _attach(skylark,path,obj);
    	}
    };
    return skylark;
});

define('skylark-langx-ns/main',[
	"./ns"
],function(skylark){
	return skylark;
});
define('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });

define('skylark-langx/skylark',[
    "skylark-langx-ns"
], function(ns) {
	return ns;
});

define('skylark-langx-types/types',[
    "skylark-langx-ns"
],function(skylark){
    var toString = {}.toString;
    
    var type = (function() {
        var class2type = {};

        // Populate the class2type map
        "Boolean Number String Function Array Date RegExp Object Error Symbol".split(" ").forEach(function(name) {
            class2type["[object " + name + "]"] = name.toLowerCase();
        });

        return function type(obj) {
            return obj == null ? String(obj) :
                class2type[toString.call(obj)] || "object";
        };
    })();

    function isArray(object) {
        return object && object.constructor === Array;
    }


    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function/string/element and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * isArrayLike([1, 2, 3])
     * // => true
     *
     * isArrayLike(document.body.children)
     * // => false
     *
     * isArrayLike('abc')
     * // => true
     *
     * isArrayLike(Function)
     * // => false
     */    
    function isArrayLike(obj) {
        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * isBoolean(false)
     * // => true
     *
     * isBoolean(null)
     * // => false
     */
    function isBoolean(obj) {
        return typeof(obj) === "boolean";
    }

    function isDefined(obj) {
        return typeof obj !== 'undefined';
    }

    function isDocument(obj) {
        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;
    }

    function isEmptyObject(obj) {
        var name;
        for (name in obj) {
            if (obj[name] !== null) {
                return false;
            }
        }
        return true;
    }


    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * isFunction(parseInt)
     * // => true
     *
     * isFunction(/abc/)
     * // => false
     */
    function isFunction(value) {
        return type(value) == "function";
    }

    function isHtmlNode(obj) {
        return obj && obj.nodeType; // obj instanceof Node; //Consider the elements in IFRAME
    }

    function isInstanceOf( /*Object*/ value, /*Type*/ type) {
        //Tests whether the value is an instance of a type.
        if (value === undefined) {
            return false;
        } else if (value === null || type == Object) {
            return true;
        } else if (typeof value === "number") {
            return type === Number;
        } else if (typeof value === "string") {
            return type === String;
        } else if (typeof value === "boolean") {
            return type === Boolean;
        } else if (typeof value === "string") {
            return type === String;
        } else {
            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);
        }
    }

    function isNull(value) {
      return type(value) === "null";
    }

    function isNumber(obj) {
        return typeof obj == 'number';
    }

    function isObject(obj) {
        return type(obj) == "object";
    }

    function isPlainObject(obj) {
        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;
    }

    function isString(obj) {
        return typeof obj === 'string';
    }

    function isWindow(obj) {
        return obj && obj == obj.window;
    }

    function isSameOrigin(href) {
        if (href) {
            var origin = location.protocol + '//' + location.hostname;
            if (location.port) {
                origin += ':' + location.port;
            }
            return href.startsWith(origin);
        }
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    function isUndefined(value) {
      return value === undefined
    }

    return skylark.attach("langx.types",{

        isArray: isArray,

        isArrayLike: isArrayLike,

        isBoolean: isBoolean,

        isDefined: isDefined,

        isDocument: isDocument,

        isEmpty : isEmptyObject,

        isEmptyObject: isEmptyObject,

        isFunction: isFunction,

        isHtmlNode: isHtmlNode,

        isNull: isNull,

        isNumber: isNumber,

        isNumeric: isNumber,

        isObject: isObject,

        isPlainObject: isPlainObject,

        isString: isString,

        isSameOrigin: isSameOrigin,

        isSymbol : isSymbol,

        isUndefined: isUndefined,

        isWindow: isWindow,

        type: type
    });

});
define('skylark-langx-types/main',[
	"./types"
],function(types){
	return types;
});
define('skylark-langx-types', ['skylark-langx-types/main'], function (main) { return main; });

define('skylark-langx-numbers/numbers',[
    "skylark-langx-ns",
    "skylark-langx-types"
],function(skylark,types){
	var isObject = types.isObject,
		isSymbol = types.isSymbol;

	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991,
	    MAX_INTEGER = 1.7976931348623157e+308,
	    NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}	

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	return  skylark.attach("langx.numbers",{
		toFinite : toFinite,
		toNumber : toNumber,
		toInteger : toInteger
	});
});
define('skylark-langx-numbers/main',[
	"./numbers"
],function(numbers){
	return numbers;
});
define('skylark-langx-numbers', ['skylark-langx-numbers/main'], function (main) { return main; });

define('skylark-langx-objects/objects',[
    "skylark-langx-ns/ns",
    "skylark-langx-ns/_attach",
	"skylark-langx-types",
    "skylark-langx-numbers"
],function(skylark,_attach,types,numbers){
	var hasOwnProperty = Object.prototype.hasOwnProperty,
        slice = Array.prototype.slice,
        isBoolean = types.isBoolean,
        isFunction = types.isFunction,
		isObject = types.isObject,
		isPlainObject = types.isPlainObject,
		isArray = types.isArray,
        isArrayLike = types.isArrayLike,
        isString = types.isString,
        toInteger = numbers.toInteger;

     // An internal function for creating assigner functions.
    function createAssigner(keysFunc, defaults) {
        return function(obj) {
          var length = arguments.length;
          if (defaults) obj = Object(obj);  
          if (length < 2 || obj == null) return obj;
          for (var index = 1; index < length; index++) {
            var source = arguments[index],
                keys = keysFunc(source),
                l = keys.length;
            for (var i = 0; i < l; i++) {
              var key = keys[i];
              if (!defaults || obj[key] === void 0) obj[key] = source[key];
            }
          }
          return obj;
       };
    }

    // Internal recursive comparison function for `isEqual`.
    var eq, deepEq;
    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

    eq = function(a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b) return a !== 0 || 1 / a === 1 / b;
        // `null` or `undefined` only equal to itself (strict comparison).
        if (a == null || b == null) return false;
        // `NaN`s are equivalent, but non-reflexive.
        if (a !== a) return b !== b;
        // Exhaust primitive checks
        var type = typeof a;
        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
        return deepEq(a, b, aStack, bStack);
    };

    // Internal recursive comparison function for `isEqual`.
    deepEq = function(a, b, aStack, bStack) {
        // Unwrap any wrapped objects.
        //if (a instanceof _) a = a._wrapped;
        //if (b instanceof _) b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b)) return false;
        switch (className) {
            // Strings, numbers, regular expressions, dates, and booleans are compared by value.
            case '[object RegExp]':
            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
            case '[object String]':
                // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
                // equivalent to `new String("5")`.
                return '' + a === '' + b;
            case '[object Number]':
                // `NaN`s are equivalent, but non-reflexive.
                // Object(NaN) is equivalent to NaN.
                if (+a !== +a) return +b !== +b;
                // An `egal` comparison is performed for other numeric values.
                return +a === 0 ? 1 / +a === 1 / b : +a === +b;
            case '[object Date]':
            case '[object Boolean]':
                // Coerce dates and booleans to numeric primitive values. Dates are compared by their
                // millisecond representations. Note that invalid dates with millisecond representations
                // of `NaN` are not equivalent.
                return +a === +b;
            case '[object Symbol]':
                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        }

        var areArrays = className === '[object Array]';
        if (!areArrays) {
            if (typeof a != 'object' || typeof b != 'object') return false;
            // Objects with different constructors are not equivalent, but `Object`s or `Array`s
            // from different frames are.
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&
                               isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
                return false;
            }
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
            // Linear search. Performance is inversely proportional to the number of
            // unique nested structures.
            if (aStack[length] === a) return bStack[length] === b;
        }

        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);

        // Recursively compare objects and arrays.
        if (areArrays) {
            // Compare array lengths to determine if a deep comparison is necessary.
            length = a.length;
            if (length !== b.length) return false;
            // Deep compare the contents, ignoring non-numeric properties.
            while (length--) {
                if (!eq(a[length], b[length], aStack, bStack)) return false;
            }
        } else {
            // Deep compare objects.
            var keys = Object.keys(a), key;
            length = keys.length;
            // Ensure that both objects contain the same number of properties before comparing deep equality.
            if (Object.keys(b).length !== length) return false;
            while (length--) {
                // Deep compare each member
                key = keys[length];
                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;
            }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true;
    };

    // Retrieve all the property names of an object.
    function allKeys(obj) {
        if (!isObject(obj)) return [];
        var keys = [];
        for (var key in obj) keys.push(key);
        return keys;
    }

    function each(obj, callback) {
        var length, key, i, undef, value;

        if (obj) {
            length = obj.length;

            if (length === undef) {
                // Loop object items
                for (key in obj) {
                    if (obj.hasOwnProperty(key)) {
                        value = obj[key];
                        if (callback.call(value, key, value) === false) {
                            break;
                        }
                    }
                }
            } else {
                // Loop array items
                for (i = 0; i < length; i++) {
                    value = obj[i];
                    if (callback.call(value, i, value) === false) {
                        break;
                    }
                }
            }
        }

        return this;
    }

    function extend(target) {
        var deep, args = slice.call(arguments, 1);
        if (typeof target == 'boolean') {
            deep = target
            target = args.shift()
        }
        if (args.length == 0) {
            args = [target];
            target = this;
        }
        args.forEach(function(arg) {
            mixin(target, arg, deep);
        });
        return target;
    }

    // Retrieve the names of an object's own properties.
    // Delegates to **ECMAScript 5**'s native `Object.keys`.
    function keys(obj) {
        if (isObject(obj)) return [];
        var keys = [];
        for (var key in obj) if (has(obj, key)) keys.push(key);
        return keys;
    }

    function has(obj, path) {
        if (!isArray(path)) {
            return obj != null && hasOwnProperty.call(obj, path);
        }
        var length = path.length;
        for (var i = 0; i < length; i++) {
            var key = path[i];
            if (obj == null || !hasOwnProperty.call(obj, key)) {
                return false;
            }
            obj = obj[key];
        }
        return !!length;
    }

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }


   // Perform a deep comparison to check if two objects are equal.
    function isEqual(a, b) {
        return eq(a, b);
    }

    // Returns whether an object has a given set of `key:value` pairs.
    function isMatch(object, attrs) {
        var keys = keys(attrs), length = keys.length;
        if (object == null) return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
          var key = keys[i];
          if (attrs[key] !== obj[key] || !(key in obj)) return false;
        }
        return true;
    }    

    function _mixin(target, source, deep, safe) {
        for (var key in source) {
            //if (!source.hasOwnProperty(key)) {
            //    continue;
            //}
            if (safe && target[key] !== undefined) {
                continue;
            }
            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {
                    target[key] = {};
                }
                if (isArray(source[key]) && !isArray(target[key])) {
                    target[key] = [];
                }
                _mixin(target[key], source[key], deep, safe);
            } else if (source[key] !== undefined) {
                target[key] = source[key]
            }
        }
        return target;
    }

    function _parseMixinArgs(args) {
        var params = slice.call(arguments, 0),
            target = params.shift(),
            deep = false;
        if (isBoolean(params[params.length - 1])) {
            deep = params.pop();
        }

        return {
            target: target,
            sources: params,
            deep: deep
        };
    }

    function mixin() {
        var args = _parseMixinArgs.apply(this, arguments);

        args.sources.forEach(function(source) {
            _mixin(args.target, source, args.deep, false);
        });
        return args.target;
    }

   // Return a copy of the object without the blacklisted properties.
    function omit(obj, prop1,prop2) {
        if (!obj) {
            return null;
        }
        var result = mixin({},obj);
        for(var i=1;i<arguments.length;i++) {
            var pn = arguments[i];
            if (pn in obj) {
                delete result[pn];
            }
        }
        return result;

    }

   // Return a copy of the object only containing the whitelisted properties.
    function pick(obj,prop1,prop2) {
        if (!obj) {
            return null;
        }
        var result = {};
        for(var i=1;i<arguments.length;i++) {
            var pn = arguments[i];
            if (pn in obj) {
                result[pn] = obj[pn];
            }
        }
        return result;
    }

    function removeItem(items, item) {
        if (isArray(items)) {
            var idx = items.indexOf(item);
            if (idx != -1) {
                items.splice(idx, 1);
            }
        } else if (isPlainObject(items)) {
            for (var key in items) {
                if (items[key] == item) {
                    delete items[key];
                    break;
                }
            }
        }

        return this;
    }

    function result(obj, path, fallback) {
        if (!isArray(path)) {
            path = path.split(".");//[path]
        };
        var length = path.length;
        if (!length) {
          return isFunction(fallback) ? fallback.call(obj) : fallback;
        }
        for (var i = 0; i < length; i++) {
          var prop = obj == null ? void 0 : obj[path[i]];
          if (prop === void 0) {
            prop = fallback;
            i = length; // Ensure we don't continue iterating.
          }
          obj = isFunction(prop) ? prop.call(obj) : prop;
        }

        return obj;
    }

    function safeMixin() {
        var args = _parseMixinArgs.apply(this, arguments);

        args.sources.forEach(function(source) {
            _mixin(args.target, source, args.deep, true);
        });
        return args.target;
    }

    // Retrieve the values of an object's properties.
    function values(obj) {
        var keys = allKeys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
            values[i] = obj[keys[i]];
        }
        return values;
    }

    function clone( /*anything*/ src,checkCloneMethod) {
        var copy;
        if (src === undefined || src === null) {
            copy = src;
        } else if (checkCloneMethod && src.clone) {
            copy = src.clone();
        } else if (isArray(src)) {
            copy = [];
            for (var i = 0; i < src.length; i++) {
                copy.push(clone(src[i]));
            }
        } else if (isPlainObject(src)) {
            copy = {};
            for (var key in src) {
                copy[key] = clone(src[key]);
            }
        } else {
            copy = src;
        }

        return copy;

    }

    return skylark.attach("langx.objects",{
        allKeys: allKeys,

        attach : _attach,

        clone: clone,

        defaults : createAssigner(allKeys, true),

        each : each,

        extend : extend,

        has: has,

        isEqual: isEqual,   

        includes: includes,

        isMatch: isMatch,

        keys: keys,

        mixin: mixin,

        omit: omit,

        pick: pick,

        removeItem: removeItem,

        result : result,
        
        safeMixin: safeMixin,

        values: values
    });


});
define('skylark-langx-objects/main',[
	"./objects"
],function(objects){
	return objects;
});
define('skylark-langx-objects', ['skylark-langx-objects/main'], function (main) { return main; });

define('skylark-langx-arrays/arrays',[
  "skylark-langx-ns/ns",
  "skylark-langx-types",
  "skylark-langx-objects"
],function(skylark,types,objects){
	var filter = Array.prototype.filter,
		isArrayLike = types.isArrayLike;

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }


    function compact(array) {
        return filter.call(array, function(item) {
            return item != null;
        });
    }

    function filter2(array,func) {
      return filter.call(array,func);
    }

    function flatten(array) {
        if (isArrayLike(array)) {
            var result = [];
            for (var i = 0; i < array.length; i++) {
                var item = array[i];
                if (isArrayLike(item)) {
                    for (var j = 0; j < item.length; j++) {
                        result.push(item[j]);
                    }
                } else {
                    result.push(item);
                }
            }
            return result;
        } else {
            return array;
        }
        //return array.length > 0 ? concat.apply([], array) : array;
    }

    function grep(array, callback) {
        var out = [];

        objects.each(array, function(i, item) {
            if (callback(item, i)) {
                out.push(item);
            }
        });

        return out;
    }

    function inArray(item, array) {
        if (!array) {
            return -1;
        }
        var i;

        if (array.indexOf) {
            return array.indexOf(item);
        }

        i = array.length;
        while (i--) {
            if (array[i] === item) {
                return i;
            }
        }

        return -1;
    }

    function makeArray(obj, offset, startWith) {
       if (isArrayLike(obj) ) {
        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));
      }

      // array of single index
      return [ obj ];             
    }


    function forEach (arr, fn) {
      if (arr.forEach) return arr.forEach(fn)
      for (var i = 0; i < arr.length; i++) fn(arr[i], i);
    }

    function map(elements, callback) {
        var value, values = [],
            i, key
        if (isArrayLike(elements))
            for (i = 0; i < elements.length; i++) {
                value = callback.call(elements[i], elements[i], i);
                if (value != null) values.push(value)
            }
        else
            for (key in elements) {
                value = callback.call(elements[key], elements[key], key);
                if (value != null) values.push(value)
            }
        return flatten(values)
    }


    function merge( first, second ) {
      var l = second.length,
          i = first.length,
          j = 0;

      if ( typeof l === "number" ) {
        for ( ; j < l; j++ ) {
          first[ i++ ] = second[ j ];
        }
      } else {
        while ( second[j] !== undefined ) {
          first[ i++ ] = second[ j++ ];
        }
      }

      first.length = i;

      return first;
    }

    function reduce(array,callback,initialValue) {
        return Array.prototype.reduce.call(array,callback,initialValue);
    }

    function uniq(array) {
        return filter.call(array, function(item, idx) {
            return array.indexOf(item) == idx;
        })
    }

    return skylark.attach("langx.arrays",{
        baseFindIndex: baseFindIndex,

        baseIndexOf : baseIndexOf,
        
        compact: compact,

        first : function(items,n) {
            if (n) {
                return items.slice(0,n);
            } else {
                return items[0];
            }
        },

        filter : filter2,
        
        flatten: flatten,

        grep: grep,

        inArray: inArray,

        makeArray: makeArray,

        merge : merge,

        forEach : forEach,

        map : map,
        
        reduce : reduce,

        uniq : uniq

    });
});
define('skylark-langx-arrays/main',[
	"./arrays"
],function(arrays){
	return arrays;
});
define('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });

define('skylark-langx/arrays',[
	"skylark-langx-arrays"
],function(arrays){
  return arrays;
});
define('skylark-langx-klass/klass',[
  "skylark-langx-ns/ns",
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
],function(skylark,types,objects,arrays){
    var uniq = arrays.uniq,
        has = objects.has,
        mixin = objects.mixin,
        isArray = types.isArray,
        isDefined = types.isDefined;

/* for reference 
 function klass(props,parent) {
    var ctor = function(){
        this._construct();
    };
    ctor.prototype = props;
    if (parent) {
        ctor._proto_ = parent;
        props.__proto__ = parent.prototype;
    }
    return ctor;
}

// Type some JavaScript code here.
let animal = klass({
  _construct(){
      this.name = this.name + ",hi";
  },
    
  name: "Animal",
  eat() {         // [[HomeObject]] == animal
    alert(`${this.name} eats.`);
  }
    
    
});


let rabbit = klass({
  name: "Rabbit",
  _construct(){
      super._construct();
  },
  eat() {         // [[HomeObject]] == rabbit
    super.eat();
  }
},animal);

let longEar = klass({
  name: "Long Ear",
  eat() {         // [[HomeObject]] == longEar
    super.eat();
  }
},rabbit);
*/
    
    function inherit(ctor, base) {
        var f = function() {};
        f.prototype = base.prototype;

        ctor.prototype = new f();
    }

    var f1 = function() {
        function extendClass(ctor, props, options) {
            // Copy the properties to the prototype of the class.
            var proto = ctor.prototype,
                _super = ctor.superclass.prototype,
                noOverrided = options && options.noOverrided,
                overrides = options && options.overrides || {};

            for (var name in props) {
                if (name === "constructor") {
                    continue;
                }

                // Check if we're overwriting an existing function
                var prop = props[name];
                if (typeof props[name] == "function") {
                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == "function" ?
                          (function(name, fn, superFn) {
                            return function() {
                                var tmp = this.overrided;

                                // Add a new ._super() method that is the same method
                                // but on the super-class
                                this.overrided = superFn;

                                // The method only need to be bound temporarily, so we
                                // remove it when we're done executing
                                var ret = fn.apply(this, arguments);

                                this.overrided = tmp;

                                return ret;
                            };
                        })(name, prop, _super[name]) :
                        prop;
                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {
                    Object.defineProperty(proto,name,prop);
                } else {
                    proto[name] = prop;
                }
            }
            return ctor;
        }

        function serialMixins(ctor,mixins) {
            var result = [];

            mixins.forEach(function(mixin){
                if (has(mixin,"__mixins__")) {
                     throw new Error("nested mixins");
                }
                var clss = [];
                while (mixin) {
                    clss.unshift(mixin);
                    mixin = mixin.superclass;
                }
                result = result.concat(clss);
            });

            result = uniq(result);

            result = result.filter(function(mixin){
                var cls = ctor;
                while (cls) {
                    if (mixin === cls) {
                        return false;
                    }
                    if (has(cls,"__mixins__")) {
                        var clsMixines = cls["__mixins__"];
                        for (var i=0; i<clsMixines.length;i++) {
                            if (clsMixines[i]===mixin) {
                                return false;
                            }
                        }
                    }
                    cls = cls.superclass;
                }
                return true;
            });

            if (result.length>0) {
                return result;
            } else {
                return false;
            }
        }

        function mergeMixins(ctor,mixins) {
            var newCtor =ctor;
            for (var i=0;i<mixins.length;i++) {
                var xtor = new Function();
                xtor.prototype = Object.create(newCtor.prototype);
                xtor.__proto__ = newCtor;
                xtor.superclass = null;
                mixin(xtor.prototype,mixins[i].prototype);
                xtor.prototype.__mixin__ = mixins[i];
                newCtor = xtor;
            }

            return newCtor;
        }

        function _constructor ()  {
            if (this._construct) {
                return this._construct.apply(this, arguments);
            } else  if (this.init) {
                return this.init.apply(this, arguments);
            }
        }

        return function createClass(props, parent, mixins,options) {
            if (isArray(parent)) {
                options = mixins;
                mixins = parent;
                parent = null;
            }
            parent = parent || Object;

            if (isDefined(mixins) && !isArray(mixins)) {
                options = mixins;
                mixins = false;
            }

            var innerParent = parent;

            if (mixins) {
                mixins = serialMixins(innerParent,mixins);
            }

            if (mixins) {
                innerParent = mergeMixins(innerParent,mixins);
            }

            var klassName = props.klassName || "",
                ctor = new Function(
                    "return function " + klassName + "() {" +
                    "var inst = this," +
                    " ctor = arguments.callee;" +
                    "if (!(inst instanceof ctor)) {" +
                    "inst = Object.create(ctor.prototype);" +
                    "}" +
                    "return ctor._constructor.apply(inst, arguments) || inst;" + 
                    "}"
                )();


            // Populate our constructed prototype object
            ctor.prototype = Object.create(innerParent.prototype);

            // Enforce the constructor to be what we expect
            ctor.prototype.constructor = ctor;
            ctor.superclass = parent;

            // And make this class extendable
            ctor.__proto__ = innerParent;


            if (!ctor._constructor) {
                ctor._constructor = _constructor;
            } 

            if (mixins) {
                ctor.__mixins__ = mixins;
            }

            if (!ctor.partial) {
                ctor.partial = function(props, options) {
                    return extendClass(this, props, options);
                };
            }
            if (!ctor.inherit) {
                ctor.inherit = function(props, mixins,options) {
                    return createClass(props, this, mixins,options);
                };
            }

            ctor.partial(props, options);

            return ctor;
        };
    }

    var createClass = f1();

    return skylark.attach("langx.klass",createClass);
});
define('skylark-langx-klass/main',[
	"./klass"
],function(klass){
	return klass;
});
define('skylark-langx-klass', ['skylark-langx-klass/main'], function (main) { return main; });

define('skylark-langx/klass',[
    "skylark-langx-klass"
],function(klass){
    return klass;
});
define('skylark-langx/ArrayStore',[
    "./klass"
],function(klass){
    var SimpleQueryEngine = function(query, options){
        // summary:
        //      Simple query engine that matches using filter functions, named filter
        //      functions or objects by name-value on a query object hash
        //
        // description:
        //      The SimpleQueryEngine provides a way of getting a QueryResults through
        //      the use of a simple object hash as a filter.  The hash will be used to
        //      match properties on data objects with the corresponding value given. In
        //      other words, only exact matches will be returned.
        //
        //      This function can be used as a template for more complex query engines;
        //      for example, an engine can be created that accepts an object hash that
        //      contains filtering functions, or a string that gets evaluated, etc.
        //
        //      When creating a new dojo.store, simply set the store's queryEngine
        //      field as a reference to this function.
        //
        // query: Object
        //      An object hash with fields that may match fields of items in the store.
        //      Values in the hash will be compared by normal == operator, but regular expressions
        //      or any object that provides a test() method are also supported and can be
        //      used to match strings by more complex expressions
        //      (and then the regex's or object's test() method will be used to match values).
        //
        // options: dojo/store/api/Store.QueryOptions?
        //      An object that contains optional information such as sort, start, and count.
        //
        // returns: Function
        //      A function that caches the passed query under the field "matches".  See any
        //      of the "query" methods on dojo.stores.
        //
        // example:
        //      Define a store with a reference to this engine, and set up a query method.
        //
        //  |   var myStore = function(options){
        //  |       //  ...more properties here
        //  |       this.queryEngine = SimpleQueryEngine;
        //  |       //  define our query method
        //  |       this.query = function(query, options){
        //  |           return QueryResults(this.queryEngine(query, options)(this.data));
        //  |       };
        //  |   };

        // create our matching query function
        switch(typeof query){
            default:
                throw new Error("Can not query with a " + typeof query);
            case "object": case "undefined":
                var queryObject = query;
                query = function(object){
                    for(var key in queryObject){
                        var required = queryObject[key];
                        if(required && required.test){
                            // an object can provide a test method, which makes it work with regex
                            if(!required.test(object[key], object)){
                                return false;
                            }
                        }else if(required != object[key]){
                            return false;
                        }
                    }
                    return true;
                };
                break;
            case "string":
                // named query
                if(!this[query]){
                    throw new Error("No filter function " + query + " was found in store");
                }
                query = this[query];
                // fall through
            case "function":
                // fall through
        }
        
        function filter(arr, callback, thisObject){
            // summary:
            //      Returns a new Array with those items from arr that match the
            //      condition implemented by callback.
            // arr: Array
            //      the array to iterate over.
            // callback: Function|String
            //      a function that is invoked with three arguments (item,
            //      index, array). The return of this function is expected to
            //      be a boolean which determines whether the passed-in item
            //      will be included in the returned array.
            // thisObject: Object?
            //      may be used to scope the call to callback
            // returns: Array
            // description:
            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when
            //      run over sparse arrays, this implementation passes the "holes" in the sparse array to
            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.
            //      For more details, see:
            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
            // example:
            //  | // returns [2, 3, 4]
            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });

            // TODO: do we need "Ctr" here like in map()?
            var i = 0, l = arr && arr.length || 0, out = [], value;
            if(l && typeof arr == "string") arr = arr.split("");
            if(typeof callback == "string") callback = cache[callback] || buildFn(callback);
            if(thisObject){
                for(; i < l; ++i){
                    value = arr[i];
                    if(callback.call(thisObject, value, i, arr)){
                        out.push(value);
                    }
                }
            }else{
                for(; i < l; ++i){
                    value = arr[i];
                    if(callback(value, i, arr)){
                        out.push(value);
                    }
                }
            }
            return out; // Array
        }

        function execute(array){
            // execute the whole query, first we filter
            var results = filter(array, query);
            // next we sort
            var sortSet = options && options.sort;
            if(sortSet){
                results.sort(typeof sortSet == "function" ? sortSet : function(a, b){
                    for(var sort, i=0; sort = sortSet[i]; i++){
                        var aValue = a[sort.attribute];
                        var bValue = b[sort.attribute];
                        // valueOf enables proper comparison of dates
                        aValue = aValue != null ? aValue.valueOf() : aValue;
                        bValue = bValue != null ? bValue.valueOf() : bValue;
                        if (aValue != bValue){
                            // modified by lwf 2016/07/09
                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;
                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;
                        }
                    }
                    return 0;
                });
            }
            // now we paginate
            if(options && (options.start || options.count)){
                var total = results.length;
                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));
                results.total = total;
            }
            return results;
        }
        execute.matches = query;
        return execute;
    };

    var QueryResults = function(results){
        // summary:
        //      A function that wraps the results of a store query with additional
        //      methods.
        // description:
        //      QueryResults is a basic wrapper that allows for array-like iteration
        //      over any kind of returned data from a query.  While the simplest store
        //      will return a plain array of data, other stores may return deferreds or
        //      promises; this wrapper makes sure that *all* results can be treated
        //      the same.
        //
        //      Additional methods include `forEach`, `filter` and `map`.
        // results: Array|dojo/promise/Promise
        //      The result set as an array, or a promise for an array.
        // returns:
        //      An array-like object that can be used for iterating over.
        // example:
        //      Query a store and iterate over the results.
        //
        //  |   store.query({ prime: true }).forEach(function(item){
        //  |       //  do something
        //  |   });

        if(!results){
            return results;
        }

        var isPromise = !!results.then;
        // if it is a promise it may be frozen
        if(isPromise){
            results = Object.delegate(results);
        }
        function addIterativeMethod(method){
            // Always add the iterative methods so a QueryResults is
            // returned whether the environment is ES3 or ES5
            results[method] = function(){
                var args = arguments;
                var result = Deferred.when(results, function(results){
                    //Array.prototype.unshift.call(args, results);
                    return QueryResults(Array.prototype[method].apply(results, args));
                });
                // forEach should only return the result of when()
                // when we're wrapping a promise
                if(method !== "forEach" || isPromise){
                    return result;
                }
            };
        }

        addIterativeMethod("forEach");
        addIterativeMethod("filter");
        addIterativeMethod("map");
        if(results.total == null){
            results.total = Deferred.when(results, function(results){
                return results.length;
            });
        }
        return results; // Object
    };

    var ArrayStore = klass({
        "klassName": "ArrayStore",

        "queryEngine": SimpleQueryEngine,
        
        "idProperty": "id",


        get: function(id){
            // summary:
            //      Retrieves an object by its identity
            // id: Number
            //      The identity to use to lookup the object
            // returns: Object
            //      The object in the store that matches the given id.
            return this.data[this.index[id]];
        },

        getIdentity: function(object){
            return object[this.idProperty];
        },

        put: function(object, options){
            var data = this.data,
                index = this.index,
                idProperty = this.idProperty;
            var id = object[idProperty] = (options && "id" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();
            if(id in index){
                // object exists
                if(options && options.overwrite === false){
                    throw new Error("Object already exists");
                }
                // replace the entry in data
                data[index[id]] = object;
            }else{
                // add the new object
                index[id] = data.push(object) - 1;
            }
            return id;
        },

        add: function(object, options){
            (options = options || {}).overwrite = false;
            // call put with overwrite being false
            return this.put(object, options);
        },

        remove: function(id){
            // summary:
            //      Deletes an object by its identity
            // id: Number
            //      The identity to use to delete the object
            // returns: Boolean
            //      Returns true if an object was removed, falsy (undefined) if no object matched the id
            var index = this.index;
            var data = this.data;
            if(id in index){
                data.splice(index[id], 1);
                // now we have to reindex
                this.setData(data);
                return true;
            }
        },
        query: function(query, options){
            // summary:
            //      Queries the store for objects.
            // query: Object
            //      The query to use for retrieving objects from the store.
            // options: dojo/store/api/Store.QueryOptions?
            //      The optional arguments to apply to the resultset.
            // returns: dojo/store/api/Store.QueryResults
            //      The results of the query, extended with iterative methods.
            //
            // example:
            //      Given the following store:
            //
            //  |   var store = new Memory({
            //  |       data: [
            //  |           {id: 1, name: "one", prime: false },
            //  |           {id: 2, name: "two", even: true, prime: true},
            //  |           {id: 3, name: "three", prime: true},
            //  |           {id: 4, name: "four", even: true, prime: false},
            //  |           {id: 5, name: "five", prime: true}
            //  |       ]
            //  |   });
            //
            //  ...find all items where "prime" is true:
            //
            //  |   var results = store.query({ prime: true });
            //
            //  ...or find all items where "even" is true:
            //
            //  |   var results = store.query({ even: true });
            return QueryResults(this.queryEngine(query, options)(this.data));
        },

        setData: function(data){
            // summary:
            //      Sets the given data as the source for this store, and indexes it
            // data: Object[]
            //      An array of objects to use as the source of data.
            if(data.items){
                // just for convenience with the data format IFRS expects
                this.idProperty = data.identifier || this.idProperty;
                data = this.data = data.items;
            }else{
                this.data = data;
            }
            this.index = {};
            for(var i = 0, l = data.length; i < l; i++){
                this.index[data[i][this.idProperty]] = i;
            }
        },

        init: function(options) {
            for(var i in options){
                this[i] = options[i];
            }
            this.setData(this.data || []);
        }

    });

	return ArrayStore;
});
define('skylark-langx-aspect/aspect',[
    "skylark-langx-ns"
],function(skylark){

  var undefined, nextId = 0;
    function advise(dispatcher, type, advice, receiveArguments){
        var previous = dispatcher[type];
        var around = type == "around";
        var signal;
        if(around){
            var advised = advice(function(){
                return previous.advice(this, arguments);
            });
            signal = {
                remove: function(){
                    if(advised){
                        advised = dispatcher = advice = null;
                    }
                },
                advice: function(target, args){
                    return advised ?
                        advised.apply(target, args) :  // called the advised function
                        previous.advice(target, args); // cancelled, skip to next one
                }
            };
        }else{
            // create the remove handler
            signal = {
                remove: function(){
                    if(signal.advice){
                        var previous = signal.previous;
                        var next = signal.next;
                        if(!next && !previous){
                            delete dispatcher[type];
                        }else{
                            if(previous){
                                previous.next = next;
                            }else{
                                dispatcher[type] = next;
                            }
                            if(next){
                                next.previous = previous;
                            }
                        }

                        // remove the advice to signal that this signal has been removed
                        dispatcher = advice = signal.advice = null;
                    }
                },
                id: nextId++,
                advice: advice,
                receiveArguments: receiveArguments
            };
        }
        if(previous && !around){
            if(type == "after"){
                // add the listener to the end of the list
                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug
                while(previous.next && (previous = previous.next)){}
                previous.next = signal;
                signal.previous = previous;
            }else if(type == "before"){
                // add to beginning
                dispatcher[type] = signal;
                signal.next = previous;
                previous.previous = signal;
            }
        }else{
            // around or first one just replaces
            dispatcher[type] = signal;
        }
        return signal;
    }
    function aspect(type){
        return function(target, methodName, advice, receiveArguments){
            var existing = target[methodName], dispatcher;
            if(!existing || existing.target != target){
                // no dispatcher in place
                target[methodName] = dispatcher = function(){
                    var executionId = nextId;
                    // before advice
                    var args = arguments;
                    var before = dispatcher.before;
                    while(before){
                        args = before.advice.apply(this, args) || args;
                        before = before.next;
                    }
                    // around advice
                    if(dispatcher.around){
                        var results = dispatcher.around.advice(this, args);
                    }
                    // after advice
                    var after = dispatcher.after;
                    while(after && after.id < executionId){
                        if(after.receiveArguments){
                            var newResults = after.advice.apply(this, args);
                            // change the return value only if a new value was returned
                            results = newResults === undefined ? results : newResults;
                        }else{
                            results = after.advice.call(this, results, args);
                        }
                        after = after.next;
                    }
                    return results;
                };
                if(existing){
                    dispatcher.around = {advice: function(target, args){
                        return existing.apply(target, args);
                    }};
                }
                dispatcher.target = target;
            }
            var results = advise((dispatcher || existing), type, advice, receiveArguments);
            advice = null;
            return results;
        };
    }

    return skylark.attach("langx.aspect",{
        after: aspect("after"),
 
        around: aspect("around"),
        
        before: aspect("before")
    });
});
define('skylark-langx-aspect/main',[
	"./aspect"
],function(aspect){
	return aspect;
});
define('skylark-langx-aspect', ['skylark-langx-aspect/main'], function (main) { return main; });

define('skylark-langx/aspect',[
    "skylark-langx-aspect"
],function(aspect){
  return aspect;
});
define('skylark-langx-funcs/funcs',[
  "skylark-langx-ns/ns",
  "skylark-langx-types",
  "skylark-langx-objects"
],function(skylark,types,objects){
	var mixin = objects.mixin,
        slice = Array.prototype.slice,
        isFunction = types.isFunction,
        isString = types.isString;

    function defer(fn) {
        if (requestAnimationFrame) {
            requestAnimationFrame(fn);
        } else {
            setTimeoutout(fn);
        }
        return this;
    }

    function noop() {
    }

    function proxy(fn, context) {
        var args = (2 in arguments) && slice.call(arguments, 2)
        if (isFunction(fn)) {
            var proxyFn = function() {
                return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);
            }
            return proxyFn;
        } else if (isString(context)) {
            if (args) {
                args.unshift(fn[context], fn)
                return proxy.apply(null, args)
            } else {
                return proxy(fn[context], fn);
            }
        } else {
            throw new TypeError("expected function");
        }
    }

    function debounce(fn, wait) {
        var timeout;
        return function () {
            var context = this, args = arguments;
            var later = function () {
                timeout = null;
                fn.apply(context, args);
            };
            if (timeout) clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
   
    var delegate = (function() {
        // boodman/crockford delegation w/ cornford optimization
        function TMP() {}
        return function(obj, props) {
            TMP.prototype = obj;
            var tmp = new TMP();
            TMP.prototype = null;
            if (props) {
                mixin(tmp, props);
            }
            return tmp; // Object
        };
    })();

  var templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };


  function template(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = objects.defaults({}, settings,templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

    return skylark.attach("langx.funcs",{
        debounce: debounce,

        delegate: delegate,

        defer: defer,

        noop : noop,

        proxy: proxy,

        returnTrue: function() {
            return true;
        },

        returnFalse: function() {
            return false;
        },

        templateSettings : templateSettings,
        template : template
    });
});
define('skylark-langx-funcs/main',[
	"./funcs"
],function(funcs){
	return funcs;
});
define('skylark-langx-funcs', ['skylark-langx-funcs/main'], function (main) { return main; });

define('skylark-langx-async/Deferred',[
    "skylark-langx-arrays",
	"skylark-langx-funcs",
    "skylark-langx-objects"
],function(arrays,funcs,objects){
    "use strict";
    
    var  PGLISTENERS = Symbol ? Symbol() : '__pglisteners',
         PGNOTIFIES = Symbol ? Symbol() : '__pgnotifies';

    var slice = Array.prototype.slice,
        proxy = funcs.proxy,
        makeArray = arrays.makeArray,
        result = objects.result,
        mixin = objects.mixin;

    mixin(Promise.prototype,{
        always: function(handler) {
            //this.done(handler);
            //this.fail(handler);
            this.then(handler,handler);
            return this;
        },
        done : function() {
            for (var i = 0;i<arguments.length;i++) {
                this.then(arguments[i]);
            }
            return this;
        },
        fail : function(handler) { 
            //return mixin(Promise.prototype.catch.call(this,handler),added);
            //return this.then(null,handler);
            this.catch(handler);
            return this;
         }
    });


    var Deferred = function() {
        var self = this,
            p = this.promise = new Promise(function(resolve, reject) {
                self._resolve = resolve;
                self._reject = reject;
            });

        wrapPromise(p,self);

        this[PGLISTENERS] = [];
        this[PGNOTIFIES] = [];

        //this.resolve = Deferred.prototype.resolve.bind(this);
        //this.reject = Deferred.prototype.reject.bind(this);
        //this.progress = Deferred.prototype.progress.bind(this);

    };

    function wrapPromise(p,d) {
        var   added = {
                state : function() {
                    if (d.isResolved()) {
                        return 'resolved';
                    }
                    if (d.isRejected()) {
                        return 'rejected';
                    }
                    return 'pending';
                },
                then : function(onResolved,onRejected,onProgress) {
                    if (onProgress) {
                        this.progress(onProgress);
                    }
                    return wrapPromise(Promise.prototype.then.call(this,
                            onResolved && function(args) {
                                if (args && args.__ctx__ !== undefined) {
                                    return onResolved.apply(args.__ctx__,args);
                                } else {
                                    return onResolved(args);
                                }
                            },
                            onRejected && function(args){
                                if (args && args.__ctx__ !== undefined) {
                                    return onRejected.apply(args.__ctx__,args);
                                } else {
                                    return onRejected(args);
                                }
                            }));
                },
                progress : function(handler) {
                    d[PGNOTIFIES].forEach(function (value) {
                        handler(value);
                    });
                    d[PGLISTENERS].push(handler);
                    return this;
                }

            };

        added.pipe = added.then;
        return mixin(p,added);

    }

    Deferred.prototype.resolve = function(value) {
        var args = slice.call(arguments);
        return this.resolveWith(null,args);
    };

    Deferred.prototype.resolveWith = function(context,args) {
        args = args ? makeArray(args) : []; 
        args.__ctx__ = context;
        this._resolve(args);
        this._resolved = true;
        return this;
    };

    Deferred.prototype.notify = function(value) {
        try {
            this[PGNOTIFIES].push(value);

            return this[PGLISTENERS].forEach(function (listener) {
                return listener(value);
            });
        } catch (error) {
          this.reject(error);
        }
        return this;
    };

    Deferred.prototype.reject = function(reason) {
        var args = slice.call(arguments);
        return this.rejectWith(null,args);
    };

    Deferred.prototype.rejectWith = function(context,args) {
        args = args ? makeArray(args) : []; 
        args.__ctx__ = context;
        this._reject(args);
        this._rejected = true;
        return this;
    };

    Deferred.prototype.isResolved = function() {
        return !!this._resolved;
    };

    Deferred.prototype.isRejected = function() {
        return !!this._rejected;
    };

    Deferred.prototype.then = function(callback, errback, progback) {
        var p = result(this,"promise");
        return p.then(callback, errback, progback);
    };

    Deferred.prototype.progress = function(progback){
        var p = result(this,"promise");
        return p.progress(progback);
    };
   
    Deferred.prototype.catch = function(errback) {
        var p = result(this,"promise");
        return p.catch(errback);
    };


    Deferred.prototype.done  = function() {
        var p = result(this,"promise");
        return p.done.apply(p,arguments);
    };

    Deferred.prototype.fail = function(errback) {
        var p = result(this,"promise");
        return p.fail(errback);
    };


    Deferred.all = function(array) {
        //return wrapPromise(Promise.all(array));
        var d = new Deferred();
        Promise.all(array).then(d.resolve.bind(d),d.reject.bind(d));
        return result(d,"promise");
    };

    Deferred.first = function(array) {
        return wrapPromise(Promise.race(array));
    };


    Deferred.when = function(valueOrPromise, callback, errback, progback) {
        var receivedPromise = valueOrPromise && typeof valueOrPromise.then === "function";
        var nativePromise = receivedPromise && valueOrPromise instanceof Promise;

        if (!receivedPromise) {
            if (arguments.length > 1) {
                return callback ? callback(valueOrPromise) : valueOrPromise;
            } else {
                return new Deferred().resolve(valueOrPromise);
            }
        } else if (!nativePromise) {
            var deferred = new Deferred(valueOrPromise.cancel);
            valueOrPromise.then(proxy(deferred.resolve,deferred), proxy(deferred.reject,deferred), deferred.notify);
            valueOrPromise = deferred.promise;
        }

        if (callback || errback || progback) {
            return valueOrPromise.then(callback, errback, progback);
        }
        return valueOrPromise;
    };

    Deferred.reject = function(err) {
        var d = new Deferred();
        d.reject(err);
        return d.promise;
    };

    Deferred.resolve = function(data) {
        var d = new Deferred();
        d.resolve.apply(d,arguments);
        return d.promise;
    };

    Deferred.immediate = Deferred.resolve;

    return Deferred;
});
define('skylark-langx-async/async',[
    "skylark-langx-ns",
    "skylark-langx-objects",
    "./Deferred"
],function(skylark,objects,Deferred){
    var each = objects.each;
    
    var async = {
        Deferred : Deferred,

        parallel : function(arr,args,ctx) {
            var rets = [];
            ctx = ctx || null;
            args = args || [];

            each(arr,function(i,func){
                rets.push(func.apply(ctx,args));
            });

            return Deferred.all(rets);
        },

        series : function(arr,args,ctx) {
            var rets = [],
                d = new Deferred(),
                p = d.promise;

            ctx = ctx || null;
            args = args || [];

            d.resolve();
            each(arr,function(i,func){
                p = p.then(function(){
                    return func.apply(ctx,args);
                });
                rets.push(p);
            });

            return Deferred.all(rets);
        },

        waterful : function(arr,args,ctx) {
            var d = new Deferred(),
                p = d.promise;

            ctx = ctx || null;
            args = args || [];

            d.resolveWith(ctx,args);

            each(arr,function(i,func){
                p = p.then(func);
            });
            return p;
        }
    };

	return skylark.attach("langx.async",async);	
});
define('skylark-langx-async/main',[
	"./async"
],function(async){
	return async;
});
define('skylark-langx-async', ['skylark-langx-async/main'], function (main) { return main; });

define('skylark-langx/async',[
    "skylark-langx-async"
],function(async){
    return async;
});
define('skylark-langx-datetimes/datetimes',[
    "skylark-langx-ns"
],function(skylark){
     function parseMilliSeconds(str) {

        var strs = str.split(' ');
        var number = parseInt(strs[0]);

        if (isNaN(number)){
            return 0;
        }

        var min = 60000 * 60;

        switch (strs[1].trim().replace(/\./g, '')) {
            case 'minutes':
            case 'minute':
            case 'min':
            case 'mm':
            case 'm':
                return 60000 * number;
            case 'hours':
            case 'hour':
            case 'HH':
            case 'hh':
            case 'h':
            case 'H':
                return min * number;
            case 'seconds':
            case 'second':
            case 'sec':
            case 'ss':
            case 's':
                return 1000 * number;
            case 'days':
            case 'day':
            case 'DD':
            case 'dd':
            case 'd':
                return (min * 24) * number;
            case 'months':
            case 'month':
            case 'MM':
            case 'M':
                return (min * 24 * 28) * number;
            case 'weeks':
            case 'week':
            case 'W':
            case 'w':
                return (min * 24 * 7) * number;
            case 'years':
            case 'year':
            case 'yyyy':
            case 'yy':
            case 'y':
                return (min * 24 * 365) * number;
            default:
                return 0;
        }
    };
	
	return skylark.attach("langx.datetimes",{
		parseMilliSeconds
	});
});
define('skylark-langx-datetimes/main',[
	"./datetimes"
],function(datetimes){
	return datetimes;
});
define('skylark-langx-datetimes', ['skylark-langx-datetimes/main'], function (main) { return main; });

define('skylark-langx/datetimes',[
    "skylark-langx-datetimes"
],function(datetimes){
    return datetimes;
});
define('skylark-langx/Deferred',[
    "skylark-langx-async/Deferred"
],function(Deferred){
    return Deferred;
});
define('skylark-langx-emitter/Emitter',[
  "skylark-langx-ns/ns",
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
  "skylark-langx-klass"
],function(skylark,types,objects,arrays,klass){
    var slice = Array.prototype.slice,
        compact = arrays.compact,
        isDefined = types.isDefined,
        isPlainObject = types.isPlainObject,
        isFunction = types.isFunction,
        isString = types.isString,
        isEmptyObject = types.isEmptyObject,
        mixin = objects.mixin,
        safeMixin = objects.safeMixin;

    function parse(event) {
        var segs = ("" + event).split(".");
        return {
            name: segs[0],
            ns: segs.slice(1).join(" ")
        };
    }

    var Emitter = klass({
        on: function(events, selector, data, callback, ctx, /*used internally*/ one) {
            var self = this,
                _hub = this._hub || (this._hub = {});

            if (isPlainObject(events)) {
                ctx = callback;
                each(events, function(type, fn) {
                    self.on(type, selector, data, fn, ctx, one);
                });
                return this;
            }

            if (!isString(selector) && !isFunction(callback)) {
                ctx = callback;
                callback = data;
                data = selector;
                selector = undefined;
            }

            if (isFunction(data)) {
                ctx = callback;
                callback = data;
                data = null;
            }

            if (isString(events)) {
                events = events.split(/\s/)
            }

            events.forEach(function(event) {
                var parsed = parse(event),
                    name = parsed.name,
                    ns = parsed.ns;

                (_hub[name] || (_hub[name] = [])).push({
                    fn: callback,
                    selector: selector,
                    data: data,
                    ctx: ctx,
                    ns : ns,
                    one: one
                });
            });

            return this;
        },

        one: function(events, selector, data, callback, ctx) {
            return this.on(events, selector, data, callback, ctx, 1);
        },

        emit: function(e /*,argument list*/ ) {
            if (!this._hub) {
                return this;
            }

            var self = this;

            if (isString(e)) {
                e = new CustomEvent(e);
            }

            Object.defineProperty(e,"target",{
                value : this
            });

            var args = slice.call(arguments, 1);
            if (isDefined(args)) {
                args = [e].concat(args);
            } else {
                args = [e];
            }
            [e.type || e.name, "all"].forEach(function(eventName) {
                var parsed = parse(eventName),
                    name = parsed.name,
                    ns = parsed.ns;

                var listeners = self._hub[name];
                if (!listeners) {
                    return;
                }

                var len = listeners.length,
                    reCompact = false;

                for (var i = 0; i < len; i++) {
                    var listener = listeners[i];
                    if (ns && (!listener.ns ||  !listener.ns.startsWith(ns))) {
                        continue;
                    }
                    if (e.data) {
                        if (listener.data) {
                            e.data = mixin({}, listener.data, e.data);
                        }
                    } else {
                        e.data = listener.data || null;
                    }
                    listener.fn.apply(listener.ctx, args);
                    if (listener.one) {
                        listeners[i] = null;
                        reCompact = true;
                    }
                }

                if (reCompact) {
                    self._hub[eventName] = compact(listeners);
                }

            });
            return this;
        },

        listened: function(event) {
            var evtArr = ((this._hub || (this._events = {}))[event] || []);
            return evtArr.length > 0;
        },

        listenTo: function(obj, event, callback, /*used internally*/ one) {
            if (!obj) {
                return this;
            }

            // Bind callbacks on obj,
            if (isString(callback)) {
                callback = this[callback];
            }

            if (one) {
                obj.one(event, callback, this);
            } else {
                obj.on(event, callback, this);
            }

            //keep track of them on listening.
            var listeningTo = this._listeningTo || (this._listeningTo = []),
                listening;

            for (var i = 0; i < listeningTo.length; i++) {
                if (listeningTo[i].obj == obj) {
                    listening = listeningTo[i];
                    break;
                }
            }
            if (!listening) {
                listeningTo.push(
                    listening = {
                        obj: obj,
                        events: {}
                    }
                );
            }
            var listeningEvents = listening.events,
                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];
            if (listeningEvent.indexOf(callback) == -1) {
                listeningEvent.push(callback);
            }

            return this;
        },

        listenToOnce: function(obj, event, callback) {
            return this.listenTo(obj, event, callback, 1);
        },

        off: function(events, callback) {
            var _hub = this._hub || (this._hub = {});
            if (isString(events)) {
                events = events.split(/\s/)
            }

            events.forEach(function(event) {
                var parsed = parse(event),
                    name = parsed.name,
                    ns = parsed.ns;

                var evts = _hub[name];

                if (evts) {
                    var liveEvents = [];

                    if (callback || ns) {
                        for (var i = 0, len = evts.length; i < len; i++) {
                            
                            if (callback && evts[i].fn !== callback && evts[i].fn._ !== callback) {
                                liveEvents.push(evts[i]);
                                continue;
                            } 

                            if (ns && (!evts[i].ns || evts[i].ns.indexOf(ns)!=0)) {
                                liveEvents.push(evts[i]);
                                continue;
                            }
                        }
                    }

                    if (liveEvents.length) {
                        _hub[name] = liveEvents;
                    } else {
                        delete _hub[name];
                    }

                }
            });

            return this;
        },
        unlistenTo: function(obj, event, callback) {
            var listeningTo = this._listeningTo;
            if (!listeningTo) {
                return this;
            }
            for (var i = 0; i < listeningTo.length; i++) {
                var listening = listeningTo[i];

                if (obj && obj != listening.obj) {
                    continue;
                }

                var listeningEvents = listening.events;
                for (var eventName in listeningEvents) {
                    if (event && event != eventName) {
                        continue;
                    }

                    var listeningEvent = listeningEvents[eventName];

                    for (var j = 0; j < listeningEvent.length; j++) {
                        if (!callback || callback == listeningEvent[i]) {
                            listening.obj.off(eventName, listeningEvent[i], this);
                            listeningEvent[i] = null;
                        }
                    }

                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);

                    if (isEmptyObject(listeningEvent)) {
                        listeningEvents[eventName] = null;
                    }

                }

                if (isEmptyObject(listeningEvents)) {
                    listeningTo[i] = null;
                }
            }

            listeningTo = this._listeningTo = compact(listeningTo);
            if (isEmptyObject(listeningTo)) {
                this._listeningTo = null;
            }

            return this;
        },

        trigger  : function() {
            return this.emit.apply(this,arguments);
        }
    });

    Emitter.createEvent = function (type,props) {
        var e = new CustomEvent(type,props);
        return safeMixin(e, props);
    };

    return skylark.attach("langx.Emitter",Emitter);

});
define('skylark-langx-emitter/Evented',[
  "skylark-langx-ns/ns",
	"./Emitter"
],function(skylark,Emitter){
	return skylark.attach("langx.Evented",Emitter);
});
define('skylark-langx-emitter/main',[
	"./Emitter",
	"./Evented"
],function(Emitter){
	return Emitter;
});
define('skylark-langx-emitter', ['skylark-langx-emitter/main'], function (main) { return main; });

define('skylark-langx/Emitter',[
    "skylark-langx-emitter"
],function(Evented){
    return Evented;
});
define('skylark-langx/Evented',[
    "skylark-langx-emitter"
],function(Evented){
    return Evented;
});
define('skylark-langx/funcs',[
    "skylark-langx-funcs"
],function(funcs){
    return funcs;
});
define('skylark-langx-hoster/hoster',[
    "skylark-langx-ns"
],function(skylark){
	// The javascript host environment, brower and nodejs are supported.
	var hoster = {
		"isBrowser" : true, // default
		"isNode" : null,
		"global" : this,
		"browser" : null,
		"node" : null
	};

	if (typeof process == "object" && process.versions && process.versions.node && process.versions.v8) {
		hoster.isNode = true;
		hoster.isBrowser = false;
	}

	hoster.global = (function(){
		if (typeof global !== 'undefined' && typeof global !== 'function') {
			// global spec defines a reference to the global object called 'global'
			// https://github.com/tc39/proposal-global
			// `global` is also defined in NodeJS
			return global;
		} else if (typeof window !== 'undefined') {
			// window is defined in browsers
			return window;
		}
		else if (typeof self !== 'undefined') {
			// self is defined in WebWorkers
			return self;
		}
		return this;
	})();

	var _document = null;

	Object.defineProperty(hoster,"document",function(){
		if (!_document) {
			var w = typeof window === 'undefined' ? require('html-element') : window;
			_document = w.document;
		}

		return _document;
	});

	if (hoster.isBrowser) {
	    function uaMatch( ua ) {
		    ua = ua.toLowerCase();

		    var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		      /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		      /(msie) ([\w.]+)/.exec( ua ) ||
		      ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		      [];

		    return {
		      browser: match[ 1 ] || '',
		      version: match[ 2 ] || '0'
		    };
	  	};

	    var matched = uaMatch( navigator.userAgent );

	    var browser = hoster.browser = {};

	    if ( matched.browser ) {
	      browser[ matched.browser ] = true;
	      browser.version = matched.version;
	    }

	    // Chrome is Webkit, but Webkit is also Safari.
	    if ( browser.chrome ) {
	      browser.webkit = true;
	    } else if ( browser.webkit ) {
	      browser.safari = true;
	    }
	}

	return  skylark.attach("langx.hoster",hoster);
});
define('skylark-langx-hoster/main',[
	"./hoster"
],function(hoster){
	return hoster;
});
define('skylark-langx-hoster', ['skylark-langx-hoster/main'], function (main) { return main; });

define('skylark-langx/hoster',[
	"skylark-langx-hoster"
],function(hoster){
	return hoster;
});
define('skylark-langx/numbers',[
	"skylark-langx-numbers"
],function(numbers){
	return numbers;
});
define('skylark-langx/objects',[
    "skylark-langx-objects"
],function(objects){
    return objects;
});
define('skylark-langx-strings/strings',[
    "skylark-langx-ns"
],function(skylark){
    // add default escape function for escaping HTML entities
    var escapeCharMap = Object.freeze({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;',
        '=': '&#x3D;',
    });
    function replaceChar(c) {
        return escapeCharMap[c];
    }
    var escapeChars = /[&<>"'`=]/g;


     /*
     * Converts camel case into dashes.
     * @param {String} str
     * @return {String}
     * @exapmle marginTop -> margin-top
     */
    function dasherize(str) {
        return str.replace(/::/g, '/')
            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
            .replace(/([a-z\d])([A-Z])/g, '$1_$2')
            .replace(/_/g, '-')
            .toLowerCase();
    }

    function deserializeValue(value) {
        try {
            return value ?
                value == "true" ||
                (value == "false" ? false :
                    value == "null" ? null :
                    +value + "" == value ? +value :
                    /^[\[\{]/.test(value) ? JSON.parse(value) :
                    value) : value;
        } catch (e) {
            return value;
        }
    }

    function escapeHTML(str) {
        if (str == null) {
            return '';
        }
        if (!str) {
            return String(str);
        }

        return str.toString().replace(escapeChars, replaceChar);
    }

    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c === 'x' ? r : ((r & 0x3) | 0x8);
            return v.toString(16);
        });
    }

    function trim(str) {
        return str == null ? "" : String.prototype.trim.call(str);
    }

    function substitute( /*String*/ template,
        /*Object|Array*/
        map,
        /*Function?*/
        transform,
        /*Object?*/
        thisObject) {
        // summary:
        //    Performs parameterized substitutions on a string. Throws an
        //    exception if any parameter is unmatched.
        // template:
        //    a string with expressions in the form `${key}` to be replaced or
        //    `${key:format}` which specifies a format function. keys are case-sensitive.
        // map:
        //    hash to search for substitutions
        // transform:
        //    a function to process all parameters before substitution takes


        thisObject = thisObject || window;
        transform = transform ?
            proxy(thisObject, transform) : function(v) {
                return v;
            };

        function getObject(key, map) {
            if (key.match(/\./)) {
                var retVal,
                    getValue = function(keys, obj) {
                        var _k = keys.pop();
                        if (_k) {
                            if (!obj[_k]) return null;
                            return getValue(keys, retVal = obj[_k]);
                        } else {
                            return retVal;
                        }
                    };
                return getValue(key.split(".").reverse(), map);
            } else {
                return map[key];
            }
        }

        return template.replace(/\$\{([^\s\:\}]+)(?:\:([^\s\:\}]+))?\}/g,
            function(match, key, format) {
                var value = getObject(key, map);
                if (format) {
                    value = getObject(format, thisObject).call(thisObject, value, key);
                }
                return transform(value, key).toString();
            }); // String
    }

    var idCounter = 0;
    function uniqueId (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id;
    }


    /**
     * https://github.com/cho45/micro-template.js
     * (c) cho45 http://cho45.github.com/mit-license
     */
    function template (id, data) {

        function include(name, args) {
            var stash = {};
            for (var key in template.context.stash) if (template.context.stash.hasOwnProperty(key)) {
                stash[key] = template.context.stash[key];
            }
            if (args) for (var key in args) if (args.hasOwnProperty(key)) {
                stash[key] = args[key];
            }
            var context = template.context;
            context.ret += template(name, stash);
            template.context = context;
        }

        function wrapper(name, fun) {
            var current = template.context.ret;
            template.context.ret = '';
            fun.apply(template.context);
            var content = template.context.ret;
            var orig_content = template.context.stash.content;
            template.context.stash.content = content;
            template.context.ret = current + template(name, template.context.stash);
            template.context.stash.content = orig_content;
        }

        var me = arguments.callee;
        if (!me.cache[id]) me.cache[id] = (function () {
            var name = id, string = /^[\w\-]+$/.test(id) ? me.get(id): (name = 'template(string)', id); // no warnings
            var line = 1, body = (
                "try { " +
                    (me.variable ?  "var " + me.variable + " = this.stash;" : "with (this.stash) { ") +
                        "this.ret += '"  +
                        string.
                            replace(/<%/g, '\x11').replace(/%>/g, '\x13'). // if you want other tag, just edit this line
                            replace(/'(?![^\x11\x13]+?\x13)/g, '\\x27').
                            replace(/^\s*|\s*$/g, '').
                            replace(/\n|\r\n/g, function () { return "';\nthis.line = " + (++line) + "; this.ret += '\\n" }).
                            replace(/\x11=raw(.+?)\x13/g, "' + ($1) + '").
                            replace(/\x11=(.+?)\x13/g, "' + this.escapeHTML($1) + '").
                            replace(/\x11(.+?)\x13/g, "'; $1; this.ret += '") +
                    "'; " + (me.variable ? "" : "}") + "return this.ret;" +
                "} catch (e) { throw 'TemplateError: ' + e + ' (on " + name + "' + ' line ' + this.line + ')'; } " +
                "//@ sourceURL=" + name + "\n" // source map
            ).replace(/this\.ret \+= '';/g, '');
            var func = new Function(body);
            var map  = { '&' : '&amp;', '<' : '&lt;', '>' : '&gt;', '\x22' : '&#x22;', '\x27' : '&#x27;' };
            var escapeHTML = function (string) { return (''+string).replace(/[&<>\'\"]/g, function (_) { return map[_] }) };
            return function (stash) { return func.call(me.context = { escapeHTML: escapeHTML, line: 1, ret : '', stash: stash }) };
        })();
        return data ? me.cache[id](data) : me.cache[id];
    }

    template.cache = {};
    

    template.get = function (id) {
        return document.getElementById(id).innerHTML;
    };

    function rtrim(str) {
        return str.replace(/\s+$/g, '');
    }

    // Slugify a string
    function slugify(str) {
        str = str.replace(/^\s+|\s+$/g, '');

        // Make the string lowercase
        str = str.toLowerCase();

        // Remove accents, swap ñ for n, etc
        var from = "ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;";
        var to   = "AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------";
        for (var i=0, l=from.length ; i<l ; i++) {
            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
        }

        // Remove invalid chars
        //str = str.replace(/[^a-z0-9 -]/g, '') 
        // Collapse whitespace and replace by -
        str = str.replace(/\s+/g, '-') 
        // Collapse dashes
        .replace(/-+/g, '-'); 

        return str;
    }    

    // return boolean if string 'true' or string 'false', or if a parsable string which is a number
    // also supports JSON object and/or arrays parsing
    function toType(str) {
        var type = typeof str;
        if (type !== 'string') {
            return str;
        }
        var nb = parseFloat(str);
        if (!isNaN(nb) && isFinite(str)) {
            return nb;
        }
        if (str === 'false') {
            return false;
        }
        if (str === 'true') {
            return true;
        }

        try {
            str = JSON.parse(str);
        } catch (e) {}

        return str;
    }

	return skylark.attach("langx.strings",{
        camelCase: function(str) {
            return str.replace(/-([\da-z])/g, function(a) {
                return a.toUpperCase().replace('-', '');
            });
        },

        dasherize: dasherize,

        deserializeValue: deserializeValue,

        escapeHTML : escapeHTML,

        generateUUID : generateUUID,

        lowerFirst: function(str) {
            return str.charAt(0).toLowerCase() + str.slice(1);
        },

        rtrim : rtrim,

        serializeValue: function(value) {
            return JSON.stringify(value)
        },


        substitute: substitute,

        slugify : slugify,

        template : template,

        trim: trim,

        uniqueId: uniqueId,

        upperFirst: function(str) {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }
	}) ; 

});
define('skylark-langx-strings/main',[
	"./strings"
],function(strings){
	return strings;
});
define('skylark-langx-strings', ['skylark-langx-strings/main'], function (main) { return main; });

define('skylark-langx/strings',[
    "skylark-langx-strings"
],function(strings){
    return strings;
});
define('skylark-langx/Stateful',[
	"./Evented",
  "./strings",
  "./objects"
],function(Evented,strings,objects){
    var isEqual = objects.isEqual,
        mixin = objects.mixin,
        result = objects.result,
        isEmptyObject = objects.isEmptyObject,
        clone = objects.clone,
        uniqueId = strings.uniqueId;

    var Stateful = Evented.inherit({
        _construct : function(attributes, options) {
            var attrs = attributes || {};
            options || (options = {});
            this.cid = uniqueId(this.cidPrefix);
            this.attributes = {};
            if (options.collection) this.collection = options.collection;
            if (options.parse) attrs = this.parse(attrs, options) || {};
            var defaults = result(this, 'defaults');
            attrs = mixin({}, defaults, attrs);
            this.set(attrs, options);
            this.changed = {};
        },

        // A hash of attributes whose current and previous value differ.
        changed: null,

        // The value returned during the last failed validation.
        validationError: null,

        // The default name for the JSON `id` attribute is `"id"`. MongoDB and
        // CouchDB users may want to set this to `"_id"`.
        idAttribute: 'id',

        // The prefix is used to create the client id which is used to identify models locally.
        // You may want to override this if you're experiencing name clashes with model ids.
        cidPrefix: 'c',


        // Return a copy of the model's `attributes` object.
        toJSON: function(options) {
          return clone(this.attributes);
        },


        // Get the value of an attribute.
        get: function(attr) {
          return this.attributes[attr];
        },

        // Returns `true` if the attribute contains a value that is not null
        // or undefined.
        has: function(attr) {
          return this.get(attr) != null;
        },

        // Set a hash of model attributes on the object, firing `"change"`. This is
        // the core primitive operation of a model, updating the data and notifying
        // anyone who needs to know about the change in state. The heart of the beast.
        set: function(key, val, options) {
          if (key == null) return this;

          // Handle both `"key", value` and `{key: value}` -style arguments.
          var attrs;
          if (typeof key === 'object') {
            attrs = key;
            options = val;
          } else {
            (attrs = {})[key] = val;
          }

          options || (options = {});

          // Run validation.
          if (!this._validate(attrs, options)) return false;

          // Extract attributes and options.
          var unset      = options.unset;
          var silent     = options.silent;
          var changes    = [];
          var changing   = this._changing;
          this._changing = true;

          if (!changing) {
            this._previousAttributes = clone(this.attributes);
            this.changed = {};
          }

          var current = this.attributes;
          var changed = this.changed;
          var prev    = this._previousAttributes;

          // For each `set` attribute, update or delete the current value.
          for (var attr in attrs) {
            val = attrs[attr];
            if (!isEqual(current[attr], val)) changes.push(attr);
            if (!isEqual(prev[attr], val)) {
              changed[attr] = val;
            } else {
              delete changed[attr];
            }
            unset ? delete current[attr] : current[attr] = val;
          }

          // Update the `id`.
          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);

          // Trigger all relevant attribute changes.
          if (!silent) {
            if (changes.length) this._pending = options;
            for (var i = 0; i < changes.length; i++) {
              this.trigger('change:' + changes[i], this, current[changes[i]], options);
            }
          }

          // You might be wondering why there's a `while` loop here. Changes can
          // be recursively nested within `"change"` events.
          if (changing) return this;
          if (!silent) {
            while (this._pending) {
              options = this._pending;
              this._pending = false;
              this.trigger('change', this, options);
            }
          }
          this._pending = false;
          this._changing = false;
          return this;
        },

        // Remove an attribute from the model, firing `"change"`. `unset` is a noop
        // if the attribute doesn't exist.
        unset: function(attr, options) {
          return this.set(attr, void 0, mixin({}, options, {unset: true}));
        },

        // Clear all attributes on the model, firing `"change"`.
        clear: function(options) {
          var attrs = {};
          for (var key in this.attributes) attrs[key] = void 0;
          return this.set(attrs, mixin({}, options, {unset: true}));
        },

        // Determine if the model has changed since the last `"change"` event.
        // If you specify an attribute name, determine if that attribute has changed.
        hasChanged: function(attr) {
          if (attr == null) return !isEmptyObject(this.changed);
          return this.changed[attr] !== undefined;
        },

        // Return an object containing all the attributes that have changed, or
        // false if there are no changed attributes. Useful for determining what
        // parts of a view need to be updated and/or what attributes need to be
        // persisted to the server. Unset attributes will be set to undefined.
        // You can also pass an attributes object to diff against the model,
        // determining if there *would be* a change.
        changedAttributes: function(diff) {
          if (!diff) return this.hasChanged() ? clone(this.changed) : false;
          var old = this._changing ? this._previousAttributes : this.attributes;
          var changed = {};
          for (var attr in diff) {
            var val = diff[attr];
            if (isEqual(old[attr], val)) continue;
            changed[attr] = val;
          }
          return !isEmptyObject(changed) ? changed : false;
        },

        // Get the previous value of an attribute, recorded at the time the last
        // `"change"` event was fired.
        previous: function(attr) {
          if (attr == null || !this._previousAttributes) return null;
          return this._previousAttributes[attr];
        },

        // Get all of the attributes of the model at the time of the previous
        // `"change"` event.
        previousAttributes: function() {
          return clone(this._previousAttributes);
        },

        // Create a new model with identical attributes to this one.
        clone: function() {
          return new this.constructor(this.attributes);
        },

        // A model is new if it has never been saved to the server, and lacks an id.
        isNew: function() {
          return !this.has(this.idAttribute);
        },

        // Check if the model is currently in a valid state.
        isValid: function(options) {
          return this._validate({}, mixin({}, options, {validate: true}));
        },

        // Run validation against the next complete set of model attributes,
        // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
        _validate: function(attrs, options) {
          if (!options.validate || !this.validate) return true;
          attrs = mixin({}, this.attributes, attrs);
          var error = this.validationError = this.validate(attrs, options) || null;
          if (!error) return true;
          this.trigger('invalid', this, error, mixin(options, {validationError: error}));
          return false;
        }
    });

	return Stateful;
});
define('skylark-langx-topic/topic',[
	"skylark-langx-ns",
	"skylark-langx-emitter/Evented"
],function(skylark,Evented){
	var hub = new Evented();

	return skylark.attach("langx.topic",{
	    publish: function(name, arg1,argn) {
	        var data = [].slice.call(arguments, 1);

	        return hub.trigger({
	            type : name,
	            data : data
	        });
	    },

        subscribe: function(name, listener,ctx) {
        	var handler = function(e){
                listener.apply(ctx,e.data);
            };
            hub.on(name, handler);
            return {
            	remove : function(){
            		hub.off(name,handler);
            	}
            }

        }

	});
});
define('skylark-langx-topic/main',[
	"./topic"
],function(topic){
	return topic;
});
define('skylark-langx-topic', ['skylark-langx-topic/main'], function (main) { return main; });

define('skylark-langx/topic',[
	"skylark-langx-topic"
],function(topic){
	return topic;
});
define('skylark-langx/types',[
    "skylark-langx-types"
],function(types){
    return types;
});
define('skylark-langx/langx',[
    "./skylark",
    "./arrays",
    "./ArrayStore",
    "./aspect",
    "./async",
    "./datetimes",
    "./Deferred",
    "./Emitter",
    "./Evented",
    "./funcs",
    "./hoster",
    "./klass",
    "./numbers",
    "./objects",
    "./Stateful",
    "./strings",
    "./topic",
    "./types"
], function(skylark,arrays,ArrayStore,aspect,async,datetimes,Deferred,Emitter,Evented,funcs,hoster,klass,numbers,objects,Stateful,strings,topic,types) {
    "use strict";
    var toString = {}.toString,
        concat = Array.prototype.concat,
        indexOf = Array.prototype.indexOf,
        slice = Array.prototype.slice,
        filter = Array.prototype.filter,
        mixin = objects.mixin,
        safeMixin = objects.safeMixin,
        isFunction = types.isFunction;


    function funcArg(context, arg, idx, payload) {
        return isFunction(arg) ? arg.call(context, idx, payload) : arg;
    }

    function getQueryParams(url) {
        var url = url || window.location.href,
            segs = url.split("?"),
            params = {};

        if (segs.length > 1) {
            segs[1].split("&").forEach(function(queryParam) {
                var nv = queryParam.split('=');
                params[nv[0]] = nv[1];
            });
        }
        return params;
    }


    function toPixel(value) {
        // style values can be floats, client code may want
        // to round for integer pixels.
        return parseFloat(value) || 0;
    }


    var _uid = 1;

    function uid(obj) {
        return obj._uid || (obj._uid = _uid++);
    }

    function langx() {
        return langx;
    }

    mixin(langx, {
        createEvent : Emitter.createEvent,

        funcArg: funcArg,

        getQueryParams: getQueryParams,

        toPixel: toPixel,

        uid: uid,

        URL: typeof window !== "undefined" ? window.URL || window.webkitURL : null

    });


    mixin(langx, arrays,aspect,datetimes,funcs,numbers,objects,strings,types,{
        ArrayStore : ArrayStore,

        async : async,
        
        Deferred: Deferred,

        Emitter: Emitter,

        Evented: Evented,

        hoster : hoster,

        klass : klass,
       
        Stateful: Stateful,

        topic : topic
    });

    return skylark.langx = langx;
});
define('skylark-domx-browser/browser',[
    "skylark-langx/skylark",
    "skylark-langx/langx"
], function(skylark,langx) {
    "use strict";

    var browser = langx.hoster.browser;
 
    var checkedCssProperties = {
            "transitionproperty": "TransitionProperty",
        },
        transEndEventNames = {
          WebkitTransition : 'webkitTransitionEnd',
          MozTransition    : 'transitionend',
          OTransition      : 'oTransitionEnd otransitionend',
          transition       : 'transitionend'
        },
        transEndEventName = null;


    var css3PropPrefix = "",
        css3StylePrefix = "",
        css3EventPrefix = "",

        cssStyles = {},
        cssProps = {},

        vendorPrefix,
        vendorPrefixRE,
        vendorPrefixesRE = /^(Webkit|webkit|O|Moz|moz|ms)(.*)$/,

        document = window.document,
        testEl = document.createElement("div"),

        matchesSelector = testEl.webkitMatchesSelector ||
                          testEl.mozMatchesSelector ||
                          testEl.oMatchesSelector ||
                          testEl.matchesSelector,

        requestFullScreen = testEl.requestFullscreen || 
                            testEl.webkitRequestFullscreen || 
                            testEl.mozRequestFullScreen || 
                            testEl.msRequestFullscreen,

        exitFullScreen =  document.exitFullscreen ||
                          document.webkitCancelFullScreen ||
                          document.mozCancelFullScreen ||
                          document.msExitFullscreen,

        testStyle = testEl.style;

    for (var name in testStyle) {
        var matched = name.match(vendorPrefixRE || vendorPrefixesRE);
        if (matched) {
            if (!vendorPrefixRE) {
                vendorPrefix = matched[1];
                vendorPrefixRE = new RegExp("^(" + vendorPrefix + ")(.*)$");

                css3StylePrefix = vendorPrefix;
                css3PropPrefix = '-' + vendorPrefix.toLowerCase() + '-';
                css3EventPrefix = vendorPrefix.toLowerCase();
            }

            cssStyles[langx.lowerFirst(matched[2])] = name;
            var cssPropName = langx.dasherize(matched[2]);
            cssProps[cssPropName] = css3PropPrefix + cssPropName;

            if (transEndEventNames[name]) {
              transEndEventName = transEndEventNames[name];
            }
        }
    }

    if (!transEndEventName) {
        if (testStyle["transition"] !== undefined) {
            transEndEventName = transEndEventNames["transition"];
        }
    }

    function normalizeCssEvent(name) {
        return css3EventPrefix ? css3EventPrefix + name : name.toLowerCase();
    }

    function normalizeCssProperty(name) {
        return cssProps[name] || name;
    }

    function normalizeStyleProperty(name) {
        return cssStyles[name] || name;
    }

    langx.mixin(browser, {
        css3PropPrefix: css3PropPrefix,

        isIE : !!/msie/i.exec( window.navigator.userAgent ),

        normalizeStyleProperty: normalizeStyleProperty,

        normalizeCssProperty: normalizeCssProperty,

        normalizeCssEvent: normalizeCssEvent,

        matchesSelector: matchesSelector,

        requestFullScreen : requestFullScreen,

        exitFullscreen : requestFullScreen,

        location: function() {
            return window.location;
        },

        support : {

        }

    });

    if  (transEndEventName) {
        browser.support.transition = {
            end : transEndEventName
        };
    }

    testEl = null;

    return skylark.attach("domx.browser",browser);
});

define('skylark-domx-browser/main',[
	"./browser"
],function(browser){
	return browser;
});
define('skylark-domx-browser', ['skylark-domx-browser/main'], function (main) { return main; });

define('skylark-domx-noder/noder',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser"
], function(skylark, langx, browser) {
    var isIE = !!navigator.userAgent.match(/Trident/g) || !!navigator.userAgent.match(/MSIE/g),
        fragmentRE = /^\s*<(\w+|!)[^>]*>/,
        singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
        div = document.createElement("div"),
        table = document.createElement('table'),
        tableBody = document.createElement('tbody'),
        tableRow = document.createElement('tr'),
        containers = {
            'tr': tableBody,
            'tbody': table,
            'thead': table,
            'tfoot': table,
            'td': tableRow,
            'th': tableRow,
            '*': div
        },
        rootNodeRE = /^(?:body|html)$/i,
        map = Array.prototype.map,
        slice = Array.prototype.slice;

    function ensureNodes(nodes, copyByClone) {
        if (!langx.isArrayLike(nodes)) {
            nodes = [nodes];
        }
        if (copyByClone) {
            nodes = map.call(nodes, function(node) {
                return node.cloneNode(true);
            });
        }
        return langx.flatten(nodes);
    }

    function nodeName(elm, chkName) {
        var name = elm.nodeName && elm.nodeName.toLowerCase();
        if (chkName !== undefined) {
            return name === chkName.toLowerCase();
        }
        return name;
    };


    function activeElement(doc) {
        doc = doc || document;
        var el;

        // Support: IE 9 only
        // IE9 throws an "Unspecified error" accessing document.activeElement from an <iframe>
        try {
            el = doc.activeElement;
        } catch ( error ) {
            el = doc.body;
        }

        // Support: IE 9 - 11 only
        // IE may return null instead of an element
        // Interestingly, this only seems to occur when NOT in an iframe
        if ( !el ) {
            el = doc.body;
        }

        // Support: IE 11 only
        // IE11 returns a seemingly empty object in some cases when accessing
        // document.activeElement from an <iframe>
        if ( !el.nodeName ) {
            el = doc.body;
        }

        return el;
    };

    function enhancePlaceContent(placing,node) {
        if (langx.isFunction(placing)) {
            return placing.apply(node,[]);
        }
        if (langx.isArrayLike(placing)) {
            var neddsFlattern;
            for (var i=0;i<placing.length;i++) {
                if (langx.isFunction(placing[i])) {
                    placing[i] = placing[i].apply(node,[]);
                    if (langx.isArrayLike(placing[i])) {
                        neddsFlattern = true;
                    }
                }
            }
            if (neddsFlattern) {
                placing = langx.flatten(placing);
            }
        }
        return placing;
    }
    function after(node, placing, copyByClone) {
        placing = enhancePlaceContent(placing,node);
        var refNode = node,
            parent = refNode.parentNode;
        if (parent) {
            var nodes = ensureNodes(placing, copyByClone),
                refNode = refNode.nextSibling;

            for (var i = 0; i < nodes.length; i++) {
                if (refNode) {
                    parent.insertBefore(nodes[i], refNode);
                } else {
                    parent.appendChild(nodes[i]);
                }
            }
        }
        return this;
    }

    function append(node, placing, copyByClone) {
        placing = enhancePlaceContent(placing,node);
        var parentNode = node,
            nodes = ensureNodes(placing, copyByClone);
        for (var i = 0; i < nodes.length; i++) {
            parentNode.appendChild(nodes[i]);
        }
        return this;
    }

    function before(node, placing, copyByClone) {
        placing = enhancePlaceContent(placing,node);
        var refNode = node,
            parent = refNode.parentNode;
        if (parent) {
            var nodes = ensureNodes(placing, copyByClone);
            for (var i = 0; i < nodes.length; i++) {
                parent.insertBefore(nodes[i], refNode);
            }
        }
        return this;
    }
    /*   
     * Get the children of the specified node, including text and comment nodes.
     * @param {HTMLElement} elm
     */
    function contents(elm) {
        if (nodeName(elm, "iframe")) {
            return elm.contentDocument;
        }
        return elm.childNodes;
    }

    /*   
     * Create a element and set attributes on it.
     * @param {HTMLElement} tag
     * @param {props} props
     * @param } parent
     */
    function createElement(tag, props, parent) {
        var node = document.createElement(tag);
        if (props) {
            for (var name in props) {
                node.setAttribute(name, props[name]);
            }
        }
        if (parent) {
            append(parent, node);
        }
        return node;
    }

    /*   
     * Create a DocumentFragment from the HTML fragment.
     * @param {String} html
     */
    function createFragment(html) {
        // A special case optimization for a single tag
        html = langx.trim(html);
        if (singleTagRE.test(html)) {
            return [createElement(RegExp.$1)];
        }

        var name = fragmentRE.test(html) && RegExp.$1
        if (!(name in containers)) {
            name = "*"
        }
        var container = containers[name];
        container.innerHTML = "" + html;
        dom = slice.call(container.childNodes);

        dom.forEach(function(node) {
            container.removeChild(node);
        })

        return dom;
    }

    /*   
     * Create a deep copy of the set of matched elements.
     * @param {HTMLElement} node
     * @param {Boolean} deep
     */
    function clone(node, deep) {
        var self = this,
            clone;

        // TODO: Add feature detection here in the future
        if (!isIE || node.nodeType !== 1 || deep) {
            return node.cloneNode(deep);
        }

        // Make a HTML5 safe shallow copy
        if (!deep) {
            clone = document.createElement(node.nodeName);

            // Copy attribs
            each(self.getAttribs(node), function(attr) {
                self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));
            });

            return clone;
        }
    }

    /*   
     * Check to see if a dom node is a descendant of another dom node .
     * @param {String} node
     * @param {Node} child
     */
    function contains(node, child) {
        return isChildOf(child, node);
    }

    /*   
     * Create a new Text node.
     * @param {String} text
     * @param {Node} child
     */
    function createTextNode(text) {
        return document.createTextNode(text);
    }

    /*   
     * Get the current document object.
     */
    function doc() {
        return document;
    }

    /*   
     * Remove all child nodes of the set of matched elements from the DOM.
     * @param {Object} node
     */
    function empty(node) {
        while (node.hasChildNodes()) {
            var child = node.firstChild;
            node.removeChild(child);
        }
        return this;
    }

    var fulledEl = null;

    function fullScreen(el) {
        if (el === false) {
            browser.exitFullScreen.apply(document);
        } else if (el) {
            browser.requestFullScreen.apply(el);
            fulledEl = el;
        } else {
            return (
                document.fullscreenElement ||
                document.webkitFullscreenElement ||
                document.mozFullScreenElement ||
                document.msFullscreenElement
            )
        }
    }


    // Selectors
    function focusable( element, hasTabindex ) {
        var map, mapName, img, focusableIfVisible, fieldset,
            nodeName = element.nodeName.toLowerCase();

        if ( "area" === nodeName ) {
            map = element.parentNode;
            mapName = map.name;
            if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
                return false;
            }
            img = $( "img[usemap='#" + mapName + "']" );
            return img.length > 0 && img.is( ":visible" );
        }

        if ( /^(input|select|textarea|button|object)$/.test( nodeName ) ) {
            focusableIfVisible = !element.disabled;

            if ( focusableIfVisible ) {

                // Form controls within a disabled fieldset are disabled.
                // However, controls within the fieldset's legend do not get disabled.
                // Since controls generally aren't placed inside legends, we skip
                // this portion of the check.
                fieldset = $( element ).closest( "fieldset" )[ 0 ];
                if ( fieldset ) {
                    focusableIfVisible = !fieldset.disabled;
                }
            }
        } else if ( "a" === nodeName ) {
            focusableIfVisible = element.href || hasTabindex;
        } else {
            focusableIfVisible = hasTabindex;
        }

        return focusableIfVisible && $( element ).is( ":visible" ) && visible( $( element ) );
    };


   var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
 
    /*   
     * Get the HTML contents of the first element in the set of matched elements.
     * @param {HTMLElement} node
     * @param {String} html
     */
    function html(node, html) {
        if (html === undefined) {
            return node.innerHTML;
        } else {
            this.empty(node);
            html = html || "";
            if (langx.isString(html)) {
                html = html.replace( rxhtmlTag, "<$1></$2>" );
            }
            if (langx.isString(html) || langx.isNumber(html)) {               
                node.innerHTML = html;
            } else if (langx.isArrayLike(html)) {
                for (var i = 0; i < html.length; i++) {
                    node.appendChild(html[i]);
                }
            } else {
                node.appendChild(html);
            }

            return this;
        }
    }


    /*   
     * Check to see if a dom node is a descendant of another dom node.
     * @param {Node} node
     * @param {Node} parent
     * @param {Node} directly
     */
    function isChildOf(node, parent, directly) {
        if (directly) {
            return node.parentNode === parent;
        }
        if (document.documentElement.contains) {
            return parent.contains(node);
        }
        while (node) {
            if (parent === node) {
                return true;
            }

            node = node.parentNode;
        }

        return false;
    }

    /*   
     * Check to see if a dom node is a document.
     * @param {Node} node
     */
    function isDocument(node) {
        return node != null && node.nodeType == node.DOCUMENT_NODE
    }

    /*   
     * Check to see if a dom node is in the document
     * @param {Node} node
     */
    function isInDocument(node) {
      return (node === document.body) ? true : document.body.contains(node);
    }        

    var blockNodes = ["div", "p", "ul", "ol", "li", "blockquote", "hr", "pre", "h1", "h2", "h3", "h4", "h5", "table"];

    function isBlockNode(node) {
        if (!node || node.nodeType === 3) {
          return false;
        }
        return new RegExp("^(" + (blockNodes.join('|')) + ")$").test(node.nodeName.toLowerCase());
    }


    /*   
     * Get the owner document object for the specified element.
     * @param {Node} elm
     */
    function ownerDoc(elm) {
        if (!elm) {
            return document;
        }

        if (elm.nodeType == 9) {
            return elm;
        }

        return elm.ownerDocument;
    }

    /*   
     *
     * @param {Node} elm
     */
    function ownerWindow(elm) {
        var doc = ownerDoc(elm);
        return doc.defaultView || doc.parentWindow;
    }

    /*   
     * insert one or more nodes as the first children of the specified node.
     * @param {Node} node
     * @param {Node or ArrayLike} placing
     * @param {Boolean Optional} copyByClone
     */
    function prepend(node, placing, copyByClone) {
        var parentNode = node,
            refNode = parentNode.firstChild,
            nodes = ensureNodes(placing, copyByClone);
        for (var i = 0; i < nodes.length; i++) {
            if (refNode) {
                parentNode.insertBefore(nodes[i], refNode);
            } else {
                parentNode.appendChild(nodes[i]);
            }
        }
        return this;
    }

    /*   
     *
     * @param {Node} elm
     */
    function offsetParent(elm) {
        var parent = elm.offsetParent || document.body;
        while (parent && !rootNodeRE.test(parent.nodeName) && document.defaultView.getComputedStyle(parent).position == "static") {
            parent = parent.offsetParent;
        }
        return parent;
    }

    /*   
     * Remove the set of matched elements from the DOM.
     * @param {Node} node
     */
    function remove(node) {
        if (node && node.parentNode) {
            try {
                node.parentNode.removeChild(node);
            } catch (e) {
                console.warn("The node is already removed", e);
            }
        }
        return this;
    }

    function removeChild(node,children) {
        if (!langx.isArrayLike(children)) {
            children = [children];
        }
        for (var i=0;i<children.length;i++) {
            node.removeChild(children[i]);
        }

        return this;
    }

    function scrollParent( elm, includeHidden ) {
        var position = document.defaultView.getComputedStyle(elm).position,
            excludeStaticParent = position === "absolute",
            overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
            scrollParent = this.parents().filter( function() {
                var parent = $( this );
                if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
                    return false;
                }
                return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
                    parent.css( "overflow-x" ) );
            } ).eq( 0 );

        return position === "fixed" || !scrollParent.length ?
            $( this[ 0 ].ownerDocument || document ) :
            scrollParent;
    };


    function reflow(elm) {
        if (el == null) {
          elm = document;
        }
        elm.offsetHeight;

        return this;      
    }

    /*   
     * Replace an old node with the specified node.
     * @param {Node} node
     * @param {Node} oldNode
     */
    function replace(node, oldNode) {
        oldNode.parentNode.replaceChild(node, oldNode);
        return this;
    }


    /*   
     * traverse the specified node and its descendants, perform the callback function on each
     * @param {Node} node
     * @param {Function} fn
     */
    function traverse(node, fn) {
        fn(node)
        for (var i = 0, len = node.childNodes.length; i < len; i++) {
            traverse(node.childNodes[i], fn);
        }
        return this;
    }

    /*   
     *
     * @param {Node} node
     */
    function reverse(node) {
        var firstChild = node.firstChild;
        for (var i = node.children.length - 1; i > 0; i--) {
            if (i > 0) {
                var child = node.children[i];
                node.insertBefore(child, firstChild);
            }
        }
    }

    /*   
     * Wrap an HTML structure around each element in the set of matched elements.
     * @param {Node} node
     * @param {Node} wrapperNode
     */
    function wrapper(node, wrapperNode) {
        if (langx.isString(wrapperNode)) {
            wrapperNode = this.createFragment(wrapperNode).firstChild;
        }
        node.parentNode.insertBefore(wrapperNode, node);
        wrapperNode.appendChild(node);
    }

    /*   
     * Wrap an HTML structure around the content of each element in the set of matched
     * @param {Node} node
     * @param {Node} wrapperNode
     */
    function wrapperInner(node, wrapperNode) {
        var childNodes = slice.call(node.childNodes);
        node.appendChild(wrapperNode);
        for (var i = 0; i < childNodes.length; i++) {
            wrapperNode.appendChild(childNodes[i]);
        }
        return this;
    }

    /*   
     * Remove the parents of the set of matched elements from the DOM, leaving the matched
     * @param {Node} node
     */
    function unwrap(node) {
        var child, parent = node.parentNode;
        if (parent) {
            if (this.isDoc(parent.parentNode)) return;
            parent.parentNode.insertBefore(node, parent);
        }
    }

    function noder() {
        return noder;
    }

    langx.mixin(noder, {
        active  : activeElement,

        blur : function(el) {
            el.blur();
        },

        body: function() {
            return document.body;
        },

        clone: clone,
        contents: contents,

        createElement: createElement,

        createFragment: createFragment,

        contains: contains,

        createTextNode: createTextNode,

        doc: doc,

        empty: empty,

        fullScreen: fullScreen,

        focusable: focusable,

        html: html,

        isChildOf: isChildOf,

        isDocument: isDocument,

        isInDocument: isInDocument,

        isWindow: langx.isWindow,

        nodeName : nodeName,

        offsetParent: offsetParent,

        ownerDoc: ownerDoc,

        ownerWindow: ownerWindow,

        after: after,

        before: before,

        prepend: prepend,

        append: append,

        reflow: reflow,

        remove: remove,

        removeChild : removeChild,

        replace: replace,

        traverse: traverse,

        reverse: reverse,

        wrapper: wrapper,

        wrapperInner: wrapperInner,

        unwrap: unwrap
    });

    return skylark.attach("domx.noder" , noder);
});
define('skylark-domx-noder/main',[
	"./noder"
],function(noder){
	return noder;
});
define('skylark-domx-noder', ['skylark-domx-noder/main'], function (main) { return main; });

define('skylark-domx-finder/finder',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-noder"
], function(skylark, langx, browser, noder) {
    var local = {},
        filter = Array.prototype.filter,
        slice = Array.prototype.slice,
        nativeMatchesSelector = browser.matchesSelector;

    /*
    ---
    name: Slick.Parser
    description: Standalone CSS3 Selector parser
    provides: Slick.Parser
    ...
    */
    ;
    (function() {

        var parsed,
            separatorIndex,
            combinatorIndex,
            reversed,
            cache = {},
            reverseCache = {},
            reUnescape = /\\/g;

        var parse = function(expression, isReversed) {
            if (expression == null) return null;
            if (expression.Slick === true) return expression;
            expression = ('' + expression).replace(/^\s+|\s+$/g, '');
            reversed = !!isReversed;
            var currentCache = (reversed) ? reverseCache : cache;
            if (currentCache[expression]) return currentCache[expression];
            parsed = {
                Slick: true,
                expressions: [],
                raw: expression,
                reverse: function() {
                    return parse(this.raw, true);
                }
            };
            separatorIndex = -1;
            while (expression != (expression = expression.replace(regexp, parser)));
            parsed.length = parsed.expressions.length;
            return currentCache[parsed.raw] = (reversed) ? reverse(parsed) : parsed;
        };

        var reverseCombinator = function(combinator) {
            if (combinator === '!') return ' ';
            else if (combinator === ' ') return '!';
            else if ((/^!/).test(combinator)) return combinator.replace(/^!/, '');
            else return '!' + combinator;
        };

        var reverse = function(expression) {
            var expressions = expression.expressions;
            for (var i = 0; i < expressions.length; i++) {
                var exp = expressions[i];
                var last = {
                    parts: [],
                    tag: '*',
                    combinator: reverseCombinator(exp[0].combinator)
                };

                for (var j = 0; j < exp.length; j++) {
                    var cexp = exp[j];
                    if (!cexp.reverseCombinator) cexp.reverseCombinator = ' ';
                    cexp.combinator = cexp.reverseCombinator;
                    delete cexp.reverseCombinator;
                }

                exp.reverse().push(last);
            }
            return expression;
        };

        var escapeRegExp = (function() {
            // Credit: XRegExp 0.6.1 (c) 2007-2008 Steven Levithan <http://stevenlevithan.com/regex/xregexp/> MIT License
            var from = /(?=[\-\[\]{}()*+?.\\\^$|,#\s])/g,
                to = '\\';
            return function(string) {
                return string.replace(from, to)
            }
        }())

        var regexp = new RegExp(
            "^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:([\"']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:([\"'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)"
            .replace(/<combinator>/, '[' + escapeRegExp(">+~`!@$%^&={}\\;</") + ']')
            .replace(/<unicode>/g, '(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])')
            .replace(/<unicode1>/g, '(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])')
        );

        function parser(
            rawMatch,

            separator,
            combinator,
            combinatorChildren,

            tagName,
            id,
            className,

            attributeKey,
            attributeOperator,
            attributeQuote,
            attributeValue,

            pseudoMarker,
            pseudoClass,
            pseudoQuote,
            pseudoClassQuotedValue,
            pseudoClassValue
        ) {
            if (separator || separatorIndex === -1) {
                parsed.expressions[++separatorIndex] = [];
                combinatorIndex = -1;
                if (separator) return '';
            }

            if (combinator || combinatorChildren || combinatorIndex === -1) {
                combinator = combinator || ' ';
                var currentSeparator = parsed.expressions[separatorIndex];
                if (reversed && currentSeparator[combinatorIndex])
                    currentSeparator[combinatorIndex].reverseCombinator = reverseCombinator(combinator);
                currentSeparator[++combinatorIndex] = {
                    combinator: combinator,
                    tag: '*'
                };
            }

            var currentParsed = parsed.expressions[separatorIndex][combinatorIndex];

            if (tagName) {
                currentParsed.tag = tagName.replace(reUnescape, '');

            } else if (id) {
                currentParsed.id = id.replace(reUnescape, '');

            } else if (className) {
                className = className.replace(reUnescape, '');

                if (!currentParsed.classList) currentParsed.classList = [];
                if (!currentParsed.classes) currentParsed.classes = [];
                currentParsed.classList.push(className);
                currentParsed.classes.push({
                    value: className,
                    regexp: new RegExp('(^|\\s)' + escapeRegExp(className) + '(\\s|$)')
                });

            } else if (pseudoClass) {
                pseudoClassValue = pseudoClassValue || pseudoClassQuotedValue;
                pseudoClassValue = pseudoClassValue ? pseudoClassValue.replace(reUnescape, '') : null;

                if (!currentParsed.pseudos) currentParsed.pseudos = [];
                currentParsed.pseudos.push({
                    key: pseudoClass.replace(reUnescape, ''),
                    value: pseudoClassValue,
                    type: pseudoMarker.length == 1 ? 'class' : 'element'
                });

            } else if (attributeKey) {
                attributeKey = attributeKey.replace(reUnescape, '');
                attributeValue = (attributeValue || '').replace(reUnescape, '');

                var test, regexp;

                switch (attributeOperator) {
                    case '^=':
                        regexp = new RegExp('^' + escapeRegExp(attributeValue));
                        break;
                    case '$=':
                        regexp = new RegExp(escapeRegExp(attributeValue) + '$');
                        break;
                    case '~=':
                        regexp = new RegExp('(^|\\s)' + escapeRegExp(attributeValue) + '(\\s|$)');
                        break;
                    case '|=':
                        regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');
                        break;
                    case '=':
                        test = function(value) {
                            return attributeValue == value;
                        };
                        break;
                    case '*=':
                        test = function(value) {
                            return value && value.indexOf(attributeValue) > -1;
                        };
                        break;
                    case '!=':
                        test = function(value) {
                            return attributeValue != value;
                        };
                        break;
                    default:
                        test = function(value) {
                            return !!value;
                        };
                }

                if (attributeValue == '' && (/^[*$^]=$/).test(attributeOperator)) test = function() {
                    return false;
                };

                if (!test) test = function(value) {
                    return value && regexp.test(value);
                };

                if (!currentParsed.attributes) currentParsed.attributes = [];
                currentParsed.attributes.push({
                    key: attributeKey,
                    operator: attributeOperator,
                    value: attributeValue,
                    test: test
                });

            }

            return '';
        };

        // Slick NS

        var Slick = (this.Slick || {});

        Slick.parse = function(expression) {
            return parse(expression);
        };

        Slick.escapeRegExp = escapeRegExp;

        if (!this.Slick) this.Slick = Slick;

    }).apply(local);


    var simpleClassSelectorRE = /^\.([\w-]*)$/,
        simpleIdSelectorRE = /^#([\w-]*)$/,
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        slice = Array.prototype.slice;


    local.parseSelector = local.Slick.parse;


    var pseudos = local.pseudos = {
        // custom pseudos
        "button": function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === "button" || name === "button";
        },

        'checked': function(elm) {
            return !!elm.checked;
        },

        'contains': function(elm, idx, nodes, text) {
            if ($(this).text().indexOf(text) > -1) return this
        },

        'disabled': function(elm) {
            return !!elm.disabled;
        },

        'enabled': function(elm) {
            return !elm.disabled;
        },

        'eq': function(elm, idx, nodes, value) {
            return (idx == value);
        },

        'even': function(elm, idx, nodes, value) {
            return (idx % 2) === 0;
        },

        'focus': function(elm) {
            return document.activeElement === elm && (elm.href || elm.type || elm.tabindex);
        },

        'focusable': function( elm ) {
            return noder.focusable(elm, elm.tabindex != null );
        },

        'first': function(elm, idx) {
            return (idx === 0);
        },

        'gt': function(elm, idx, nodes, value) {
            return (idx > value);
        },

        'has': function(elm, idx, nodes, sel) {
            return find(elm, sel);
        },

        // Element/input types
        "header": function(elem) {
            return rheader.test(elem.nodeName);
        },

        'hidden': function(elm) {
            return !local.pseudos["visible"](elm);
        },

        "input": function(elem) {
            return rinputs.test(elem.nodeName);
        },

        'last': function(elm, idx, nodes) {
            return (idx === nodes.length - 1);
        },

        'lt': function(elm, idx, nodes, value) {
            return (idx < value);
        },

        'not': function(elm, idx, nodes, sel) {
            return !matches(elm, sel);
        },

        'odd': function(elm, idx, nodes, value) {
            return (idx % 2) === 1;
        },

        /*   
         * Get the parent of each element in the current set of matched elements.
         * @param {Object} elm
         */
        'parent': function(elm) {
            return !!elm.parentNode;
        },

        'selected': function(elm) {
            return !!elm.selected;
        },

        'tabbable': function(elm) {
            var tabIndex = elm.tabindex,
                hasTabindex = tabIndex != null;
            return ( !hasTabindex || tabIndex >= 0 ) && noder.focusable( element, hasTabindex );
        },

        'text': function(elm) {
            return elm.type === "text";
        },

        'visible': function(elm) {
            return elm.offsetWidth && elm.offsetWidth
        },
        'empty': function(elm) {
            return !elm.hasChildNodes();
        }
    };

    ["first", "eq", "last"].forEach(function(item) {
        pseudos[item].isArrayFilter = true;
    });



    pseudos["nth"] = pseudos["eq"];

    function createInputPseudo(type) {
        return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return name === "input" && elem.type === type;
        };
    }

    function createButtonPseudo(type) {
        return function(elem) {
            var name = elem.nodeName.toLowerCase();
            return (name === "input" || name === "button") && elem.type === type;
        };
    }

    // Add button/input type pseudos
    for (i in {
        radio: true,
        checkbox: true,
        file: true,
        password: true,
        image: true
    }) {
        pseudos[i] = createInputPseudo(i);
    }
    for (i in {
        submit: true,
        reset: true
    }) {
        pseudos[i] = createButtonPseudo(i);
    }


    local.divide = function(cond) {
        var nativeSelector = "",
            customPseudos = [],
            tag,
            id,
            classes,
            attributes,
            pseudos;


        if (id = cond.id) {
            nativeSelector += ("#" + id);
        }
        if (classes = cond.classes) {
            for (var i = classes.length; i--;) {
                nativeSelector += ("." + classes[i].value);
            }
        }
        if (attributes = cond.attributes) {
            for (var i = 0; i < attributes.length; i++) {
                if (attributes[i].operator) {
                    nativeSelector += ("[" + attributes[i].key + attributes[i].operator + JSON.stringify(attributes[i].value) + "]");
                } else {
                    nativeSelector += ("[" + attributes[i].key + "]");
                }
            }
        }
        if (pseudos = cond.pseudos) {
            for (i = pseudos.length; i--;) {
                part = pseudos[i];
                if (this.pseudos[part.key]) {
                    customPseudos.push(part);
                } else {
                    if (part.value !== undefined) {
                        nativeSelector += (":" + part.key + "(" + JSON.stringify(part))
                    }
                }
            }
        }

        if (tag = cond.tag) {
            if (tag !== "*") {
                nativeSelector = tag.toUpperCase() + nativeSelector;
            }
        }

        if (!nativeSelector) {
            nativeSelector = "*";
        }

        return {
            nativeSelector: nativeSelector,
            customPseudos: customPseudos
        }

    };

    local.check = function(node, cond, idx, nodes, arrayFilte) {
        var tag,
            id,
            classes,
            attributes,
            pseudos,

            i, part, cls, pseudo;

        if (!arrayFilte) {
            if (tag = cond.tag) {
                var nodeName = node.nodeName.toUpperCase();
                if (tag == '*') {
                    if (nodeName < '@') return false; // Fix for comment nodes and closed nodes
                } else {
                    if (nodeName != (tag || "").toUpperCase()) return false;
                }
            }

            if (id = cond.id) {
                if (node.getAttribute('id') != id) {
                    return false;
                }
            }


            if (classes = cond.classes) {
                for (i = classes.length; i--;) {
                    cls = node.getAttribute('class');
                    if (!(cls && classes[i].regexp.test(cls))) return false;
                }
            }

            if (attributes = cond.attributes) {
                for (i = attributes.length; i--;) {
                    part = attributes[i];
                    if (part.operator ? !part.test(node.getAttribute(part.key)) : !node.hasAttribute(part.key)) return false;
                }
            }

        }
        if (pseudos = cond.pseudos) {
            for (i = pseudos.length; i--;) {
                part = pseudos[i];
                if (pseudo = this.pseudos[part.key]) {
                    if ((arrayFilte && pseudo.isArrayFilter) || (!arrayFilte && !pseudo.isArrayFilter)) {
                        if (!pseudo(node, idx, nodes, part.value)) {
                            return false;
                        }
                    }
                } else {
                    if (!arrayFilte && !nativeMatchesSelector.call(node, part.key)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    local.match = function(node, selector) {

        var parsed;

        if (langx.isString(selector)) {
            parsed = local.Slick.parse(selector);
        } else {
            parsed = selector;
        }

        if (!parsed) {
            return true;
        }

        // simple (single) selectors
        var expressions = parsed.expressions,
            simpleExpCounter = 0,
            i,
            currentExpression;
        for (i = 0;
            (currentExpression = expressions[i]); i++) {
            if (currentExpression.length == 1) {
                var exp = currentExpression[0];
                if (this.check(node, exp)) {
                    return true;
                }
                simpleExpCounter++;
            }
        }

        if (simpleExpCounter == parsed.length) {
            return false;
        }

        var nodes = this.query(document, parsed),
            item;
        for (i = 0; item = nodes[i++];) {
            if (item === node) {
                return true;
            }
        }
        return false;
    };


    local.filterSingle = function(nodes, exp) {
        var matchs = filter.call(nodes, function(node, idx) {
            return local.check(node, exp, idx, nodes, false);
        });

        matchs = filter.call(matchs, function(node, idx) {
            return local.check(node, exp, idx, matchs, true);
        });
        return matchs;
    };

    local.filter = function(nodes, selector) {
        var parsed;

        if (langx.isString(selector)) {
            parsed = local.Slick.parse(selector);
        } else {
            return local.filterSingle(nodes, selector);
        }

        // simple (single) selectors
        var expressions = parsed.expressions,
            i,
            currentExpression,
            ret = [];
        for (i = 0;
            (currentExpression = expressions[i]); i++) {
            if (currentExpression.length == 1) {
                var exp = currentExpression[0];

                var matchs = local.filterSingle(nodes, exp);

                ret = langx.uniq(ret.concat(matchs));
            } else {
                throw new Error("not supported selector:" + selector);
            }
        }

        return ret;

    };

    local.combine = function(elm, bit) {
        var op = bit.combinator,
            cond = bit,
            node1,
            nodes = [];

        switch (op) {
            case '>': // direct children
                nodes = children(elm, cond);
                break;
            case '+': // next sibling
                node1 = nextSibling(elm, cond, true);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '^': // first child
                node1 = firstChild(elm, cond, true);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '~': // next siblings
                nodes = nextSiblings(elm, cond);
                break;
            case '++': // next sibling and previous sibling
                var prev = previousSibling(elm, cond, true),
                    next = nextSibling(elm, cond, true);
                if (prev) {
                    nodes.push(prev);
                }
                if (next) {
                    nodes.push(next);
                }
                break;
            case '~~': // next siblings and previous siblings
                nodes = siblings(elm, cond);
                break;
            case '!': // all parent nodes up to document
                nodes = ancestors(elm, cond);
                break;
            case '!>': // direct parent (one level)
                node1 = parent(elm, cond);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '!+': // previous sibling
                nodes = previousSibling(elm, cond, true);
                break;
            case '!^': // last child
                node1 = lastChild(elm, cond, true);
                if (node1) {
                    nodes.push(node1);
                }
                break;
            case '!~': // previous siblings
                nodes = previousSiblings(elm, cond);
                break;
            default:
                var divided = this.divide(bit);
                nodes = slice.call(elm.querySelectorAll(divided.nativeSelector));
                if (divided.customPseudos) {
                    for (var i = divided.customPseudos.length - 1; i >= 0; i--) {
                        nodes = filter.call(nodes, function(item, idx) {
                            return local.check(item, {
                                pseudos: [divided.customPseudos[i]]
                            }, idx, nodes, false)
                        });

                        nodes = filter.call(nodes, function(item, idx) {
                            return local.check(item, {
                                pseudos: [divided.customPseudos[i]]
                            }, idx, nodes, true)
                        });
                    }
                }
                break;

        }
        return nodes;
    }

    local.query = function(node, selector, single) {


        var parsed = this.Slick.parse(selector);

        var
            founds = [],
            currentExpression, currentBit,
            expressions = parsed.expressions;

        for (var i = 0;
            (currentExpression = expressions[i]); i++) {
            var currentItems = [node],
                found;
            for (var j = 0;
                (currentBit = currentExpression[j]); j++) {
                found = langx.map(currentItems, function(item, i) {
                    return local.combine(item, currentBit)
                });
                if (found) {
                    currentItems = found;
                }
            }
            if (found) {
                founds = founds.concat(found);
            }
        }

        return founds;
    }

    /*
     * Get the nearest ancestor of the specified element,optional matched by a selector.
     * @param {HTMLElement} node
     * @param {String Optional } selector
     * @param {Object} root
     */
    function ancestor(node, selector, root) {
        var rootIsSelector = root && langx.isString(root);
        while (node = node.parentNode) {
            if (matches(node, selector)) {
                return node;
            }
            if (root) {
                if (rootIsSelector) {
                    if (matches(node, root)) {
                        break;
                    }
                } else if (node == root) {
                    break;
                }
            }
        }
        return null;
    }

    /*
     * Get the ancestors of the specitied element , optionally filtered by a selector.
     * @param {HTMLElement} node
     * @param {String Optional } selector
     * @param {Object} root
     */
    function ancestors(node, selector, root) {
        var ret = [],
            rootIsSelector = root && langx.isString(root);
        while ((node = node.parentNode) && (node.nodeType !== 9)) {
            if (root) {
                if (rootIsSelector) {
                    if (matches(node, root)) {
                        break;
                    }
                } else if (langx.isArrayLike(root)) {
                    if (langx.inArray(node,root)>-1) {
                        break;
                    }
                } else if (node == root) {
                    break;
                }
            }
            ret.push(node); // TODO
        }

        if (selector) {
            ret = local.filter(ret, selector);
        }
        return ret;
    }

    /*
     * Returns a element by its ID.
     * @param {string} id
     */
    function byId(id, doc) {
        doc = doc || noder.doc();
        return doc.getElementById(id);
    }

    /*
     * Get the children of the specified element , optionally filtered by a selector.
     * @param {string} node
     * @param {String optionlly} selector
     */
    function children(node, selector) {
        var childNodes = node.childNodes,
            ret = [];
        for (var i = 0; i < childNodes.length; i++) {
            var node = childNodes[i];
            if (node.nodeType == 1) {
                ret.push(node);
            }
        }
        if (selector) {
            ret = local.filter(ret, selector);
        }
        return ret;
    }

    function closest(node, selector) {
        while (node && !(matches(node, selector))) {
            node = node.parentNode;
        }

        return node;
    }

    /*
     * Get the decendant of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function descendants(elm, selector) {
        // Selector
        try {
            return slice.call(elm.querySelectorAll(selector));
        } catch (matchError) {
            //console.log(matchError);
        }
        return local.query(elm, selector);
    }

    /*
     * Get the nearest decendent of the specified element,optional matched by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function descendant(elm, selector) {
        // Selector
        try {
            return elm.querySelector(selector);
        } catch (matchError) {
            //console.log(matchError);
        }
        var nodes = local.query(elm, selector);
        if (nodes.length > 0) {
            return nodes[0];
        } else {
            return null;
        }
    }

    /*
     * Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function find(elm, selector) {
        if (!selector) {
            selector = elm;
            elm = document.body;
        }
        if (matches(elm, selector)) {
            return elm;
        } else {
            return descendant(elm, selector);
        }
    }

    /*
     * Get the findAll of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function findAll(elm, selector) {
        if (!selector) {
            selector = elm;
            elm = document.body;
        }
        return descendants(elm, selector);
    }

    /*
     * Get the first child of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {String} first
     */
    function firstChild(elm, selector, first) {
        var childNodes = elm.childNodes,
            node = childNodes[0];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (first) {
                    break;
                }
            }
            node = node.nextSibling;
        }

        return null;
    }

    /*
     * Get the last child of the specified element , optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {String } last
     */
    function lastChild(elm, selector, last) {
        var childNodes = elm.childNodes,
            node = childNodes[childNodes.length - 1];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (last) {
                    break;
                }
            }
            node = node.previousSibling;
        }

        return null;
    }

    /*
     * Check the specified element against a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function matches(elm, selector) {
        if (!selector || !elm || elm.nodeType !== 1) {
            return false
        }

        if (langx.isString(selector)) {
            try {
                return nativeMatchesSelector.call(elm, selector.replace(/\[([^=]+)=\s*([^'"\]]+?)\s*\]/g, '[$1="$2"]'));
            } catch (matchError) {
                //console.log(matchError);
            }
            return local.match(elm, selector);
        } else if (langx.isArrayLike(selector)) {
            return langx.inArray(elm, selector) > -1;
        } else if (langx.isPlainObject(selector)) {
            return local.check(elm, selector);
        } else {
            return elm === selector;
        }

    }

    /*
     * Get the nearest next sibing of the specitied element , optional matched by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {Boolean Optional} adjacent
     */
    function nextSibling(elm, selector, adjacent) {
        var node = elm.nextSibling;
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (adjacent) {
                    break;
                }
            }
            node = node.nextSibling;
        }
        return null;
    }

    /*
     * Get the next siblings of the specified element , optional filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function nextSiblings(elm, selector) {
        var node = elm.nextSibling,
            ret = [];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    ret.push(node);
                }
            }
            node = node.nextSibling;
        }
        return ret;
    }

    /*
     * Get the parent element of the specified element. if a selector is provided, it retrieves the parent element only if it matches that selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function parent(elm, selector) {
        var node = elm.parentNode;
        if (node && (!selector || matches(node, selector))) {
            return node;
        }

        return null;
    }

    /*
     * Get hte nearest previous sibling of the specified element ,optional matched by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     * @param {Boolean Optional } adjacent
     */
    function previousSibling(elm, selector, adjacent) {
        var node = elm.previousSibling;
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    return node;
                }
                if (adjacent) {
                    break;
                }
            }
            node = node.previousSibling;
        }
        return null;
    }

    /*
     * Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function previousSiblings(elm, selector) {
        var node = elm.previousSibling,
            ret = [];
        while (node) {
            if (node.nodeType == 1) {
                if (!selector || matches(node, selector)) {
                    ret.push(node);
                }
            }
            node = node.previousSibling;
        }
        return ret;
    }

    /*
     * Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector.
     * @param {HTMLElement} elm
     * @param {String optionlly} selector
     */
    function siblings(elm, selector) {
        var node = elm.parentNode.firstChild,
            ret = [];
        while (node) {
            if (node.nodeType == 1 && node !== elm) {
                if (!selector || matches(node, selector)) {
                    ret.push(node);
                }
            }
            node = node.nextSibling;
        }
        return ret;
    }

    var finder = function() {
        return finder;
    };

    langx.mixin(finder, {

        ancestor: ancestor,

        ancestors: ancestors,

        byId: byId,

        children: children,

        closest: closest,

        descendant: descendant,

        descendants: descendants,

        find: find,

        findAll: findAll,

        firstChild: firstChild,

        lastChild: lastChild,

        matches: matches,

        nextSibling: nextSibling,

        nextSiblings: nextSiblings,

        parent: parent,

        previousSibling,

        previousSiblings,

        pseudos: local.pseudos,

        siblings: siblings
    });

    return skylark.attach("domx.finder", finder);
});
define('skylark-domx-finder/main',[
	"./finder"
],function(finder){

	return finder;
});
define('skylark-domx-finder', ['skylark-domx-finder/main'], function (main) { return main; });

define('skylark-domx-data/data',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-finder",
    "skylark-domx-noder"
], function(skylark, langx, finder,noder) {
    var map = Array.prototype.map,
        filter = Array.prototype.filter,
        camelCase = langx.camelCase,
        deserializeValue = langx.deserializeValue,

        capitalRE = /([A-Z])/g,
        propMap = {
            'tabindex': 'tabIndex',
            'readonly': 'readOnly',
            'for': 'htmlFor',
            'class': 'className',
            'maxlength': 'maxLength',
            'cellspacing': 'cellSpacing',
            'cellpadding': 'cellPadding',
            'rowspan': 'rowSpan',
            'colspan': 'colSpan',
            'usemap': 'useMap',
            'frameborder': 'frameBorder',
            'contenteditable': 'contentEditable'
        };

    // Strip and collapse whitespace according to HTML spec
    function stripAndCollapse( value ) {
      var tokens = value.match( /[^\x20\t\r\n\f]+/g ) || [];
      return tokens.join( " " );
    }


    var valHooks = {
      option: {
        get: function( elem ) {
          var val = elem.getAttribute( "value" );
          return val != null ?  val :  stripAndCollapse(text( elem ) );
        }
      },
      select: {
        get: function( elem ) {
          var value, option, i,
            options = elem.options,
            index = elem.selectedIndex,
            one = elem.type === "select-one",
            values = one ? null : [],
            max = one ? index + 1 : options.length;

          if ( index < 0 ) {
            i = max;

          } else {
            i = one ? index : 0;
          }

          // Loop through all the selected options
          for ( ; i < max; i++ ) {
            option = options[ i ];

            if ( option.selected &&

                // Don't return options that are disabled or in a disabled optgroup
                !option.disabled &&
                ( !option.parentNode.disabled ||
                  !noder.nodeName( option.parentNode, "optgroup" ) ) ) {

              // Get the specific value for the option
              value = val(option);

              // We don't need an array for one selects
              if ( one ) {
                return value;
              }

              // Multi-Selects return an array
              values.push( value );
            }
          }

          return values;
        },

        set: function( elem, value ) {
          var optionSet, option,
            options = elem.options,
            values = langx.makeArray( value ),
            i = options.length;

          while ( i-- ) {
            option = options[ i ];

            /* eslint-disable no-cond-assign */

            if ( option.selected =
              langx.inArray( valHooks.option.get( option ), values ) > -1
            ) {
              optionSet = true;
            }

            /* eslint-enable no-cond-assign */
          }

          // Force browsers to behave consistently when non-matching value is set
          if ( !optionSet ) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    };


    // Radios and checkboxes getter/setter
    langx.each( [ "radio", "checkbox" ], function() {
      valHooks[ this ] = {
        set: function( elem, value ) {
          if ( langx.isArray( value ) ) {
            return ( elem.checked = langx.inArray( val(elem), value ) > -1 );
          }
        }
      };
    });



    /*
     * Set property values
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */

    function setAttribute(elm, name, value) {
        if (value == null) {
            elm.removeAttribute(name);
        } else {
            elm.setAttribute(name, value);
        }
    }

    function aria(elm, name, value) {
        return this.attr(elm, "aria-" + name, value);
    }

    /*
     * Set property values
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */

    function attr(elm, name, value) {
        if (value === undefined) {
            if (typeof name === "object") {
                for (var attrName in name) {
                    attr(elm, attrName, name[attrName]);
                }
                return this;
            } else {
                if (elm.hasAttribute && elm.hasAttribute(name)) {
                    return elm.getAttribute(name);
                }
            }
        } else {
            elm.setAttribute(name, value);
            return this;
        }
    }


    /*
     *  Read all "data-*" attributes from a node
     * @param {Object} elm  
     */

    function _attributeData(elm) {
        var store = {}
        langx.each(elm.attributes || [], function(i, attr) {
            if (attr.name.indexOf('data-') == 0) {
                store[camelCase(attr.name.replace('data-', ''))] = deserializeValue(attr.value);
            }
        })
        return store;
    }

    function _store(elm, confirm) {
        var store = elm["_$_store"];
        if (!store && confirm) {
            store = elm["_$_store"] = _attributeData(elm);
        }
        return store;
    }

    function _getData(elm, name) {
        if (name === undefined) {
            return _store(elm, true);
        } else {
            var store = _store(elm);
            if (store) {
                if (name in store) {
                    return store[name];
                }
                var camelName = camelCase(name);
                if (camelName in store) {
                    return store[camelName];
                }
            }
            var attrName = 'data-' + name.replace(capitalRE, "-$1").toLowerCase()
            return attr(elm, attrName);
        }

    }

    function _setData(elm, name, value) {
        var store = _store(elm, true);
        store[camelCase(name)] = value;
    }


    /*
     * xxx
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */
    function data(elm, name, value) {

        if (value === undefined) {
            if (typeof name === "object") {
                for (var dataAttrName in name) {
                    _setData(elm, dataAttrName, name[dataAttrName]);
                }
                return this;
            } else {
                return _getData(elm, name);
            }
        } else {
            _setData(elm, name, value);
            return this;
        }
    } 
    /*
     * Remove from the element all items that have not yet been run. 
     * @param {Object} elm  
     */

    function cleanData(elm) {
        if (elm["_$_store"]) {
            delete elm["_$_store"];
        }
    }

    /*
     * Remove a previously-stored piece of data. 
     * @param {Object} elm  
     * @param {Array} names
     */
    function removeData(elm, names) {
        if (names) {
            if (langx.isString(names)) {
                names = names.split(/\s+/);
            }
            var store = _store(elm, true);
            names.forEach(function(name) {
                delete store[name];
            });            
        } else {
            cleanData(elm);
        }
        return this;
    }

    /*
     * xxx 
     * @param {Object} elm  
     * @param {Array} names
     */
    function pluck(nodes, property) {
        return map.call(nodes, function(elm) {
            return elm[property];
        });
    }

    /*
     * Get or set the value of an property for the specified element.
     * @param {Object} elm  
     * @param {String} name
     * @param {String} value
     */
    function prop(elm, name, value) {
        name = propMap[name] || name;
        if (value === undefined) {
            return elm[name];
        } else {
            elm[name] = value;
            return this;
        }
    }

    /*
     * remove Attributes  
     * @param {Object} elm  
     * @param {String} name
     */
    function removeAttr(elm, name) {
        name.split(' ').forEach(function(attr) {
            setAttribute(elm, attr);
        });
        return this;
    }


    /*
     * Remove the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.
     * @param {Object} elm  
     * @param {String} name
     */
    function removeProp(elm, name) {
        name.split(' ').forEach(function(prop) {
            delete elm[prop];
        });
        return this;
    }

    /*   
     * Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.  
     * @param {Object} elm  
     * @param {String} txt
     */
    function text(elm, txt) {
        if (txt === undefined) {
            return elm.textContent;
        } else {
            elm.textContent = txt == null ? '' : '' + txt;
            return this;
        }
    }

    /*   
     * Get the current value of the first element in the set of matched elements or set the value of every matched element.
     * @param {Object} elm  
     * @param {String} value
     */
    function val(elm, value) {
        var hooks = valHooks[ elm.type ] || valHooks[ elm.nodeName.toLowerCase() ];
        if (value === undefined) {
/*
            if (elm.multiple) {
                // select multiple values
                var selectedOptions = filter.call(finder.find(elm, "option"), (function(option) {
                    return option.selected;
                }));
                return pluck(selectedOptions, "value");
            } else {
                if (/input|textarea/i.test(elm.tagName)) {
                  return elm.value;
                }
                return text(elm);
            }
*/

          if ( hooks &&  "get" in hooks &&  ( ret = hooks.get( elm, "value" ) ) !== undefined ) {
            return ret;
          }

          ret = elm.value;

          // Handle most common string cases
          if ( typeof ret === "string" ) {
            return ret.replace( /\r/g, "" );
          }

          // Handle cases where value is null/undef or number
          return ret == null ? "" : ret;

        } else {
/*          
            if (/input|textarea/i.test(elm.tagName)) {
              elm.value = value;
            } else {
              text(elm,value);
            }
            return this;
*/
          // Treat null/undefined as ""; convert numbers to string
          if ( value == null ) {
            value = "";

          } else if ( typeof value === "number" ) {
            value += "";

          } else if ( langx.isArray( value ) ) {
            value = langx.map( value, function( value1 ) {
              return value1 == null ? "" : value1 + "";
            } );
          }

          // If set returns undefined, fall back to normal setting
          if ( !hooks || !( "set" in hooks ) || hooks.set( elm, value, "value" ) === undefined ) {
            elm.value = value;
          }
        }      
    }


    finder.pseudos.data = function( elem, i, match,dataName ) {
        return !!data( elem, dataName || match[3]);
    };
   

    function datax() {
        return datax;
    }

    langx.mixin(datax, {
        aria: aria,

        attr: attr,

        cleanData: cleanData,

        data: data,

        pluck: pluck,

        prop: prop,

        removeAttr: removeAttr,

        removeData: removeData,

        removeProp: removeProp,

        text: text,

        val: val,

        valHooks : valHooks
    });

    return skylark.attach("domx.data", datax);
});
define('skylark-domx-query/query',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-finder"
], function(skylark, langx, noder, finder) {
    var some = Array.prototype.some,
        push = Array.prototype.push,
        every = Array.prototype.every,
        concat = Array.prototype.concat,
        slice = Array.prototype.slice,
        map = Array.prototype.map,
        filter = Array.prototype.filter,
        forEach = Array.prototype.forEach,
        indexOf = Array.prototype.indexOf,
        sort = Array.prototype.sort,
        isQ;

    var rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;

    var funcArg = langx.funcArg,
        isArrayLike = langx.isArrayLike,
        isString = langx.isString,
        uniq = langx.uniq,
        isFunction = langx.isFunction;

    var type = langx.type,
        isArray = langx.isArray,

        isWindow = langx.isWindow,

        isDocument = langx.isDocument,

        isObject = langx.isObject,

        isPlainObject = langx.isPlainObject,

        compact = langx.compact,

        flatten = langx.flatten,

        camelCase = langx.camelCase,

        dasherize = langx.dasherize,
        children = finder.children;

    function wrapper_node_operation(func, context, oldValueFunc) {
        return function(html) {
            var argType, nodes = langx.map(arguments, function(arg) {
                argType = type(arg)
                return argType == "function" || argType == "object" || argType == "array" || arg == null ?
                    arg : noder.createFragment(arg)
            });
            if (nodes.length < 1) {
                return this
            }
            this.each(function(idx) {
                func.apply(context, [this, nodes, idx > 0]);
            });
            return this;
        }
    }

    function wrapper_map(func, context) {
        return function() {
            var self = this,
                params = slice.call(arguments);
            var result = langx.map(self, function(elem, idx) {
                return func.apply(context, [elem].concat(params));
            });
            return query(uniq(result));
        }
    }

    function wrapper_selector(func, context, last) {
        return function(selector) {
            var self = this,
                params = slice.call(arguments);
            var result = this.map(function(idx, elem) {
                // if (elem.nodeType == 1) {
                //if (elem.querySelector) {
                    return func.apply(context, last ? [elem] : [elem, selector]);
                //}
            });
            if (last && selector) {
                return result.filter(selector);
            } else {
                return result;
            }
        }
    }

    function wrapper_selector_until(func, context, last) {
        return function(util, selector) {
            var self = this,
                params = slice.call(arguments);
            //if (selector === undefined) { //TODO : needs confirm?
            //    selector = util;
            //    util = undefined;
            //}
            var result = this.map(function(idx, elem) {
                // if (elem.nodeType == 1) { // TODO
                //if (elem.querySelector) {
                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);
                //}
            });
            if (last && selector) {
                return result.filter(selector);
            } else {
                return result;
            }
        }
    }


    function wrapper_every_act(func, context) {
        return function() {
            var self = this,
                params = slice.call(arguments);
            this.each(function(idx,node) {
                func.apply(context, [this].concat(params));
            });
            return self;
        }
    }

    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {
        return function(arg1) {
            var self = this,
                params = slice.call(arguments);
            forEach.call(self, function(elem, idx) {
                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));
                func.apply(context, [elem, arg1].concat(params.slice(1)));
            });
            return self;
        }
    }

    function wrapper_some_chk(func, context) {
        return function() {
            var self = this,
                params = slice.call(arguments);
            return some.call(self, function(elem) {
                return func.apply(context, [elem].concat(params));
            });
        }
    }

    function wrapper_name_value(func, context, oldValueFunc) {
        return function(name, value) {
            var self = this,
                params = slice.call(arguments);

            if (langx.isPlainObject(name) || langx.isDefined(value)) {
                forEach.call(self, function(elem, idx) {
                    var newValue;
                    if (oldValueFunc) {
                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));
                    } else {
                        newValue = value
                    }
                    func.apply(context, [elem].concat(params));
                });
                return self;
            } else {
                if (self[0]) {
                    return func.apply(context, [self[0], name]);
                }
            }

        }
    }

    function wrapper_value(func, context, oldValueFunc) {
        return function(value) {
            var self = this;

            if (langx.isDefined(value)) {
                forEach.call(self, function(elem, idx) {
                    var newValue;
                    if (oldValueFunc) {
                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));
                    } else {
                        newValue = value
                    }
                    func.apply(context, [elem, newValue]);
                });
                return self;
            } else {
                if (self[0]) {
                    return func.apply(context, [self[0]]);
                }
            }

        }
    }

    var NodeList = langx.klass({
        klassName: "SkNodeList",
        init: function(selector, context) {
            var self = this,
                match, nodes, node, props;

            if (selector) {
                self.context = context = context || noder.doc();

                if (isString(selector)) {
                    // a html string or a css selector is expected
                    self.selector = selector;

                    if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                        match = [null, selector, null];
                    } else {
                        match = rquickExpr.exec(selector);
                    }

                    if (match) {
                        if (match[1]) {
                            // if selector is html
                            nodes = noder.createFragment(selector);

                            if (langx.isPlainObject(context)) {
                                props = context;
                            }

                        } else {
                            node = finder.byId(match[2], noder.ownerDoc(context));

                            if (node) {
                                // if selector is id
                                nodes = [node];
                            }

                        }
                    } else {
                        // if selector is css selector
                        if (langx.isString(context)) {
                            context = finder.find(context);
                        }

                        nodes = finder.descendants(context, selector);
                    }
                } else {
                    if (selector !== window && isArrayLike(selector)) {
                        // a dom node array is expected
                        nodes = selector;
                    } else {
                        // a dom node is expected
                        nodes = [selector];
                    }
                    //self.add(selector, false);
                }
            }


            if (nodes) {

                push.apply(self, nodes);

                if (props) {
                    for ( var name  in props ) {
                        // Properties of context are called as methods if possible
                        if ( langx.isFunction( this[ name ] ) ) {
                            this[ name ]( props[ name ] );
                        } else {
                            this.attr( name, props[ name ] );
                        }
                    }
                }
            }

            return self;
        }
    });

    var query = (function() {
        isQ = function(object) {
            return object instanceof NodeList;
        }
        init = function(selector, context) {
            return new NodeList(selector, context);
        }

        var $ = function(selector, context) {
            if (isFunction(selector)) {
                $.ready(function() {
                    selector($);
                });
            } else if (isQ(selector)) {
                return selector;
            } else {
                if (context && isQ(context) && isString(selector)) {
                    return context.find(selector);
                }
                return init(selector, context);
            }
        };

        $.fn = NodeList.prototype;
        langx.mixin($.fn, {
            // `map` and `slice` in the jQuery API work differently
            // from their array counterparts
            length : 0,

            map: function(fn) {
                return $(uniq(langx.map(this, function(el, i) {
                    return fn.call(el, i, el)
                })));
            },

            slice: function() {
                return $(slice.apply(this, arguments))
            },

            forEach: function() {
                return forEach.apply(this,arguments);
            },

            get: function(idx) {
                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
            },

            indexOf: function() {
                return indexOf.apply(this,arguments);
            },

            sort : function() {
                return sort.apply(this,arguments);
            },

            toArray: function() {
                return slice.call(this);
            },

            size: function() {
                return this.length
            },

            //remove: wrapper_every_act(noder.remove, noder),
            remove : function(selector) {
                if (selector) {
                    return this.find(selector).remove();
                }
                this.each(function(i,node){
                    noder.remove(node);
                });
                return this;
            },

            each: function(callback) {
                langx.each(this, callback);
                return this;
            },

            filter: function(selector) {
                if (isFunction(selector)) return this.not(this.not(selector))
                return $(filter.call(this, function(element) {
                    return finder.matches(element, selector)
                }))
            },

            add: function(selector, context) {
                return $(uniq(this.toArray().concat($(selector, context).toArray())));
            },

            is: function(selector) {
                if (this.length > 0) {
                    var self = this;
                    if (langx.isString(selector)) {
                        return some.call(self,function(elem) {
                            return finder.matches(elem, selector);
                        });
                    } else if (langx.isArrayLike(selector)) {
                       return some.call(self,function(elem) {
                            return langx.inArray(elem, selector) > -1;
                        });
                    } else if (langx.isHtmlNode(selector)) {
                       return some.call(self,function(elem) {
                            return elem ==  selector;
                        });
                    }
                }
                return false;
            },
            
            not: function(selector) {
                var nodes = []
                if (isFunction(selector) && selector.call !== undefined)
                    this.each(function(idx,node) {
                        if (!selector.call(this, idx,node)) nodes.push(this)
                    })
                else {
                    var excludes = typeof selector == 'string' ? this.filter(selector) :
                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
                    this.forEach(function(el) {
                        if (excludes.indexOf(el) < 0) nodes.push(el)
                    })
                }
                return $(nodes)
            },

            has: function(selector) {
                return this.filter(function() {
                    return isObject(selector) ?
                        noder.contains(this, selector) :
                        $(this).find(selector).size()
                })
            },

            eq: function(idx) {
                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);
            },

            first: function() {
                return this.eq(0);
            },

            last: function() {
                return this.eq(-1);
            },

            find: wrapper_selector(finder.descendants, finder),

            closest: wrapper_selector(finder.closest, finder),
            /*
                        closest: function(selector, context) {
                            var node = this[0],
                                collection = false
                            if (typeof selector == 'object') collection = $(selector)
                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))
                                node = node !== context && !isDocument(node) && node.parentNode
                            return $(node)
                        },
            */


            parents: wrapper_selector(finder.ancestors, finder),

            parentsUntil: wrapper_selector_until(finder.ancestors, finder),


            parent: wrapper_selector(finder.parent, finder),

            children: wrapper_selector(finder.children, finder),

            contents: wrapper_map(noder.contents, noder),

            empty: wrapper_every_act(noder.empty, noder),

            html: wrapper_value(noder.html, noder),

            // `pluck` is borrowed from Prototype.js
            pluck: function(property) {
                return langx.map(this, function(el) {
                    return el[property]
                })
            },

            pushStack : function(elms) {
                var ret = $(elms);
                ret.prevObject = this;
                return ret;
            },
            
            replaceWith: function(newContent) {
                return this.before(newContent).remove();
            },

            wrap: function(html) {
                /*
                var func = isFunction(structure)
                if (this[0] && !func)
                    var dom = $(structure).get(0),
                        clone = dom.parentNode || this.length > 1

                return this.each(function(index,node) {
                    $(this).wrapAll(
                        func ? structure.call(this, index,node) :
                        clone ? dom.cloneNode(true) : dom
                    )
                })
                */
                var htmlIsFunction = typeof html === "function";

                return this.each( function( i ) {
                    $( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
                } );                
            },

            wrapAll: function(html) {
                /*
                if (this[0]) {
                    $(this[0]).before(wrappingElement = $(wrappingElement));
                    var children;
                    // drill down to the inmost element
                    while ((children = wrappingElement.children()).length) {
                        wrappingElement = children.first();
                    }
                    $(wrappingElement).append(this);
                }
                return this
                */
                var wrap;

                if ( this[ 0 ] ) {
                    if ( typeof html === "function" ) {
                        html = html.call( this[ 0 ] );
                    }

                    // The elements to wrap the target around
                    wrap = $( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

                    if ( this[ 0 ].parentNode ) {
                        wrap.insertBefore( this[ 0 ] );
                    }

                    wrap.map( function() {
                        var elem = this;

                        while ( elem.firstElementChild ) {
                            elem = elem.firstElementChild;
                        }

                        return elem;
                    } ).append( this );
                }

                return this;

            },

            wrapInner: function(html) {
                /*
                var func = isFunction(wrappingElement)
                return this.each(function(index,node) {
                    var self = $(this),
                        contents = self.contents(),
                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement
                    contents.length ? contents.wrapAll(dom) : self.append(dom)
                })
                */
                if ( typeof html === "function" ) {
                    return this.each( function( i ) {
                        $( this ).wrapInner( html.call( this, i ) );
                    } );
                }

                return this.each( function() {
                    var self = $( this ),
                        contents = self.contents();

                    if ( contents.length ) {
                        contents.wrapAll( html );

                    } else {
                        self.append( html );
                    }
                } );

            },

            unwrap: function(selector) {
                /*
                if (this.parent().children().length === 0) {
                    // remove dom without text
                    this.parent(selector).not("body").each(function() {
                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));
                    });
                } else {
                    this.parent().each(function() {
                        $(this).replaceWith($(this).children())
                    });
                }
                return this
                */
                this.parent(selector).not("body").each( function() {
                    $(this).replaceWith(this.childNodes);
                });
                return this;

            },

            clone: function() {
                return this.map(function() {
                    return this.cloneNode(true)
                })
            },


            toggle: function(setting) {
                return this.each(function() {
                    var el = $(this);
                    (setting === undefined ? el.css("display") == "none" : setting) ? el.show(): el.hide()
                })
            },

            prev: function(selector) {
                return $(this.pluck('previousElementSibling')).filter(selector || '*')
            },

            prevAll: wrapper_selector(finder.previousSiblings, finder),

            next: function(selector) {
                return $(this.pluck('nextElementSibling')).filter(selector || '*')
            },

            nextAll: wrapper_selector(finder.nextSiblings, finder),

            siblings: wrapper_selector(finder.siblings, finder),

            index: function(elem) {
                if (elem) {
                    return this.indexOf($(elem)[0]);
                } else {
                    return this.parent().children().indexOf(this[0]);
                }
            }
        });

        // for now
        $.fn.detach = $.fn.remove;

        $.fn.hover = function(fnOver, fnOut) {
            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
        };


        var traverseNode = noder.traverse;


        $.fn.after = wrapper_node_operation(noder.after, noder);

        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);

        $.fn.before = wrapper_node_operation(noder.before, noder);

        $.fn.append = wrapper_node_operation(noder.append, noder);


        langx.each( {
            appendTo: "append",
            prependTo: "prepend",
            insertBefore: "before",
            insertAfter: "after",
            replaceAll: "replaceWith"
        }, function( name, original ) {
            $.fn[ name ] = function( selector ) {
                var elems,
                    ret = [],
                    insert = $( selector ),
                    last = insert.length - 1,
                    i = 0;

                for ( ; i <= last; i++ ) {
                    elems = i === last ? this : this.clone( true );
                    $( insert[ i ] )[ original ]( elems );

                    // Support: Android <=4.0 only, PhantomJS 1 only
                    // .get() because push.apply(_, arraylike) throws on ancient WebKit
                    push.apply( ret, elems.get() );
                }

                return this.pushStack( ret );
            };
        } );

/*
        $.fn.insertAfter = function(html) {
            $(html).after(this);
            return this;
        };

        $.fn.insertBefore = function(html) {
            $(html).before(this);
            return this;
        };

        $.fn.appendTo = function(html) {
            $(html).append(this);
            return this;
        };

        $.fn.prependTo = function(html) {
            $(html).prepend(this);
            return this;
        };

        $.fn.replaceAll = function(selector) {
            $(selector).replaceWith(this);
            return this;
        };
*/
        return $;
    })();

    (function($) {
        $.fn.scrollParent = function( includeHidden ) {
            var position = this.css( "position" ),
                excludeStaticParent = position === "absolute",
                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
                scrollParent = this.parents().filter( function() {
                    var parent = $( this );
                    if ( excludeStaticParent && parent.css( "position" ) === "static" ) {
                        return false;
                    }
                    return overflowRegex.test( parent.css( "overflow" ) + parent.css( "overflow-y" ) +
                        parent.css( "overflow-x" ) );
                } ).eq( 0 );

            return position === "fixed" || !scrollParent.length ?
                $( this[ 0 ].ownerDocument || document ) :
                scrollParent;
        };

    })(query);


    (function($) {
        $.fn.end = function() {
            return this.prevObject || $()
        }

        $.fn.andSelf = function() {
            return this.add(this.prevObject || $())
        }

        $.fn.addBack = function(selector) {
            if (this.prevObject) {
                if (selector) {
                    return this.add(this.prevObject.filter(selector));
                } else {
                    return this.add(this.prevObject);
                }
            } else {
                return this;
            }
        }

        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {
            var fn = $.fn[property]
            $.fn[property] = function() {
                var ret = fn.apply(this, arguments)
                ret.prevObject = this
                return ret
            }
        })
    })(query);


    (function($) {
        $.fn.query = $.fn.find;

        $.fn.place = function(refNode, position) {
            // summary:
            //      places elements of this node list relative to the first element matched
            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`
            // queryOrNode:
            //      may be a string representing any valid CSS3 selector or a DOM node.
            //      In the selector case, only the first matching element will be used
            //      for relative positioning.
            // position:
            //      can be one of:
            //
            //      -   "last" (default)
            //      -   "first"
            //      -   "before"
            //      -   "after"
            //      -   "only"
            //      -   "replace"
            //
            //      or an offset in the childNodes
            if (langx.isString(refNode)) {
                refNode = finder.descendant(refNode);
            } else if (isQ(refNode)) {
                refNode = refNode[0];
            }
            return this.each(function(i, node) {
                switch (position) {
                    case "before":
                        noder.before(refNode, node);
                        break;
                    case "after":
                        noder.after(refNode, node);
                        break;
                    case "replace":
                        noder.replace(refNode, node);
                        break;
                    case "only":
                        noder.empty(refNode);
                        noder.append(refNode, node);
                        break;
                    case "first":
                        noder.prepend(refNode, node);
                        break;
                        // else fallthrough...
                    default: // aka: last
                        noder.append(refNode, node);
                }
            });
        };

        $.fn.addContent = function(content, position) {
            if (content.template) {
                content = langx.substitute(content.template, content);
            }
            return this.append(content);
        };



        $.fn.disableSelection = ( function() {
            var eventType = "onselectstart" in document.createElement( "div" ) ?
                "selectstart" :
                "mousedown";

            return function() {
                return this.on( eventType + ".ui-disableSelection", function( event ) {
                    event.preventDefault();
                } );
            };
        } )();

        $.fn.enableSelection = function() {
            return this.off( ".ui-disableSelection" );
        };

        $.fn.reflow = function() {
            return noder.flow(this[0]);
        };

        $.fn.isBlockNode = function() {
            return noder.isBlockNode(this[0]);
        };
       

    })(query);

    query.fn.plugin = function(name,options) {
        var args = slice.call( arguments, 1 ),
            self = this,
            returnValue = this;

        this.each(function(){
            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));
        });
        return returnValue;
    };


    query.wraps = {
        wrapper_node_operation,
        wrapper_map,
        wrapper_value,
        wrapper_selector,
        wrapper_some_chk,
        wrapper_selector_until,
        wrapper_every_act_firstArgFunc,
        wrapper_every_act,
        wrapper_name_value

    };

    return skylark.attach("domx.query", query);

});
define('skylark-domx-query/main',[
	"./query"
],function(query){
	return query;
});
define('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });

define('skylark-domx-velm/velm',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-finder",
    "skylark-domx-query"
], function(skylark, langx, noder, finder, $) {
    var map = Array.prototype.map,
        slice = Array.prototype.slice;
    /*
     * VisualElement is a skylark class type wrapping a visule dom node,
     * provides a number of prototype methods and supports chain calls.
     */
    var VisualElement = langx.klass({
        klassName: "VisualElement",

        "_construct": function(node) {
            if (langx.isString(node)) {
                if (node.charAt(0) === "<") {
                    //html
                    node = noder.createFragment(node)[0];
                } else {
                    // id
                    node = document.getElementById(node);
                }
            }
            this._elm = node;
        }
    });

    VisualElement.prototype.$ = VisualElement.prototype.query = function(selector) {
        return $(selector,this._elm);
    };

    VisualElement.prototype.elm = function() {
        return this._elm;
    };

    /*
     * the VisualElement object wrapping document.body
     */
    var root = new VisualElement(document.body),
        velm = function(node) {
            if (node) {
                return new VisualElement(node);
            } else {
                return root;
            }
        };
    /*
     * Extend VisualElement prototype with wrapping the specified methods.
     * @param {ArrayLike} fn
     * @param {Object} context
     */
    function _delegator(fn, context) {
        return function() {
            var self = this,
                elem = self._elm,
                ret = fn.apply(context, [elem].concat(slice.call(arguments)));

            if (ret) {
                if (ret === context) {
                    return self;
                } else {
                    if (ret instanceof HTMLElement) {
                        ret = new VisualElement(ret);
                    } else if (langx.isArrayLike(ret)) {
                        ret = map.call(ret, function(el) {
                            if (el instanceof HTMLElement) {
                                return new VisualElement(el);
                            } else {
                                return el;
                            }
                        })
                    }
                }
            }
            return ret;
        };
    }

    langx.mixin(velm, {
        batch: function(nodes, action, args) {
            nodes.forEach(function(node) {
                var elm = (node instanceof VisualElement) ? node : velm(node);
                elm[action].apply(elm, args);
            });

            return this;
        },

        root: new VisualElement(document.body),

        VisualElement: VisualElement,

        partial: function(name, fn) {
            var props = {};

            props[name] = fn;

            VisualElement.partial(props);
        },

        delegate: function(names, context) {
            var props = {};

            names.forEach(function(name) {
                props[name] = _delegator(context[name], context);
            });

            VisualElement.partial(props);
        }
    });

    // from ./finder
    velm.delegate([
        "ancestor",
        "ancestors",
        "children",
        "descendant",
        "find",
        "findAll",
        "firstChild",
        "lastChild",
        "matches",
        "nextSibling",
        "nextSiblings",
        "parent",
        "previousSibling",
        "previousSiblings",
        "siblings"
    ], finder);

    /*
     * find a dom element matched by the specified selector.
     * @param {String} selector
     */
    velm.find = function(selector) {
        if (selector === "body") {
            return this.root;
        } else {
            return this.root.descendant(selector);
        }
    };


    // from ./noder
    velm.delegate([
        "after",
        "append",
        "before",
        "clone",
        "contains",
        "contents",
        "empty",
        "html",
        "isChildOf",
        "isDocument",
        "isInDocument",
        "isWindow",
        "ownerDoc",
        "prepend",
        "remove",
        "removeChild",
        "replace",
        "reverse",
        "throb",
        "traverse",
        "wrapper",
        "wrapperInner",
        "unwrap"
    ], noder);


    return skylark.attach("domx.velm", velm);
});
define('skylark-domx-velm/main',[
	"./velm"
],function(velm){
	return velm;
});
define('skylark-domx-velm', ['skylark-domx-velm/main'], function (main) { return main; });

define('skylark-domx-data/main',[
    "./data",
    "skylark-domx-velm",
    "skylark-domx-query"    
],function(data,velm,$){
    // from ./data
    velm.delegate([
        "attr",
        "data",
        "prop",
        "removeAttr",
        "removeData",
        "text",
        "val"
    ], data);

    $.fn.text = $.wraps.wrapper_value(data.text, data, data.text);

    $.fn.attr = $.wraps.wrapper_name_value(data.attr, data, data.attr);

    $.fn.removeAttr = $.wraps.wrapper_every_act(data.removeAttr, data);

    $.fn.prop = $.wraps.wrapper_name_value(data.prop, data, data.prop);

    $.fn.removeProp = $.wraps.wrapper_every_act(data.removeProp, data);

    $.fn.data = $.wraps.wrapper_name_value(data.data, data, data.data);

    $.fn.removeData = $.wraps.wrapper_every_act(data.removeData, data);

    $.fn.val = $.wraps.wrapper_value(data.val, data, data.val);


    return data;
});
define('skylark-domx-data', ['skylark-domx-data/main'], function (main) { return main; });

define('skylark-domx-eventer/eventer',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-finder",
    "skylark-domx-noder",
    "skylark-domx-data"
], function(skylark, langx, browser, finder, noder, datax) {
    var mixin = langx.mixin,
        each = langx.each,
        slice = Array.prototype.slice,
        uid = langx.uid,
        ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,
        eventMethods = {
            preventDefault: "isDefaultPrevented",
            stopImmediatePropagation: "isImmediatePropagationStopped",
            stopPropagation: "isPropagationStopped"
        },
        readyRE = /complete|loaded|interactive/;

    function compatible(event, source) {
        if (source || !event.isDefaultPrevented) {
            if (!source) {
                source = event;
            }

            langx.each(eventMethods, function(name, predicate) {
                var sourceMethod = source[name];
                event[name] = function() {
                    this[predicate] = langx.returnTrue;
                    return sourceMethod && sourceMethod.apply(source, arguments);
                }
                event[predicate] = langx.returnFalse;
            });
        }
        return event;
    }

    function parse(event) {
        var segs = ("" + event).split(".");
        return {
            type: segs[0],
            ns: segs.slice(1).sort().join(" ")
        };
    }


    var NativeEventCtors = [
            window["CustomEvent"], // 0 default
            window["CompositionEvent"], // 1
            window["DragEvent"], // 2
            window["Event"], // 3
            window["FocusEvent"], // 4
            window["KeyboardEvent"], // 5
            window["MessageEvent"], // 6
            window["MouseEvent"], // 7
            window["MouseScrollEvent"], // 8
            window["MouseWheelEvent"], // 9
            window["MutationEvent"], // 10
            window["ProgressEvent"], // 11
            window["TextEvent"], // 12
            window["TouchEvent"], // 13
            window["UIEvent"], // 14
            window["WheelEvent"], // 15
            window["ClipboardEvent"] // 16
        ],
        NativeEvents = {
            "compositionstart": 1, // CompositionEvent
            "compositionend": 1, // CompositionEvent
            "compositionupdate": 1, // CompositionEvent

            "beforecopy": 16, // ClipboardEvent
            "beforecut": 16, // ClipboardEvent
            "beforepaste": 16, // ClipboardEvent
            "copy": 16, // ClipboardEvent
            "cut": 16, // ClipboardEvent
            "paste": 16, // ClipboardEvent

            "drag": 2, // DragEvent
            "dragend": 2, // DragEvent
            "dragenter": 2, // DragEvent
            "dragexit": 2, // DragEvent
            "dragleave": 2, // DragEvent
            "dragover": 2, // DragEvent
            "dragstart": 2, // DragEvent
            "drop": 2, // DragEvent

            "abort": 3, // Event
            "change": 3, // Event
            "error": 3, // Event
            "selectionchange": 3, // Event
            "submit": 3, // Event
            "reset": 3, // Event

            "focus": 4, // FocusEvent
            "blur": 4, // FocusEvent
            "focusin": 4, // FocusEvent
            "focusout": 4, // FocusEvent

            "keydown": 5, // KeyboardEvent
            "keypress": 5, // KeyboardEvent
            "keyup": 5, // KeyboardEvent

            "message": 6, // MessageEvent

            "click": 7, // MouseEvent
            "contextmenu": 7, // MouseEvent
            "dblclick": 7, // MouseEvent
            "mousedown": 7, // MouseEvent
            "mouseup": 7, // MouseEvent
            "mousemove": 7, // MouseEvent
            "mouseover": 7, // MouseEvent
            "mouseout": 7, // MouseEvent
            "mouseenter": 7, // MouseEvent
            "mouseleave": 7, // MouseEvent


            "textInput": 12, // TextEvent

            "touchstart": 13, // TouchEvent
            "touchmove": 13, // TouchEvent
            "touchend": 13, // TouchEvent

            "load": 14, // UIEvent
            "resize": 14, // UIEvent
            "select": 14, // UIEvent
            "scroll": 14, // UIEvent
            "unload": 14, // UIEvent,

            "wheel": 15 // WheelEvent
        };

    //create a custom dom event
    var createEvent = (function() {

        function getEventCtor(type) {
            var idx = NativeEvents[type];
            if (!idx) {
                idx = 0;
            }
            return NativeEventCtors[idx];
        }

        return function(type, props) {
            //create a custom dom event

            if (langx.isString(type)) {
                props = props || {};
            } else {
                props = type || {};
                type = props.type || "";
            }
            var parsed = parse(type);
            type = parsed.type;

            props = langx.mixin({
                bubbles: true,
                cancelable: true
            }, props);

            if (parsed.ns) {
                props.namespace = parsed.ns;
            }

            var ctor = getEventCtor(type),
                e = new ctor(type, props);

            langx.safeMixin(e, props);

            return compatible(e);
        };
    })();

    function createProxy(src, props) {
        var key,
            proxy = {
                originalEvent: src
            };
        for (key in src) {
            if (key !== "keyIdentifier" && !ignoreProperties.test(key) && src[key] !== undefined) {
                proxy[key] = src[key];
            }
        }
        if (props) {
            langx.mixin(proxy, props);
        }
        return compatible(proxy, src);
    }

    var
        specialEvents = {},
        focusinSupported = "onfocusin" in window,
        focus = { focus: "focusin", blur: "focusout" },
        hover = { mouseenter: "mouseover", mouseleave: "mouseout" },
        realEvent = function(type) {
            return hover[type] || (focusinSupported && focus[type]) || type;
        },
        handlers = {},
        EventBindings = langx.klass({
            init: function(target, event) {
                this._target = target;
                this._event = event;
                this._bindings = [];
            },

            add: function(fn, options) {
                var bindings = this._bindings,
                    binding = {
                        fn: fn,
                        options: langx.mixin({}, options)
                    };

                bindings.push(binding);

                var self = this;
                if (!self._listener) {
                    self._listener = function(domEvt) {
                        var elm = this,
                            e = createProxy(domEvt),
                            args = domEvt._args,
                            bindings = self._bindings,
                            ns = e.namespace;

                        if (langx.isDefined(args)) {
                            args = [e].concat(args);
                        } else {
                            args = [e];
                        }

                        langx.each(bindings, function(idx, binding) {
                            var match = elm;
                            if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {
                                return false;
                            }
                            var fn = binding.fn,
                                options = binding.options || {},
                                selector = options.selector,
                                one = options.one,
                                data = options.data;

                            if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {
                                return;
                            }
                            if (selector) {
                                match = finder.closest(e.target, selector);
                                if (match && match !== elm) {
                                    langx.mixin(e, {
                                        currentTarget: match,
                                        liveFired: elm
                                    });
                                } else {
                                    return;
                                }
                            }

                            var originalEvent = self._event;
                            if (originalEvent in hover) {
                                var related = e.relatedTarget;
                                if (related && (related === match || noder.contains(match, related))) {
                                    return;
                                }
                            }

                            if (langx.isDefined(data)) {
                                e.data = data;
                            }

                            if (one) {
                                self.remove(fn, options);
                            }

                            var result = fn.apply(match, args);

                            if (result === false) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        });;
                    };

                    var event = self._event;
                    /*
                                        if (event in hover) {
                                            var l = self._listener;
                                            self._listener = function(e) {
                                                var related = e.relatedTarget;
                                                if (!related || (related !== this && !noder.contains(this, related))) {
                                                    return l.apply(this, arguments);
                                                }
                                            }
                                        }
                    */

                    if (self._target.addEventListener) {
                        self._target.addEventListener(realEvent(event), self._listener, false);
                    } else {
                        console.warn("invalid eventer object", self._target);
                    }
                }

            },
            remove: function(fn, options) {
                options = langx.mixin({}, options);

                function matcherFor(ns) {
                    return new RegExp("(?:^| )" + ns.replace(" ", " .* ?") + "(?: |$)");
                }
                var matcher;
                if (options.ns) {
                    matcher = matcherFor(options.ns);
                }

                this._bindings = this._bindings.filter(function(binding) {
                    var removing = (!fn || fn === binding.fn) &&
                        (!matcher || matcher.test(binding.options.ns)) &&
                        (!options.selector || options.selector == binding.options.selector);

                    return !removing;
                });
                if (this._bindings.length == 0) {
                    if (this._target.removeEventListener) {
                        this._target.removeEventListener(realEvent(this._event), this._listener, false);
                    }
                    this._listener = null;
                }
            }
        }),
        EventsHandler = langx.klass({
            init: function(elm) {
                this._target = elm;
                this._handler = {};
            },

            // add a event listener
            // selector Optional
            register: function(event, callback, options) {
                // Seperate the event from the namespace
                var parsed = parse(event),
                    event = parsed.type,
                    specialEvent = specialEvents[event],
                    bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);

                var events = this._handler;

                // Check if there is already a handler for this event
                if (events[event] === undefined) {
                    events[event] = new EventBindings(this._target, bindingEvent || event);
                }

                // Register the new callback function
                events[event].add(callback, langx.mixin({
                    ns: parsed.ns
                }, options)); // options:{selector:xxx}
            },

            // remove a event listener
            unregister: function(event, fn, options) {
                // Check for parameter validtiy
                var events = this._handler,
                    parsed = parse(event);
                event = parsed.type;

                if (event) {
                    var listener = events[event];

                    if (listener) {
                        listener.remove(fn, langx.mixin({
                            ns: parsed.ns
                        }, options));
                    }
                } else {
                    //remove all events
                    for (event in events) {
                        var listener = events[event];
                        listener.remove(fn, langx.mixin({
                            ns: parsed.ns
                        }, options));
                    }
                }
            }
        }),

        findHandler = function(elm) {
            var id = uid(elm),
                handler = handlers[id];
            if (!handler) {
                handler = handlers[id] = new EventsHandler(elm);
            }
            return handler;
        };

    /*   
     * Remove an event handler for one or more events from the specified element.
     * @param {HTMLElement} elm  
     * @param {String} events
     * @param {String　Optional } selector
     * @param {Function} callback
     */
    function off(elm, events, selector, callback) {
        var $this = this
        if (langx.isPlainObject(events)) {
            langx.each(events, function(type, fn) {
                off(elm, type, selector, fn);
            })
            return $this;
        }

        if (!langx.isString(selector) && !langx.isFunction(callback) && callback !== false) {
            callback = selector;
            selector = undefined;
        }

        if (callback === false) {
            callback = langx.returnFalse;
        }

        if (typeof events == "string") {
            if (events.indexOf(",") > -1) {
                events = events.split(",");
            } else {
                events = events.split(/\s/);
            }
        }

        var handler = findHandler(elm);

        if (events) events.forEach(function(event) {

            handler.unregister(event, callback, {
                selector: selector,
            });
        });
        return this;
    }

    /*   
     * Attach an event handler function for one or more events to the selected elements.
     * @param {HTMLElement} elm  
     * @param {String} events
     * @param {String　Optional} selector
     * @param {Anything Optional} data
     * @param {Function} callback
     * @param {Boolean　Optional} one
     */
    function on(elm, events, selector, data, callback, one) {

        var autoRemove, delegator;
        if (langx.isPlainObject(events)) {
            langx.each(events, function(type, fn) {
                on(elm, type, selector, data, fn, one);
            });
            return this;
        }

        if (!langx.isString(selector) && !langx.isFunction(callback)) {
            callback = data;
            data = selector;
            selector = undefined;
        }

        if (langx.isFunction(data)) {
            callback = data;
            data = undefined;
        }

        if (callback === false) {
            callback = langx.returnFalse;
        }

        if (typeof events == "string") {
            if (events.indexOf(",") > -1) {
                events = events.split(",");
            } else {
                events = events.split(/\s/);
            }
        }

        var handler = findHandler(elm);

        events.forEach(function(event) {
            if (event == "ready") {
                return ready(callback);
            }
            handler.register(event, callback, {
                data: data,
                selector: selector,
                one: !!one
            });
        });
        return this;
    }

    /*   
     * Attach a handler to an event for the elements. The handler is executed at most once per 
     * @param {HTMLElement} elm  
     * @param {String} event
     * @param {String　Optional} selector
     * @param {Anything Optional} data
     * @param {Function} callback
     */
    function one(elm, events, selector, data, callback) {
        on(elm, events, selector, data, callback, 1);

        return this;
    }

    /*   
     * Prevents propagation and clobbers the default action of the passed event. The same as calling event.preventDefault() and event.stopPropagation(). 
     * @param {String} event
     */
    function stop(event) {
        if (window.document.all) {
            event.keyCode = 0;
        }
        if (event.preventDefault) {
            event.preventDefault();
            event.stopPropagation();
        }
        return this;
    }
    /*   
     * Execute all handlers and behaviors attached to the matched elements for the given event  
     * @param {String} evented
     * @param {String} type
     * @param {Array or PlainObject } args
     */
    function trigger(evented, type, args) {
        var e;
        if (type instanceof Event) {
            e = type;
        } else {
            e = createEvent(type, args);
        }
        e._args = args;

        var fn = (evented.dispatchEvent || evented.trigger);
        if (fn) {
            fn.call(evented, e);
        } else {
            console.warn("The evented parameter is not a eventable object");
        }

        return this;
    }
    /*   
     * Specify a function to execute when the DOM is fully loaded.  
     * @param {Function} callback
     */
    function ready(callback) {
        // need to check if document.body exists for IE as that browser reports
        // document ready when it hasn't yet created the body elm
        if (readyRE.test(document.readyState) && document.body) {
            langx.defer(callback);
        } else {
            document.addEventListener('DOMContentLoaded', callback, false);
        }

        return this;
    }

    var keyCodeLookup = {
        "backspace": 8,
        "comma": 188,
        "delete": 46,
        "down": 40,
        "end": 35,
        "enter": 13,
        "escape": 27,
        "home": 36,
        "left": 37,
        "page_down": 34,
        "page_up": 33,
        "period": 190,
        "right": 39,
        "space": 32,
        "tab": 9,
        "up": 38
    };
    //example:
    //shortcuts(elm).add("CTRL+ALT+SHIFT+X",function(){console.log("test!")});
    function shortcuts(elm) {

        var registry = datax.data(elm, "shortcuts");
        if (!registry) {
            registry = {};
            datax.data(elm, "shortcuts", registry);
            var run = function(shortcut, event) {
                var n = event.metaKey || event.ctrlKey;
                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {
                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {
                        event.preventDefault();
                        if ("keydown" == event.type) {
                            shortcut.fn(event);
                        }
                        return true;
                    }
                }
            };
            on(elm, "keyup keypress keydown", function(event) {
                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {
                    for (var key in registry) {
                        run(registry[key], event);
                    }
                }
            });

        }

        return {
            add: function(pattern, fn) {
                var shortcutKeys;
                if (pattern.indexOf(",") > -1) {
                    shortcutKeys = pattern.toLowerCase().split(",");
                } else {
                    shortcutKeys = pattern.toLowerCase().split(" ");
                }
                shortcutKeys.forEach(function(shortcutKey) {
                    var setting = {
                        fn: fn,
                        alt: false,
                        ctrl: false,
                        shift: false
                    };
                    shortcutKey.split("+").forEach(function(key) {
                        switch (key) {
                            case "alt":
                            case "ctrl":
                            case "shift":
                                setting[key] = true;
                                break;
                            default:
                                setting.charCode = key.charCodeAt(0);
                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);
                        }
                    });
                    var regKey = (setting.ctrl ? "ctrl" : "") + "," + (setting.alt ? "alt" : "") + "," + (setting.shift ? "shift" : "") + "," + setting.keyCode;
                    registry[regKey] = setting;
                })
            }

        };

    }

    if (browser.support.transition) {
        specialEvents.transitionEnd = {
//          handle: function (e) {
//            if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
//          },
          bindType: browser.support.transition.end,
          delegateType: browser.support.transition.end
        }        
    }

    function eventer() {
        return eventer;
    }

    langx.mixin(eventer, {
        NativeEvents : NativeEvents,
        
        create: createEvent,

        keys: keyCodeLookup,

        off: off,

        on: on,

        one: one,

        proxy: createProxy,

        ready: ready,

        shortcuts: shortcuts,

        special: specialEvents,

        stop: stop,

        trigger: trigger

    });

    each(NativeEvents,function(name){
        eventer[name] = function(elm,selector,data,callback) {
            if (arguments.length>1) {
                return this.on(elm,name,selector,data,callback);
            } else {
                if (name == "focus") {
                    if (elm.focus) {
                        elm.focus();
                    }
                } else if (name == "blur") {
                    if (elm.blur) {
                        elm.blur();
                    }
                } else if (name == "click") {
                    if (elm.click) {
                        elm.click();
                    }
                } else {
                    this.trigger(elm,name);
                }

                return this;
            }
        };
    });

    return skylark.attach("domx.eventer",eventer);
});
define('skylark-domx-eventer/main',[
    "skylark-langx/langx",
    "./eventer",
    "skylark-domx-velm",
    "skylark-domx-query"        
],function(langx,eventer,velm,$){

    var delegateMethodNames = [
        "off",
        "on",
        "one",
        "trigger"
    ];

    langx.each(eventer.NativeEvents,function(name){
        delegateMethodNames.push(name);
    });

    // from ./eventer
    velm.delegate(delegateMethodNames, eventer);

    langx.each(delegateMethodNames,function(i,name){
        $.fn[name] = $.wraps.wrapper_every_act(eventer[name],eventer);
    });


    /*
    $.fn.on = $.wraps.wrapper_every_act(eventer.on, eventer);

    $.fn.off = $.wraps.wrapper_every_act(eventer.off, eventer);

    $.fn.trigger = $.wraps.wrapper_every_act(eventer.trigger, eventer);

    ('focusin focusout focus blur load resize scroll unload click dblclick ' +
        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +
        'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {
        $.fn[event] = $.wraps.wrapper_every_act(eventer[event],eventer);
    });

    $.fn.one = function(event, selector, data, callback) {
        if (!langx.isString(selector) && !langx.isFunction(callback)) {
            callback = data;
            data = selector;
            selector = null;
        }

        if (langx.isFunction(data)) {
            callback = data;
            data = null;
        }

        return this.on(event, selector, data, callback, 1)
    }; 
    */

    $.ready = eventer.ready;

    return eventer;
});
define('skylark-domx-eventer', ['skylark-domx-eventer/main'], function (main) { return main; });

define('skylark-domx-forms/forms',[
	"skylark-langx/skylark"
],function(skylark){
	return skylark.attach("domx.forms",{});
});
define('skylark-domx-forms/deserialize',[
  "skylark-langx/langx",
  "skylark-domx-query",
  "./forms"
],function(langx,$,forms){
  /**
   * Updates a key/valueArray with the given property and value. Values will always be stored as arrays.
   *
   * @param prop The property to add the value to.
   * @param value The value to add.
   * @param obj The object to update.
   * @returns {object} Updated object.
   */
  function updateKeyValueArray( prop, value, obj ) {
    var current = obj[ prop ];

    if ( current === undefined ) {
      obj[ prop ] = [ value ];
    } else {
      current.push( value );
    }

    return obj;
  }

  /**
   * Get all of the fields contained within the given elements by name.
   *
   * @param formElm The form element.
   * @param filter Custom filter to apply to the list of fields.
   * @returns {object} All of the fields contained within the given elements, keyed by name.
   */
  function getFieldsByName(formElm, filter ) {
    var elementsByName = {};

    // Extract fields from elements
    var fields = $(formElm)
      .map(function convertFormToElements() {
        return this.elements ? langx.makeArray( this.elements ) : this;
      })
      .filter( filter || ":input:not(:disabled)" )
      .get();

    langx.each( fields, function( index, field ) {
      updateKeyValueArray( field.name, field, elementsByName );
    });

    return elementsByName;
  }

  /**
   * Figure out the type of an element. Input type will be used first, falling back to nodeName.
   *
   * @param element DOM element to check type of.
   * @returns {string} The element's type.
   */
  function getElementType( element ) {
    return ( element.type || element.nodeName ).toLowerCase();
  }

  /**
   * Normalize the provided data into a key/valueArray store.
   *
   * @param data The data provided by the user to the plugin.
   * @returns {object} The data normalized into a key/valueArray store.
   */
  function normalizeData( data ) {
    var normalized = {};
    var rPlus = /\+/g;

    // Convert data from .serializeObject() notation
    if ( langx.isPlainObject( data ) ) {
      langx.extend( normalized, data );

      // Convert non-array values into an array
      langx.each( normalized, function( name, value ) {
        if ( !langx.isArray( value ) ) {
          normalized[ name ] = [ value ];
        }
      });

    // Convert data from .serializeArray() notation
    } else if ( langx.isArray( data ) ) {
      langx.each( data, function( index, field ) {
        updateKeyValueArray( field.name, field.value, normalized );
      });

    // Convert data from .serialize() notation
    } else if ( typeof data === "string" ) {
      langx.each( data.split( "&" ), function( index, field ) {
        var current = field.split( "=" );
        var name = decodeURIComponent( current[ 0 ].replace( rPlus, "%20" ) );
        var value = decodeURIComponent( current[ 1 ].replace( rPlus, "%20" ) );
        updateKeyValueArray( name, value, normalized );
      });
    }

    return normalized;
  }

  /**
   * Map of property name -> element types.
   *
   * @type {object}
   */
  var updateTypes = {
    checked: [
      "radio",
      "checkbox"
    ],
    selected: [
      "option",
      "select-one",
      "select-multiple"
    ],
    value: [
      "button",
      "color",
      "date",
      "datetime",
      "datetime-local",
      "email",
      "hidden",
      "month",
      "number",
      "password",
      "range",
      "reset",
      "search",
      "submit",
      "tel",
      "text",
      "textarea",
      "time",
      "url",
      "week"
    ]
  };

  /**
   * Get the property to update on an element being updated.
   *
   * @param element The DOM element to get the property for.
   * @returns The name of the property to update if element is supported, otherwise `undefined`.
   */
  function getPropertyToUpdate( element ) {
    var type = getElementType( element );
    var elementProperty = undefined;

    langx.each( updateTypes, function( property, types ) {
      if ( langx.inArray( type, types ) > -1 ) {
        elementProperty = property;
        return false;
      }
    });

    return elementProperty;
  }

  /**
   * Update the element based on the provided data.
   *
   * @param element The DOM element to update.
   * @param elementIndex The index of this element in the list of elements with the same name.
   * @param value The serialized element value.
   * @param valueIndex The index of the value in the list of values for elements with the same name.
   * @param callback A function to call if the value of an element was updated.
   */
  function update( element, elementIndex, value, valueIndex, callback ) {
    var property = getPropertyToUpdate( element );

    // Handle value inputs
    // If there are multiple value inputs with the same name, they will be populated by matching indexes.
    if ( property == "value" && elementIndex == valueIndex ) {
      element.value = value;
      callback.call( element, value );

    // Handle select menus, checkboxes and radio buttons
    } else if ( property == "checked" || property == "selected" ) {
      var fields = [];

      // Extract option fields from select menus
      if ( element.options ) {
        langx.each( element.options, function( index, option ) {
          fields.push( option );
        });

      } else {
        fields.push( element );
      }

      // #37: Remove selection from multiple select menus before deserialization
      if ( element.multiple && valueIndex == 0 ) {
        element.selectedIndex = -1;
      }

      langx.each( fields, function( index, field ) {
        if ( field.value == value ) {
          field[ property ] = true;
          callback.call( field, value );
        }
      });
    }
  }

  /**
   * Default plugin options.
   *
   * @type {object}
   */
  var defaultOptions = {
    change: langx.noop,
    complete: langx.noop
  };

  /**
   * The $.deserialize function.
   *
   * @param data The data to deserialize.
   * @param options Additional options.
   * @returns {jQuery} The jQuery object that was provided to the plugin.
   */
  function deserialize(formElm,data, options ) {

    // Backwards compatible with old arguments: data, callback
    if ( langx.isFunction( options ) ) {
      options = { complete: options };
    }

    options = langx.extend( defaultOptions, options || {} );
    data = normalizeData( data );

    var elementsByName = getFieldsByName( formElm, options.filter );

    langx.each( data, function( name, values ) {
      langx.each( elementsByName[ name ], function( elementIndex, element ) {
        langx.each( values, function( valueIndex, value ) {
          update( element, elementIndex, value, valueIndex, options.change );
        });
      });
    });

    options.complete.call( formElm );

    return this;
  };

  return forms.deserialize = deserialize;
});
define('skylark-domx-forms/serializeArray',[
  "skylark-langx/langx",
  "skylark-domx-data",
  "./forms"
],function(langx,datax,forms){
    function serializeArray(formElm) {
        var name, type, result = [],
            add = function(value) {
                if (value.forEach) return value.forEach(add)
                result.push({ name: name, value: value })
            }
        langx.each(formElm.elements, function(_, field) {
            type = field.type, name = field.name
            if (name && field.nodeName.toLowerCase() != 'fieldset' &&
                !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&
                ((type != 'radio' && type != 'checkbox') || field.checked))
                add(datax.val(field))
        })
        return result
    };

    return forms.serializeArray = serializeArray;
});

define('skylark-domx-forms/serializeObject',[
  "skylark-langx/langx",
  "./forms",
  "./serializeArray"
],function(langx,forms,serializeArray){

  function serializeObject(formElm){
    var obj = {};
    
    langx.each(serializeArray(formElm), function(i,o){
      var n = o.name,
        v = o.value;
        
        obj[n] = obj[n] === undefined ? v
          : langx.isArray( obj[n] ) ? obj[n].concat( v )
          : [ obj[n], v ];
    });
    
    return obj;
  }

  return forms.serializeObject = serializeObject;
});  
define('skylark-domx-forms/serialize',[
  "skylark-langx/langx",
  "./forms",
  "./serializeArray"
],function(langx,forms,serializeArray){
    function serialize(formElm) {
        var result = []
        serializeArray(formElm).forEach(function(elm) {
            result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))
        })
        return result.join('&')
    }

    return forms.serialize = serialize;
});
define('skylark-domx-forms/main',[
	"./forms",
    "skylark-domx-velm",
    "skylark-domx-query",
    "./deserialize",
    "./serializeArray",
    "./serializeObject",
    "./serialize"
],function(forms,velm,$){

    // from ./data
    velm.delegate([
        "deserialize",
        "serializeArray",
        "serializeObject",
        "serialize"
    ], forms);

    $.fn.deserialize = $.wraps.wrapper_value(forms.deserialize, forms, forms.deserialize);
    $.fn.serializeArray = $.wraps.wrapper_value(forms.serializeArray, forms, forms.serializeArray);
    $.fn.serializeObject = $.wraps.wrapper_value(forms.serializeObject, forms, forms.serializeObject);
    $.fn.serialize = $.wraps.wrapper_value(forms.serialize, forms, forms.serialize);


	return forms;
});
define('skylark-domx-forms', ['skylark-domx-forms/main'], function (main) { return main; });

define('skylark-domx-styler/styler',[
    "skylark-langx/skylark",
    "skylark-langx/langx"
], function(skylark, langx) {
    var every = Array.prototype.every,
        forEach = Array.prototype.forEach,
        camelCase = langx.camelCase,
        dasherize = langx.dasherize;

    function maybeAddPx(name, value) {
        return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
    }

    var cssNumber = {
            'column-count': 1,
            'columns': 1,
            'font-weight': 1,
            'line-height': 1,
            'opacity': 1,
            'z-index': 1,
            'zoom': 1
        },
        classReCache = {

        };

    function classRE(name) {
        return name in classReCache ?
            classReCache[name] : (classReCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'));
    }

    // access className property while respecting SVGAnimatedString
    /*
     * Adds the specified class(es) to each element in the set of matched elements.
     * @param {HTMLElement} node
     * @param {String} value
     */
    function className(node, value) {
        var klass = node.className || '',
            svg = klass && klass.baseVal !== undefined

        if (value === undefined) return svg ? klass.baseVal : klass
        svg ? (klass.baseVal = value) : (node.className = value)
    }

    function disabled(elm, value ) {
        if (arguments.length < 2) {
            return !!this.dom.disabled;
        }

        elm.disabled = value;

        return this;
    }

    var elementDisplay = {};

    function defaultDisplay(nodeName) {
        var element, display
        if (!elementDisplay[nodeName]) {
            element = document.createElement(nodeName)
            document.body.appendChild(element)
            display = getStyles(element).getPropertyValue("display")
            element.parentNode.removeChild(element)
            display == "none" && (display = "block")
            elementDisplay[nodeName] = display
        }
        return elementDisplay[nodeName]
    }
    /*
     * Display the matched elements.
     * @param {HTMLElement} elm
     */
    function show(elm) {
        styler.css(elm, "display", "");
        if (styler.css(elm, "display") == "none") {
            styler.css(elm, "display", defaultDisplay(elm.nodeName));
        }
        return this;
    }

    function isInvisible(elm) {
        return styler.css(elm, "display") == "none" || styler.css(elm, "opacity") == 0;
    }

    /*
     * Hide the matched elements.
     * @param {HTMLElement} elm
     */
    function hide(elm) {
        styler.css(elm, "display", "none");
        return this;
    }

    /*
     * Adds the specified class(es) to each element in the set of matched elements.
     * @param {HTMLElement} elm
     * @param {String} name
     */
    function addClass(elm, name) {
        if (!name) return this
        var cls = className(elm),
            names;
        if (langx.isString(name)) {
            names = name.split(/\s+/g);
        } else {
            names = name;
        }
        names.forEach(function(klass) {
            var re = classRE(klass);
            if (!cls.match(re)) {
                cls += (cls ? " " : "") + klass;
            }
        });

        className(elm, cls);

        return this;
    }

    function getStyles( elem ) {

        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
        // IE throws on elements created in popups
        // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
        var view = elem.ownerDocument.defaultView;

        if ( !view || !view.opener ) {
            view = window;
        }

        return view.getComputedStyle( elem);
    }


    /*
     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.
     * @param {HTMLElement} elm
     * @param {String} property
     * @param {Any} value
     */
    function css(elm, property, value) {
        if (arguments.length < 3) {
            var computedStyle,
                computedStyle = getStyles(elm)
            if (langx.isString(property)) {
                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))
            } else if (langx.isArrayLike(property)) {
                var props = {}
                forEach.call(property, function(prop) {
                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))
                })
                return props
            }
        }

        var css = '';
        if (typeof(property) == 'string') {
            if (!value && value !== 0) {
                elm.style.removeProperty(dasherize(property));
            } else {
                css = dasherize(property) + ":" + maybeAddPx(property, value)
            }
        } else {
            for (key in property) {
                if (property[key] === undefined) {
                    continue;
                }
                if (!property[key] && property[key] !== 0) {
                    elm.style.removeProperty(dasherize(key));
                } else {
                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
                }
            }
        }

        elm.style.cssText += ';' + css;
        return this;
    }

    /*
     * Determine whether any of the matched elements are assigned the given class.
     * @param {HTMLElement} elm
     * @param {String} name
     */
    function hasClass(elm, name) {
        var re = classRE(name);
        return elm.className && elm.className.match(re);
    }

    /*
     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
     * @param {HTMLElement} elm
     * @param {String} name
     */
    function removeClass(elm, name) {
        if (name) {
            var cls = className(elm),
                names;

            if (langx.isString(name)) {
                names = name.split(/\s+/g);
            } else {
                names = name;
            }

            names.forEach(function(klass) {
                var re = classRE(klass);
                if (cls.match(re)) {
                    cls = cls.replace(re, " ");
                }
            });

            className(elm, cls.trim());
        } else {
            className(elm, "");
        }

        return this;
    }

    /*
     * Add or remove one or more classes from the specified element.
     * @param {HTMLElement} elm
     * @param {String} name
     * @param {} when
     */
    function toggleClass(elm, name, when) {
        var self = this;
        name.split(/\s+/g).forEach(function(klass) {
            if (when === undefined) {
                when = !self.hasClass(elm, klass);
            }
            if (when) {
                self.addClass(elm, klass);
            } else {
                self.removeClass(elm, klass)
            }
        });

        return self;
    }

    var styler = function() {
        return styler;
    };

    langx.mixin(styler, {
        autocssfix: false,
        cssHooks: {

        },

        addClass: addClass,
        className: className,
        css: css,
        disabled : disabled,        
        hasClass: hasClass,
        hide: hide,
        isInvisible: isInvisible,
        removeClass: removeClass,
        show: show,
        toggleClass: toggleClass
    });

    return skylark.attach("domx.styler", styler);
});
define('skylark-domx-styler/main',[
	"./styler",
	"skylark-domx-velm",
	"skylark-domx-query"	
],function(styler,velm,$){
	
    // from ./styler
    velm.delegate([
        "addClass",
        "className",
        "css",
        "hasClass",
        "hide",
        "isInvisible",
        "removeClass",
        "show",
        "toggleClass"
    ], styler);

    // properties

    var properties = [ 'position', 'left', 'top', 'right', 'bottom', 'width', 'height', 'border', 'borderLeft',
    'borderTop', 'borderRight', 'borderBottom', 'borderColor', 'display', 'overflow', 'margin', 'marginLeft', 'marginTop', 'marginRight', 'marginBottom', 'padding', 'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom', 'color',
    'background', 'backgroundColor', 'opacity', 'fontSize', 'fontWeight', 'textAlign', 'textDecoration', 'textTransform', 'cursor', 'zIndex' ];

    properties.forEach( function ( property ) {

        var method = property;

        velm.VisualElement.prototype[method ] = function (value) {

            this.css( property, value );

            return this;

        };

    });


    $.fn.style = $.wraps.wrapper_name_value(styler.css, styler);

    $.fn.css = $.wraps.wrapper_name_value(styler.css, styler);

    //hasClass(name)
    $.fn.hasClass = $.wraps.wrapper_some_chk(styler.hasClass, styler);

    //addClass(name)
    $.fn.addClass = $.wraps.wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className);

    //removeClass(name)
    $.fn.removeClass = $.wraps.wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className);

    //toogleClass(name,when)
    $.fn.toggleClass = $.wraps.wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className);

    $.fn.replaceClass = function(newClass, oldClass) {
        this.removeClass(oldClass);
        this.addClass(newClass);
        return this;
    };

    $.fn.replaceClass = function(newClass, oldClass) {
        this.removeClass(oldClass);
        this.addClass(newClass);
        return this;
    };
        
	return styler;
});
define('skylark-domx-styler', ['skylark-domx-styler/main'], function (main) { return main; });

define('skylark-domx-geom/geom',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-styler"
], function(skylark, langx, noder, styler) {
    var rootNodeRE = /^(?:body|html)$/i,
        px = langx.toPixel,
        offsetParent = noder.offsetParent,
        cachedScrollbarWidth;

    function scrollbarWidth() {
        if (cachedScrollbarWidth !== undefined) {
            return cachedScrollbarWidth;
        }
        var w1, w2,
            div = noder.createFragment("<div style=" +
                "'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>" +
                "<div style='height:300px;width:auto;'></div></div>")[0],
            innerDiv = div.childNodes[0];

        noder.append(document.body, div);

        w1 = innerDiv.offsetWidth;

        styler.css(div, "overflow", "scroll");

        w2 = innerDiv.offsetWidth;

        if (w1 === w2) {
            w2 = div[0].clientWidth;
        }

        noder.remove(div);

        return (cachedScrollbarWidth = w1 - w2);
    }
    /*
     * Get the widths of each border of the specified element.
     * @param {HTMLElement} elm
     */
    function borderExtents(elm) {
        if (noder.isWindow(elm)) {
            return {
                left : 0,
                top : 0,
                right : 0,
                bottom : 0
            }
        }        var s = getComputedStyle(elm);
        return {
            left: px(s.borderLeftWidth, elm),
            top: px(s.borderTopWidth, elm),
            right: px(s.borderRightWidth, elm),
            bottom: px(s.borderBottomWidth, elm)
        }
    }

    //viewport coordinate
    /*
     * Get or set the viewport position of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function boundingPosition(elm, coords) {
        if (coords === undefined) {
            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();
        } else {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                parentOffset = boundingPosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            relativePosition(elm, {
                top: coords.top - parentOffset.top - mex.top - pbex.top,
                left: coords.left - parentOffset.left - mex.left - pbex.left
            });
            return this;
        }
    }

    /*
     * Get or set the viewport rect of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function boundingRect(elm, coords) {
        if (coords === undefined) {
            return elm.getBoundingClientRect()
        } else {
            boundingPosition(elm, coords);
            size(elm, coords);
            return this;
        }
    }

    /*
     * Get or set the height of the specified element client box.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function clientHeight(elm, value) {
        if (value == undefined) {
            return clientSize(elm).height;
        } else {
            return clientSize(elm, {
                height: value
            });
        }
    }

    /*
     * Get or set the size of the specified element client box.
     * @param {HTMLElement} elm
     * @param {PlainObject} dimension
     */
    function clientSize(elm, dimension) {
        if (dimension == undefined) {
            return {
                width: elm.clientWidth,
                height: elm.clientHeight
            }
        } else {
            var isBorderBox = (styler.css(elm, "box-sizing") === "border-box"),
                props = {
                    width: dimension.width,
                    height: dimension.height
                };
            if (!isBorderBox) {
                var pex = paddingExtents(elm);

                if (props.width !== undefined) {
                    props.width = props.width - pex.left - pex.right;
                }

                if (props.height !== undefined) {
                    props.height = props.height - pex.top - pex.bottom;
                }
            } else {
                var bex = borderExtents(elm);

                if (props.width !== undefined) {
                    props.width = props.width + bex.left + bex.right;
                }

                if (props.height !== undefined) {
                    props.height = props.height + bex.top + bex.bottom;
                }

            }
            styler.css(elm, props);
            return this;
        }
        return {
            width: elm.clientWidth,
            height: elm.clientHeight
        };
    }

    /*
     * Get or set the width of the specified element client box.
     * @param {HTMLElement} elm
     * @param {PlainObject} dimension
     */
    function clientWidth(elm, value) {
        if (value == undefined) {
            return clientSize(elm).width;
        } else {
            clientSize(elm, {
                width: value
            });
            return this;
        }
    }

    /*
     * Get the rect of the specified element content box.
     * @param {HTMLElement} elm
     */
    function contentRect(elm) {
        var cs = clientSize(elm),
            pex = paddingExtents(elm);


        //// On Opera, offsetLeft includes the parent's border
        //if(has("opera")){
        //    pe.l += be.l;
        //    pe.t += be.t;
        //}
        return {
            left: pex.left,
            top: pex.top,
            width: cs.width - pex.left - pex.right,
            height: cs.height - pex.top - pex.bottom
        };
    }

    /*
     * Get the document size.
     * @param {HTMLDocument} doc
     */
    function getDocumentSize(doc) {
        var documentElement = doc.documentElement,
            body = doc.body,
            max = Math.max,
            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),
            clientWidth = max(documentElement.clientWidth, body.clientWidth),
            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),
            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),
            clientHeight = max(documentElement.clientHeight, body.clientHeight),
            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);

        return {
            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,
            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight
        };
    }

    /*
     * Get the document size.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function height(elm, value) {
        if (value == undefined) {
            return size(elm).height;
        } else {
            size(elm, {
                height: value
            });
            return this;
        }
    }

    /*
     * Get the widths of each margin of the specified element.
     * @param {HTMLElement} elm
     */
    function marginExtents(elm) {
        if (noder.isWindow(elm)) {
            return {
                left : 0,
                top : 0,
                right : 0,
                bottom : 0
            }
        }
        var s = getComputedStyle(elm);
        return {
            left: px(s.marginLeft),
            top: px(s.marginTop),
            right: px(s.marginRight),
            bottom: px(s.marginBottom),
        }
    }


    function marginRect(elm) {
        var obj = relativeRect(elm),
            me = marginExtents(elm);

        return {
            left: obj.left,
            top: obj.top,
            width: obj.width + me.left + me.right,
            height: obj.height + me.top + me.bottom
        };
    }


    function marginSize(elm) {
        var obj = size(elm),
            me = marginExtents(elm);

        return {
            width: obj.width + me.left + me.right,
            height: obj.height + me.top + me.bottom
        };
    }

    /*
     * Get the widths of each padding of the specified element.
     * @param {HTMLElement} elm
     */
    function paddingExtents(elm) {
        if (noder.isWindow(elm)) {
            return {
                left : 0,
                top : 0,
                right : 0,
                bottom : 0
            }
        }
        var s = getComputedStyle(elm);
        return {
            left: px(s.paddingLeft),
            top: px(s.paddingTop),
            right: px(s.paddingRight),
            bottom: px(s.paddingBottom),
        }
    }

    /*
     * Get or set the document position of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    //coordinate to the document
    function pagePosition(elm, coords) {
        if (coords === undefined) {
            var obj = elm.getBoundingClientRect()
            return {
                left: obj.left + window.pageXOffset,
                top: obj.top + window.pageYOffset
            }
        } else {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                parentOffset = pagePosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            relativePosition(elm, {
                top: coords.top - parentOffset.top - mex.top - pbex.top,
                left: coords.left - parentOffset.left - mex.left - pbex.left
            });
            return this;
        }
    }

    /*
     * Get or set the document rect of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function pageRect(elm, coords) {
        if (coords === undefined) {
            var obj = elm.getBoundingClientRect()
            return {
                left: obj.left + window.pageXOffset,
                top: obj.top + window.pageYOffset,
                width: Math.round(obj.width),
                height: Math.round(obj.height)
            }
        } else {
            pagePosition(elm, coords);
            size(elm, coords);
            return this;
        }
    }

    /*
     * Get or set the position of the specified element border box , relative to parent element.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    // coordinate relative to it's parent
    function relativePosition(elm, coords) {
        if (coords == undefined) {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                offset = boundingPosition(elm),
                parentOffset = boundingPosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - pbex.top, // - mex.top,
                left: offset.left - parentOffset.left - pbex.left, // - mex.left
            }
        } else {
            var props = {
                top: coords.top,
                left: coords.left
            }

            if (styler.css(elm, "position") == "static") {
                props['position'] = "relative";
            }
            styler.css(elm, props);
            return this;
        }
    }

    /*
     * Get or set the rect of the specified element border box , relatived to parent element.
     * @param {HTMLElement} elm
     * @param {PlainObject} coords
     */
    function relativeRect(elm, coords) {
        if (coords === undefined) {
            var // Get *real* offsetParent
                parent = offsetParent(elm),
                // Get correct offsets
                offset = boundingRect(elm),
                parentOffset = boundingPosition(parent),
                mex = marginExtents(elm),
                pbex = borderExtents(parent);

            // Subtract parent offsets and element margins
            return {
                top: offset.top - parentOffset.top - pbex.top, // - mex.top,
                left: offset.left - parentOffset.left - pbex.left, // - mex.left,
                width: offset.width,
                height: offset.height
            }
        } else {
            relativePosition(elm, coords);
            size(elm, coords);
            return this;
        }
    }
    /*
     * Scroll the specified element into view.
     * @param {HTMLElement} elm
     * @param {} align
     */
    function scrollIntoView(elm, align) {
        function getOffset(elm, rootElm) {
            var x, y, parent = elm;

            x = y = 0;
            while (parent && parent != rootElm && parent.nodeType) {
                x += parent.offsetLeft || 0;
                y += parent.offsetTop || 0;
                parent = parent.offsetParent;
            }

            return { x: x, y: y };
        }

        var parentElm = elm.parentNode;
        var x, y, width, height, parentWidth, parentHeight;
        var pos = getOffset(elm, parentElm);

        x = pos.x;
        y = pos.y;
        width = elm.offsetWidth;
        height = elm.offsetHeight;
        parentWidth = parentElm.clientWidth;
        parentHeight = parentElm.clientHeight;

        if (align == "end") {
            x -= parentWidth - width;
            y -= parentHeight - height;
        } else if (align == "center") {
            x -= (parentWidth / 2) - (width / 2);
            y -= (parentHeight / 2) - (height / 2);
        }

        parentElm.scrollLeft = x;
        parentElm.scrollTop = y;

        return this;
    }
    /*
     * Get or set the current horizontal position of the scroll bar for the specified element.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function scrollLeft(elm, value) {
        if (elm.nodeType === 9) {
            elm = elm.defaultView;
        }
        var hasScrollLeft = "scrollLeft" in elm;
        if (value === undefined) {
            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset
        } else {
            if (hasScrollLeft) {
                elm.scrollLeft = value;
            } else {
                elm.scrollTo(value, elm.scrollY);
            }
            return this;
        }
    }
    /*
     * Get or the current vertical position of the scroll bar for the specified element.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function scrollTop(elm, value) {
        if (elm.nodeType === 9) {
            elm = elm.defaultView;
        }
        var hasScrollTop = "scrollTop" in elm;

        if (value === undefined) {
            return hasScrollTop ? elm.scrollTop : elm.pageYOffset
        } else {
            if (hasScrollTop) {
                elm.scrollTop = value;
            } else {
                elm.scrollTo(elm.scrollX, value);
            }
            return this;
        }
    }
    /*
     * Get or set the size of the specified element border box.
     * @param {HTMLElement} elm
     * @param {PlainObject}dimension
     */
    function size(elm, dimension) {
        if (dimension == undefined) {
            if (langx.isWindow(elm)) {
                return {
                    width: elm.innerWidth,
                    height: elm.innerHeight
                }

            } else if (langx.isDocument(elm)) {
                return getDocumentSize(document);
            } else {
                return {
                    width: elm.offsetWidth,
                    height: elm.offsetHeight
                }
            }
        } else {
            var isBorderBox = (styler.css(elm, "box-sizing") === "border-box"),
                props = {
                    width: dimension.width,
                    height: dimension.height
                };
            if (!isBorderBox) {
                var pex = paddingExtents(elm),
                    bex = borderExtents(elm);

                if (props.width !== undefined && props.width !== "" && props.width !== null) {
                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;
                }

                if (props.height !== undefined && props.height !== "" && props.height !== null) {
                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;
                }
            }
            styler.css(elm, props);
            return this;
        }
    }
    /*
     * Get or set the size of the specified element border box.
     * @param {HTMLElement} elm
     * @param {Number} value
     */
    function width(elm, value) {
        if (value == undefined) {
            return size(elm).width;
        } else {
            size(elm, {
                width: value
            });
            return this;
        }
    }

    function geom() {
        return geom;
    }

    langx.mixin(geom, {
        borderExtents: borderExtents,
        //viewport coordinate
        boundingPosition: boundingPosition,

        boundingRect: boundingRect,

        clientHeight: clientHeight,

        clientSize: clientSize,

        clientWidth: clientWidth,

        contentRect: contentRect,

        getDocumentSize: getDocumentSize,

        height: height,

        marginExtents: marginExtents,

        marginRect: marginRect,

        marginSize: marginSize,

        offsetParent: offsetParent,

        paddingExtents: paddingExtents,

        //coordinate to the document
        pagePosition: pagePosition,

        pageRect: pageRect,

        // coordinate relative to it's parent
        relativePosition: relativePosition,

        relativeRect: relativeRect,

        scrollbarWidth: scrollbarWidth,

        scrollIntoView: scrollIntoView,

        scrollLeft: scrollLeft,

        scrollTop: scrollTop,

        size: size,

        width: width
    });

    ( function() {
        var max = Math.max,
            abs = Math.abs,
            rhorizontal = /left|center|right/,
            rvertical = /top|center|bottom/,
            roffset = /[\+\-]\d+(\.[\d]+)?%?/,
            rposition = /^\w+/,
            rpercent = /%$/;

        function getOffsets( offsets, width, height ) {
            return [
                parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),
                parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )
            ];
        }

        function parseCss( element, property ) {
            return parseInt( styler.css( element, property ), 10 ) || 0;
        }

        function getDimensions( raw ) {
            if ( raw.nodeType === 9 ) {
                return {
                    size: size(raw),
                    offset: { top: 0, left: 0 }
                };
            }
            if ( noder.isWindow( raw ) ) {
                return {
                    size: size(raw),
                    offset: { 
                        top: scrollTop(raw), 
                        left: scrollLeft(raw) 
                    }
                };
            }
            if ( raw.preventDefault ) {
                return {
                    size : {
                        width: 0,
                        height: 0
                    },
                    offset: { 
                        top: raw.pageY, 
                        left: raw.pageX 
                    }
                };
            }
            return {
                size: size(raw),
                offset: pagePosition(raw)
            };
        }

        function getScrollInfo( within ) {
            var overflowX = within.isWindow || within.isDocument ? "" :
                    styler.css(within.element,"overflow-x" ),
                overflowY = within.isWindow || within.isDocument ? "" :
                    styler.css(within.element,"overflow-y" ),
                hasOverflowX = overflowX === "scroll" ||
                    ( overflowX === "auto" && within.width < scrollWidth(within.element) ),
                hasOverflowY = overflowY === "scroll" ||
                    ( overflowY === "auto" && within.height < scrollHeight(within.element));
            return {
                width: hasOverflowY ? scrollbarWidth() : 0,
                height: hasOverflowX ? scrollbarWidth() : 0
            };
        }

        function getWithinInfo( element ) {
            var withinElement = element || window,
                isWindow = noder.isWindow( withinElement),
                isDocument = !!withinElement && withinElement.nodeType === 9,
                hasOffset = !isWindow && !isDocument,
                msize = marginSize(withinElement);
            return {
                element: withinElement,
                isWindow: isWindow,
                isDocument: isDocument,
                offset: hasOffset ? pagePosition(element) : { left: 0, top: 0 },
                scrollLeft: scrollLeft(withinElement),
                scrollTop: scrollTop(withinElement),
                width: msize.width,
                height: msize.height
            };
        }

        function posit(elm,options ) {
            // Make a copy, we don't want to modify arguments
            options = langx.extend( {}, options );

            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,
                target = options.of,
                within = getWithinInfo( options.within ),
                scrollInfo = getScrollInfo( within ),
                collision = ( options.collision || "flip" ).split( " " ),
                offsets = {};

            dimensions = getDimensions( target );
            if ( target.preventDefault ) {

                // Force left top to allow flipping
                options.at = "left top";
            }
            targetWidth = dimensions.size.width;
            targetHeight = dimensions.size.height;
            targetOffset = dimensions.offset;

            // Clone to reuse original targetOffset later
            basePosition = langx.extend( {}, targetOffset );

            // Force my and at to have valid horizontal and vertical positions
            // if a value is missing or invalid, it will be converted to center
            langx.each( [ "my", "at" ], function() {
                var pos = ( options[ this ] || "" ).split( " " ),
                    horizontalOffset,
                    verticalOffset;

                if ( pos.length === 1 ) {
                    pos = rhorizontal.test( pos[ 0 ] ) ?
                        pos.concat( [ "center" ] ) :
                        rvertical.test( pos[ 0 ] ) ?
                            [ "center" ].concat( pos ) :
                            [ "center", "center" ];
                }
                pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : "center";
                pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : "center";

                // Calculate offsets
                horizontalOffset = roffset.exec( pos[ 0 ] );
                verticalOffset = roffset.exec( pos[ 1 ] );
                offsets[ this ] = [
                    horizontalOffset ? horizontalOffset[ 0 ] : 0,
                    verticalOffset ? verticalOffset[ 0 ] : 0
                ];

                // Reduce to just the positions without the offsets
                options[ this ] = [
                    rposition.exec( pos[ 0 ] )[ 0 ],
                    rposition.exec( pos[ 1 ] )[ 0 ]
                ];
            } );

            // Normalize collision option
            if ( collision.length === 1 ) {
                collision[ 1 ] = collision[ 0 ];
            }

            if ( options.at[ 0 ] === "right" ) {
                basePosition.left += targetWidth;
            } else if ( options.at[ 0 ] === "center" ) {
                basePosition.left += targetWidth / 2;
            }

            if ( options.at[ 1 ] === "bottom" ) {
                basePosition.top += targetHeight;
            } else if ( options.at[ 1 ] === "center" ) {
                basePosition.top += targetHeight / 2;
            }

            atOffset = getOffsets( offsets.at, targetWidth, targetHeight );
            basePosition.left += atOffset[ 0 ];
            basePosition.top += atOffset[ 1 ];

            return ( function(elem) {
                var collisionPosition, using,
                    msize = marginSize(elem),
                    elemWidth = msize.width,
                    elemHeight = msize.height,
                    marginLeft = parseCss( elem, "marginLeft" ),
                    marginTop = parseCss( elem, "marginTop" ),
                    collisionWidth = elemWidth + marginLeft + parseCss( elem, "marginRight" ) +
                        scrollInfo.width,
                    collisionHeight = elemHeight + marginTop + parseCss( elem, "marginBottom" ) +
                        scrollInfo.height,
                    position = langx.extend( {}, basePosition ),
                    myOffset = getOffsets( offsets.my, msize.width, msize.height);

                if ( options.my[ 0 ] === "right" ) {
                    position.left -= elemWidth;
                } else if ( options.my[ 0 ] === "center" ) {
                    position.left -= elemWidth / 2;
                }

                if ( options.my[ 1 ] === "bottom" ) {
                    position.top -= elemHeight;
                } else if ( options.my[ 1 ] === "center" ) {
                    position.top -= elemHeight / 2;
                }

                position.left += myOffset[ 0 ];
                position.top += myOffset[ 1 ];

                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };

                langx.each( [ "left", "top" ], function( i, dir ) {
                    if ( positions[ collision[ i ] ] ) {
                        positions[ collision[ i ] ][ dir ]( position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        } );
                    }
                } );

                if ( options.using ) {

                    // Adds feedback as second argument to using callback, if present
                    using = function( props ) {
                        var left = targetOffset.left - position.left,
                            right = left + targetWidth - elemWidth,
                            top = targetOffset.top - position.top,
                            bottom = top + targetHeight - elemHeight,
                            feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                            };
                        if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {
                            feedback.horizontal = "center";
                        }
                        if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {
                            feedback.vertical = "middle";
                        }
                        if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {
                            feedback.important = "horizontal";
                        } else {
                            feedback.important = "vertical";
                        }
                        options.using.call( this, props, feedback );
                    };
                }

                pagePosition(elem, langx.extend( position, { using: using } ));
            })(elm);
        }

        var positions = {
            fit: {
                left: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,
                        outerWidth = within.width,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = withinOffset - collisionPosLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,
                        newOverRight;

                    // Element is wider than within
                    if ( data.collisionWidth > outerWidth ) {

                        // Element is initially over the left side of within
                        if ( overLeft > 0 && overRight <= 0 ) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -
                                withinOffset;
                            position.left += overLeft - newOverRight;

                        // Element is initially over right side of within
                        } else if ( overRight > 0 && overLeft <= 0 ) {
                            position.left = withinOffset;

                        // Element is initially over both left and right sides of within
                        } else {
                            if ( overLeft > overRight ) {
                                position.left = withinOffset + outerWidth - data.collisionWidth;
                            } else {
                                position.left = withinOffset;
                            }
                        }

                    // Too far left -> align with left edge
                    } else if ( overLeft > 0 ) {
                        position.left += overLeft;

                    // Too far right -> align with right edge
                    } else if ( overRight > 0 ) {
                        position.left -= overRight;

                    // Adjust based on position and margin
                    } else {
                        position.left = max( position.left - collisionPosLeft, position.left );
                    }
                },
                top: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.isWindow ? within.scrollTop : within.offset.top,
                        outerHeight = data.within.height,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = withinOffset - collisionPosTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,
                        newOverBottom;

                    // Element is taller than within
                    if ( data.collisionHeight > outerHeight ) {

                        // Element is initially over the top of within
                        if ( overTop > 0 && overBottom <= 0 ) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -
                                withinOffset;
                            position.top += overTop - newOverBottom;

                        // Element is initially over bottom of within
                        } else if ( overBottom > 0 && overTop <= 0 ) {
                            position.top = withinOffset;

                        // Element is initially over both top and bottom of within
                        } else {
                            if ( overTop > overBottom ) {
                                position.top = withinOffset + outerHeight - data.collisionHeight;
                            } else {
                                position.top = withinOffset;
                            }
                        }

                    // Too far up -> align with top
                    } else if ( overTop > 0 ) {
                        position.top += overTop;

                    // Too far down -> align with bottom edge
                    } else if ( overBottom > 0 ) {
                        position.top -= overBottom;

                    // Adjust based on position and margin
                    } else {
                        position.top = max( position.top - collisionPosTop, position.top );
                    }
                }
            },
            flip: {
                left: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.offset.left + within.scrollLeft,
                        outerWidth = within.width,
                        offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,
                        collisionPosLeft = position.left - data.collisionPosition.marginLeft,
                        overLeft = collisionPosLeft - offsetLeft,
                        overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,
                        myOffset = data.my[ 0 ] === "left" ?
                            -data.elemWidth :
                            data.my[ 0 ] === "right" ?
                                data.elemWidth :
                                0,
                        atOffset = data.at[ 0 ] === "left" ?
                            data.targetWidth :
                            data.at[ 0 ] === "right" ?
                                -data.targetWidth :
                                0,
                        offset = -2 * data.offset[ 0 ],
                        newOverRight,
                        newOverLeft;

                    if ( overLeft < 0 ) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -
                            outerWidth - withinOffset;
                        if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {
                            position.left += myOffset + atOffset + offset;
                        }
                    } else if ( overRight > 0 ) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +
                            atOffset + offset - offsetLeft;
                        if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {
                            position.left += myOffset + atOffset + offset;
                        }
                    }
                },
                top: function( position, data ) {
                    var within = data.within,
                        withinOffset = within.offset.top + within.scrollTop,
                        outerHeight = within.height,
                        offsetTop = within.isWindow ? within.scrollTop : within.offset.top,
                        collisionPosTop = position.top - data.collisionPosition.marginTop,
                        overTop = collisionPosTop - offsetTop,
                        overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,
                        top = data.my[ 1 ] === "top",
                        myOffset = top ?
                            -data.elemHeight :
                            data.my[ 1 ] === "bottom" ?
                                data.elemHeight :
                                0,
                        atOffset = data.at[ 1 ] === "top" ?
                            data.targetHeight :
                            data.at[ 1 ] === "bottom" ?
                                -data.targetHeight :
                                0,
                        offset = -2 * data.offset[ 1 ],
                        newOverTop,
                        newOverBottom;
                    if ( overTop < 0 ) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -
                            outerHeight - withinOffset;
                        if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {
                            position.top += myOffset + atOffset + offset;
                        }
                    } else if ( overBottom > 0 ) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +
                            offset - offsetTop;
                        if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {
                            position.top += myOffset + atOffset + offset;
                        }
                    }
                }
            },
            flipfit: {
                left: function() {
                    positions.flip.left.apply( this, arguments );
                    positions.fit.left.apply( this, arguments );
                },
                top: function() {
                    positions.flip.top.apply( this, arguments );
                    positions.fit.top.apply( this, arguments );
                }
            }
        };

        geom.posit = posit;
    })();

    return skylark.attach("domx.geom", geom);
});
define('skylark-domx-geom/main',[
    "skylark-langx/langx",
    "./geom",
    "skylark-domx-velm",
    "skylark-domx-query"        
],function(langx,geom,velm,$){
   // from ./geom
    velm.delegate([
        "borderExtents",
        "boundingPosition",
        "boundingRect",
        "clientHeight",
        "clientSize",
        "clientWidth",
        "contentRect",
        "height",
        "marginExtents",
        "offsetParent",
        "paddingExtents",
        "pagePosition",
        "pageRect",
        "relativePosition",
        "relativeRect",
        "scrollIntoView",
        "scrollLeft",
        "scrollTop",
        "size",
        "width"
    ], geom);

    $.fn.offset = $.wraps.wrapper_value(geom.pagePosition, geom, geom.pagePosition);

    $.fn.scrollTop = $.wraps.wrapper_value(geom.scrollTop, geom);

    $.fn.scrollLeft = $.wraps.wrapper_value(geom.scrollLeft, geom);

    $.fn.position =  function(options) {
        if (!this.length) {
            return this;
        }

        if (options) {
            if (options.of && options.of.length) {
                options = langx.clone(options);
                options.of = options.of[0];
            }
            return this.each( function() {
                geom.posit(this,options);
            });
        } else {
            var elem = this[0];

            return geom.relativePosition(elem);

        }             
    };

    $.fn.offsetParent = $.wraps.wrapper_map(geom.offsetParent, geom);


    $.fn.size = $.wraps.wrapper_value(geom.size, geom);

    $.fn.width = $.wraps.wrapper_value(geom.width, geom, geom.width);

    $.fn.height = $.wraps.wrapper_value(geom.height, geom, geom.height);

    $.fn.clientSize = $.wraps.wrapper_value(geom.clientSize, geom.clientSize);
    
    ['width', 'height'].forEach(function(dimension) {
        var offset, Dimension = dimension.replace(/./, function(m) {
            return m[0].toUpperCase()
        });

        $.fn['outer' + Dimension] = function(margin, value) {
            if (arguments.length) {
                if (typeof margin !== 'boolean') {
                    value = margin;
                    margin = false;
                }
            } else {
                margin = false;
                value = undefined;
            }

            if (value === undefined) {
                var el = this[0];
                if (!el) {
                    return undefined;
                }
                var cb = geom.size(el);
                if (margin) {
                    var me = geom.marginExtents(el);
                    cb.width = cb.width + me.left + me.right;
                    cb.height = cb.height + me.top + me.bottom;
                }
                return dimension === "width" ? cb.width : cb.height;
            } else {
                return this.each(function(idx, el) {
                    var mb = {};
                    var me = geom.marginExtents(el);
                    if (dimension === "width") {
                        mb.width = value;
                        if (margin) {
                            mb.width = mb.width - me.left - me.right
                        }
                    } else {
                        mb.height = value;
                        if (margin) {
                            mb.height = mb.height - me.top - me.bottom;
                        }
                    }
                    geom.size(el, mb);
                })

            }
        };
    })

    $.fn.innerWidth = $.wraps.wrapper_value(geom.clientWidth, geom, geom.clientWidth);

    $.fn.innerHeight = $.wraps.wrapper_value(geom.clientHeight, geom, geom.clientHeight);

    return geom;
});
define('skylark-domx-geom', ['skylark-domx-geom/main'], function (main) { return main; });

define('skylark-domx-fx/fx',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-browser",
    "skylark-domx-noder",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "skylark-domx-eventer"
], function(skylark, langx, browser, noder, geom, styler, eventer) {
    var animationName,
        animationDuration,
        animationTiming,
        animationDelay,
        transitionProperty,
        transitionDuration,
        transitionTiming,
        transitionDelay,

        animationEnd = browser.normalizeCssEvent('AnimationEnd'),
        transitionEnd = browser.normalizeCssEvent('TransitionEnd'),

        supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,
        transform = browser.css3PropPrefix + "transform",
        cssReset = {};


    cssReset[animationName = browser.normalizeCssProperty("animation-name")] =
        cssReset[animationDuration = browser.normalizeCssProperty("animation-duration")] =
        cssReset[animationDelay = browser.normalizeCssProperty("animation-delay")] =
        cssReset[animationTiming = browser.normalizeCssProperty("animation-timing-function")] = "";

    cssReset[transitionProperty = browser.normalizeCssProperty("transition-property")] =
        cssReset[transitionDuration = browser.normalizeCssProperty("transition-duration")] =
        cssReset[transitionDelay = browser.normalizeCssProperty("transition-delay")] =
        cssReset[transitionTiming = browser.normalizeCssProperty("transition-timing-function")] = "";



    /*   
     * Perform a custom animation of a set of CSS properties.
     * @param {Object} elm  
     * @param {Number or String} properties
     * @param {String} ease
     * @param {Number or String} duration
     * @param {Function} callback
     * @param {Number or String} delay
     */
    function animate(elm, properties, duration, ease, callback, delay) {
        var key,
            cssValues = {},
            cssProperties = [],
            transforms = "",
            that = this,
            endEvent,
            wrappedCallback,
            fired = false,
            hasScrollTop = false,
            resetClipAuto = false;

        if (langx.isPlainObject(duration)) {
            ease = duration.easing;
            callback = duration.complete;
            delay = duration.delay;
            duration = duration.duration;
        }

        if (langx.isString(duration)) {
            duration = fx.speeds[duration];
        }
        if (duration === undefined) {
            duration = fx.speeds.normal;
        }
        duration = duration / 1000;
        if (fx.off) {
            duration = 0;
        }

        if (langx.isFunction(ease)) {
            callback = ease;
            eace = "swing";
        } else {
            ease = ease || "swing";
        }

        if (delay) {
            delay = delay / 1000;
        } else {
            delay = 0;
        }

        if (langx.isString(properties)) {
            // keyframe animation
            cssValues[animationName] = properties;
            cssValues[animationDuration] = duration + "s";
            cssValues[animationTiming] = ease;
            endEvent = animationEnd;
        } else {
            // CSS transitions
            for (key in properties) {
                var v = properties[key];
                if (supportedTransforms.test(key)) {
                    transforms += key + "(" + v + ") ";
                } else {
                    if (key === "scrollTop") {
                        hasScrollTop = true;
                    }
                    if (key == "clip" && langx.isPlainObject(v)) {
                        cssValues[key] = "rect(" + v.top+"px,"+ v.right +"px,"+ v.bottom +"px,"+ v.left+"px)";
                        if (styler.css(elm,"clip") == "auto") {
                            var size = geom.size(elm);
                            styler.css(elm,"clip","rect("+"0px,"+ size.width +"px,"+ size.height +"px,"+"0px)");  
                            resetClipAuto = true;
                        }

                    } else {
                        cssValues[key] = v;
                    }
                    cssProperties.push(langx.dasherize(key));
                }
            }
            endEvent = transitionEnd;
        }

        if (transforms) {
            cssValues[transform] = transforms;
            cssProperties.push(transform);
        }

        if (duration > 0 && langx.isPlainObject(properties)) {
            cssValues[transitionProperty] = cssProperties.join(", ");
            cssValues[transitionDuration] = duration + "s";
            cssValues[transitionDelay] = delay + "s";
            cssValues[transitionTiming] = ease;
        }

        wrappedCallback = function(event) {
            fired = true;
            if (event) {
                if (event.target !== event.currentTarget) {
                    return // makes sure the event didn't bubble from "below"
                }
                eventer.off(event.target, endEvent, wrappedCallback)
            } else {
                eventer.off(elm, animationEnd, wrappedCallback) // triggered by setTimeout
            }
            styler.css(elm, cssReset);
            if (resetClipAuto) {
 //               styler.css(elm,"clip","auto");
            }
            callback && callback.call(this);
        };

        if (duration > 0) {
            eventer.on(elm, endEvent, wrappedCallback);
            // transitionEnd is not always firing on older Android phones
            // so make sure it gets fired
            langx.debounce(function() {
                if (fired) {
                    return;
                }
                wrappedCallback.call(that);
            }, ((duration + delay) * 1000) + 25)();
        }

        // trigger page reflow so new elements can animate
        elm.clientLeft;

        styler.css(elm, cssValues);

        if (duration <= 0) {
            langx.debounce(function() {
                if (fired) {
                    return;
                }
                wrappedCallback.call(that);
            }, 0)();
        }

        if (hasScrollTop) {
            scrollToTop(elm, properties["scrollTop"], duration, callback);
        }

        return this;
    }

    /*   
     * Display an element.
     * @param {Object} elm  
     * @param {String} speed
     * @param {Function} callback
     */
    function show(elm, speed, callback) {
        styler.show(elm);
        if (speed) {
            if (!callback && langx.isFunction(speed)) {
                callback = speed;
                speed = "normal";
            }
            styler.css(elm, "opacity", 0)
            animate(elm, { opacity: 1, scale: "1,1" }, speed, callback);
        }
        return this;
    }


    /*   
     * Hide an element.
     * @param {Object} elm  
     * @param {String} speed
     * @param {Function} callback
     */
    function hide(elm, speed, callback) {
        if (speed) {
            if (!callback && langx.isFunction(speed)) {
                callback = speed;
                speed = "normal";
            }
            animate(elm, { opacity: 0, scale: "0,0" }, speed, function() {
                styler.hide(elm);
                if (callback) {
                    callback.call(elm);
                }
            });
        } else {
            styler.hide(elm);
        }
        return this;
    }

    /*   
     * Set the vertical position of the scroll bar for an element.
     * @param {Object} elm  
     * @param {Number or String} pos
     * @param {Number or String} speed
     * @param {Function} callback
     */
    function scrollToTop(elm, pos, speed, callback) {
        var scrollFrom = parseInt(elm.scrollTop),
            i = 0,
            runEvery = 5, // run every 5ms
            freq = speed * 1000 / runEvery,
            scrollTo = parseInt(pos);

        var interval = setInterval(function() {
            i++;

            if (i <= freq) elm.scrollTop = (scrollTo - scrollFrom) / freq * i + scrollFrom;

            if (i >= freq + 1) {
                clearInterval(interval);
                if (callback) langx.debounce(callback, 1000)();
            }
        }, runEvery);
    }

    /*   
     * Display or hide an element.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {Function} callback
     */
    function toggle(elm, speed, callback) {
        if (styler.isInvisible(elm)) {
            show(elm, speed, callback);
        } else {
            hide(elm, speed, callback);
        }
        return this;
    }

    /*   
     * Adjust the opacity of an element.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {Number or String} opacity
     * @param {String} easing
     * @param {Function} callback
     */
    function fadeTo(elm, speed, opacity, easing, callback) {
        animate(elm, { opacity: opacity }, speed, easing, callback);
        return this;
    }


    /*   
     * Display an element by fading them to opaque.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {String} easing
     * @param {Function} callback
     */
    function fadeIn(elm, speed, easing, callback) {
        var target = styler.css(elm, "opacity");
        if (target > 0) {
            styler.css(elm, "opacity", 0);
        } else {
            target = 1;
        }
        styler.show(elm);

        fadeTo(elm, speed, target, easing, callback);

        return this;
    }

    /*   
     * Hide an element by fading them to transparent.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {String} easing
     * @param {Function} callback
     */
    function fadeOut(elm, speed, easing, callback) {
        var _elm = elm,
            complete,
            opacity = styler.css(elm,"opacity"),
            options = {};

        if (langx.isPlainObject(speed)) {
            options.easing = speed.easing;
            options.duration = speed.duration;
            complete = speed.complete;
        } else {
            options.duration = speed;
            if (callback) {
                complete = callback;
                options.easing = easing;
            } else {
                complete = easing;
            }
        }
        options.complete = function() {
            styler.css(elm,"opacity",opacity);
            styler.hide(elm);
            if (complete) {
                complete.call(elm);
            }
        }

        fadeTo(elm, options, 0);

        return this;
    }

    /*   
     * Display or hide an element by animating its opacity.
     * @param {Object} elm  
     * @param {Number or String} speed
     * @param {String} ceasing
     * @param {Function} callback
     */
    function fadeToggle(elm, speed, ceasing, allback) {
        if (styler.isInvisible(elm)) {
            fadeIn(elm, speed, easing, callback);
        } else {
            fadeOut(elm, speed, easing, callback);
        }
        return this;
    }

    /*   
     * Display an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideDown(elm, duration, callback) {

        // get the element position to restore it then
        var position = styler.css(elm, 'position');

        // show element if it is hidden
        show(elm);

        // place it so it displays as usually but hidden
        styler.css(elm, {
            position: 'absolute',
            visibility: 'hidden'
        });

        // get naturally height, margin, padding
        var marginTop = styler.css(elm, 'margin-top');
        var marginBottom = styler.css(elm, 'margin-bottom');
        var paddingTop = styler.css(elm, 'padding-top');
        var paddingBottom = styler.css(elm, 'padding-bottom');
        var height = styler.css(elm, 'height');

        // set initial css for animation
        styler.css(elm, {
            position: position,
            visibility: 'visible',
            overflow: 'hidden',
            height: 0,
            marginTop: 0,
            marginBottom: 0,
            paddingTop: 0,
            paddingBottom: 0
        });

        // animate to gotten height, margin and padding
        animate(elm, {
            height: height,
            marginTop: marginTop,
            marginBottom: marginBottom,
            paddingTop: paddingTop,
            paddingBottom: paddingBottom
        }, {
            duration: duration,
            complete: function() {
                if (callback) {
                    callback.apply(elm);
                }
            }
        });

        return this;
    }

    /*   
     * Hide an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideUp(elm, duration, callback) {
        // active the function only if the element is visible
        if (geom.height(elm) > 0) {

            // get the element position to restore it then
            var position = styler.css(elm, 'position');

            // get the element height, margin and padding to restore them then
            var height = styler.css(elm, 'height');
            var marginTop = styler.css(elm, 'margin-top');
            var marginBottom = styler.css(elm, 'margin-bottom');
            var paddingTop = styler.css(elm, 'padding-top');
            var paddingBottom = styler.css(elm, 'padding-bottom');

            // set initial css for animation
            styler.css(elm, {
                visibility: 'visible',
                overflow: 'hidden',
                height: height,
                marginTop: marginTop,
                marginBottom: marginBottom,
                paddingTop: paddingTop,
                paddingBottom: paddingBottom
            });

            // animate element height, margin and padding to zero
            animate(elm, {
                height: 0,
                marginTop: 0,
                marginBottom: 0,
                paddingTop: 0,
                paddingBottom: 0
            }, {
                // callback : restore the element position, height, margin and padding to original values
                duration: duration,
                queue: false,
                complete: function() {
                    hide(elm);
                    styler.css(elm, {
                        visibility: 'visible',
                        overflow: 'hidden',
                        height: height,
                        marginTop: marginTop,
                        marginBottom: marginBottom,
                        paddingTop: paddingTop,
                        paddingBottom: paddingBottom
                    });
                    if (callback) {
                        callback.apply(elm);
                    }
                }
            });
        }
        return this;
    }


    /*   
     * Display or hide an element with a sliding motion.
     * @param {Object} elm  
     * @param {Number or String} duration
     * @param {Function} callback
     */
    function slideToggle(elm, duration, callback) {

        // if the element is hidden, slideDown !
        if (geom.height(elm) == 0) {
            slideDown(elm, duration, callback);
        }
        // if the element is visible, slideUp !
        else {
            slideUp(elm, duration, callback);
        }
        return this;
    }

    function emulateTransitionEnd(elm,duration) {
        var called = false;
        eventer.one(elm,'transitionEnd', function () { 
            called = true;
        })
        var callback = function () { 
            if (!called) {
                eventer.trigger(elm,browser.support.transition.end) 
            }
        };
        setTimeout(callback, duration);
        
        return this;
    } 

    /*   
     *
     * @param {Node} elm
     * @param {Node} params
     */
    function overlay(elm, params) {
        var overlayDiv = noder.createElement("div", params);
        styler.css(overlayDiv, {
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            zIndex: 0x7FFFFFFF,
            opacity: 0.7
        });
        elm.appendChild(overlayDiv);
        return overlayDiv;

    }
    
    /*   
     * Replace an old node with the specified node.
     * @param {HTMLElement} elm
     * @param {Node} params
     */
    function throb(elm, params) {
        params = params || {};
        var self = this,
            text = params.text,
            style = params.style,
            time = params.time,
            callback = params.callback,
            timer,

            throbber = noder.createElement("div", {
                "class": params.className || "throbber"
            }),
            _overlay = overlay(throbber, {
                "class": 'overlay fade'
            }),
            throb = noder.createElement("div", {
                "class": "throb"
            }),
            textNode = noder.createTextNode(text || ""),
            remove = function() {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                if (throbber) {
                    noder.remove(throbber);
                    throbber = null;
                }
            },
            update = function(params) {
                if (params && params.text && throbber) {
                    textNode.nodeValue = params.text;
                }
            };
        if (params.style) {
            styler.css(throbber,params.style);
        }
        throb.appendChild(textNode);
        throbber.appendChild(throb);
        elm.appendChild(throbber);
        var end = function() {
            remove();
            if (callback) callback();
        };
        if (time) {
            timer = setTimeout(end, time);
        }

        return {
            remove: remove,
            update: update
        };
    }

    function fx() {
        return fx;
    }

    langx.mixin(fx, {
        off: false,

        speeds: {
            normal: 400,
            fast: 200,
            slow: 600
        },

        animate,
        emulateTransitionEnd,
        fadeIn,
        fadeOut,
        fadeTo,
        fadeToggle,
        hide,
        scrollToTop,

        slideDown,
        slideToggle,
        slideUp,
        show,
        throb,
        toggle
    });

    return skylark.attach("domx.fx", fx);
});
define('skylark-domx-fx/main',[
	"./fx",
	"skylark-domx-velm",
	"skylark-domx-query"	
],function(fx,velm,$){
    // from ./fx
    velm.delegate([
        "animate",
        "emulateTransitionEnd",
        "fadeIn",
        "fadeOut",
        "fadeTo",
        "fadeToggle",
        "hide",
        "scrollToTop",
        "slideDown",
        "slideToggle",
        "slideUp",
        "show",
        "toggle"
    ], fx);

    $.fn.hide =  $.wraps.wrapper_every_act(fx.hide, fx);

    $.fn.animate = $.wraps.wrapper_every_act(fx.animate, fx);
    $.fn.emulateTransitionEnd = $.wraps.wrapper_every_act(fx.emulateTransitionEnd, fx);

    $.fn.show = $.wraps.wrapper_every_act(fx.show, fx);
    $.fn.hide = $.wraps.wrapper_every_act(fx.hide, fx);
    $.fn.toogle = $.wraps.wrapper_every_act(fx.toogle, fx);
    $.fn.fadeTo = $.wraps.wrapper_every_act(fx.fadeTo, fx);
    $.fn.fadeIn = $.wraps.wrapper_every_act(fx.fadeIn, fx);
    $.fn.fadeOut = $.wraps.wrapper_every_act(fx.fadeOut, fx);
    $.fn.fadeToggle = $.wraps.wrapper_every_act(fx.fadeToggle, fx);

    $.fn.slideDown = $.wraps.wrapper_every_act(fx.slideDown, fx);
    $.fn.slideToggle = $.wraps.wrapper_every_act(fx.slideToggle, fx);
    $.fn.slideUp = $.wraps.wrapper_every_act(fx.slideUp, fx);

	return fx;
});
define('skylark-domx-fx', ['skylark-domx-fx/main'], function (main) { return main; });

define('skylark-jquery/core',[
	"skylark-langx/skylark",
	"skylark-langx/langx",
	"skylark-domx-browser",
	"skylark-domx-noder",
	"skylark-domx-data",
	"skylark-domx-eventer",
	"skylark-domx-finder",
	"skylark-domx-forms",
	"skylark-domx-fx",
	"skylark-domx-styler",
	"skylark-domx-query"
],function(skylark,langx,browser,noder,datax,eventer,finder,forms,fx,styler,query){
	var filter = Array.prototype.filter,
		slice = Array.prototype.slice;

    (function($){
	    $.fn.jquery = '2.2.0';

	    $.browser = browser;
	    
	    $.camelCase = langx.camelCase;

		$.cleanData = function( elems ) {
			var elem,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				datax.cleanData(elem);
			}
		};

		$.removeData = function(elm,name) {
			datax.removeData(elm,name);
		}
	
	    $.each = langx.each;

	    $.extend = langx.extend;

	    $.grep = function(elements, callback) {
	        return filter.call(elements, callback)
	    };

	    $.attr = function(elm,name) {
	    	return datax.attr(elm,name);
	    };

	    $.isArray = langx.isArray;
	    $.isEmptyObject = langx.isEmptyObject;
	    $.isFunction = langx.isFunction;
	    $.isWindow = langx.isWindow;
	    $.isPlainObject = langx.isPlainObject;
        $.isNumeric = langx.isNumber;

	    $.inArray = langx.inArray;

	    $.makeArray = langx.makeArray;
	    $.map = langx.map;  // The behavior is somewhat different from the original jquery.

	    $.noop = function() {
	    };

	    $.parseJSON = window.JSON.parse;

	    $.proxy = langx.proxy;

	    $.trim = langx.trim;
	    $.type = langx.type;

	    $.fn.extend = function(props) {
	        langx.mixin($.fn, props);
	    };


    })(query);

    (function($){
        $.Event = function Event(src, props) {
            if (langx.isString(src)) {
            	var type = src;
            	return eventer.create(type, props);
	        }
            return eventer.proxy(src, props);
        };

        $.event = {};

	    $.event.special = eventer.special;

	    $.fn.submit = function(callback) {
	        if (0 in arguments) this.bind('submit', callback)
	        else if (this.length) {
	            var event = $.Event('submit')
	            this.eq(0).trigger(event)
	            if (!event.isDefaultPrevented()) this.get(0).submit()
	        }
	        return this
	    };

	    // event
	    $.fn.triggerHandler = $.fn.trigger;

	    $.fn.delegate = function(selector, event, callback) {
	        return this.on(event, selector, callback)
	    };

	    $.fn.undelegate = function(selector, event, callback) {
	        return this.off(event, selector, callback)
	    };

	    $.fn.live = function(event, callback) {
	        $(document.body).delegate(this.selector, event, callback)
	        return this
	    };

	    $.fn.die = function(event, callback) {
	        $(document.body).undelegate(this.selector, event, callback)
	        return this
	    };

	    $.fn.bind = function(event, selector, data, callback) {
	        return this.on(event, selector, data, callback)
	    };

	    $.fn.unbind = function(event, callback) {
	        return this.off(event, callback)
	    };

	    $.fn.ready = function(callback) {
	        eventer.ready(callback);
	        return this;
	    };

	    $.fn.stop = function() {
	        // todo
	        return this;
	    };

	    $.fn.moveto = function(x, y) {
	        return this.animate({
	            left: x + "px",
	            top: y + "px"
	        }, 0.4);

	    };

	    $.ready = eventer.ready;

	    $.on = eventer.on;

	    $.off = eventer.off;
    })(query);

    (function($){
	    // plugin compatibility
	    $.uuid = 0;
	    $.support = browser.support;
	    $.expr = {};

	    $.expr[":"] = $.expr.pseudos = $.expr.filters = finder.pseudos;

	    $.expr.createPseudo = function(fn) {
	    	return fn;
	    };

	    $.cssHooks = styler.cssHooks;

	    $.contains = noder.contains;

	    $.css = styler.css;

	    $.data = datax.data;

	    $.fx = fx;
	    $.fx.step = {

        };

        $.speed = function( speed, easing, fn ) {
            var opt = speed && typeof speed === "object" ? $.extend( {}, speed ) : {
                complete: fn || !fn && easing ||
                    $.isFunction( speed ) && speed,
                duration: speed,
                easing: fn && easing || easing && !$.isFunction( easing ) && easing
            };

            // Go to the end state if fx are off
            if ( $.fx.off ) {
                opt.duration = 0;

            } else {
                if ( typeof opt.duration !== "number" ) {
                    if ( opt.duration in $.fx.speeds ) {
                        opt.duration = $.fx.speeds[ opt.duration ];

                    } else {
                        opt.duration = $.fx.speeds._default;
                    }
                }
            }

            // Normalize opt.queue - true/undefined/null -> "fx"
            if ( opt.queue == null || opt.queue === true ) {
                opt.queue = "fx";
            }

            // Queueing
            opt.old = opt.complete;

            opt.complete = function() {
                if ( $.isFunction( opt.old ) ) {
                    opt.old.call( this );
                }

                if ( opt.queue ) {
                    $.dequeue( this, opt.queue );
                }
            };

            return opt;
        };

        $.easing = {};

	    $.offset = {};
	    $.offset.setOffset = function(elem, options, i) {
	        var position = $.css(elem, "position");

	        // set position first, in-case top/left are set even on static elem
	        if (position === "static") {
	            elem.style.position = "relative";
	        }

	        var curElem = $(elem),
	            curOffset = curElem.offset(),
	            curCSSTop = $.css(elem, "top"),
	            curCSSLeft = $.css(elem, "left"),
	            calculatePosition = (position === "absolute" || position === "fixed") && $.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
	            props = {},
	            curPosition = {},
	            curTop, curLeft;

	        // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
	        if (calculatePosition) {
	            curPosition = curElem.position();
	            curTop = curPosition.top;
	            curLeft = curPosition.left;
	        } else {
	            curTop = parseFloat(curCSSTop) || 0;
	            curLeft = parseFloat(curCSSLeft) || 0;
	        }

	        if ($.isFunction(options)) {
	            options = options.call(elem, i, curOffset);
	        }

	        if (options.top != null) {
	            props.top = (options.top - curOffset.top) + curTop;
	        }
	        if (options.left != null) {
	            props.left = (options.left - curOffset.left) + curLeft;
	        }

	        if ("using" in options) {
	            options.using.call(elem, props);
	        } else {
	            curElem.css(props);
	        }
	    };

        $._data = function(elm,propName) {
            if (elm.hasAttribute) {
                return datax.data(elm,propName);
            } else {
                return {};
            }
        };

     	var t = $.fn.text;  
	    $.fn.text = function(v) {
	        var r = t.apply(this,arguments);
	        if (r === undefined) {
	            r = "";
	        }  
	        return r;
	    };       

	    $.fn.pos = $.fn.position;
        	    
    })(query);

    query.parseHTML = function(html) {
        return  noder.createFragment(html);
    };

    query.uniqueSort = query.unique = langx.uniq;

    query.skylark = skylark;

    return window.jQuery = window.$ = query;
});

define('skylark-net-http/http',[
  "skylark-langx-ns/ns",
],function(skylark){
	return skylark.attach("net.http",{});
});
define('skylark-net-http/Xhr',[
  "skylark-langx-ns/ns",
  "skylark-langx-types",
  "skylark-langx-objects",
  "skylark-langx-arrays",
  "skylark-langx-funcs",
  "skylark-langx-async/Deferred",
  "skylark-langx-emitter/Evented",
  "./http"
],function(skylark,types,objects,arrays,funcs,Deferred,Evented,http){

    var each = objects.each,
        mixin = objects.mixin,
        noop = funcs.noop,
        isArray = types.isArray,
        isFunction = types.isFunction,
        isPlainObject = types.isPlainObject,
        type = types.type;
 
     var getAbsoluteUrl = (function() {
        var a;

        return function(url) {
            if (!a) a = document.createElement('a');
            a.href = url;

            return a.href;
        };
    })();
   
    var Xhr = (function(){
        var jsonpID = 0,
            key,
            name,
            rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
            scriptTypeRE = /^(?:text|application)\/javascript/i,
            xmlTypeRE = /^(?:text|application)\/xml/i,
            jsonType = 'application/json',
            htmlType = 'text/html',
            blankRE = /^\s*$/;

        var XhrDefaultOptions = {
            async: true,

            // Default type of request
            type: 'GET',
            // Callback that is executed before request
            beforeSend: noop,
            // Callback that is executed if the request succeeds
            success: noop,
            // Callback that is executed the the server drops error
            error: noop,
            // Callback that is executed on request complete (both: error and success)
            complete: noop,
            // The context for the callbacks
            context: null,
            // Whether to trigger "global" Ajax events
            global: true,

            // MIME types mapping
            // IIS returns Javascript as "application/x-javascript"
            accepts: {
                script: 'text/javascript, application/javascript, application/x-javascript',
                json: 'application/json',
                xml: 'application/xml, text/xml',
                html: 'text/html',
                text: 'text/plain'
            },
            // Whether the request is to another domain
            crossDomain: false,
            // Default timeout
            timeout: 0,
            // Whether data should be serialized to string
            processData: false,
            // Whether the browser should be allowed to cache GET responses
            cache: true,

            xhrFields : {
                withCredentials : true
            }
        };

        function mimeToDataType(mime) {
            if (mime) {
                mime = mime.split(';', 2)[0];
            }
            if (mime) {
                if (mime == htmlType) {
                    return "html";
                } else if (mime == jsonType) {
                    return "json";
                } else if (scriptTypeRE.test(mime)) {
                    return "script";
                } else if (xmlTypeRE.test(mime)) {
                    return "xml";
                }
            }
            return "text";
        }

        function appendQuery(url, query) {
            if (query == '') return url
            return (url + '&' + query).replace(/[&?]{1,2}/, '?')
        }

        // serialize payload and append it to the URL for GET requests
        function serializeData(options) {
            options.data = options.data || options.query;
            if (options.processData && options.data && type(options.data) != "string") {
                options.data = param(options.data, options.traditional);
            }
            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {
                options.url = appendQuery(options.url, options.data);
                options.data = undefined;
            }
        }

        function serialize(params, obj, traditional, scope) {
            var t, array = isArray(obj),
                hash = isPlainObject(obj)
            each(obj, function(key, value) {
                t =type(value);
                if (scope) key = traditional ? scope :
                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'
                // handle data in serializeArray() format
                if (!scope && array) params.add(value.name, value.value)
                // recurse into nested objects
                else if (t == "array" || (!traditional && t == "object"))
                    serialize(params, value, traditional, key)
                else params.add(key, value)
            })
        }

        var param = function(obj, traditional) {
            var params = []
            params.add = function(key, value) {
                if (isFunction(value)) {
                  value = value();
                }
                if (value == null) {
                  value = "";
                }
                this.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            };
            serialize(params, obj, traditional)
            return params.join('&').replace(/%20/g, '+')
        };

        var Xhr = Evented.inherit({
            klassName : "Xhr",

            _request  : function(args) {
                var _ = this._,
                    self = this,
                    options = mixin({},XhrDefaultOptions,_.options,args),
                    xhr = _.xhr = new XMLHttpRequest();

                serializeData(options)

                if (options.beforeSend) {
                    options.beforeSend.call(this, xhr, options);
                }                

                var dataType = options.dataType || options.handleAs,
                    mime = options.mimeType || options.accepts[dataType],
                    headers = options.headers,
                    xhrFields = options.xhrFields,
                    isFormData = options.data && options.data instanceof FormData,
                    basicAuthorizationToken = options.basicAuthorizationToken,
                    type = options.type,
                    url = options.url,
                    async = options.async,
                    user = options.user , 
                    password = options.password,
                    deferred = new Deferred(),
                    contentType = isFormData ? false : 'application/x-www-form-urlencoded';

                if (xhrFields) {
                    for (name in xhrFields) {
                        xhr[name] = xhrFields[name];
                    }
                }

                if (mime && mime.indexOf(',') > -1) {
                    mime = mime.split(',', 2)[0];
                }
                if (mime && xhr.overrideMimeType) {
                    xhr.overrideMimeType(mime);
                }

                //if (dataType) {
                //    xhr.responseType = dataType;
                //}

                var finish = function() {
                    xhr.onloadend = noop;
                    xhr.onabort = noop;
                    xhr.onprogress = noop;
                    xhr.ontimeout = noop;
                    xhr = null;
                }
                var onloadend = function() {
                    var result, error = false
                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {
                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));

                        result = xhr.responseText;
                        try {
                            if (dataType == 'script') {
                                eval(result);
                            } else if (dataType == 'xml') {
                                result = xhr.responseXML;
                            } else if (dataType == 'json') {
                                result = blankRE.test(result) ? null : JSON.parse(result);
                            } else if (dataType == "blob") {
                                result = Blob([xhrObj.response]);
                            } else if (dataType == "arraybuffer") {
                                result = xhr.reponse;
                            }
                        } catch (e) { 
                            error = e;
                        }

                        if (error) {
                            deferred.reject(error,xhr.status,xhr);
                        } else {
                            deferred.resolve(result,xhr.status,xhr);
                        }
                    } else {
                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);
                    }
                    finish();
                };

                var onabort = function() {
                    if (deferred) {
                        deferred.reject(new Error("abort"),xhr.status,xhr);
                    }
                    finish();                 
                }
 
                var ontimeout = function() {
                    if (deferred) {
                        deferred.reject(new Error("timeout"),xhr.status,xhr);
                    }
                    finish();                 
                }

                var onprogress = function(evt) {
                    if (deferred) {
                        deferred.notify(evt,xhr.status,xhr);
                    }
                }

                xhr.onloadend = onloadend;
                xhr.onabort = onabort;
                xhr.ontimeout = ontimeout;
                xhr.onprogress = onprogress;

                xhr.open(type, url, async, user, password);
               
                if (headers) {
                    for ( var key in headers) {
                        var value = headers[key];
 
                        if(key.toLowerCase() === 'content-type'){
                            contentType = value;
                        } else {
                           xhr.setRequestHeader(key, value);
                        }
                    }
                }   

                if  (contentType && contentType !== false){
                    xhr.setRequestHeader('Content-Type', contentType);
                }

                if(!headers || !('X-Requested-With' in headers)){
                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                }


                //If basicAuthorizationToken is defined set its value into "Authorization" header
                if (basicAuthorizationToken) {
                    xhr.setRequestHeader("Authorization", basicAuthorizationToken);
                }

                xhr.send(options.data ? options.data : null);

                return deferred.promise;

            },

            "abort": function() {
                var _ = this._,
                    xhr = _.xhr;

                if (xhr) {
                    xhr.abort();
                }    
            },


            "request": function(args) {
                return this._request(args);
            },

            get : function(args) {
                args = args || {};
                args.type = "GET";
                return this._request(args);
            },

            post : function(args) {
                args = args || {};
                args.type = "POST";
                return this._request(args);
            },

            patch : function(args) {
                args = args || {};
                args.type = "PATCH";
                return this._request(args);
            },

            put : function(args) {
                args = args || {};
                args.type = "PUT";
                return this._request(args);
            },

            del : function(args) {
                args = args || {};
                args.type = "DELETE";
                return this._request(args);
            },

            "init": function(options) {
                this._ = {
                    options : options || {}
                };
            }
        });

        ["request","get","post","put","del","patch"].forEach(function(name){
            Xhr[name] = function(url,args) {
                var xhr = new Xhr({"url" : url});
                return xhr[name](args);
            };
        });

        Xhr.defaultOptions = XhrDefaultOptions;
        Xhr.param = param;

        return Xhr;
    })();

	return http.Xhr = Xhr;	
});
define('skylark-jquery/ajax',[
    "skylark-langx/langx",
    "skylark-net-http/Xhr",
    "./core",
], function(langx,Xhr,$) {
    var jsonpID = 0;

     // Attach a bunch of functions for handling common AJAX events
    $.each( [
        "ajaxStart",
        "ajaxStop",
        "ajaxComplete",
        "ajaxError",
        "ajaxSuccess",
        "ajaxSend"
    ], function( i, type ) {
        $.fn[ type ] = function( fn ) {
            return this.on( type, fn );
        };
    } );
   

    function appendQuery(url, query) {
        if (query == '') return url
        return (url + '&' + query).replace(/[&?]{1,2}/, '?')
    }
    
    $.ajaxJSONP = function(options) {
        var deferred = new langx.Deferred();
        var _callbackName = options.jsonpCallback,
            callbackName = ($.isFunction(_callbackName) ?
                _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),
            script = document.createElement('script'),
            originalCallback = window[callbackName],
            responseData,
            abort = function(errorType) {
                $(script).triggerHandler('error', errorType || 'abort')
            },
            xhr = { abort: abort },
            abortTimeout;

        for (var key in options.data) {
            options.url = appendQuery(options.url, key + "=" + options.data[key]);
        }
         
//        if (deferred) deferred.promise(xhr)

        $(script).on('load error', function(e, errorType) {
            clearTimeout(abortTimeout)
            $(script).off().remove()

            if (e.type == 'error' || !responseData) {
                deferred.reject(e);
            } else {
                deferred.resolve(responseData[0],200,xhr);
            }

            window[callbackName] = originalCallback
            if (responseData && $.isFunction(originalCallback))
                originalCallback(responseData[0])

            originalCallback = responseData = undefined
        })

        window[callbackName] = function() {
            responseData = arguments
        }

        script.src = options.url.replace(/\?(.+)=\?/, '?$1=' + callbackName)
        document.head.appendChild(script)

        if (options.timeout > 0) abortTimeout = setTimeout(function() {
            abort('timeout')
        }, options.timeout)

        return deferred;
    }

    //$.ajaxSettings = Xhr.defaultOptions;
    //$.ajaxSettings.xhr = function() {
    //    return new window.XMLHttpRequest()
    //};

    $.ajaxSettings = {
        processData : true
    };


    $.ajax = function(url,options) {
        if (!url) {
            options = {
                url :  "./"
            };
        } else if (!options) {
            if (langx.isString(url)) {
                options = {
                    url :  url
                };
            } else {
                options = url;
            }
        } else {
            options.url = url;
        }

        options = langx.mixin({},$.ajaxSettings,options);

        if ('jsonp' == options.dataType) {
            var hasPlaceholder = /\?.+=\?/.test(options.url);

            if (!hasPlaceholder)
                options.url = appendQuery(options.url,
                    options.jsonp ? (options.jsonp + '=?') : options.jsonp === false ? '' : 'callback=?')
            return $.ajaxJSONP(options);
        }

        function ajaxSuccess(data,status,xhr) {
            $(document).trigger("ajaxSucess");
            if (options.success) {
                options.success.apply(this,arguments);
            }
            if (options.complete) {
                options.complete.apply(this,arguments);
            }
            return data;
        }

        function ajaxError() {
            $(document).trigger("ajaxError");
            if (options.error) {
                options.error.apply(this,arguments);
            }
        }

        var p = Xhr.request(options.url,options);
        p = p.then(ajaxSuccess,ajaxError);
        p.success = p.done;
        p.error = p.fail;
        p.complete = p.always;
        
        return p;
    };

    // handle optional data/success arguments
    function parseArguments(url, data, success, dataType) {
        if ($.isFunction(url)) {
            dataType = data, success = url, data = undefined,url = undefined;
        } else if ($.isFunction(data)) {
            dataType = success, success = data, data = undefined;
        } 
        if (!$.isFunction(success)) dataType = success, success = undefined
        return {
            url: url,
            data: data,
            success: success,
            dataType: dataType
        }
    }

    $.get = function( /* url, data, success, dataType */ ) {
        return $.ajax(parseArguments.apply(null, arguments))
    }

    $.post = function( /* url, data, success, dataType */ ) {
        var options = parseArguments.apply(null, arguments)
        options.type = 'POST'
        return $.ajax(options)
    }

    $.getJSON = function( /* url, data, success */ ) {
        var options = parseArguments.apply(null, arguments)
        options.dataType = 'json'
        return $.ajax(options)
    }

    var originalLoad = $.fn.load;

    $.fn.load = function(url, data, success) {
        if ("string" != typeof url && originalLoad) {
            return originalLoad.apply(this, arguments);
        }
        if (!this.length) return this
        var self = this,
            options = parseArguments(url, data, success),
            parts = options.url && options.url.split(/\s/),
            selector,
            callback = options.success
        if (parts && parts.length > 1) options.url = parts[0], selector = parts[1]

        if (options.data && typeof options.data === "object") {
            options.type = "POST";
        }
        options.success = function(response) {
            self.html(selector ?
                $('<div>').html(response.replace(rscript, "")).find(selector) : response)
            callback && callback.apply(self, arguments)
        }
        $.ajax(options)
        return this
    }

    $.param = Xhr.param;


    // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
    function addToPrefiltersOrTransports(structure) {

        // dataTypeExpression is optional and defaults to "*"
        return function(dataTypeExpression, func) {

            if (typeof dataTypeExpression !== "string") {
                func = dataTypeExpression;
                dataTypeExpression = "*";
            }

            var dataType,
                i = 0,
                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];

            if (jQuery.isFunction(func)) {

                // For each dataType in the dataTypeExpression
                while ((dataType = dataTypes[i++])) {

                    // Prepend if requested
                    if (dataType[0] === "+") {
                        dataType = dataType.slice(1) || "*";
                        (structure[dataType] = structure[dataType] || []).unshift(func);

                        // Otherwise append
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }

    var
        prefilters = {},
        transports = {},
        rnotwhite = (/\S+/g);

    $.ajaxPrefilter = addToPrefiltersOrTransports(prefilters);
    $.ajaxTransport = addToPrefiltersOrTransports(transports);
    $.ajaxSetup = function(target, settings) {
        langx.mixin(Xhr.defaultOptions,target,settings);
    };

    $.getScript = function( url, callback ) {
        return $.get( url, undefined, callback, "script" );
    };

    return $;

});

define('skylark-jquery/callbacks',[
    "./core"
], function($) {

    //     This module is borrow from zepto.callback.js
    //     (c) 2010-2014 Thomas Fuchs
    //     Zepto.js may be freely distributed under the MIT license.

    // Create a collection of callbacks to be fired in a sequence, with configurable behaviour
    // Option flags:
    //   - once: Callbacks fired at most one time.
    //   - memory: Remember the most recent context and arguments
    //   - stopOnFalse: Cease iterating over callback list
    //   - unique: Permit adding at most one instance of the same callback
    $.Callbacks = function(options) {
        options = $.extend({}, options)

        var memory, // Last fire value (for non-forgettable lists)
            fired, // Flag to know if list was already fired
            firing, // Flag to know if list is currently firing
            firingStart, // First callback to fire (used internally by add and fireWith)
            firingLength, // End of the loop when firing
            firingIndex, // Index of currently firing callback (modified by remove if needed)
            list = [], // Actual callback list
            stack = !options.once && [], // Stack of fire calls for repeatable lists
            fire = function(data) {
                memory = options.memory && data
                fired = true
                firingIndex = firingStart || 0
                firingStart = 0
                firingLength = list.length
                firing = true
                for (; list && firingIndex < firingLength; ++firingIndex) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false
                        break
                    }
                }
                firing = false
                if (list) {
                    if (stack) stack.length && fire(stack.shift())
                    else if (memory) list.length = 0
                    else Callbacks.disable()
                }
            },

            Callbacks = {
                add: function() {
                    if (list) {
                        var start = list.length,
                            add = function(args) {
                                $.each(args, function(_, arg) {
                                    if (typeof arg === "function") {
                                        if (!options.unique || !Callbacks.has(arg)) list.push(arg)
                                    } else if (arg && arg.length && typeof arg !== 'string') add(arg)
                                })
                            }
                        add(arguments)
                        if (firing) firingLength = list.length
                        else if (memory) {
                            firingStart = start
                            fire(memory)
                        }
                    }
                    return this
                },
                remove: function() {
                    if (list) {
                        $.each(arguments, function(_, arg) {
                            var index
                            while ((index = $.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1)
                                // Handle firing indexes
                                if (firing) {
                                    if (index <= firingLength) --firingLength
                                    if (index <= firingIndex) --firingIndex
                                }
                            }
                        })
                    }
                    return this
                },
                has: function(fn) {
                    return !!(list && (fn ? $.inArray(fn, list) > -1 : list.length))
                },
                empty: function() {
                    firingLength = list.length = 0
                    return this
                },
                disable: function() {
                    list = stack = memory = undefined
                    return this
                },
                disabled: function() {
                    return !list
                },
                lock: function() {
                    stack = undefined;
                    if (!memory) Callbacks.disable()
                    return this
                },
                locked: function() {
                    return !stack
                },
                fireWith: function(context, args) {
                    if (list && (!fired || stack)) {
                        args = args || []
                        args = [context, args.slice ? args.slice() : args]
                        if (firing) stack.push(args)
                        else fire(args)
                    }
                    return this
                },
                fire: function() {
                    return Callbacks.fireWith(this, arguments)
                },
                fired: function() {
                    return !!fired
                }
            }

        return Callbacks
    };

    return $;

});

define('skylark-jquery/deferred',[
    "./core",
    "skylark-langx/langx"
], function($,langx) {

    $.Deferred = function() {
        var d = new langx.Deferred(),
            ret = {
                promise : function() {
                    return d.promise;
                }
            };

        ["resolve","resolveWith","reject","rejectWith","notify","then","done","fail","progress"].forEach(function(name){
            ret[name] = function() {
              var ret2 =   d[name].apply(d,arguments);
              if (ret2 == d) {
                ret2 = ret;
              }
              return ret2;
            }
        });

        return ret;
    };
    
    $.when = function(){
        var p = langx.Deferred.all(langx.makeArray(arguments)),
            originThen = p.then;
        p.then = function(onResolved,onRejected) {
            var handler = function(results) {
                //results = results.map(function(result){
                //    return [result];
                //});
                return onResolved && onResolved.apply(null,results);
            };
            return originThen.call(p,handler,onRejected);
        };
        return p;
    };

    return $;

});

define('skylark-jquery/queue',[
    "skylark-langx/langx",
    "./core",
    "./callbacks"
], function(langx, $) {

 // jQuery Data object
  var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
      rmultiDash = /([A-Z])/g,
      expando = "Sky" + ( '1.0' + Math.random() ).replace( /\D/g, ""),
      optionsCache = {},
      core_rnotwhite = /\S+/g,
      core_deletedIds = [],
      core_push = core_deletedIds.push;

// Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    $.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
      object[ flag ] = true;
    });
    return object;
  }

  function isArraylike( obj ) {
    var length = obj.length,
        type = $.type( obj );

    if ( $.isWindow( obj ) ) {
      return false;
    }

    if ( obj.nodeType === 1 && length ) {
      return true;
    }

    return type === "array" || type !== "function" &&
        ( length === 0 ||
            typeof length === "number" && length > 0 && ( length - 1 ) in obj );
  }

  

  function Data() {
    // Support: Android < 4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty( this.cache = {}, 0, {
      get: function() {
        return {};
      }
    });

    this.expando = expando + Math.random();
  }

  Data.uid = 1;

  Data.accepts = function( owner ) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType ?
        owner.nodeType === 1 || owner.nodeType === 9 : true;
  };

  Data.prototype = {
    key: function( owner ) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return the key for a frozen object.
      if ( !Data.accepts( owner ) ) {
        return 0;
      }

      var descriptor = {},
      // Check if the owner object already has a cache key
          unlock = owner[ this.expando ];

      // If not, create one
      if ( !unlock ) {
        unlock = Data.uid++;

        // Secure it in a non-enumerable, non-writable property
        try {
          descriptor[ this.expando ] = { value: unlock };
          Object.defineProperties( owner, descriptor );

          // Support: Android < 4
          // Fallback to a less secure definition
        } catch ( e ) {
          descriptor[ this.expando ] = unlock;
          $.extend( owner, descriptor );
        }
      }

      // Ensure the cache object
      if ( !this.cache[ unlock ] ) {
        this.cache[ unlock ] = {};
      }

      return unlock;
    },
    set: function( owner, data, value ) {
      var prop,
      // There may be an unlock assigned to this node,
      // if there is no entry for this "owner", create one inline
      // and set the unlock as though an owner entry had always existed
          unlock = this.key( owner ),
          cache = this.cache[ unlock ];

      // Handle: [ owner, key, value ] args
      if ( typeof data === "string" ) {
        cache[ data ] = value;

        // Handle: [ owner, { properties } ] args
      } else {
        // Fresh assignments by object are shallow copied
        if ( $.isEmptyObject( cache ) ) {
          $.extend( this.cache[ unlock ], data );
          // Otherwise, copy the properties one-by-one to the cache object
        } else {
          for ( prop in data ) {
            cache[ prop ] = data[ prop ];
          }
        }
      }
      return cache;
    },
    get: function( owner, key ) {
      // Either a valid cache is found, or will be created.
      // New caches will be created and the unlock returned,
      // allowing direct access to the newly created
      // empty data object. A valid owner object must be provided.
      var cache = this.cache[ this.key( owner ) ];

      return key === undefined ?
          cache : cache[ key ];
    },
    access: function( owner, key, value ) {
      var stored;
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if ( key === undefined ||
          ((key && typeof key === "string") && value === undefined) ) {

        stored = this.get( owner, key );

        return stored !== undefined ?
            stored : this.get( owner, $.camelCase(key) );
      }

      // [*]When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set( owner, key, value );

      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function( owner, key ) {
      var i, name, camel,
          unlock = this.key( owner ),
          cache = this.cache[ unlock ];

      if ( key === undefined ) {
        this.cache[ unlock ] = {};

      } else {
        // Support array or space separated string of keys
        if ( $.isArray( key ) ) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat( key.map( $.camelCase ) );
        } else {
          camel = $.camelCase( key );
          // Try the string as a key before any manipulation
          if ( key in cache ) {
            name = [ key, camel ];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ?
                [ name ] : ( name.match( core_rnotwhite ) || [] );
          }
        }

        i = name.length;
        while ( i-- ) {
          delete cache[ name[ i ] ];
        }
      }
    },
    hasData: function( owner ) {
      return !$.isEmptyObject(
          this.cache[ owner[ this.expando ] ] || {}
      );
    },
    discard: function( owner ) {
      if ( owner[ this.expando ] ) {
        delete this.cache[ owner[ this.expando ] ];
      }
    }
  };

  var data_priv = new Data();

  $.extend($, {
    queue: function( elem, type, data ) {
      var queue;

      if ( elem ) {
        type = ( type || "fx" ) + "queue";
        queue = data_priv.get( elem, type );

        // Speed up dequeue by getting out quickly if this is just a lookup
        if ( data ) {
          if ( !queue || $.isArray( data ) ) {
            queue = data_priv.access( elem, type, $.makeArray(data) );
          } else {
            queue.push( data );
          }
        }
        return queue || [];
      }
    },

    dequeue: function( elem, type ) {
      type = type || "fx";

      var queue = $.queue( elem, type ),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = $._queueHooks( elem, type ),
          next = function() {
            $.dequeue( elem, type );
          };

      // If the fx queue is dequeued, always remove the progress sentinel
      if ( fn === "inprogress" ) {
        fn = queue.shift();
        startLength--;
      }

      if ( fn ) {

        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if ( type === "fx" ) {
          queue.unshift( "inprogress" );
        }

        // clear up the last queue stop function
        delete hooks.stop;
        fn.call( elem, next, hooks );
      }

      if ( !startLength && hooks ) {
        hooks.empty.fire();
      }
    },

    // not intended for public consumption - generates a queueHooks object, or returns the current one
    _queueHooks: function( elem, type ) {
      var key = type + "queueHooks";
      return data_priv.get( elem, key ) || data_priv.access( elem, key, {
        empty: $.Callbacks("once memory").add(function() {
          data_priv.remove( elem, [ type + "queue", key ] );
        })
      });
    },

    // array operations
    makeArray: function( arr, results ) {
      var ret = results || [];

      if ( arr != null ) {
        if ( isArraylike( Object(arr) ) ) {
          $.merge( ret,
              typeof arr === "string" ?
                  [ arr ] : arr
          );
        } else {
          core_push.call( ret, arr );
        }
      }

      return ret;
    },
    merge: function( first, second ) {
      var l = second.length,
          i = first.length,
          j = 0;

      if ( typeof l === "number" ) {
        for ( ; j < l; j++ ) {
          first[ i++ ] = second[ j ];
        }
      } else {
        while ( second[j] !== undefined ) {
          first[ i++ ] = second[ j++ ];
        }
      }

      first.length = i;

      return first;
    }
  });

  $.extend($.fn, {
    queue: function( type, data ) {
      var setter = 2;

      if ( typeof type !== "string" ) {
        data = type;
        type = "fx";
        setter--;
      }

      if ( arguments.length < setter ) {
        return $.queue( this[0], type );
      }

      return data === undefined ?
          this :
          this.each(function() {
            var queue = $.queue( this, type, data );

            // ensure a hooks for this queue
            $._queueHooks( this, type );

            if ( type === "fx" && queue[0] !== "inprogress" ) {
              $.dequeue( this, type );
            }
          });
    },
    dequeue: function( type ) {
      return this.each(function() {
        $.dequeue( this, type );
      });
    },
    // Based off of the plugin by Clint Helfers, with permission.
    // http://blindsignals.com/index.php/2009/07/jquery-delay/
    delay: function( time, type ) {
      time = $.fx ? $.fx.speeds[ time ] || time : time;
      type = type || "fx";

      return this.queue( type, function( next, hooks ) {
        var timeout = setTimeout( next, time );
        hooks.stop = function() {
          clearTimeout( timeout );
        };
      });
    },
    clearQueue: function( type ) {
      return this.queue( type || "fx", [] );
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function( type, obj ) {
      var tmp,
          count = 1,
          defer = $.Deferred(),
          elements = this,
          i = this.length,
          resolve = function() {
            if ( !( --count ) ) {
              defer.resolveWith( elements, [ elements ] );
            }
          };

      if ( typeof type !== "string" ) {
        obj = type;
        type = undefined;
      }
      type = type || "fx";

      while( i-- ) {
        tmp = data_priv.get( elements[ i ], type + "queueHooks" );
        if ( tmp && tmp.empty ) {
          count++;
          tmp.empty.add( resolve );
        }
      }
      resolve();
      return defer.promise( obj );
    }
  });

  return $;

});

define('skylark-domx-plugins/plugins',[
    "skylark-langx/skylark",
    "skylark-langx/langx",
    "skylark-domx-noder",
    "skylark-domx-data",
    "skylark-domx-eventer",
    "skylark-domx-finder",
    "skylark-domx-geom",
    "skylark-domx-styler",
    "skylark-domx-fx",
    "skylark-domx-query",
    "skylark-domx-velm"
], function(skylark, langx, noder, datax, eventer, finder, geom, styler, fx, $, elmx) {
    "use strict";

    var slice = Array.prototype.slice,
        concat = Array.prototype.concat,
        pluginKlasses = {},
        shortcuts = {};

    /*
     * Create or get or destory a plugin instance assocated with the element.
     */
    function instantiate(elm,pluginName,options) {
        var pair = pluginName.split(":"),
            instanceDataName = pair[1];
        pluginName = pair[0];

        if (!instanceDataName) {
            instanceDataName = pluginName;
        }

        var pluginInstance = datax.data( elm, instanceDataName );

        if (options === "instance") {
            return pluginInstance;
        } else if (options === "destroy") {
            if (!pluginInstance) {
                throw new Error ("The plugin instance is not existed");
            }
            pluginInstance.destroy();
            datax.removeData( elm, pluginName);
            pluginInstance = undefined;
        } else {
            if (!pluginInstance) {
                if (options !== undefined && typeof options !== "object") {
                    throw new Error ("The options must be a plain object");
                }
                var pluginKlass = pluginKlasses[pluginName]; 
                pluginInstance = new pluginKlass(elm,options);
                datax.data( elm, instanceDataName,pluginInstance );
            } else if (options) {
                pluginInstance.reset(options);
            }
        }

        return pluginInstance;
    }


    function shortcutter(pluginName,extfn) {
       /*
        * Create or get or destory a plugin instance assocated with the element,
        * and also you can execute the plugin method directory;
        */
        return function (elm,options) {
            var  plugin = instantiate(elm, pluginName,"instance");
            if ( options === "instance" ) {
              return plugin || null;
            }

            if (!plugin) {
                plugin = instantiate(elm, pluginName,typeof options == 'object' && options || {});
                if (typeof options != "string") {
                  return this;
                }
            } 
            if (options) {
                var args = slice.call(arguments,1); //2
                if (extfn) {
                    return extfn.apply(plugin,args);
                } else {
                    if (typeof options == 'string') {
                        var methodName = options;

                        if ( !plugin ) {
                            throw new Error( "cannot call methods on " + pluginName +
                                " prior to initialization; " +
                                "attempted to call method '" + methodName + "'" );
                        }

                        if ( !langx.isFunction( plugin[ methodName ] ) || methodName.charAt( 0 ) === "_" ) {
                            throw new Error( "no such method '" + methodName + "' for " + pluginName +
                                " plugin instance" );
                        }

                        return plugin[methodName].apply(plugin,args);
                    }                
                }                
            }

        }

    }

    /*
     * Register a plugin type
     */
    function register( pluginKlass,shortcutName,instanceDataName,extfn) {
        var pluginName = pluginKlass.prototype.pluginName;
        
        pluginKlasses[pluginName] = pluginKlass;

        if (shortcutName) {
            if (instanceDataName && langx.isFunction(instanceDataName)) {
                extfn = instanceDataName;
                instanceDataName = null;
            } 
            if (instanceDataName) {
                pluginName = pluginName + ":" + instanceDataName;
            }

            var shortcut = shortcuts[shortcutName] = shortcutter(pluginName,extfn);
                
            $.fn[shortcutName] = function(options) {
                var returnValue = this;

                if ( !this.length && options === "instance" ) {
                  returnValue = undefined;
                } else {
                  var args = slice.call(arguments);
                  this.each(function () {
                    var args2 = slice.call(args);
                    args2.unshift(this);
                    var  ret  = shortcut.apply(undefined,args2);
                    if (ret !== undefined) {
                        returnValue = ret;
                        return false;
                    }
                  });
                }

                return returnValue;
            };

            elmx.partial(shortcutName,function(options) {
                var  ret  = shortcut(this._elm,options);
                if (ret === undefined) {
                    ret = this;
                }
                return ret;
            });

        }
    }

 
    var Plugin =   langx.Evented.inherit({
        klassName: "Plugin",

        _construct : function(elm,options) {
           this._elm = elm;
           this._initOptions(options);
        },

        _initOptions : function(options) {
          var ctor = this.constructor,
              cache = ctor.cache = ctor.cache || {},
              defaults = cache.defaults;
          if (!defaults) {
            var  ctors = [];
            do {
              ctors.unshift(ctor);
              if (ctor === Plugin) {
                break;
              }
              ctor = ctor.superclass;
            } while (ctor);

            defaults = cache.defaults = {};
            for (var i=0;i<ctors.length;i++) {
              ctor = ctors[i];
              if (ctor.prototype.hasOwnProperty("options")) {
                langx.mixin(defaults,ctor.prototype.options,true);
              }
              if (ctor.hasOwnProperty("options")) {
                langx.mixin(defaults,ctor.options,true);
              }
            }
          }
          Object.defineProperty(this,"options",{
            value :langx.mixin({},defaults,options,true)
          });

          //return this.options = langx.mixin({},defaults,options);
          return this.options;
        },


        destroy: function() {
            var that = this;

            this._destroy();
            // We can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            datax.removeData(this._elm,this.pluginName );
        },

        _destroy: langx.noop,

        _delay: function( handler, delay ) {
            function handlerProxy() {
                return ( typeof handler === "string" ? instance[ handler ] : handler )
                    .apply( instance, arguments );
            }
            var instance = this;
            return setTimeout( handlerProxy, delay || 0 );
        },

        option: function( key, value ) {
            var options = key;
            var parts;
            var curOption;
            var i;

            if ( arguments.length === 0 ) {

                // Don't return a reference to the internal hash
                return langx.mixin( {}, this.options );
            }

            if ( typeof key === "string" ) {

                // Handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                options = {};
                parts = key.split( "." );
                key = parts.shift();
                if ( parts.length ) {
                    curOption = options[ key ] = langx.mixin( {}, this.options[ key ] );
                    for ( i = 0; i < parts.length - 1; i++ ) {
                        curOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};
                        curOption = curOption[ parts[ i ] ];
                    }
                    key = parts.pop();
                    if ( arguments.length === 1 ) {
                        return curOption[ key ] === undefined ? null : curOption[ key ];
                    }
                    curOption[ key ] = value;
                } else {
                    if ( arguments.length === 1 ) {
                        return this.options[ key ] === undefined ? null : this.options[ key ];
                    }
                    options[ key ] = value;
                }
            }

            this._setOptions( options );

            return this;
        },

        _setOptions: function( options ) {
            var key;

            for ( key in options ) {
                this._setOption( key, options[ key ] );
            }

            return this;
        },

        _setOption: function( key, value ) {

            this.options[ key ] = value;

            return this;
        },

        getUID : function (prefix) {
            prefix = prefix || "plugin";
            do prefix += ~~(Math.random() * 1000000)
            while (document.getElementById(prefix))
            return prefix;
        },

        elm : function() {
            return this._elm;
        }

    });

    $.fn.plugin = function(name,options) {
        var args = slice.call( arguments, 1 ),
            self = this,
            returnValue = this;

        this.each(function(){
            returnValue = instantiate.apply(self,[this,name].concat(args));
        });
        return returnValue;
    };

    elmx.partial("plugin",function(name,options) {
        var args = slice.call( arguments, 1 );
        return instantiate.apply(this,[this.domNode,name].concat(args));
    }); 


    function plugins() {
        return plugins;
    }
     
    langx.mixin(plugins, {
        instantiate,
        Plugin,
        register,
        shortcuts
    });

    return  skylark.attach("domx.plugins",plugins);
});
define('skylark-domx-plugins/main',[
	"./plugins"
],function(plugins){
	return plugins;
});
define('skylark-domx-plugins', ['skylark-domx-plugins/main'], function (main) { return main; });

define('skylark-jquery/JqueryPlugin',[
	"skylark-langx-types",
	"skylark-langx-objects",
	"skylark-langx-arrays",
	"skylark-langx/langx",
	"skylark-domx-data",
	"skylark-domx-eventer",
	"skylark-domx-plugins",
	"skylark-domx-query",
],function(types, objects, arrays, langx, datax, eventer, plugins, $){

    var pluginUuid = 0;

	var JqPlugin = plugins.Plugin.inherit({
		klassName : "JqPlugin",

        pluginEventPrefix: "",

        options: {
            // Callbacks
            create: null
        },

        destroy: function() {
            this.overrided();

            // We can probably remove the unbind calls in 2.0
            // all event bindings should go through this._on()
            this.element
                .off( this.eventNamespace );

            // Clean up events and states
            this.bindings.off( this.eventNamespace );
        },

        _construct : function(element,options) {
            //this.options = langx.mixin( {}, this.options );

            element = $( element || this.defaultElement || this )[ 0 ];
            this.element = $( element );
            this.uuid = pluginUuid++;
            this.eventNamespace = "." + this.pluginName + this.uuid;

            this.bindings = $();
            this.classesElementLookup = {};

			this.hoverable = $();
			this.focusable = $();

            if ( element !== this ) {
                datax.data( element, this.pluginName, this );
                this._on( true, this.element, {
                    remove: function( event ) {
                        if ( event.target === element ) {
                            this.destroy();
                        }
                    }
                } );
                this.document = $( element.style ?

                    // Element within the document
                    element.ownerDocument :

                    // Element is window or document
                    element.document || element );
                this.window = $( this.document[ 0 ].defaultView || this.document[ 0 ].parentWindow );
            }

            this.overrided(element,options);

//            this.options = langx.mixin( {},
//                this.options,
//                this._getCreateOptions(),
//                options );

            this._create();

            this._trigger( "create", null, this._getCreateEventData() );

            this._init();
        },


	     _initOptions : function(options) {
	     	options = langx.mixin(this._getCreateOptions(),options);

			this.overrided(options);
		},

        _getCreateOptions: function() {
            return {};
        },

        _getCreateEventData: langx.noop,

		_super : function() {
			if (this.overrided) {
				return this.overrided.apply(this,arguments);
			}
		},

		_superApply : function ( args ) {
			if (this.overrided) {
				return this.overrided.apply(this,args);
			}
		},

        _create: langx.noop,

        _init: langx.noop,

		_classes: function( options ) {
			var full = [];
			var that = this;

			options = objects.mixin( {
				element: this.element,
				classes: this.options.classes || {}
			}, options );


			function bindRemoveEvent() {
				options.element.each( function( _, element ) {
					var isTracked = langx.map( that.classesElementLookup, function( elements ) {
						return elements;
					} )
						.some( function(elements ) {
							return $(elements).is( element );
						} );

					if ( !isTracked ) {
						that._on( $( element ), {
							remove: "_untrackClassesElement"
						} );
					}
				} );
			}

			function processClassString( classes, checkOption ) {
				var current, i;
				for ( i = 0; i < classes.length; i++ ) {
					current = that.classesElementLookup[ classes[ i ] ] || $();
					if ( options.add ) {
						bindRemoveEvent();
						current = $( langx.uniq( current.get().concat( options.element.get() ) ) );
					} else {
						current = $( current.not( options.element ).get() );
					}
					that.classesElementLookup[ classes[ i ] ] = current;
					full.push( classes[ i ] );
					if ( checkOption && options.classes[ classes[ i ] ] ) {
						full.push( options.classes[ classes[ i ] ] );
					}
				}
			}

			if ( options.keys ) {
				processClassString( options.keys.match( /\S+/g ) || [], true );
			}
			if ( options.extra ) {
				processClassString( options.extra.match( /\S+/g ) || [] );
			}

			return full.join( " " );
		},

		_untrackClassesElement: function( event ) {
			var that = this;
			langx.each( that.classesElementLookup, function( key, value ) {
				if ( arrays.inArray( event.target, value ) !== -1 ) {
					that.classesElementLookup[ key ] = $( value.not( event.target ).get() );
				}
			} );

			this._off( $( event.target ) );
		},

		_removeClass: function( element, keys, extra ) {
			return this._toggleClass( element, keys, extra, false );
		},

		_addClass: function( element, keys, extra ) {
			return this._toggleClass( element, keys, extra, true );
		},

		_toggleClass: function( element, keys, extra, add ) {
			add = ( typeof add === "boolean" ) ? add : extra;
			var shift = ( typeof element === "string" || element === null ),
				options = {
					extra: shift ? keys : extra,
					keys: shift ? element : keys,
					element: shift ? this.element : element,
					add: add
				};
			options.element.toggleClass( this._classes( options ), add );
			return this;
		},

		_on: function( suppressDisabledCheck, element, handlers ) {
			var delegateElement;
			var instance = this;

			// No suppressDisabledCheck flag, shuffle arguments
			if ( typeof suppressDisabledCheck !== "boolean" ) {
				handlers = element;
				element = suppressDisabledCheck;
				suppressDisabledCheck = false;
			}

			// No element argument, shuffle and use this.element
			if ( !handlers ) {
				handlers = element;
				element = this.element;
				delegateElement = this.widget();
			} else {
				element = delegateElement = $( element );
				this.bindings = this.bindings.add( element );
			}

			objects.each( handlers, function( event, handler ) {
				function handlerProxy() {

					// Allow widgets to customize the disabled handling
					// - disabled as an array instead of boolean
					// - disabled class as method for disabling individual parts
					if ( !suppressDisabledCheck &&
							( instance.options.disabled === true ||
							$( this ).hasClass( "ui-state-disabled" ) ) ) {
						return;
					}
					return ( typeof handler === "string" ? instance[ handler ] : handler )
						.apply( instance, arguments );
				}

				// Copy the guid so direct unbinding works
				if ( typeof handler !== "string" ) {
					handlerProxy.guid = handler.guid =
						handler.guid || handlerProxy.guid || $.guid++;
				}

				var match = event.match( /^([\w:-]*)\s*(.*)$/ );
				var eventName = match[ 1 ] + instance.eventNamespace;
				var selector = match[ 2 ];

				if ( selector ) {
					delegateElement.on( eventName, selector, handlerProxy );
				} else {
					element.on( eventName, handlerProxy );
				}
			} );
		},

		_off: function( element, eventName ) {
			eventName = ( eventName || "" ).split( " " ).join( this.eventNamespace + " " ) +
				this.eventNamespace;
			element.off( eventName );

			// Clear the stack to avoid memory leaks (#10056)
			this.bindings = $( this.bindings.not( element ).get() );
			this.focusable = $( this.focusable.not( element ).get() );
			this.hoverable = $( this.hoverable.not( element ).get() );
		},

		_trigger: function( type, event, data ) {
			var prop, orig;
			var callback = this.options[ type ];

			data = data || {};
			event = eventer.proxy( event );
			event.type = ( type === this.widgetEventPrefix ?
				type :
				this.widgetEventPrefix + type ).toLowerCase();

			// The original event may come from any element
			// so we need to reset the target on the new event
			event.target = this.element[ 0 ];

			// Copy original event properties over to the new event
			orig = event.originalEvent;
			if ( orig ) {
				for ( prop in orig ) {
					if ( !( prop in event ) ) {
						event[ prop ] = orig[ prop ];
					}
				}
			}

			this.element.trigger( event, data );
			return !( types.isFunction( callback ) &&
				callback.apply( this.element[ 0 ], [ event ].concat( data ) ) === false ||
				event.isDefaultPrevented() );
		}

	});

	return JqPlugin;
});
/*!
 * jQuery UI Widget @VERSION
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */

//>>label: Widget
//>>group: Core
//>>description: Provides a factory for creating stateful widgets with a common API.
//>>docs: http://api.jqueryui.com/jQuery.widget/
//>>demos: http://jqueryui.com/widget/

define( 'skylark-jquery/widget',[ 
	"skylark-langx/langx",
	"skylark-domx-plugins",
	"./core",
	"./JqueryPlugin"
],  function(langx,splugins, $,JqPlugin ) {

	var widgetUuid = 0;
	var widgetHasOwnProperty = Array.prototype.hasOwnProperty;
	var widgetSlice = Array.prototype.slice;

	$.cleanData = ( function( orig ) {
		return function( elems ) {
			var events, elem, i;
			for ( i = 0; ( elem = elems[ i ] ) != null; i++ ) {

				// Only trigger remove when necessary to save time
				events = $._data( elem, "events" );
				if ( events && events.remove ) {
					$( elem ).triggerHandler( "remove" );
				}
			}
			orig( elems );
		};
	} )( $.cleanData );
	
	$.widget = function( name, base, prototype ) {
		var existingConstructor, constructor, basePrototype;

		// ProxiedPrototype allows the provided prototype to remain unmodified
		// so that it can be used as a mixin for multiple widgets (#8876)
		var proxiedPrototype = {};

		var namespace = name.split( "." )[ 0 ];
		name = name.split( "." )[ 1 ];
		var fullName = namespace + "-" + name;

		if ( !prototype ) {
			prototype = base;
			base = $.Widget;
		}

		if ( $.isArray( prototype ) ) {
			prototype = $.extend.apply( null, [ {} ].concat( prototype ) );
		}

		// Create selector for plugin
		$.expr.pseudos[ fullName.toLowerCase() ] = function( elem ) {
			return !!$.data( elem, fullName );
		};

		$[ namespace ] = $[ namespace ] || {};

		existingConstructor = $[ namespace ][ name ];

		var basePrototype = base.prototype,
			newPrototype = {};

		for (var key in prototype) {
			var value = prototype[key];

			if ( $.isPlainObject( value ) ) {
				newPrototype[ key ] = $.isPlainObject( basePrototype[ key ] ) ?
					$.widget.extend( {}, basePrototype[ key ], value ) :

					// Don't extend strings, arrays, etc. with objects
					$.widget.extend( {}, value );
			} else {
				newPrototype[key] = value;
			}
		}

		var _proto = $.widget.extend({

			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? ( base.prototype.widgetEventPrefix || name ) : name
		}, {
			options : base.prototype.options
		},newPrototype, {
			name : fullName,
			namespace: namespace,
			widgetName: name,
			pluginName : "jqueryui." + (namespace ? namespace + "." : "") + name,
			widgetFullName: fullName
		} );

		constructor = $[ namespace ][ name ] = base.inherit(_proto);
		/*

		constructor = $[ namespace ][ name ] = function( options, element ) {

			// Allow instantiation without "new" keyword
			if ( !this._createWidget ) {
				return new constructor( options, element );
			}

			// Allow instantiation without initializing for simple inheritance
			// must use "new" keyword (the code above always passes args)
			if ( arguments.length ) {
				this._createWidget( options, element );
			}
		};
		*/
		// Extend with the existing constructor to carry over any static properties
		$.extend( constructor, existingConstructor, {
			version: prototype.version,

			// Copy the object used to create the prototype in case we need to
			// redefine the widget later
			_proto: _proto,

			// Track widgets that inherit from this widget in case this widget is
			// redefined after a widget inherits from it
			_childConstructors: []
		} );

		/*
		basePrototype = new base();

		// We need to make the options hash a property directly on the new instance
		// otherwise we'll modify the options hash on the prototype that we're
		// inheriting from
		basePrototype.options = $.widget.extend( {}, basePrototype.options );
		$.each( prototype, function( prop, value ) {
			if ( !$.isFunction( value ) ) {
				proxiedPrototype[ prop ] = value;
				return;
			}
			proxiedPrototype[ prop ] = ( function() {
				function _super() {
					return base.prototype[ prop ].apply( this, arguments );
				}

				function _superApply( args ) {
					return base.prototype[ prop ].apply( this, args );
				}

				return function() {
					var __super = this._super;
					var __superApply = this._superApply;
					var returnValue;

					this._super = _super;
					this._superApply = _superApply;

					returnValue = value.apply( this, arguments );

					this._super = __super;
					this._superApply = __superApply;

					return returnValue;
				};
			} )();
		} );
		constructor.prototype = $.widget.extend( basePrototype, {

			// TODO: remove support for widgetEventPrefix
			// always use the name + a colon as the prefix, e.g., draggable:start
			// don't prefix for widgets that aren't DOM-based
			widgetEventPrefix: existingConstructor ? ( basePrototype.widgetEventPrefix || name ) : name
		}, proxiedPrototype, {
			constructor: constructor,
			namespace: namespace,
			widgetName: name,
			widgetFullName: fullName
		} );
		*/
		// If this widget is being redefined then we need to find all widgets that
		// are inheriting from it and redefine all of them so that they inherit from
		// the new version of this widget. We're essentially trying to replace one
		// level in the prototype chain.
		if ( existingConstructor ) {
			$.each( existingConstructor._childConstructors, function( i, child ) {
				var childPrototype = child.prototype;

				// Redefine the child widget using the same prototype that was
				// originally used, but inherit from the new version of the base
				$.widget( childPrototype.namespace + "." + childPrototype.widgetName, constructor,
					child._proto );
			} );

			// Remove the list of existing child constructors from the old constructor
			// so the old child constructors can be garbage collected
			delete existingConstructor._childConstructors;
		} else {
			if (base._childConstructors) {
				base._childConstructors.push( constructor );
			}
		}

		//$.widget.bridge( name, constructor );

		splugins.register(constructor,name,fullName);

		return constructor;
	};

	$.widget.extend = function( target ) {
		var input = widgetSlice.call( arguments, 1 );
		var inputIndex = 0;
		var inputLength = input.length;
		var key;
		var value;

		for ( ; inputIndex < inputLength; inputIndex++ ) {
			for ( key in input[ inputIndex ] ) {
				value = input[ inputIndex ][ key ];
				if ( widgetHasOwnProperty.call( input[ inputIndex ], key ) && value !== undefined ) {

					// Clone objects
					if ( $.isPlainObject( value ) ) {
						target[ key ] = $.isPlainObject( target[ key ] ) ?
							$.widget.extend( {}, target[ key ], value ) :

							// Don't extend strings, arrays, etc. with objects
							$.widget.extend( {}, value );

					// Copy everything else by reference
					} else {
						target[ key ] = value;
					}
				}
			}
		}
		return target;
	};


	$.Widget = 	 JqPlugin.inherit({
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",

		options: {
			classes: {},
			disabled: false,

			// Callbacks
			create: null
		},

		widget: function() {
			return this.element;
		},

		_setOption: function( key, value ) {
			if ( key === "classes" ) {
				this._setOptionClasses( value );
			}

			this.options[ key ] = value;

			if ( key === "disabled" ) {
				this._setOptionDisabled( value );
			}

			return this;
		},

		_setOptionClasses: function( value ) {
			var classKey, elements, currentElements;

			for ( classKey in value ) {
				currentElements = this.classesElementLookup[ classKey ];
				if ( value[ classKey ] === this.options.classes[ classKey ] ||
						!currentElements ||
						!currentElements.length ) {
					continue;
				}

				// We are doing this to create a new jQuery object because the _removeClass() call
				// on the next line is going to destroy the reference to the current elements being
				// tracked. We need to save a copy of this collection so that we can add the new classes
				// below.
				elements = $( currentElements.get() );
				this._removeClass( currentElements, classKey );

				// We don't use _addClass() here, because that uses this.options.classes
				// for generating the string of classes. We want to use the value passed in from
				// _setOption(), this is the new value of the classes option which was passed to
				// _setOption(). We pass this value directly to _classes().
				elements.addClass( this._classes( {
					element: elements,
					keys: classKey,
					classes: value,
					add: true
				} ));
			}
		},

		_setOptionDisabled: function( value ) {
			this._toggleClass( this.widget(), this.widgetFullName + "-disabled", null, !!value );

			// If the widget is becoming disabled, then nothing is interactive
			if ( value ) {
				this._removeClass( this.hoverable, null, "ui-state-hover" );
				this._removeClass( this.focusable, null, "ui-state-focus" );
			}
		},

		enable: function() {
			return this._setOptions( { disabled: false } );
		},

		disable: function() {
			return this._setOptions( { disabled: true } );
		},


		_delay: function( handler, delay ) {
			function handlerProxy() {
				return ( typeof handler === "string" ? instance[ handler ] : handler )
					.apply( instance, arguments );
			}
			var instance = this;
			return setTimeout( handlerProxy, delay || 0 );
		},

		_hoverable: function( element ) {
			this.hoverable = this.hoverable.add( element );
			this._on( element, {
				mouseenter: function( event ) {
					this._addClass( $( event.currentTarget ), null, "ui-state-hover" );
				},
				mouseleave: function( event ) {
					this._removeClass( $( event.currentTarget ), null, "ui-state-hover" );
				}
			} );
		},

		_focusable: function( element ) {
			this.focusable = this.focusable.add( element );
			this._on( element, {
				focusin: function( event ) {
					this._addClass( $( event.currentTarget ), null, "ui-state-focus" );
				},
				focusout: function( event ) {
					this._removeClass( $( event.currentTarget ), null, "ui-state-focus" );
				}
			} );
		}

	});

	$.Widget._childConstructors = [];

	$.each( { show: "fadeIn", hide: "fadeOut" }, function( method, defaultEffect ) {
		$.Widget.prototype[ "_" + method ] = function( element, options, callback ) {
			if ( typeof options === "string" ) {
				options = { effect: options };
			}

			var hasOptions;
			var effectName = !options ?
				method :
				options === true || typeof options === "number" ?
					defaultEffect :
					options.effect || defaultEffect;

			options = options || {};
			if ( typeof options === "number" ) {
				options = { duration: options };
			}

			hasOptions = !$.isEmptyObject( options );
			options.complete = callback;

			if ( options.delay ) {
				element.delay( options.delay );
			}

			if ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {
				element[ method ]( options );
			} else if ( effectName !== method && element[ effectName ] ) {
				element[ effectName ]( options.duration, options.easing, callback );
			} else {
				element.queue( function( next ) {
					$( this )[ method ]();
					if ( callback ) {
						callback.call( element[ 0 ] );
					}
					next();
				} );
			}
		};
	} );

	return $.widget;

});

define('skylark-jquery/main',[
    "./core",
    "./ajax",
    "./callbacks",
    "./deferred",
    "./queue",
    "./JqueryPlugin",
    "./widget"
], function($) {
    return $;
});

define('skylark-jquery', ['skylark-jquery/main'], function (main) { return main; });

define('skylark-jsmodeler/core/jsm',[],function(){
	var JSM = function ()
	{
		this.mainVersion = 0;
		this.subVersion = 45;
	};

	/**
	* Function: RandomNumber
	* Description: Generates a random number between two numbers.
	* Parameters:
	*	from {number} lowest random result
	*	to {number} highest random result
	* Returns:
	*	{number} the result
	*/
	JSM.RandomNumber = function (from, to)
	{
		return Math.random () * (to - from) + from;
	};

	/**
	* Function: RandomInt
	* Description: Generates a random integer between two integers.
	* Parameters:
	*	from {integer} lowest random result
	*	to {integer} highest random result
	* Returns:
	*	{integer} the result
	*/
	JSM.RandomInt = function (from, to)
	{
		return Math.floor ((Math.random () * (to - from + 1)) + from);
	};

	/**
	* Function: RandomBoolean
	* Description: Generates a random boolean value.
	* Returns:
	*	{boolean} the result
	*/
	JSM.RandomBoolean = function ()
	{
		return JSM.RandomInt (0, 1) === 1;
	};

	/**
	* Function: SeededRandomInt
	* Description: Generates a random integer between two integers. A seed number can be specified.
	* Parameters:
	*	from {integer} lowest random result
	*	to {integer} highest random result
	*	seed {integer} seed value
	* Returns:
	*	{integer} the result
	*/
	JSM.SeededRandomInt = function (from, to, seed)
	{
	    var random = ((seed * 9301 + 49297) % 233280) / 233280;
		return Math.floor ((random * (to - from + 1)) + from);
	};

	/**
	* Function: ValueOrDefault
	* Description: Returns the given value, or a default if it is undefined.
	* Parameters:
	*	val {anything} new value
	*	def {anything} default value
	* Returns:
	*	{anything} the result
	*/
	JSM.ValueOrDefault = function (val, def)
	{
		if (val === undefined || val === null) {
			return def;
		}
		return val;
	};

	/**
	* Function: PrevIndex
	* Description: Returns the circular previous index for an array with the given length.
	* Parameters:
	*	index {integer} the index
	*	length {integer} the number of indices
	*/
	JSM.PrevIndex = function (index, length)
	{
		return index > 0 ? index - 1 : length - 1;
	};

	/**
	* Function: NextIndex
	* Description: Returns the circular next index for an array with the given length.
	* Parameters:
	*	index {integer} the index
	*	length {integer} the number of indices
	*/
	JSM.NextIndex = function (index, length)
	{
		return index < length - 1 ? index + 1 : 0;
	};

	/**
	* Function: CopyObjectProperties
	* Description: Copies one object properties to another object.
	* Parameters:
	*	source {anything} source object
	*	target {anything} target object
	*	overwrite {boolean} overwrite existing properties
	*/
	JSM.CopyObjectProperties = function (source, target, overwrite)
	{
		if (source === undefined || source === null ||
			target === undefined || target === null)
		{
			return;
		}

		var property;
		for (property in source) {
			if (source.hasOwnProperty (property)) {
				if (overwrite || target[property] === undefined || target[property] === null) {
					target[property] = source[property];
				}
			}
		}
	};

	/**
	* Function: GetObjectProperty
	* Description: Returns the given property of the object. If it doesn't exist, returns the given default value.
	* Parameters:
	*	object {anything} the object
	*	propertyName {string} the name of the property
	*	defaultValue {anything} the default value
	*/
	JSM.GetObjectProperty = function (object, propertyName, defaultValue)
	{
		if (object === undefined || object === null) {
			return defaultValue;
		}

		var propertyValue = object[propertyName];
		if (propertyValue === undefined || propertyValue === null) {
			return defaultValue;
		}
		
		return propertyValue;
	};

	/**
	* Function: Message
	* Description: Writes a message to the console.
	* Parameters:
	*	message {string} the message
	*/
	JSM.Message = function (message)
	{
		console.log ('JSModeler: ' + message);
	};

	return JSM;
});



define('skylark-jsmodeler/core/timer',["./jsm"],function(JSM){
	/**
	* Class: Timer
	* Description: Utility class for time measure.
	*/
	JSM.Timer = function ()	{
		this.start = 0;
		this.stop = 0;
	};

	/**
	* Function: Timer.Start
	* Description: Starts the timer.
	*/
	JSM.Timer.prototype.Start = function ()	{
		var date = new Date ();
		this.start = date.getTime ();
	};

	/**
	* Function: Timer.Stop
	* Description: Stops the timer.
	*/
	JSM.Timer.prototype.Stop = function ()	{
		var date = new Date ();
		this.end = date.getTime ();
	};

	/**
	* Function: Timer.Result
	* Description: Returns the time between start and stop.
	* Returns:
	*	{number} The result.
	*/
	JSM.Timer.prototype.Result = function (){
		return (this.end - this.start);
	};

	/**
	* Class: FPSCounter
	* Description:
	*	Utility class for FPS count. It calculates the frames and returns FPS count for the last interval
	*	with the given length. The Get function should called in every frame.
	*/
	JSM.FPSCounter = function (){
		this.start = null;
		this.frames = null;
		this.current = null;
	};

	/**
	* Function: FPSCounter.Get
	* Description: Returns the FPS count for the last interval with the given length.
	* Parameters:
	*	interval {integer} the interval length in milliseconds
	* Returns:
	*	{integer} The result.
	*/
	JSM.FPSCounter.prototype.Get = function (interval)	{
		var date = new Date ();
		var end = date.getTime ();
		if (this.start === null) {
			this.start = end;
			this.frames = 0;
			this.current = 0;
		}

		if (interval === null || interval === undefined) {
			interval = 1000;
		}
		
		this.frames = this.frames + 1;
		var elapsed = end - this.start;
		if (elapsed >= interval) {
			this.current = 1000 * (this.frames / elapsed);
			this.start = end;
			this.frames = 0;
		}

		return parseInt (this.current, 10);
	};

	return JSM;
});

define('skylark-jsmodeler/core/algorithm',["./jsm"],function(JSM){

	/**
	* Function: SwapArrayValues
	* Description: Swaps to array values.
	* Parameters:
	*	array {anything[]} the array
	*	from {integer} from index
	*	to {integer} to index
	*/
	JSM.SwapArrayValues = function (array, from, to){
		var temp = array[from];
		array[from] = array[to];
		array[to] = temp;
	};

	/**
	* Function: BubbleSort
	* Description: Sorts an array with bubble sort.
	* Parameters:
	*	array {anything[]} the array to sort
	*	onCompare {function} the compare function
	*	onSwap {function} the swap function
	*/
	JSM.BubbleSort = function (array, onCompare, onSwap){
		if (array.length < 2) {
			return false;
		}

		var compareFunction = onCompare;
		if (compareFunction === undefined || compareFunction === null) {
			return false;
		}
		
		var swapFunction = onSwap;
		if (swapFunction === undefined || swapFunction === null) {
			swapFunction = function (i, j) {
				JSM.SwapArrayValues (array, i, j);
			};
		}
		
		var i, j;
		for (i = 0; i < array.length - 1; i++) {
			for (j = 0; j < array.length - i - 1; j++) {
				if (!compareFunction (array[j], array[j + 1])) {
					swapFunction (j, j + 1);
				}
			}
		}
		
		return true;
	};

	/**
	* Function: ShiftArray
	* Description: Shifts an array.
	* Parameters:
	*	array {anything[]} the array to shift
	*	count {integer} shift count
	*/
	JSM.ShiftArray = function (array, count){
		var i;
		for (i = 0; i < count; i++) {
			array.push (array.shift ());
		}
	};

	return JSM;
});

define('skylark-jsmodeler/core/async',["./jsm"],function(JSM){
	/**
	* Function: AsyncRunTask
	* Description:
	*	Calls a function multiple times asynchronously. If the environment
	*	is not specified, it will run synchronously.
	* Parameters:
	*	taskFunction {function} the function to run
	*	callbacks {object} callbacks for start, process, and finish
	*	runCount {integer} the count of runs
	*	timeout {integer} the timeout between runs
	*	userData {anything} task specific data
	*/
	JSM.AsyncRunTask = function (taskFunction, callbacks, runCount, timeout, userData)
	{
		function OnStart (runCount, userData, callbacks)
		{
			if (callbacks.onStart !== undefined && callbacks.onStart !== null) {
				callbacks.onStart (runCount, userData);
			}
		}

		function OnProgress (currentCount, userData, callbacks)
		{
			if (callbacks.onProgress !== undefined && callbacks.onProgress !== null) {
				callbacks.onProgress (currentCount, userData);
			}
		}
		
		function OnFinished (userData, callbacks)
		{
			if (callbacks.onFinish !== undefined && callbacks.onFinish !== null) {
				callbacks.onFinish (userData);
			}
		}

		function RunTask (currentCount, userData, callbacks)
		{
			var needContinue = taskFunction ();
			OnProgress (currentCount, userData, callbacks);
			if (needContinue && currentCount < runCount - 1) {
				setTimeout (function () {
					RunTask (currentCount + 1, userData, callbacks);
				}, timeout);
			} else {
				setTimeout (function () {
					OnFinished (userData, callbacks);
				}, timeout);
			}
		}
		
		if (callbacks === undefined || callbacks === null) {
			var i, needContinue;
			for (i = 0; i < runCount; i++) {
				needContinue = taskFunction ();
				if (!needContinue) {
					break;
				}
			}
			return;
		}
		
		OnStart (runCount, userData, callbacks);
		RunTask (0, userData, callbacks);
	};

	return JSM;
});

define('skylark-jsmodeler/core/check',["./jsm"],function(JSM){
	/**
	* Function: IsWebGLEnabled
	* Description: Returns if WebGL is enabled in the browser.
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsWebGLEnabled = function (){
		if (!window.WebGLRenderingContext) {
			return false;
		}
		
		try {
			var canvas = document.createElement ('canvas');
			if (!canvas.getContext ('experimental-webgl') && !canvas.getContext ('webgl')) {
				return false;
			}
		} catch (exception) {
			return false;
		}
		
		return true;
	};

	/**
	* Function: IsFileApiEnabled
	* Description: Returns if file api is enabled in the browser.
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsFileApiEnabled = function ()	{
		if (!window.File || !window.FileReader || !window.FileList || !window.Blob || !window.URL) {
			return false;
		}
		
		return true;
	};

	return JSM;
});

define('skylark-jsmodeler/core/jsonloader',["./jsm"],function(JSM){
	/**
	* Function: LoadJsonFile
	* Description: Loads a json file, and calls a callback with the parsed json.
	* Parameters:
	*	fileName {string} the name of the json
	*	onReady {function} the callback
	*/
	JSM.LoadJsonFile = function (fileName, onReady)	{
		var request = new XMLHttpRequest ();
		request.overrideMimeType ('application/json');
		request.open ('GET', fileName, true);
		request.onreadystatechange = function () {
			if (request.readyState == 4) {
				var jsonData = JSON.parse (request.responseText);
				onReady (jsonData);
			}
		};
		request.send (null);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/definitions',["../core/jsm"],function(JSM){
	JSM.Eps = 0.00000001;
	JSM.Inf = 9999999999;
	JSM.RadDeg = 57.29577951308232;
	JSM.DegRad = 0.017453292519943;

	/**
	* Function: IsZero
	* Description: Determines if the given value is near zero. Uses epsilon for comparison.
	* Parameters:
	*	a {number} the value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsZero = function (a)
	{
		return Math.abs (a) < JSM.Eps;
	};

	/**
	* Function: IsPositive
	* Description: Determines if the given value is positive. Uses epsilon for comparison.
	* Parameters:
	*	a {number} the value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsPositive = function (a)
	{
		return a > JSM.Eps;
	};

	/**
	* Function: IsNegative
	* Description: Determines if the given value is negative. Uses epsilon for comparison.
	* Parameters:
	*	a {number} the value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsNegative = function (a)
	{
		return a < -JSM.Eps;
	};

	/**
	* Function: IsLower
	* Description: Determines if a value is lower than an other. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsLower = function (a, b)
	{
		return b - a > JSM.Eps;
	};

	/**
	* Function: IsGreater
	* Description: Determines if a value is greater than an other. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsGreater = function (a, b)
	{
		return a - b > JSM.Eps;
	};

	/**
	* Function: IsEqual
	* Description: Determines if two values are equal. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsEqual = function (a, b)
	{
		return Math.abs (b - a) < JSM.Eps;
	};

	/**
	* Function: IsEqualWithEps
	* Description: Determines if two values are equal. Uses the given epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	*	eps {number} epsilon value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsEqualWithEps = function (a, b, eps)
	{
		return Math.abs (b - a) < eps;
	};

	/**
	* Function: IsLowerOrEqual
	* Description: Determines if a value is lower or equal to an other. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsLowerOrEqual = function (a, b)
	{
		return JSM.IsLower (a, b) || JSM.IsEqual (a, b);
	};

	/**
	* Function: IsGreaterOrEqual
	* Description: Determines if a value is greater or equal to an other. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsGreaterOrEqual = function (a, b)
	{
		return JSM.IsGreater (a, b) || JSM.IsEqual (a, b);
	};

	/**
	* Function: Minimum
	* Description: Returns the minimum of two values. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{number} the result
	*/
	JSM.Minimum = function (a, b)
	{
		return JSM.IsLower (a, b) ? a : b;
	};

	/**
	* Function: Maximum
	* Description: Returns the maximum of two values. Uses epsilon for comparison.
	* Parameters:
	*	a {number} first value
	*	b {number} second value
	* Returns:
	*	{number} the result
	*/
	JSM.Maximum = function (a, b)
	{
		return JSM.IsGreater (a, b) ? a : b;
	};

	/**
	* Function: ArcSin
	* Description: Calculates the arcus sinus value.
	* Parameters:
	*	value {number} the value
	* Returns:
	*	{number} the result
	*/
	JSM.ArcSin = function (value)
	{
		if (JSM.IsGreaterOrEqual (value, 1.0)) {
			return Math.PI / 2.0;
		} else if (JSM.IsLowerOrEqual (value, -1.0)) {
			return - Math.PI / 2.0;
		}
		
		return Math.asin (value);
	};

	/**
	* Function: ArcCos
	* Description: Calculates the arcus cosinus value.
	* Parameters:
	*	value {number} the value
	* Returns:
	*	{number} the result
	*/
	JSM.ArcCos = function (value)
	{
		if (JSM.IsGreaterOrEqual (value, 1.0)) {
			return 0.0;
		} else if (JSM.IsLowerOrEqual (value, -1.0)) {
			return Math.PI;
		}
		
		return Math.acos (value);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/coord2d',["../core/jsm"],function(JSM){
	/**
	* Class: Coord2D
	* Description: Represents a 2D coordinate.
	* Parameters:
	*	x {number} the first component
	*	y {number} the second component
	*/
	JSM.Coord2D = function (x, y)
	{
		this.x = x;
		this.y = y;
	};

	/**
	* Function: Coord2D.Set
	* Description: Sets the coordinate.
	* Parameters:
	*	x {number} the first component
	*	y {number} the second component
	*/
	JSM.Coord2D.prototype.Set = function (x, y)
	{
		this.x = x;
		this.y = y;
	};

	/**
	* Function: Coord2D.IsEqual
	* Description: Returns if the coordinate is equal with the given one.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{boolean} the result
	*/
	JSM.Coord2D.prototype.IsEqual = function (coord)
	{
		return JSM.IsEqual (this.x, coord.x) && JSM.IsEqual (this.y, coord.y);
	};

	/**
	* Function: Coord2D.IsEqualWithEps
	* Description: Returns if the coordinate is equal with the given one. Uses the given epsilon for comparison.
	* Parameters:
	*	coord {Coord2D} the coordinate
	*	eps {number} the epsilon
	* Returns:
	*	{boolean} the result
	*/
	JSM.Coord2D.prototype.IsEqualWithEps = function (coord, eps)
	{
		return JSM.IsEqualWithEps (this.x, coord.x, eps) && JSM.IsEqualWithEps (this.y, coord.y, eps);
	};

	/**
	* Function: Coord2D.DistanceTo
	* Description: Calculates the coordinate distance to the given one.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Coord2D.prototype.DistanceTo = function (coord)
	{
		return Math.sqrt ((coord.x - this.x) * (coord.x - this.x) + (coord.y - this.y) * (coord.y - this.y));
	};

	/**
	* Function: Coord2D.AngleTo
	* Description: Calculates the coordinate vector angle to the given one.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Coord2D.prototype.AngleTo = function (coord)
	{
		var aDirection = this.Clone ().Normalize ();
		var bDirection = coord.Clone ().Normalize ();
		if (aDirection.IsEqual (bDirection)) {
			return 0.0;
		}
		var product = JSM.VectorDot2D (aDirection, bDirection);
		return JSM.ArcCos (product);
	};

	/**
	* Function: Coord2D.Length
	* Description: Calculates the length of the coordinate vector.
	* Returns:
	*	{number} the result
	*/
	JSM.Coord2D.prototype.Length = function ()
	{
		return Math.sqrt (this.x * this.x + this.y * this.y);
	};

	/**
	* Function: Coord2D.MultiplyScalar
	* Description: Multiplies the vector with a scalar.
	* Parameters:
	*	scalar {number} the scalar
	* Returns:
	*	{Coord2D} this pointer
	*/
	JSM.Coord2D.prototype.MultiplyScalar = function (scalar)
	{
		this.x *= scalar;
		this.y *= scalar;
		return this;
	};

	/**
	* Function: Coord2D.Normalize
	* Description: Normalizes the coordinate vector.
	* Returns:
	*	{Coord2D} this pointer
	*/
	JSM.Coord2D.prototype.Normalize = function ()
	{
		var length = this.Length ();
		if (JSM.IsPositive (length)) {
			this.MultiplyScalar (1.0 / length);
		}
		return this;
	};

	/**
	* Function: Coord2D.SetLength
	* Description: Sets the length of the coordinate vector.
	* Parameters:
	*	length {number} the length
	* Returns:
	*	{Coord2D} this pointer
	*/
	JSM.Coord2D.prototype.SetLength = function (length)
	{
		var thisLength = this.Length ();
		if (JSM.IsPositive (thisLength)) {
			this.MultiplyScalar (length / thisLength);
		}
		return this;
	};

	/**
	* Function: Coord2D.Offset
	* Description: Offsets the coordinate.
	* Parameters:
	*	direction {Vector2D} the direction of the offset
	*	distance {number} the distance of the offset
	* Returns:
	*	{Coord2D} this pointer
	*/
	JSM.Coord2D.prototype.Offset = function (direction, distance)
	{
		var normal = direction.Clone ().Normalize ();
		this.x += normal.x * distance;
		this.y += normal.y * distance;
		return this;
	};

	/**
	* Function: Coord2D.Rotate
	* Description: Rotates the coordinate.
	* Parameters:
	*	angle {number} the angle of the rotation
	*	origo {Coord2D} the origo of the rotation
	* Returns:
	*	{Coord2D} this pointer
	*/
	JSM.Coord2D.prototype.Rotate = function (angle, origo)
	{
		var x = this.x - origo.x;
		var y = this.y - origo.y;
		var co = Math.cos (angle);
		var si = Math.sin (angle);
		this.x = x * co - y * si + origo.x;
		this.y = x * si + y * co + origo.y;
		return this;
	};

	/**
	* Function: Coord2D.ToString
	* Description: Converts the coordinate values to string.
	* Returns:
	*	{string} the string representation of the coordinate
	*/
	JSM.Coord2D.prototype.ToString = function ()
	{
		return ('(' + this.x + ', ' + this.y + ')');
	};

	/**
	* Function: Coord2D.Clone
	* Description: Clones the coordinate.
	* Returns:
	*	{Coord2D} a cloned instance
	*/
	JSM.Coord2D.prototype.Clone = function ()
	{
		return new JSM.Coord2D (this.x, this.y);
	};

	/**
	* Class: Vector2D
	* Description: Same as Coord2D.
	*/
	JSM.Vector2D = JSM.Coord2D;

	/**
	* Function: CoordFromArray2D
	* Description: Returns a coordinate from an array of components.
	* Parameters:
	*	array {number[2]} the array of components
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.CoordFromArray2D = function (array)
	{
		return new JSM.Coord2D (array[0], array[1]);
	};

	/**
	* Function: CoordToArray2D
	* Description: Returns array of components from a coordinate.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	array {number[2]} the result
	*/
	JSM.CoordToArray2D = function (coord)
	{
		return [coord.x, coord.y];
	};

	/**
	* Function: CoordAdd2D
	* Description: Adds two coordinates.
	* Parameters:
	*	a {Coord2D} the first coordinate
	*	b {Coord2D} the second coordinate
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.CoordAdd2D = function (a, b)
	{
		return new JSM.Coord2D (a.x + b.x, a.y + b.y);
	};

	/**
	* Function: CoordSub2D
	* Description: Subs two coordinates.
	* Parameters:
	*	a {Coord2D} the first coordinate
	*	b {Coord2D} the second coordinate
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.CoordSub2D = function (a, b)
	{
		return new JSM.Coord2D (a.x - b.x, a.y - b.y);
	};

	/**
	* Function: VectorDot2D
	* Description: Calculates the dot product of two vectors.
	* Parameters:
	*	a {Vector2D} the first vector
	*	b {Vector2D} the second vector
	* Returns:
	*	{number} the result
	*/
	JSM.VectorDot2D = function (a, b)
	{
		return a.x * b.x + a.y * b.y;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/coord',["../core/jsm"],function(JSM){
	/**
	* Class: Coord
	* Description: Represents a 3D coordinate.
	* Parameters:
	*	x {number} the first component
	*	y {number} the second component
	*	z {number} the third component
	*/
	JSM.Coord = function (x, y, z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	};

	/**
	* Function: Coord.Set
	* Description: Sets the coordinate.
	* Parameters:
	*	x {number} the first component
	*	y {number} the second component
	*	z {number} the third component
	*/
	JSM.Coord.prototype.Set = function (x, y, z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	};

	/**
	* Function: Coord.IsEqual
	* Description: Returns if the coordinate is equal with the given one.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{boolean} the result
	*/
	JSM.Coord.prototype.IsEqual = function (coord)
	{
		return JSM.IsEqual (this.x, coord.x) && JSM.IsEqual (this.y, coord.y) && JSM.IsEqual (this.z, coord.z);
	};

	/**
	* Function: Coord.IsEqualWithEps
	* Description: Returns if the coordinate is equal with the given one. Uses the given epsilon for comparison.
	* Parameters:
	*	coord {Coord} the coordinate
	*	eps {number} the epsilon
	* Returns:
	*	{boolean} the result
	*/
	JSM.Coord.prototype.IsEqualWithEps = function (coord, eps)
	{
		return JSM.IsEqualWithEps (this.x, coord.x, eps) && JSM.IsEqualWithEps (this.y, coord.y, eps) && JSM.IsEqualWithEps (this.z, coord.z, eps);
	};

	/**
	* Function: Coord.DistanceTo
	* Description: Calculates the coordinate distance to the given one.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Coord.prototype.DistanceTo = function (coord)
	{
		return Math.sqrt ((coord.x - this.x) * (coord.x - this.x) + (coord.y - this.y) * (coord.y - this.y) + (coord.z - this.z) * (coord.z - this.z));
	};

	/**
	* Function: Coord.AngleTo
	* Description: Calculates the coordinate vector angle to the given one.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Coord.prototype.AngleTo = function (coord)
	{
		var aDirection = this.Clone ().Normalize ();
		var bDirection = coord.Clone ().Normalize ();
		if (aDirection.IsEqual (bDirection)) {
			return 0.0;
		}
		var product = JSM.VectorDot (aDirection, bDirection);
		return JSM.ArcCos (product);
	};

	/**
	* Function: Coord.IsCollinearWith
	* Description: Returns if the coordinate vector is collinear with the given one.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{boolean} the result
	*/
	JSM.Coord.prototype.IsCollinearWith = function (coord)
	{
		var angle = this.AngleTo (coord);
		return JSM.IsEqual (angle, 0.0) || JSM.IsEqual (angle, Math.PI);
	};

	/**
	* Function: Coord.IsPerpendicularWith
	* Description: Returns if the coordinate vector is perpendicular with the given one.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{boolean} the result
	*/
	JSM.Coord.prototype.IsPerpendicularWith = function (coord)
	{
		var angle = this.AngleTo (coord);
		return JSM.IsEqual (angle, Math.PI / 2.0);
	};

	/**
	* Function: Coord.Length
	* Description: Calculates the length of the coordinate vector.
	* Returns:
	*	{number} the result
	*/
	JSM.Coord.prototype.Length = function ()
	{
		return Math.sqrt (this.x * this.x + this.y * this.y + this.z * this.z);
	};

	/**
	* Function: Coord.Add
	* Description: Adds the given coordinate to coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*/
	JSM.Coord.prototype.Add = function (coord)
	{
		this.x += coord.x;
		this.y += coord.y;
		this.z += coord.z;
	};

	/**
	* Function: Coord.Sub
	* Description: Subs the given coordinate from coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*/
	JSM.Coord.prototype.Sub = function (coord)
	{
		this.x -= coord.x;
		this.y -= coord.y;
		this.z -= coord.z;
	};

	/**
	* Function: Coord.MultiplyScalar
	* Description: Multiplies the vector with a scalar.
	* Parameters:
	*	scalar {number} the scalar
	* Returns:
	*	{Coord} this pointer
	*/
	JSM.Coord.prototype.MultiplyScalar = function (scalar)
	{
		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		return this;
	};

	/**
	* Function: Coord.Normalize
	* Description: Normalizes the coordinate vector.
	* Returns:
	*	{Coord} this pointer
	*/
	JSM.Coord.prototype.Normalize = function ()
	{
		var length = this.Length ();
		if (JSM.IsPositive (length)) {
			this.MultiplyScalar (1.0 / length);
		}
		return this;
	};

	/**
	* Function: Coord.SetLength
	* Description: Sets the length of the coordinate vector.
	* Parameters:
	*	length {number} the length
	* Returns:
	*	{Coord} this pointer
	*/
	JSM.Coord.prototype.SetLength = function (length)
	{
		var thisLength = this.Length ();
		if (JSM.IsPositive (thisLength)) {
			this.MultiplyScalar (length / thisLength);
		}
		return this;
	};

	/**
	* Function: Coord.Offset
	* Description: Offsets the coordinate.
	* Parameters:
	*	direction {Vector} the direction of the offset
	*	distance {number} the distance of the offset
	* Returns:
	*	{Coord} this pointer
	*/
	JSM.Coord.prototype.Offset = function (direction, distance)
	{
		var normal = direction.Clone ().Normalize ();
		this.x += normal.x * distance;
		this.y += normal.y * distance;
		this.z += normal.z * distance;
		return this;
	};

	/**
	* Function: Coord.Rotate
	* Description: Rotates the coordinate.
	* Parameters:
	*	axis {Vector} the axis of the rotation
	*	angle {number} the angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{Coord} this pointer
	*/

	JSM.Coord.prototype.Rotate = function (axis, angle, origo)
	{
		var normal = axis.Clone ().Normalize ();

		var u = normal.x;
		var v = normal.y;
		var w = normal.z;

		var x = this.x - origo.x;
		var y = this.y - origo.y;
		var z = this.z - origo.z;

		var si = Math.sin (angle);
		var co = Math.cos (angle);
		this.x = - u * (- u * x - v * y - w * z) * (1.0 - co) + x * co + (- w * y + v * z) * si;
		this.y = - v * (- u * x - v * y - w * z) * (1.0 - co) + y * co + (w * x - u * z) * si;
		this.z = - w * (- u * x - v * y - w * z) * (1.0 - co) + z * co + (- v * x + u * y) * si;
		
		this.x += origo.x;
		this.y += origo.y;
		this.z += origo.z;
		return this;
	};

	/**
	* Function: Coord.ToCoord2D
	* Description: Converts the coordinate to a 2D coordinate.
	* Parameters:
	*	normal {Vector} the normal vector for conversion
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.Coord.prototype.ToCoord2D = function (normal)
	{
		var origo = new JSM.Coord (0.0, 0.0, 0.0);
		var zNormal = new JSM.Vector (0.0, 0.0, 1.0);
		var axis = JSM.VectorCross (normal, zNormal);
		var angle = normal.AngleTo (zNormal);
		var rotated = this.Clone ().Rotate (axis, angle, origo);
		return new JSM.Coord2D (rotated.x, rotated.y);
	};

	/**
	* Function: Coord.ToString
	* Description: Converts the coordinate values to string.
	* Returns:
	*	{string} the string representation of the coordinate
	*/
	JSM.Coord.prototype.ToString = function ()
	{
		return ('(' + this.x + ', ' + this.y + ', ' + this.z + ')');
	};

	/**
	* Function: Coord.Clone
	* Description: Clones the coordinate.
	* Returns:
	*	{Coord} a cloned instance
	*/
	JSM.Coord.prototype.Clone = function ()
	{
		return new JSM.Coord (this.x, this.y, this.z);
	};

	/**
	* Class: Vector
	* Description: Same as Coord.
	*/
	JSM.Vector = JSM.Coord;

	/**
	* Function: CoordFromArray
	* Description: Returns a coordinate from an array of components.
	* Parameters:
	*	array {number[3]} the array of components
	* Returns:
	*	{Coord} the result
	*/
	JSM.CoordFromArray = function (array)
	{
		return new JSM.Coord (array[0], array[1], array[2]);
	};

	/**
	* Function: CoordToArray
	* Description: Returns array of components from a coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	array {number[3]} the result
	*/
	JSM.CoordToArray = function (coord)
	{
		return [coord.x, coord.y, coord.z];
	};

	/**
	* Function: CoordAdd
	* Description: Adds two coordinates.
	* Parameters:
	*	a {Coord} the first coordinate
	*	b {Coord} the second coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.CoordAdd = function (a, b)
	{
		return new JSM.Coord (a.x + b.x, a.y + b.y, a.z + b.z);
	};

	/**
	* Function: CoordSub
	* Description: Subs two coordinates.
	* Parameters:
	*	a {Coord} the first coordinate
	*	b {Coord} the second coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.CoordSub = function (a, b)
	{
		return new JSM.Coord (a.x - b.x, a.y - b.y, a.z - b.z);
	};

	/**
	* Function: VectorDot
	* Description: Calculates the dot product of two vectors.
	* Parameters:
	*	a {Vector} the first vector
	*	b {Vector} the second vector
	* Returns:
	*	{number} the result
	*/
	JSM.VectorDot = function (a, b)
	{
		return a.x * b.x + a.y * b.y + a.z * b.z;
	};

	/**
	* Function: VectorCross
	* Description: Calculates the cross product of two vectors.
	* Parameters:
	*	a {Vector} the first vector
	*	b {Vector} the second vector
	* Returns:
	*	{Vector} the result
	*/
	JSM.VectorCross = function (a, b)
	{
		var result = new JSM.Vector (0.0, 0.0, 0.0);
		result.x = a.y * b.z - a.z * b.y;
		result.y = a.z * b.x - a.x * b.z;
		result.z = a.x * b.y - a.y * b.x;
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/determinant',["../core/jsm"],function(JSM){
	/**
	* Function: MatrixDeterminant2x2
	* Description: Calculates the determinant of a 2x2 matrix.
	* Parameters:
	*	m00..m11 {4 numbers} the matrix values
	* Returns:
	*	{number} the result
	*/
	JSM.MatrixDeterminant2x2 = function (m00, m01,
										m10, m11)
	{
		return m00 * m11 - m01 * m10;
	};

	/**
	* Function: MatrixDeterminant3x3
	* Description: Calculates the determinant of a 3x3 matrix.
	* Parameters:
	*	m00..m22 {9 numbers} the matrix values
	* Returns:
	*	{number} the result
	*/
	JSM.MatrixDeterminant3x3 = function (m00, m01, m02,
										m10, m11, m12,
										m20, m21, m22)
	{
		var subDet1 = JSM.MatrixDeterminant2x2 (m11, m12, m21, m22);
		var subDet2 = JSM.MatrixDeterminant2x2 (m10, m12, m20, m22);
		var subDet3 = JSM.MatrixDeterminant2x2 (m10, m11, m20, m21);
		return m00 * subDet1 - m01 * subDet2 + m02 * subDet3;
	};

	/**
	* Function: MatrixDeterminant4x4
	* Description: Calculates the determinant of a 4x4 matrix.
	* Parameters:
	*	m00..m33 {16 numbers} the matrix values
	* Returns:
	*	{number} the result
	*/
	JSM.MatrixDeterminant4x4 = function (m00, m01, m02, m03,
										m10, m11, m12, m13,
										m20, m21, m22, m23,
										m30, m31, m32, m33)
	{
		var subDet1 = JSM.MatrixDeterminant3x3 (m11, m12, m13, m21, m22, m23, m31, m32, m33);
		var subDet2 = JSM.MatrixDeterminant3x3 (m10, m12, m13, m20, m22, m23, m30, m32, m33);
		var subDet3 = JSM.MatrixDeterminant3x3 (m10, m11, m13, m20, m21, m23, m30, m31, m33);
		var subDet4 = JSM.MatrixDeterminant3x3 (m10, m11, m12, m20, m21, m22, m30, m31, m32);
		return subDet1 * m00 - subDet2 * m01 + subDet3 * m02 - subDet4 * m03;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/coordutils',["../core/jsm"],function(JSM){
	/**
	* Enum: Orientation
	* Description: Orientation of coordinates.
	* Values:
	*	{Invalid} invalid orientation or collinear
	*	{CounterClockwise} counter clockwise orientation
	*	{Clockwise} clockwise orientation
	*/
	JSM.Orientation = {
		Invalid : 0,
		CounterClockwise : 1,
		Clockwise : 2
	};

	/**
	* Function: MidCoord2D
	* Description: Calculates the coordinate in the middle of two coordinates.
	* Parameters:
	*	a {Coord2D} first coordinate
	*	b {Coord2D} second coordinate
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.MidCoord2D = function (a, b)
	{
		return new JSM.Coord2D ((a.x + b.x) / 2.0, (a.y + b.y) / 2.0);
	};

	/**
	* Function: CoordOrientation2D
	* Description: Calculates the turn type of three coordinates.
	* Parameters:
	*	a {Coord2D} the first coordinate
	*	b {Coord2D} the second coordinate
	*	c {Coord2D} the third coordinate
	* Returns:
	*	{Orientation} the result
	*/
	JSM.CoordOrientation2D = function (a, b, c)
	{
		var m00 = a.x;
		var m01 = a.y;
		var m10 = b.x;
		var m11 = b.y;
		var m20 = c.x;
		var m21 = c.y;
	    
		var determinant = m00 * m11 + m01 * m20 + m10 * m21 - m11 * m20 - m01 * m10 - m00 * m21;
		if (JSM.IsPositive (determinant)) {
			return JSM.Orientation.CounterClockwise;
		} else if (JSM.IsNegative (determinant)) {
			return JSM.Orientation.Clockwise;
		}
		
		return JSM.Orientation.Invalid;	
	};

	/**
	* Function: CoordSignedDistance2D
	* Description: Calculates the distance of two coordinates along a direction vector.
	* Parameters:
	*	a {Coord2D} first coordinate
	*	b {Coord2D} second coordinate
	*	direction {Vector2D} direction vector
	* Returns:
	*	{number} the result
	*/
	JSM.CoordSignedDistance2D = function (a, b, direction)
	{
		var abDirection = JSM.CoordSub2D (b, a);
		var distance = a.DistanceTo (b);
		
		var angle = abDirection.AngleTo (direction);
		if (JSM.IsPositive (angle)) {
			distance = -distance;
		}

		return distance;
	};

	/**
	* Function: PolarToCartesian
	* Description: Converts a polar coordinate to a cartesian coordinate.
	* Parameters:
	*	radius {number} the radius component
	*	theta {number} the angle component
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.PolarToCartesian = function (radius, theta)
	{
		var result = new JSM.Coord2D (0.0, 0.0);
		result.x = radius * Math.cos (theta);
		result.y = radius * Math.sin (theta);
		return result;
	};

	/**
	* Function: GetArcLengthFromAngle
	* Description: Calculates arc length from radius and angle.
	* Parameters:
	*	radius {number} the radius of the circle
	*	theta {number} the angle of rotation
	* Returns:
	*	{number} the result
	*/
	JSM.GetArcLengthFromAngle = function (radius, theta)
	{
		return theta * radius;
	};

	/**
	* Function: GetAngleFromArcLength
	* Description: Calculates angle from arc length.
	* Parameters:
	*	radius {number} the radius of the circle
	*	arcLength {number} the arc length
	* Returns:
	*	{number} the result
	*/
	JSM.GetAngleFromArcLength = function (radius, arcLength)
	{
		if (JSM.IsEqual (radius, 0.0)) {
			return 0.0;
		}
		
		return arcLength / radius;
	};

	/**
	* Function: MidCoord
	* Description: Calculates the coordinate in the middle of two coordinates.
	* Parameters:
	*	a {Coord} first coordinate
	*	b {Coord} second coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.MidCoord = function (a, b)
	{
		return new JSM.Coord ((a.x + b.x) / 2.0, (a.y + b.y) / 2.0, (a.z + b.z) / 2.0);
	};

	/**
	* Function: CoordSignedDistance
	* Description: Calculates the distance of two coordinates along a direction vector.
	* Parameters:
	*	a {Coord} first coordinate
	*	b {Coord} second coordinate
	*	direction {Vector} direction vector
	* Returns:
	*	{number} the result
	*/
	JSM.CoordSignedDistance = function (a, b, direction)
	{
		var abDirection = JSM.CoordSub (b, a);
		var distance = a.DistanceTo (b);
		
		var angle = abDirection.AngleTo (direction);
		if (JSM.IsPositive (angle)) {
			distance = -distance;
		}

		return distance;
	};

	/**
	* Function: GetVectorsFullAngle
	* Description: Calculates the full angle (0 to pi) of two vectors with the given normal vector.
	* Parameters:
	*	a {Vector} the first vector
	*	b {Vector} the second vector
	*	normal {Vector} the normal vector
	* Returns:
	*	{number} the result
	*/
	JSM.GetVectorsFullAngle = function (a, b, normal)
	{
		var angle = a.AngleTo (b);
		var origo = new JSM.Coord (0.0, 0.0, 0.0);
		
		if (JSM.CoordOrientation (a, origo, b, normal) == JSM.Orientation.Clockwise) {
			angle = 2.0 * Math.PI - angle;
		}
		
		return angle;
	};

	/**
	* Function: CoordOrientation
	* Description: Calculates the turn type of three coordinates.
	* Parameters:
	*	a {Coord} the first coordinate
	*	b {Coord} the second coordinate
	*	c {Coord} the third coordinate
	*	normal {Vector} normal vector for calculation
	* Returns:
	*	{Orientation} the result
	*/
	JSM.CoordOrientation = function (a, b, c, normal)
	{
		var a2 = a.ToCoord2D (normal);
		var b2 = b.ToCoord2D (normal);
		var c2 = c.ToCoord2D (normal);
		var orientation = JSM.CoordOrientation2D (a2, b2, c2);

		var zNormal = new JSM.Vector (0.0, 0.0, 1.0);
		var angle = normal.AngleTo (zNormal);
		if (JSM.IsEqual (angle, Math.PI)) {
			if (orientation == JSM.Orientation.CounterClockwise) {
				orientation = JSM.Orientation.Clockwise;
			} else if (orientation == JSM.Orientation.Clockwise) {
				orientation = JSM.Orientation.CounterClockwise;
			}
		}
		
		return orientation;
	};

	/**
	* Function: SphericalToCartesian
	* Description: Converts a spherical coordinate to a cartesian coordinate.
	* Parameters:
	*	radius {number} the radius component
	*	theta {number} the angle component
	*	phi {number} the phi component
	* Returns:
	*	{Coord} the result
	*/
	JSM.SphericalToCartesian = function (radius, theta, phi)
	{
		var result = new JSM.Coord (0.0, 0.0, 0.0);
		result.x = radius * Math.sin (theta) * Math.cos (phi);
		result.y = radius * Math.sin (theta) * Math.sin (phi);
		result.z = radius * Math.cos (theta);
		return result;
	};

	/**
	* Function: CylindricalToCartesian
	* Description: Converts a cylindrical coordinate to a cartesian coordinate.
	* Parameters:
	*	radius {number} the radius component
	*	height {number} the height component
	*	theta {number} the theta component
	* Returns:
	*	{Coord} the result
	*/
	JSM.CylindricalToCartesian = function (radius, height, theta)
	{
		var result = new JSM.Coord (0.0, 0.0, 0.0);
		result.x = radius * Math.cos (theta);
		result.y = radius * Math.sin (theta);
		result.z = height;
		return result;
	};

	/**
	* Function: GetArcLength
	* Description: Calculates arc length between two vectors.
	* Parameters:
	*	a {Vector} the first vector
	*	b {Vector} the second vector
	*	radius {number} the radius component
	* Returns:
	*	{number} the result
	*/
	JSM.GetArcLength = function (a, b, radius)
	{
		var angle = a.AngleTo (b);
		return angle * radius;
	};

	/**
	* Function: GetFullArcLength
	* Description: Calculates arc length between two vectors with the given normal vector.
	* Parameters:
	*	a {Vector} the first vector
	*	b {Vector} the second vector
	*	radius {number} the radius component
	*	normal {Vector} the normal vector
	* Returns:
	*	{number} the result
	*/
	JSM.GetFullArcLength = function (a, b, radius, normal)
	{
		var angle = JSM.GetVectorsFullAngle (a, b, normal);
		return angle * radius;
	};

	/**
	* Function: CalculateCentroid
	* Description: Calculates center points of the given coordinates.
	* Parameters:
	*	coords {Coord[*]} the array of coordinates
	* Returns:
	*	{Coord} the result
	*/
	JSM.CalculateCentroid = function (coords)
	{
		var count = coords.length;
		var centroid = new JSM.Coord (0.0, 0.0, 0.0);
		if (count >= 1) {
			var i;
			for (i = 0; i < count; i++) {
				centroid = JSM.CoordAdd (centroid, coords[i]);
			}
			centroid.MultiplyScalar (1.0 / count);
		}

		return centroid;
	};

	/**
	* Function: CalculateTriangleNormal
	* Description: Calculates normal vector for the given triangle vertices.
	* Parameters:
	*	v0 {Coord} the first vertex of the triangle
	*	v1 {Coord} the second vertex of the triangle
	*	v2 {Coord} the third vertex of the triangle
	* Returns:
	*	{Vector} the result
	*/
	JSM.CalculateTriangleNormal = function (v0, v1, v2)
	{
		var v = JSM.CoordSub (v1, v0);
		var w = JSM.CoordSub (v2, v0);
		
		var normal = new JSM.Vector (0.0, 0.0, 0.0);
		normal.x = (v.y * w.z - v.z * w.y);
		normal.y = (v.z * w.x - v.x * w.z);
		normal.z = (v.x * w.y - v.y * w.x);

		normal.Normalize ();
		return normal;
	};

	/**
	* Function: CalculateNormal
	* Description: Calculates normal vector for the given coordinates.
	* Parameters:
	*	coords {Coord[*]} the array of coordinates
	* Returns:
	*	{Vector} the result
	*/
	JSM.CalculateNormal = function (coords)
	{
		var count = coords.length;
		var normal = new JSM.Vector (0.0, 0.0, 0.0);
		if (count >= 3) {
			var i, currentIndex, nextIndex;
			var current, next;
			for (i = 0; i < count; i++) {
				currentIndex = i % count;
				nextIndex = (i + 1) % count;
		
				current = coords[currentIndex];
				next = coords[nextIndex];
		
				normal.x += (current.y - next.y) * (current.z + next.z);
				normal.y += (current.z - next.z) * (current.x + next.x);
				normal.z += (current.x - next.x) * (current.y + next.y);
			}
		}

		normal.Normalize ();
		return normal;
	};

	/**
	* Function: BarycentricInterpolation
	* Description: Calculates barycentric interpolation for the given values.
	* Parameters:
	*	vertex0, vertex1, vertex2 {Coord} the vertices of interpolation
	*	value0, value1, value2 {Coord} the values to interpolate
	*	position {Coord} the position of interpolation
	* Returns:
	*	{Coord} the result
	*/
	JSM.BarycentricInterpolation = function (vertex0, vertex1, vertex2, value0, value1, value2, position)
	{
		function GetTriangleArea (a, b, c)
		{
			var s = (a + b + c) / 2.0;
			var areaSquare = s * (s - a) * (s - b) * (s - c);
			if (areaSquare < 0.0) {
				return 0.0;
			}
			return Math.sqrt (areaSquare);
		}
		
		var edge0 = vertex0.DistanceTo (vertex1);
		var edge1 = vertex1.DistanceTo (vertex2);
		var edge2 = vertex2.DistanceTo (vertex0);
		
		var distance0 = vertex0.DistanceTo (position);
		var distance1 = vertex1.DistanceTo (position);
		var distance2 = vertex2.DistanceTo (position);
		
		var area = GetTriangleArea (edge0, edge1, edge2);
		if (JSM.IsZero (area)) {
			return value0;
		}
		
		var area0 = GetTriangleArea (edge0, distance0, distance1);
		var area1 = GetTriangleArea (edge1, distance1, distance2);
		var area2 = GetTriangleArea (edge2, distance0, distance2);
		
		var interpolated0 = value0.Clone ().MultiplyScalar (area1);
		var interpolated1 = value1.Clone ().MultiplyScalar (area2);
		var interpolated2 = value2.Clone ().MultiplyScalar (area0);
		var interpolated = JSM.CoordAdd (JSM.CoordAdd (interpolated0, interpolated1), interpolated2);
		interpolated.MultiplyScalar (1.0 / area);
		return interpolated;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/matrix',["../core/jsm"],function(JSM){
	/**
	* Function: MatrixIdentity
	* Description: Generates an identity matrix.
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixIdentity = function ()
	{
		var result = [];
		result[0] = 1.0;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = 1.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = 0.0;
		result[10] = 1.0;
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	};

	/**
	* Function: MatrixClone
	* Description: Clones a matrix.
	* Parameters:
	*	matrix {number[16]} the source matrix
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixClone = function (matrix)
	{
		var result = [];
		result[0] = matrix[0];
		result[1] = matrix[1];
		result[2] = matrix[2];
		result[3] = matrix[3];
		result[4] = matrix[4];
		result[5] = matrix[5];
		result[6] = matrix[6];
		result[7] = matrix[7];
		result[8] = matrix[8];
		result[9] = matrix[9];
		result[10] = matrix[10];
		result[11] = matrix[11];
		result[12] = matrix[12];
		result[13] = matrix[13];
		result[14] = matrix[14];
		result[15] = matrix[15];
		return result;
	};

	/**
	* Function: MatrixTranspose
	* Description: Transposes a matrix.
	* Parameters:
	*	matrix {number[16]} the source matrix
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixTranspose = function (matrix)
	{
		var result = [];
		result[0] = matrix[0];
		result[1] = matrix[4];
		result[2] = matrix[8];
		result[3] = matrix[12];
		result[4] = matrix[1];
		result[5] = matrix[5];
		result[6] = matrix[9];
		result[7] = matrix[13];
		result[8] = matrix[2];
		result[9] = matrix[6];
		result[10] = matrix[10];
		result[11] = matrix[14];
		result[12] = matrix[3];
		result[13] = matrix[7];
		result[14] = matrix[11];
		result[15] = matrix[15];
		return result;
	};

	/**
	* Function: MatrixVectorMultiply
	* Description: Multiplies a matrix with a vector.
	* Parameters:
	*	matrix {number[16]} the matrix
	*	vector {number[4]} the vector
	* Returns:
	*	{number[4]} the result vector
	*/
	JSM.MatrixVectorMultiply = function (matrix, vector)
	{
		var a00 = vector[0];
		var a01 = vector[1];
		var a02 = vector[2];
		var a03 = vector[3];
		var b00 = matrix[0];
		var b01 = matrix[1];
		var b02 = matrix[2];
		var b03 = matrix[3];
		var b10 = matrix[4];
		var b11 = matrix[5];
		var b12 = matrix[6];
		var b13 = matrix[7];
		var b20 = matrix[8];
		var b21 = matrix[9];
		var b22 = matrix[10];
		var b23 = matrix[11];
		var b30 = matrix[12];
		var b31 = matrix[13];
		var b32 = matrix[14];
		var b33 = matrix[15];

		var result = [];
		result[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		result[1] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		result[2] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		result[3] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		return result;
	};

	/**
	* Function: MatrixMultiply
	* Description: Multiplies a two matrices.
	* Parameters:
	*	matrix1 {number[16]} first matrix
	*	matrix2 {number[16]} second matrix
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixMultiply = function (matrix1, matrix2)
	{
		var a00 = matrix1[0];
		var a01 = matrix1[1];
		var a02 = matrix1[2];
		var a03 = matrix1[3];
		var a10 = matrix1[4];
		var a11 = matrix1[5];
		var a12 = matrix1[6];
		var a13 = matrix1[7];
		var a20 = matrix1[8];
		var a21 = matrix1[9];
		var a22 = matrix1[10];
		var a23 = matrix1[11];
		var a30 = matrix1[12];
		var a31 = matrix1[13];
		var a32 = matrix1[14];
		var a33 = matrix1[15];
		
		var b00 = matrix2[0];
		var b01 = matrix2[1];
		var b02 = matrix2[2];
		var b03 = matrix2[3];
		var b10 = matrix2[4];
		var b11 = matrix2[5];
		var b12 = matrix2[6];
		var b13 = matrix2[7];
		var b20 = matrix2[8];
		var b21 = matrix2[9];
		var b22 = matrix2[10];
		var b23 = matrix2[11];
		var b30 = matrix2[12];
		var b31 = matrix2[13];
		var b32 = matrix2[14];
		var b33 = matrix2[15];
			
		var result = [];
		result[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		result[1] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		result[2] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		result[3] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		result[4] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		result[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		result[6] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		result[7] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		result[8] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		result[9] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		result[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		result[11] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		result[12] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		result[13] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		result[14] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		result[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;
		return result;
	};

	/**
	* Function: MatrixDeterminant
	* Description: Calculates the determinant of a matrix.
	* Parameters:
	*	matrix {number[16]} the source matrix
	* Returns:
	*	{number} the determinant
	*/
	JSM.MatrixDeterminant = function (matrix)
	{
		var a00 = matrix[0];
		var a01 = matrix[1];
		var a02 = matrix[2];
		var a03 = matrix[3];
		var a10 = matrix[4];
		var a11 = matrix[5];
		var a12 = matrix[6];
		var a13 = matrix[7];
		var a20 = matrix[8];
		var a21 = matrix[9];
		var a22 = matrix[10];
		var a23 = matrix[11];
		var a30 = matrix[12];
		var a31 = matrix[13];
		var a32 = matrix[14];
		var a33 = matrix[15];

		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		
		var determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		return determinant;
	};

	/**
	* Function: MatrixInvert
	* Description: Inverts a matrix.
	* Parameters:
	*	matrix {number[16]} the source matrix
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixInvert = function (matrix)
	{
		var a00 = matrix[0];
		var a01 = matrix[1];
		var a02 = matrix[2];
		var a03 = matrix[3];
		var a10 = matrix[4];
		var a11 = matrix[5];
		var a12 = matrix[6];
		var a13 = matrix[7];
		var a20 = matrix[8];
		var a21 = matrix[9];
		var a22 = matrix[10];
		var a23 = matrix[11];
		var a30 = matrix[12];
		var a31 = matrix[13];
		var a32 = matrix[14];
		var a33 = matrix[15];

		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		
		var determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if (JSM.IsZero (determinant)) {
			return null;
		}

		var result = [];
		
		result[0] = (a11 * b11 - a12 * b10 + a13 * b09) / determinant;
		result[1] = (a02 * b10 - a01 * b11 - a03 * b09) / determinant;
		result[2] = (a31 * b05 - a32 * b04 + a33 * b03) / determinant;
		result[3] = (a22 * b04 - a21 * b05 - a23 * b03) / determinant;
		result[4] = (a12 * b08 - a10 * b11 - a13 * b07) / determinant;
		result[5] = (a00 * b11 - a02 * b08 + a03 * b07) / determinant;
		result[6] = (a32 * b02 - a30 * b05 - a33 * b01) / determinant;
		result[7] = (a20 * b05 - a22 * b02 + a23 * b01) / determinant;
		result[8] = (a10 * b10 - a11 * b08 + a13 * b06) / determinant;
		result[9] = (a01 * b08 - a00 * b10 - a03 * b06) / determinant;
		result[10] = (a30 * b04 - a31 * b02 + a33 * b00) / determinant;
		result[11] = (a21 * b02 - a20 * b04 - a23 * b00) / determinant;
		result[12] = (a11 * b07 - a10 * b09 - a12 * b06) / determinant;
		result[13] = (a00 * b09 - a01 * b07 + a02 * b06) / determinant;
		result[14] = (a31 * b01 - a30 * b03 - a32 * b00) / determinant;
		result[15] = (a20 * b03 - a21 * b01 + a22 * b00) / determinant;

		return result;
	};

	/**
	* Function: MatrixTranslation
	* Description: Creates a translation matrix.
	* Parameters:
	*	x {number} x offset of the transformation
	*	y {number} y offset of the transformation
	*	z {number} z offset of the transformation
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixTranslation = function (x, y, z)
	{
		var result = [];
		result[0] = 1.0;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = 1.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = 0.0;
		result[10] = 1.0;
		result[11] = 0.0;
		result[12] = x;
		result[13] = y;
		result[14] = z;
		result[15] = 1.0;
		return result;
	};

	/**
	* Function: MatrixRotation
	* Description: Creates a rotation matrix around the given axis.
	* Parameters:
	*	axis {Vector} the axis of the rotation
	*	angle {number} the angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixRotation = function (axis, angle, origo)
	{
		var normal = axis.Clone ().Normalize ();

		var u = normal.x;
		var v = normal.y;
		var w = normal.z;

		var u2 = u * u;
		var v2 = v * v;
		var w2 = w * w;

		var si = Math.sin (angle);
		var co = Math.cos (angle);
		
		var result = [];
		if (origo === undefined || origo === null) {
			result[0] = u2 + (v2 + w2) * co;
			result[1] = u * v * (1.0 - co) + w * si;
			result[2] = u * w * (1.0 - co) - v * si;
			result[3] = 0.0;
			result[4] = u * v * (1.0 - co) - w * si;
			result[5] = v2 + (u2 + w2) * co;
			result[6] = v * w * (1.0 - co) + u * si;
			result[7] = 0.0;
			result[8] = u * w * (1.0 - co) + v * si;
			result[9] = v * w * (1.0 - co) - u * si;
			result[10] = w2 + (u2 + v2) * co;
			result[11] = 0.0;
			result[12] = 0.0;
			result[13] = 0.0;
			result[14] = 0.0;
			result[15] = 1.0;
		} else {
			var a = origo.x;
			var b = origo.y;
			var c = origo.z;
		
			result[0] = u2 + (v2 + w2) * co;
			result[1] = u * v * (1.0 - co) + w * si;
			result[2] = u * w * (1.0 - co) - v * si;
			result[3] = 0.0;
			result[4] = u * v * (1.0 - co) - w * si;
			result[5] = v2 + (u2 + w2) * co;
			result[6] = v * w * (1.0 - co) + u * si;
			result[7] = 0.0;
			result[8] = u * w * (1.0 - co) + v * si;
			result[9] = v * w * (1.0 - co) - u * si;
			result[10] = w2 + (u2 + v2) * co;
			result[11] = 0.0;
			result[12] = (a * (v2 + w2) - u * (b * v + c * w)) * (1.0 - co) + (b * w - c * v) * si;
			result[13] = (b * (u2 + w2) - v * (a * u + c * w)) * (1.0 - co) + (c * u - a * w) * si;
			result[14] = (c * (u2 + v2) - w * (a * u + b * v)) * (1.0 - co) + (a * v - b * u) * si;
			result[15] = 1.0;
		}

		return result;
	};

	/**
	* Function: MatrixRotationQuaternion
	* Description: Creates a rotation matrix from a given quaternion.
	* Parameters:
	*	quaternion {number[4]} the quaternion
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixRotationQuaternion = function (quaternion)
	{
		var x = quaternion[0];
		var y = quaternion[1];
		var z = quaternion[2];
		var w = quaternion[3];

		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;

		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;

		var result = [];
		result[0] = 1.0 - (yy + zz);
		result[1] = xy + wz;
		result[2] = xz - wy;
		result[3] = 0.0;
		result[4] = xy - wz;
		result[5] = 1.0 - (xx + zz);
		result[6] = yz + wx;
		result[7] = 0.0;
		result[8] = xz + wy;
		result[9] = yz - wx;
		result[10] = 1.0 - (xx + yy);
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1;
		return result;
	};

	/**
	* Function: MatrixRotationX
	* Description: Creates a rotation matrix around the x axis.
	* Parameters:
	*	angle {number} the angle of rotation
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixRotationX = function (angle)
	{
		var si = Math.sin (angle);
		var co = Math.cos (angle);

		var result = [];
		result[0] = 1.0;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = co;
		result[6] = si;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = -si;
		result[10] = co;
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	};

	/**
	* Function: MatrixRotationY
	* Description: Creates a rotation matrix around the y axis.
	* Parameters:
	*	angle {number} the angle of rotation
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixRotationY = function (angle)
	{
		var si = Math.sin (angle);
		var co = Math.cos (angle);

		var result = [];
		result[0] = co;
		result[1] = 0.0;
		result[2] = -si;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = 1.0;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = si;
		result[9] = 0.0;
		result[10] = co;
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	};

	/**
	* Function: MatrixRotationZ
	* Description: Creates a rotation matrix around the z axis.
	* Parameters:
	*	angle {number} the angle of rotation
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixRotationZ = function (angle)
	{
		var si = Math.sin (angle);
		var co = Math.cos (angle);

		var result = [];
		result[0] = co;
		result[1] = si;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = -si;
		result[5] = co;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = 0.0;
		result[10] = 1.0;
		result[11] = 0.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = 0.0;
		result[15] = 1.0;
		return result;
	};

	/**
	* Function: ApplyTransformation
	* Description: Applies a matrix transformation to a coordinate.
	* Parameters:
	*	matrix {number[16]} the matrix
	*	coord {Coord} the coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.ApplyTransformation = function (matrix, coord)
	{
		var vector = [];
		vector[0] = coord.x;
		vector[1] = coord.y;
		vector[2] = coord.z;
		vector[3] = 1.0;
		
		var resultVector = JSM.MatrixVectorMultiply (matrix, vector);
		var result = new JSM.Coord (resultVector[0], resultVector[1], resultVector[2]);
		return result;
	};

	/**
	* Function: ApplyRotation
	* Description: Applies the rotation part of a matrix transformation to a coordinate.
	* Parameters:
	*	matrix {number[16]} the matrix
	*	coord {Coord} the coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.ApplyRotation = function (matrix, coord)
	{
		var vector = [];
		vector[0] = coord.x;
		vector[1] = coord.y;
		vector[2] = coord.z;
		vector[3] = 0.0;
		
		var resultVector = JSM.MatrixVectorMultiply (matrix, vector);
		var result = new JSM.Coord (resultVector[0], resultVector[1], resultVector[2]);
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/coordsystem',["../core/jsm"],function(JSM){
	/**
	* Class: CoordSystem
	* Description: Represents coordinate system.
	* Parameters:
	*	origo {Coord} origo
	*	e1 {Vector} first direction vector
	*	e2 {Vector} second direction vector
	*	e3 {Vector} third direction vector
	*/
	JSM.CoordSystem = function (origo, e1, e2, e3)
	{
		this.origo = origo;
		this.e1 = e1;
		this.e2 = e2;
		this.e3 = e3;
	};

	/**
	* Function: CoordSystem.Set
	* Description: Sets the coordinate system.
	* Parameters:
	*	origo {Coord} origo
	*	e1 {Vector} first direction vector
	*	e2 {Vector} second direction vector
	*	e3 {Vector} third direction vector
	*/
	JSM.CoordSystem.prototype.Set = function (origo, e1, e2, e3)
	{
		this.origo = origo;
		this.e1 = e1;
		this.e2 = e2;
		this.e3 = e3;
	};

	/**
	* Function: CoordSystem.CoordSystemToDirectionVectors
	* Description: Converts coordinate system vectors to origo relative direction vectors.
	* Returns:
	*	{CoordSystem} this pointer
	*/
	JSM.CoordSystem.prototype.ToDirectionVectors = function ()
	{
		this.e1 = JSM.CoordSub (this.e1, this.origo);
		this.e2 = JSM.CoordSub (this.e2, this.origo);
		this.e3 = JSM.CoordSub (this.e3, this.origo);
		return this;
	};

	/**
	* Function: CoordSystem.CoordSystemToAbsoluteCoords
	* Description: Converts the coordinate system vectors to absolute coordinates.
	* Returns:
	*	{CoordSystem} this pointer
	*/
	JSM.CoordSystem.prototype.ToAbsoluteCoords = function ()
	{
		this.e1 = JSM.CoordAdd (this.e1, this.origo);
		this.e2 = JSM.CoordAdd (this.e2, this.origo);
		this.e3 = JSM.CoordAdd (this.e3, this.origo);
		return this;
	};

	/**
	* Function: CoordSystem.Clone
	* Description: Clones the coordinate system.
	* Returns:
	*	{CoordSystem} a cloned instance
	*/
	JSM.CoordSystem.prototype.Clone = function ()
	{
		return new JSM.CoordSystem (this.origo.Clone (), this.e1.Clone (), this.e2.Clone (), this.e3.Clone ());
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/sector',["../core/jsm"],function(JSM){
	/**
	* Enum: CoordSectorPosition2D
	* Description: Position of a coordinate and a sector.
	* Values:
	*	{CoordInsideOfSector} coordinate lies inside of sector
	*	{CoordOnSectorEndCoord} coordinate lies at the end of the sector
	*	{CoordOutsideOfSector} coordinate lies outside of the sector
	*/
	JSM.CoordSectorPosition2D = {
		CoordInsideOfSector : 0,
		CoordOnSectorEndCoord : 1,
		CoordOutsideOfSector : 2
	};

	/**
	* Enum: SectorSectorPosition2D
	* Description: Position of two sectors.
	* Values:
	*	{SectorsDontIntersect} sectors do not intersect
	*	{SectorsIntersectCoincident} sectors intersect coincident
	*	{SectorsIntersectEndPoint} sectors intersect at end point
	*	{SectorsIntersectOnePoint} sectors intersect one point
	*/
	JSM.SectorSectorPosition2D = {
		SectorsDontIntersect : 0,
		SectorsIntersectCoincident : 1,
		SectorsIntersectEndPoint : 2,
		SectorsIntersectOnePoint : 3
	};

	/**
	* Enum: CoordSectorPosition
	* Description: Position of a coordinate and a sector.
	* Values:
	*	{CoordInsideOfSector} coordinate lies inside of sector
	*	{CoordOnSectorEndCoord} coordinate lies at the end of the sector
	*	{CoordOutsideOfSector} coordinate lies outside of the sector
	*/
	JSM.CoordSectorPosition = {
		CoordInsideOfSector : 0,
		CoordOnSectorEndCoord : 1,
		CoordOutsideOfSector : 2
	};

	/**
	* Class: Sector2D
	* Description: Represents a 2D sector.
	* Parameters:
	*	beg {Coord2D} the beginning coordinate
	*	end {Coord2D} the ending coordinate
	*/
	JSM.Sector2D = function (beg, end)
	{
		this.beg = beg;
		this.end = end;
	};

	/**
	* Function: Sector2D.Set
	* Description: Sets the sector.
	* Parameters:
	*	beg {Coord2D} the beginning coordinate
	*	end {Coord2D} the ending coordinate
	*/
	JSM.Sector2D.prototype.Set = function (beg, end)
	{
		this.beg = beg;
		this.end = end;
	};

	/**
	* Function: Sector.GetLength
	* Description: Returns the length of the sector.
	* Returns:
	*	{number} the result
	*/
	JSM.Sector2D.prototype.GetLength = function ()
	{
		return this.beg.DistanceTo (this.end);
	};

	/**
	* Function: Sector2D.CoordPosition
	* Description: Calculates the position of the sector and the given coordinate.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{CoordSectorPosition2D} the result
	*/
	JSM.Sector2D.prototype.CoordPosition = function (coord)
	{
		var x = coord.x;
		var y = coord.y;
		var x1 = this.beg.x;
		var y1 = this.beg.y;
		var x2 = this.end.x;
		var y2 = this.end.y;

		var length = this.GetLength ();
		if (JSM.IsZero (length)) {
			if (coord.IsEqual (this.beg)) {
				return JSM.CoordSectorPosition2D.CoordOnSectorEndCoord;
			}

			return JSM.CoordSectorPosition2D.CoordOutsideOfSector;
		}

		var u = ((x - x1) * (x2 - x1) + (y - y1) * (y2 - y1)) / (length * length);
		if (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {
			return JSM.CoordSectorPosition2D.CoordOutsideOfSector;
		}

		var ux = x1 + u * (x2 - x1);
		var uy = y1 + u * (y2 - y1);
		if (!JSM.IsEqual (ux, x) || !JSM.IsEqual (uy, y)) {
			return JSM.CoordSectorPosition2D.CoordOutsideOfSector;
		}

		if (JSM.IsEqual (u, 0.0) || JSM.IsEqual (u, 1.0)) {
			return JSM.CoordSectorPosition2D.CoordOnSectorEndCoord;
		}

		return JSM.CoordSectorPosition2D.CoordInsideOfSector;
	};

	/**
	* Function: Sector2D.SectorPosition
	* Description: Calculates the position of the sector and the given sector.
	* Parameters:
	*	sector {Sector2D} the sector
	*	intersection {Coord2D} (out) the intersection point if it exists
	* Returns:
	*	{SectorSectorPosition2D} the result
	*/
	JSM.Sector2D.prototype.SectorPosition = function (sector, intersection)
	{
		function IsOnSegment (beg, end, coord)
		{
			if (!coord.IsEqual (beg) && !coord.IsEqual (end) &&
				JSM.IsLowerOrEqual (coord.x, Math.max (beg.x, end.x)) &&
				JSM.IsLowerOrEqual (coord.y, Math.max (beg.y, end.y)) &&
				JSM.IsGreaterOrEqual (coord.x, Math.min (beg.x, end.x)) &&
				JSM.IsGreaterOrEqual (coord.y, Math.min (beg.y, end.y)))
			{
				return true;
			}
			return false;
		}

		var calcIntersection = (intersection !== undefined && intersection !== null);
		
		var aBeg = this.beg;
		var aEnd = this.end;
		var bBeg = sector.beg;
		var bEnd = sector.end;
		
		var equalBeg = aBeg.IsEqual (bBeg) || aBeg.IsEqual (bEnd);
		var equalEnd = aEnd.IsEqual (bBeg) || aEnd.IsEqual (bEnd);
		if (equalBeg && equalEnd) {
			return JSM.SectorSectorPosition2D.SectorsIntersectCoincident;
		}

		var x1 = aBeg.x;
		var y1 = aBeg.y;
		var x2 = aEnd.x;
		var y2 = aEnd.y;
		var x3 = bBeg.x;
		var y3 = bBeg.y;
		var x4 = bEnd.x;
		var y4 = bEnd.y;

		var numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
		var numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
		var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
		if (JSM.IsZero (denominator)) {
			if (JSM.IsZero (numeratorA) && JSM.IsZero (numeratorB)) {
				if (IsOnSegment (aBeg, aEnd, bBeg) ||
					IsOnSegment (aBeg, aEnd, bEnd) ||
					IsOnSegment (bBeg, bEnd, aBeg) ||
					IsOnSegment (bBeg, bEnd, aEnd))
				{
					return JSM.SectorSectorPosition2D.SectorsIntersectCoincident;
				} else if (equalBeg) {
					if (calcIntersection) {
						intersection.x = aBeg.x;
						intersection.y = aBeg.y;
					}
					return JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;
				} else if (equalEnd) {
					if (calcIntersection) {
						intersection.x = aEnd.x;
						intersection.y = aEnd.y;
					}
					return JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;
				}
			}
			return JSM.SectorSectorPosition2D.SectorsDontIntersect;
		}
		
		var distA = numeratorA / denominator;
		var distB = numeratorB / denominator;
		if (JSM.IsLower (distA, 0.0) || JSM.IsGreater (distA, 1.0) ||
			JSM.IsLower (distB, 0.0) || JSM.IsGreater (distB, 1.0))
		{
			return JSM.SectorSectorPosition2D.SectorsDontIntersect;
		}

		if (equalBeg) {
			if (calcIntersection) {
				intersection.x = aBeg.x;
				intersection.y = aBeg.y;
			}
			return JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;
		} else if (equalEnd) {
			if (calcIntersection) {
				intersection.x = aEnd.x;
				intersection.y = aEnd.y;
			}
			return JSM.SectorSectorPosition2D.SectorsIntersectEndPoint;
		}
		
		if (calcIntersection) {
			intersection.x = x1 + distA * (x2 - x1);
			intersection.y = y1 + distA * (y2 - y1);
		}
		return JSM.SectorSectorPosition2D.SectorsIntersectOnePoint;
	};

	/**
	* Function: Sector2D.ProjectCoord
	* Description: Calculates the projected coordinate of the given coordinate.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{Coord2D} the projected coordinate
	*/
	JSM.Sector2D.prototype.ProjectCoord = function (coord)
	{
		var x = coord.x;
		var y = coord.y;

		var beg = this.beg;
		var end = this.end;
		var x1 = beg.x;
		var y1 = beg.y;
		var x2 = end.x;
		var y2 = end.y;

		var denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
		if (JSM.IsZero (denom)) {
			return beg.Clone ();
		}

		var u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1)) / denom;
		if (JSM.IsLower (u, 0.0)) {
			return beg.Clone ();
		} else if (JSM.IsGreater (u, 1.0)) {
			return end.Clone ();
		}
		
		var dir = JSM.CoordSub2D (end, beg).MultiplyScalar (u);
		var result = JSM.CoordAdd2D (beg, dir);
		return result;
	};

	/**
	* Function: Sector2D.Clone
	* Description: Clones the sector.
	* Returns:
	*	{Sector2D} a cloned instance
	*/
	JSM.Sector2D.prototype.Clone = function ()
	{
		return new JSM.Sector2D (this.beg.Clone (), this.end.Clone ());
	};

	/**
	* Class: Sector
	* Description: Represents a 3D sector.
	* Parameters:
	*	beg {Coord} the beginning coordinate
	*	end {Coord} the ending coordinate
	*/
	JSM.Sector = function (beg, end)
	{
		this.beg = beg;
		this.end = end;
	};

	/**
	* Function: Sector.Set
	* Description: Sets the sector.
	* Parameters:
	*	beg {Coord} the beginning coordinate
	*	end {Coord} the ending coordinate
	*/
	JSM.Sector.prototype.Set = function (beg, end)
	{
		this.beg = beg;
		this.end = end;
	};

	/**
	* Function: Sector.GetLength
	* Description: Returns the length of the sector.
	* Returns:
	*	{number} the result
	*/
	JSM.Sector.prototype.GetLength = function ()
	{
		return this.beg.DistanceTo (this.end);
	};

	/**
	* Function: Sector.CoordPosition
	* Description: Calculates the position of the sector and the given coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{CoordSectorPosition} the result
	*/
	JSM.Sector.prototype.CoordPosition = function (coord)
	{
		var x = coord.x;
		var y = coord.y;
		var z = coord.z;

		var a = this.beg;
		var b = JSM.CoordSub (this.end, this.beg);
		
		var x1 = a.x;
		var y1 = a.y;
		var z1 = a.z;
		var x2 = a.x + b.x;
		var y2 = a.y + b.y;
		var z2 = a.z + b.z;

		var denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
		if (JSM.IsZero (denom)) {
			if (a.IsEqual (coord)) {
				return JSM.CoordSectorPosition.CoordOnSectorEndCoord;
			}
			return JSM.CoordSectorPosition.CoordOutsideOfSector;
		}

		var u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;
		var bu = b.Clone ().MultiplyScalar (u);
		var c = JSM.CoordAdd (a, bu);
		var distance = coord.DistanceTo (c);
		if (JSM.IsZero (distance)) {
			if (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {
				return JSM.CoordSectorPosition.CoordOutsideOfSector;
			} else if (JSM.IsEqual (u, 0.0) || JSM.IsEqual (u, 1.0)) {
				return JSM.CoordSectorPosition.CoordOnSectorEndCoord;
			}
			return JSM.CoordSectorPosition.CoordInsideOfSector;
		}

		return JSM.CoordSectorPosition.CoordOutsideOfSector;
	};

	/**
	* Function: Sector.Clone
	* Description: Clones the sector.
	* Returns:
	*	{Sector} a cloned instance
	*/
	JSM.Sector.prototype.Clone = function ()
	{
		return new JSM.Sector (this.beg.Clone (), this.end.Clone ());
	};

	/**
	* Function: GetSectorSegmentation2D
	* Description: Returns the segmented coordinates of a sector.
	* Parameters:
	*	sector {Sector2D} the sector
	*	segmentation {integer} the segmentation
	* Returns:
	*	{Coord2D[*]} the result coordinates
	*/
	JSM.GetSectorSegmentation2D = function (sector, segmentation)
	{
		var direction = JSM.CoordSub2D (sector.end, sector.beg);
		var length = sector.beg.DistanceTo (sector.end);
		var step = length / segmentation;
		var distance = 0.0;

		var result = [];
		var i, offseted;
		for (i = 0; i <= segmentation; i++) {
			offseted = sector.beg.Clone ().Offset (direction, distance);
			result.push (offseted);
			distance += step;
		}
		return result;
	};

	/**
	* Function: GetSectorSegmentation
	* Description: Returns the segmented coordinates of a sector.
	* Parameters:
	*	sector {Sector} the sector
	*	segmentation {integer} the segmentation
	* Returns:
	*	{Coord[*]} the result coordinates
	*/
	JSM.GetSectorSegmentation = function (sector, segmentation)
	{
		var direction = JSM.CoordSub (sector.end, sector.beg);
		var length = sector.beg.DistanceTo (sector.end);
		var step = length / segmentation;
		var distance = 0.0;

		var result = [];
		var i, offseted;
		for (i = 0; i <= segmentation; i++) {
			offseted = sector.beg.Clone ().Offset (direction, distance);
			result.push (offseted);
			distance += step;
		}
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/line',["../core/jsm"],function(JSM){
	/**
	* Enum: CoordLinePosition2D
	* Description: Position of a coordinate and a line.
	* Values:
	*	{CoordOnLine} coordinate lies on the line
	*	{CoordAtLineLeft} coordinate lies on the left side of the line
	*	{CoordAtLineRight} coordinate lies on the left side right the line
	*/
	JSM.CoordLinePosition2D = {
		CoordOnLine : 0,
		CoordAtLineLeft : 1,
		CoordAtLineRight : 2
	};

	/**
	* Enum: LineLinePosition2D
	* Description: Position of two lines.
	* Values:
	*	{LinesDontIntersect} lines do not intersect
	*	{LinesIntersectsCoincident} lines intersect coincident
	*	{LinesIntersectsOnePoint} lines intersect one point
	*/
	JSM.LineLinePosition2D = {
		LinesDontIntersect : 0,
		LinesIntersectsOnePoint : 1,
		LinesIntersectsCoincident : 2
	};

	/**
	* Enum: CoordLinePosition
	* Description: Position of a coordinate and a line.
	* Values:
	*	{CoordOnLine} coordinate lies on the line
	*	{CoordOutsideOfLine} coordinate lies outside of the line
	*/
	JSM.CoordLinePosition = {
		CoordOnLine : 0,
		CoordOutsideOfLine : 1
	};

	/**
	* Enum: LineLinePosition
	* Description: Position of two lines.
	* Values:
	*	{LinesDontIntersect} lines do not intersect
	*	{LinesIntersectsCoincident} lines intersect coincident
	*	{LinesIntersectsOnePoint} lines intersect one point
	*/
	JSM.LineLinePosition = {
		LinesDontIntersect : 0,
		LinesIntersectsOnePoint : 1,
		LinesIntersectsCoincident : 2
	};

	/**
	* Class: Line2D
	* Description: Represents a 2D infinite line.
	* Parameters:
	*	start {Coord2D} the start point of the line
	*	direction {Vector2D} the direction of the line
	*/
	JSM.Line2D = function (start, direction)
	{
		this.start = start;
		this.direction = direction;
	};

	/**
	* Function: Line2D.Set
	* Description: Sets the line.
	* Parameters:
	*	start {Coord2D} the start point of the line
	*	direction {Vector2D} the direction of the line
	*/
	JSM.Line2D.prototype.Set = function (start, direction)
	{
		this.start = start;
		this.direction = direction;
	};

	/**
	* Function: Line2D.CoordPosition
	* Description: Calculates the position of the line and the given coordinate.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{CoordLinePosition2D} the result
	*/
	JSM.Line2D.prototype.CoordPosition = function (coord)
	{
		var position = this.CoordSignedDistance (coord);
		if (JSM.IsPositive (position)) {
			return JSM.CoordLinePosition2D.CoordAtLineLeft;
		} else if (JSM.IsNegative (position)) {
			return JSM.CoordLinePosition2D.CoordAtLineRight;
		}

		return JSM.CoordLinePosition2D.CoordOnLine;
	};

	/**
	* Function: Line2D.CoordSignedDistance
	* Description: Calculates the signed distance of the line and the given coordinate.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Line2D.prototype.CoordSignedDistance = function (coord)
	{
		var x = coord.x;
		var y = coord.y;
		var a = this.start;
		var b = this.direction;
		return b.x * (y - a.y) - b.y * (x - a.x);
	};

	/**
	* Function: Line2D.LinePosition
	* Description: Calculates the position of the line and the given line.
	* Parameters:
	*	line {Line2D} the line
	*	intersection {Coord2D} (out) the intersection point if it exists
	* Returns:
	*	{LineLinePosition2D} the result
	*/
	JSM.Line2D.prototype.LinePosition = function (line, intersection)
	{
		var x1 = this.start.x;
		var y1 = this.start.y;
		var x2 = this.start.x + this.direction.x;
		var y2 = this.start.y + this.direction.y;
		var x3 = line.start.x;
		var y3 = line.start.y;
		var x4 = line.start.x + line.direction.x;
		var y4 = line.start.y + line.direction.y;
		
		var numeratorA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
		var numeratorB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);
		var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
		if (JSM.IsZero (denominator)) {
			if (JSM.IsZero (numeratorA) && JSM.IsZero (numeratorB)) {
				return JSM.LineLinePosition2D.LinesIntersectsCoincident;
			}
			return JSM.LineLinePosition2D.LinesDontIntersect;
		}

		var distance = numeratorA / denominator;
		if (intersection !== null) {
			intersection.x = x1 + distance * (x2 - x1);
			intersection.y = y1 + distance * (y2 - y1);
		}
		return JSM.LineLinePosition2D.LinesIntersectsOnePoint;
	};

	/**
	* Function: Line2D.Clone
	* Description: Clones the line.
	* Returns:
	*	{Line2D} a cloned instance
	*/
	JSM.Line2D.prototype.Clone = function ()
	{
		return new JSM.Line2D (this.start.Clone (), this.direction.Clone ());
	};

	/**
	* Class: Line
	* Description: Represents a 3D infinite line.
	* Parameters:
	*	start {Coord} the start point of the line
	*	direction {Vector} the direction of the line
	*/
	JSM.Line = function (start, direction)
	{
		this.start = start;
		this.direction = direction;
	};

	/**
	* Function: Line.Set
	* Description: Sets the line.
	* Parameters:
	*	start {Coord} the start point of the line
	*	direction {Vector} the direction of the line
	*/
	JSM.Line.prototype.Set = function (start, direction)
	{
		this.start = start;
		this.direction = direction;
	};

	/**
	* Function: Line.CoordPosition
	* Description: Calculates the position of the line and the given coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*	projected {Coord} (out) the projected coordinate
	* Returns:
	*	{CoordLinePosition} the result
	*/
	JSM.Line.prototype.CoordPosition = function (coord, projected)
	{
		var x = coord.x;
		var y = coord.y;
		var z = coord.z;

		var a = this.start;
		var b = this.direction;

		var x1 = a.x;
		var y1 = a.y;
		var z1 = a.z;
		var x2 = a.x + b.x;
		var y2 = a.y + b.y;
		var z2 = a.z + b.z;

		var denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
		if (JSM.IsZero (denom)) {
			if (projected !== undefined) {
				projected.Set (a.x, a.y, a.z);
			}

			if (a.IsEqual (coord)) {
				return JSM.CoordLinePosition.CoordOnLine;
			}

			return JSM.CoordLinePosition.CoordOutsideOfLine;
		}

		var u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;
		var bu = b.Clone ().MultiplyScalar (u);
		var c = JSM.CoordAdd (a, bu);
		if (projected !== undefined) {
			projected.Set (c.x, c.y, c.z);
		}

		var distance = coord.DistanceTo (c);
		if (JSM.IsZero (distance)) {
			return JSM.CoordLinePosition.CoordOnLine;
		}

		return JSM.CoordLinePosition.CoordOutsideOfLine;
	};

	/**
	* Function: Line.ProjectCoord
	* Description: Calculates the projected coordinate of the given coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.Line.prototype.ProjectCoord = function (coord)
	{
		var x = coord.x;
		var y = coord.y;
		var z = coord.z;

		var a = this.start;
		var b = this.direction;

		var x1 = a.x;
		var y1 = a.y;
		var z1 = a.z;
		var x2 = a.x + b.x;
		var y2 = a.y + b.y;
		var z2 = a.z + b.z;

		var denom = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) + (z2 - z1) * (z2 - z1);
		if (JSM.IsZero (denom)) {
			return a.Clone ();
		}

		var u = ((x2 - x1) * (x - x1) + (y2 - y1) * (y - y1) + (z2 - z1) * (z - z1)) / denom;
		var bu = b.Clone ().MultiplyScalar (u);
		return JSM.CoordAdd (a, bu);
	};

	/**
	* Function: Line.ClosestPoint
	* Description: Calculates the closest points between the line and a given line.
	* Parameters:
	*	line {Line} the line
	*	thisClosestPoint {Coord} (out) the closest point on the current line
	*	lineClosestPoint {Coord} (out) the closest point on the given line
	* Returns:
	*	{boolean} success
	*/
	JSM.Line.prototype.ClosestPoint = function (line, thisClosestPoint, lineClosestPoint)
	{
		function Dmnop (v, m, n, o, p)
		{
			var result = (v[m].x - v[n].x) * (v[o].x - v[p].x) + (v[m].y - v[n].y) * (v[o].y - v[p].y) + (v[m].z - v[n].z) * (v[o].z - v[p].z);
			return result;
		}

		var aDir = this.direction.Clone ().Normalize ();
		var aStart = this.start;
		var aEnd = JSM.CoordAdd (aStart, aDir);

		var bDir = line.direction.Clone ().Normalize ();
		var bStart = line.start;
		var bEnd = JSM.CoordAdd (bStart, bDir);
		
		var v = [aStart, aEnd, bStart, bEnd];
		var d1010 = Dmnop (v, 1, 0, 1, 0);
		var d0210 = Dmnop (v, 0, 2, 1, 0);
		var d0232 = Dmnop (v, 0, 2, 3, 2);
		var d3210 = Dmnop (v, 3, 2, 1, 0);
		var d3232 = Dmnop (v, 3, 2, 3, 2);
		var denom = (d1010 * d3232 - d3210 * d3210);
		if (JSM.IsEqual (denom, 0.0)) {
			return false;
		}
		
		var nom = (d0232 * d3210 - d0210 * d3232);
		var mua = nom / denom;
		var mub = (d0232 + mua * d3210) / d3232;

		if (thisClosestPoint !== undefined) {
			aDir.MultiplyScalar (mua);
			var aClosest = JSM.CoordAdd (aStart, aDir);
			thisClosestPoint.Set (aClosest.x, aClosest.y, aClosest.z);
		}
		
		if (lineClosestPoint !== undefined) {
			bDir.MultiplyScalar (mub);
			var bClosest = JSM.CoordAdd (bStart, bDir);
			lineClosestPoint.Set (bClosest.x, bClosest.y, bClosest.z);
		}
		
		return true;
	};

	/**
	* Function: Line.LinePosition
	* Description: Calculates the position of the line and the given line.
	* Parameters:
	*	line {Line} the line
	*	intersection {Coord} (out) the intersection point if it exists
	* Returns:
	*	{LineLinePosition} the result
	*/
	JSM.Line.prototype.LinePosition = function (line, intersection)
	{
		var thisClosestPoint = new JSM.Coord (0.0, 0.0, 0.0);
		var lineClosestPoint = new JSM.Coord (0.0, 0.0, 0.0);
		if (!this.ClosestPoint (line, thisClosestPoint, lineClosestPoint)) {
			return JSM.LineLinePosition.LinesIntersectsCoincident;
		}
		
		if (thisClosestPoint.IsEqual (lineClosestPoint)) {
			if (intersection !== undefined) {
				intersection.Set (thisClosestPoint.x, thisClosestPoint.y, thisClosestPoint.z);
			}
			return JSM.LineLinePosition.LinesIntersectsOnePoint;
		}
		
		return JSM.LineLinePosition.LinesDontIntersect;
	};

	/**
	* Function: Line.Clone
	* Description: Clones the line.
	* Returns:
	*	{Line} a cloned instance
	*/
	JSM.Line.prototype.Clone = function ()
	{
		return new JSM.Line (this.start.Clone (), this.direction.Clone ());
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/box',["../core/jsm"],function(JSM){
	/**
	* Class: Box2D
	* Description: Represents a 2D box.
	* Parameters:
	*	min {Coord2D} the minimum position of the box
	*	min {Coord2D} the maximum position of the box
	*/
	JSM.Box2D = function (min, max)
	{
		this.min = min;
		this.max = max;
	};

	/**
	* Function: Box2D.Set
	* Description: Sets the box.
	* Parameters:
	*	min {Coord2D} the minimum position of the box
	*	min {Coord2D} the maximum position of the box
	*/
	JSM.Box2D.prototype.Set = function (min, max)
	{
		this.min = min;
		this.max = max;
	};

	/**
	* Function: Box2D.GetCenter
	* Description: Returns the center point of the box.
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.Box2D.prototype.GetCenter = function ()
	{
		return JSM.MidCoord2D (this.min, this.max);
	};

	/**
	* Function: Box2D.Clone
	* Description: Clones the box.
	* Returns:
	*	{Box2D} a cloned instance
	*/
	JSM.Box2D.prototype.Clone = function ()
	{
		return new JSM.Box2D (this.min.Clone (), this.max.Clone ());
	};

	/**
	* Class: Box
	* Description: Represents a 3D box.
	* Parameters:
	*	min {Coord} the minimum position of the box
	*	min {Coord} the maximum position of the box
	*/
	JSM.Box = function (min, max)
	{
		this.min = min;
		this.max = max;
	};

	/**
	* Function: Box.Set
	* Description: Sets the box.
	* Parameters:
	*	min {Coord} the minimum position of the box
	*	min {Coord} the maximum position of the box
	*/
	JSM.Box.prototype.Set = function (min, max)
	{
		this.min = min;
		this.max = max;
	};

	/**
	* Function: Box.GetCenter
	* Description: Returns the center point of the box.
	* Returns:
	*	{Coord} the result
	*/
	JSM.Box.prototype.GetCenter = function ()
	{
		return JSM.MidCoord (this.min, this.max);
	};

	/**
	* Function: Box.GetSize
	* Description: Returns the size of the box.
	* Returns:
	*	{Coord} the result
	*/
	JSM.Box.prototype.GetSize = function ()
	{
		return JSM.CoordSub (this.max, this.min);
	};

	/**
	* Function: Box.IsCoordInside
	* Description: Determines if the given coordinate is inside the box.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{boolean} the result
	*/
	JSM.Box.prototype.IsCoordInside = function (coord)
	{
		if (JSM.IsLower (coord.x, this.min.x) || JSM.IsLower (coord.y, this.min.y) || JSM.IsLower (coord.z, this.min.z)) {
			return false;
		}
		if (JSM.IsGreater (coord.x, this.max.x) || JSM.IsGreater (coord.y, this.max.y) || JSM.IsGreater (coord.z, this.max.z)) {
			return false;
		}
		return true;
	};

	/**
	* Function: Box.Clone
	* Description: Clones the box.
	* Returns:
	*	{Box} a cloned instance
	*/
	JSM.Box.prototype.Clone = function ()
	{
		return new JSM.Box (this.min.Clone (), this.max.Clone ());
	};

	/**
	* Function: BoxUnion
	* Description: Calculates the union of two 3D boxes.
	* Parameters:
	*	aBox {Box} the first box
	*	bBox {Box} the second box
	* Returns:
	*	{Box} the result
	*/
	JSM.BoxUnion = function (aBox, bBox)
	{
		var min = new JSM.Coord (JSM.Minimum (aBox.min.x, bBox.min.x), JSM.Minimum (aBox.min.y, bBox.min.y), JSM.Minimum (aBox.min.z, bBox.min.z));
		var max = new JSM.Coord (JSM.Maximum (aBox.max.x, bBox.max.x), JSM.Maximum (aBox.max.y, bBox.max.y), JSM.Maximum (aBox.max.z, bBox.max.z));
		return new JSM.Box (min, max);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/sphere',["../core/jsm"],function(JSM){
	/**
	* Class: Sphere
	* Description: Represents a sphere.
	* Parameters:
	*	center {Coord} the center of the sphere
	*	radius {number} the radius of the sphere
	*/
	JSM.Sphere = function (center, radius)
	{
		this.center = center;
		this.radius = radius;
	};

	/**
	* Function: Sphere.Set
	* Description: Sets the sphere.
	* Parameters:
	*	center {Coord} the center of the sphere
	*	radius {number} the radius of the sphere
	*/
	JSM.Sphere.prototype.Set = function (center, radius)
	{
		this.center = center;
		this.radius = radius;
	};

	/**
	* Function: Sphere.GetCenter
	* Description: Returns the center of the sphere.
	* Returns:
	*	{Coord} the result
	*/
	JSM.Sphere.prototype.GetCenter = function ()
	{
		return this.center;
	};

	/**
	* Function: Sphere.GetRadius
	* Description: Returns the radius of the sphere.
	* Returns:
	*	{number} the result
	*/
	JSM.Sphere.prototype.GetRadius = function ()
	{
		return this.radius;
	};

	/**
	* Function: Sphere.Clone
	* Description: Clones the sphere.
	* Returns:
	*	{Sphere} a cloned instance
	*/
	JSM.Sphere.prototype.Clone = function ()
	{
		return new JSM.Sphere (this.center.Clone (), this.radius);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/transformation',["../core/jsm"],function(JSM){
	/**
	* Class: Transformation
	* Description: Represents a transformation matrix.
	*/
	JSM.Transformation = function ()
	{
		this.matrix = JSM.MatrixIdentity ();
	};

	/**
	* Function: Transformation.GetMatrix
	* Description: Returns the matrix of the transformation.
	* Returns:
	*	{number[16]} the matrix
	*/
	JSM.Transformation.prototype.GetMatrix = function ()
	{
		return this.matrix;
	};

	/**
	* Function: Transformation.SetMatrix
	* Description: Sets matrix of the transformation.
	* Parameters:
	*	matrix {number[16]} the matrix
	*/
	JSM.Transformation.prototype.SetMatrix = function (matrix)
	{
		this.matrix = matrix;
	};

	/**
	* Function: Transformation.Append
	* Description: Adds a transformation to the matrix.
	* Parameters:
	*	source {Transformation} the another transformation
	*/
	JSM.Transformation.prototype.Append = function (source)
	{
		this.matrix = JSM.MatrixMultiply (this.matrix, source.matrix);
	};

	/**
	* Function: Transformation.Apply
	* Description: Apply transformation to a coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{Coord} the result
	*/
	JSM.Transformation.prototype.Apply = function (coord)
	{
		return JSM.ApplyTransformation (this.matrix, coord);
	};

	/**
	* Function: Transformation.Clone
	* Description: Clones the transformation.
	* Returns:
	*	{Transformation} a cloned instance
	*/
	JSM.Transformation.prototype.Clone = function ()
	{
		var result = new JSM.Transformation ();
		result.matrix = JSM.MatrixClone (this.matrix);
		return result;
	};

	/**
	* Function: IdentityTransformation
	* Description: Generates an identity transformation.
	* Returns:
	*	{Transformation} the result
	*/
	JSM.IdentityTransformation = function ()
	{
		var transformation = new JSM.Transformation ();
		transformation.matrix = JSM.MatrixIdentity ();
		return transformation;
	};

	/**
	* Function: TranslationTransformation
	* Description: Generates a translation transformation.
	* Parameters:
	*	translation {Vector} the translation vector
	* Returns:
	*	{Transformation} the result
	*/
	JSM.TranslationTransformation = function (translation)
	{
		var transformation = new JSM.Transformation ();
		transformation.matrix = JSM.MatrixTranslation (translation.x, translation.y, translation.z);
		return transformation;
	};

	/**
	* Function: OffsetTransformation
	* Description: Generates an offset transformation.
	* Parameters:
	*	direction {Vector} the direction of the offset
	*	distance {number} the distance of the offset
	* Returns:
	*	{Transformation} the result
	*/
	JSM.OffsetTransformation = function (direction, distance)
	{
		var normal = direction.Clone ().Normalize ();
		var translation = normal.Clone ().MultiplyScalar (distance);
		return JSM.TranslationTransformation (translation);
	};

	/**
	* Function: RotationTransformation
	* Description: Generates a rotation transformation.
	* Parameters:
	*	axis {Vector} the axis of the rotation
	*	angle {number} the angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{Transformation} the result
	*/
	JSM.RotationTransformation = function (axis, angle, origo)
	{
		var transformation = new JSM.Transformation ();
		transformation.matrix = JSM.MatrixRotation (axis, angle, origo);
		return transformation;
	};

	/**
	* Function: RotationXTransformation
	* Description: Generates a rotation transformation around the x axis.
	* Parameters:
	*	angle {number} the angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{Transformation} the result
	*/
	JSM.RotationXTransformation = function (angle, origo)
	{
		var transformation = new JSM.Transformation ();
		if (origo === undefined || origo === null) {
			transformation.matrix = JSM.MatrixRotationX (angle);
		} else {
			transformation.Append (JSM.TranslationTransformation (new JSM.Vector (-origo.x, -origo.y, -origo.z)));
			transformation.Append (JSM.RotationXTransformation (angle));
			transformation.Append (JSM.TranslationTransformation (new JSM.Vector (origo.x, origo.y, origo.z)));
		}
		return transformation;
	};

	/**
	* Function: RotationYTransformation
	* Description: Generates a rotation transformation around the y axis.
	* Parameters:
	*	angle {number} the angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{Transformation} the result
	*/
	JSM.RotationYTransformation = function (angle, origo)
	{
		var transformation = new JSM.Transformation ();
		if (origo === undefined || origo === null) {
			transformation.matrix = JSM.MatrixRotationY (angle);
		} else {
			transformation.Append (JSM.TranslationTransformation (new JSM.Vector (-origo.x, -origo.y, -origo.z)));
			transformation.Append (JSM.RotationYTransformation (angle));
			transformation.Append (JSM.TranslationTransformation (new JSM.Vector (origo.x, origo.y, origo.z)));
		}
		return transformation;
	};

	/**
	* Function: RotationZTransformation
	* Description: Generates a rotation transformation around the z axis.
	* Parameters:
	*	angle {number} the angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{Transformation} the result
	*/
	JSM.RotationZTransformation = function (angle, origo)
	{
		var transformation = new JSM.Transformation ();
		if (origo === undefined || origo === null) {
			transformation.matrix = JSM.MatrixRotationZ (angle);
		} else {
			transformation.Append (JSM.TranslationTransformation (new JSM.Vector (-origo.x, -origo.y, -origo.z)));
			transformation.Append (JSM.RotationZTransformation (angle));
			transformation.Append (JSM.TranslationTransformation (new JSM.Vector (origo.x, origo.y, origo.z)));
		}
		return transformation;
	};

	/**
	* Function: RotationXYZTransformation
	* Description: Generates a rotation transformation around all axis in x, y, z order.
	* Parameters:
	*	xAngle {number} the x angle of the rotation
	*	yAngle {number} the y angle of the rotation
	*	zAngle {number} the z angle of the rotation
	*	origo {Coord} the origo of the rotation
	* Returns:
	*	{Transformation} the result
	*/
	JSM.RotationXYZTransformation = function (xAngle, yAngle, zAngle, origo)
	{
		var transformation = new JSM.Transformation ();
		transformation.Append (JSM.RotationXTransformation (xAngle, origo));
		transformation.Append (JSM.RotationYTransformation (yAngle, origo));
		transformation.Append (JSM.RotationZTransformation (zAngle, origo));
		return transformation;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/plane',["../core/jsm"],function(JSM){
	/**
	* Enum: CoordPlanePosition
	* Description: Position of a coordinate and a plane.
	* Values:
	*	{CoordOnPlane} coordinate lies on the plane
	*	{CoordInFrontOfPlane} coordinate lies in front of of the plane
	*	{CoordAtBackOfPlane} coordinate lies at the back of the plane
	*/
	JSM.CoordPlanePosition = {
		CoordOnPlane : 0,
		CoordInFrontOfPlane : 1,
		CoordAtBackOfPlane : 2
	};

	/**
	* Enum: LinePlanePosition
	* Description: Position of a line and a plane.
	* Values:
	*	{LineParallelToPlane} line is parallel to the plane
	*	{LineIntersectsPlane} line intersects the plane
	*/
	JSM.LinePlanePosition = {
		LineParallelToPlane : 0,
		LineIntersectsPlane : 1
	};

	/**
	* Class: Plane
	* Description: Represents a plane.
	* Parameters:
	*	a {number} the a component of plane equation
	*	b {number} the b component of plane equation
	*	c {number} the c component of plane equation
	*	d {number} the d component of plane equation
	*/
	JSM.Plane = function (a, b, c, d)
	{
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	};

	/**
	* Function: Plane.Set
	* Description: Sets the plane.
	* Parameters:
	*	a {number} the a component of plane equation
	*	b {number} the b component of plane equation
	*	c {number} the c component of plane equation
	*	d {number} the d component of plane equation
	*/
	JSM.Plane.prototype.Set = function (a, b, c, d)
	{
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	};

	/**
	* Function: Plane.GetNormal
	* Description: Calculates the normal vector of the plane.
	* Returns:
	*	{Vector} the result
	*/
	JSM.Plane.prototype.GetNormal = function ()
	{
		return new JSM.Vector (this.a, this.b, this.c);
	};

	/**
	* Function: Plane.CoordSignedDistance
	* Description: Calculates the signed distance of a coordinate and the plane.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Plane.prototype.CoordSignedDistance = function (coord)
	{
		var x = coord.x;
		var y = coord.y;
		var z = coord.z;

		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;

		var distance = (a * x + b * y + c * z + d) / Math.sqrt (a * a + b * b + c * c);
		return distance;
	};

	/**
	* Function: Plane.CoordDistance
	* Description: Calculates the distance of a coordinate and the plane.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{number} the result
	*/
	JSM.Plane.prototype.CoordDistance = function (coord)
	{
		var signed = this.CoordSignedDistance (coord);
		return Math.abs (signed);
	};

	/**
	* Function: Plane.ProjectCoord
	* Description: Projects a coordinate to the plane.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{Coord} the projected coordinate
	*/
	JSM.Plane.prototype.ProjectCoord = function (coord)
	{
		var x = coord.x;
		var y = coord.y;
		var z = coord.z;

		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;

		var distance = this.CoordDistance (coord);
		var side = a * x + b * y + c * z + d;
		if (JSM.IsGreater (side, 0.0)) {
			distance = -distance;
		}

		var normal = this.GetNormal ().Normalize ();
		var result = coord.Clone ().Offset (normal, distance);
		return result;
	};


	/**
	* Function: Plane.CoordPosition
	* Description: Calculates the position of the plane and the given coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{CoordPlanePosition} thre result
	*/
	JSM.Plane.prototype.CoordPosition = function (coord)
	{
		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;

		var x = coord.x;
		var y = coord.y;
		var z = coord.z;

		var s = a * x + b * y + c * z + d;
		if (JSM.IsPositive (s)) {
			return JSM.CoordPlanePosition.CoordInFrontOfPlane;
		} else if (JSM.IsNegative (s)) {
			return JSM.CoordPlanePosition.CoordAtBackOfPlane;
		}
		
		return JSM.CoordPlanePosition.CoordOnPlane;
	};

	/**
	* Function: Plane.LinePosition
	* Description: Calculates the position of the plane and the given line.
	* Parameters:
	*	line {Line} the line
	*	intersection {Coord} (out) the intersection point if it exists
	* Returns:
	*	{CoordLinePosition} the result
	*/
	JSM.Plane.prototype.LinePosition = function (line, intersection)
	{
		var	direction = line.direction.Clone ().Normalize ();

		var x1 = line.start.x;
		var y1 = line.start.y;
		var z1 = line.start.z;

		var x2 = line.start.x + direction.x;
		var y2 = line.start.y + direction.y;
		var z2 = line.start.z + direction.z;

		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;

		var denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));
		if (JSM.IsZero (denom)) {
			return JSM.LinePlanePosition.LineParallelToPlane;
		}

		var u = (a * x1 + b * y1 + c * z1 + d) / denom;
		if (intersection !== undefined) {
			direction.MultiplyScalar (u);
			var i = JSM.CoordAdd (line.start, direction);
			intersection.Set (i.x, i.y, i.z);
		}

		return JSM.LinePlanePosition.LineIntersectsPlane;
	};

	/**
	* Function: Plane.LineIntersection
	* Description:
	*	Calculates the intersection point of a line and a plane.
	*	The line should not be parallel to the plane.
	* Parameters:
	*	line {Line} the line
	* Returns:
	*	{Coord} the result
	*/
	JSM.Plane.prototype.LineIntersection = function (line)
	{
		var	direction = line.direction.Clone ().Normalize ();

		var x1 = line.start.x;
		var y1 = line.start.y;
		var z1 = line.start.z;

		var x2 = line.start.x + direction.x;
		var y2 = line.start.y + direction.y;
		var z2 = line.start.z + direction.z;

		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;

		var denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));
		if (JSM.IsZero (denom)) {
			return null;
		}

		var u = (a * x1 + b * y1 + c * z1 + d) / denom;
		direction.MultiplyScalar (u);
		return JSM.CoordAdd (line.start, direction);
	};

	/**
	* Function: Plane.Clone
	* Description: Clones the plane.
	* Returns:
	*	{Plane} a cloned instance
	*/
	JSM.Plane.prototype.Clone = function ()
	{
		return new JSM.Plane (this.a, this.b, this.c, this.d);
	};

	/**
	* Function: GetPlaneFromCoordAndDirection
	* Description: Generates a plane from a coordinate and a direction.
	* Parameters:
	*	coord {Coord} the coordinate
	*	direction {Vector} the direction
	* Returns:
	*	{Plane} the result
	*/
	JSM.GetPlaneFromCoordAndDirection = function (coord, direction)
	{
		var plane = new JSM.Plane ();
		var normal = direction.Clone ().Normalize ();
		var pa = normal.x;
		var pb = normal.y;
		var pc = normal.z;
		var pd = -(pa * coord.x + pb * coord.y + pc * coord.z);
		plane.Set (pa, pb, pc, pd);
		return plane;
	};

	/**
	* Function: GetPlaneFromThreeCoords
	* Description: Generates a plane from three coordinates.
	* Parameters:
	*	a {Coord} the first coordinate
	*	b {Coord} the second coordinate
	*	c {Coord} the third coordinate
	* Returns:
	*	{Plane} the result
	*/
	JSM.GetPlaneFromThreeCoords = function (a, b, c)
	{
		var plane = new JSM.Plane ();
		var pa = (b.y - a.y) * (c.z - a.z) - (c.y - a.y) * (b.z - a.z);
		var pb = (b.z - a.z) * (c.x - a.x) - (c.z - a.z) * (b.x - a.x);
		var pc = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);
		var pd = -(pa * a.x + pb * a.y + pc * a.z);
		plane.Set (pa, pb, pc, pd);
		return plane;
	};

	/**
	* Function: CoordPlaneSignedDirectionalDistance
	* Description: Calculates the signed distance of a coordinate and a plane along a direction vector.
	* Parameters:
	*	coord {Coord} the coordinate
	*	direction {Vector} the direction
	*	plane {Plane} the plane
	* Returns:
	*	{number} the result
	*/
	JSM.CoordPlaneSignedDirectionalDistance = function (coord, direction, plane)
	{
		var	normal = direction.Clone ().Normalize ();

		var x1 = coord.x;
		var y1 = coord.y;
		var z1 = coord.z;

		var x2 = coord.x + normal.x;
		var y2 = coord.y + normal.y;
		var z2 = coord.z + normal.z;

		var a = plane.a;
		var b = plane.b;
		var c = plane.c;
		var d = plane.d;

		var denom = (a * (x1 - x2) + b * (y1 - y2) + c * (z1 - z2));
		if (JSM.IsZero (denom)) {
			return 0.0;
		}

		var u = (a * x1 + b * y1 + c * z1 + d) / denom;
		normal.MultiplyScalar (u);
		var intersection = JSM.CoordAdd (coord, normal);
		var distance = coord.DistanceTo (intersection);
		var s = a * x1 + b * y1 + c * z1 + d;
		if (JSM.IsNegative (s)) {
			distance = -distance;
		}

		return distance;
	};

	/**
	* Function: CoordPlaneDirectionalDistance
	* Description: Calculates the distance of a coordinate and a plane along a direction vector.
	* Parameters:
	*	coord {Coord} the coordinate
	*	direction {Vector} the direction
	*	plane {Plane} the plane
	* Returns:
	*	{number} the result
	*/
	JSM.CoordPlaneDirectionalDistance = function (coord, direction, plane)
	{
		return Math.abs (JSM.CoordPlaneSignedDirectionalDistance (coord, direction, plane));
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/projection',["../core/jsm"],function(JSM){
	/**
	* Function: MatrixView
	* Description: Creates a view matrix.
	* Parameters:
	*	eye {Coord} eye position
	*	center {Coord} center position
	*	up {Vector} up vector
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixView = function (eye, center, up)
	{
		if (eye.IsEqual (center)) {
			return JSM.MatrixIdentity ();
		}
		
		var result = [];

		var d = JSM.CoordSub (eye, center).Normalize ();
		var v = JSM.VectorCross (up, d).Normalize ();
		var u = JSM.VectorCross (d, v).Normalize ();

		result[0] = v.x;
		result[1] = u.x;
		result[2] = d.x;
		result[3] = 0.0;
		result[4] = v.y;
		result[5] = u.y;
		result[6] = d.y;
		result[7] = 0.0;
		result[8] = v.z;
		result[9] = u.z;
		result[10] = d.z;
		result[11] = 0.0;
		result[12] = -JSM.VectorDot (v, eye);
		result[13] = -JSM.VectorDot (u, eye);
		result[14] = -JSM.VectorDot (d, eye);
		result[15] = 1.0;
		
		return result;
	};

	/**
	* Function: MatrixPerspective
	* Description: Creates a perspective matrix.
	* Parameters:
	*	fieldOfView {number} field of view
	*	aspectRatio {number} aspect ratio
	*	nearPlane {number} near clipping plane
	*	farPlane {number} far clipping plane
	* Returns:
	*	{number[16]} the result matrix
	*/
	JSM.MatrixPerspective = function (fieldOfView, aspectRatio, nearPlane, farPlane)
	{
		var result = [];
		
		var f = 1.0 / Math.tan (fieldOfView / 2.0);
		var nf = 1.0 / (nearPlane - farPlane);
		
		result[0] = f / aspectRatio;
		result[1] = 0.0;
		result[2] = 0.0;
		result[3] = 0.0;
		result[4] = 0.0;
		result[5] = f;
		result[6] = 0.0;
		result[7] = 0.0;
		result[8] = 0.0;
		result[9] = 0.0;
		result[10] = (farPlane + nearPlane) * nf;
		result[11] = -1.0;
		result[12] = 0.0;
		result[13] = 0.0;
		result[14] = (2.0 * farPlane * nearPlane) * nf;
		result[15] = 0.0;
		
		return result;
	};

	/**
	* Function: Project
	* Description: Projects a 3D coordinate to 2D.
	* Parameters:
	*	coord {Coord} the coordinate
	*	eye {Coord} the eye of the camera
	*	center {Coord} the center of the camera
	*	up {Vector} the up vector of the camera
	*	fieldOfView {number} camera field of view
	*	aspectRatio {number} aspect ratio of the desired image
	*	nearPlane {number} near cutting plane distance
	*	farPlane {number} far cutting plane distance
	*	viewPort {number[4]} view port coordinates in pixels
	* Returns:
	*	{Coord} the result
	*/
	JSM.Project = function (coord, eye, center, up, fieldOfView, aspectRatio, nearPlane, farPlane, viewPort)
	{
		var input = [
			coord.x,
			coord.y,
			coord.z,
			1.0
		];

		var viewMatrix = JSM.MatrixView (eye, center, up);
		var perspectiveMatrix = JSM.MatrixPerspective (fieldOfView, aspectRatio, nearPlane, farPlane);
		var projectionMatrix = JSM.MatrixMultiply (viewMatrix, perspectiveMatrix);
		var output = JSM.MatrixVectorMultiply (projectionMatrix, input);
		var denom = output[3];
		if (JSM.IsZero (denom)) {
			return null;
		}

		var result = new JSM.Coord (0.0, 0.0, 0.0);
		result.x = (output[0] / denom * 0.5 + 0.5) * viewPort[2] + viewPort[0];
		result.y = (output[1] / denom * 0.5 + 0.5) * viewPort[3] + viewPort[1];
		result.z = (output[2] / denom * 0.5 + 0.5);
		return result;	
	};

	/**
	* Function: Unproject
	* Description: Projects a 2D coordinate to 3D.
	* Parameters:
	*	coord {Coord} the coordinate (the z component can be zero)
	*	eye {Coord} the eye of the camera
	*	center {Coord} the center of the camera
	*	up {Vector} the up vector of the camera
	*	fieldOfView {number} camera field of view
	*	aspectRatio {number} aspect ratio of the desired image
	*	nearPlane {number} near cutting plane distance
	*	farPlane {number} far cutting plane distance
	*	viewPort {number[4]} view port coordinates in pixels
	* Returns:
	*	{Coord} the result
	*/
	JSM.Unproject = function (coord, eye, center, up, fieldOfView, aspectRatio, nearPlane, farPlane, viewPort)
	{
		var input = [
			(coord.x - viewPort[0]) / viewPort[2] * 2.0 - 1.0,
			(coord.y - viewPort[1]) / viewPort[3] * 2.0 - 1.0,
			2.0 * coord.z - 1,
			1.0
		];
		
		var viewMatrix = JSM.MatrixView (eye, center, up);
		var perspectiveMatrix = JSM.MatrixPerspective (fieldOfView, aspectRatio, nearPlane, farPlane);
		var projectionMatrix = JSM.MatrixMultiply (viewMatrix, perspectiveMatrix);
		var inverseMatrix = JSM.MatrixInvert (projectionMatrix);
		var output = JSM.MatrixVectorMultiply (inverseMatrix, input);
		var denom = output[3];
		if (JSM.IsZero (denom)) {
			return null;
		}

		var result = new JSM.Coord (0.0, 0.0, 0.0);
		result.x = (output[0] / output[3]);
		result.y = (output[1] / output[3]);
		result.z = (output[2] / output[3]);
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/convexhull',["../core/jsm"],function(JSM){
	/**
	* Function: ConvexHull2D
	* Description: Calculates the 2D convex hull from the given coordinates.
	* Parameters:
	*	coords {Coord2D[*]} the coordinate array
	* Returns:
	*	{Coord2D[*]} coordinate array of the convex hull
	*/
	JSM.ConvexHull2D = function (coords)
	{
		function FindLeftMostCoord (coords)
		{
			var count = coords.length;
			var minValue = JSM.Inf;
			var minIndex = -1;
		
			var i, current;
			for (i = 0; i < count; i++) {
				current = coords[i].x;
				if (JSM.IsLower (current, minValue)) {
					minValue = current;
					minIndex = i;
				}
			}
			
			return minIndex;
		}
		
		function FindNextCoord (coords, current)
		{
			var count = coords.length;
			var next = 0;
			
			var i;
			for (i = 1; i < count; i++) {
				if (current == next) {
					next = i;
				} else {
					if (JSM.CoordOrientation2D (coords[current], coords[next], coords[i]) == JSM.Orientation.Clockwise) {
						next = i;
					}
				}
			}
			
			return next;
		}

		var result = [];
		var count = coords.length;
		if (count < 3) {
			return result;
		}
		
		var first = FindLeftMostCoord (coords);
		var current = first;
		var next;
		
		do {
			result.push (current);
			next = FindNextCoord (coords, current);
			current = next;
		} while (next != first);
		
		return result;
	};

	/**
	* Function: ConvexHull3D
	* Description:
	*	Calculates the 3D convex hull from the given coordinates. The result defines
	*	convex hull triangles as an array of arrays with three coordinates.
	* Parameters:
	*	coords {Coord[*]} the coordinate array
	* Returns:
	*	{Coord[3][*]} the result
	*/
	JSM.ConvexHull3D = function (coords)
	{
		function Vertex ()
		{
			this.position = null;
		}
		
		function Edge ()
		{
			this.vert1 = null;
			this.vert2 = null;
			this.tri1 = null;
			this.tri2 = null;
		}

		function Triangle ()
		{
			this.vertices = null;
			this.edges = null;
			this.valid = null;
		}

		function Body ()
		{
			this.vertices = [];
			this.edges = [];
			this.triangles = [];
		}

		function AddVertex (body, coord)
		{
			var vertex = new Vertex ();
			vertex.position = coord;
			body.vertices.push (vertex);
			return body.vertices.length - 1;
		}

		function AddEdge (body, triangleIndex, a, b)
		{
			var edgeIndex = -1;
		
			var i, current;
			for (i = 0; i < body.edges.length; i++) {
				current = body.edges[i];
				if (current.vert1 == a && current.vert2 == b || current.vert1 == b && current.vert2 == a) {
					edgeIndex = i;
					break;
				}
			}
			
			if (edgeIndex == -1) {
				var newEdge = new Edge ();
				newEdge.vert1 = a;
				newEdge.vert2 = b;
				newEdge.tri1 = -1;
				newEdge.tri2 = -1;
				body.edges.push (newEdge);
				edgeIndex = body.edges.length - 1;
			}
			
			var edge = body.edges[edgeIndex];
			if (edge.tri1 != triangleIndex && edge.tri2 != triangleIndex) {
				if (edge.tri1 == -1) {
					edge.tri1 = triangleIndex;
				} else if (edge.tri2 == -1) {
					edge.tri2 = triangleIndex;
				}
			}
			
			return edgeIndex;
		}

		function AddTriangle (body, a, b, c)
		{
			var triangleIndex = body.triangles.length;
			var edge1 = AddEdge (body, triangleIndex, a, b);
			var edge2 = AddEdge (body, triangleIndex, b, c);
			var edge3 = AddEdge (body, triangleIndex, c, a);
			
			var triangle = new Triangle ();
			triangle.vertices = [a, b, c];
			triangle.edges = [edge1, edge2, edge3];
			triangle.valid = true;
			body.triangles.push (triangle);
			return body.triangles.length - 1;
		}

		function RemoveTriangleFromEdge (body, triangleIndex, edgeIndex)
		{
			var edge = body.edges[edgeIndex];
			if (edge.tri1 == triangleIndex) {
				edge.tri1 = -1;
			} else if (edge.tri2 == triangleIndex) {
				edge.tri2 = -1;
			}
		}

		function RemoveTriangle (body, triangleIndex)
		{
			var triangle = body.triangles[triangleIndex];
			if (!triangle.valid) {
				return;
			}
			
			RemoveTriangleFromEdge (body, triangleIndex, triangle.edges[0]);
			RemoveTriangleFromEdge (body, triangleIndex, triangle.edges[1]);
			RemoveTriangleFromEdge (body, triangleIndex, triangle.edges[2]);
			triangle.valid = false;
		}

		function GetTetrahedronVolume (body, a, b, c, d)
		{
			var aCoord = body.vertices[a].position;
			var bCoord = body.vertices[b].position;
			var cCoord = body.vertices[c].position;
			var dCoord = body.vertices[d].position;
			
			var adSub = JSM.CoordSub (aCoord, dCoord);
			var bdSub = JSM.CoordSub (bCoord, dCoord);
			var cdSub = JSM.CoordSub (cCoord, dCoord);
			
			return (JSM.VectorDot (adSub, JSM.VectorCross (bdSub, cdSub))) / 6.0;
		}
		
		function CheckTetrahedronOrientation (body, a, b, c, d)
		{
			if (JSM.IsLower (GetTetrahedronVolume (body, a, b, c, d), 0.0)) {
				return false;
			}
			return true;
		}
		
		function AddInitialTetrahedron (body)
		{
			var triangleIndex = -1;
			if (CheckTetrahedronOrientation (body, 0, 1, 2, 3)) {
				triangleIndex = AddTriangle (body, 0, 1, 2);
			} else {
				triangleIndex = AddTriangle (body, 0, 2, 1);
			}

			var triangle = body.triangles[triangleIndex];
			AddTriangle (body, triangle.vertices[0], triangle.vertices[2], 3);
			AddTriangle (body, triangle.vertices[2], triangle.vertices[1], 3);
			AddTriangle (body, triangle.vertices[1], triangle.vertices[0], 3);
		}

		function AddCoordToHull (body, index)
		{
			var visibleTriangles = [];
			
			var i, triangle;
			for (i = 0; i < body.triangles.length; i++) {
				triangle = body.triangles[i];
				if (!triangle.valid) {
					visibleTriangles.push (false);
					continue;
				}

				if (CheckTetrahedronOrientation (body, triangle.vertices[0], triangle.vertices[2], triangle.vertices[1], index)) {
					visibleTriangles.push (true);
				} else {
					visibleTriangles.push (false);
				}
			}
			
			var edge1, edge2, edge3, edge1Vis, edge2Vis, edge3Vis;
			var newTriangles = [];
			for (i = 0; i < visibleTriangles.length; i++) {
				if (!visibleTriangles[i]) {
					continue;
				}

				triangle = body.triangles[i];
				if (!triangle.valid) {
					continue;
				}
				
				edge1 = body.edges[triangle.edges[0]];
				edge2 = body.edges[triangle.edges[1]];
				edge3 = body.edges[triangle.edges[2]];

				edge1Vis = (edge1.tri1 == -1 || edge1.tri2 == -1 || visibleTriangles[edge1.tri1] != visibleTriangles[edge1.tri2]);
				edge2Vis = (edge2.tri1 == -1 || edge2.tri2 == -1 || visibleTriangles[edge2.tri1] != visibleTriangles[edge2.tri2]);
				edge3Vis = (edge3.tri1 == -1 || edge3.tri2 == -1 || visibleTriangles[edge3.tri1] != visibleTriangles[edge3.tri2]);
				
				if (edge1Vis) {
					newTriangles.push ([triangle.vertices[0], triangle.vertices[1], index]);
				}
				
				if (edge2Vis) {
					newTriangles.push ([triangle.vertices[1], triangle.vertices[2], index]);
				}
				
				if (edge3Vis) {
					newTriangles.push ([triangle.vertices[2], triangle.vertices[0], index]);
				}
			}

			for (i = 0; i < visibleTriangles.length; i++) {
				if (!visibleTriangles[i]) {
					continue;
				}
				
				triangle = body.triangles[i];
				if (!triangle.valid) {
					continue;
				}
				
				RemoveTriangle (body, i);
			}
			
			var newTriangle;
			for (i = 0; i < newTriangles.length; i++) {
				newTriangle = newTriangles[i];
				AddTriangle (body, newTriangle[0], newTriangle[1], newTriangle[2]);
			}
		}
		
		var result = [];
		var count = coords.length;
		if (count < 4) {
			return result;
		}

		var body = new Body ();
		
		var i;
		for (i = 0; i < count; i++) {
			AddVertex (body, coords[i]);
		}
		
		AddInitialTetrahedron (body);
		for (i = 4; i < count; i++) {
			AddCoordToHull (body, i);
		}
		
		var triangle;
		for (i = 0; i < body.triangles.length; i++) {
			triangle = body.triangles[i];
			if (triangle.valid) {
				result.push (triangle.vertices);
			}
		}
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/polygon2d',["../core/jsm"],function(JSM){
	/**
	* Enum: Complexity
	* Description: Complexity of a polygon.
	* Values:
	*	{Invalid} invalid polygon
	*	{Convex} convex polygon
	*	{Concave} concave polygon
	*	{Complex} complex polygon (contains holes)
	*/
	JSM.Complexity = {
		Invalid : 0,
		Convex : 1,
		Concave : 2,
		Complex : 3
	};

	/**
	* Enum: CoordPolygonPosition2D
	* Description: Position of a coordinate and a polygon.
	* Values:
	*	{OnVertex} coordinate lies on a vertex of the polygon
	*	{OnEdge} coordinate lies on an edge of the polygon
	*	{Inside} coordinate lies inside the polygon
	*	{Outside} coordinate lies outside of the polygon
	*/
	JSM.CoordPolygonPosition2D = {
		OnVertex : 0,
		OnEdge : 1,
		Inside : 2,
		Outside : 3
	};

	/**
	* Enum: SectorPolygonPosition2D
	* Description: Position of a sector and a polygon.
	* Values:
	*	{IntersectionOnePoint} sector intersects polygon
	*	{IntersectionCoincident} sector lies on an edge of the polygon
	*	{IntersectionOnVertex} sector intersects polygon on a vertex
	*	{NoIntersection} sector does not intersect polygon
	*/
	JSM.SectorPolygonPosition2D = {
		IntersectionOnePoint : 0,
		IntersectionCoincident : 1,
		IntersectionOnVertex : 2,
		NoIntersection : 3
	};

	/**
	* Class: Polygon2D
	* Description: Represents a 2D polygon.
	*/
	JSM.Polygon2D = function ()
	{
		this.vertices = null;
		this.cache = null;
		this.Clear ();
	};

	/**
	* Function: Polygon2D.AddVertex
	* Description: Adds a vertex to the polygon.
	* Parameters:
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*/
	JSM.Polygon2D.prototype.AddVertex = function (x, y)
	{
		this.AddVertexCoord (new JSM.Coord2D (x, y));
	};

	/**
	* Function: Polygon2D.AddVertexCoord
	* Description: Adds a vertex coordinate to the polygon.
	* Parameters:
	*	coord {Coord} the coordinate
	*/
	JSM.Polygon2D.prototype.AddVertexCoord = function (coord)
	{
		this.vertices.push (coord);
		this.ClearCache ();
	};

	/**
	* Function: Polygon2D.GetVertex
	* Description: Returns the vertex with the given index.
	* Parameters:
	*	index {integer} the index of the vertex
	* Returns:
	*	{Coord2D} the vertex
	*/
	JSM.Polygon2D.prototype.GetVertex = function (index)
	{
		return this.vertices[index];
	};

	/**
	* Function: Polygon2D.RemoveVertex
	* Description: Removes a vertex from the polygon.
	* Parameters:
	*	index {integer} the index of the vertex
	*/
	JSM.Polygon2D.prototype.RemoveVertex = function (index)
	{
		this.vertices.splice (index, 1);
	};

	/**
	* Function: Polygon2D.VertexCount
	* Description: Returns the vertex count of the polygon.
	* Returns:
	*	{integer} vertex count
	*/
	JSM.Polygon2D.prototype.VertexCount = function ()
	{
		return this.vertices.length;
	};

	/**
	* Function: Polygon2D.EnumerateVertices
	* Description:
	*	Enumerates the vertices of the polygon, and calls
	*	a function for each vertex.
	* Parameters:
	*	from {integer} the start vertex index
	*	to {integer} the end vertex index
	*	callback {function} the callback function
	*/
	JSM.Polygon2D.prototype.EnumerateVertices = function (from, to, callback)
	{
		var count = this.vertices.length;
		var index = from;
		callback (index);
		while (index != to) {
			index = (index + 1) % count;
			callback (index);
		}
	};

	/**
	* Function: Polygon2D.GetNextVertex
	* Description: Returns the vertex index after the given one.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{integer} the result
	*/
	JSM.Polygon2D.prototype.GetNextVertex = function (index)
	{
		return JSM.NextIndex (index, this.vertices.length);
	};

	/**
	* Function: Polygon2D.GetPrevVertex
	* Description: Returns the vertex index before the given one.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{integer} the result
	*/
	JSM.Polygon2D.prototype.GetPrevVertex = function (index)
	{
		return JSM.PrevIndex (index, this.vertices.length);
	};

	/**
	* Function: Polygon2D.ShiftVertices
	* Description: Shifts polygon vertices.
	* Parameters:
	*	count {integer} the number of shifts
	*/
	JSM.Polygon2D.prototype.ShiftVertices = function (count)
	{
		JSM.ShiftArray (this.vertices, count);
		this.ClearCache ();
	};

	/**
	* Function: Polygon2D.ReverseVertices
	* Description: Reverses the orientation of the vertices.
	*/
	JSM.Polygon2D.prototype.ReverseVertices = function ()
	{
		this.vertices.reverse ();
		this.ClearCache ();
	};

	/**
	* Function: Polygon2D.GetVertexAngle
	* Description: Returns the angle of the given vertex.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{number} the result
	*/
	JSM.Polygon2D.prototype.GetVertexAngle = function (index)
	{
		var prev = this.vertices[this.GetPrevVertex (index)];
		var curr = this.vertices[index];
		var next = this.vertices[this.GetNextVertex (index)];
		var prevDir = JSM.CoordSub2D (prev, curr);
		var nextDir = JSM.CoordSub2D (next, curr);
		return prevDir.AngleTo (nextDir);
	};

	/**
	* Function: Polygon2D.GetSignedArea
	* Description: Calculates the signed area of the polygon.
	* Returns:
	*	{number} the result
	*/
	JSM.Polygon2D.prototype.GetSignedArea = function ()
	{
		if (this.cache.signedArea !== null) {
			return this.cache.signedArea;
		}
		
		var count = this.vertices.length;
		var result = 0.0;
		if (count >= 3) {
			var i, current, next;
			for (i = 0; i < count; i++) {
				current = this.vertices[i];
				next = this.vertices[(i + 1) % count];
				result += current.x * next.y - next.x * current.y;
			}
			result *= 0.5;
		}
		
		this.cache.signedArea = result;
		return result;
	};

	/**
	* Function: Polygon2D.GetArea
	* Description: Calculates the area of the polygon.
	* Returns:
	*	{number} the result
	*/
	JSM.Polygon2D.prototype.GetArea = function ()
	{
		var signedArea = this.GetSignedArea ();
		return Math.abs (signedArea);
	};

	/**
	* Function: Polygon2D.GetOrientation
	* Description: Calculates the orientation of the polygon.
	* Returns:
	*	{Orientation} the result
	*/
	JSM.Polygon2D.prototype.GetOrientation = function ()
	{
		if (this.cache.orientation !== null) {
			return this.cache.orientation;
		}

		var result = JSM.Orientation.Invalid;
		if (this.vertices.length >= 3) {
			var signedArea = this.GetSignedArea ();
			if (JSM.IsPositive (signedArea)) {
				result = JSM.Orientation.CounterClockwise;
			} else if (JSM.IsNegative (signedArea)) {
				result = JSM.Orientation.Clockwise;
			}
		}
		
		this.cache.orientation = result;
		return result;
	};


	/**
	* Function: Polygon2D.GetComplexity
	* Description: Calculates the complexity of the polygon.
	* Returns:
	*	{Complexity} the result
	*/
	JSM.Polygon2D.prototype.GetComplexity = function ()
	{
		if (this.cache.complexity !== null) {
			return this.cache.complexity;
		}
		
		var count = this.vertices.length;
		if (count < 3) {
			return JSM.Complexity.Invalid;
		}
		
		var result = JSM.Complexity.Invalid;
		var polygonOrientain = this.GetOrientation ();
		if (polygonOrientain != JSM.Orientation.Invalid) {
			result = JSM.Complexity.Convex;
			var i;
			for (i = 0; i < count; i++) {
				if (this.IsConcaveVertex (i)) {
					result = JSM.Complexity.Concave;
					break;
				}
			}
		}
		
		this.cache.complexity = result;
		return result;
	};

	/**
	* Function: Polygon2D.GetVertexOrientation
	* Description: Calculates the orientation of the given vertex of the polygon.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{Orientation} the result
	*/
	JSM.Polygon2D.prototype.GetVertexOrientation = function (index)
	{
		if (this.cache.vertexOrientations[index] !== undefined) {
			return this.cache.vertexOrientations[index];
		}

		var prev = this.vertices[this.GetPrevVertex (index)];
		var curr = this.vertices[index];
		var next = this.vertices[this.GetNextVertex (index)];
		
		var result = JSM.CoordOrientation2D (prev, curr, next);
		this.cache.vertexOrientations[index] = result;
		return result;
	};

	/**
	* Function: Polygon2D.IsConvexVertex
	* Description: Returns if the given vertex is convex.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{boolean} the result
	*/
	JSM.Polygon2D.prototype.IsConvexVertex = function (index)
	{
		var orientation = this.GetOrientation ();
		var vertexOrientation = this.GetVertexOrientation (index);
		if (vertexOrientation == JSM.Orientation.Invalid) {
			return false;
		}
		return vertexOrientation == orientation;
	};

	/**
	* Function: Polygon2D.IsConcaveVertex
	* Description: Returns if the given vertex is concave.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{boolean} the result
	*/
	JSM.Polygon2D.prototype.IsConcaveVertex = function (index)
	{
		var orientation = this.GetOrientation ();
		var vertexOrientation = this.GetVertexOrientation (index);
		if (vertexOrientation == JSM.Orientation.Invalid) {
			return false;
		}
		return vertexOrientation != orientation;
	};

	/**
	* Function: Polygon2D.CoordPosition
	* Description: Calculates the position of a coordinate and the polygon.
	* Parameters:
	*	coord {Coord2D} the coordinate
	* Returns:
	*	{CoordPolygonPosition2D} the result
	*/
	JSM.Polygon2D.prototype.CoordPosition = function (coord)
	{
		function IntersectionCount (coord, beg, end)
		{
			function GetIntersection (coord, beg, end)
			{
				var result = new JSM.Coord2D (beg.x, coord.y);
				if (!JSM.IsEqual (beg.y, coord.y)) {
					var yMoveRatio = Math.abs ((beg.y - coord.y) / (end.y - beg.y));
					result.x = beg.x + (end.x - beg.x) * yMoveRatio;
				}
				return result;
			}

			var begYDist = beg.y - coord.y;
			var endYDist = end.y - coord.y;
			
			var begBelow = JSM.IsNegative (begYDist);
			var begAbove = JSM.IsPositive (begYDist);
			var endBelow = JSM.IsNegative (endYDist);
			var endAbove = JSM.IsPositive (endYDist);
			if ((begBelow && endBelow) || (begAbove && endAbove)) {
				return 0;
			}

			var begOnLine = !begBelow && !begAbove;
			var endOnLine = !endBelow && !endAbove;
			if (begOnLine && endOnLine) {
				return 0;
			}

			var intersection = GetIntersection (coord, beg, end);
			if (JSM.IsLower (intersection.x, coord.x)) {
				return 0;
			} else if (JSM.IsGreater (intersection.x, coord.x)) {
				if (begOnLine || endOnLine) {
					var upwardEdge = JSM.IsGreater (end.y, beg.y);
					if (begOnLine && upwardEdge || endOnLine && !upwardEdge) {
						return 1;
					}
					return 0;
				}
				return 1;
			}
			return 1;
		}
		
		var vertexCount = this.vertices.length;
		var intersections = 0;
		var i, edgeFrom, edgeTo, sector, position;
		for (i = 0; i < vertexCount; i++) {
			edgeFrom = this.vertices[i];
			edgeTo = this.vertices[(i + 1) % vertexCount];
			sector = new JSM.Sector2D (edgeFrom, edgeTo);
			position = sector.CoordPosition (coord);
			if (position == JSM.CoordSectorPosition2D.CoordInsideOfSector) {
				return JSM.CoordPolygonPosition2D.OnEdge;
			} else if (position == JSM.CoordSectorPosition2D.CoordOnSectorEndCoord) {
				return JSM.CoordPolygonPosition2D.OnVertex;
			}
			intersections += IntersectionCount (coord, edgeFrom, edgeTo);
		}
		
		if (intersections % 2 !== 0) {
			return JSM.CoordPolygonPosition2D.Inside;
		}
		return JSM.CoordPolygonPosition2D.Outside;
	};

	/**
	* Function: Polygon2D.SectorPosition
	* Description:
	*	Calculates the position of a sector and the polygon. The given begin and end
	*	vertex indices are omitted form intersection checking.
	* Parameters:
	*	sector {Sector2D} the sector
	*	begIndex {integer} begin vertex index
	*	endIndex {integer} end vertex index
	* Returns:
	*	{CoordSectorPosition2D} the result
	*/
	JSM.Polygon2D.prototype.SectorPosition = function (sector, begIndex, endIndex)
	{
		var result = JSM.SectorPolygonPosition2D.NoIntersection;
		var vertexCount = this.vertices.length;
		if (vertexCount < 3) {
			return result;
		}
		
		var i, edgeBegIndex, edgeEndIndex, edgeBeg, edgeEnd;
		var currentSector, position;
		for (i = 0; i < vertexCount; i++) {
			edgeBegIndex = i;
			edgeEndIndex = (i + 1) % vertexCount;
			edgeBeg = this.vertices[edgeBegIndex];
			edgeEnd = this.vertices[edgeEndIndex];
			if (edgeBegIndex == begIndex || edgeEndIndex == begIndex || edgeBegIndex == endIndex || edgeEndIndex == endIndex) {
				continue;
			}
			currentSector = new JSM.Sector2D (edgeBeg, edgeEnd);
			position = sector.SectorPosition (currentSector);
			if (position == JSM.SectorSectorPosition2D.SectorsIntersectOnePoint) {
				return JSM.SectorPolygonPosition2D.IntersectionOnePoint;
			} else if (position == JSM.SectorSectorPosition2D.SectorsIntersectCoincident) {
				return JSM.SectorPolygonPosition2D.IntersectionCoincident;
			} else if (position == JSM.SectorSectorPosition2D.SectorsIntersectEndPoint) {
				result = JSM.SectorPolygonPosition2D.IntersectionOnVertex;
			}
		}
		
		return result;
	};

	/**
	* Function: Polygon2D.IsDiagonal
	* Description: Returns if the sector between two vertices is diagonal.
	* Parameters:
	*	from {integer} begin vertex index
	*	to {integer} end vertex index
	* Returns:
	*	{boolean} the result
	*/
	JSM.Polygon2D.prototype.IsDiagonal = function (from, to)
	{
		function DiagonalIntersectsAnyEdges (polygon, from, to)
		{
			var fromVertex = polygon.GetVertex (from);
			var toVertex = polygon.GetVertex (to);
			var sector = new JSM.Sector2D (fromVertex, toVertex);
			var position = polygon.SectorPosition (sector, from, to);
			if (position != JSM.SectorPolygonPosition2D.NoIntersection) {
				return true;
			}
			return false;
		}
		
		function DiagonalInsideOfPolygon (polygon, from, to)
		{
			var fromVertex = polygon.GetVertex (from);
			var toVertex = polygon.GetVertex (to);
			var midCoord = new JSM.Coord2D (
				(fromVertex.x + toVertex.x) / 2.0,
				(fromVertex.y + toVertex.y) / 2.0
			);
			var position = polygon.CoordPosition (midCoord);
			return position == JSM.CoordPolygonPosition2D.Inside;
		}
		
		if (from == to) {
			return false;
		}

		if (this.GetPrevVertex (from) == to || this.GetNextVertex (from) == to) {
			return false;
		}

		var fromVertex = this.vertices[from];
		var toVertex = this.vertices[to];
		if (fromVertex.IsEqual (toVertex)) {
			return false;
		}

		if (DiagonalIntersectsAnyEdges (this, from, to)) {
			return false;
		}
		
		if (!DiagonalInsideOfPolygon (this, from, to)) {
			return false;
		}
		
		return true;
	};

	/**
	* Function: Polygon2D.ToArray
	* Description: Creates an array of vertices from polygon.
	* Returns:
	*	{Coord2D[*]} the result
	*/
	JSM.Polygon2D.prototype.ToArray = function ()
	{
		var vertices = [];
		var i, vertex;
		for (i = 0; i < this.vertices.length; i++) {
			vertex = this.vertices[i];
			vertices.push (vertex.Clone ());
		}
		return vertices;
	};

	/**
	* Function: Polygon2D.FromArray
	* Description: Creates the polygon from an array of vertices.
	* Parameters:
	*	vertices {Coord2D[*]} the array of vertices
	*/
	JSM.Polygon2D.prototype.FromArray = function (vertices)
	{
		this.Clear ();
		var i, vertex;
		for (i = 0; i < vertices.length; i++) {
			vertex = vertices[i];
			this.AddVertex (vertex.x, vertex.y);
		}
	};

	/**
	 * Function: Polygon2D.GetBoundingBox
	 * Description: Calculates the bounding box of the polygon.
	 * Returns:
	 *	{Box2D} the result
	 */
	JSM.Polygon2D.prototype.GetBoundingBox = function ()
	{
		if (this.cache.boundingBox !== null) {
			return this.cache.boundingBox;
		}

		var result = new JSM.Box2D (
			new JSM.Coord2D (JSM.Inf, JSM.Inf),
			new JSM.Coord2D (-JSM.Inf, -JSM.Inf)
		);

		var i, coord;
		for (i = 0; i < this.vertices.length; i++) {
			coord = this.vertices[i];
			result.min.x = JSM.Minimum (result.min.x, coord.x);
			result.min.y = JSM.Minimum (result.min.y, coord.y);
			result.max.x = JSM.Maximum (result.max.x, coord.x);
			result.max.y = JSM.Maximum (result.max.y, coord.y);
		}

		this.cache.boundingBox = result;
		return result;
	};

	/**
	* Function: Polygon2D.Clear
	* Description: Makes the polygon empty.
	*/
	JSM.Polygon2D.prototype.Clear = function ()
	{
		this.vertices = [];
		this.ClearCache ();
	};

	/**
	* Function: Polygon2D.ClearCache
	* Description: Clears stored values from the polygon.
	*/
	JSM.Polygon2D.prototype.ClearCache = function ()
	{
		this.cache = {
			signedArea : null,
			orientation : null,
			vertexOrientations : {},
			complexity : null,
			boundingBox : null
		};
	};

	/**
	* Function: Polygon2D.Clone
	* Description: Clones the polygon.
	* Returns:
	*	{Polygon2D} a cloned instance
	*/
	JSM.Polygon2D.prototype.Clone = function ()
	{
		var result = new JSM.Polygon2D ();
		var i, vertex;
		for (i = 0; i < this.vertices.length; i++) {
			vertex = this.vertices[i];
			result.AddVertexCoord (vertex.Clone ());
		}
		return result;
	};

	/**
	* Class: ContourPolygon2D
	* Description: Represents a 2D polygon with more contours.
	*/
	JSM.ContourPolygon2D = function ()
	{
		this.contours = null;
		this.Clear ();
	};

	/**
	* Function: ContourPolygon2D.AddVertex
	* Description: Adds a vertex to the last contour of the polygon.
	* Parameters:
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*/
	JSM.ContourPolygon2D.prototype.AddVertex = function (x, y)
	{
		this.lastContour.AddVertex (x, y);
	};

	/**
	* Function: ContourPolygon2D.AddVertexCoord
	* Description: Adds a vertex coordinate to the last contour of the polygon.
	* Parameters:
	*	coord {Coord2D} the coordinate
	*/
	JSM.ContourPolygon2D.prototype.AddVertexCoord = function (coord)
	{
		this.lastContour.AddVertexCoord (coord);
	};

	/**
	* Function: ContourPolygon2D.AddContourVertex
	* Description: Adds a vertex to the given contour of the polygon.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*/
	JSM.ContourPolygon2D.prototype.AddContourVertex = function (contourIndex, x, y)
	{
		return this.contours[contourIndex].AddVertex (x, y);
	};

	/**
	* Function: ContourPolygon2D.AddContourVertexCoord
	* Description: Adds a vertex coordinate to the given contour of the polygon.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	*	coord {Coord2D} the coordinate
	*/
	JSM.ContourPolygon2D.prototype.AddContourVertexCoord = function (contourIndex, coord)
	{
		return this.contours[contourIndex].AddVertexCoord (coord);
	};

	/**
	* Function: ContourPolygon2D.VertexCount
	* Description: Returns the vertex count of the polygon.
	* Returns:
	*	{integer} vertex count
	*/
	JSM.ContourPolygon2D.prototype.VertexCount = function ()
	{
		var vertexCount = 0;
		var i;
		for (i = 0; i < this.contours.length; i++) {
			vertexCount += this.contours[i].VertexCount ();
		}
		return vertexCount;
	};

	/**
	* Function: ContourPolygon2D.ReverseVertices
	* Description: Reverses the orientation of the vertices.
	*/
	JSM.ContourPolygon2D.prototype.ReverseVertices = function ()
	{
		var i;
		for (i = 0; i < this.contours.length; i++) {
			this.contours[i].ReverseVertices ();
		}
	};

	/**
	* Function: ContourPolygon2D.ContourVertexCount
	* Description: Returns the vertex count of the given contour of the polygon.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	* Returns:
	*	{integer} vertex count
	*/
	JSM.ContourPolygon2D.prototype.ContourVertexCount = function (contourIndex)
	{
		return this.contours[contourIndex].VertexCount ();
	};

	/**
	* Function: ContourPolygon2D.AddContour
	* Description:
	*	Adds a contour to the polygon. If the given contour is null,
	*	an empty contour is added to the polygon.
	* Parameters:
	*	contour {Polygon2D} the new contour
	*/
	JSM.ContourPolygon2D.prototype.AddContour = function (contour)
	{
		if (contour === undefined || contour === null) {
			this.lastContour = new JSM.Polygon2D ();
		} else {
			this.lastContour = contour;
		}
		this.contours.push (this.lastContour);
	};

	/**
	* Function: ContourPolygon2D.GetLastContour
	* Description: Returns the last contour of the polygon.
	* Returns:
	*	{Polygon2D} the result
	*/
	JSM.ContourPolygon2D.prototype.GetLastContour = function ()
	{
		return this.lastContour;
	};

	/**
	* Function: ContourPolygon2D.GetContourVertex
	* Description: Returns the vertex of the given contour with the given index.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	*	vertexIndex {integer} the index of the vertex
	* Returns:
	*	{Coord2D} the vertex
	*/
	JSM.ContourPolygon2D.prototype.GetContourVertex = function (contourIndex, vertexIndex)
	{
		return this.contours[contourIndex].GetVertex (vertexIndex);
	};

	/**
	* Function: ContourPolygon2D.GetContour
	* Description: Returns the contour with the given index.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	* Returns:
	*	{Polygon2D} the contour
	*/
	JSM.ContourPolygon2D.prototype.GetContour = function (index)
	{
		return this.contours[index];
	};

	/**
	* Function: ContourPolygon2D.ContourCount
	* Description: Returns the contour count of the polygon.
	* Returns:
	*	{integer} contour count
	*/
	JSM.ContourPolygon2D.prototype.ContourCount = function ()
	{
		return this.contours.length;
	};

	/**
	* Function: ContourPolygon2D.GetSignedArea
	* Description: Calculates the signed area of the polygon.
	* Returns:
	*	{number} the result
	*/
	JSM.ContourPolygon2D.prototype.GetSignedArea = function ()
	{
		var area = 0.0;
		var i;
		for (i = 0; i < this.contours.length; i++) {
			area += this.contours[i].GetSignedArea ();
		}
		return area;
	};

	/**
	* Function: ContourPolygon2D.GetArea
	* Description: Calculates the area of the polygon.
	* Returns:
	*	{number} the result
	*/
	JSM.ContourPolygon2D.prototype.GetArea = function ()
	{
		var signedArea = this.GetSignedArea ();
		return Math.abs (signedArea);
	};

	/**
	* Function: ContourPolygon2D.GetOrientation
	* Description: Calculates the orientation of the polygon.
	* Returns:
	*	{Orientation} the result
	*/
	JSM.ContourPolygon2D.prototype.GetOrientation = function ()
	{
		if (this.lastContour === null) {
			return JSM.Orientation.Invalid;
		}
		var orientation = this.contours[0].GetOrientation ();
		if (this.contours.length == 1) {
			return orientation;
		}
		if (orientation == JSM.Orientation.Invalid) {
			return JSM.Orientation.Invalid;
		}
		var i, contourOrientation;
		for (i = 1; i < this.contours.length; i++) {
			contourOrientation = this.contours[i].GetOrientation ();
			if (contourOrientation == JSM.Orientation.Invalid) {
				return JSM.Orientation.Invalid;
			}
			if (orientation == contourOrientation) {
				return JSM.Orientation.Invalid;
			}
		}
		return orientation;
	};

	/**
	* Function: ContourPolygon2D.GetComplexity
	* Description: Calculates the complexity of the polygon.
	* Returns:
	*	{Complexity} the result
	*/
	JSM.ContourPolygon2D.prototype.GetComplexity = function ()
	{
		if (this.lastContour === null) {
			return JSM.Complexity.Invalid;
		}
		if (this.contours.length == 1) {
			return this.contours[0].GetComplexity ();
		}
		var i, contourComplexity;
		for (i = 1; i < this.contours.length; i++) {
			contourComplexity = this.contours[i].GetComplexity ();
			if (contourComplexity == JSM.Complexity.Invalid) {
				return JSM.Complexity.Invalid;
			}
		}
		return JSM.Complexity.Complex;
	};

	/**
	* Function: ContourPolygon2D.ToArray
	* Description:
	*	Creates an array of vertices from polygon. The result contains
	*	null values between contours.
	* Returns:
	*	{Coord2D[*]} the result
	*/
	JSM.ContourPolygon2D.prototype.ToArray = function ()
	{
		var vertices = [];
		var i, j, contour, vertex;
		for (i = 0; i < this.contours.length; i++) {
			contour = this.contours[i];
			for (j = 0; j < contour.VertexCount (); j++) {
				vertex = contour.GetVertex (j);
				vertices.push (vertex.Clone ());
			}
			if (i < this.contours.length - 1) {
				vertices.push (null);
			}
		}
		return vertices;
	};

	/**
	* Function: ContourPolygon2D.FromArray
	* Description:
	*	Creates the polygon from an array of vertices. The input should contain
	*	null values between contours.
	* Parameters:
	*	vertices {Coord2D[*]} the array of vertices
	*/
	JSM.ContourPolygon2D.prototype.FromArray = function (vertices)
	{
		this.Clear ();
		this.AddContour ();
		var i, vertex;
		for (i = 0; i < vertices.length; i++) {
			vertex = vertices[i];
			if (vertex === null) {
				this.AddContour ();
			} else {
				this.AddVertex (vertex.x, vertex.y);
			}
		}
	};

	/**
	* Function: ContourPolygon2D.Clear
	* Description: Makes the polygon empty.
	*/
	JSM.ContourPolygon2D.prototype.Clear = function ()
	{
		this.contours = [];
		this.lastContour = null;
	};

	/**
	* Function: ContourPolygon2D.Clone
	* Description: Clones the polygon.
	* Returns:
	*	{ContourPolygon2D} a cloned instance
	*/
	JSM.ContourPolygon2D.prototype.Clone = function ()
	{
		var result = new JSM.ContourPolygon2D ();
		var i, contour;
		for (i = 0; i < this.contours.length; i++) {
			contour = this.contours[i];
			result.AddContour (contour.Clone ());
		}
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/polygon',["../core/jsm"],function(JSM){
	/**
	* Class: Polygon
	* Description: Represents a 3D polygon.
	*/
	JSM.Polygon = function ()
	{
		this.vertices = null;
		this.cache = null;
		this.Clear ();
	};

	/**
	* Function: Polygon.AddVertex
	* Description: Adds a vertex to the polygon.
	* Parameters:
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*	z {number} the z coordinate of the vertex
	*/
	JSM.Polygon.prototype.AddVertex = function (x, y, z)
	{
		this.AddVertexCoord (new JSM.Coord (x, y, z));
	};

	/**
	* Function: Polygon.AddVertexCoord
	* Description: Adds a vertex coordinate to the polygon.
	* Parameters:
	*	coord {Coord} the coordinate
	*/
	JSM.Polygon.prototype.AddVertexCoord = function (coord)
	{
		this.vertices.push (coord);
		this.ClearCache ();
	};

	/**
	* Function: Polygon.GetVertex
	* Description: Returns the vertex with the given index.
	* Parameters:
	*	index {integer} the index of the vertex
	* Returns:
	*	{Coord} the vertex
	*/
	JSM.Polygon.prototype.GetVertex = function (index)
	{
		return this.vertices[index];
	};

	/**
	* Function: Polygon.VertexCount
	* Description: Returns the vertex count of the polygon.
	* Returns:
	*	{integer} vertex count
	*/
	JSM.Polygon.prototype.VertexCount = function ()
	{
		return this.vertices.length;
	};

	/**
	* Function: Polygon.GetNextVertex
	* Description: Returns the vertex index after the given one.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{integer} the result
	*/
	JSM.Polygon.prototype.GetNextVertex = function (index)
	{
		return JSM.NextIndex (index, this.vertices.length);
	};

	/**
	* Function: Polygon.ReverseVertices
	* Description: Reverses the orientation of the vertices.
	*/
	JSM.Polygon.prototype.ReverseVertices = function ()
	{
		this.vertices.reverse ();
		this.ClearCache ();
	};

	/**
	* Function: Polygon.GetPrevVertex
	* Description: Returns the vertex index before the given one.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{integer} the result
	*/
	JSM.Polygon.prototype.GetPrevVertex = function (index)
	{
		return JSM.PrevIndex (index, this.vertices.length);
	};

	/**
	* Function: Polygon.GetVertexAngle
	* Description: Returns the angle of the given vertex.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{number} the result
	*/
	JSM.Polygon.prototype.GetVertexAngle = function (index)
	{
		var prev = this.vertices[this.GetPrevVertex (index)];
		var curr = this.vertices[index];
		var next = this.vertices[this.GetNextVertex (index)];
		var prevDir = JSM.CoordSub (prev, curr);
		var nextDir = JSM.CoordSub (next, curr);
		return prevDir.AngleTo (nextDir);
	};

	/**
	* Function: Polygon.GetNormal
	* Description: Calculates the normal vector of the polygon.
	* Returns:
	*	{Vector} the result
	*/
	JSM.Polygon.prototype.GetNormal = function ()
	{
		if (this.cache.normal !== null) {
			return this.cache.normal;
		}
		var result = JSM.CalculateNormal (this.vertices);
		this.cache.normal = result;
		return result;
	};

	/**
	* Function: Polygon.ToPolygon2D
	* Description: Converts the polygon to a 2D polygon.
	* Returns:
	*	{Polygon2D} the result
	*/
	JSM.Polygon.prototype.ToPolygon2D = function ()
	{
		var normal = this.GetNormal ();
		var result = new JSM.Polygon2D ();
		var i, vertex;
		for (i = 0; i < this.vertices.length; i++) {
			vertex = this.vertices[i].ToCoord2D (normal);
			result.AddVertex (vertex.x, vertex.y);
		}
		return result;
	};

	/**
	* Function: Polygon.ToArray
	* Description: Creates an array of vertices from polygon.
	* Returns:
	*	{Coord[*]} the result
	*/
	JSM.Polygon.prototype.ToArray = function ()
	{
		var vertices = [];
		var i, vertex;
		for (i = 0; i < this.vertices.length; i++) {
			vertex = this.vertices[i];
			vertices.push (vertex.Clone ());
		}
		return vertices;
	};

	/**
	* Function: Polygon.FromArray
	* Description: Creates the polygon from an array of vertices.
	* Parameters:
	*	vertices {Coord[*]} the array of vertices
	*/
	JSM.Polygon.prototype.FromArray = function (vertices)
	{
		this.Clear ();
		var i, vertex;
		for (i = 0; i < vertices.length; i++) {
			vertex = vertices[i];
			this.AddVertex (vertex.x, vertex.y, vertex.z);
		}
	};

	/**
	* Function: Polygon.Clear
	* Description: Makes the polygon empty.
	*/
	JSM.Polygon.prototype.Clear = function ()
	{
		this.vertices = [];
		this.ClearCache ();
	};

	/**
	* Function: Polygon.ClearCache
	* Description: Clears stored values from the polygon.
	*/
	JSM.Polygon.prototype.ClearCache = function ()
	{
		this.cache = {
			normal : null
		};
	};

	/**
	* Function: Polygon.Clone
	* Description: Clones the polygon.
	* Returns:
	*	{Polygon} a cloned instance
	*/
	JSM.Polygon.prototype.Clone = function ()
	{
		var result = new JSM.Polygon ();
		var i, vertex;
		for (i = 0; i < this.vertices.length; i++) {
			vertex = this.vertices[i];
			result.AddVertexCoord (vertex.Clone ());
		}
		return result;
	};

	/**
	* Class: ContourPolygon
	* Description: Represents a 3D polygon with more contours.
	*/
	JSM.ContourPolygon = function ()
	{
		this.contours = null;
		this.Clear ();
	};

	/**
	* Function: ContourPolygon.AddVertex
	* Description: Adds a vertex to the last contour of the polygon.
	* Parameters:
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*	z {number} the z coordinate of the vertex
	*/
	JSM.ContourPolygon.prototype.AddVertex = function (x, y, z)
	{
		this.lastContour.AddVertex (x, y, z);
	};

	/**
	* Function: ContourPolygon.AddVertexCoord
	* Description: Adds a vertex coordinate to the last contour of the polygon.
	* Parameters:
	*	coord {Coord} the coordinate
	*/
	JSM.ContourPolygon.prototype.AddVertexCoord = function (coord)
	{
		this.lastContour.AddVertexCoord (coord);
	};

	/**
	* Function: ContourPolygon.AddContourVertex
	* Description: Adds a vertex to the given contour of the polygon.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*	z {number} the z coordinate of the vertex
	*/
	JSM.ContourPolygon.prototype.AddContourVertex = function (contourIndex, x, y, z)
	{
		return this.contours[contourIndex].AddVertex (x, y, z);
	};

	/**
	* Function: ContourPolygon.AddContourVertexCoord
	* Description: Adds a vertex coordinate to the given contour of the polygon.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	*	coord {Coord} the coordinate
	*/
	JSM.ContourPolygon.prototype.AddContourVertexCoord = function (contourIndex, coord)
	{
		return this.contours[contourIndex].AddVertexCoord (coord);
	};

	/**
	* Function: ContourPolygon.VertexCount
	* Description: Returns the vertex count of the polygon.
	* Returns:
	*	{integer} vertex count
	*/
	JSM.ContourPolygon.prototype.VertexCount = function ()
	{
		var vertexCount = 0;
		var i;
		for (i = 0; i < this.contours.length; i++) {
			vertexCount += this.contours[i].VertexCount ();
		}
		return vertexCount;
	};

	/**
	* Function: ContourPolygon.ContourVertexCount
	* Description: Returns the vertex count of the given contour of the polygon.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	* Returns:
	*	{integer} vertex count
	*/
	JSM.ContourPolygon.prototype.ContourVertexCount = function (contourIndex)
	{
		return this.contours[contourIndex].VertexCount ();
	};

	/**
	* Function: ContourPolygon.AddContour
	* Description:
	*	Adds a contour to the polygon. If the given contour is null,
	*	an empty contour is added to the polygon.
	* Parameters:
	*	contour {Polygon} the new contour
	*/
	JSM.ContourPolygon.prototype.AddContour = function (contour)
	{
		if (contour === undefined || contour === null) {
			this.lastContour = new JSM.Polygon ();
		} else {
			this.lastContour = contour;
		}
		this.contours.push (this.lastContour);
	};

	/**
	* Function: ContourPolygon.GetLastContour
	* Description: Returns the last contour of the polygon.
	* Returns:
	*	{Polygon} the result
	*/
	JSM.ContourPolygon.prototype.GetLastContour = function ()
	{
		return this.lastContour;
	};

	/**
	* Function: ContourPolygon.GetContourVertex
	* Description: Returns the vertex of the given contour with the given index.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	*	vertexIndex {integer} the index of the vertex
	* Returns:
	*	{Coord} the vertex
	*/
	JSM.ContourPolygon.prototype.GetContourVertex = function (contourIndex, vertexIndex)
	{
		return this.contours[contourIndex].GetVertex (vertexIndex);
	};

	/**
	* Function: ContourPolygon.GetContour
	* Description: Returns the contour with the given index.
	* Parameters:
	*	contourIndex {integer} the index of the contour
	* Returns:
	*	{Polygon} the contour
	*/
	JSM.ContourPolygon.prototype.GetContour = function (contourIndex)
	{
		return this.contours[contourIndex];
	};

	/**
	* Function: ContourPolygon.ContourCount
	* Description: Returns the contour count of the polygon.
	* Returns:
	*	{integer} contour count
	*/
	JSM.ContourPolygon.prototype.ContourCount = function ()
	{
		return this.contours.length;
	};

	/**
	* Function: ContourPolygon.ToContourPolygon2D
	* Description: Converts the polygon to a 2D polygon.
	* Returns:
	*	{ContourPolygon2D} the result
	*/
	JSM.ContourPolygon.prototype.ToContourPolygon2D = function ()
	{
		var normal = this.contours[0].GetNormal ();
		var result = new JSM.ContourPolygon2D ();
		var i, j, contour, vertex;
		for (i = 0; i < this.contours.length; i++) {
			result.AddContour ();
			contour = this.contours[i];
			for (j = 0; j < contour.VertexCount (); j++) {
				vertex = contour.GetVertex (j);
				result.AddVertexCoord (vertex.ToCoord2D (normal));
			}
		}
		return result;
	};

	/**
	* Function: ContourPolygon.ToArray
	* Description:
	*	Creates an array of vertices from polygon. The result contains
	*	null values between contours.
	* Returns:
	*	{Coord[*]} the result
	*/
	JSM.ContourPolygon.prototype.ToArray = function ()
	{
		var vertices = [];
		var i, j, contour, vertex;
		for (i = 0; i < this.contours.length; i++) {
			contour = this.contours[i];
			for (j = 0; j < contour.VertexCount (); j++) {
				vertex = contour.GetVertex (j);
				vertices.push (vertex.Clone ());
			}
			if (i < this.contours.length - 1) {
				vertices.push (null);
			}
		}
		return vertices;
	};

	/**
	* Function: ContourPolygon.FromArray
	* Description:
	*	Creates the polygon from an array of vertices. The input should contain
	*	null values between contours.
	* Parameters:
	*	vertices {Coord[*]} the array of vertices
	*/
	JSM.ContourPolygon.prototype.FromArray = function (vertices)
	{
		this.Clear ();
		this.AddContour ();
		var i, vertex;
		for (i = 0; i < vertices.length; i++) {
			vertex = vertices[i];
			if (vertex === null) {
				this.AddContour ();
			} else {
				this.AddVertex (vertex.x, vertex.y, vertex.z);
			}
		}
	};

	/**
	* Function: ContourPolygon.Clear
	* Description: Makes the polygon empty.
	*/
	JSM.ContourPolygon.prototype.Clear = function ()
	{
		this.contours = [];
		this.lastContour = null;
	};

	/**
	* Function: ContourPolygon.Clone
	* Description: Clones the polygon.
	* Returns:
	*	{ContourPolygon} a cloned instance
	*/
	JSM.ContourPolygon.prototype.Clone = function ()
	{
		var result = new JSM.ContourPolygon ();
		var i, contour;
		for (i = 0; i < this.contours.length; i++) {
			contour = this.contours[i];
			result.AddContour (contour.Clone ());
		}
		return result;

	};

	/**
	* Function: OffsetPolygonContour
	* Description: Offsets all vertices of a polygon.
	* Parameters:
	*	polygon {Polygon} the polygon
	*	width {number} the width of the offset
	* Returns:
	*	{Polygon} the result
	*/
	JSM.OffsetPolygonContour = function (polygon, width)
	{
		var count = polygon.VertexCount ();
		var normal = polygon.GetNormal ();

		var prev, curr, next;
		var prevVertex, currVertex, nextVertex;
		var prevDir, nextDir;
		var distance, offsetedCoord;
		
		var result = new JSM.Polygon ();
		
		var i, angle;
		for (i = 0; i < count; i++) {
			prev = polygon.GetPrevVertex (i);
			curr = i;
			next = polygon.GetNextVertex (i);
			
			prevVertex = polygon.GetVertex (prev);
			currVertex = polygon.GetVertex (curr);
			nextVertex = polygon.GetVertex (next);

			prevDir = JSM.CoordSub (prevVertex, currVertex);
			nextDir = JSM.CoordSub (nextVertex, currVertex);
			angle = prevDir.AngleTo (nextDir) / 2.0;
			if (JSM.CoordOrientation (prevVertex, currVertex, nextVertex, normal) == JSM.Orientation.Clockwise) {
				angle = Math.PI - angle;
			}

			distance = width / Math.sin (angle);
			offsetedCoord = currVertex.Clone ();
			offsetedCoord.Offset (nextDir, distance);
			offsetedCoord.Rotate (normal, angle, currVertex);
			result.AddVertex (offsetedCoord.x, offsetedCoord.y, offsetedCoord.z);
		}
		
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/cutpolygon',["../core/jsm"],function(JSM){
	JSM.CutVertexType = {
		Left : 1,
		Right : 2,
		Cut : 3
	};

	JSM.PolygonCutter = function (geometryInterface)
	{
		this.geometryInterface = geometryInterface;
		this.Reset ();
	};

	JSM.PolygonCutter.prototype.Cut = function (polygon, aSidePolygons, bSidePolygons, cutPolygons)
	{
		this.Reset ();
		
		var allVertexType = this.CalculateOriginalPolygonData (polygon);
		if (allVertexType !== null) {
			var cloned = polygon.Clone ();
			if (allVertexType == JSM.CutVertexType.Left) {
				aSidePolygons.push (cloned);
			} else if (allVertexType == JSM.CutVertexType.Right) {
				bSidePolygons.push (cloned);
			} else {
				cutPolygons.push (cloned);
			}
			return true;
		}
		
		if (!this.CalculateCutPolygonData ()) {
			return false;
		}
		
		if (!this.CalculateEntryVertices ()) {
			return false;
		}
		
		if (!this.CalculateCuttedPolygons (aSidePolygons, bSidePolygons)) {
			return false;
		}	
		
		return true;
	};

	JSM.PolygonCutter.prototype.Reset = function ()
	{
		this.originalPolygon = null;
		this.originalPolygonVertexTypes = null;
		this.cutPolygon = null;
		this.cutPolygonVertexTypes = null;
		this.cutPolygonVertexDistances = null;
		this.cutVertexIndices = null;
		this.entryVertices = null;
		this.entryVertexTypes = null;
	};

	JSM.PolygonCutter.prototype.CalculateOriginalPolygonData = function (polygon)
	{
		this.originalPolygon = polygon;
		this.originalPolygonVertexTypes = [];
		var aSideFound = false;
		var bSideFound = false;
		
		var i, vertex, type;
		for (i = 0; i < this.originalPolygon.VertexCount (); i++) {
			vertex = polygon.GetVertex (i);
			type = this.geometryInterface.getVertexSide (vertex);
			if (type == JSM.CutVertexType.Left) {
				aSideFound = true;
			} else if (type == JSM.CutVertexType.Right) {
				bSideFound = true;
			}
			this.originalPolygonVertexTypes.push (type);
		}
		
		if (aSideFound && bSideFound) {
			return null;
		}
		
		if (aSideFound) {
			return JSM.CutVertexType.Left;
		} else if (bSideFound) {
			return JSM.CutVertexType.Right;
		}
		
		return JSM.CutVertexType.Cut;
	};

	JSM.PolygonCutter.prototype.CalculateCutPolygonData = function ()
	{
		function IsIntersectionVertex (cutPolygonVertexTypes, originalType)
		{
			if (cutPolygonVertexTypes.length === 0) {
				return false;
			}
			var prevType = cutPolygonVertexTypes[cutPolygonVertexTypes.length - 1];
			if (prevType == JSM.CutVertexType.Cut || originalType == JSM.CutVertexType.Cut) {
				return false;
			}
			return prevType != originalType;
		}
		
		function AddCutVertexToPolygon (polygonCutter, vertex, type)
		{
			polygonCutter.cutPolygon.AddVertexCoord (vertex);
			polygonCutter.cutPolygonVertexTypes.push (type);
			if (type == JSM.CutVertexType.Cut) {
				polygonCutter.cutVertexIndices.push (polygonCutter.cutPolygonVertexTypes.length - 1);
			}
		}
		
		function AddIntersectionVertex (polygonCutter, originalIndex)
		{
			var prevIndex = polygonCutter.originalPolygon.GetPrevVertex (originalIndex);
			var prevVertex = polygonCutter.originalPolygon.GetVertex (prevIndex);
			var currVertex = polygonCutter.originalPolygon.GetVertex (originalIndex);
			var intersection = polygonCutter.geometryInterface.getIntersectionVertex (prevVertex, currVertex);
			if (intersection === null) {
				return false;
			}
			AddCutVertexToPolygon (polygonCutter, intersection, JSM.CutVertexType.Cut);
			return true;
		}
		
		function AddOriginalVertex (polygonCutter, originalIndex, originalType)
		{
			var vertex = polygonCutter.originalPolygon.GetVertex (originalIndex).Clone ();
			AddCutVertexToPolygon (polygonCutter, vertex, originalType);

			var vertexCount = polygonCutter.originalPolygon.VertexCount ();
			var prevType = polygonCutter.originalPolygonVertexTypes[JSM.PrevIndex (originalIndex, vertexCount)];
			var nextType = polygonCutter.originalPolygonVertexTypes[JSM.NextIndex (originalIndex, vertexCount)];
			if (originalType == JSM.CutVertexType.Cut && prevType == nextType) {
				AddCutVertexToPolygon (polygonCutter, vertex, originalType);
			}
			
			return true;
		}
		
		function SortCutVertices (cutPolygon, cutVertexIndices, cutPolygonVertexDistances)
		{
			if (cutVertexIndices.length < 2) {
				return false;
			}

			JSM.BubbleSort (cutVertexIndices,
				function (a, b) {
					var aDist = cutPolygonVertexDistances[a];
					var bDist = cutPolygonVertexDistances[b];
					return JSM.IsLower (aDist, bDist);
				},
				function (i, j) {
					JSM.SwapArrayValues (cutVertexIndices, i, j);
				}
			);
			
			return true;
		}	

		this.cutPolygon = this.geometryInterface.createPolygon ();
		this.cutPolygonVertexTypes = [];
		this.cutVertexIndices = [];
		
		var vertexCount = this.originalPolygon.VertexCount ();
		var i, lastVertex, originalIndex, originalType;
		for (i = 0; i <= vertexCount; i++) {
			lastVertex = (i === vertexCount);
			originalIndex = i;
			if (lastVertex) {
				originalIndex = 0;
			}
			
			originalType = this.originalPolygonVertexTypes[originalIndex];
			if (IsIntersectionVertex (this.cutPolygonVertexTypes, originalType)) {
				AddIntersectionVertex (this, originalIndex);
			}
			
			if (!lastVertex) {
				AddOriginalVertex (this, originalIndex, originalType);
			}
		}
		
		this.cutPolygonVertexDistances = this.geometryInterface.getVertexDistances (this.cutPolygon);
		if (!SortCutVertices (this.cutPolygon, this.cutVertexIndices, this.cutPolygonVertexDistances)) {
			return false;
		}
		
		return true;
	};

	JSM.PolygonCutter.prototype.CalculateEntryVertices = function ()
	{
		function GetEntryVertexType (cutPolygonVertexTypes, cutPolygonVertexDistances, currIndex)
		{
			var currSideType = cutPolygonVertexTypes[currIndex];
			if (currSideType != JSM.CutVertexType.Cut) {
				return 0;
			}
			
			var prevIndex = JSM.PrevIndex (currIndex, cutPolygonVertexTypes.length);
			var nextIndex = JSM.NextIndex (currIndex, cutPolygonVertexTypes.length);
			var prevSideType = cutPolygonVertexTypes[prevIndex];
			var nextSideType = cutPolygonVertexTypes[nextIndex];

			var currVertexDistance = cutPolygonVertexDistances[currIndex];
			var prevVertexDistance = cutPolygonVertexDistances[prevIndex];
			var nextVertexDistance = cutPolygonVertexDistances[nextIndex];
			
			if (prevSideType == JSM.CutVertexType.Right) {
				if (nextSideType == JSM.CutVertexType.Left) {
					return 1;
				} else if (nextSideType == JSM.CutVertexType.Cut) {
					if (JSM.IsLowerOrEqual (currVertexDistance, nextVertexDistance)) {
						return 1;
					}
				}
			} else if (prevSideType == JSM.CutVertexType.Left) {
				if (nextSideType == JSM.CutVertexType.Right) {
					return -1;
				} else if (nextSideType == JSM.CutVertexType.Cut) {
					if (JSM.IsGreaterOrEqual (currVertexDistance, nextVertexDistance)) {
						return -1;
					}
				}
			} else if (prevSideType == JSM.CutVertexType.Cut) {
				if (nextSideType == JSM.CutVertexType.Left) {
					if (JSM.IsLowerOrEqual (currVertexDistance, prevVertexDistance)) {
						return 1;
					}
				} else if (nextSideType == JSM.CutVertexType.Right) {
					if (JSM.IsGreaterOrEqual (currVertexDistance, prevVertexDistance)) {
						return -1;
					}
				}
			}
			
			return 0;
		}

		this.entryVertices = [];
		this.entryVertexTypes = [];
		var i, vertexIndex, vertexType;
		for (i = 0; i < this.cutVertexIndices.length; i++) {
			vertexIndex = this.cutVertexIndices[i];
			vertexType = GetEntryVertexType (this.cutPolygonVertexTypes, this.cutPolygonVertexDistances, vertexIndex);
			if (vertexType !== 0) {
				this.entryVertices.push (vertexIndex);
				this.entryVertexTypes.push (vertexType);
			}
		}
		
		if (this.entryVertices.length === 0 || this.entryVertices.length % 2 !== 0) {
			return false;
		}

		return true;
	};

	JSM.PolygonCutter.prototype.CalculateCuttedPolygons = function (aSidePolygons, bSidePolygons)
	{
		function AddOneSideCuttedPolygons (polygonCutter, aSidePolygons, bSidePolygons, reversed)
		{
			function AddEntryPairToArray (entryPairs, entryVertices, fromIndex, toIndex)
			{
				entryPairs[entryVertices[fromIndex]] = entryVertices[toIndex];
				entryPairs[entryVertices[toIndex]] = entryVertices[fromIndex];
			}

			function RemoveEntryPairFromArray (entryPairs, index)
			{
				entryPairs[entryPairs[index]] = -1;
				entryPairs[index] = -1;
			}

			function CreateEntryPairsArray (cutPolygon, entryVertices, entryVertexTypes)
			{
				function FindPairIndex (entryPairs, entryVertices, entryVertexTypes, startIndex)
				{
					var i;
					for (i = startIndex + 1; i < entryVertices.length; i++) {
						if (entryPairs[entryVertices[i]] != -1) {
							continue;
						}
						if (entryVertexTypes[startIndex] != entryVertexTypes[i]) {
							return i;
						}
					}
					return -1;
				}

				var entryPairs = [];
				var i;
				for (i = 0; i < cutPolygon.VertexCount (); i++) {
					entryPairs.push (-1);
				}

				var pairIndex;
				for (i = 0; i < entryVertices.length; i++) {
					if (entryPairs[entryVertices[i]] != -1) {
						continue;
					}
					pairIndex = FindPairIndex (entryPairs, entryVertices, entryVertexTypes, i);
					if (pairIndex == -1) {
						return null;
					}
					AddEntryPairToArray (entryPairs, entryVertices, i, pairIndex);
				}
				return entryPairs;
			}
			
			function GetNextVertex (currVertexIndex, cutPolygon, entryPairs)
			{
				if (entryPairs[currVertexIndex] != -1) {
					var nextVertex = entryPairs[currVertexIndex];
					RemoveEntryPairFromArray (entryPairs, currVertexIndex);
					return nextVertex;
				} else {
					return JSM.NextIndex (currVertexIndex, cutPolygon.VertexCount ());
				}				
			}

			function AddCutPolygon (polygonCutter, entryPairs, currEntryVertex, aSidePolygons, bSidePolygons)
			{
				function AddVertexIfNotDuplicated (polygon, vertex)
				{
					var vertexCount = polygon.VertexCount ();
					if (vertexCount > 0 && polygon.GetVertex (vertexCount - 1).IsEqual (vertex)) {
						return;
					}
					polygon.AddVertexCoord (vertex);
				}
				
				var startVertexIndex = polygonCutter.entryVertices[currEntryVertex];
				if (entryPairs[startVertexIndex] !== -1) {
					var currPolygon = polygonCutter.geometryInterface.createPolygon ();
					currPolygon.AddVertexCoord (polygonCutter.cutPolygon.GetVertex (startVertexIndex).Clone ());
					var currVertexIndex = GetNextVertex (startVertexIndex, polygonCutter.cutPolygon, entryPairs);
					var polygonSide = null;
					while (currVertexIndex != startVertexIndex) {
						if (polygonSide === null) {
							if (polygonCutter.cutPolygonVertexTypes[currVertexIndex] !== JSM.CutVertexType.Cut) {
								polygonSide = polygonCutter.cutPolygonVertexTypes[currVertexIndex];
							}
						}
						AddVertexIfNotDuplicated (currPolygon, polygonCutter.cutPolygon.GetVertex (currVertexIndex).Clone ());
						currVertexIndex = GetNextVertex (currVertexIndex, polygonCutter.cutPolygon, entryPairs);
					}
					if (currPolygon.VertexCount () > 2) {
						if (polygonSide == JSM.CutVertexType.Left) {
							aSidePolygons.push (currPolygon);
						} else if (polygonSide == JSM.CutVertexType.Right) {
							bSidePolygons.push (currPolygon);
						}
					}
				}				
				
			}
			
			var entryPairs = CreateEntryPairsArray (polygonCutter.cutPolygon, polygonCutter.entryVertices, polygonCutter.entryVertexTypes);
			if (entryPairs === null) {
				return false;
			}
			var currEntryVertex = reversed ? polygonCutter.entryVertices.length - 1 : 0;
			while (currEntryVertex >= 0 && currEntryVertex < polygonCutter.entryVertices.length) {
				AddCutPolygon (polygonCutter, entryPairs, currEntryVertex, aSidePolygons, bSidePolygons);
				currEntryVertex = reversed ? currEntryVertex - 1 : currEntryVertex + 1;
			}
			return true;
		}

		if (!AddOneSideCuttedPolygons (this, aSidePolygons, bSidePolygons, false)) {
			return false;
		}
		
		if (!AddOneSideCuttedPolygons (this, aSidePolygons, bSidePolygons, true)) {
			return false;
		}
		
		return true;
	};

	/**
	* Function: CutPolygon2DWithLine
	* Description:
	*	Cuts a polygon with a line. The result array contains cutted
	*	polygons grouped by their position to the line.
	* Parameters:
	*	polygon {Polygon2D} the polygon
	*	line {Line2D} the line
	*	leftPolygons {Polygon2D[*]} (out) polygons on the left of the line
	*	rightPolygons {Polygon2D[*]} (out) polygons on the right of the line
	*	cutPolygons {Polygon2D[*]} (out) polygons on the line
	* Returns:
	*	{boolean} success
	*/
	JSM.CutPolygon2DWithLine = function (polygon, line, leftPolygons, rightPolygons, cutPolygons)
	{
		var geometryInterface = {
			createPolygon : function () {
				return new JSM.Polygon2D ();
			},
			getVertexSide : function (vertex) {
				var position = line.CoordPosition (vertex);
				var type = JSM.CutVertexType.Cut;
				if (position == JSM.CoordLinePosition2D.CoordAtLineLeft) {
					type = JSM.CutVertexType.Left;
				} else if (position == JSM.CoordLinePosition2D.CoordAtLineRight) {
					type = JSM.CutVertexType.Right;
				}
				return type;
			},
			getIntersectionVertex : function (prevVertex, currVertex) {
				var edgeLine = new JSM.Line2D (currVertex, JSM.CoordSub2D (currVertex, prevVertex));
				var intersection = new JSM.Coord2D (0.0, 0.0);
				var lineLinePosition = line.LinePosition (edgeLine, intersection);
				if (lineLinePosition != JSM.LineLinePosition2D.LinesIntersectsOnePoint) {
					return null;
				}
				return intersection;
			},
			getVertexDistances : function (polygon) {
				var origo = new JSM.Coord2D (0.0, 0.0);
				var refLineStart = line.start.Clone ();
				var refLineDir = line.direction.Clone ().Rotate (-Math.PI / 2.0, origo);
				var refLine = new JSM.Line2D (refLineStart, refLineDir);
				var i, vertex;
				var distances = [];
				for (i = 0; i < polygon.VertexCount (); i++) {
					vertex = polygon.GetVertex (i);
					distances.push (refLine.CoordSignedDistance (vertex));
				}
				return distances;
			}
		};
		
		var cutter = new JSM.PolygonCutter (geometryInterface);
		return cutter.Cut (polygon, leftPolygons, rightPolygons, cutPolygons);
	};

	/**
	* Function: CutPolygonWithPlane
	* Description:
	*	Cuts a polygon with a plane. The result array contains cutted
	*	polygons grouped by their position to the plane.
	* Parameters:
	*	polygon {Polygon} the polygon
	*	plane {Plane} the plane
	*	frontPolygons {Polygon[*]} (out) polygons in front of the plane
	*	backPolygons {Polygon[*]} (out) polygons at the back of the plane
	*	cutPolygons {Polygon[*]} (out) polygons on the plane
	* Returns:
	*	{boolean} success
	*/
	JSM.CutPolygonWithPlane = function (polygon, plane, frontPolygons, backPolygons, cutPolygons)
	{
		var geometryInterface = {
			createPolygon : function () {
				return new JSM.Polygon ();
			},
			getVertexSide : function (vertex) {
				var position = plane.CoordPosition (vertex);
				var type = JSM.CutVertexType.Cut;
				if (position == JSM.CoordPlanePosition.CoordInFrontOfPlane) {
					type = JSM.CutVertexType.Left;
				} else if (position == JSM.CoordPlanePosition.CoordAtBackOfPlane) {
					type = JSM.CutVertexType.Right;
				}
				return type;
			},
			getIntersectionVertex : function (prevVertex, currVertex) {
				var line = new JSM.Line (currVertex, JSM.CoordSub (currVertex, prevVertex));
				var intersection = new JSM.Coord (0.0, 0.0, 0.0);
				var linePlanePosition = plane.LinePosition (line, intersection);
				if (linePlanePosition != JSM.LinePlanePosition.LineIntersectsPlane) {
					return null;
				}
				return intersection;
			},
			getVertexDistances : function (polygon) {
				var polygonNormal = polygon.GetNormal ();
				var planeNormal = new JSM.Vector (plane.a, plane.b, plane.c);
				var refPlaneNormal = JSM.VectorCross (planeNormal, polygonNormal);
				var refPlaneOrigin = polygon.GetVertex (0);
				var refPlane = JSM.GetPlaneFromCoordAndDirection (refPlaneOrigin, refPlaneNormal);
				var i, vertex;
				var distances = [];
				for (i = 0; i < polygon.VertexCount (); i++) {
					vertex = polygon.GetVertex (i);
					distances.push (refPlane.CoordSignedDistance (vertex));
				}
				return distances;
			}
		};
		
		var cutter = new JSM.PolygonCutter (geometryInterface);
		return cutter.Cut (polygon, frontPolygons, backPolygons, cutPolygons);
	};

	/**
	* Function: SegmentPolygon2D
	* Description: Segments up a polygon along x and y axis.
	* Parameters:
	*	polygon {Polygon2D} the polygon
	*	xSegments {integer} x segment number
	*	ySegments {integer} y segment number
	* Returns:
	*	{Polygon[*]} result polygons
	*/
	JSM.SegmentPolygon2D = function (polygon, xSegments, ySegments)
	{
		function CutPolygonsOneDirection (inputPolygons, resultPolygons, segmentCount, segmentSize, startCoordinate, segmentDir, cutDir)
		{
			function CutPolygon (polygon, line, leftPolygons, rightPolygons)
			{
				var left = [];
				var right = [];
				var cut = [];
				if (!JSM.CutPolygon2DWithLine (polygon, line, left, right, cut)) {
					return;
				}
				var i;
				for (i = 0; i < left.length; i++) {
					leftPolygons.push (left[i]);
				}
				for (i = 0; i < right.length; i++) {
					rightPolygons.push (right[i]);
				}
			}

			var polygonsToProcess = inputPolygons;
			var startCoord = startCoordinate.Clone ();
			var i, j, line, newPolygonsToProcess;
			for (i = 1; i < segmentCount; i++) {
				startCoord.Offset (segmentDir, segmentSize);
				line = new JSM.Line2D (startCoord, cutDir);
				newPolygonsToProcess = [];
				for (j = 0; j < polygonsToProcess.length; j++) {
					CutPolygon (polygonsToProcess[j], line, resultPolygons, newPolygonsToProcess);
				}
				polygonsToProcess = newPolygonsToProcess;
			}
			for (j = 0; j < polygonsToProcess.length; j++) {
				resultPolygons.push (polygonsToProcess[j]);
			}
		}

		var boundingBox = polygon.GetBoundingBox ();
		var xSize = boundingBox.max.x - boundingBox.min.x;
		var ySize = boundingBox.max.y - boundingBox.min.y;
		var xSegmentSize = xSize / xSegments;
		var ySegmentSize = ySize / ySegments;

		var originalPolygons = [polygon];
		var bottomLeft = new JSM.Coord2D (boundingBox.min.x, boundingBox.min.y);
		var topLeft = new JSM.Coord2D (boundingBox.min.x, boundingBox.max.y);

		var xCuttedPolygons = [];
		var yCuttedPolygons = [];
		CutPolygonsOneDirection (originalPolygons, xCuttedPolygons, xSegments, xSegmentSize, bottomLeft, new JSM.Vector2D (1.0, 0.0), new JSM.Vector2D (0.0, 1.0));
		CutPolygonsOneDirection (xCuttedPolygons, yCuttedPolygons, ySegments, ySegmentSize, topLeft, new JSM.Vector2D (0.0, -1.0), new JSM.Vector2D (1.0, 0.0));
		return yCuttedPolygons;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/triangulation',["../core/jsm"],function(JSM){
	JSM.ConvertContourPolygonToPolygon2D = function (inputPolygon, vertexMap)
	{
		function AddResultVertex (resultPolygon, vertex, vertexMap, originalContour, originalVertex)
		{
			resultPolygon.AddVertexCoord (vertex);
			if (vertexMap !== undefined && vertexMap !== null) {
				vertexMap.push ([originalContour, originalVertex]);
			}
		}
		
		function AddContour (inputPolygon, resultPolygon, holeIndex, vertexMap, conversionData)
		{
			function GetEntryPoint (inputPolygon, resultPolygon, holeIndex, conversionData)
			{
				function IsEntryPoint (inputPolygon, resultPolygon, resultVertex, holeVertex, conversionData)
				{
					function SegmentIntersectsPolygon (polygon, segmentBeg, segmentEnd)
					{
						var sector = new JSM.Sector2D (segmentBeg, segmentEnd);
						var position = polygon.SectorPosition (sector, -1, -1);
						if (position == JSM.SectorPolygonPosition2D.IntersectionOnePoint || position == JSM.SectorPolygonPosition2D.IntersectionCoincident) {
							return true;
						}
						return false;
					}

					if (SegmentIntersectsPolygon (resultPolygon, resultVertex, holeVertex)) {
						return false;
					}
					
					var i, hole;
					for (i = 1; i < inputPolygon.ContourCount (); i++) {
						if (conversionData.addedHoles[i] !== undefined) {
							continue;
						}
						hole = inputPolygon.GetContour (i);
						if (SegmentIntersectsPolygon (hole, resultVertex, holeVertex)) {
							return false;
						}
					}
					
					return true;
				}
				
				function IsExistingEntryPosition (coord, conversionData)
				{
					var i;
					for (i = 0; i < conversionData.entryPositions.length; i++) {
						if (coord.IsEqual (conversionData.entryPositions[i])) {
							return true;
						}
					}
					return false;
				}

				var holePolygon = inputPolygon.GetContour (holeIndex);
				var resultVertexIndex, holeVertexIndex, resultVertex, holeVertex;
				for (resultVertexIndex = 0; resultVertexIndex < resultPolygon.VertexCount (); resultVertexIndex++) {
					for (holeVertexIndex = 0; holeVertexIndex < holePolygon.VertexCount (); holeVertexIndex++) {
						resultVertex = resultPolygon.GetVertex (resultVertexIndex);
						holeVertex = holePolygon.GetVertex (holeVertexIndex);
						if (IsEntryPoint (inputPolygon, resultPolygon, resultVertex, holeVertex, conversionData)) {
							if (IsExistingEntryPosition (resultVertex, conversionData) || IsExistingEntryPosition (holeVertex, conversionData)) {
								continue;
							}
							conversionData.entryPositions.push (resultVertex.Clone ());
							conversionData.entryPositions.push (holeVertex.Clone ());
							return {
								beg : resultVertexIndex,
								end : holeVertexIndex
							};
						}
					}
				}
				return null;
			}
			
			function AddHole (resultPolygon, inputPolygon, holeIndex, entryPoint, vertexMap)
			{
				var holePolygon = inputPolygon.GetContour (holeIndex);
				var mainContourBeg = entryPoint.beg;
				var mainEntryVertex = resultPolygon.GetVertex (mainContourBeg).Clone ();
				resultPolygon.ShiftVertices (mainContourBeg + 1);

				var mainEntryContourIndex = 0;
				var mainEntryVertexIndex = 0;
				if (vertexMap !== undefined && vertexMap !== null) {
					mainEntryContourIndex = vertexMap[mainContourBeg][0];
					mainEntryVertexIndex = vertexMap[mainContourBeg][1];
					JSM.ShiftArray (vertexMap, mainContourBeg + 1);
				}

				var contourBeg = entryPoint.end;
				var contourEnd = holePolygon.GetPrevVertex (contourBeg);
				holePolygon.EnumerateVertices (contourBeg, contourEnd, function (index) {
					AddResultVertex (resultPolygon, holePolygon.GetVertex (index).Clone (), vertexMap, holeIndex, index);
				});
				AddResultVertex (resultPolygon, holePolygon.GetVertex (contourBeg).Clone (), vertexMap, holeIndex, contourBeg);
				AddResultVertex (resultPolygon, mainEntryVertex, vertexMap, mainEntryContourIndex, mainEntryVertexIndex);
			}
			
			var entryPoint = GetEntryPoint (inputPolygon, resultPolygon, holeIndex, conversionData);
			if (entryPoint === null) {
				return false;
			}

			AddHole (resultPolygon, inputPolygon, holeIndex, entryPoint, vertexMap);
			return true;
		}
		
		var contourCount = inputPolygon.ContourCount ();
		var mainContour = inputPolygon.GetContour (0);
		var resultPolygon = new JSM.Polygon2D ();
		var i, vertex;
		for (i = 0; i < mainContour.VertexCount (); i++) {
			vertex = mainContour.GetVertex (i);
			AddResultVertex (resultPolygon, vertex.Clone (), vertexMap, 0, i);
		}
		if (contourCount == 1) {
			return resultPolygon;
		}
		
		var holeQueue = [];
		var holeIndex;
		for (holeIndex = 1; holeIndex < contourCount; holeIndex++) {
			holeQueue.push (holeIndex);
		}
		
		var conversionData = {
			addedHoles : {},
			holeTryouts : {},
			entryPositions : []
		};
		
		while (holeQueue.length > 0) {
			holeIndex = holeQueue.shift ();
			if (AddContour (inputPolygon, resultPolygon, holeIndex, vertexMap, conversionData)) {
				conversionData.addedHoles[holeIndex] = true;
			} else {
				if (conversionData.holeTryouts[holeIndex] === undefined) {
					conversionData.holeTryouts[holeIndex] = 0;
				}
				conversionData.holeTryouts[holeIndex] += 1;
				if (conversionData.holeTryouts[holeIndex] > 10) {
					return null;
				}
				holeQueue.push (holeIndex);
			}
		}
		
		return resultPolygon;
	};

	JSM.TriangulateConvexPolygon = function (polygon)
	{
		var result = [];
		var i;
		for (i = 1; i < polygon.VertexCount () - 1; i++) {
			result.push ([0, i, i + 1]);
		}
		return result;
	};

	JSM.TriangulateConcavePolygon2D = function (inputPolygon)
	{
		function GetInitialVertexMap (count)
		{
			var result = [];
			var i;
			for (i = 0; i < count; i++) {
				result[i] = i;
			}
			return result;
		}
		
		function FindSplitDiagonal (polygon)
		{
			var count = polygon.VertexCount ();
			var i, j;
			for (i = 0; i < count; i++) {
				for (j = 0; j < count; j++) {
					if (i == j) {
						continue;
					}
					if (polygon.IsDiagonal (i, j)) {
						return {
							beg : i,
							end : j
						};
					}
				}
			}
			return null;
		}

		function SplitPolygon (polygonData, diagonal)
		{
			function AddVertex (polygonData, resultData, index)
			{
				resultData.polygon.AddVertexCoord (polygonData.polygon.GetVertex (index));
				resultData.map.push (polygonData.map[index]);
			}
			
			var resultData1 = {
				polygon : new JSM.Polygon2D (),
				map : []
			};
			var resultData2 = {
				polygon : new JSM.Polygon2D (),
				map : []
			};

			var beg, end;
			
			beg = diagonal.beg;
			end = polygonData.polygon.GetPrevVertex (diagonal.end);
			AddVertex (polygonData, resultData1, diagonal.end);
			polygonData.polygon.EnumerateVertices (beg, end, function (index) {
				AddVertex (polygonData, resultData1, index);
			});

			beg = diagonal.end;
			end = polygonData.polygon.GetPrevVertex (diagonal.beg);
			AddVertex (polygonData, resultData2, diagonal.beg);
			polygonData.polygon.EnumerateVertices (beg, end, function (index) {
				AddVertex (polygonData, resultData2, index);
			});
			
			return {
				resultData1 : resultData1,
				resultData2 : resultData2
			};
		}
		
		var polygonStack = [];
		var count = inputPolygon.VertexCount ();
		var inputMap = GetInitialVertexMap (count);
		polygonStack.push ({
			polygon : inputPolygon,
			map : inputMap
		});
		
		var result = [];
		var polygonData, vertexCount, diagonal, resultData;
		while (polygonStack.length > 0) {
			polygonData = polygonStack.pop ();
			vertexCount = polygonData.polygon.VertexCount ();
			if (vertexCount < 3) {
				continue;
			}
			if (vertexCount == 3) {
				result.push (polygonData.map);
				continue;
			}
			diagonal = FindSplitDiagonal (polygonData.polygon);
			if (diagonal === null) {
				return null;
			}
			resultData = SplitPolygon (polygonData, diagonal);
			polygonStack.push (resultData.resultData1);
			polygonStack.push (resultData.resultData2);
		}
		return result;
	};

	JSM.TriangulatePolygon2D = function (polygon)
	{
		if (polygon === null) {
			return null;
		}
		
		var vertexCount = polygon.VertexCount ();
		if (vertexCount < 3) {
			return null;
		}
		
		if (vertexCount == 3) {
			return [[0, 1, 2]];
		}
		
		var complexity = polygon.GetComplexity ();
		if (complexity === JSM.Complexity.Invalid) {
			return null;
		}
		
		if (complexity == JSM.Complexity.Convex) {
			return JSM.TriangulateConvexPolygon (polygon);
		}
		
		return JSM.TriangulateConcavePolygon2D (polygon);
	};

	/**
	* Function: TriangulatePolygon
	* Description:
	*	Triangulates a polygon. The result defines triangles as an
	*	array of arrays with three original vertex indices.
	* Parameters:
	*	polygon {Polygon} the polygon
	* Returns:
	*	{integer[3][*]} the result
	*/
	JSM.TriangulatePolygon = function (polygon)
	{
		var polygon2D = polygon.ToPolygon2D ();
		return JSM.TriangulatePolygon2D (polygon2D);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/octree',["../core/jsm"],function(JSM){
	/**
	* Function: TraverseOctreeNodes
	* Description:
	*	Traverses the nodes of the tree, and calls the given callback when a node found. The return value
	*	of the callback determines if we need to continue traverse along that given node.
	* Parameters:
	*	octree {Octree} the octree
	*	nodeFound {function} the callback
	*/
	JSM.TraverseOctreeNodes = function (octree, nodeFound)
	{
		function TraverseNode (node, nodeFound)
		{
			if (!nodeFound (node)) {
				return;
			}
			
			if (node.children === null) {
				return;
			}
			
			var i, child;
			for (i = 0; i < node.children.length; i++) {
				child = node.children[i];
				TraverseNode (child, nodeFound);
			}
		}

		TraverseNode (octree.root, nodeFound);
	};

	/**
	* Function: CreateOctreeChildNodes
	* Description:
	*	Create child nodes for an octree node. It calls a callback function
	*	which should create a new node element for the octree.
	* Parameters:
	*	originalBox {Box} the box of the original node
	*	createNodeCallback {function} the callback function
	* Returns:
	*	{object[*]} the result
	*/
	JSM.CreateOctreeChildNodes = function (originalBox, createNodeCallback)
	{
		function CreateNode (originalBox, createNodeCallback, dirX, dirY, dirZ)
		{
			var size = originalBox.GetSize ().Clone ();
			size.MultiplyScalar (0.5);
			var min = new JSM.Coord (
				originalBox.min.x + dirX * size.x,
				originalBox.min.y + dirY * size.y,
				originalBox.min.z + dirZ * size.z
			);
			var max = JSM.CoordAdd (min, size);
			var box = new JSM.Box (min, max);
			return createNodeCallback (box);
		}

		var size = originalBox.GetSize ();
		if (JSM.IsZero (size.x) && JSM.IsZero (size.y) && JSM.IsZero (size.z)) {
			return null;
		}
		
		var result = [
			CreateNode (originalBox, createNodeCallback, 0.0, 0.0, 0.0),
			CreateNode (originalBox, createNodeCallback, 1.0, 0.0, 0.0),
			CreateNode (originalBox, createNodeCallback, 1.0, 1.0, 0.0),
			CreateNode (originalBox, createNodeCallback, 0.0, 1.0, 0.0),
			CreateNode (originalBox, createNodeCallback, 0.0, 0.0, 1.0),
			CreateNode (originalBox, createNodeCallback, 1.0, 0.0, 1.0),
			CreateNode (originalBox, createNodeCallback, 1.0, 1.0, 1.0),
			CreateNode (originalBox, createNodeCallback, 0.0, 1.0, 1.0),
		];
		return result;
	};

	/**
	* Class: Octree
	* Description: Defines an octree. The octree contains each coordinate only once.
	* Parameters:
	*	box {Box} bounding box
	*	maxCoordNumInNodes {integer} maximum number of coordinates in a node
	*/
	JSM.Octree = function (box, maxCoordNumInNodes)
	{
		this.coords = [];
		this.root = this.CreateNewNode (null, box);
		this.maxCoordNumInNodes = maxCoordNumInNodes;
		if (this.maxCoordNumInNodes === undefined || this.maxCoordNumInNodes === null || this.maxCoordNumInNodes === 0) {
			this.maxCoordNumInNodes = 50;
		}
	};

	/**
	* Function: Octree.AddCoord
	* Description:
	*	Adds a coordinate to the octree. The return value is the stored index of the coordinate.
	*	If the coordinate was already in the octree, it returns the existing index.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{integer} the stored index of the coordinate
	*/
	JSM.Octree.prototype.AddCoord = function (coord)
	{
		return this.AddCoordToNode (coord, this.root);
	};

	/**
	* Function: Octree.FindCoord
	* Description:
	*	Finds a coordinate in the octree, and returns the stored index of it.
	*	The return value is -1 if the coordinate does not exist.
	* Parameters:
	*	coord {Coord} the coordinate
	* Returns:
	*	{integer} the stored index of the coordinate
	*/
	JSM.Octree.prototype.FindCoord = function (coord)
	{
		var node = this.FindNodeForCoord (coord, this.root);
		if (node === null) {
			return -1;
		}
		return this.FindCoordInNode (coord, node);
	};

	/**
	* Function: Octree.FindCoordInNode
	* Description: Finds a coordinate in a node.
	* Parameters:
	*	coord {Coord} the coordinate
	*	node {object} the node
	* Returns:
	*	{integer} the stored index of the coordinate
	*/
	JSM.Octree.prototype.FindCoordInNode = function (coord, node)
	{
		var i, current;
		for (i = 0; i < node.coords.length; i++) {
			current = node.coords[i];
			if (coord.IsEqual (this.coords[current])) {
				return current;
			}
		}
		return -1;
	};

	/**
	* Function: Octree.AddCoordToNode
	* Description: Adds a coordinate to a node.
	* Parameters:
	*	coord {Coord} the coordinate
	*	root {object} the root node
	* Returns:
	*	{integer} the stored index of the coordinate
	*/
	JSM.Octree.prototype.AddCoordToNode = function (coord, root)
	{
		var node = this.FindNodeForCoord (coord, root);
		if (node === null) {
			return -1;
		}
		
		var found = this.FindCoordInNode (coord, node);
		if (found != -1) {	
			return found;
		}
		
		if (node.coords.length >= this.maxCoordNumInNodes) {
			if (this.SplitNode (node)) {
				return this.AddCoordToNode (coord, node);
			}
		}
		
		var index = this.coords.length;
		this.coords.push (coord);
		node.coords.push (index);
		return index;
	};

	/**
	* Function: Octree.FindNodeForCoord
	* Description: Finds a node for a coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*	node {object} the starting node
	* Returns:
	*	{object} the found node
	*/
	JSM.Octree.prototype.FindNodeForCoord = function (coord, node)
	{
		if (node.children === null) {
			return node;
		}
		
		var center = node.box.GetCenter ();
		var xGreater = coord.x > center.x;
		var yGreater = coord.y > center.y;
		var zGreater = coord.z > center.z;
		
		if (!xGreater && !yGreater && !zGreater) {
			return this.FindNodeForCoord (coord, node.children[0]);
		} else if (xGreater && !yGreater && !zGreater) {
			return this.FindNodeForCoord (coord, node.children[1]);
		} else if (xGreater && yGreater && !zGreater) {
			return this.FindNodeForCoord (coord, node.children[2]);
		} else if (!xGreater && yGreater && !zGreater) {
			return this.FindNodeForCoord (coord, node.children[3]);
		} else if (!xGreater && !yGreater && zGreater) {
			return this.FindNodeForCoord (coord, node.children[4]);
		} else if (xGreater && !yGreater && zGreater) {
			return this.FindNodeForCoord (coord, node.children[5]);
		} else if (xGreater && yGreater && zGreater) {
			return this.FindNodeForCoord (coord, node.children[6]);
		} else if (!xGreater && yGreater && zGreater) {
			return this.FindNodeForCoord (coord, node.children[7]);
		}
		
		return null;
	};

	/**
	* Function: Octree.SplitNode
	* Description: Splits a node to subnodes.
	* Parameters:
	*	node {object} the node
	* Returns:
	*	{boolean} success
	*/
	JSM.Octree.prototype.SplitNode = function (node)
	{
		var myThis = this;
		var children = JSM.CreateOctreeChildNodes (node.box, function (nodeBox) {
			return myThis.CreateNewNode (node, nodeBox);
		});
		
		if (children === null) {
			return false;
		}
		
		node.children = children;
		var nodeCoords = node.coords;
		node.coords = [];
		
		var i, newNode;
		for (i = 0; i < nodeCoords.length; i++) {
			newNode = this.FindNodeForCoord (this.coords[nodeCoords[i]], node);
			newNode.coords.push (nodeCoords[i]);
		}
		
		return true;
	};

	/**
	* Function: Octree.CreateNewNode
	* Description: Creates a new node.
	* Parameters:
	*	parent {object} the parent node
	*	box {Box} the box of the node
	* Returns:
	*	{object} the result
	*/
	JSM.Octree.prototype.CreateNewNode = function (parent, box)
	{
		var newNode = {
			parent : parent,
			box : box,
			coords : [],
			children : null
		};
		return newNode;	
	};

	/**
	* Class: TriangleOctree
	* Description:
	*	Defines an octree which stores triangles. Every triangle is placed in
	*	the smallest possible node which contains all of its vertices.
	* Parameters:
	*	box {Box} bounding box
	*/
	JSM.TriangleOctree = function (box)
	{
		this.root = this.CreateNewNode (null, box);
	};

	/**
	* Function: TriangleOctree.AddTriangle
	* Description: Adds a triangle to the octree.
	* Parameters:
	*	v0, v1, v2 {Coord} the vertices of the triangle
	*	userData {anything} user data for the triangle
	*/
	JSM.TriangleOctree.prototype.AddTriangle = function (v0, v1, v2, userData)
	{
		return this.AddTriangleToNode (v0, v1, v2, this.root, userData);
	};

	/**
	* Function: TriangleOctree.AddTriangleToNode
	* Description: Adds a coordinate to a node.
	* Parameters:
	*	v0, v1, v2 {Coord} the vertices of the triangle
	*	root {object} the root node
	* Returns:
	*	{boolean} success
	*/
	JSM.TriangleOctree.prototype.AddTriangleToNode = function (v0, v1, v2, root, userData)
	{
		function IsTriangleInNode (v0, v1, v2, node)
		{
			return node.box.IsCoordInside (v0) && node.box.IsCoordInside (v1) && node.box.IsCoordInside (v2);
		}
		
		if (!IsTriangleInNode (v0, v1, v2, root)) {
			return false;
		}
		
		if (root.children === null) {
			var myThis = this;
			root.children = JSM.CreateOctreeChildNodes (root.box, function (nodeBox) {
				return myThis.CreateNewNode (root, nodeBox);
			});
		}
		
		if (root.children !== null) {
			var i, node;
			for (i = 0; i < root.children.length; i++) {
				node = root.children[i];
				if (this.AddTriangleToNode (v0, v1, v2, node, userData)) {
					return true;
				}
			}
		}
		
		root.triangles.push ({
			v0 : v0,
			v1 : v1,
			v2 : v2,
			userData : userData
		});
		return true;
	};

	/**
	* Function: TriangleOctree.CreateNewNode
	* Description: Creates a new node.
	* Parameters:
	*	parent {object} the parent node
	*	box {Box} the box of the node
	* Returns:
	*	{object} the result
	*/
	JSM.TriangleOctree.prototype.CreateNewNode = function (parent, box)
	{
		var newNode = {
			parent : parent,
			box : box,
			triangles : [],
			children : null
		};
		return newNode;	
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/bsptree',["../core/jsm"],function(JSM){
	/**
	* Class: BSPTree
	* Description: Defines a BSP tree.
	*/
	JSM.BSPTree = function ()
	{
		this.root = null;
	};

	/**
	* Function: BSPTree.AddPolygon
	* Description: Adds a polygon to the tree.
	* Parameters:
	*	polygon {Polygon} the polygon
	*	userData {anything} user data for polygon
	* Returns:
	*	{boolean} success
	*/
	JSM.BSPTree.prototype.AddPolygon = function (polygon, userData)
	{
		if (this.root === null) {
			this.root = this.CreateNewNode ();
		}
		
		return this.AddPolygonToNode (this.root, polygon, userData);
	};

	/**
	* Function: BSPTree.Traverse
	* Description: Traverses the tree and calls a function on node found.
	* Parameters:
	*	nodeFound {function} the callback function
	*/
	JSM.BSPTree.prototype.Traverse = function (nodeFound)
	{
		this.TraverseNode (this.root, nodeFound);
	};

	/**
	* Function: BSPTree.TraverseNode
	* Description: Traverses a node and its children and calls a function on node found.
	* Parameters:
	*	node {object} the node
	*	nodeFound {function} the callback function
	*/
	JSM.BSPTree.prototype.TraverseNode = function (node, nodeFound)
	{
		if (node !== null) {
			nodeFound (node);
			this.TraverseNode (node.inside, nodeFound);
			this.TraverseNode (node.outside, nodeFound);
		}
	};

	/**
	* Function: BSPTree.GetNodes
	* Description: Returns the nodes as an array.
	* Returns:
	*	{object[*]} the result
	*/
	JSM.BSPTree.prototype.GetNodes = function ()
	{
		var result = [];
		this.Traverse (function (node) {
			result.push (node);
		});
		return result;
	};

	/**
	* Function: BSPTree.GetNodes
	* Description: Count nodes.
	* Returns:
	*	{integer} the result
	*/
	JSM.BSPTree.prototype.NodeCount = function ()
	{
		var count = 0;
		this.Traverse (function () {
			count = count + 1;
		});
		return count;
	};

	/**
	* Function: BSPTree.AddPolygonToNode
	* Description: Adds a polygon to a node.
	* Parameters:
	*	node {object} the node
	*	polygon {Polygon} the polygon
	*	userData {anything} user data for polygon
	* Returns:
	*	{boolean} success
	*/
	JSM.BSPTree.prototype.AddPolygonToNode = function (node, polygon, userData)
	{
		if (polygon.VertexCount () < 3) {
			return false;
		}
		
		var normal;
		if (node.polygon === null) {
			normal = polygon.GetNormal ();
			var plane = JSM.GetPlaneFromCoordAndDirection (polygon.GetVertex (0), normal);
			node.polygon = polygon;
			if (userData !== undefined) {
				node.userData = userData;
			}
			node.plane = plane;
		} else {
			var backPolygons = [];
			var frontPolygons = [];
			var planePolygons = [];
			var cutSucceeded = JSM.CutPolygonWithPlane (polygon, node.plane, frontPolygons, backPolygons, planePolygons);
			if (cutSucceeded) {
				if (backPolygons.length > 0) {
					this.AddInsidePolygonsToNode (node, backPolygons, userData);
				}
				if (frontPolygons.length > 0) {
					this.AddOutsidePolygonsToNode (node, frontPolygons, userData);
				}
				if (planePolygons.length > 0) {
					normal = polygon.GetNormal ();
					if (JSM.VectorDot (normal, node.plane.GetNormal ()) > 0) {
						this.AddInsidePolygonsToNode (node, planePolygons, userData);
					} else {
						this.AddOutsidePolygonsToNode (node, planePolygons, userData);
					}
				}
			}
		}
		
		return true;
	};

	/**
	* Function: BSPTree.AddInsidePolygonsToNode
	* Description: Adds inside polygons to a node.
	* Parameters:
	*	node {object} the node
	*	polygon {Polygon[*]} the polygons
	*	userData {anything} user data for polygons
	*/
	JSM.BSPTree.prototype.AddInsidePolygonsToNode = function (node, polygons, userData)
	{
		if (node.inside === null) {
			node.inside = this.CreateNewNode ();
			node.inside.parent = node;
		}
		var i;
		for (i = 0; i < polygons.length; i++) {
			this.AddPolygonToNode (node.inside, polygons[i], userData);
		}
	};

	/**
	* Function: BSPTree.AddOutsidePolygonsToNode
	* Description: Adds outside polygons to a node.
	* Parameters:
	*	node {object} the node
	*	polygon {Polygon[*]} the polygons
	*	userData {anything} user data for polygons
	*/
	JSM.BSPTree.prototype.AddOutsidePolygonsToNode = function (node, polygons, userData)
	{
		if (node.outside === null) {
			node.outside = this.CreateNewNode ();
			node.outside.parent = node;
		}
		var i;
		for (i = 0; i < polygons.length; i++) {
			this.AddPolygonToNode (node.outside, polygons[i], userData);
		}
	};

	/**
	* Function: BSPTree.CreateNewNode
	* Description: Creates a new node.
	* Returns:
	*	{object} the result
	*/
	JSM.BSPTree.prototype.CreateNewNode = function ()
	{
		var node = {
			polygon : null,
			userData : null,
			plane : null,
			parent : null,
			inside : null,
			outside : null
		};
		return node;
	};

	/**
	* Function: ClipPolygonWithBSPTree
	* Description: Clips a polygon with a created BSP tree.
	* Parameters:
	*	polygon {Polygon} the polygon
	*	bspTree {BSPTree} the BSP tree
	*	frontPolygons {Polygon[*]} (out) polygons in front of the tree
	*	backPolygons {Polygon[*]} (out) polygons at the back of the tree
	*	planarFrontPolygons {Polygon[*]} (out) polygons on the tree looks front
	*	planarBackPolygons {Polygon[*]} (out) polygons on the tree looks back
	* Returns:
	*	{boolean} success
	*/
	JSM.ClipPolygonWithBSPTree = function (polygon, bspTree, frontPolygons, backPolygons, planarFrontPolygons, planarBackPolygons)
	{
		function CutPolygonWithNode (polygon, node, isPlanar)
		{
			if (node === null) {
				return;
			}
			
			var cutBackPolygons = [];
			var cutFrontPolygons = [];
			var cutPlanarPolygons = [];
			var cutSucceeded = JSM.CutPolygonWithPlane (polygon, node.plane, cutFrontPolygons, cutBackPolygons, cutPlanarPolygons);
			if (!cutSucceeded) {
				return;
			}

			if (cutBackPolygons.length > 0) {
				AddInsidePolygons (node, cutBackPolygons, isPlanar);
			}
			if (cutFrontPolygons.length > 0) {
				AddOutsidePolygons (node, cutFrontPolygons, isPlanar);
			}
			if (cutPlanarPolygons.length > 0) {
				var normal = polygon.GetNormal ();
				if (JSM.VectorDot (normal, node.plane.GetNormal ()) > 0) {
					AddInsidePolygons (node, cutPlanarPolygons, true);
				} else {
					AddOutsidePolygons (node, cutPlanarPolygons, true);
				}
			}
		}

		function CutPolygonsWithNode (polygons, node, isPlanar)
		{
			var i;
			for (i = 0; i < polygons.length; i++) {
				CutPolygonWithNode (polygons[i], node, isPlanar);
			}
		}

		function AddPolygonsToArray (polygons, polygonArray)
		{
			var i;
			for (i = 0; i < polygons.length; i++) {
				polygonArray.push (polygons[i]);
			}
		}

		function AddInsidePolygons (node, polygons, isPlanar)
		{
			if (node.inside !== null) {
				CutPolygonsWithNode (polygons, node.inside, isPlanar);
			} else {
				AddPolygonsToArray (polygons, isPlanar ? planarBackPolygons : backPolygons);
			}
		}
		
		function AddOutsidePolygons (node, polygons, isPlanar)
		{
			if (node.outside !== null) {
				CutPolygonsWithNode (polygons, node.outside, isPlanar);
			} else {
				AddPolygonsToArray (polygons, isPlanar ? planarFrontPolygons : frontPolygons);
			}
		}

		CutPolygonWithNode (polygon, bspTree.root, false);
		return true;
	};

	/**
	* Function: TraverseBSPTreeForEyePosition
	* Description: Traverses a BSP tree for a given eye position.
	* Parameters:
	*	bspTree {BSPTree} the BSP tree
	*	eyePosition {Coord} the eye position
	*	nodeFound {function} the callback function
	*/
	JSM.TraverseBSPTreeForEyePosition = function (bspTree, eyePosition, nodeFound)
	{
		function TraverseNode (node)
		{
			if (node !== null) {
				var coordPlanePosition = node.plane.CoordPosition (eyePosition);
				if (coordPlanePosition == JSM.CoordPlanePosition.CoordInFrontOfPlane) {
					TraverseNode (node.inside);
					nodeFound (node);
					TraverseNode (node.outside);
				} else if (coordPlanePosition == JSM.CoordPlanePosition.CoordAtBackOfPlane) {
					TraverseNode (node.outside);
					nodeFound (node);
					TraverseNode (node.inside);
				} else {
					TraverseNode (node.outside);
					TraverseNode (node.inside);
				}
			}
		}
		
		TraverseNode (bspTree.root);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/curves',["../core/jsm"],function(JSM){
	/**
	* Function: GenerateCubicBezierCurve
	* Description: Generates a bezier curve from the given points.
	* Parameters:
	*	p0 {Coord2D} point 1
	*	p1 {Coord2D} point 2
	*	p2 {Coord2D} point 3
	*	p3 {Coord2D} point 4
	*	segmentation {integer} the segmentation of the result curve
	* Returns:
	*	{Coord2D[]} the result
	*/
	JSM.GenerateCubicBezierCurve = function (p0, p1, p2, p3, segmentation)
	{
		function GetCubicBezierPoint (p0, p1, p2, p3, t)
		{
			var t2 = t * t;
			var t3 = t2 * t;
			var invT = 1.0 - t;
			var invT2 = invT * invT;
			var invT3 = invT2 * invT;
			var x = invT3 * p0.x + 3.0 * invT2 * t * p1.x  + 3.0 * invT * t2 * p2.x + t3 * p3.x;
			var y = invT3 * p0.y + 3.0 * invT2 * t * p1.y  + 3.0 * invT * t2 * p2.y + t3 * p3.y;
			return new JSM.Coord2D (x, y);
		}
		
		var result = [];
		var s = 1.0 / segmentation;
		var i, coord;
		for (i = 0; i <= segmentation; i++) {
			coord = GetCubicBezierPoint (p0, p1, p2, p3, i * s);
			result.push (coord);
		}
		return result;
	};

	/**
	* Function: BernsteinPolynomial
	* Description: Calculates the value of the Bernstein polynomial.
	* Parameters:
	*	k {integer} the start index
	*	n {integer} the end index
	*	x {number} the value
	* Returns:
	*	{number} the result
	*/
	JSM.BernsteinPolynomial = function (k, n, x)
	{
		function BinomialCoefficient (n, k)
		{
			var result = 1.0;
			var min = JSM.Minimum (k, n - k);
			var i;
			for (i = 0; i < min; i++) {
				result = result * (n - i);
				result = result / (i + 1);
			}
			return result;
		}

		var coefficient = BinomialCoefficient (n, k);
		return coefficient * Math.pow (x, k) * Math.pow (1.0 - x, n - k);
	};

	/**
	* Function: GenerateBezierCurve
	* Description: Generates a bezier curve from the given points.
	* Parameters:
	*	points {Coord2D[]} the points
	*	segmentation {integer} the segmentation of the result curve
	* Returns:
	*	{Coord2D[]} the result
	*/
	JSM.GenerateBezierCurve = function (points, segmentation)
	{
		var result = [];
		var n = points.length - 1;
		var s = 1.0 / segmentation;
		
		var i, j, t, point, bernstein, coord;
		for (i = 0; i <= segmentation; i++) {
			t = i * s;
			coord = new JSM.Coord2D (0.0, 0.0);
			for (j = 0; j <= n; j++) {
				point = points[j];
				bernstein = JSM.BernsteinPolynomial (j, n, t);
				coord.x += point.x * bernstein;
				coord.y += point.y * bernstein;
			}
			result.push (coord);
		}
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/utilities',["../core/jsm"],function(JSM){
	/**
	* Function: GetGaussianCParameter
	* Description:
	*	Calculates the gaussian functions c parameter which can be used
	*	for the gaussian function to reach epsilon at a given value.
	* Parameters:
	*	x {number} the value
	*	a {number} the a parameter of the function
	*	b {number} the b parameter of the function
	*	epsilon {number} the epsilon value
	* Returns:
	*	{number} the c parameter of the function
	*/
	JSM.GetGaussianCParameter = function (x, a, b, epsilon)
	{
		return Math.sqrt (-(Math.pow (x - b, 2.0) / (2.0 * Math.log (epsilon / Math.abs (a)))));
	};

	/**
	* Function: GetGaussianValue
	* Description: Calculates the gaussian functions value.
	* Parameters:
	*	x {number} the value
	*	a {number} the a parameter of the function
	*	b {number} the b parameter of the function
	*	c {number} the c parameter of the function
	* Returns:
	*	{number} the result
	*/
	JSM.GetGaussianValue = function (x, a, b, c)
	{
		return a * Math.exp (-(Math.pow (x - b, 2.0) / (2.0 * Math.pow (c, 2.0))));
	};

	/**
	* Function: GenerateCirclePoints
	* Description: Generates coordinates on circle.
	* Parameters:
	*	radius {number} the radius of the circle
	*	segmentation {number} the segmentation of the circle
	*	origo {Coord} the origo of the circle
	* Returns:
	*	{Coord[*]} the result
	*/
	JSM.GenerateCirclePoints = function (radius, segmentation, origo)
	{
		var result = [];
		var segments = segmentation;

		var theta = 2.0 * Math.PI;
		var step = 2.0 * Math.PI / segments;
		
		var i, coord;
		for (i = 0; i < segments; i++) {
			coord = JSM.CylindricalToCartesian (radius, 0.0, theta);
			if (origo !== undefined && origo !== null) {
				coord = JSM.CoordAdd (coord, origo);
			}
			result.push (coord);
			theta += step;
		}
		
		return result;
	};

	/**
	* Function: GetRuledMesh
	* Description:
	*	Generates ruled mesh coordinates and polygons between two coordinate array.
	*	The two arrays should have the same length. The result is a coordinate array
	*	and a polygon array which contains indices for vertices.
	* Parameters:
	*	aCoords {Coord[*]} the first coordinate array
	*	bCoords {Coord[*]} the second coordinate array
	*	segmentation {number} the segmentation of the mesh
	*	vertices {Coord[*]} (out) the vertices of the mesh
	*	polygons {integer[*][4]} (out) the polygons of the mesh
	*/
	JSM.GetRuledMesh = function (aCoords, bCoords, segmentation, vertices, polygons)
	{
		if (aCoords.length !== bCoords.length) {
			return;
		}

		var lineSegmentation = aCoords.length - 1;
		var meshSegmentation = segmentation;
		var directions = [];
		var lengths = [];

		var i, j;
		for (i = 0; i <= lineSegmentation; i++) {
			directions.push (JSM.CoordSub (bCoords[i], aCoords[i]));
			lengths.push (aCoords[i].DistanceTo (bCoords[i]));
		}

		var step, coord;
		for (i = 0; i <= lineSegmentation; i++) {
			step = lengths[i] / meshSegmentation;
			for (j = 0; j <= meshSegmentation; j++) {
				coord = aCoords[i].Clone ().Offset (directions[i], step * j);
				vertices.push (coord);
			}
		}

		var current, top, next, ntop, polygon;
		for (i = 0; i < lineSegmentation; i++) {
			for (j = 0; j < meshSegmentation; j++) {
				current = i * (meshSegmentation + 1) + j;
				top = current + meshSegmentation + 1;
				next = current + 1;
				ntop = top + 1;

				current = i * (meshSegmentation + 1) + j;
				top = current + 1;
				next = current + meshSegmentation + 1;
				ntop = next + 1;

				polygon = [current, next, ntop, top];
				polygons.push (polygon);
			}
		}
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/ray',["../core/jsm"],function(JSM){
	/**
	* Class: Ray
	* Description: Represents a Ray.
	* Parameters:
	*	origin {Coord} the starting point of the ray
	*	direction {Vector} the direction of the ray
	*	length {number} the length of the ray, null means infinite ray
	*/
	JSM.Ray = function (origin, direction, length)
	{
		this.origin = origin;
		this.direction = direction.Normalize ();
		this.length = length;
	};

	/**
	* Function: Ray.Set
	* Description: Sets the ray.
	* Parameters:
	*	origin {Coord} the starting point of the ray
	*	direction {Vector} the direction of the ray
	*	length {number} the length of the ray, null means infinite ray
	*/
	JSM.Ray.prototype.Set = function (origin, direction, length)
	{
		this.origin = origin;
		this.direction = direction.Normalize ();
		this.length = length;
	};

	/**
	* Function: Ray.GetOrigin
	* Description: Returns the origin of the ray.
	* Returns:
	*	{Coord} the result
	*/
	JSM.Ray.prototype.GetOrigin = function ()
	{
		return this.origin;
	};

	/**
	* Function: Ray.GetDirection
	* Description: Returns the direction of the ray.
	* Returns:
	*	{Vector} the result
	*/
	JSM.Ray.prototype.GetDirection = function ()
	{
		return this.direction;
	};

	/**
	* Function: Ray.IsLengthReached
	* Description:
	*	Returns if the given length is greater than the length of the ray.
	*	Always return false in case of infinite ray.
	* Returns:
	*	{boolean} the result
	*/
	JSM.Ray.prototype.IsLengthReached = function (length)
	{
		if (this.length === undefined || this.length === null) {
			return false;
		}
		return JSM.IsGreater (length, this.length);
	};

	/**
	* Function: Ray.Clone
	* Description: Clones the ray.
	* Returns:
	*	{Ray} a cloned instance
	*/
	JSM.Ray.prototype.Clone = function ()
	{
		return new JSM.Ray (this.origin.Clone (), this.direction.Clone (), this.length);
	};

	return JSM;
});

define('skylark-jsmodeler/geometry/path',["../core/jsm"],function(JSM){
	/**
	* Class: Path2D
	* Description: Helper class for building polygons
	* Parameters:
	*	settings {object} path settings
	*/
	JSM.Path2D = function (settings)
	{
		this.settings = {
			segmentation : 10,
			offset : new JSM.Vector2D (0.0, 0.0),
			scale : new JSM.Coord2D (1.0, 1.0)
		};
		JSM.CopyObjectProperties (settings, this.settings, true);
		
		this.position = new JSM.Coord2D (0.0, 0.0);
		this.positionAdded = false;
		this.polygons = [];
		this.currentPolygon = null;
	};

	/**
	* Function: Path2D.MoveTo
	* Description: Moves the current position to the given position.
	* Parameters:
	*	x {number} new x position
	*	y {number} new y position
	*/
	JSM.Path2D.prototype.MoveTo = function (x, y)
	{
		this.Close ();
		this.position.Set (x, y);
		this.positionAdded = false;
	};

	/**
	* Function: Path2D.LineTo
	* Description: Draws a line from current position to the given position.
	* Parameters:
	*	x {number} line end x position
	*	y {number} line end y position
	*/
	JSM.Path2D.prototype.LineTo = function (x, y)
	{
		if (!this.positionAdded) {
			this.AddPolygonPoint (this.position.x, this.position.y);
		}
		this.AddPolygonPoint (x, y);
	};

	/**
	* Function: Path2D.CubicBezierTo
	* Description: Draws a cubic bezier curve from the current position to the given position.
	* Parameters:
	*	x {number} curve end x position
	*	y {number} curve end y position
	*	cp1x {number} first control point x position
	*	cp1y {number} first control point y position
	*	cp2x {number} second control point x position
	*	cp2y {number} second control point y position
	*/
	JSM.Path2D.prototype.CubicBezierTo = function (x, y, cp1x, cp1y, cp2x, cp2y)
	{
		var bezierPoints = JSM.GenerateCubicBezierCurve (
			new JSM.Coord2D (this.position.x, this.position.y),
			new JSM.Coord2D (cp1x, cp1y),
			new JSM.Coord2D (cp2x, cp2y),
			new JSM.Coord2D (x, y),
			this.settings.segmentation
		);
		var i;
		for (i = 1; i < bezierPoints.length; i++) {
			this.LineTo (bezierPoints[i].x, bezierPoints[i].y);
		}
	};

	/**
	* Function: Path2D.Close
	* Description: Closes the current polygon.
	*/
	JSM.Path2D.prototype.Close = function ()
	{
		function CheckAndCorrectPolygon (polygon)
		{
			if (polygon.VertexCount () === 0) {
				return false;
			}
			if (polygon.GetVertex (0).IsEqual (polygon.GetVertex (polygon.VertexCount () - 1))) {
				polygon.RemoveVertex (polygon.VertexCount () - 1);
			}
			if (polygon.VertexCount () < 3) {
				return false;
			}
			return true;
		}
		
		function FindBasePolygon (polygons, polygon)
		{
			function IsBasePolygon (basePolygon, polygon)
			{
				baseOrientation = baseContour.GetOrientation ();
				polygonOrientation = polygon.GetOrientation ();
				if (baseOrientation !== polygonOrientation) {
					var firstVertex = polygon.GetVertex (0);
					var firstVertexPosition = baseContour.CoordPosition (firstVertex);
					if (firstVertexPosition == JSM.CoordPolygonPosition2D.Inside) {
						return true;
					}
				}
				return false;
			}
			
			var i, baseContour, baseOrientation, polygonOrientation;
			for (i = polygons.length - 1; i >= 0; i--) {
				baseContour = polygons[i].GetContour (0);
				if (IsBasePolygon (baseContour, polygon)) {
					return polygons[i];
				}
			}
			return null;
		}

		if (this.currentPolygon !== null) {
			if (CheckAndCorrectPolygon (this.currentPolygon)) {
				var basePolygon = FindBasePolygon (this.polygons, this.currentPolygon);
				if (basePolygon === null) {
					var contourPolygon = new JSM.ContourPolygon2D ();
					contourPolygon.AddContour (this.currentPolygon);
					this.polygons.push (contourPolygon);
				} else {
					basePolygon.AddContour (this.currentPolygon);
				}
			}
			this.currentPolygon = null;
		}
	};			

	/**
	* Function: Path2D.PolygonCount
	* Description: Returns the polygon count of the path.
	* Returns:
	*	{integer} the result
	*/
	JSM.Path2D.prototype.PolygonCount = function ()
	{
		return this.polygons.length;
	};

	/**
	* Function: Path2D.GetPolygon
	* Description: Returns the polygons from the path at the given index.
	* Parameters:
	*	index {integer} the polygon index
	* Returns:
	*	{ContourPolygon2D} the result
	*/
	JSM.Path2D.prototype.GetPolygon = function (index)
	{
		return this.polygons[index];
	};

	/**
	* Function: Path2D.GetPolygons
	* Description: Returns the polygons from the path.
	* Returns:
	*	{ContourPolygon2D[*]} the result
	*/
	JSM.Path2D.prototype.GetPolygons = function ()
	{
		return this.polygons;
	};

	/**
	* Function: Path2D.GetCurrentPolygon
	* Description: Returns the current polygon.
	* Returns:
	*	{Polygon2D} the result
	*/
	JSM.Path2D.prototype.GetCurrentPolygon = function ()
	{
		if (this.currentPolygon === null) {
			this.currentPolygon = new JSM.Polygon2D ();
		}
		return this.currentPolygon;
	};		

	/**
	* Function: Path2D.AddPolygonPoint
	* Description: Adds a point to the current polygon.
	* Parameters:
	*	x {number} the x position of the point
	*	y {number} the y position of the point
	*/
	JSM.Path2D.prototype.AddPolygonPoint = function (x, y)
	{
		var polygon = this.GetCurrentPolygon ();
		var polygonX = this.settings.offset.x + x * this.settings.scale.x;
		var polygonY = this.settings.offset.y + y * this.settings.scale.y;
		polygon.AddVertex (polygonX, polygonY);
		this.position.Set (x, y);
		this.positionAdded = true;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/color',["../core/jsm"],function(JSM){
	/**
	* Function: HexColorToRGBComponents
	* Description: Converts hex color strings to RGB components.
	* Parameters:
	*	hexColor {string} the hex color
	* Returns:
	*	{integer[3]} the RGB components
	*/
	JSM.HexColorToRGBComponents = function (hexColor)
	{
		var hexString = hexColor.toString (16);
		while (hexString.length < 6) {
			hexString = '0' + hexString;
		}
		var r = parseInt (hexString.substr (0, 2), 16);
		var g = parseInt (hexString.substr (2, 2), 16);
		var b = parseInt (hexString.substr (4, 2), 16);
		return [r, g, b];
	};

	/**
	* Function: HexColorToNormalizedRGBComponents
	* Description: Converts hex color strings to normalized (between 0.0 and 1.0) RGB components.
	* Parameters:
	*	hexColor {string} the hex color
	* Returns:
	*	{number[3]} the RGB components
	*/
	JSM.HexColorToNormalizedRGBComponents = function (hexColor)
	{
		var rgb = JSM.HexColorToRGBComponents (hexColor);
		return [rgb[0] / 255.0, rgb[1] / 255.0, rgb[2] / 255.0];
	};

	/**
	* Function: HexColorToRGBColor
	* Description: Converts hex color strings to RGB color.
	* Parameters:
	*	hexColor {string} the hex color string
	* Returns:
	*	{integer} the RGB value
	*/
	JSM.HexColorToRGBColor = function (hexColor)
	{
		var hexString = '0x' + hexColor;
		return parseInt (hexString, 16);
	};

	/**
	* Function: RGBComponentsToHexColor
	* Description: Converts RGB components to hex color.
	* Parameters:
	*	red {integer} the red component
	*	green {integer} the green component
	*	blue {integer} the blue component
	* Returns:
	*	{integer} the hex value
	*/
	JSM.RGBComponentsToHexColor = function (red, green, blue)
	{
		function IntegerToHex (intString)
		{
			var result = parseInt (intString, 10).toString (16);
			while (result.length < 2) {
				result = '0' + result;
			}
			return result;
		}
		var r = IntegerToHex (red);
		var g = IntegerToHex (green);
		var b = IntegerToHex (blue);
		var hexString = '0x' + r + g + b;
		return parseInt (hexString, 16);
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/material',["../core/jsm"],function(JSM){
	/**
	* Class: Material
	* Description:
	*	Defines a material. The parameter structure can contain the following values:
	*	ambient, diffuse, specular, shininess, opacity, texture, textureWidth, textureHeight.
	* Parameters:
	*	parameters {object} parameters of the material
	*/
	JSM.Material = function (parameters)
	{
		this.ambient = 0x00cc00;
		this.diffuse = 0x00cc00;
		this.specular = 0x000000;
		this.shininess = 0.0;
		this.opacity = 1.0;
		this.reflection = 0.0;
		this.singleSided = false;
		this.pointSize = 0.1;
		this.texture = null;
		this.textureWidth = 1.0;
		this.textureHeight = 1.0;
		JSM.CopyObjectProperties (parameters, this, true);
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/materialset',["../core/jsm"],function(JSM){
	/**
	* Class: MaterialSet
	* Description: Defines a material container.
	*/
	JSM.MaterialSet = function ()
	{
		this.materials = [];
		this.defaultMaterial = new JSM.Material ();
	};

	/**
	* Function: MaterialSet.AddMaterial
	* Description: Adds a material to the container.
	* Parameters:
	*	material {Material} the material
	* Returns:
	*	{integer} the index of the newly added material
	*/
	JSM.MaterialSet.prototype.AddMaterial = function (material)
	{
		this.materials.push (material);
		return this.materials.length - 1;
	};

	/**
	* Function: MaterialSet.GetMaterial
	* Description: Returns a material from the container.
	* Parameters:
	*	index {integer} the index
	* Returns:
	*	{Material} the result
	*/
	JSM.MaterialSet.prototype.GetMaterial = function (index)
	{
		if (index < 0 || index >= this.materials.length) {
			return this.defaultMaterial;
		}
		return this.materials[index];
	};

	/**
	* Function: MaterialSet.GetDefaultMaterial
	* Description: Returns the default material from the container. It is always exists.
	* Returns:
	*	{Material} the result
	*/
	JSM.MaterialSet.prototype.GetDefaultMaterial = function ()
	{
		return this.defaultMaterial;
	};

	/**
	* Function: MaterialSet.Count
	* Description: Returns the material count of the container.
	* Returns:
	*	{integer} the result
	*/
	JSM.MaterialSet.prototype.Count = function ()
	{
		return this.materials.length;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/body',["../core/jsm"],function(JSM){

	/**
	* Class: BodyVertex
	* Description:
	*	Represents a vertex of a 3D body. The vertex contains
	*	only its position as a 3D coordinate.
	* Parameters:
	*	position {Coord} the position
	*/
	JSM.BodyVertex = function (position)
	{
		this.position = position;
	};

	/**
	* Function: BodyVertex.GetPosition
	* Description: Returns the position of the vertex.
	* Returns:
	*	{Coord} the result
	*/
	JSM.BodyVertex.prototype.GetPosition = function ()
	{
		return this.position;
	};

	/**
	* Function: BodyVertex.SetPosition
	* Description: Sets the position of the vertex.
	* Parameters:
	*	position {Coord} the position
	*/
	JSM.BodyVertex.prototype.SetPosition = function (position)
	{
		this.position = position;
	};

	/**
	* Function: BodyVertex.Clone
	* Description: Clones the vertex.
	* Returns:
	*	{BodyVertex} the cloned instance
	*/
	JSM.BodyVertex.prototype.Clone = function ()
	{
		return new JSM.BodyVertex (this.position.Clone ());
	};

	/**
	* Class: BodyPoint
	* Description:
	*	Represents a point in a 3D body. The point contains the vertex index stored in its 3D body,
	*	and a material index of a material defined outside of the body.
	* Parameters:
	*	index {integer} the vertex index stored in the body
	*/
	JSM.BodyPoint = function (index)
	{
		this.vertex = index;
		this.material = -1;
	};

	/**
	* Function: BodyPoint.GetVertexIndex
	* Description: Returns the body vertex index of the point.
	* Returns:
	*	{integer} the stored vertex index
	*/
	JSM.BodyPoint.prototype.GetVertexIndex = function ()
	{
		return this.vertex;
	};

	/**
	* Function: BodyPoint.SetVertexIndex
	* Description: Sets the vertex index of the point.
	* Parameters:
	*	index {integer} the vertex index
	*/
	JSM.BodyPoint.prototype.SetVertexIndex = function (index)
	{
		this.vertex = index;
	};

	/**
	* Function: BodyPoint.HasMaterialIndex
	* Description: Returns if the point has a material index.
	* Returns:
	*	{boolean} the result
	*/
	JSM.BodyPoint.prototype.HasMaterialIndex = function ()
	{
		return this.material !== -1;
	};

	/**
	* Function: BodyPoint.GetMaterialIndex
	* Description: Returns the point material index.
	* Returns:
	*	{integer} the result
	*/
	JSM.BodyPoint.prototype.GetMaterialIndex = function ()
	{
		return this.material;
	};

	/**
	* Function: BodyPoint.SetMaterialIndex
	* Description: Sets the point material index.
	* Parameters:
	*	material {integer} the material index
	*/
	JSM.BodyPoint.prototype.SetMaterialIndex = function (material)
	{
		this.material = material;
	};

	/**
	* Function: BodyPoint.InheritAttributes
	* Description: Inherits attributes (material) from an another point.
	* Parameters:
	*	source {BodyPoint} the source point
	*/
	JSM.BodyPoint.prototype.InheritAttributes = function (source)
	{
		this.material = source.material;
	};

	/**
	* Function: BodyPoint.Clone
	* Description: Clones the point.
	* Returns:
	*	{BodyPoint} the cloned instance
	*/
	JSM.BodyPoint.prototype.Clone = function ()
	{
		var result = new JSM.BodyPoint (this.vertex);
		result.material = this.material;
		return result;
	};

	/**
	* Class: BodyLine
	* Description:
	*	Represents a line in a 3D body. The line contains begin and end indices of vertices
	*	stored in its 3D body, and a material index of a material defined outside of the body.
	* Parameters:
	*	beg {integer} begin vertex index stored in the body
	*	end {integer} end vertex index stored in the body
	*/
	JSM.BodyLine = function (beg, end)	{
		this.beg = beg;
		this.end = end;
		this.material = -1;
	};

	/**
	* Function: BodyLine.GetBegVertexIndex
	* Description: Returns the body vertex index at the beginning of the line.
	* Returns:
	*	{integer} the stored vertex index
	*/
	JSM.BodyLine.prototype.GetBegVertexIndex = function ()	{
		return this.beg;
	};

	/**
	* Function: BodyLine.SetBegVertexIndex
	* Description: Sets the begin vertex index of the line.
	* Parameters:
	*	index {integer} the vertex index
	*/
	JSM.BodyLine.prototype.SetBegVertexIndex = function (index)	{
		this.beg = index;
	};

	/**
	* Function: BodyLine.GetEndVertexIndex
	* Description: Returns the body vertex index at the end of the line.
	* Returns:
	*	{integer} the stored vertex index
	*/
	JSM.BodyLine.prototype.GetEndVertexIndex = function ()	{
		return this.end;
	};

	/**
	* Function: BodyLine.SetEndVertexIndex
	* Description: Sets the end vertex index of the line.
	* Parameters:
	*	index {integer} the vertex index
	*/
	JSM.BodyLine.prototype.SetEndVertexIndex = function (index)	{
		this.end = index;
	};

	/**
	* Function: BodyLine.HasMaterialIndex
	* Description: Returns if the line has a material index.
	* Returns:
	*	{boolean} the result
	*/
	JSM.BodyLine.prototype.HasMaterialIndex = function (){
		return this.material !== -1;
	};

	/**
	* Function: BodyLine.GetMaterialIndex
	* Description: Returns the line material index.
	* Returns:
	*	{integer} the result
	*/
	JSM.BodyLine.prototype.GetMaterialIndex = function (){
		return this.material;
	};

	/**
	* Function: BodyLine.SetMaterialIndex
	* Description: Sets the line material index.
	* Parameters:
	*	material {integer} the material index
	*/
	JSM.BodyLine.prototype.SetMaterialIndex = function (material){
		this.material = material;
	};

	/**
	* Function: BodyLine.InheritAttributes
	* Description: Inherits attributes (material) from an another line.
	* Parameters:
	*	source {BodyLine} the source line
	*/
	JSM.BodyLine.prototype.InheritAttributes = function (source)
	{
		this.material = source.material;
	};

	/**
	* Function: BodyLine.Clone
	* Description: Clones the line.
	* Returns:
	*	{BodyLine} the cloned instance
	*/
	JSM.BodyLine.prototype.Clone = function ()
	{
		var result = new JSM.BodyLine (this.beg, this.end);
		result.material = this.material;
		return result;
	};

	/**
	* Class: BodyPolygon
	* Description:
	*	Represents a polygon in a 3D body. The polygon contains indices of vertices stored in its body.
	*	It also contains a material index of a material defined outside of the body, and a curve
	*	group index which defines its normal vector calculation in case of smooth surfaces.
	* Parameters:
	*	vertices {integer[*]} array of vertex indices stored in the body
	*/
	JSM.BodyPolygon = function (vertices)
	{
		this.vertices = vertices;
		this.material = -1;
		this.curved = -1;
	};

	/**
	* Function: BodyPolygon.AddVertexIndex
	* Description: Adds a vertex index to the polygon.
	* Parameters:
	*	index {integer} the vertex index
	*/
	JSM.BodyPolygon.prototype.AddVertexIndex = function (index)
	{
		this.vertices.push (index);
	};

	/**
	* Function: BodyPolygon.InsertVertexIndex
	* Description: Inserts a vertex index to given index in the polygon.
	* Parameters:
	*	vertexIndex {integer} the vertex index
	*	polygonIndex {integer} the index in the polygon
	*/
	JSM.BodyPolygon.prototype.InsertVertexIndex = function (vertexIndex, polygonIndex)
	{
		this.vertices.splice (polygonIndex, 0, vertexIndex);
	};

	/**
	* Function: BodyPolygon.GetVertexIndex
	* Description: Returns the body vertex index at the given polygon vertex index.
	* Parameters:
	*	index {integer} the polygon vertex index
	* Returns:
	*	{integer} the stored vertex index
	*/
	JSM.BodyPolygon.prototype.GetVertexIndex = function (index)
	{
		return this.vertices[index];
	};

	/**
	* Function: BodyPolygon.SetVertexIndex
	* Description: Sets the body vertex index at the given polygon vertex index.
	* Parameters:
	*	index {integer} the polygon vertex index
	*	vertIndex {integer} the body vertex index
	*/
	JSM.BodyPolygon.prototype.SetVertexIndex = function (index, vertIndex)
	{
		this.vertices[index] = vertIndex;
	};

	/**
	* Function: BodyPolygon.GetVertexIndices
	* Description: Returns an array of the body vertex indices in the polygon.
	* Returns:
	*	{integer[]} the stored vertex indices
	*/
	JSM.BodyPolygon.prototype.GetVertexIndices = function ()
	{
		return this.vertices;
	};

	/**
	* Function: BodyPolygon.SetVertexIndices
	* Description: Sets the vertex indices in the polygon.
	* Parameters:
	*	vertices {integer[]} the new vertex indices
	*/
	JSM.BodyPolygon.prototype.SetVertexIndices = function (vertices)
	{
		this.vertices = vertices;
	};

	/**
	* Function: BodyPolygon.VertexIndexCount
	* Description: Returns the vertex count of the polygon.
	* Returns:
	*	{integer} the result
	*/
	JSM.BodyPolygon.prototype.VertexIndexCount = function ()
	{
		return this.vertices.length;
	};

	/**
	* Function: BodyPolygon.HasMaterialIndex
	* Description: Returns if the polygon has a material index.
	* Returns:
	*	{boolean} the result
	*/
	JSM.BodyPolygon.prototype.HasMaterialIndex = function ()
	{
		return this.material !== -1;
	};

	/**
	* Function: BodyPolygon.GetMaterialIndex
	* Description: Returns the polygons material index.
	* Returns:
	*	{integer} the result
	*/
	JSM.BodyPolygon.prototype.GetMaterialIndex = function ()
	{
		return this.material;
	};

	/**
	* Function: BodyPolygon.SetMaterialIndex
	* Description: Sets the polygons material index.
	* Parameters:
	*	material {integer} the material index
	*/
	JSM.BodyPolygon.prototype.SetMaterialIndex = function (material)
	{
		this.material = material;
	};

	/**
	* Function: BodyPolygon.HasCurveGroup
	* Description: Returns if the polygon has a curve group index.
	* Returns:
	*	{boolean} the result
	*/
	JSM.BodyPolygon.prototype.HasCurveGroup = function ()
	{
		return this.curved !== -1;
	};

	/**
	* Function: BodyPolygon.GetCurveGroup
	* Description: Returns the polygons curve group index.
	* Returns:
	*	{integer} the result
	*/
	JSM.BodyPolygon.prototype.GetCurveGroup = function ()
	{
		return this.curved;
	};

	/**
	* Function: BodyPolygon.SetCurveGroup
	* Description: Sets the polygons curve group index.
	* Parameters:
	*	group {integer} the curve group index
	*/
	JSM.BodyPolygon.prototype.SetCurveGroup = function (group)
	{
		this.curved = group;
	};

	/**
	* Function: BodyPolygon.ReverseVertexIndices
	* Description: Reverses the order of vertex indices in the polygon.
	*/
	JSM.BodyPolygon.prototype.ReverseVertexIndices = function ()
	{
		this.vertices.reverse ();
	};

	/**
	* Function: BodyPolygon.InheritAttributes
	* Description: Inherits attributes (material and curve group index) from an another polygon.
	* Parameters:
	*	source {BodyPolygon} the source polygon
	*/
	JSM.BodyPolygon.prototype.InheritAttributes = function (source)
	{
		this.material = source.material;
		this.curved = source.curved;
	};

	/**
	* Function: BodyPolygon.Clone
	* Description: Clones the polygon.
	* Returns:
	*	{BodyPolygon} the cloned instance
	*/
	JSM.BodyPolygon.prototype.Clone = function ()
	{
		var result = new JSM.BodyPolygon ([]);
		var i;
		for (i = 0; i < this.vertices.length; i++) {
			result.vertices.push (this.vertices[i]);
		}
		result.material = this.material;
		result.curved = this.curved;
		return result;
	};

	/**
	* Enum: TextureProjectionType
	* Description: Texture projection type.
	* Values:
	*	{Planar} planar projection
	*	{Cubic} cubic projection
	*	{Cylindrical} cylindrical projection
	*/
	JSM.TextureProjectionType = {
		Planar : 0,
		Cubic : 1,
		Cylindrical : 2
	};

	/**
	* Class: BodyTextureProjection
	* Description:
	*	Represents the texture projection of the body. It contains a projection type,
	*	and a coordinate system for projection.
	*/
	JSM.BodyTextureProjection = function ()
	{
		this.type = null;
		this.coords = null;
		this.SetCubic (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
	};

	/**
	* Function: BodyTextureProjection.GetType
	* Description: Returns the texture projection type.
	* Returns:
	*	{TextureProjectionType} the result
	*/
	JSM.BodyTextureProjection.prototype.GetType = function ()
	{
		return this.type;
	};

	/**
	* Function: BodyTextureProjection.GetCoords
	* Description: Returns the texture projection coordinate system.
	* Returns:
	*	{CoordSystem} the result
	*/
	JSM.BodyTextureProjection.prototype.GetCoords = function ()
	{
		return this.coords;
	};

	/**
	* Function: BodyTextureProjection.SetType
	* Description: Sets the texture projection type.
	* Parameters:
	*	type {TextureProjectionType} the type
	*/
	JSM.BodyTextureProjection.prototype.SetType = function (type)
	{
		this.type = type;
	};

	/**
	* Function: BodyTextureProjection.SetCoords
	* Description: Sets the texture projection coordinates.
	* Parameters:
	*	coords {CoordSystem} the coordinates
	*/
	JSM.BodyTextureProjection.prototype.SetCoords = function (coords)
	{
		this.coords = coords;
	};

	/**
	* Function: BodyTextureProjection.SetPlanar
	* Description: Sets the texture projection to planar with the given parameters.
	* Parameters:
	*	origo {Coord} origo of the projection
	*	xDirection {Vector} x direction of the projection plane
	*	yDirection {Vector} y direction of the projection plane
	*/
	JSM.BodyTextureProjection.prototype.SetPlanar = function (origo, xDirection, yDirection)
	{
		this.type = JSM.TextureProjectionType.Planar;
		this.coords = new JSM.CoordSystem (
			origo,
			xDirection,
			yDirection,
			new JSM.Coord (0.0, 0.0, 0.0)
		);
	};

	/**
	* Function: BodyTextureProjection.SetCubic
	* Description: Sets the texture projection to cubic with the given parameters.
	* Parameters:
	*	origo {Coord} origo of the projection
	*	xDirection {Vector} x direction (edge of the cube) of the projection
	*	yDirection {Vector} y direction (edge of the cube) of the projection
	*	zDirection {Vector} z direction (edge of the cube) of the projection
	*/
	JSM.BodyTextureProjection.prototype.SetCubic = function (origo, xDirection, yDirection, zDirection)
	{
		this.type = JSM.TextureProjectionType.Cubic;
		this.coords = new JSM.CoordSystem (
			origo,
			xDirection,
			yDirection,
			zDirection
		);
	};

	/**
	* Function: BodyTextureProjection.SetCylindrical
	* Description: Sets the texture projection to cylindrical with the given parameters.
	* Parameters:
	*	origo {Coord} origo of the projection
	*	radius {number} radius of the cylinder
	*	xDirection {Vector} x direction (start point along perimeter) of the projection
	*	zDirection {Vector} z direction (normal vector) of the projection
	*/
	JSM.BodyTextureProjection.prototype.SetCylindrical = function (origo, radius, xDirection, zDirection)
	{
		this.type = JSM.TextureProjectionType.Cylindrical;
		this.coords = new JSM.CoordSystem (
			origo,
			xDirection.Clone ().SetLength (radius),
			JSM.VectorCross (zDirection, xDirection).SetLength (radius),
			zDirection
		);
	};

	/**
	* Function: BodyTextureProjection.Transform
	* Description: Transforms the texture projection coordinate system.
	* Parameters:
	*	transformation {Transformation} the transformation
	*/
	JSM.BodyTextureProjection.prototype.Transform = function (transformation)
	{
		this.coords.ToAbsoluteCoords ();
		this.coords.origo = transformation.Apply (this.coords.origo);
		this.coords.e1 = transformation.Apply (this.coords.e1);
		this.coords.e2 = transformation.Apply (this.coords.e2);
		this.coords.e3 = transformation.Apply (this.coords.e3);
		this.coords.ToDirectionVectors ();
	};

	/**
	* Function: BodyTextureProjection.Clone
	* Description: Clones the texture projection.
	* Returns:
	*	{BodyTextureProjection} the cloned instance
	*/
	JSM.BodyTextureProjection.prototype.Clone = function ()
	{
		var result = new JSM.BodyTextureProjection ();
		result.SetType (this.type);
		result.SetCoords (this.coords.Clone ());
		return result;
	};

	/**
	* Class: Body
	* Description:
	*	Represents a 3D body. The body contains vertices, polygons,
	*	and a texture coordinate system.
	*/
	JSM.Body = function ()
	{
		this.Clear ();
	};

	/**
	* Function: Body.AddVertex
	* Description: Adds a vertex to the body.
	* Parameters:
	*	vertex {BodyVertex} the vertex
	* Returns:
	*	{integer} the index of the newly added vertex
	*/
	JSM.Body.prototype.AddVertex = function (vertex)
	{
		this.vertices.push (vertex);
		return this.vertices.length - 1;
	};

	/**
	* Function: Body.AddPoint
	* Description: Adds a point to the body.
	* Parameters:
	*	point {BodyPoint} the point
	* Returns:
	*	{integer} the index of the newly added point
	*/
	JSM.Body.prototype.AddPoint = function (point)
	{
		this.points.push (point);
		return this.points.length - 1;
	};

	/**
	* Function: Body.AddLine
	* Description: Adds a line to the body.
	* Parameters:
	*	line {BodyLine} the line
	* Returns:
	*	{integer} the index of the newly added line
	*/
	JSM.Body.prototype.AddLine = function (line)
	{
		this.lines.push (line);
		return this.lines.length - 1;
	};

	/**
	* Function: Body.AddPolygon
	* Description: Adds a polygon to the body.
	* Parameters:
	*	polygon {BodyPolygon} the polygon
	* Returns:
	*	{integer} the index of the newly added polygon
	*/
	JSM.Body.prototype.AddPolygon = function (polygon)
	{
		this.polygons.push (polygon);
		return this.polygons.length - 1;
	};

	/**
	* Function: Body.GetVertex
	* Description: Returns the vertex at the given index.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{BodyVertex} the result
	*/
	JSM.Body.prototype.GetVertex = function (index)
	{
		return this.vertices[index];
	};

	/**
	* Function: Body.GetVertexPosition
	* Description: Returns the position of the vertex at the given index.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{Coord} the result
	*/
	JSM.Body.prototype.GetVertexPosition = function (index)
	{
		return this.vertices[index].position;
	};

	/**
	* Function: Body.SetVertexPosition
	* Description: Sets the position of the vertex at the given index.
	* Parameters:
	*	index {integer} the vertex index
	*	position {Coord} the new position
	*/
	JSM.Body.prototype.SetVertexPosition = function (index, position)
	{
		this.vertices[index].position = position;
	};

	/**
	* Function: Body.GetPoint
	* Description: Returns the point at the given index.
	* Parameters:
	*	index {integer} the point index
	* Returns:
	*	{BodyPoint} the result
	*/
	JSM.Body.prototype.GetPoint = function (index)
	{
		return this.points[index];
	};

	/**
	* Function: Body.GetLine
	* Description: Returns the line at the given index.
	* Parameters:
	*	index {integer} the line index
	* Returns:
	*	{BodyLine} the result
	*/
	JSM.Body.prototype.GetLine = function (index)
	{
		return this.lines[index];
	};

	/**
	* Function: Body.GetPolygon
	* Description: Returns the polygon at the given index.
	* Parameters:
	*	index {integer} the polygon index
	* Returns:
	*	{BodyPolygon} the result
	*/
	JSM.Body.prototype.GetPolygon = function (index)
	{
		return this.polygons[index];
	};

	/**
	* Function: Body.SetPointsMaterialIndex
	* Description: Sets the material index for all points in the body.
	* Parameters:
	*	material {integer} the material index
	*/
	JSM.Body.prototype.SetPointsMaterialIndex = function (material)
	{
		var i;
		for (i = 0; i < this.points.length; i++) {
			this.points[i].SetMaterialIndex (material);
		}
	};

	/**
	* Function: Body.SetLinesMaterialIndex
	* Description: Sets the material index for all lines in the body.
	* Parameters:
	*	material {integer} the material index
	*/
	JSM.Body.prototype.SetLinesMaterialIndex = function (material)
	{
		var i;
		for (i = 0; i < this.lines.length; i++) {
			this.lines[i].SetMaterialIndex (material);
		}
	};

	/**
	* Function: Body.SetPolygonsMaterialIndex
	* Description: Sets the material index for all polygons in the body.
	* Parameters:
	*	material {integer} the material index
	*/
	JSM.Body.prototype.SetPolygonsMaterialIndex = function (material)
	{
		var i;
		for (i = 0; i < this.polygons.length; i++) {
			this.polygons[i].SetMaterialIndex (material);
		}
	};

	/**
	* Function: Body.SetPolygonsCurveGroup
	* Description: Sets the curve group index for all polygons in the body.
	* Parameters:
	*	group {integer} the curve group index
	*/
	JSM.Body.prototype.SetPolygonsCurveGroup = function (group)
	{
		var i;
		for (i = 0; i < this.polygons.length; i++) {
			this.polygons[i].SetCurveGroup (group);
		}
	};

	/**
	* Function: Body.RemoveVertex
	* Description: Removes a vertex from the body. It also removes connected polygons.
	* Parameters:
	*	index {integer} the index of the vertex
	*/
	JSM.Body.prototype.RemoveVertex = function (index)
	{
		var pointsToDelete = [];
		var linesToDelete = [];
		var polygonsToDelete = [];
		var i, j, point, line, polygon, bodyVertIndex;
		for (i = 0; i < this.points.length; i++) {
			point = this.points[i];
			if (point.GetVertexIndex () == index) {
				pointsToDelete.push (i);
			} else if (point.GetVertexIndex () >= index) {
				point.SetVertexIndex (point.GetVertexIndex () - 1);
			}
		}
		for (i = 0; i < this.lines.length; i++) {
			line = this.lines[i];
			if (line.GetBegVertexIndex () == index || line.GetEndVertexIndex () == index) {
				linesToDelete.push (i);
			} else {
				if (line.GetBegVertexIndex () >= index) {
					line.SetBegVertexIndex (line.GetBegVertexIndex () - 1);
				}
				if (line.GetEndVertexIndex () >= index) {
					line.SetEndVertexIndex (line.GetEndVertexIndex () - 1);
				}
			}
		}
		for (i = 0; i < this.polygons.length; i++) {
			polygon = this.polygons[i];
			for (j = 0; j < polygon.VertexIndexCount (); j++) {
				bodyVertIndex = polygon.GetVertexIndex (j);
				if (polygon.GetVertexIndex (j) == index) {
					polygonsToDelete.push (i);
					break;
				} else if (bodyVertIndex >= index) {
					polygon.SetVertexIndex (j, bodyVertIndex - 1);
				}
			}
		}
		for (i = 0; i < pointsToDelete.length; i++) {
			this.RemovePoint (pointsToDelete[i] - i);
		}
		for (i = 0; i < linesToDelete.length; i++) {
			this.RemoveLine (linesToDelete[i] - i);
		}
		for (i = 0; i < polygonsToDelete.length; i++) {
			this.RemovePolygon (polygonsToDelete[i] - i);
		}
		this.vertices.splice (index, 1);
	};

	/**
	* Function: Body.RemovePoint
	* Description: Removes a point from the body.
	* Parameters:
	*	index {integer} the index of the point
	*/
	JSM.Body.prototype.RemovePoint = function (index)
	{
		this.points.splice (index, 1);
	};

	/**
	* Function: Body.RemoveLine
	* Description: Removes a line from the body.
	* Parameters:
	*	index {integer} the index of the line
	*/
	JSM.Body.prototype.RemoveLine = function (index)
	{
		this.lines.splice (index, 1);
	};

	/**
	* Function: Body.RemovePolygon
	* Description: Removes a polygon from the body.
	* Parameters:
	*	index {integer} the index of the polygon
	*/
	JSM.Body.prototype.RemovePolygon = function (index)
	{
		this.polygons.splice (index, 1);
	};

	/**
	* Function: Body.VertexCount
	* Description: Returns the vertex count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.Body.prototype.VertexCount = function ()
	{
		return this.vertices.length;
	};

	/**
	* Function: Body.PointCount
	* Description: Returns the point count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.Body.prototype.PointCount = function ()
	{
		return this.points.length;
	};

	/**
	* Function: Body.LineCount
	* Description: Returns the line count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.Body.prototype.LineCount = function ()
	{
		return this.lines.length;
	};

	/**
	* Function: Body.PolygonCount
	* Description: Returns the polygon count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.Body.prototype.PolygonCount = function ()
	{
		return this.polygons.length;
	};

	/**
	* Function: Body.GetTextureProjection
	* Description: Returns the texture projection of the body.
	* Returns:
	*	{BodyTextureProjection} the result
	*/
	JSM.Body.prototype.GetTextureProjection = function ()
	{
		return this.projection;
	};

	/**
	* Function: Body.SetTextureProjection
	* Description: Sets the texture projection of the body.
	* Parameters:
	*	projection {BodyTextureProjection} the new texture projection
	*/
	JSM.Body.prototype.SetTextureProjection = function (projection)
	{
		this.projection = projection;
	};

	/**
	* Function: Body.SetPlanarTextureProjection
	* Description: Sets the texture projection to planar with the given parameters.
	* Parameters:
	*	origo {Coord} origo of the projection
	*	xDirection {Vector} x direction of the projection plane
	*	yDirection {Vector} y direction of the projection plane
	*/
	JSM.Body.prototype.SetPlanarTextureProjection = function (origo, xDirection, yDirection)
	{
		this.projection.SetPlanar (origo, xDirection, yDirection);
	};

	/**
	* Function: Body.SetCubicTextureProjection
	* Description: Sets the texture projection to cubic with the given parameters.
	* Parameters:
	*	origo {Coord} origo of the projection
	*	xDirection {Vector} x direction (edge of the cube) of the projection
	*	yDirection {Vector} y direction (edge of the cube) of the projection
	*	zDirection {Vector} z direction (edge of the cube) of the projection
	*/
	JSM.Body.prototype.SetCubicTextureProjection = function (origo, xDirection, yDirection, zDirection)
	{
		this.projection.SetCubic (origo, xDirection, yDirection, zDirection);
	};

	/**
	* Function: Body.SetCylindricalTextureProjection
	* Description: Sets the texture projection to cylindrical with the given parameters.
	* Parameters:
	*	origo {Coord} origo of the projection
	*	radius {number} radius of the cylinder
	*	xDirection {Vector} x direction (start point along perimeter) of the projection
	*	zDirection {Vector} z direction (normal vector) of the projection
	*/
	JSM.Body.prototype.SetCylindricalTextureProjection = function (origo, radius, xDirection, zDirection)
	{
		this.projection.SetCylindrical (origo, radius, xDirection, zDirection);
	};

	/**
	* Function: Body.Transform
	* Description: Transforms the body.
	* Parameters:
	*	transformation {Transformation} the transformation
	*/
	JSM.Body.prototype.Transform = function (transformation)
	{
		var i;
		for (i = 0; i < this.vertices.length; i++) {
			this.vertices[i].position = transformation.Apply (this.vertices[i].position);
		}
		this.projection.Transform (transformation);
	};

	/**
	* Function: Body.GetBoundingBox
	* Description: Returns the bounding box of the body.
	* Returns:
	*	{Box} the result
	*/
	JSM.Body.prototype.GetBoundingBox = function ()
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);

		var i, coord;
		for (i = 0; i < this.vertices.length; i++) {
			coord = this.vertices[i].position;
			min.x = JSM.Minimum (min.x, coord.x);
			min.y = JSM.Minimum (min.y, coord.y);
			min.z = JSM.Minimum (min.z, coord.z);
			max.x = JSM.Maximum (max.x, coord.x);
			max.y = JSM.Maximum (max.y, coord.y);
			max.z = JSM.Maximum (max.z, coord.z);
		}
		
		return new JSM.Box (min, max);
	};

	/**
	* Function: Body.GetCenter
	* Description: Returns the center of the bounding box of the body.
	* Returns:
	*	{Coord} the result
	*/
	JSM.Body.prototype.GetCenter = function ()
	{
		var boundingBox = this.GetBoundingBox ();
		return boundingBox.GetCenter ();
	};

	/**
	* Function: Body.GetBoundingSphere
	* Description: Returns the bounding sphere of the body.
	* Returns:
	*	{Sphere} the result
	*/
	JSM.Body.prototype.GetBoundingSphere = function ()
	{
		var center = this.GetCenter ();
		var radius = 0.0;
		
		var i, current;
		for (i = 0; i < this.vertices.length; i++) {
			current = center.DistanceTo (this.vertices[i].position);
			if (JSM.IsGreater (current, radius)) {
				radius = current;
			}
		}
		
		var result = new JSM.Sphere (center, radius);
		return result;
	};

	/**
	* Function: Body.OffsetToOrigo
	* Description: Offsets the body to the origo.
	*/
	JSM.Body.prototype.OffsetToOrigo = function ()
	{
		var center = this.GetCenter ().Clone ();
		center.MultiplyScalar (-1.0);

		var i;
		for (i = 0; i < this.vertices.length; i++) {
			this.vertices[i].position = JSM.CoordAdd (this.vertices[i].position, center);
		}
	};

	/**
	* Function: Body.Merge
	* Description: Merges an existing body to the body.
	* Parameters:
	*	body {Body} the body to merge
	*/
	JSM.Body.prototype.Merge = function (body)
	{
		var oldVertexCount = this.vertices.length;
		
		var i, j;
		for (i = 0; i < body.VertexCount (); i++) {
			this.vertices.push (body.GetVertex (i).Clone ());
		}
		
		var newPoint;
		for (i = 0; i < body.PointCount (); i++) {
			newPoint = body.GetPoint (i).Clone ();
			newPoint.SetVertexIndex (newPoint.GetVertexIndex () + oldVertexCount);
			this.points.push (newPoint);
		}	
		
		var newLine;
		for (i = 0; i < body.LineCount (); i++) {
			newLine = body.GetLine (i).Clone ();
			newLine.SetBegVertexIndex (newLine.GetBegVertexIndex () + oldVertexCount);
			newLine.SetEndVertexIndex (newLine.GetEndVertexIndex () + oldVertexCount);
			this.lines.push (newLine);
		}

		var newPolygon;
		for (i = 0; i < body.PolygonCount (); i++) {
			newPolygon = body.GetPolygon (i).Clone ();
			for (j = 0; j < newPolygon.VertexIndexCount (); j++) {
				newPolygon.vertices[j] += oldVertexCount;
			}
			this.polygons.push (newPolygon);
		}
	};

	/**
	* Function: Body.Clear
	* Description: Makes the body empty.
	*/
	JSM.Body.prototype.Clear = function ()
	{
		this.vertices = [];
		this.points = [];
		this.lines = [];
		this.polygons = [];
		this.projection = new JSM.BodyTextureProjection ();
	};

	/**
	* Function: Body.Clone
	* Description: Clones the body.
	* Returns:
	*	{Body} the cloned instance
	*/
	JSM.Body.prototype.Clone = function ()
	{
		var result = new JSM.Body ();
		
		var i;
		for (i = 0; i < this.vertices.length; i++) {
			result.AddVertex (this.vertices[i].Clone ());
		}
		
		for (i = 0; i < this.points.length; i++) {
			result.AddPoint (this.points[i].Clone ());
		}

		for (i = 0; i < this.lines.length; i++) {
			result.AddLine (this.lines[i].Clone ());
		}

		for (i = 0; i < this.polygons.length; i++) {
			result.AddPolygon (this.polygons[i].Clone ());
		}

		result.SetTextureProjection (this.projection.Clone ());
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/model',["../core/jsm"],function(JSM){
	/**
	* Class: Model
	* Description: Represents a 3D model. The model contains bodies.
	*/
	JSM.Model = function ()
	{
		this.bodies = [];
		this.materials = new JSM.MaterialSet ();
	};

	/**
	* Function: Model.AddBody
	* Description: Adds a body to the model.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{integer} the index of the newly added body
	*/
	JSM.Model.prototype.AddBody = function (body)
	{
		this.bodies.push (body);
		return this.bodies.length - 1;
	};

	/**
	* Function: Model.AddBodies
	* Description: Adds bodies to the model.
	* Parameters:
	*	bodies {Body[*]} the body
	*/
	JSM.Model.prototype.AddBodies = function (bodies)
	{
		var i, body;
		for (i = 0; i < bodies.length; i++) {
			body = bodies[i];
			this.AddBody (body);
		}
	};

	/**
	* Function: Model.GetBody
	* Description: Returns the stored body with the given index.
	* Parameters:
	*	index {integer} the index of the body
	* Returns:
	*	{Body} the result
	*/
	JSM.Model.prototype.GetBody = function (index)
	{
		return this.bodies[index];
	};

	/**
	* Function: Model.BodyCount
	* Description: Returns the body count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.Model.prototype.BodyCount = function ()
	{
		return this.bodies.length;
	};

	/**
	* Function: Model.AddMaterial
	* Description: Adds a material to the mode.
	* Parameters:
	*	material {Material} the material
	* Returns:
	*	{integer} the index of the newly added material
	*/
	JSM.Model.prototype.AddMaterial = function (material)
	{
		return this.materials.AddMaterial (material);
	};

	/**
	* Function: Model.GetMaterial
	* Description: Returns a material from the model.
	* Parameters:
	*	index {integer} the index
	* Returns:
	*	{Material} the result
	*/
	JSM.Model.prototype.GetMaterial = function (index)
	{
		return this.materials.GetMaterial (index);
	};

	/**
	* Function: Model.GetDefaultMaterial
	* Description: Returns the default material from the model. It is always exists.
	* Returns:
	*	{Material} the result
	*/
	JSM.Model.prototype.GetDefaultMaterial = function ()
	{
		return this.materials.GetDefaultMaterial ();
	};

	/**
	* Function: Model.GetMaterialSet
	* Description: Returns the material set of the model.
	* Returns:
	*	{MaterialSet} the result
	*/
	JSM.Model.prototype.GetMaterialSet = function ()
	{
		return this.materials;
	};

	/**
	* Function: Model.Count
	* Description: Returns the material count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.Model.prototype.MaterialCount = function ()
	{
		return this.materials.Count ();
	};

	/**
	* Function: Model.VertexCount
	* Description: Returns the vertex count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.Model.prototype.VertexCount = function ()
	{
		var count = 0;
		var i;
		for (i = 0; i < this.bodies.length; i++) {
			count += this.bodies[i].VertexCount ();
		}
		return count;
	};

	/**
	* Function: Model.PolygonCount
	* Description: Returns the polygon count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.Model.prototype.PolygonCount = function ()
	{
		var count = 0;
		var i;
		for (i = 0; i < this.bodies.length; i++) {
			count += this.bodies[i].PolygonCount ();
		}
		return count;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/adjacencyinfo',["../core/jsm"],function(JSM){

	/**
	* Class: VertInfo
	* Description:
	*	Contains adjacency information for a body vertex. Contains arrays
	*	with indices of connected edge and polygon info.
	*/
	JSM.VertInfo = function ()
	{
		this.edges = [];
		this.pgons = [];
	};

	/**
	* Class: EdgeInfo
	* Description:
	*	Contains adjacency information for a body edge. Contains indices
	*	of connected vertex and polygon info.
	*/
	JSM.EdgeInfo = function ()
	{
		this.vert1 = -1;
		this.vert2 = -1;
		this.pgon1 = -1;
		this.pgon2 = -1;
	};

	/**
	* Class: PolyEdgeInfo
	* Description:
	*	Contains adjacency information for a body polygon edge. Contains an index
	*	of an existing edge, and a flag which defines its direction.
	*/
	JSM.PolyEdgeInfo = function ()
	{
		this.index = -1;
		this.reverse = false;
	};

	/**
	* Class: PgonInfo
	* Description:
	*	Contains adjacency information for a body polygon. Contains arrays
	*	with indices of connected vertex and poly edge info.
	*/
	JSM.PgonInfo = function ()
	{
		this.verts = [];
		this.pedges = [];
	};

	/**
	* Class: AdjacencyInfo
	* Description:
	*	Contains adjacency information for a body. Contains arrays
	*	with vertex, edge and polygon info.
	* Parameters:
	*	body {Body} the body
	*/
	JSM.AdjacencyInfo = function (body)
	{
		this.verts = null;
		this.edges = null;
		this.pgons = null;
		this.Calculate (body);
	};

	/**
	* Function: AdjacencyInfo.Reset
	* Description: Calculates the adjacency information for a body.
	* Returns:
	*	body {Body} the body
	*/
	JSM.AdjacencyInfo.prototype.Calculate = function (body)
	{
		function AddVertex (adjacencyInfo)
		{
			var vert = new JSM.VertInfo ();
			adjacencyInfo.verts.push (vert);
		}
		
		function AddPolygon (adjacencyInfo, body, polygonIndex)
		{
			function AddEdge (adjacencyInfo, pgonInfo, fromVertexIndex, toVertexIndex, polygonIndex)
			{
				function ConnectEdge (adjacencyInfo, polygonIndex, fromVertexIndex, toVertexIndex, pedge, pgonInfo)
				{
					function ConnectPgonAndEdgeToVert (vert, pgonIndex, edgeIndex)
					{
						if (vert.edges.indexOf (edgeIndex) == -1) {
							vert.edges.push (edgeIndex);
						}
						if (vert.pgons.indexOf (pgonIndex) == -1) {
							vert.pgons.push (pgonIndex);
						}
					}
					
					pgonInfo.verts.push (fromVertexIndex);
					pgonInfo.pedges.push (pedge);
					ConnectPgonAndEdgeToVert (adjacencyInfo.verts[fromVertexIndex], polygonIndex, pedge.index);
					ConnectPgonAndEdgeToVert (adjacencyInfo.verts[toVertexIndex], polygonIndex, pedge.index);
				}
				
				var pedge = new JSM.PolyEdgeInfo ();
			
				var i, edge;
				for (i = 0; i < adjacencyInfo.edges.length; i++) {
					edge = adjacencyInfo.edges[i];
					if (edge.vert1 === fromVertexIndex && edge.vert2 === toVertexIndex) {
						pedge.index = i;
						pedge.reverse = false;
					} else if (edge.vert1 === toVertexIndex && edge.vert2 === fromVertexIndex) {
						pedge.index = i;
						pedge.reverse = true;
					}
				}

				if (pedge.index === -1) {
					var newEdge = new JSM.EdgeInfo ();
					newEdge.vert1 = fromVertexIndex;
					newEdge.vert2 = toVertexIndex;
					newEdge.pgon1 = polygonIndex;
					newEdge.pgon2 = -1;
					adjacencyInfo.edges.push (newEdge);
					
					pedge.index = adjacencyInfo.edges.length - 1;
					pedge.reverse = false;
				} else {
					var currEdge = adjacencyInfo.edges[pedge.index];
					if (currEdge.pgon1 === -1) {
						currEdge.pgon1 = polygonIndex;
					} else if (currEdge.pgon1 !== polygonIndex && currEdge.pgon2 === -1) {
						currEdge.pgon2 = polygonIndex;
					}
				}
				
				ConnectEdge (adjacencyInfo, polygonIndex, fromVertexIndex, toVertexIndex, pedge, pgonInfo);
			}

			var polygon = body.GetPolygon (polygonIndex);
			var pgon = new JSM.PgonInfo ();
			
			var i, curr, next;
			var count = polygon.VertexIndexCount ();
			for (i = 0; i < count; i++) {
				curr = polygon.GetVertexIndex (i);
				next = polygon.GetVertexIndex (i < count - 1 ? i + 1 : 0);
				AddEdge (adjacencyInfo, pgon, curr, next, polygonIndex);
			}
			adjacencyInfo.pgons.push (pgon);
		}

		this.verts = [];
		this.edges = [];
		this.pgons = [];	
		
		var i;
		for (i = 0; i < body.VertexCount (); i++) {
			AddVertex (this);
		}
		
		for (i = 0; i < body.PolygonCount (); i++) {
			AddPolygon (this, body, i);
		}
	};

	/**
	* Function: AdjacencyInfo.IsContourVertex
	* Description: Returns if the vertex has contour edge.
	* Parameters:
	*	vert {VertInfo} the vertex info
	* Returns:
	*	{boolean} the result
	*/
	JSM.AdjacencyInfo.prototype.IsContourVertex = function (vert)
	{
		var i, edge;
		for (i = 0; i < vert.edges.length; i++) {
			edge = vert.edges[i];
			if (this.IsContourEdge (this.edges[edge])) {
				return true;
			}
		}
		return false;
	};

	/**
	* Function: AdjacencyInfo.IsContourEdge
	* Description: Returns if the edge has only one polygon neighbour.
	* Parameters:
	*	edge {EdgeInfo} the edge info
	* Returns:
	*	{boolean} the result
	*/
	JSM.AdjacencyInfo.prototype.IsContourEdge = function (edge)
	{
		var pgonCount = this.GetEdgePolygonCount (edge);
		return pgonCount == 1;
	};

	/**
	* Function: AdjacencyInfo.GetEdgePolygonCount
	* Description: Returns the neighbour polygon count of the edge.
	* Parameters:
	*	edge {EdgeInfo} the edge info
	* Returns:
	*	{integer} the result
	*/
	JSM.AdjacencyInfo.prototype.GetEdgePolygonCount = function (edge)
	{
		var pgonCount = 0;
		if (edge.pgon1 != -1) {
			pgonCount += 1;
		}
		if (edge.pgon2 != -1) {
			pgonCount += 2;
		}
		return pgonCount;
	};

	/**
	* Function: AdjacencyInfo.GetAnotherPgonOfEdge
	* Description: Returns the polygon index which is next to the given polygon along an edge.
	* Parameters:
	*	edge {EdgeInfo} the edge info
	*	currentPgon {integer} the polygon index
	* Returns:
	*	{integer} the result
	*/
	JSM.AdjacencyInfo.prototype.GetAnotherPgonOfEdge = function (edge, pgon)
	{
		if (edge.pgon1 != -1 && edge.pgon1 != pgon) {
			return edge.pgon1;
		} else if (edge.pgon2 != -1 && edge.pgon2 != pgon) {
			return edge.pgon2;
		}
		return -1;
	};

	/**
	* Function: AdjacencyInfo.GetPolyEdgeStartVertex
	* Description: Returns the start vertex index of a polygon edge.
	* Parameters:
	*	polyEdge {PolyEdgeInfo} the polygon edge info
	* Returns:
	*	{integer} the result
	*/
	JSM.AdjacencyInfo.prototype.GetPolyEdgeStartVertex = function (polyEdge)
	{
		if (!polyEdge.reverse) {
			return this.edges[polyEdge.index].vert1;
		} else {
			return this.edges[polyEdge.index].vert2;
		}
	};

	/**
	* Function: AdjacencyInfo.GetPolyEdgeEndVertex
	* Description: Returns the end vertex index of a polygon edge.
	* Parameters:
	*	polyEdge {PolyEdgeInfo} the polygon edge info
	* Returns:
	*	{integer} the result
	*/
	JSM.AdjacencyInfo.prototype.GetPolyEdgeEndVertex = function (polyEdge)
	{
		if (!polyEdge.reverse) {
			return this.edges[polyEdge.index].vert2;
		} else {
			return this.edges[polyEdge.index].vert1;
		}
	};

	/**
	* Function: CalculateBodyVertexToPolygon
	* Description:
	*	Calculates an array which contains array of the connected polygon
	*	indices for all vertex indices in the body. The result is an
	*	array of array of polygon indices.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{integer[*][*]} the result
	*/
	JSM.CalculateBodyVertexToPolygon = function (body)
	{
		var result = [];
		
		var i, j;
		for (i = 0; i < body.VertexCount (); i++) {
			result.push ([]);
		}
		
		var polygon;
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			for (j = 0; j < polygon.VertexIndexCount (); j++) {
				result[polygon.GetVertexIndex (j)].push (i);
			}
		}
		
		return result;
	};

	/**
	* Function: IsSolidBody
	* Description:
	*	Returns if a given body is solid. It means that every
	*	edges of the body has two polygon neighbours.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{boolean} the result
	*/
	JSM.IsSolidBody = function (body)
	{
		var adjacencyInfo = new JSM.AdjacencyInfo (body);
		if (adjacencyInfo.edges.length === 0) {
			return false;
		}
		
		var i, edge;
		for (i = 0; i < adjacencyInfo.edges.length; i++) {
			edge = adjacencyInfo.edges[i];
			if (edge.pgon1 === -1 || edge.pgon2 === -1) {
				return false;
			}
		}
		return true;
	};

	/**
	* Function: CheckSolidBody
	* Description:
	*	Returns if a given body solid body is correct. It means that every
	*	edges of the body has two polygon neighbours, and there are no edge
	*	in the body which appears twice with the same direction.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{boolean} the result
	*/
	JSM.CheckSolidBody = function (body)
	{
		var adjacencyInfo = new JSM.AdjacencyInfo (body);
		var i, j, edge, pedge, found, pgon1, pgon2, pgon1Reverse, pgon2Reverse;
		for (i = 0; i < adjacencyInfo.edges.length; i++) {
			edge = adjacencyInfo.edges[i];
			if (edge.pgon1 === -1 || edge.pgon2 === -1) {
				return false;
			}
			
			pgon1 = adjacencyInfo.pgons[edge.pgon1];
			found = false;
			for (j = 0; j < pgon1.pedges.length; j++) {
				pedge = pgon1.pedges[j];
				if (pedge.index == i) {
					pgon1Reverse = pedge.reverse;
					found = true;
					break;
				}
			}
			if (!found) {
				return false;
			}
			
			pgon2 = adjacencyInfo.pgons[edge.pgon2];
			found = false;
			for (j = 0; j < pgon2.pedges.length; j++) {
				pedge = pgon2.pedges[j];
				if (pedge.index == i) {
					pgon2Reverse = pedge.reverse;
					found = true;
					break;
				}
			}
			if (!found) {
				return false;
			}
			
			if (pgon1Reverse == pgon2Reverse) {
				return false;
			}
		}
		return true;
	};

	/**
	* Function: TraversePgonsAlongEdges
	* Description:
	*	Traverses polygons along edges. The given callback function called on every
	*	found polygon. The return value of the callback means if the traverse should
	*	continue along the edges of the current polygon.
	* Parameters:
	*	pgonIndex {integer} the polygon index to start from
	*	adjacencyInfo {AdjacencyInfo} the adjacency info
	*	onPgonFound {function} the callback
	* Returns:
	*	{boolean} the result
	*/
	JSM.TraversePgonsAlongEdges = function (pgonIndex, adjacencyInfo, onPgonFound)
	{
		function AddNeighboursToStack (pgonIndex, adjacencyInfo, pgonStack)
		{
			var pgon = adjacencyInfo.pgons[pgonIndex];
			var i, edge, anotherPgon;
			for (i = 0; i < pgon.pedges.length; i++) {
				edge = adjacencyInfo.edges[pgon.pedges[i].index];
				anotherPgon = adjacencyInfo.GetAnotherPgonOfEdge (edge, pgonIndex);
				if (anotherPgon != -1) {
					pgonStack.push (anotherPgon);
				}
			}
		}

		var pgonIsProcessed = {};
		var pgonStack = [pgonIndex];
		var currentPgonIndex;
		while (pgonStack.length > 0) {
			currentPgonIndex = pgonStack.pop ();
			if (pgonIsProcessed[currentPgonIndex]) {
				continue;
			}
			
			pgonIsProcessed[currentPgonIndex] = true;
			if (onPgonFound (currentPgonIndex)) {
				AddNeighboursToStack (currentPgonIndex, adjacencyInfo, pgonStack);
			}
		}
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/bodyutils',["../core/jsm"],function(JSM){
	/**
	* Function: AddVertexToBody
	* Description: Adds a vertex to an existing body.
	* Parameters:
	*	body {Body} the body
	*	x {number} the x coordinate of the vertex
	*	y {number} the y coordinate of the vertex
	*	z {number} the z coordinate of the vertex
	*/
	JSM.AddVertexToBody = function (body, x, y, z)
	{
		return body.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, z)));
	};

	/**
	* Function: AddPointToBody
	* Description: Adds a point to an existing body.
	* Parameters:
	*	body {Body} the body
	*	vertex {integer} the vertex index stored in the body
	*/
	JSM.AddPointToBody = function (body, vertex)
	{
		return body.AddPoint (new JSM.BodyPoint (vertex));
	};

	/**
	* Function: AddLineToBody
	* Description: Adds a line to an existing body.
	* Parameters:
	*	body {Body} the body
	*	beg {integer} begin vertex index stored in the body
	*	end {integer} end vertex index stored in the body
	*/
	JSM.AddLineToBody = function (body, beg, end)
	{
		return body.AddLine (new JSM.BodyLine (beg, end));
	};

	/**
	* Function: AddPolygonToBody
	* Description: Adds a polygon to an existing body.
	* Parameters:
	*	body {Body} the body
	*	vertices {integer[*]} array of vertex indices stored in the body
	*/
	JSM.AddPolygonToBody = function (body, vertices)
	{
		return body.AddPolygon (new JSM.BodyPolygon (vertices));
	};

	/**
	* Function: CheckBody
	* Description:
	*	Checks if the body is correct. It means that every polygon has at least three
	*	vertices, and every point, line and polygon vertex index is valid.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{boolean} the result
	*/
	JSM.CheckBody = function (body)
	{
		var vertexCount = body.VertexCount ();
		var i, j, point, line, polygon;
		for (i = 0; i < body.PointCount (); i++) {
			point = body.GetPoint (i);
			if (point.GetVertexIndex () < 0 || point.GetVertexIndex () >= vertexCount) {
				return false;
			}
		}
		for (i = 0; i < body.LineCount (); i++) {
			line = body.GetLine (i);
			if (line.GetBegVertexIndex () < 0 || line.GetBegVertexIndex () >= vertexCount) {
				return false;
			}
			if (line.GetEndVertexIndex () < 0 || line.GetEndVertexIndex () >= vertexCount) {
				return false;
			}
		}
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			if (polygon.VertexIndexCount () < 3) {
				return false;
			}
			for (j = 0; j < polygon.VertexIndexCount (); j++) {
				if (polygon.GetVertexIndex (j) < 0 || polygon.GetVertexIndex (j) >= vertexCount) {
					return false;
				}
			}
		}
		return true;
	};

	/**
	* Function: CalculateBodyPolygonNormal
	* Description: Calculates a normal vector for a polygon stored in the body.
	* Parameters:
	*	body {Body} the body
	*	index {integer} the polygon index
	* Returns:
	*	{Vector} the result
	*/
	JSM.CalculateBodyPolygonNormal = function (body, index)
	{
		var polygon = body.GetPolygon (index);
		var count = polygon.VertexIndexCount ();

		var normal = new JSM.Vector (0.0, 0.0, 0.0);
		if (count >= 3) {
			var i, currentIndex, nextIndex, current, next;
			for (i = 0; i < count; i++) {
				currentIndex = i;
				nextIndex = (i + 1) % count;
		
				current = body.GetVertexPosition (polygon.GetVertexIndex (currentIndex));
				next = body.GetVertexPosition (polygon.GetVertexIndex (nextIndex));
		
				normal.x += (current.y - next.y) * (current.z + next.z);
				normal.y += (current.z - next.z) * (current.x + next.x);
				normal.z += (current.x - next.x) * (current.y + next.y);
			}
		}

		normal.Normalize ();
		return normal;
	};

	/**
	* Function: CalculateBodyPolygonNormals
	* Description: Calculates polygon normal vectors for all polygons stored in the body.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Vector[*]} the result
	*/
	JSM.CalculateBodyPolygonNormals = function (body)
	{
		var result = [];
		
		var i;
		for (i = 0; i < body.PolygonCount (); i++) {
			result.push (JSM.CalculateBodyPolygonNormal (body, i));
		}
		
		return result;
	};

	/**
	* Function: CalculateBodyVertexNormals
	* Description:
	*	Calculates vertex normal vectors for all vertices stored in the body.
	*	The result is an array of array with vertex normal vectors.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Vector[*][*]} the result
	*/
	JSM.CalculateBodyVertexNormals = function (body)
	{
		var result = [];
		var polygonNormals = JSM.CalculateBodyPolygonNormals (body);
		var vertexToPolygon = null;
		
		var i, j, k, polygon, normal;
		var average, count, neighbourPolygons, neighbourPolygon;
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			result[i] = [];

			if (polygon.HasCurveGroup ()) {
				if (vertexToPolygon === null) {
					vertexToPolygon = JSM.CalculateBodyVertexToPolygon (body);
				}
				for (j = 0; j < polygon.VertexIndexCount (); j++) {
					average = new JSM.Vector (0.0, 0.0, 0.0);
					count = 0;
					
					neighbourPolygons = vertexToPolygon[polygon.GetVertexIndex (j)];
					for (k = 0; k < neighbourPolygons.length; k++) {
						neighbourPolygon = body.GetPolygon (neighbourPolygons[k]);
						if (neighbourPolygon.GetCurveGroup () === polygon.GetCurveGroup ()) {
							average = JSM.CoordAdd (average, polygonNormals[neighbourPolygons[k]]);
							count++;
						}
					}
					
					average.MultiplyScalar (1.0 / count);
					average.Normalize ();
					result[i].push (average);
				}
			} else {
				normal = polygonNormals[i];
				for (j = 0; j < polygon.VertexIndexCount (); j++) {
					result[i].push (new JSM.Vector (normal.x, normal.y, normal.z));
				}
			}
		}
		
		return result;
	};

	/**
	* Function: CalculatePolygonCurveGroups
	* Description: Calculates the curve groups for a given polygon.
	* Parameters:
	*	polygon {Polygon|Polygon2D} the polygon
	*	curveAngle {number} the curve angle
	* Returns:
	*	{integer[*]} the curve groups
	*/
	JSM.CalculatePolygonCurveGroups = function (polygon, curveAngle)
	{
		var curveGroups = [];
		var count = polygon.VertexCount ();

		var i, prev;
		for (i = 0; i < count; i++) {
			curveGroups.push (0);
		}

		for (i = 0; i < count; i++) {
			prev = curveGroups[polygon.GetPrevVertex (i)];
			if (polygon.GetVertexAngle (i) > curveAngle) {
				curveGroups[i] = prev;
			} else {
				curveGroups[i] = prev + 1;
			}
		}
		
		var firstGroup = curveGroups[0];
		var lastGroup = curveGroups[count - 1];
		if (firstGroup === 0 && firstGroup != lastGroup) {
			for (i = 0; curveGroups[i] == firstGroup; i++) {
				curveGroups[i] = lastGroup;
			}
		}
		
		return curveGroups;
	};


	/**
	* Function: CalculatePolygonCentroid
	* Description: Calculates the centroid of a polygon stored in the body.
	* Parameters:
	*	body {Body} the body
	*	index {integer} the polygon index
	* Returns:
	*	{Coord} the result
	*/
	JSM.CalculatePolygonCentroid = function (body, index)
	{
		var polygon = body.GetPolygon (index);
		var count = polygon.VertexIndexCount ();
		
		var result = new JSM.Coord (0.0, 0.0, 0.0);
		var i;
		for (i = 0; i < count; i++) {
			result = JSM.CoordAdd (result, body.GetVertexPosition (polygon.GetVertexIndex (i)));
		}
		
		result.MultiplyScalar (1.0 / count);
		return result;
	};

	/**
	* Function: MakeBodyInsideOut
	* Description: Reverses all polygons orientation in the body.
	* Parameters:
	*	body {Body} the body
	*/
	JSM.MakeBodyInsideOut = function (body)
	{
		var i, polygon;
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			polygon.ReverseVertexIndices ();
		}
	};

	/**
	* Function: SoftMoveBodyVertex
	* Description: Moves a vertex and its nearby vertices depending on gaussian function.
	* Parameters:
	*	body {Body} the body
	*	index {integer} the vertex index to move
	*	radius {number} the radius of the movement
	*	direction {Vector} the direction of the movement
	*	distance {number} the distance of the movement
	*/
	JSM.SoftMoveBodyVertex = function (body, index, radius, direction, distance)
	{
		var referenceCoord = body.GetVertexPosition (index).Clone ();

		var eps = 0.00001;
		var a = distance;
		var b = 0.0;
		var c = JSM.GetGaussianCParameter (radius, a, b, eps);

		var i, currentDistance, newDistance;
		for (i = 0; i < body.VertexCount (); i++) {
			currentDistance = referenceCoord.DistanceTo (body.GetVertex (i).position);
			if (JSM.IsGreater (currentDistance, radius)) {
				continue;
			}

			newDistance = JSM.GetGaussianValue (currentDistance, distance, b, c);
			body.GetVertexPosition (i).Offset (direction, newDistance);
		}
	};

	/**
	* Function: GenerateWireBody
	* Description: Generates a body which contains only the lines from the given body.
	* Parameters:
	*	body {Body} the original body
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateWireBody = function (body)
	{
		var result = new JSM.Body ();
		
		var i;
		for (i = 0; i < body.VertexCount (); i++) {
			result.AddVertex (body.GetVertex (i).Clone ());
		}

		var adjacencyInfo = new JSM.AdjacencyInfo (body);
		var edge;
		for (i = 0; i < adjacencyInfo.edges.length; i++) {
			edge = adjacencyInfo.edges[i];
			JSM.AddLineToBody (result, edge.vert1, edge.vert2);
		}
		
		return result;
	};

	/**
	* Function: TriangulateWithCentroids
	* Description:
	*	Triangulates all polygons of the body by connecting all polygon
	*	vertices with the centroid vertex of the polygon.
	* Parameters:
	*	body {Body} the body
	*/
	JSM.TriangulateWithCentroids = function (body)
	{
		var oldPolygonCount = body.PolygonCount ();
		var i, j, centroidCoord, centroidIndex, oldPolygon, oldVertexCount, polygon, curr, next;
		for (i = 0; i < oldPolygonCount; i++) {
			centroidCoord = JSM.CalculatePolygonCentroid (body, i);
			centroidIndex = body.AddVertex (new JSM.BodyVertex (centroidCoord));
			oldPolygon = body.GetPolygon (i);
			oldVertexCount = oldPolygon.VertexIndexCount ();
			for (j = 0; j < oldVertexCount; j++) {
				curr = oldPolygon.GetVertexIndex (j);
				next = oldPolygon.GetVertexIndex (j < oldVertexCount - 1 ? j + 1 : 0);
				polygon = new JSM.BodyPolygon ([curr, next, centroidIndex]);
				polygon.InheritAttributes (oldPolygon);
				body.AddPolygon (polygon);
			}
		}
		for (i = 0; i < oldPolygonCount; i++) {
			body.RemovePolygon (0);
		}
	};

	/**
	* Function: TriangulatePolygons
	* Description: Triangulates all polygons of the body.
	* Parameters:
	*	body {Body} the body
	*/
	JSM.TriangulatePolygons = function (body)
	{
		var oldPolygonCount = body.PolygonCount ();
		var i, j, oldPolygon, polygon, coord, triangleIndices, triangle, bodyTriangle;
		for (i = 0; i < oldPolygonCount; i++) {
			oldPolygon = body.GetPolygon (i);
			polygon = new JSM.Polygon ();
			for (j = 0; j < oldPolygon.VertexIndexCount (); j++) {
				coord = body.GetVertexPosition (oldPolygon.GetVertexIndex (j));
				polygon.AddVertex (coord.x, coord.y, coord.z);
			}
			triangleIndices = JSM.TriangulatePolygon (polygon);
			if (triangleIndices !== null) {
				for (j = 0; j < triangleIndices.length; j++) {
					triangle = triangleIndices[j];
					bodyTriangle = new JSM.BodyPolygon ([
						oldPolygon.GetVertexIndex (triangle[0]),
						oldPolygon.GetVertexIndex (triangle[1]),
						oldPolygon.GetVertexIndex (triangle[2])
					]);
					bodyTriangle.InheritAttributes (oldPolygon);
					body.AddPolygon (bodyTriangle);
				}
			}
		}
		for (i = 0; i < oldPolygonCount; i++) {
			body.RemovePolygon (0);
		}
	};

	/**
	* Function: GenerateRandomMaterials
	* Description: Generates random materials for a body. A seed number can be specified.
	* Parameters:
	*	body {Body} the body
	*	materials {MaterialSet} the materials
	*	seeded {boolean} seeded random generation
	*/
	JSM.GenerateRandomMaterials = function (body, materials, seeded)
	{
		function GetRandomInt (seeded, seed)
		{
			var minColor = 0;
			var maxColor = 16777215;
			var color = 0;
			if (seeded !== undefined && seeded) {
				color = JSM.SeededRandomInt (minColor, maxColor, seed + 1);
			} else {
				color = JSM.RandomInt (minColor, maxColor);
			}
			return color;
		}
		
		var i, color, material;
		var seed = 0;
		for (i = 0; i < body.LineCount (); i++) {
			color = GetRandomInt (seeded, seed++);
			material = materials.AddMaterial (new JSM.Material ({ambient : color, diffuse : color}));
			body.GetLine (i).SetMaterialIndex (material);
		}
		for (i = 0; i < body.PointCount (); i++) {
			color = GetRandomInt (seeded, seed++);
			material = materials.AddMaterial (new JSM.Material ({ambient : color, diffuse : color}));
			body.GetPoint (i).SetMaterialIndex (material);
		}
		for (i = 0; i < body.PolygonCount (); i++) {
			color = GetRandomInt (seeded, seed++);
			material = materials.AddMaterial (new JSM.Material ({ambient : color, diffuse : color}));
			body.GetPolygon (i).SetMaterialIndex (material);
		}
	};

	/**
	* Function: AddBodyToBSPTree
	* Description: Adds a body to a BSP tree.
	* Parameters:
	*	body {Body} the body
	*	bspTree {BSPTree} the BSP tree
	*	id {anything} the id for added polygons
	*/
	JSM.AddBodyToBSPTree = function (body, bspTree, id)
	{
		function ConvertBodyPolygonToPolygon (body, index, userData)
		{
			var polygon = body.GetPolygon (index);
			userData.material = polygon.GetMaterialIndex ();
			var result = new JSM.Polygon ();
			var i, coord;
			for (i = 0; i < polygon.VertexIndexCount (); i++) {
				coord = body.GetVertexPosition (polygon.GetVertexIndex (i));
				result.AddVertex (coord.x, coord.y, coord.z);
			}
			return result;
		}

		var i, polygon, userData;
		for (i = 0; i < body.PolygonCount (); i++) {
			userData = {
				id : id,
				originalPolygon : i,
				material : -1
			};
			polygon = ConvertBodyPolygonToPolygon (body, i, userData);
			bspTree.AddPolygon (polygon, userData);
		}
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/textureutils',["../core/jsm"],function(JSM){
	/**
	* Function: CalculatePlanarTextureCoord
	* Description: Calculates the planar texture coordinate for a coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*	system {CoordSystem} the coordinate system
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.CalculatePlanarTextureCoord = function (coord, system)
	{
		var result = new JSM.Coord2D (0.0, 0.0);

		var e1 = system.e1.Clone ().Normalize ();
		var e2 = system.e2.Clone ().Normalize ();
		var e3 = JSM.VectorCross (system.e1, system.e2);

		var xyPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e3);
		var xzPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e2);
		var yzPlane = JSM.GetPlaneFromCoordAndDirection (system.origo, e1);
		
		var projected = xyPlane.ProjectCoord (coord);
		result.x = yzPlane.CoordSignedDistance (projected);
		result.y = xzPlane.CoordSignedDistance (projected);

		return result;
	};

	/**
	* Function: CalculateCubicTextureCoord
	* Description: Calculates the cubic texture coordinate for a coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*	normal {Vector} the normal vector for calculation
	*	system {CoordSystem} the coordinate system
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.CalculateCubicTextureCoord = function (coord, normal, system)
	{
		var result = new JSM.Coord2D (0.0, 0.0);

		var e1 = system.e1.Clone ().Normalize ();
		var e2 = system.e2.Clone ().Normalize ();
		var e3 = system.e3.Clone ().Normalize ();

		var correctPlane = -1;
		var maxProduct = 0.0;
		
		var i, currentDirection, product;
		for (i = 0; i < 3; i++) {
			if (i === 0) {
				currentDirection = e1;
			} else if (i === 1) {
				currentDirection = e2;
			} else if (i === 2) {
				currentDirection = e3;
			}

			product = Math.abs (JSM.VectorDot (normal, currentDirection));
			if (JSM.IsGreater (product, maxProduct)) {
				correctPlane = i;
				maxProduct = product;
			}
		}

		if (correctPlane === -1) {
			return result;
		}

		var planeSystem = null;
		if (correctPlane === 0) {
			planeSystem = new JSM.CoordSystem (
				system.origo,
				e2,
				e3,
				new JSM.Coord (0.0, 0.0, 0.0)
			);
		} else if (correctPlane === 1) {
			planeSystem = new JSM.CoordSystem (
				system.origo,
				e1,
				e3,
				new JSM.Coord (0.0, 0.0, 0.0)
			);
		} else if (correctPlane === 2) {
			planeSystem = new JSM.CoordSystem (
				system.origo,
				e1,
				e2,
				new JSM.Coord (0.0, 0.0, 0.0)
			);
		}
		
		if (planeSystem === null) {
			return result;
		}

		return JSM.CalculatePlanarTextureCoord (coord, planeSystem);
	};

	/**
	* Function: CalculateCylindricalTextureCoord
	* Description: Calculates the cylindrical texture coordinate for a coordinate.
	* Parameters:
	*	coord {Coord} the coordinate
	*	normal {Vector} the normal vector for calculation
	*	system {CoordSystem} the coordinate system
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.CalculateCylindricalTextureCoord = function (coord, normal, system)
	{
		var result = new JSM.Coord2D (0.0, 0.0);

		var e3Direction = system.e3.Clone ().Normalize ();
		if (e3Direction.IsCollinearWith (normal)) {
			result = JSM.CalculateCubicTextureCoord (coord, normal, system);
			return [result, 0.0];
		}

		var baseLine = new JSM.Line (system.origo, e3Direction);
		var projectedCoord = baseLine.ProjectCoord (coord);
		var projectedDistance = JSM.CoordSignedDistance (system.origo, projectedCoord, e3Direction);

		var e1Direction = system.e1.Clone ().Normalize ();
		var coordDirection = JSM.CoordSub (coord, projectedCoord);
		var angle = JSM.GetVectorsFullAngle (coordDirection, e1Direction, e3Direction);
		var radius = system.e1.Length ();

		result.x = angle * radius;
		result.y = projectedDistance;
		return [result, angle];
	};

	/**
	* Function: CalculatePolygonPlanarTextureCoords
	* Description: Calculates the planar texture coordinates for a polygon.
	* Parameters:
	*	body {Body} the body
	*	index {integer} the polygon index
	* Returns:
	*	{Coord2D[*]} the result
	*/
	JSM.CalculatePolygonPlanarTextureCoords = function (body, index)
	{
		var result = [];
		var polygon = body.GetPolygon (index);
		var system = body.GetTextureProjection ().GetCoords ();

		var i, coord;
		for (i = 0; i < polygon.VertexIndexCount (); i++) {
			coord = body.GetVertexPosition (polygon.GetVertexIndex (i));
			result.push (JSM.CalculatePlanarTextureCoord (coord, system));
		}
		
		return result;
	};

	/**
	* Function: CalculatePolygonCubicTextureCoords
	* Description: Calculates the cubic texture coordinates for a polygon.
	* Parameters:
	*	body {Body} the body
	*	index {integer} the polygon index
	*	normal {Vector} the normal vector for calculation
	* Returns:
	*	{Coord2D[*]} the result
	*/
	JSM.CalculatePolygonCubicTextureCoords = function (body, index, normal)
	{
		var result = [];
		var polygon = body.GetPolygon (index);
		var system = body.GetTextureProjection ().GetCoords ();

		var i, coord;
		for (i = 0; i < polygon.VertexIndexCount (); i++) {
			coord = body.GetVertexPosition (polygon.GetVertexIndex (i));
			result.push (JSM.CalculateCubicTextureCoord (coord, normal, system));
		}
		
		return result;
	};

	/**
	* Function: CalculatePolygonCylindricalTextureCoords
	* Description: Calculates the cylindrical texture coordinates for a polygon.
	* Parameters:
	*	body {Body} the body
	*	index {integer} the polygon index
	*	normal {Vector} the normal vector for calculation
	* Returns:
	*	{Coord2D[*]} the result
	*/
	JSM.CalculatePolygonCylindricalTextureCoords = function (body, index, normal)
	{
		var result = [];
		var angles = [];

		var polygon = body.GetPolygon (index);
		var system = body.GetTextureProjection ().GetCoords ();

		var i, j, coord, textureValues;
		for (i = 0; i < polygon.VertexIndexCount (); i++) {
			coord = body.GetVertexPosition (polygon.GetVertexIndex (i));
			textureValues = JSM.CalculateCylindricalTextureCoord (coord, normal, system);
			result.push (textureValues[0]);
			angles.push (textureValues[1]);
		}

		var e3Direction = system.e3.Clone ().Normalize ();
		if (e3Direction.IsCollinearWith (normal)) {
			return result;
		}
		
		var needRepair = false;
		for (i = 0; i < angles.length; i++) {
			for (j = i + 1; j < angles.length; j++) {
				if (JSM.IsGreater (Math.abs (angles[i] - angles[j]), Math.PI)) {
					needRepair = true;
					break;
				}
			}
			if (needRepair) {
				break;
			}
		}

		if (needRepair) {
			var radius = system.e1.Length ();
			for (i = 0; i < angles.length; i++) {
				if (JSM.IsLower (angles[i], Math.PI)) {
					result[i].x = radius * (angles[i] + 2.0 * Math.PI);
				}
			}
		}
		
		return result;
	};

	/**
	* Function: CalculateBodyPlanarTextureCoords
	* Description: Calculates the planar texture coordinates for a body.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Coord2D[*][*]} the result
	*/
	JSM.CalculateBodyPlanarTextureCoords = function (body)
	{
		var result = [];
		var i;
		for (i = 0; i < body.PolygonCount (); i++) {
			result.push (JSM.CalculatePolygonPlanarTextureCoords (body, i));
		}
		return result;
	};

	/**
	* Function: CalculateBodyCubicTextureCoords
	* Description: Calculates the cubic texture coordinates for a body.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Coord2D[*][*]} the result
	*/
	JSM.CalculateBodyCubicTextureCoords = function (body)
	{
		var result = [];
		var polygonNormals = JSM.CalculateBodyPolygonNormals (body);
		var i, normal;
		for (i = 0; i < body.PolygonCount (); i++) {
			normal = polygonNormals[i];
			result.push (JSM.CalculatePolygonCubicTextureCoords (body, i, normal));
		}
		return result;
	};

	/**
	* Function: CalculateBodyCylindricalTextureCoords
	* Description: Calculates the cylindrical texture coordinates for a body.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Coord2D[*][*]} the result
	*/
	JSM.CalculateBodyCylindricalTextureCoords = function (body)
	{
		var result = [];
		var polygonNormals = JSM.CalculateBodyPolygonNormals (body);
		var i, normal;
		for (i = 0; i < body.PolygonCount (); i++) {
			normal = polygonNormals[i];
			result.push (JSM.CalculatePolygonCylindricalTextureCoords (body, i, normal));
		}
		return result;
	};

	/**
	* Function: CalculateBodyTextureCoords
	* Description:
	*	Calculates the texture coordinates for a body. The result
	*	is an array of arrays of texture coordinates.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Coord2D[*][*]} the result
	*/
	JSM.CalculateBodyTextureCoords = function (body)
	{
		var result = [];
		var projection = body.GetTextureProjection ().GetType ();
		if (projection === JSM.TextureProjectionType.Planar) {
			result = JSM.CalculateBodyPlanarTextureCoords (body);
		} else if (projection === JSM.TextureProjectionType.Cubic) {
			result = JSM.CalculateBodyCubicTextureCoords (body);
		} else if (projection === JSM.TextureProjectionType.Cylindrical) {
			result = JSM.CalculateBodyCylindricalTextureCoords (body);
		}

		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/cututils',["../core/jsm"],function(JSM){
	/**
	* Function: CutBodyByPlane
	* Description: Cuts a body by a plane.
	* Parameters:
	*	body {Body} the body
	*	plane {Plane} the plane
	* Returns:
	*	{Body} the result
	*/
	JSM.CutBodyByPlane = function (body, plane)
	{
		function CutBodyPolygonByPlane (polygon, plane, indexTable)
		{
			function AddOriginalVertex (index, vertex, rawResult, rawIndexTable)
			{
				rawResult.push (new JSM.Coord (vertex.x, vertex.y, vertex.z));
				rawIndexTable.push (index);
			}

			function AddIntersectionVertex (from, to, rawResult, rawIndexTable)
			{
				var direction = JSM.CoordSub (polygon[to], polygon[from]).Normalize ();
				var line = new JSM.Line (polygon[from], direction);
				var intersection = plane.LineIntersection (line);
				rawResult.push (new JSM.Coord (intersection.x, intersection.y, intersection.z));
				rawIndexTable.push (-1);
			}

			var hasIndexTable = (indexTable !== undefined && indexTable !== null);
			var count = polygon.length;
			var result = [];
			var front = [];
			
			var needCut = false;
			var i, position, vertex;
			for (i = 0; i < count; i++) {
				vertex = polygon[i];
				position = plane.CoordPosition (vertex);
				front.push (position !== JSM.CoordPlanePosition.CoordAtBackOfPlane);
				if (i > 0 && front[i - 1] !== front[i]) {
					needCut = true;
				}
			}
			
			if (!needCut) {
				if (front[0] === false) {
					return result;
				}
				
				for (i = 0; i < count; i++) {
					vertex = polygon[i];
					result.push (new JSM.Coord (vertex.x, vertex.y, vertex.z));
					if (hasIndexTable) {
						indexTable.push (i);
					}
				}
				return result;
			}
			
			var rawResult = [];
			var rawIndexTable = [];

			var from, to;
			for (i = 0; i < count; i++) {
				from = i - 1;
				to = i;
				if (i === 0) {
					from = count - 1;
				}

				vertex = polygon[to];
				if (front[to]) {
					if (!front[from]) {
						AddIntersectionVertex (from, to, rawResult, rawIndexTable);
					}
					AddOriginalVertex (to, vertex, rawResult, rawIndexTable);
				} else {
					if (front[from]) {
						AddIntersectionVertex (from, to, rawResult, rawIndexTable);
					}
				}
			}

			var currentVertex;
			var currentIndex;
			var lastVertex;
			var lastIndex;
			for (i = 0; i < rawResult.length; i++) {
				currentVertex = rawResult[i];
				lastVertex = result[result.length - 1];
				if (i === 0 || !lastVertex.IsEqual (currentVertex)) {
					result.push (new JSM.Coord (currentVertex.x, currentVertex.y, currentVertex.z));
					if (hasIndexTable) {
						currentIndex = rawIndexTable[i];
						indexTable.push (currentIndex);
					}
				} else {
					if (hasIndexTable) {
						currentIndex = rawIndexTable[i];
						lastIndex = rawIndexTable[i - 1];
						if (currentIndex !== -1) {
							indexTable[indexTable.length - 1] = currentIndex;
						} else if (lastIndex !== -1) {
							indexTable[indexTable.length - 1] = lastIndex;
						}
					}
				}
			}
			
			return result;
		}

		function GetInsertedVertexIndex (result, vertex, originalVertexCount)
		{
			var index = -1;
		
			var i;
			for (i = originalVertexCount; i < result.VertexCount (); i++) {
				if (vertex.IsEqual (result.GetVertexPosition (i))) {
					index = i;
					break;
				}
			}
			
			if (index === -1) {
				index = result.AddVertex (new JSM.BodyVertex (new JSM.Coord (vertex.x, vertex.y, vertex.z)));
			}
			
			return index;
		}

		var result = new JSM.Body ();

		var cuttedPolygons = [];
		var cuttedIndexTables = [];
		
		var remainsVertex = [];
		var originalOldToNewIndex = [];
		
		var i, j, polygon, polygon3D, vertexPosition;
		var cuttedPolygon, indexTable;
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			
			polygon3D = [];
			for (j = 0; j < polygon.VertexIndexCount (); j++) {
				vertexPosition = body.GetVertexPosition (polygon.GetVertexIndex (j));
				polygon3D.push (new JSM.Coord (vertexPosition.x, vertexPosition.y, vertexPosition.z));
			}
			
			indexTable = [];
			cuttedPolygon = CutBodyPolygonByPlane (polygon3D, plane, indexTable);
			for (j = 0; j < indexTable.length; j++) {
				if (indexTable[j] !== -1) {
					remainsVertex[polygon.GetVertexIndex (indexTable[j])] = true;
				}
			}

			cuttedPolygons.push (cuttedPolygon);
			cuttedIndexTables.push (indexTable);
		}

		var vertex;
		for (i = 0; i < body.VertexCount (); i++) {
			if (remainsVertex[i]) {
				vertex = body.GetVertexPosition (i);
				originalOldToNewIndex[i] = result.AddVertex (new JSM.BodyVertex (new JSM.Coord (vertex.x, vertex.y, vertex.z)));
			}
		}

		var originalVertexCount = result.VertexCount ();

		var newPolygon, newPolygonVertices;
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			cuttedPolygon = cuttedPolygons[i];
			indexTable = cuttedIndexTables[i];
			if (indexTable.length === 0) {
				continue;
			}

			newPolygonVertices = [];
			for (j = 0; j < indexTable.length; j++) {
				if (indexTable[j] !== -1) {
					newPolygonVertices.push (originalOldToNewIndex[polygon.GetVertexIndex (indexTable[j])]);
				} else {
					vertex = cuttedPolygon[j];
					newPolygonVertices.push (GetInsertedVertexIndex (result, vertex, originalVertexCount));
				}
			}
			
			newPolygon = new JSM.BodyPolygon (newPolygonVertices);
			newPolygon.InheritAttributes (polygon);
			result.AddPolygon (newPolygon);
		}

		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/generator',["../core/jsm"],function(JSM){
	/**
	* Function: GenerateRectangle
	* Description: Generates a rectangle.
	* Parameters:
	*	xSize {number} x size
	*	ySize {number} y size
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRectangle = function (xSize, ySize)
	{
		var result = new JSM.Body ();

		var x = xSize / 2.0;
		var y = ySize / 2.0;
		
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, 0.0)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, 0.0)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, 0.0)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, 0.0)));

		result.AddPolygon (new JSM.BodyPolygon ([0, 1, 2, 3]));

		result.SetCubicTextureProjection (new JSM.Coord (-x, -y, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateCuboid
	* Description: Generates a cuboid.
	* Parameters:
	*	xSize {number} x size
	*	ySize {number} y size
	*	zSize {number} z size
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCuboid = function (xSize, ySize, zSize)
	{
		var result = new JSM.Body ();

		var x = xSize / 2.0;
		var y = ySize / 2.0;
		var z = zSize / 2.0;
		
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, z)));

		result.AddPolygon (new JSM.BodyPolygon ([0, 1, 2, 3]));
		result.AddPolygon (new JSM.BodyPolygon ([1, 5, 6, 2]));
		result.AddPolygon (new JSM.BodyPolygon ([5, 4, 7, 6]));
		result.AddPolygon (new JSM.BodyPolygon ([4, 0, 3, 7]));
		result.AddPolygon (new JSM.BodyPolygon ([0, 4, 5, 1]));
		result.AddPolygon (new JSM.BodyPolygon ([3, 2, 6, 7]));

		result.SetCubicTextureProjection (new JSM.Coord (-x, -y, -z), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateCuboidSides
	* Description:
	*	Generates the specified sides of a cuboid. The last parameter is
	*	a boolean array which defines sides visibility.
	* Parameters:
	*	xSize {number} x size
	*	ySize {number} y size
	*	zSize {number} z size
	*	sides {boolean[]} sides visibility
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCuboidSides = function (xSize, ySize, zSize, sides)
	{
		var result = new JSM.Body ();

		var x = xSize / 2.0;
		var y = ySize / 2.0;
		var z = zSize / 2.0;
		
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, -y, z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, -y, z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, -z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (x, y, z)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-x, y, z)));

		if (sides[0]) { result.AddPolygon (new JSM.BodyPolygon ([0, 1, 2, 3])); }
		if (sides[1]) { result.AddPolygon (new JSM.BodyPolygon ([1, 5, 6, 2])); }
		if (sides[2]) { result.AddPolygon (new JSM.BodyPolygon ([5, 4, 7, 6])); }
		if (sides[3]) { result.AddPolygon (new JSM.BodyPolygon ([4, 0, 3, 7])); }
		if (sides[4]) { result.AddPolygon (new JSM.BodyPolygon ([0, 4, 5, 1])); }
		if (sides[5]) { result.AddPolygon (new JSM.BodyPolygon ([3, 2, 6, 7])); }

		result.SetCubicTextureProjection (new JSM.Coord (-x, -y, -z), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateSegmentedRectangle
	* Description:	Generates a segmented rectangle.
	* Parameters:
	*	xSize {number} x size
	*	ySize {number} y size
	*	xSegmentation {integer} segmentation along x side
	*	ySegmentation {integer} segmentation along y side
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSegmentedRectangle = function (xSize, ySize, xSegmentation, ySegmentation)
	{
		function AddVertices ()
		{
			var i, j, coord;

			for (i = 0; i <= ySegmentation; i++) {
				for (j = 0; j <= xSegmentation; j++) {
					coord = new JSM.Coord (j * xSegment - xStart, i * ySegment - yStart, 0.0);
					result.AddVertex (new JSM.BodyVertex (coord));
				}
			}
		}

		function AddPolygons ()
		{
			var i, j;
			var current, next, top, ntop;
			
			for (j = 0; j < ySegmentation; j++) {
				for (i = 0; i < xSegmentation; i++) {
					current = j * (xSegmentation + 1) + i;
					next = current + 1;
					top = current + xSegmentation + 1;
					ntop = top + 1;
					result.AddPolygon (new JSM.BodyPolygon ([current, next, ntop, top]));
				}
			}
		}

		var result = new JSM.Body ();
		
		var xStart = xSize / 2.0;
		var yStart = ySize / 2.0;
		var xSegment = xSize / xSegmentation;
		var ySegment = ySize / ySegmentation;
		
		AddVertices ();
		AddPolygons ();

		return result;
	};

	/**
	* Function: GenerateSegmentedCuboid
	* Description:	Generates a segmented cuboid.
	* Parameters:
	*	xSize {number} x size
	*	ySize {number} y size
	*	zSize {number} z size
	*	segmentation {integer} segmentation of the sides
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSegmentedCuboid = function (xSize, ySize, zSize, segmentation)
	{
		function GetLevelOffset (level)
		{
			var offset = 0;
			if (level > 0 && level <= segmentation) {
				offset = (segmentation + 1) * (segmentation + 1) + (level - 1) * (segmentation * 4);
			}
			return offset;
		}

		function GetLevelSideVertices (level)
		{
			var i;
			
			var vertices = [];
			var offset = GetLevelOffset (level);
			if (level === 0 || level === segmentation) {
				for (i = 0; i <= segmentation; i++) {
					vertices.push (offset + i);
				}
				for (i = 1; i <= segmentation; i++) {
					vertices.push (offset + (i + 1) * segmentation + i);
				}
				for (i = segmentation - 1; i >= 0; i--) {
					vertices.push (offset + (segmentation + 1) * segmentation + i);
				}
				for (i = segmentation - 1; i > 0; i--) {
					vertices.push (offset + i * (segmentation + 1));
				}
			} else if (level > 0 && level < segmentation) {
				for (i = 0; i <= segmentation; i++) {
					vertices.push (offset + i);
				}
				for (i = 1; i < segmentation; i++) {
					vertices.push (offset + segmentation + 2 * i);
				}
				for (i = segmentation; i >= 0; i--) {
					vertices.push (offset + (3 * segmentation) + i - 1);
				}
				for (i = segmentation - 1; i > 0; i--) {
					vertices.push (offset + segmentation + 2 * i - 1);
				}
			}
			
			return vertices;
		}

		function AddVertices (level)
		{
			var i, j, coord;

			var zCoord = level * zSegment;
			if (level === 0 || level === segmentation) {
				for (i = 0; i <= segmentation; i++) {
					for (j = 0; j <= segmentation; j++) {
						coord = new JSM.Coord (j * xSegment - xStart, i * ySegment - yStart, zCoord - zStart);
						result.AddVertex (new JSM.BodyVertex (coord));
					}
				}
			} else if (level > 0 && level < segmentation) {
				for (i = 0; i <= segmentation; i++) {
					for (j = 0; j <= segmentation; j++) {
						if (i === 0 || i === segmentation || j === 0 || j === segmentation) {
							coord = new JSM.Coord (j * xSegment - xStart, i * ySegment - yStart, zCoord - zStart);
							result.AddVertex (new JSM.BodyVertex (coord));
						}
					}
				}
			}
		}

		function AddPolygons (level)
		{
			var i, j;
			var current, next, top, ntop;
			
			if (level === 0 || level === segmentation) {
				var offset = GetLevelOffset (level);
				for (i = 0; i < segmentation; i++) {
					for (j = 0; j < segmentation; j++) {
						current = offset + i * (segmentation + 1) + j;
						next = current + 1;
						top = current + segmentation + 1;
						ntop = top + 1;
						if (level === 0) {
							result.AddPolygon (new JSM.BodyPolygon ([current, top, ntop, next]));
						} else {
							result.AddPolygon (new JSM.BodyPolygon ([current, next, ntop, top]));
						}
					}
				}
			}
			
			if (level > 0 && level <= segmentation) {
				var prevSideVertices = levelSideVertices [level - 1];
				var currSideVertices = levelSideVertices [level];
				for (i = 0; i < segmentation * 4; i++) {
					current = prevSideVertices[i];
					top = currSideVertices[i];
					if (i < segmentation * 4 - 1) {
						next = prevSideVertices[i + 1];
						ntop = currSideVertices[i + 1];
					} else {
						next = prevSideVertices[0];
						ntop = currSideVertices[0];
					}
					result.AddPolygon (new JSM.BodyPolygon ([current, next, ntop, top]));
				}
			}
		}

		var result = new JSM.Body ();

		var xStart = xSize / 2.0;
		var yStart = ySize / 2.0;
		var zStart = zSize / 2.0;
		
		var xSegment = xSize / segmentation;
		var ySegment = ySize / segmentation;
		var zSegment = zSize / segmentation;
		
		var i;
		for (i = 0; i <= segmentation; i++) {
			AddVertices (i);
		}
		
		var levelSideVertices = [];
		for (i = 0; i <= segmentation; i++) {
			levelSideVertices.push (GetLevelSideVertices (i));
		}

		for (i = 0; i <= segmentation; i++) {
			AddPolygons (i);
		}

		return result;
	};

	/**
	* Function: GenerateCircle
	* Description:	Generates a circle.
	* Parameters:
	*	radius {number} the radius of the circle
	*	segmentation {integer} the segmentation of the circle
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCircle = function (radius, segmentation)
	{
		var result = new JSM.Body ();
		var segments = segmentation;

		var theta = 2.0 * Math.PI;
		var step = 2.0 * Math.PI / segments;
		
		var circlePoints = JSM.GenerateCirclePoints (radius, segmentation);
		var i;
		for (i = 0; i < circlePoints.length; i++) {
			result.AddVertex (new JSM.BodyVertex (circlePoints[i]));
			theta += step;
		}

		var topPolygon = new JSM.BodyPolygon ([]);
		for (i = 0; i < segments; i++) {
			topPolygon.AddVertexIndex (i);
		}
		result.AddPolygon (topPolygon);

		result.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), radius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateSphere
	* Description: Generates a sphere.
	* Parameters:
	*	radius {number} the radius of the sphere
	*	segmentation {integer} the segmentation of the sphere
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSphere = function (radius, segmentation, isCurved)
	{
		var result = new JSM.Body ();

		var segments = segmentation;
		var circle = segments * 2;

		var topIndex = result.AddVertex (new JSM.BodyVertex (JSM.SphericalToCartesian (radius, 0.0, 0.0)));
		var step = Math.PI / segments;
		var theta = step;
		
		var i, j, phi;
		for (i = 1; i < segments; i++) {
			phi = 0;
			for (j = 0; j < circle; j++) {
				result.AddVertex (new JSM.BodyVertex (JSM.SphericalToCartesian (radius, theta, phi)));
				phi += step;
			}
			theta += step;
		}
		var bottomIndex = result.AddVertex (new JSM.BodyVertex (JSM.SphericalToCartesian (-radius, 0.0, 0.0)));

		var offset, current, next, top, ntop, polygon;
		for (i = 1; i <= segments; i++) {
			if (i === 1) {
				offset = 1;
				for (j = 0; j < circle; j++) {
					current = offset + j;
					next = current + 1;
					if (j === circle - 1) {
						next = offset;
					}

					polygon = new JSM.BodyPolygon ([current, next, topIndex]);
					if (isCurved) {
						polygon.SetCurveGroup (0);
					}
					result.AddPolygon (polygon);
				}
			} else if (i < segments) {
				offset = (i - 1) * circle + 1;
				for (j = 0; j < circle; j++) {
					current = offset + j;
					next = current + 1;
					top = current - circle;
					ntop = top + 1;

					if (j === circle - 1) {
						next = offset;
						ntop = offset - circle;
					}
					
					polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
					if (isCurved) {
						polygon.SetCurveGroup (0);
					}
					result.AddPolygon (polygon);
				}
			} else if (i === segments) {
				offset = (i - 2) * circle + 1;
				for (j = 0; j < circle; j++) {
					current = offset + j;
					next = current + 1;
					if (j === circle - 1) {
						next = offset;
					}
					
					polygon = new JSM.BodyPolygon ([current, bottomIndex, next]);
					if (isCurved) {
						polygon.SetCurveGroup (0);
					}
					result.AddPolygon (polygon);
				}
			}
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateTriangulatedSphere
	* Description: Generates a sphere from triangles.
	* Parameters:
	*	radius {number} the radius of the sphere
	*	iterations {integer} the iteration number
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTriangulatedSphere = function (radius, iterations, isCurved)
	{
		function GenerateIcosahedron () {
			var result = new JSM.Body ();

			var a = 1.0;
			var b = 0.0;
			var c = (1.0 + Math.sqrt (5.0)) / 2.0;

			JSM.AddVertexToBody (result, +b, +a, +c);
			JSM.AddVertexToBody (result, +b, +a, -c);
			JSM.AddVertexToBody (result, +b, -a, +c);
			JSM.AddVertexToBody (result, +b, -a, -c);

			JSM.AddVertexToBody (result, +a, +c, +b);
			JSM.AddVertexToBody (result, +a, -c, +b);
			JSM.AddVertexToBody (result, -a, +c, +b);
			JSM.AddVertexToBody (result, -a, -c, +b);

			JSM.AddVertexToBody (result, +c, +b, +a);
			JSM.AddVertexToBody (result, -c, +b, +a);
			JSM.AddVertexToBody (result, +c, +b, -a);
			JSM.AddVertexToBody (result, -c, +b, -a);

			JSM.AddPolygonToBody (result, [0, 2, 8]);
			JSM.AddPolygonToBody (result, [0, 4, 6]);
			JSM.AddPolygonToBody (result, [0, 6, 9]);
			JSM.AddPolygonToBody (result, [0, 8, 4]);
			JSM.AddPolygonToBody (result, [0, 9, 2]);
			JSM.AddPolygonToBody (result, [1, 3, 11]);
			JSM.AddPolygonToBody (result, [1, 4, 10]);
			JSM.AddPolygonToBody (result, [1, 6, 4]);
			JSM.AddPolygonToBody (result, [1, 10, 3]);
			JSM.AddPolygonToBody (result, [1, 11, 6]);
			JSM.AddPolygonToBody (result, [2, 5, 8]);
			JSM.AddPolygonToBody (result, [2, 7, 5]);
			JSM.AddPolygonToBody (result, [2, 9, 7]);
			JSM.AddPolygonToBody (result, [3, 5, 7]);
			JSM.AddPolygonToBody (result, [3, 7, 11]);
			JSM.AddPolygonToBody (result, [3, 10, 5]);
			JSM.AddPolygonToBody (result, [4, 8, 10]);
			JSM.AddPolygonToBody (result, [6, 11, 9]);
			JSM.AddPolygonToBody (result, [5, 10, 8]);
			JSM.AddPolygonToBody (result, [7, 9, 11]);

			return result;
		}

		var result = GenerateIcosahedron ();
		
		var currentRadius = result.GetVertexPosition (0).Length ();
		var scale = radius / currentRadius;

		var i, j, vertex;
		for (i = 0; i < result.VertexCount (); i++) {
			vertex = result.GetVertex (i);
			vertex.position.MultiplyScalar (scale);
		}
		
		var iteration, oldVertexCoord, oldBody, adjacencyInfo;
		var currentEdge, edgeVertexIndices;
		var currentPgon, polygonVertexIndices;
		var edgeCoord, currentPolyEdge;
		for (iteration = 0; iteration < iterations; iteration++) {
			oldBody = result;
			
			result = new JSM.Body ();
			adjacencyInfo = new JSM.AdjacencyInfo (oldBody);
			for (i = 0; i < adjacencyInfo.verts.length; i++) {
				oldVertexCoord = oldBody.GetVertexPosition (i);
				JSM.AddVertexToBody (result, oldVertexCoord.x, oldVertexCoord.y, oldVertexCoord.z);
			}
			
			edgeVertexIndices = [];
			for (i = 0; i < adjacencyInfo.edges.length; i++) {
				currentEdge = adjacencyInfo.edges[i];
				edgeCoord = JSM.MidCoord (oldBody.GetVertexPosition (currentEdge.vert1), oldBody.GetVertexPosition (currentEdge.vert2));
				edgeVertexIndices.push (result.AddVertex (new JSM.BodyVertex (edgeCoord.SetLength (radius))));
			}

			for (i = 0; i < adjacencyInfo.pgons.length; i++) {
				currentPgon = adjacencyInfo.pgons[i];
				polygonVertexIndices = [];
				for (j = 0; j < currentPgon.pedges.length; j++) {
					currentPolyEdge = currentPgon.pedges[j];
					polygonVertexIndices.push (adjacencyInfo.GetPolyEdgeStartVertex (currentPolyEdge));
					polygonVertexIndices.push (edgeVertexIndices[currentPolyEdge.index]);
				}

				JSM.AddPolygonToBody (result, [polygonVertexIndices[0], polygonVertexIndices[1], polygonVertexIndices[5]]);
				JSM.AddPolygonToBody (result, [polygonVertexIndices[1], polygonVertexIndices[2], polygonVertexIndices[3]]);
				JSM.AddPolygonToBody (result, [polygonVertexIndices[3], polygonVertexIndices[4], polygonVertexIndices[5]]);
				JSM.AddPolygonToBody (result, [polygonVertexIndices[1], polygonVertexIndices[3], polygonVertexIndices[5]]);
			}
		}

		if (isCurved) {
			for (i = 0; i < result.PolygonCount (); i++) {
				result.GetPolygon (i).SetCurveGroup (0);
			}
		}
		
		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateCylinder
	* Description: Generates a cylinder.
	* Parameters:
	*	radius {number} the radius of the cylinder
	*	height {number} the height of the cylinder
	*	segmentation {integer} the segmentation of the top and bottom polygons
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCylinder = function (radius, height, segmentation, withTopAndBottom, isCurved)
	{
		var result = new JSM.Body ();
		var segments = segmentation;

		var theta = 2.0 * Math.PI;
		var step = 2.0 * Math.PI / segments;
		
		var i;
		for (i = 0; i < segments; i++) {
			result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, height / 2.0, theta)));
			result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, -height / 2.0, theta)));
			theta -= step;
		}

		var current, next, polygon;
		for (i = 0; i < segments; i++) {
			current = 2 * i;
			next = current + 2;
			if (i === segments - 1) {
				next = 0;
			}
			polygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);
			if (isCurved) {
				polygon.SetCurveGroup (0);
			}
			result.AddPolygon (polygon);
		}

		if (withTopAndBottom) {
			var topPolygon = new JSM.BodyPolygon ([]);
			var bottomPolygon = new JSM.BodyPolygon ([]);
			for (i = 0; i < segments; i++) {
				topPolygon.AddVertexIndex (2 * (segments - i - 1));
				bottomPolygon.AddVertexIndex (2 * i + 1);
			}
			result.AddPolygon (topPolygon);
			result.AddPolygon (bottomPolygon);
		}

		result.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, -(height / 2.0)), radius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GeneratePie
	* Description: Generates a pie.
	* Parameters:
	*	radius {number} the radius of the pie
	*	height {number} the height of the pie
	*	angle {number} the angle of the pie
	*	segmentation {integer} the segmentation of the top and bottom polygons
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePie = function (radius, height, angle, segmentation, withTopAndBottom, isCurved)
	{
		var result = new JSM.Body ();
		var segments = segmentation;

		var theta = angle;
		var step = angle / (segments - 1);
		
		var i;
		result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, height / 2.0, 0.0)));
		result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, -height / 2.0, 0.0)));
		for (i = 0; i < segments; i++) {
			result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, height / 2.0, theta)));
			result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (radius, -height / 2.0, theta)));
			theta -= step;
		}

		var current, next, polygon;
		for (i = 0; i <= segments; i++) {
			current = 2 * i;
			next = current + 2;
			if (i === segments) {
				next = 0;
			}
			polygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);
			if (isCurved && i > 0 && i < segments) {
				polygon.SetCurveGroup (0);
			}
			result.AddPolygon (polygon);
		}

		if (withTopAndBottom) {
			var topPolygon = new JSM.BodyPolygon ([]);
			var bottomPolygon = new JSM.BodyPolygon ([]);
			for (i = 0; i <= segments; i++) {
				topPolygon.AddVertexIndex (2 * (segments - i));
				bottomPolygon.AddVertexIndex (2 * i + 1);
			}
			result.AddPolygon (topPolygon);
			result.AddPolygon (bottomPolygon);
		}

		result.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, -(height / 2.0)), radius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateCone
	* Description: Generates a cone.
	* Parameters:
	*	topRadius {number} the top radius of the cone
	*	bottomRadius {number} the bottom radius of the cone
	*	height {number} the height of the cone
	*	segmentation {integer} the segmentation of the top and bottom polygons
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCone = function (topRadius, bottomRadius, height, segmentation, withTopAndBottom, isCurved)
	{
		var result = new JSM.Body ();
		var segments = segmentation;

		var topDegenerated = (JSM.IsZero (topRadius));
		var bottomDegenerated = (JSM.IsZero (bottomRadius));

		var theta = 2.0 * Math.PI;
		var step = 2.0 * Math.PI / segments;

		if (topDegenerated) {
			result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, height / 2.0, 0.0)));
		}
		
		var i;
		for (i = 0; i < segments; i++) {
			if (!topDegenerated) {
				result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (topRadius, height / 2.0, theta)));
			}
			if (!bottomDegenerated) {
				result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (bottomRadius, -height / 2.0, theta)));
			}
			theta -= step;
		}
		if (bottomDegenerated) {
			result.AddVertex (new JSM.BodyVertex (JSM.CylindricalToCartesian (0.0, -height / 2.0, 0.0)));
		}

		var current, next, polygon;
		for (i = 0; i < segments; i++) {
			if (topDegenerated) {
				current = i + 1;
				next = current + 1;
				if (i === segments - 1) {
					next = 1;
				}
				polygon = new JSM.BodyPolygon ([0, next, current]);
				if (isCurved) {
					polygon.SetCurveGroup (0);
				}
				result.AddPolygon (polygon);
			} else if (bottomDegenerated) {
				current = i;
				next = current + 1;
				if (i === segments - 1) {
					next = 0;
				}
				polygon = new JSM.BodyPolygon ([current, next, segments]);
				if (isCurved) {
					polygon.SetCurveGroup (0);
				}
				result.AddPolygon (polygon);
			} else {
				current = 2 * i;
				next = current + 2;
				if (i === segments - 1) {
					next = 0;
				}
				polygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);
				if (isCurved) {
					polygon.SetCurveGroup (0);
				}
				result.AddPolygon (polygon);
			}
		}

		var topPolygon, bottomPolygon;
		if (withTopAndBottom) {
			if (topDegenerated) {
				bottomPolygon = new JSM.BodyPolygon ([]);
				for (i = 0; i < segments; i++) {
					bottomPolygon.AddVertexIndex (i + 1);
				}
				result.AddPolygon (bottomPolygon);
			} else if (bottomDegenerated) {
				topPolygon = new JSM.BodyPolygon ([]);
				for (i = 0; i < segments; i++) {
					topPolygon.AddVertexIndex (segments - i - 1);
				}
				result.AddPolygon (topPolygon);
			} else {
				topPolygon = new JSM.BodyPolygon ([]);
				bottomPolygon = new JSM.BodyPolygon ([]);
				for (i = 0; i < segments; i++) {
					topPolygon.AddVertexIndex (2 * (segments - i - 1));
					bottomPolygon.AddVertexIndex (2 * i + 1);
				}
				result.AddPolygon (topPolygon);
				result.AddPolygon (bottomPolygon);
			}
		}

		var avgRadius = (topRadius + bottomRadius) / 2.0;
		result.SetCylindricalTextureProjection (new JSM.Coord (0.0, 0.0, -(height / 2.0)), avgRadius, new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GeneratePrismGeometry
	* Description: Generates a prism defined by bottom and top vertices polygon.
	* Parameters:
	*	bottomVertices {Coord[*]} bottom vertices
	*	topVertices {Coord[*]} top vertices
	*	withTopAndBottom {boolean} generate top and bottom polygons
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePrismGeometry = function (bottomVertices, topVertices, withTopAndBottom)
	{
		var result = new JSM.Body ();
		var count = bottomVertices.length;
		
		var i;
		for (i = 0; i < count; i++) {
			result.AddVertex (new JSM.BodyVertex (bottomVertices[i].Clone ()));
			result.AddVertex (new JSM.BodyVertex (topVertices[i].Clone ()));
		}

		var current, next, bodyPolygon;
		for (i = 0; i < count; i++) {
			current = 2 * i;
			next = current + 2;
			if (i === count - 1) {
				next = 0;
			}
			bodyPolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);
			result.AddPolygon (bodyPolygon);
		}

		if (withTopAndBottom) {
			var topPolygon = new JSM.BodyPolygon ([]);
			var bottomPolygon = new JSM.BodyPolygon ([]);
			for (i = 0; i < count; i++) {
				topPolygon.AddVertexIndex (2 * i + 1);
				bottomPolygon.AddVertexIndex (2 * (count - i - 1));
			}
			result.AddPolygon (topPolygon);
			result.AddPolygon (bottomPolygon);
		}
		
		return result;
	};

	/**
	* Function: GeneratePrismFromPolygon
	* Description: Generates a prism defined by a polygon.
	* Parameters:
	*	polygon {Polygon2D} the base polygon
	*	height {number} the height of the prism
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	curveAngle {number} if not null, defines the curve angle of the prism
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePrismFromPolygon = function (polygon, height, withTopAndBottom, curveAngle)
	{
		var bottomVertices = [];
		var topVertices = [];
		var i, vertex;
		var count = polygon.VertexCount ();
		for (i = 0; i < count; i++) {
			vertex = polygon.GetVertex (i);
			bottomVertices.push (new JSM.Coord (vertex.x, vertex.y, 0.0));
			topVertices.push (new JSM.Coord (vertex.x, vertex.y, height));
		}

		var result = JSM.GeneratePrismGeometry (bottomVertices, topVertices, withTopAndBottom);
		if (curveAngle !== undefined && curveAngle !== null) {
			var curveGroups = JSM.CalculatePolygonCurveGroups (polygon, curveAngle);
			var bodyPolygon;
			for (i = 0; i < count; i++) {
				bodyPolygon = result.GetPolygon (i);
				bodyPolygon.SetCurveGroup (curveGroups[i]);
			}
		}
		
		var origo = bottomVertices[0].Clone ();
		var firtVertex = bottomVertices[1].Clone ();
		var firstDirection = JSM.CoordSub (firtVertex, origo).Normalize ();
		var e3 = new JSM.Vector (0.0, 0.0, 1.0);
		var e2 = JSM.VectorCross (e3, firstDirection);
		var e1 = JSM.VectorCross (e2, e3);

		result.SetCubicTextureProjection (origo, e1, e2, e3);
		return result;
	};

	/**
	* Function: GeneratePrism
	* Description:
	*	Generates a prism defined by a polygon. The base polygon is an array
	*	of coordinates which will be offseted in the given direction.
	* Parameters:
	*	basePolygon {Coord[*]} the base polygon
	*	direction {Vector} the vector of the offset
	*	height {number} the height of the prism
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	curveAngle {number} if not null, defines the curve angle of the prism
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePrism = function (basePolygon, direction, height, withTopAndBottom, curveAngle)
	{
		var polygon = new JSM.Polygon ();
		polygon.FromArray (basePolygon);
		var count = polygon.VertexCount ();


		var bottomVertices = [];
		var topVertices = [];
		var i;
		for (i = 0; i < count; i++) {
			bottomVertices.push (polygon.GetVertex (i).Clone ());
			topVertices.push (polygon.GetVertex (i).Clone ().Offset (direction, height));
		}

		var result = JSM.GeneratePrismGeometry (bottomVertices, topVertices, withTopAndBottom);
		
		if (curveAngle !== undefined && curveAngle !== null) {
			var curveGroups = JSM.CalculatePolygonCurveGroups (polygon, curveAngle);
			var bodyPolygon;
			for (i = 0; i < count; i++) {
				bodyPolygon = result.GetPolygon (i);
				bodyPolygon.SetCurveGroup (curveGroups[i]);
			}
		}
		
		var origo = polygon.GetVertex (0).Clone ();
		var firtVertex = polygon.GetVertex (1).Clone ();
		var firstDirection = JSM.CoordSub (firtVertex, origo).Normalize ();
		var e3 = direction.Clone ().Normalize ();
		var e2 = JSM.VectorCross (e3, firstDirection);
		var e1 = JSM.VectorCross (e2, e3);

		result.SetCubicTextureProjection (origo, e1, e2, e3);
		return result;
	};

	/**
	* Function: GeneratePrismWithHole
	* Description:
	*	Generates a prism defined by a polygon. The polygon can contain null
	*	values which defines the end of the current contour. The holes have
	*	to be in reversed orientation than the main contour.
	* Parameters:
	*	basePolygon {Coord[*]} the base polygon which can contain null values
	*	direction {Vector} the vector of the offset
	*	height {number} the height of the prism
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	curveAngle {number} if not null, defines the curve angle of the prism
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePrismWithHole = function (basePolygon, direction, height, withTopAndBottom, curveAngle)
	{
		function AddVertices (contourPolygon, direction, height, result)
		{
			var i, j, contour, vertex1, vertex2;
			for (i = 0; i < contourPolygon.ContourCount (); i++) {
				contour = contourPolygon.GetContour (i);
				for (j = 0; j < contour.VertexCount (); j++) {
					vertex1 = contour.GetVertex (j).Clone ();
					vertex2 = contour.GetVertex (j).Clone ().Offset (direction, height);
					result.AddVertex (new JSM.BodyVertex (vertex1));
					result.AddVertex (new JSM.BodyVertex (vertex2));
				}
			}
		}

		function AddContours (contourPolygon, contourOffsets, curveAngle, result)
		{
			var offset = 0;

			var i, j, contour, vertexCount, current, next, bodyPolygon, curveGroups;
			for (i = 0; i < contourPolygon.ContourCount (); i++) {
				contour = contourPolygon.GetContour (i);
				curveGroups = null;
				if (curveAngle !== undefined && curveAngle !== null) {
					curveGroups = JSM.CalculatePolygonCurveGroups (contour, curveAngle);
				}		
				vertexCount = contour.VertexCount ();
				contourOffsets.push (offset);
				for (j = 0; j < vertexCount; j++) {
					current = 2 * offset + 2 * j;
					next = current + 2;
					if (j == vertexCount - 1) {
						next = 2 *  offset;
					}
					bodyPolygon = new JSM.BodyPolygon ([current, next, next + 1, current + 1]);
					if (curveGroups !== null) {
						bodyPolygon.SetCurveGroup (curveGroups[j]);
					}
					result.AddPolygon (bodyPolygon);
				}
				offset += vertexCount;
			}
		}
		
		function AddTopBottomPolygons (contourPolygon, contourOffsets)
		{
			var vertexMap = [];
			var contourPolygon2D = contourPolygon.ToContourPolygon2D ();
			var simplePolygon = JSM.ConvertContourPolygonToPolygon2D (contourPolygon2D, vertexMap);
			if (simplePolygon === null) {
				return;
			}
			
			var triangles = JSM.TriangulatePolygon2D (simplePolygon);
			if (triangles === null) {
				return;
			}
			
			var i, j, triangle, mapValue;
			var topTriangle, bottomTriangle;
			for (i = 0; i < triangles.length; i++) {
				triangle = triangles[i];
				topTriangle = new JSM.BodyPolygon ([]);
				bottomTriangle = new JSM.BodyPolygon ([]);
				for (j = 0; j < 3; j++) {
					mapValue = vertexMap[triangle[j]];
					topTriangle.AddVertexIndex (2 * contourOffsets[mapValue[0]] + 2 * mapValue[1] + 1);
					mapValue = vertexMap[triangle[2 - j]];
					bottomTriangle.AddVertexIndex (2 * contourOffsets[mapValue[0]] + 2 * mapValue[1]);
				}
				result.AddPolygon (topTriangle);
				result.AddPolygon (bottomTriangle);
			}
		}

		var result = new JSM.Body ();
		var contourOffsets = [];
		var contourPolygon = new JSM.ContourPolygon ();
		contourPolygon.FromArray (basePolygon);
		AddVertices (contourPolygon, direction, height, result);
		AddContours (contourPolygon, contourOffsets, curveAngle, result);

		if (withTopAndBottom) {
			AddTopBottomPolygons (contourPolygon, contourOffsets);
		}

		var firstDirection = JSM.CoordSub (basePolygon[1], basePolygon[0]).Normalize ();
		var origo = new JSM.Coord (basePolygon[0].x, basePolygon[0].y, basePolygon[0].z);
		var e3 = direction.Clone ().Normalize ();
		var e2 = JSM.VectorCross (e3, firstDirection);
		var e1 = JSM.VectorCross (e2, e3);

		result.SetCubicTextureProjection (origo, e1, e2, e3);
		return result;
	};

	/**
	* Function: GeneratePrismsFromPath2D
	* Description: Generates a prism from the given path.
	* Parameters:
	*	path {Path2D} the path
	*	height {number} the height of the prism
	*	width {number} the width of the prism sides
	*	withTopAndBottom {boolean} generate top and bottom polygons
	* Returns:
	*	{Body[*]} the result
	*/
	JSM.GeneratePrismsFromPath2D = function (path, height, withTopAndBottom, curveAngle)
	{
		function GetPrismPolygon (polygon)
		{
			var result = [];
			var i, j, contour, vertex;
			for (i = 0; i < polygon.ContourCount (); i++) {
				contour = polygon.GetContour (i);
				for (j = 0; j < contour.VertexCount (); j++) {
					vertex = contour.GetVertex (j);
					result.push (new JSM.Coord (vertex.x, vertex.y, 0.0));
				}
				if (i < polygon.ContourCount () - 1) {
					result.push (null);
				}
			}
			return result;
		}

		var bodies = [];
		var polygons = path.GetPolygons ();
		var direction = new JSM.Vector (0.0, 0.0, 1.0);
		var i, polygon;
		for (i = 0; i < polygons.length; i++) {
			polygon = polygons[i];
			if (polygon.ContourCount () === 1) {
				bodies.push (JSM.GeneratePrism (GetPrismPolygon (polygon), direction, height, withTopAndBottom, curveAngle));
			} else if (polygon.ContourCount () > 1) {
				bodies.push (JSM.GeneratePrismWithHole (GetPrismPolygon (polygon), direction, height, withTopAndBottom, curveAngle));
			}
		}
		return bodies;
	};

	/**
	* Function: GeneratePrismShell
	* Description: Generates a prism with the given width of sides.
	* Parameters:
	*	basePolygon {Coord[*]} the base polygon
	*	direction {Vector} the vector of the offset
	*	height {number} the height of the prism
	*	width {number} the width of the prism sides
	*	withTopAndBottom {boolean} generate top and bottom polygons
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePrismShell = function (basePolygon, direction, height, width, withTopAndBottom)
	{
		var result = new JSM.Body ();
		var count = basePolygon.length;

		var i;
		for (i = 0; i < count; i++) {
			result.AddVertex (new JSM.BodyVertex (basePolygon[i]));
		}

		var polygon = new JSM.Polygon ();
		polygon.vertices = basePolygon;
		var offsetedPolygon = JSM.OffsetPolygonContour (polygon, width);
		var innerBasePolygon = offsetedPolygon.vertices;
		for (i = 0; i < count; i++) {
			result.AddVertex (new JSM.BodyVertex (innerBasePolygon[i]));
		}

		var offseted;
		for (i = 0; i < count; i++) {
			offseted = basePolygon[i].Clone ().Offset (direction, height);
			result.AddVertex (new JSM.BodyVertex (offseted));
		}

		for (i = 0; i < count; i++) {
			offseted = innerBasePolygon[i].Clone ().Offset (direction, height);
			result.AddVertex (new JSM.BodyVertex (offseted));
		}

		var curr, next, top, ntop;
		for (i = 0; i < count; i++) {
			curr = i;
			next = curr + 1;
			top = curr + 2 * count;
			ntop = top + 1;
			if (i === count - 1) {
				next = 0;
				ntop = 2 * count;
			}
			result.AddPolygon (new JSM.BodyPolygon ([curr, next, ntop, top]));
			result.AddPolygon (new JSM.BodyPolygon ([curr + count, top + count, ntop + count, next + count]));
		}

		if (withTopAndBottom) {
			for (i = 0; i < count; i++) {
				curr = i;
				next = curr + 1;
				top = i + count;
				ntop = top + 1;
				if (i === count - 1) {
					next = 0;
					ntop = count;
				}
				result.AddPolygon (new JSM.BodyPolygon ([curr, top, ntop, next]));
				result.AddPolygon (new JSM.BodyPolygon ([curr + 2 * count, next + 2 * count, ntop + 2 * count, top + 2 * count]));
			}
		}

		var firstDirection = JSM.CoordSub (basePolygon[1], basePolygon[0]).Normalize ();
		var origo = new JSM.Coord (basePolygon[0].x, basePolygon[0].y, basePolygon[0].z);
		var e3 = direction.Clone ().Normalize ();
		var e2 = JSM.VectorCross (e3, firstDirection);
		var e1 = JSM.VectorCross (e2, e3);

		result.SetCubicTextureProjection (origo, e1, e2, e3);
		return result;
	};

	/**
	* Function: GenerateCylinderShell
	* Description: Generates a cylinder with the given width of sides.
	* Parameters:
	*	radius {number} the radius of the cylinder
	*	height {number} the height of the cylinder
	*	width {number} the width of the cylinder sides
	*	segmentation {integer} the segmentation of the top and bottom polygons
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCylinderShell = function (radius, height, width, segmentation, withTopAndBottom, isCurved)
	{
		function GenerateCircle (radius, segmentation, bottom)
		{
			var result = [];
			var step = 2.0 * Math.PI / segmentation;
			var theta, cartesian;
			var i = 0;
			for (i = 0; i < segmentation; i++) {
				theta = i * step;
				cartesian = JSM.PolarToCartesian (radius, theta);
				result.push (new JSM.Coord (cartesian.x, cartesian.y, bottom));
			}
			return result;
		}

		var normal = new JSM.Vector (0.0, 0.0, 1.0);
		var circle = GenerateCircle (radius, segmentation, -height / 2.0);
		var result = JSM.GeneratePrismShell (circle, normal, height, width, withTopAndBottom);
		
		var i;
		if (isCurved) {
			for (i = 0; i < segmentation; i++) {
				result.GetPolygon (2 * i).SetCurveGroup (0);
				result.GetPolygon (2 * i + 1).SetCurveGroup (0);
			}
		}
		
		return result;
	};

	/**
	* Function: GenerateLineShell
	* Description: Generates a polyline with width and height.
	* Parameters:
	*	basePolyLine {Coord[*]} the base polyline
	*	direction {Vector} the vector of the offset
	*	height {number} the height of the shell
	*	width {number} the width of the shell
	*	withStartAndEnd {boolean} generate start and end polygons
	*	withTopAndBottom {boolean} generate top and bottom polygons
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateLineShell = function (basePolyLine, direction, height, width, withStartAndEnd, withTopAndBottom)
	{
		var result = new JSM.Body ();
		var count = basePolyLine.length;

		var angles = [];
		
		var i, prev, curr, next;
		var prevDir, nextDir, angle;
		for (i = 0; i < count; i++) {
			if (i === 0 || i === count - 1) {
				angle = Math.PI / 2.0;
			} else {
				prev = i - 1;
				curr = i;
				next = i + 1;

				nextDir = JSM.CoordSub (basePolyLine[next], basePolyLine[curr]);
				prevDir = JSM.CoordSub (basePolyLine[prev], basePolyLine[curr]);
				angle = nextDir.AngleTo (prevDir) / 2.0;
				if (JSM.CoordOrientation (basePolyLine[prev], basePolyLine[curr], basePolyLine[next], direction) == JSM.Orientation.Clockwise) {
					angle = Math.PI - angle;
				}
			}
			
			angles.push (angle);
		}

		var normal = new JSM.Vector (0, 0, 1);
		var innerBasePolyLine = [];
		var distance, innerCoord, offsetDirection;
		for (i = 0; i < count; i++) {
			curr = i;
			if (i === count - 1) {
				offsetDirection = JSM.CoordSub (basePolyLine[curr - 1], basePolyLine[curr]);
			} else {
				next = (i + 1) % count;
				offsetDirection = JSM.CoordSub (basePolyLine[curr], basePolyLine[next]);
			}

			angle = angles[curr];
			distance = width / Math.sin (angle);
			innerCoord = basePolyLine[curr].Clone ();
			innerCoord.Offset (offsetDirection, distance);
			innerCoord.Rotate (normal, -(Math.PI - angle), basePolyLine[curr]);
			innerBasePolyLine.push (innerCoord);
		}

		for (i = 0; i < count; i++) {
			result.AddVertex (new JSM.BodyVertex (basePolyLine[i]));
		}

		for (i = 0; i < count; i++) {
			result.AddVertex (new JSM.BodyVertex (innerBasePolyLine[i]));
		}

		var offseted;
		for (i = 0; i < count; i++) {
			offseted = basePolyLine[i].Clone ().Offset (direction, height);
			result.AddVertex (new JSM.BodyVertex (offseted));
		}

		for (i = 0; i < count; i++) {
			offseted = innerBasePolyLine[i].Clone ().Offset (direction, height);
			result.AddVertex (new JSM.BodyVertex (offseted));
		}

		var top, ntop;
		for (i = 0; i < count - 1; i++) {
			curr = i;
			next = curr + 1;
			top = curr + 2 * count;
			ntop = top + 1;
			result.AddPolygon (new JSM.BodyPolygon ([curr, next, ntop, top]));
			result.AddPolygon (new JSM.BodyPolygon ([curr + count, top + count, ntop + count, next + count]));
		}

		if (withStartAndEnd) {
			curr = 0;
			next = curr + count;
			top = curr + 2 * count;
			ntop = curr + 3 * count;
			result.AddPolygon (new JSM.BodyPolygon ([curr, top, ntop, next]));

			curr = count - 1;
			next = curr + count;
			top = curr + 2 * count;
			ntop = curr + 3 * count;
			result.AddPolygon (new JSM.BodyPolygon ([curr, next, ntop, top]));
		}

		if (withTopAndBottom) {
			for (i = 0; i < count - 1; i++) {
				curr = i;
				next = curr + 1;
				top = i + count;
				ntop = top + 1;
				result.AddPolygon (new JSM.BodyPolygon ([curr, top, ntop, next]));
				result.AddPolygon (new JSM.BodyPolygon ([curr + 2 * count, next + 2 * count, ntop + 2 * count, top + 2 * count]));
			}
		}

		var firstDirection = JSM.CoordSub (basePolyLine[1], basePolyLine[0]).Normalize ();
		var origo = new JSM.Coord (basePolyLine[0].x, basePolyLine[0].y, basePolyLine[0].z);
		var e3 = direction.Clone ().Normalize ();
		var e2 = JSM.VectorCross (e3, firstDirection);
		var e1 = JSM.VectorCross (e2, e3);

		result.SetCubicTextureProjection (origo, e1, e2, e3);
		return result;
	};

	/**
	* Function: GenerateTorus
	* Description: Generates a torus.
	* Parameters:
	*	outerRadius {number} the outer radius of the torus
	*	innerRadius {number} the inner radius of the torus
	*	outerSegmentation {integer} the outer segmentation of the torus
	*	innerSegmentation {integer} the inner segmentation of the torus
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTorus = function (outerRadius, innerRadius, outerSegmentation, innerSegmentation, isCurved)
	{
		var result = new JSM.Body ();
		
		var theta = 0.0;
		var step = 2.0 * Math.PI / innerSegmentation;
		
		var circle = [];
		
		var i, coord2D, coord;
		for (i = 0; i < innerSegmentation; i++) {
			coord2D = JSM.PolarToCartesian (innerRadius, theta);
			coord = new JSM.Coord (coord2D.x + outerRadius, 0.0, coord2D.y);
			circle.push (coord);
			theta += step;
		}

		var axisDir = new JSM.Coord (0.0, 0.0, 1.0);
		var origo = new JSM.Coord (0.0, 0.0, 0.0);
		
		step = (2.0 * Math.PI) / outerSegmentation;
		var j, rotated;
		for (i = 0; i < outerSegmentation; i++) {
			for (j = 0; j < innerSegmentation; j++) {
				rotated = circle[j].Clone ().Rotate (axisDir, i * step, origo);
				result.AddVertex (new JSM.BodyVertex (rotated));
			}
		}

		var polygon, current, top, next, ntop;
		for (i = 0; i < outerSegmentation; i++) {
			polygon = new JSM.BodyPolygon ([]);
			for (j = 0; j < innerSegmentation; j++) {
				current = i * innerSegmentation + j;
				next = current + innerSegmentation;
				top = current + 1;
				ntop = next + 1;
				
				if (j === innerSegmentation - 1) {
					top = (i * innerSegmentation);
					ntop = (i + 1) * innerSegmentation;
				}

				if (i === outerSegmentation - 1) {
					next = j;
					ntop = j + 1;
					if (j === innerSegmentation - 1) {
						ntop = 0;
					}
				}

				polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
				if (isCurved) {
					polygon.SetCurveGroup (0);
				}
				result.AddPolygon (polygon);
			}
		}
		
		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GeneratePolyTorus
	* Description: Generates a torus with a polygon cross section.
	* Parameters:
	*	basePolygon {Coord2D[*]} the cross section polygon of the torus
	*	outerRadius {number} the outer radius of the torus
	*	outerSegmentation {integer} the outer segmentation of the torus
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePolyTorus = function (basePolygon, outerRadius, outerSegmentation, isCurved)
	{
		var result = new JSM.Body ();
		
		var innerSegmentation = basePolygon.length;
		var theta = 2.0 * Math.PI;
		var step = 2.0 * Math.PI / innerSegmentation;
		
		var circle = [];
		
		var i, coord2D, coord;
		for (i = 0; i < innerSegmentation; i++) {
			coord2D = basePolygon[i];
			coord = new JSM.Coord (coord2D.x + outerRadius, 0.0, coord2D.y);
			circle.push (coord);
			theta -= step;
		}

		var axisDir = new JSM.Coord (0.0, 0.0, 1.0);
		var origo = new JSM.Coord (0.0, 0.0, 0.0);
		
		step = (2.0 * Math.PI) / outerSegmentation;
		var j, rotated;
		for (i = 0; i < outerSegmentation; i++) {
			for (j = 0; j < innerSegmentation; j++) {
				rotated = circle[j].Clone ().Rotate (axisDir, i * step, origo);
				result.AddVertex (new JSM.BodyVertex (rotated));
			}
		}

		var polygon, current, top, next, ntop;
		for (i = 0; i < outerSegmentation; i++) {
			polygon = new JSM.BodyPolygon ([]);
			for (j = 0; j < innerSegmentation; j++) {
				current = i * innerSegmentation + j;
				next = current + innerSegmentation;
				top = current + 1;
				ntop = next + 1;
				
				if (j === innerSegmentation - 1) {
					top = (i * innerSegmentation);
					ntop = (i + 1) * innerSegmentation;
				}

				if (i === outerSegmentation - 1) {
					next = j;
					ntop = j + 1;
					if (j === innerSegmentation - 1) {
						ntop = 0;
					}
				}

				polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
				if (isCurved) {
					polygon.SetCurveGroup (j);
				}
				result.AddPolygon (polygon);
			}
		}
		
		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateRuledFromSectors
	* Description: Generates a ruled surface between two sectors.
	* Parameters:
	*	aSector {Sector} the first sector
	*	bSector {Sector} the second sector
	*	lineSegmentation {integer} the segmentation along sectors
	*	meshSegmentation {integer} the segmentation along surface
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRuledFromSectors = function (aSector, bSector, lineSegmentation, meshSegmentation, isCurved)
	{
		var result = new JSM.Body ();

		var aCoords = JSM.GetSectorSegmentation (aSector, lineSegmentation);
		var bCoords = JSM.GetSectorSegmentation (bSector, lineSegmentation);

		var vertices = [];
		var polygons = [];
		JSM.GetRuledMesh (aCoords, bCoords, meshSegmentation, vertices, polygons);

		var i;
		for (i = 0; i < vertices.length; i++) {
			result.AddVertex (new JSM.BodyVertex (vertices[i]));
		}

		var polygon, polygonVertexIndices;
		for (i = 0; i < polygons.length; i++) {
			polygonVertexIndices = polygons[i];
			polygon = new JSM.BodyPolygon (polygonVertexIndices);
			if (isCurved) {
				polygon.SetCurveGroup (0);
			}
			result.AddPolygon (polygon);
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateGrid
	* Description: Generates a planar grid.
	* Parameters:
	*	xSize {number} the x size
	*	ySize {number} the y size
	*	xSegmentation {integer} the segmentation along x axis
	*	ySegmentation {integer} the segmentation along y axis
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateGrid = function (xSize, ySize, xSegmentation, ySegmentation, isCurved)
	{
		var xSector = new JSM.Sector (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (xSize, 0.0, 0.0));
		var ySector = new JSM.Sector (new JSM.Coord (0.0, ySize, 0.0), new JSM.Coord (xSize, ySize, 0.0));
		return JSM.GenerateRuledFromSectors (xSector, ySector, xSegmentation, ySegmentation, isCurved);
	};

	/**
	* Function: GenerateSquareGrid
	* Description: Generates a planar square grid.
	* Parameters:
	*	size {number} the size
	*	segmentation {integer} the segmentation
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSquareGrid = function (size, segmentation, isCurved)
	{
		return JSM.GenerateGrid (size, size, segmentation, segmentation, isCurved);
	};

	/**
	* Function: GenerateRuledFromSectorsWithHeight
	* Description: Generates a ruled surface with height between two sectors.
	* Parameters:
	*	aSector {Sector} the first sector
	*	bSector {Sector} the second sector
	*	lineSegmentation {integer} the segmentation along sectors
	*	meshSegmentation {integer} the segmentation along surface
	*	isCurved {boolean} create smooth surfaces
	*	height {height} the height
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRuledFromSectorsWithHeight = function (aSector, bSector, lineSegmentation, meshSegmentation, isCurved, height)
	{
		var result = new JSM.Body ();

		var aCoords = JSM.GetSectorSegmentation (aSector, lineSegmentation);
		var bCoords = JSM.GetSectorSegmentation (bSector, lineSegmentation);

		var vertices = [];
		var polygons = [];
		JSM.GetRuledMesh (aCoords, bCoords, meshSegmentation, vertices, polygons);

		var i;
		for (i = 0; i < vertices.length; i++) {
			result.AddVertex (new JSM.BodyVertex (vertices[i]));
		}

		var polygon, polygonVertexIndices;
		for (i = 0; i < polygons.length; i++) {
			polygonVertexIndices = polygons[i];
			polygon = new JSM.BodyPolygon (polygonVertexIndices);
			if (isCurved) {
				polygon.SetCurveGroup (0);
			}
			result.AddPolygon (polygon);
		}
		
		var topVertexCount = result.VertexCount ();

		var newVertex, vertex;
		for (i = 0; i < vertices.length; i++) {
			vertex = vertices[i];
			newVertex = new JSM.Coord (vertex.x, vertex.y, vertex.z);
			newVertex.z -= height;
			result.AddVertex (new JSM.BodyVertex (newVertex));
		}

		var j, newpolygonVertexIndices;
		for (i = 0; i < polygons.length; i++) {
			polygonVertexIndices = polygons[i];
			newpolygonVertexIndices = [];
			for (j = polygonVertexIndices.length - 1; j >= 0; j--) {
				newpolygonVertexIndices.push (polygonVertexIndices[j] + topVertexCount);
			}
			polygon = new JSM.BodyPolygon (newpolygonVertexIndices);
			if (isCurved) {
				polygon.SetCurveGroup (0);
			}
			result.AddPolygon (polygon);
		}

		var current, next, top, ntop;
		
		for (i = 0; i < meshSegmentation; i++) {
			current = i + topVertexCount;
			next = current + 1;
			top = current - topVertexCount;
			ntop = top + 1;
			polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
			result.AddPolygon (polygon);
		}

		for (i = 0; i < meshSegmentation; i++) {
			current = i + (lineSegmentation * (meshSegmentation + 1)) + topVertexCount;
			next = current + 1;
			top = current - topVertexCount;
			ntop = top + 1;
			polygon = new JSM.BodyPolygon ([current, top, ntop, next]);
			result.AddPolygon (polygon);
		}

		for (i = 0; i < lineSegmentation; i++) {
			current = i * (meshSegmentation + 1) + topVertexCount;
			next = current + meshSegmentation + 1;
			top = current - topVertexCount;
			ntop = top + meshSegmentation + 1;
			polygon = new JSM.BodyPolygon ([current, top, ntop, next]);
			result.AddPolygon (polygon);
		}

		for (i = 0; i < lineSegmentation; i++) {
			current = (i + 1) * meshSegmentation + i + topVertexCount;
			next = current + meshSegmentation + 1;
			top = current - topVertexCount;
			ntop = top + meshSegmentation + 1;
			polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
			result.AddPolygon (polygon);
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateRuledFromCoords
	* Description:
	*	Generates a ruled surface between two coordinate arrays.
	*	The two arrays should have the same length.
	* Parameters:
	*	aCoords {Coord[*]} the first coordinate array
	*	bCoords {Coord[*]} the second coordinate array
	*	meshSegmentation {integer} the segmentation along surface
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRuledFromCoords = function (aCoords, bCoords, meshSegmentation, isCurved)
	{
		var result = new JSM.Body ();
		var vertices = [];
		var polygons = [];

		JSM.GetRuledMesh (aCoords, bCoords, meshSegmentation, vertices, polygons);

		var i;
		for (i = 0; i < vertices.length; i++) {
			result.AddVertex (new JSM.BodyVertex (vertices[i]));
		}

		var polygon;
		for (i = 0; i < polygons.length; i++) {
			vertices = polygons[i];
			polygon = new JSM.BodyPolygon (vertices);
			if (isCurved) {
				polygon.SetCurveGroup (0);
			}
			result.AddPolygon (polygon);
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateRevolved
	* Description:
	*	Generates a revolved surface by rotating a polyline around a given axis.
	*	If the angle is 360 degree, it can generate top and bottom polygons.
	* Parameters:
	*	polyLine {Coord[*]} the polyline
	*	axis {Sector} the axis
	*	angle {number} the angle
	*	segmentation {integer} the segmentation
	*	withTopAndBottom {boolean} generate top and bottom polygons
	*	curveMode {string} 'None', 'CurveSegments', or 'CurveAll'
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRevolved = function (polyLine, axis, angle, segmentation, withTopAndBottom, curveMode)
	{
		var result = new JSM.Body ();
		var circular = JSM.IsEqual (angle, 2.0 * Math.PI);

		var count = polyLine.length;
		var step = angle / segmentation;
		var axisDir = JSM.CoordSub (axis.end, axis.beg);
		
		var i, j, rotated;
		for (i = 0; i < count; i++) {
			for (j = 0; j <= segmentation; j++) {
				if (circular && j === segmentation) {
					continue;
				}

				rotated = polyLine[i].Clone ().Rotate (axisDir, j * step, axis.beg);
				result.AddVertex (new JSM.BodyVertex (rotated));
			}
		}

		var curveModeFlag = 0;
		if (curveMode == 'CurveSegments') {
			curveModeFlag = 1;
		} else if (curveMode == 'CurveAll') {
			curveModeFlag = 2;
		}
		
		var current, top, next, ntop, polygon;
		for (i = 0; i < count - 1; i++) {
			for (j = 0; j < segmentation; j++) {
				current = i * (segmentation + 1) + j;
				top = current + segmentation + 1;
				next = current + 1;
				ntop = top + 1;

				if (circular) {
					current = i * segmentation + j;
					top = current + segmentation;
					next = current + 1;
					ntop = top + 1;
					if (j === segmentation - 1) {
						next = i * segmentation;
						ntop = (i + 1) * segmentation;
					}
				}

				polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
				if (curveModeFlag == 1) {
					polygon.SetCurveGroup (i);
				} else if (curveModeFlag == 2) {
					polygon.SetCurveGroup (0);
				}
				result.AddPolygon (polygon);
			}
		}

		if (circular && withTopAndBottom) {
			var topPolygon = new JSM.BodyPolygon ([]);
			var bottomPolygon = new JSM.BodyPolygon ([]);
			for (i = 0; i < segmentation; i++) {
				topPolygon.AddVertexIndex (segmentation * (count - 1) + i);
				bottomPolygon.AddVertexIndex (segmentation - i - 1);
			}
			result.AddPolygon (topPolygon);
			result.AddPolygon (bottomPolygon);
		}

		var axisNormalDir = axisDir.Clone ().Normalize ();
		var axisLine = new JSM.Line (axis.beg, axisNormalDir);
		var avgRadius = 0.0;
		var projected;
		for (i = 0; i < count; i++) {
			projected = axisLine.ProjectCoord (polyLine[i]);
			avgRadius = avgRadius + projected.DistanceTo (polyLine[i]);
		}
		avgRadius = avgRadius / count;
		
		var origo = new JSM.Coord (axis.beg.x, axis.beg.y, axis.beg.z);
		var baseLine = new JSM.Line (origo, axisDir);
		var projectedToBaseLine = baseLine.ProjectCoord (polyLine[0]);
		var xDirection = JSM.CoordSub (polyLine[0], projectedToBaseLine).Normalize ();
		
		result.SetCylindricalTextureProjection (origo, avgRadius, xDirection, axisNormalDir);
		return result;
	};

	/**
	* Function: GenerateTube
	* Description:
	*	Generates a tube from a given array of polygons. All of the
	*	polygons should have same number of vertices.
	* Parameters:
	*	basePolygons {Coord[*][*]} the array of polygons
	*	withStartAndEnd {boolean} generate start and end polygons
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTube = function (basePolygons, withStartAndEnd)
	{
		var result = new JSM.Body ();
		var contourCount = basePolygons.length;
		var count = basePolygons[0].length;

		var i, j;
		for (j = 0; j < count; j++) {
			for (i = 0; i < contourCount; i++) {
				result.AddVertex (new JSM.BodyVertex (basePolygons[i][j]));
			}
		}

		var current, next;
		for (j = 0; j < contourCount - 1; j++) {
			for (i = 0; i < count; i++) {
				current = j + contourCount * i;
				next = current + contourCount;
				if (i === count - 1) {
					next = j;
				}
				result.AddPolygon (new JSM.BodyPolygon ([current, next, next + 1, current + 1]));
			}
		}

		if (withStartAndEnd) {
			var topPolygon = new JSM.BodyPolygon ([]);
			var bottomPolygon = new JSM.BodyPolygon ([]);
			for (i = 0; i < count; i++) {
				topPolygon.AddVertexIndex (contourCount * i + contourCount - 1);
			}
			for (i = count - 1; i >= 0; i--) {
				bottomPolygon.AddVertexIndex (contourCount * i);
			}
			result.AddPolygon (topPolygon);
			result.AddPolygon (bottomPolygon);
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateFunctionSurface
	* Description: Generates the surface of a given function.
	* Parameters:
	*	function3D {function} the callback function for get surface point
	*	intervalMin {Coord2D} the minimum of the interval
	*	intervalMax {Coord2D} the maximum of the interval
	*	segmentation {integer} the segmentation
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateFunctionSurface = function (function3D, intervalMin, intervalMax, segmentation, isCurved)
	{
		var aSector = new JSM.Sector (new JSM.Coord (intervalMin.x, intervalMin.y, 0.0), new JSM.Coord (intervalMax.x, intervalMin.y, 0.0));
		var bSector = new JSM.Sector (new JSM.Coord (intervalMin.x, intervalMax.y, 0.0), new JSM.Coord (intervalMax.x, intervalMax.y, 0.0));
		var result = JSM.GenerateRuledFromSectors (aSector, bSector, segmentation, segmentation, isCurved);

		var i, coord;
		for (i = 0; i < result.VertexCount (); i++) {
			coord = result.GetVertexPosition (i);
			coord.z = function3D (coord.x, coord.y);
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateFunctionSurfaceSolid
	* Description: Generates the surface of a given function with a solid body.
	* Parameters:
	*	function3D {function} the callback function for get surface point
	*	intervalMin {Coord2D} the minimum of the interval
	*	intervalMax {Coord2D} the maximum of the interval
	*	segmentation {integer} the segmentation
	*	isCurved {boolean} create smooth surfaces
	*	bottomZ {number} the bottom z coordinate of the solid
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateFunctionSurfaceSolid = function (function3D, intervalMin, intervalMax, segmentation, isCurved, bottomZ)
	{
		var aSector = new JSM.Sector (new JSM.Coord (intervalMax.x, intervalMin.y, 0.0), new JSM.Coord (intervalMin.x, intervalMin.y, 0.0));
		var bSector = new JSM.Sector (new JSM.Coord (intervalMax.x, intervalMax.y, 0.0), new JSM.Coord (intervalMin.x, intervalMax.y, 0.0));
		var result = JSM.GenerateRuledFromSectorsWithHeight (aSector, bSector, segmentation, segmentation, isCurved, bottomZ);

		var i, coord;
		var topVertexCount = (segmentation + 1) * (segmentation + 1);
		for (i = 0; i < topVertexCount; i++) {
			coord = result.GetVertexPosition (i);
			coord.z = function3D (coord.x, coord.y);
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/camera',["../core/jsm"],function(JSM){
	/**
	* Class: Camera
	* Description: Represents a camera.
	* Parameters:
	*	eye {Coord} the eye position
	*	center {Coord} the center position
	*	up {Vector} the up vector
	*	fieldOfView {number} field of view in degree
	*	nearClippingPlane {number} near clipping plane distance
	*	farClippingPlane {number} far clipping plane distance
	*/
	JSM.Camera = function (eye, center, up, fieldOfView, nearClippingPlane, farClippingPlane)
	{
		this.eye = JSM.ValueOrDefault (eye, new JSM.Coord (1.0, 1.0, 1.0));
		this.center = JSM.ValueOrDefault (center, new JSM.Coord (0.0, 0.0, 0.0));
		this.up = JSM.ValueOrDefault (up, new JSM.Vector (0.0, 0.0, 1.0));
		this.fieldOfView = JSM.ValueOrDefault (fieldOfView, 45.0);
		this.nearClippingPlane = JSM.ValueOrDefault (nearClippingPlane, 0.1);
		this.farClippingPlane = JSM.ValueOrDefault (farClippingPlane, 1000.0);
	};

	/**
	* Function: Camera.Set
	* Description: Sets the camera.
	* Parameters:
	*	eye {Coord} the eye position
	*	center {Coord} the center position
	*	up {Vector} the up vector
	*	fieldOfView {number} field of view in degree
	*	nearClippingPlane {number} near clipping plane distance
	*	farClippingPlane {number} far clipping plane distance
	*/
	JSM.Camera.prototype.Set = function (eye, center, up, fieldOfView, nearClippingPlane, farClippingPlane)
	{
		this.eye = eye;
		this.center = center;
		this.up = up;
		this.fieldOfView = JSM.ValueOrDefault (fieldOfView, 45.0);
		this.nearClippingPlane = JSM.ValueOrDefault (nearClippingPlane, 0.1);
		this.farClippingPlane = JSM.ValueOrDefault (farClippingPlane, 1000.0);
	};

	/**
	* Function: Camera.Clone
	* Description: Clones the camera.
	* Returns:
	*	{Camera} a cloned instance
	*/
	JSM.Camera.prototype.Clone = function ()
	{
		var result = new JSM.Camera ();
		result.eye = this.eye;
		result.center = this.center;
		result.up = this.up;
		result.fieldOfView = this.fieldOfView;
		result.nearClippingPlane = this.nearClippingPlane;
		result.farClippingPlane = this.farClippingPlane;
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/explode',["../core/jsm"],function(JSM){
	/**
	* Function: ExplodeBody
	* Description:
	*	Explodes a body to primitives. The function calls callback functions
	*	on geometry start and end, and when a triangle or a line is created.
	* Parameters:
	*	body {Body} the body
	*	materials {MaterialSet} the materials
	*	explodeData {object} the parameters and callback functions of explode
	* Returns:
	*	{boolean} success
	*/
	JSM.ExplodeBody = function (body, materials, explodeData)
	{
		function SeparateByMaterial (materials, itemsByMaterial, itemsWithNoMaterial, callbacks)
		{
			var i;
			for (i = 0; i < materials.Count (); i++) {
				itemsByMaterial.push ([]);
			}

			var itemCount = callbacks.itemCount ();
			var material;
			for (i = 0; i < itemCount; i++) {
				material = callbacks.getMaterial (i);
				if (material !== -1) {
					itemsByMaterial[material].push (i);
				} else {
					itemsWithNoMaterial.push (i);
				}
			}		
		}
		
		function ExplodePoints (body, materials, explodeData)
		{
			function ExplodePointsByMaterial (pointIndices, materialIndex, explodeData)
			{
				if (pointIndices.length === 0) {
					return;
				}
				
				var material = materials.GetMaterial (materialIndex);
				if (explodeData.onPointGeometryStart !== undefined && explodeData.onPointGeometryStart !== null) {
					explodeData.onPointGeometryStart (material);
				}

				if (explodeData.onPoint !== undefined && explodeData.onPoint !== null) {
					var i, point, vertex;
					for (i = 0; i < pointIndices.length; i++) {
						point = body.GetPoint (pointIndices[i]);
						vertex = body.GetVertexPosition (point.GetVertexIndex ());
						explodeData.onPoint (vertex);
					}
				}

				if (explodeData.onPointGeometryEnd !== undefined && explodeData.onPointGeometryEnd !== null) {
					explodeData.onPointGeometryEnd (material);
				}
			}

			if (body.PointCount () === 0) {
				return;
			}

			var pointsByMaterial = [];
			var pointsWithNoMaterial = [];
			SeparateByMaterial (materials, pointsByMaterial, pointsWithNoMaterial, {
				itemCount : function () {
					return body.PointCount ();
				},
				getMaterial : function (index) {
					var point = body.GetPoint (index);
					return point.GetMaterialIndex ();
				}
			});
			
			var i;		
			for (i = 0; i < pointsByMaterial.length; i++) {
				ExplodePointsByMaterial (pointsByMaterial[i], i, explodeData);
			}
			ExplodePointsByMaterial (pointsWithNoMaterial, -1, explodeData);
		}

		function ExplodeLines (body, materials, explodeData)
		{
			function ExplodeLinesByMaterial (lineIndices, materialIndex, explodeData)
			{
				if (lineIndices.length === 0) {
					return;
				}
				
				var material = materials.GetMaterial (materialIndex);
				if (explodeData.onLineGeometryStart !== undefined && explodeData.onLineGeometryStart !== null) {
					explodeData.onLineGeometryStart (material);
				}

				if (explodeData.onLine !== undefined && explodeData.onLine !== null) {
					var i, line, beg, end;
					for (i = 0; i < lineIndices.length; i++) {
						line = body.GetLine (lineIndices[i]);
						beg = body.GetVertexPosition (line.GetBegVertexIndex ());
						end = body.GetVertexPosition (line.GetEndVertexIndex ());
						explodeData.onLine (beg, end);
					}
				}

				if (explodeData.onLineGeometryEnd !== undefined && explodeData.onLineGeometryEnd !== null) {
					explodeData.onLineGeometryEnd (material);
				}
			}

			if (body.LineCount () === 0) {
				return;
			}

			var linesByMaterial = [];
			var linesWithNoMaterial = [];
			SeparateByMaterial (materials, linesByMaterial, linesWithNoMaterial, {
				itemCount : function () {
					return body.LineCount ();
				},
				getMaterial : function (index) {
					var line = body.GetLine (index);
					return line.GetMaterialIndex ();
				}
			});
			
			var i;		
			for (i = 0; i < linesByMaterial.length; i++) {
				ExplodeLinesByMaterial (linesByMaterial[i], i, explodeData);
			}
			ExplodeLinesByMaterial (linesWithNoMaterial, -1, explodeData);
		}

		function ExplodePolygons (body, materials, explodeData)
		{
			function CalculatePolygonsDerivedData (body, materials)
			{
				var vertexNormals = JSM.CalculateBodyVertexNormals (body);

				var i, j;
				var hasTextureCoords = false;
				if (materials !== undefined && materials !== null) {
					for (i = 0; i < materials.Count (); i++) {
						if (materials.GetMaterial (i).texture !== null) {
							hasTextureCoords = true;
							break;
						}
					}
				}

				var textureCoords = null;
				var polygon, material;
				if (hasTextureCoords) {
					textureCoords = JSM.CalculateBodyTextureCoords (body);
					for (i = 0; i < textureCoords.length; i++) {
						polygon = body.GetPolygon (i);
						if (polygon.HasMaterialIndex ()) {
							material = materials.GetMaterial (polygon.GetMaterialIndex ());
							for (j = 0; j < textureCoords[i].length; j++) {
								textureCoords[i][j].x /= material.textureWidth;
								textureCoords[i][j].y /= -material.textureHeight;
							}
						}
					}
				}
				
				return {
					vertexNormals : vertexNormals,
					textureCoords : textureCoords
				};
			}
			
			function ExplodePolygonsByMaterial (polygonIndices, materialIndex, derivedData, explodeData)
			{
				function ExplodePolygon (index, derivedData, explodeData)
				{
					function CreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3)
					{
						if (explodeData.onTriangle !== undefined && explodeData.onTriangle !== null) {
							explodeData.onTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);
						}
					}

					var polygon = body.GetPolygon (index);
					var count = polygon.VertexIndexCount ();
					if (count < 3) {
						JSM.Message ('Invalid polygon found.');
						return;
					}
					
					var vertex1, vertex2, vertex3;
					var normal1, normal2, normal3;
					var uv1, uv2, uv3;

					var convexPolygon = false;
					if (explodeData.hasConvexPolygons !== undefined && explodeData.hasConvexPolygons !== null) {
						convexPolygon = explodeData.hasConvexPolygons;
					}
					
					var i;
					if (count == 3 || convexPolygon) {
						for (i = 0; i < count - 2; i++) {
							vertex1 = body.GetVertexPosition (polygon.GetVertexIndex (0));
							vertex2 = body.GetVertexPosition (polygon.GetVertexIndex ((i + 1) % count));
							vertex3 = body.GetVertexPosition (polygon.GetVertexIndex ((i + 2) % count));
							normal1 = derivedData.vertexNormals[index][0];
							normal2 = derivedData.vertexNormals[index][(i + 1) % count];
							normal3 = derivedData.vertexNormals[index][(i + 2) % count];
							uv1 = null;
							uv2 = null;
							uv3 = null;
							if (derivedData.textureCoords !== null) {
								uv1 = derivedData.textureCoords[index][0];
								uv2 = derivedData.textureCoords[index][(i + 1) % count];
								uv3 = derivedData.textureCoords[index][(i + 2) % count];
							}
							
							CreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);
						}
					} else {
						var polygon3D = new JSM.Polygon ();
						
						var vertex;
						for (i = 0; i < count; i++) {
							vertex = body.GetVertexPosition (polygon.vertices[i]);
							polygon3D.AddVertex (vertex.x, vertex.y, vertex.z);
						}
						
						var normal = JSM.CalculateBodyPolygonNormal (body, index);
						var triangles = JSM.TriangulatePolygon (polygon3D, normal);
						if (triangles !== null) {
							var triangle;
							for (i = 0; i < triangles.length; i++) {
								triangle = triangles[i];
								vertex1 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[0]));
								vertex2 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[1]));
								vertex3 = body.GetVertexPosition (polygon.GetVertexIndex (triangle[2]));
								normal1 = derivedData.vertexNormals[index][triangle[0]];
								normal2 = derivedData.vertexNormals[index][triangle[1]];
								normal3 = derivedData.vertexNormals[index][triangle[2]];
								uv1 = null;
								uv2 = null;
								uv3 = null;
								if (derivedData.textureCoords !== null) {
									uv1 = derivedData.textureCoords[index][triangle[0]];
									uv2 = derivedData.textureCoords[index][triangle[1]];
									uv3 = derivedData.textureCoords[index][triangle[2]];
								}
								
								CreateTriangle (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3);
							}
						} else {
							JSM.Message ('Triangulation failed.');
						}
					}
				}
				
				if (polygonIndices.length === 0) {
					return;
				}
				
				var material = materials.GetMaterial (materialIndex);
				if (explodeData.onGeometryStart !== undefined && explodeData.onGeometryStart !== null) {
					explodeData.onGeometryStart (material);
				}

				var i;
				for (i = 0; i < polygonIndices.length; i++) {
					ExplodePolygon (polygonIndices[i], derivedData, explodeData);
				}

				if (explodeData.onGeometryEnd !== undefined && explodeData.onGeometryEnd !== null) {
					explodeData.onGeometryEnd (material);
				}
			}

			if (body.PolygonCount () === 0) {
				return;
			}
			
			var polygonsByMaterial = [];
			var polygonsWithNoMaterial = [];
			SeparateByMaterial (materials, polygonsByMaterial, polygonsWithNoMaterial, {
				itemCount : function () {
					return body.PolygonCount ();
				},
				getMaterial : function (index) {
					var polygon = body.GetPolygon (index);
					return polygon.GetMaterialIndex ();
				}
			});
			
			var derivedData = CalculatePolygonsDerivedData (body, materials);
			var i;
			for (i = 0; i < polygonsByMaterial.length; i++) {
				ExplodePolygonsByMaterial (polygonsByMaterial[i], i, derivedData, explodeData);
			}
			ExplodePolygonsByMaterial (polygonsWithNoMaterial, -1, derivedData, explodeData);
		}

		if (explodeData === undefined || explodeData === null) {
			return false;
		}

		if (materials === undefined || materials === null) {
			materials = new JSM.MaterialSet ();
		}	
		
		ExplodePoints (body, materials, explodeData);
		ExplodeLines (body, materials, explodeData);
		ExplodePolygons (body, materials, explodeData);
		return true;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/exporter',["../core/jsm"],function(JSM){
	/**
	* Function: ExportBodyContentToStl
	* Description: Exports a body content to stl.
	* Parameters:
	*	body {Body} the body
	*	name {string} name the body
	*	hasConvexPolygons {boolean} the body has only convex polygons
	* Returns:
	*	{string} the result
	*/
	JSM.ExportBodyContentToStl = function (body, name, hasConvexPolygons)
	{
		function AddLineToContent (line)
		{
			stlContent += line + '\n';
		}

		function AddTriangleToContent (normal, vertex1, vertex2, vertex3)
		{
			AddLineToContent ('\tfacet normal ' + normal.x + ' ' + normal.y + ' ' + normal.z);
			AddLineToContent ('\t\touter loop');
			AddLineToContent ('\t\t\tvertex ' + vertex1.x + ' ' + vertex1.y + ' ' + vertex1.z);
			AddLineToContent ('\t\t\tvertex ' + vertex2.x + ' ' + vertex2.y + ' ' + vertex2.z);
			AddLineToContent ('\t\t\tvertex ' + vertex3.x + ' ' + vertex3.y + ' ' + vertex3.z);
			AddLineToContent ('\t\tendloop');
			AddLineToContent ('\tendfacet');
		}
		
		function AddPolygon (index)
		{
			var polygon = body.GetPolygon (index);
			var count = polygon.VertexIndexCount ();
			if (count < 3) {
				return;
			}
			
			var vertex1, vertex2, vertex3;
			var normal = null;
			if (count === 3) {
				normal = JSM.CalculateBodyPolygonNormal (body, index);
				vertex1 = body.GetVertex (polygon.GetVertexIndex (0)).position;
				vertex2 = body.GetVertex (polygon.GetVertexIndex (1)).position;
				vertex3 = body.GetVertex (polygon.GetVertexIndex (2)).position;
				AddTriangleToContent (normal, vertex1, vertex2, vertex3);
			} else {
				var useTriangulation = true;
				if (hasConvexPolygons !== undefined && hasConvexPolygons) {
					useTriangulation = false;
				}
			
				var i;
				normal = JSM.CalculateBodyPolygonNormal (body, index);
				if (useTriangulation) {
					var polygon3D = new JSM.Polygon ();
					
					var vertex;
					for (i = 0; i < count; i++) {
						vertex = body.GetVertex (polygon.vertices[i]);
						polygon3D.AddVertex (vertex.position.x, vertex.position.y, vertex.position.z);
					}
					
					var triangles = JSM.TriangulatePolygon (polygon3D, normal);
					if (triangles !== null) {
						var triangle;
						for (i = 0; i < triangles.length; i++) {
							triangle = triangles[i];
							vertex1 = body.GetVertex (polygon.GetVertexIndex (triangle[0])).position;
							vertex2 = body.GetVertex (polygon.GetVertexIndex (triangle[1])).position;
							vertex3 = body.GetVertex (polygon.GetVertexIndex (triangle[2])).position;
							AddTriangleToContent (normal, vertex1, vertex2, vertex3);
						}
					}
				} else {
					for (i = 0; i < count - 2; i++) {
						vertex1 = body.GetVertex (polygon.GetVertexIndex (0)).position;
						vertex2 = body.GetVertex (polygon.GetVertexIndex ((i + 1) % count)).position;
						vertex3 = body.GetVertex (polygon.GetVertexIndex ((i + 2) % count)).position;
						AddTriangleToContent (normal, vertex1, vertex2, vertex3);
					}
				}
			}
		}
		
		var stlContent = '';

		var i;
		for (i = 0; i < body.PolygonCount (); i++) {
			AddPolygon (i);
		}

		return stlContent;
	};

	/**
	* Function: ExportBodyToStl
	* Description: Exports a body to stl.
	* Parameters:
	*	body {Body} the body
	*	name {string} name the body
	*	hasConvexPolygons {boolean} the body has only convex polygons
	* Returns:
	*	{string} the result
	*/
	JSM.ExportBodyToStl = function (body, name, hasConvexPolygons)
	{
		function AddLineToContent (line)
		{
			stlContent += line + '\n';
		}

		var stlContent = '';
		
		AddLineToContent ('solid ' + name);
		stlContent += JSM.ExportBodyContentToStl (body, name, hasConvexPolygons);
		AddLineToContent ('endsolid ' + name);
		
		return stlContent;
	};

	/**
	* Function: ExportModelToStl
	* Description: Exports a model to stl.
	* Parameters:
	*	model {Model} the model
	*	name {string} name the model
	*	hasConvexPolygons {boolean} the model has only convex polygons
	* Returns:
	*	{string} the result
	*/
	JSM.ExportModelToStl = function (model, name, hasConvexPolygons)
	{
		function AddLineToContent (line)
		{
			stlContent += line + '\n';
		}

		var stlContent = '';

		AddLineToContent ('solid ' + name);
		var i, body;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			stlContent += JSM.ExportBodyContentToStl (body, name + (i + 1).toString (), hasConvexPolygons);
		}
		AddLineToContent ('endsolid ' + name);

		return stlContent;
	};

	/**
	* Function: ExportBodyContentToObj
	* Description: Exports a body content to obj.
	* Parameters:
	*	body {Body} the body
	*	vertexOffset {integer} vertex index offset
	*	normalOffset {integer} normal index offset
	* Returns:
	*	{string} the result
	*/
	JSM.ExportBodyContentToObj = function (body, vertexOffset, normalOffset)
	{
		function AddToContent (line)
		{
			objContent += line;
		}

		function AddLineToContent (line)
		{
			objContent += line + '\n';
		}

		function AddVertex (index)
		{
			var vertCoord = body.GetVertex (index).position;
			AddLineToContent ('v ' + vertCoord.x + ' ' + vertCoord.y + ' ' + vertCoord.z);
		}

		function AddNormal (index)
		{
			var normalVector = JSM.CalculateBodyPolygonNormal (body, index);
			AddLineToContent ('vn ' + normalVector.x + ' ' + normalVector.y + ' ' + normalVector.z);
		}

		function AddPolygon (index)
		{
			var polygon = body.GetPolygon (index);
		
			AddToContent ('f ');
		
			var i;
			for (i = 0; i < polygon.VertexIndexCount (); i++) {
				AddToContent ((vertexOffset + polygon.GetVertexIndex (i) + 1) + '//' + (normalOffset + index + 1) + ' ');
			}
			
			AddLineToContent ('');
		}

		var objContent = '';
		
		var i;
		for (i = 0; i < body.VertexCount (); i++) {
			AddVertex (i);
		}
		
		for (i = 0; i < body.PolygonCount (); i++) {
			AddNormal (i);
		}

		for (i = 0; i < body.PolygonCount (); i++) {
			AddPolygon (i);
		}
		
		return objContent;
	};

	/**
	* Function: ExportBodyToObj
	* Description: Exports a body to obj.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{string} the result
	*/
	JSM.ExportBodyToObj = function (body)
	{
		return JSM.ExportBodyContentToObj (body, 0, 0);
	};

	/**
	* Function: ExportModelToObj
	* Description: Exports a model to obj.
	* Parameters:
	*	model {Model} the model
	* Returns:
	*	{string} the result
	*/
	JSM.ExportModelToObj = function (model)
	{
		var objContent = '';
		
		var vertexOffset = 0;
		var normalOffset = 0;
		
		var i, body;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			objContent += JSM.ExportBodyContentToObj (body, vertexOffset, normalOffset);
			vertexOffset += body.VertexCount ();
			normalOffset += body.PolygonCount ();
		}

		return objContent;
	};

	/**
	* Function: ExportMaterialsToGdl
	* Description: Exports a material container to gdl.
	* Parameters:
	*	materials {MaterialSet} the material container
	* Returns:
	*	{string} the result
	*/
	JSM.ExportMaterialsToGdl = function (materials)
	{
		function HexColorToRGBColorString (hexColor)
		{
			var rgb = JSM.HexColorToRGBComponents (hexColor);
			var result = rgb[0] / 255.0 + ',' + rgb[1] / 255.0 + ',' + rgb[2] / 255.0;
			return result;
		}

		function AddLineToContent (line)
		{
			gdlContent += line + '\n';
		}

		function AddMaterial (material, index)
		{
			var rgbString = HexColorToRGBColorString (material.diffuse);
			AddLineToContent ('define material "material' + index + '" 2, ' + rgbString + ' ! ' + index);
		}
		
		var gdlContent = '';
		var writeMaterials = false;
		if (materials !== undefined && materials !== null) {
			writeMaterials = true;
		}

		var i;
		if (writeMaterials) {
			AddMaterial (materials.GetDefaultMaterial (), 1);
			for (i = 0; i < materials.Count (); i++) {
				AddMaterial (materials.GetMaterial (i), i + 2);
			}
		}
		
		return gdlContent;
	};

	/**
	* Function: ExportBodyGeometryToGdl
	* Description: Exports a body geometry to gdl.
	* Parameters:
	*	body {Body} the body
	*	writeMaterials {boolean} write materials
	* Returns:
	*	{string} the result
	*/
	JSM.ExportBodyGeometryToGdl = function (body, writeMaterials)
	{
		function AddToContent (line)
		{
			var lineLengthLimit = 200;
			if (line.length > lineLengthLimit) {
				var current = 0;
				var i, character;
				for (i = 0; i < line.length; i++) {
					character = line[i];
					gdlContent += character;
					current++;
					if (current > lineLengthLimit && character == ',') {
						gdlContent += '\n';
						current = 0;
					}
				}
			} else {
				gdlContent += line;
			}
		}

		function AddLineToContent (line)
		{
			AddToContent (line + '\n');
		}

		function AddVertex (index)
		{
			var vertCoord = body.GetVertex (index).position;
			AddLineToContent ('vert ' + vertCoord.x + ', ' + vertCoord.y + ', ' + vertCoord.z + ' ! ' + (index + 1));
		}

		function AddEdge (adjacencyInfo, index)
		{
			var edge = adjacencyInfo.edges[index];
			var status = 0;
			if (edge.pgon1 != -1 && edge.pgon2 != -1) {
				if (body.GetPolygon (edge.pgon1).HasCurveGroup () && body.GetPolygon (edge.pgon2).HasCurveGroup ()) {
					if (body.GetPolygon (edge.pgon1).GetCurveGroup () == body.GetPolygon (edge.pgon2).GetCurveGroup ()) {
						status = 2;
					}
				}
			}
			AddLineToContent ('edge ' + (edge.vert1 + 1) + ', ' + (edge.vert2 + 1) + ', -1, -1, ' + status + ' ! ' + (index + 1));
		}

		function AddPolygon (adjacencyInfo, index, lastMaterialIndex)
		{
			var materialIndex = -1;
			if (writeMaterials) {
				materialIndex = body.GetPolygon (index).GetMaterialIndex () + 2;
				if (materialIndex != lastMaterialIndex) {
					AddLineToContent ('set material "material' + materialIndex + '"');
				}
			}
		
			var pgon = adjacencyInfo.pgons[index];
			var status = 0;
			if (body.GetPolygon (index).HasCurveGroup ()) {
				status = 2;
			}
			AddToContent ('pgon ' + pgon.pedges.length + ', 0, ' + status + ', ');
			var pedgeList = '';
			var i, pedge;
			for (i = 0; i < pgon.pedges.length; i++) {
				pedge = pgon.pedges[i];
				if (!pedge.reverse) {
					pedgeList += (pedge.index + 1);
				} else {
					pedgeList += (-(pedge.index + 1));
				}
				if (i < pgon.pedges.length - 1) {
					pedgeList += ', ';
				}
			}
			AddToContent (pedgeList);
			AddToContent (' ! ' + (index + 1));
			AddLineToContent ('');
			
			return materialIndex;
		}

		var gdlContent = '';

		AddLineToContent ('base');
		var adjacencyInfo = new JSM.AdjacencyInfo (body);
		
		var i;
		for (i = 0; i < adjacencyInfo.verts.length; i++) {
			AddVertex (i);
		}

		for (i = 0; i < adjacencyInfo.edges.length; i++) {
			AddEdge (adjacencyInfo, i);
		}
		
		var lastMaterialIndex = -1;
		for (i = 0; i < adjacencyInfo.pgons.length; i++) {
			lastMaterialIndex = AddPolygon (adjacencyInfo, i, lastMaterialIndex);
		}

		AddLineToContent ('body -1');
		return gdlContent;
	};

	/**
	* Function: ExportBodyToGdl
	* Description: Exports a body to gdl.
	* Parameters:
	*	body {Body} the body
	*	materials {MaterialSet} the material container
	* Returns:
	*	{string} the result
	*/
	JSM.ExportBodyToGdl = function (body, materials)
	{
		var gdlContent = '';

		var writeMaterials = false;
		if (materials !== undefined && materials !== null) {
			gdlContent += JSM.ExportMaterialsToGdl (materials);
			writeMaterials = true;
		}

		gdlContent += JSM.ExportBodyGeometryToGdl (body, writeMaterials);
		return gdlContent;
	};

	/**
	* Function: ExportModelToGdl
	* Description: Exports a model to gdl.
	* Parameters:
	*	model {Model} the model
	*	materials {MaterialSet} the material container
	* Returns:
	*	{string} the result
	*/
	JSM.ExportModelToGdl = function (model, materials)
	{
		var gdlContent = '';
		var writeMaterials = false;
		if (materials !== undefined && materials !== null) {
			gdlContent += JSM.ExportMaterialsToGdl (materials);
			writeMaterials = true;
		}
		
		var i, body;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			gdlContent += JSM.ExportBodyGeometryToGdl (body, writeMaterials);
		}

		return gdlContent;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/trianglebody',["../core/jsm"],function(JSM){
	/**
	* Class: TriangleBody
	* Description: Represents a 3D body which contains only triangles.
	*/
	JSM.TriangleBody = function (name)
	{
		this.name = name;
		this.vertices = [];
		this.normals = [];
		this.uvs = [];
		this.triangles = [];
		this.defaultUVIndex = -1;
	};

	/**
	* Function: TriangleBody.SetName
	* Description: Sets the name of the body.
	* Parameters:
	*	name {string} the name
	*/
	JSM.TriangleBody.prototype.SetName = function (name)
	{
		this.name = name;
	};

	/**
	* Function: TriangleBody.GetName
	* Description: Returns the name of the body.
	* Returns:
	*	{string} the result
	*/
	JSM.TriangleBody.prototype.GetName = function ()
	{
		return this.name;
	};

	/**
	* Function: TriangleBody.AddVertex
	* Description: Adds a vertex to the body.
	* Parameters:
	*	x, y, z {number} the coordinates of the vertex
	* Returns:
	*	{integer} the index of the added vertex
	*/
	JSM.TriangleBody.prototype.AddVertex = function (x, y, z)
	{
		this.vertices.push (new JSM.Coord (x, y, z));
		return this.vertices.length - 1;
	};

	/**
	* Function: TriangleBody.GetVertex
	* Description: Returns the vertex at the given index.
	* Parameters:
	*	index {integer} the vertex index
	* Returns:
	*	{Coord} the result
	*/
	JSM.TriangleBody.prototype.GetVertex = function (index)
	{
		return this.vertices[index];
	};

	/**
	* Function: TriangleBody.SetVertex
	* Description: Sets the position of the vertex at the given index.
	* Parameters:
	*	index {integer} the vertex index
	*	x, y, z {number} the new coordinates of the vertex
	*/
	JSM.TriangleBody.prototype.SetVertex = function (index, x, y, z)
	{
		this.vertices[index] = new JSM.Coord (x, y, z);
	};

	/**
	* Function: TriangleBody.VertexCount
	* Description: Returns the vertex count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleBody.prototype.VertexCount = function ()
	{
		return this.vertices.length;
	};

	/**
	* Function: TriangleBody.AddNormal
	* Description: Adds a normal vector to the body.
	* Parameters:
	*	x, y, z {number} the coordinates of the normal vector
	* Returns:
	*	{integer} the index of the added normal vector
	*/
	JSM.TriangleBody.prototype.AddNormal = function (x, y, z)
	{
		this.normals.push (new JSM.Vector (x, y, z));
		return this.normals.length - 1;
	};

	/**
	* Function: TriangleBody.GetNormal
	* Description: Returns the normal vector at the given index.
	* Parameters:
	*	index {integer} the normal vector index
	* Returns:
	*	{Vector} the result
	*/
	JSM.TriangleBody.prototype.GetNormal = function (index)
	{
		return this.normals[index];
	};


	/**
	* Function: TriangleBody.GetTriangleNormal
	* Description: Returns the normal vector of a triangle at the given position.
	* Parameters:
	*	triangleIndex {integer} the triangle index
	*	normalPosition {Coord} the position of the normal inside the triangle
	* Returns:
	*	{Vector} the result
	*/
	JSM.TriangleBody.prototype.GetTriangleNormal = function (triangleIndex, normalPosition)
	{
		var normal = null;
		var triangle = this.triangles[triangleIndex];
		if (triangle.curve == -1) {
			normal = this.GetNormal (triangle.n0);
		} else {
			var v0 = this.GetVertex (triangle.v0);
			var v1 = this.GetVertex (triangle.v1);
			var v2 = this.GetVertex (triangle.v2);
			var n0 = this.GetNormal (triangle.n0);
			var n1 = this.GetNormal (triangle.n1);
			var n2 = this.GetNormal (triangle.n2);
			normal = JSM.BarycentricInterpolation (v0, v1, v2, n0, n1, n2, normalPosition);
		}
		return normal;
	};

	/**
	* Function: TriangleBody.NormalCount
	* Description: Returns the normal vector count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleBody.prototype.NormalCount = function ()
	{
		return this.normals.length;
	};

	/**
	* Function: TriangleBody.AddUV
	* Description: Adds a texture coordinate to the body.
	* Parameters:
	*	x, y {number} the coordinates of the texture coordinate
	* Returns:
	*	{integer} the index of the added texture coordinate
	*/
	JSM.TriangleBody.prototype.AddUV = function (x, y)
	{
		this.uvs.push (new JSM.Coord2D (x, y));
		return this.uvs.length - 1;
	};

	/**
	* Function: TriangleBody.AddDefaultUV
	* Description:
	*	Adds a default texture coordinate to the body.
	*	The default texture coordinate is stored only once.
	* Returns:
	*	{integer} the index of the default texture coordinate
	*/
	JSM.TriangleBody.prototype.AddDefaultUV = function ()
	{
		if (this.defaultUVIndex != -1) {
			return this.defaultUVIndex;
		}
		
		this.defaultUVIndex = this.AddUV (0.0, 0.0);
		return this.defaultUVIndex;
	};

	/**
	* Function: TriangleBody.GetUV
	* Description: Returns the texture coordinate at the given index.
	* Parameters:
	*	index {integer} the texture coordinate index
	* Returns:
	*	{Coord2D} the result
	*/
	JSM.TriangleBody.prototype.GetUV = function (index)
	{
		return this.uvs[index];
	};

	/**
	* Function: TriangleBody.UVCount
	* Description: Returns the texture coordinate count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleBody.prototype.UVCount = function ()
	{
		return this.uvs.length;
	};

	/**
	* Function: TriangleBody.AddTriangle
	* Description: Adds a triangle to the body.
	* Parameters:
	*	v0, v1, v2 {integer} the vertex indices of the triangle
	*	n0, n1, n2 {integer} the normal vector indices of the triangle
	*	u0, u1, u2 {integer} the texture coordinate indices of the triangle
	*	mat {integer} the material index of the triangle
	*	curve {integer} the curve group index of the triangle
	* Returns:
	*	{integer} the index of the added triangle
	*/
	JSM.TriangleBody.prototype.AddTriangle = function (v0, v1, v2, n0, n1, n2, u0, u1, u2, mat, curve)
	{
		this.triangles.push ({
			v0 : v0,
			v1 : v1,
			v2 : v2,
			n0 : n0,
			n1 : n1,
			n2 : n2,
			u0 : u0,
			u1 : u1,
			u2 : u2,
			mat : mat,
			curve : curve
		});
		return this.triangles.length - 1;
	};

	/**
	* Function: TriangleBody.GetTriangle
	* Description: Returns the triangle at the given index.
	* Parameters:
	*	index {integer} the triangle index
	* Returns:
	*	{object} the result
	*/
	JSM.TriangleBody.prototype.GetTriangle = function (index)
	{
		return this.triangles[index];
	};

	/**
	* Function: TriangleBody.TriangleCount
	* Description: Returns the triangle count of the body.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleBody.prototype.TriangleCount = function ()
	{
		return this.triangles.length;
	};

	/**
	* Function: TriangleBody.GetBoundingBox
	* Description: Returns the bounding box of the body.
	* Returns:
	*	{Box} the result
	*/
	JSM.TriangleBody.prototype.GetBoundingBox = function ()
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);

		var i, coord;
		for (i = 0; i < this.vertices.length; i++) {
			coord = this.vertices[i];
			min.x = JSM.Minimum (min.x, coord.x);
			min.y = JSM.Minimum (min.y, coord.y);
			min.z = JSM.Minimum (min.z, coord.z);
			max.x = JSM.Maximum (max.x, coord.x);
			max.y = JSM.Maximum (max.y, coord.y);
			max.z = JSM.Maximum (max.z, coord.z);
		}
		
		return new JSM.Box (min, max);
	};

	/**
	* Function: TriangleBody.GetCenter
	* Description: Returns the center of the bounding box of the body.
	* Returns:
	*	{Coord} the result
	*/
	JSM.TriangleBody.prototype.GetCenter = function ()
	{
		var boundingBox = this.GetBoundingBox ();
		return boundingBox.GetCenter ();
	};

	/**
	* Function: TriangleBody.GetBoundingSphere
	* Description: Returns the bounding sphere of the body.
	* Returns:
	*	{Sphere} the result
	*/
	JSM.TriangleBody.prototype.GetBoundingSphere = function ()
	{
		var center = this.GetCenter ();
		var radius = 0.0;
		
		var i, current;
		for (i = 0; i < this.vertices.length; i++) {
			current = center.DistanceTo (this.vertices[i]);
			if (JSM.IsGreater (current, radius)) {
				radius = current;
			}
		}
		
		var result = new JSM.Sphere (center, radius);
		return result;
	};

	/**
	* Function: TriangleBody.Finalize
	* Description:
	*	Finalizes the body. This operation calculates normal vectors
	*	and fixes the body if some data is missing from it.
	* Parameters:
	*	model {TriangleModel} the triangle index
	*/
	JSM.TriangleBody.prototype.Finalize = function (model)
	{
		function FinalizeTriangle (body, triangleIndex, triangleNormals, vertexToTriangles)
		{
			function AddAverageNormal (body, vertexIndex, triangleIndex, triangleNormals, vertexToTriangles)
			{
				var averageNormal = new JSM.Vector (0.0, 0.0, 0.0);
				var averageCount = 0;
				
				var triangle = body.GetTriangle (triangleIndex);
				var neighbourTriangles = vertexToTriangles[vertexIndex];
				var i, neighbourTriangleIndex, neighbourTriangle;
				for (i = 0; i < neighbourTriangles.length; i++) {
					neighbourTriangleIndex = neighbourTriangles[i];
					neighbourTriangle = body.GetTriangle (neighbourTriangleIndex);
					if (triangle.curve == neighbourTriangle.curve) {
						averageNormal = JSM.CoordAdd (averageNormal, triangleNormals[neighbourTriangleIndex]);
						averageCount = averageCount + 1;
					}
				}
				
				averageNormal.MultiplyScalar (1.0 / averageCount);
				averageNormal.Normalize ();
				return body.AddNormal (averageNormal.x, averageNormal.y, averageNormal.z);
			}
		
			var triangle = body.triangles[triangleIndex];
			if (triangle.mat === undefined || triangle.mat < 0) {
				triangle.mat = model.GetDefaultMaterialIndex ();
			}
			
			var normal, normalIndex;
			if (triangle.n0 === undefined || triangle.n1 === undefined || triangle.n2 === undefined) {
				if (triangle.curve === undefined || triangle.curve < 0) {
					normal = triangleNormals[triangleIndex];
					normalIndex = body.AddNormal (normal.x, normal.y, normal.z);
					triangle.n0 = normalIndex;
					triangle.n1 = normalIndex;
					triangle.n2 = normalIndex;
					triangle.curve = -1;
				} else {
					triangle.n0 = AddAverageNormal (body, triangle.v0, triangleIndex, triangleNormals, vertexToTriangles);
					triangle.n1 = AddAverageNormal (body, triangle.v1, triangleIndex, triangleNormals, vertexToTriangles);
					triangle.n2 = AddAverageNormal (body, triangle.v2, triangleIndex, triangleNormals, vertexToTriangles);
				}
			}
			
			if (triangle.u0 === undefined || triangle.u1 === undefined || triangle.u2 === undefined) {
				triangle.u0 = body.AddDefaultUV ();
				triangle.u1 = body.AddDefaultUV ();
				triangle.u2 = body.AddDefaultUV ();
			}
		}

		var triangleNormals = [];
		var vertexToTriangles = {};

		var i;
		for (i = 0; i < this.vertices.length; i++) {
			vertexToTriangles[i] = [];
		}
		
		var triangle, normal;
		for (i = 0; i < this.triangles.length; i++) {
			triangle = this.triangles[i];
			normal = JSM.CalculateTriangleNormal (this.vertices[triangle.v0], this.vertices[triangle.v1], this.vertices[triangle.v2]);
			triangleNormals.push (normal);
			vertexToTriangles[triangle.v0].push (i);
			vertexToTriangles[triangle.v1].push (i);
			vertexToTriangles[triangle.v2].push (i);
		}

		for (i = 0; i < this.triangles.length; i++) {
			FinalizeTriangle (this, i, triangleNormals, vertexToTriangles);
		}
	};

	/**
	* Function: TriangleBody.Clone
	* Description: Clones the body.
	* Returns:
	*	{TriangleBody} a cloned instance
	*/
	JSM.TriangleBody.prototype.Clone = function ()
	{
		var result = new JSM.TriangleBody (this.name);
		
		var i, triangle;
		
		for (i = 0; i < this.vertices.length; i++) {
			result.vertices.push (this.vertices[i].Clone ());
		}
		
		for (i = 0; i < this.normals.length; i++) {
			result.normals.push (this.normals[i].Clone ());
		}
		
		for (i = 0; i < this.uvs.length; i++) {
			result.uvs.push (this.uvs[i].Clone ());
		}
		
		for (i = 0; i < this.triangles.length; i++) {
			triangle = this.triangles[i];
			result.triangles.push ({
				v0 : triangle.v0,
				v1 : triangle.v1,
				v2 : triangle.v2,
				n0 : triangle.n0,
				n1 : triangle.n1,
				n2 : triangle.n2,
				u0 : triangle.u0,
				u1 : triangle.u1,
				u2 : triangle.u2,
				mat : triangle.mat,
				curve : triangle.curve
			});
		}
		
		return result;
	};

	/**
	* Function: ConvertTriangleBodyToOctree
	* Description: Converts a triangle body to triangle octree.
	* Parameters:
	*	body {TriangleBody} the body
	* Returns:
	*	{TriangleOctree} the result
	*/
	JSM.ConvertTriangleBodyToOctree = function (body)
	{
		var result = new JSM.TriangleOctree (body.GetBoundingBox ());
		var i, triangle, v0, v1, v2;
		for (i = 0; i < body.TriangleCount (); i++) {
			triangle = body.GetTriangle (i);
			v0 = body.GetVertex (triangle.v0);
			v1 = body.GetVertex (triangle.v1);
			v2 = body.GetVertex (triangle.v2);
			result.AddTriangle (v0, v1, v2, {
				triangleIndex : i
			});
		}
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/trianglemodel',["../core/jsm"],function(JSM){
	/**
	* Class: TriangleModel
	* Description: Represents a 3D model which contains only triangles.
	*/
	JSM.TriangleModel = function ()
	{
		this.materials = [];
		this.bodies = [];
		this.defaultMaterial = -1;
	};

	/**
	* Function: TriangleModel.AddMaterial
	* Description: Adds a material to the model.
	* Parameters:
	*	material {material} the parameters of the material
	* Returns:
	*	{integer} the index of the added material
	*/
	JSM.TriangleModel.prototype.AddMaterial = function (material)
	{
		this.materials.push (material);
		return this.materials.length - 1;
	};

	/**
	* Function: TriangleModel.GetMaterial
	* Description: Returns the material at the given index.
	* Parameters:
	*	index {integer} the material index
	* Returns:
	*	{object} the result
	*/
	JSM.TriangleModel.prototype.GetMaterial = function (index)
	{
		return this.materials[index];
	};

	/**
	* Function: TriangleModel.AddDefaultMaterial
	* Description: Adds a default material to the model. The default material is stored only once.
	* Returns:
	*	{integer} the index of the default material
	*/
	JSM.TriangleModel.prototype.AddDefaultMaterial = function ()
	{
		if (this.defaultMaterial == -1) {
			this.defaultMaterial = this.AddMaterial ({});
		}
		return this.defaultMaterial;
	};

	/**
	* Function: TriangleModel.GetDefaultMaterialIndex
	* Description: Adds a default material, and returns the index of it.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleModel.prototype.GetDefaultMaterialIndex = function ()
	{
		return this.AddDefaultMaterial ();
	};

	/**
	* Function: TriangleModel.MaterialCount
	* Description: Returns the material count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleModel.prototype.MaterialCount = function ()
	{
		return this.materials.length;
	};

	/**
	* Function: TriangleModel.AddBody
	* Description: Adds a body to the model.
	* Parameters:
	*	body {TriangleBody} the body
	* Returns:
	*	{integer} the index of the added body
	*/
	JSM.TriangleModel.prototype.AddBody = function (body)
	{
		this.bodies.push (body);
		return this.bodies.length - 1;
	};

	/**
	* Function: TriangleModel.AddBodyToIndex
	* Description: Adds a body to the model to the given index.
	* Parameters:
	*	body {TriangleBody} the body
	*	index {integer} the index
	* Returns:
	*	{integer} the index of the added body
	*/
	JSM.TriangleModel.prototype.AddBodyToIndex = function (body, index)
	{
		this.bodies.splice (index, 0, body);
		return index;
	};

	/**
	* Function: TriangleModel.GetBody
	* Description: Returns the body at the given index.
	* Parameters:
	*	index {integer} the body index
	* Returns:
	*	{TriangleBody} the result
	*/
	JSM.TriangleModel.prototype.GetBody = function (index)
	{
		return this.bodies[index];
	};

	/**
	* Function: TriangleModel.VertexCount
	* Description: Returns the vertex count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleModel.prototype.VertexCount = function ()
	{
		var result = 0;
		var i, body;
		for (i = 0; i < this.bodies.length; i++) {
			body = this.bodies[i];
			result += body.VertexCount ();
		}
		return result;
	};

	/**
	* Function: TriangleModel.TriangleCount
	* Description: Returns the triangle count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleModel.prototype.TriangleCount = function ()
	{
		var result = 0;
		var i, body;
		for (i = 0; i < this.bodies.length; i++) {
			body = this.bodies[i];
			result += body.TriangleCount ();
		}
		return result;
	};

	/**
	* Function: TriangleModel.BodyCount
	* Description: Returns the body count of the model.
	* Returns:
	*	{integer} the result
	*/
	JSM.TriangleModel.prototype.BodyCount = function ()
	{
		return this.bodies.length;
	};

	/**
	* Function: TriangleModel.FinalizeMaterials
	* Description:
	*	Finalizes the materials in the model. This fill every not
	*	specified material parameter with default values.
	*/
	JSM.TriangleModel.prototype.FinalizeMaterials = function ()
	{
		var defaultMaterialData = {
			name : 'Default',
			ambient : [0.5, 0.5, 0.5],
			diffuse : [0.5, 0.5, 0.5],
			specular : [0.1, 0.1, 0.1],
			shininess : 0.0,
			opacity : 1.0,
			reflection : 0.0,
			texture : null,
			offset : null,
			scale : null,
			rotation : null
		};
		
		var i, material;
		for (i = 0; i < this.materials.length; i++) {
			material = this.materials[i];
			JSM.CopyObjectProperties (defaultMaterialData, material, false);
		}
	};

	/**
	* Function: TriangleModel.FinalizeBodies
	* Description: Finalizes all body in the model.
	*/
	JSM.TriangleModel.prototype.FinalizeBodies = function ()
	{
		var i, body;
		for (i = 0; i < this.bodies.length; i++) {
			body = this.bodies[i];
			body.Finalize (this);
		}
	};

	/**
	* Function: TriangleModel.Finalize
	* Description: Finalizes the model. It finalizes materials and bodies.
	*/
	JSM.TriangleModel.prototype.Finalize = function ()
	{
		this.FinalizeBodies ();
		this.FinalizeMaterials ();
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/converter',["../core/jsm"],function(JSM){
	/**
	* Function: ConvertBodyToTriangleBody
	* Description: Converts a body to triangle body.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{TriangleBody} the result
	*/
	JSM.ConvertBodyToTriangleBody = function (body)
	{
		function AddTriangle (result, polygon, v0, v1, v2)
		{
			var triangleIndex = result.AddTriangle (v0, v1, v2);
			var triangle = result.GetTriangle (triangleIndex);
			if (polygon.HasMaterialIndex ()) {
				triangle.mat = polygon.GetMaterialIndex ();
			}
			if (polygon.HasCurveGroup ()) {
				triangle.curve = polygon.GetCurveGroup ();
			}
		}
		
		var result = new JSM.TriangleBody ();
		
		var i, j, vertex;
		for (i = 0; i < body.VertexCount (); i++) {
			vertex = body.GetVertexPosition (i);
			result.AddVertex (vertex.x, vertex.y, vertex.z);
		}
		
		var polygon, vertexCount;
		var polygon3D, normal, triangle, triangles;
		var v0, v1, v2;
		for (i = 0; i < body.PolygonCount (); i++) {
			polygon = body.GetPolygon (i);
			vertexCount = polygon.VertexIndexCount ();
			if (vertexCount < 3) {
				continue;
			}
			if (vertexCount == 3) {
				v0 = polygon.GetVertexIndex (0);
				v1 = polygon.GetVertexIndex (1);
				v2 = polygon.GetVertexIndex (2);
				AddTriangle (result, polygon, v0, v1, v2);
			} else {
				polygon3D = new JSM.Polygon ();
				for (j = 0; j < vertexCount; j++) {
					vertex = body.GetVertexPosition (polygon.GetVertexIndex (j));
					polygon3D.AddVertex (vertex.x, vertex.y, vertex.z);
				}
				
				normal = JSM.CalculateBodyPolygonNormal (body, i);
				triangles = JSM.TriangulatePolygon (polygon3D, normal);
				if (triangles !== null) {
					for (j = 0; j < triangles.length; j++) {
						triangle = triangles[j];
						v0 = polygon.GetVertexIndex (triangle[0]);
						v1 = polygon.GetVertexIndex (triangle[1]);
						v2 = polygon.GetVertexIndex (triangle[2]);
						AddTriangle (result, polygon, v0, v1, v2);
					}
				}
			}
		}

		return result;
	};

	/**
	* Function: ConvertModelToTriangleModel
	* Description: Converts a model to triangle model.
	* Parameters:
	*	model {Model} the model
	* Returns:
	*	{TriangleModel} the result
	*/
	JSM.ConvertModelToTriangleModel = function (model)
	{
		var result = new JSM.TriangleModel ();
		var materials = model.GetMaterialSet ();
		var i, material;
		for (i = 0; i < materials.Count (); i++) {
			material = materials.GetMaterial (i);
			result.AddMaterial ({
				name : 'Material' + i,
				ambient : JSM.HexColorToNormalizedRGBComponents (material.ambient),
				diffuse : JSM.HexColorToNormalizedRGBComponents (material.diffuse),
				specular : JSM.HexColorToNormalizedRGBComponents (material.specular),
				shininess : material.shininess,
				opacity : material.opacity,
				reflection : material.reflection
			});
		}
		
		var body, triangleBody;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			triangleBody = JSM.ConvertBodyToTriangleBody (body);
			result.AddBody (triangleBody);
		}
		result.Finalize ();
		return result;
	};

	/**
	* Function: ConvertTriangleModelToJsonData
	* Description: Converts a triangle model to json data.
	* Parameters:
	*	model {TriangleModel} the model
	* Returns:
	*	{object} the result data
	*/
	JSM.ConvertTriangleModelToJsonData = function (model)
	{
		function ConvertMaterials (model, materials)
		{
			var i, material, jsonMaterial;
			for (i = 0; i < model.MaterialCount (); i++) {
				material = model.GetMaterial (i);
				jsonMaterial = {
					name : JSM.ValueOrDefault (material.name, ''),
					ambient : material.ambient,
					diffuse : material.diffuse,
					specular : material.specular,
					shininess : material.shininess,
					opacity : material.opacity
				};
				if (material.texture !== undefined && material.texture !== null) {
					jsonMaterial.texture = JSM.ValueOrDefault (material.texture, null);
					jsonMaterial.offset = material.offset;
					jsonMaterial.scale = material.scale;
					jsonMaterial.rotation = material.rotation;
				}
				materials.push (jsonMaterial);
			}
		}

		function ConvertBody (model, body, mesh)
		{
			var trianglesByMaterial = [];
			var materialCount = model.MaterialCount ();
			
			var i, j, coord;
			for (i = 0; i < body.VertexCount (); i++) {
				coord = body.GetVertex (i);
				mesh.vertices.push (coord.x, coord.y, coord.z);
			}
			
			for (i = 0; i < body.NormalCount (); i++) {
				coord = body.GetNormal (i);
				mesh.normals.push (coord.x, coord.y, coord.z);
			}

			for (i = 0; i < body.UVCount (); i++) {
				coord = body.GetUV (i);
				mesh.uvs.push (coord.x, coord.y);
			}
			
			for (i = 0; i < materialCount; i++) {
				trianglesByMaterial.push ([]);
			}

			var triangle;
			for (i = 0; i < body.TriangleCount (); i++) {
				triangle = body.GetTriangle (i);
				if (triangle.mat === undefined || triangle.mat < 0 || triangle.mat >= materialCount) {
					continue;
				}
				trianglesByMaterial[triangle.mat].push (i);
			}

			var triangleCount = 0;
			var triangles, jsonTriangles;
			for (i = 0; i < trianglesByMaterial.length; i++) {
				triangles = trianglesByMaterial[i];
				if (triangles.length === 0) {
					continue;
				}
				
				jsonTriangles =  {
					material : i,
					parameters : []
				};
				for (j = 0; j < triangles.length; j++) {
					triangle = body.GetTriangle (triangles[j]);
					jsonTriangles.parameters.push (
						triangle.v0, triangle.v1, triangle.v2,
						triangle.n0, triangle.n1, triangle.n2,
						triangle.u0, triangle.u1, triangle.u2
					);
				}
				triangleCount = triangleCount + triangles.length;
				mesh.triangles.push (jsonTriangles);
			}
		}
		
		var result = {
			version : 1,
			materials : [],
			meshes : []
		};
		
		ConvertMaterials (model, result.materials);
		
		var i, body, mesh;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			if (body.TriangleCount () === 0) {
				continue;
			}
			mesh = {
				name : body.GetName (),
				vertices : [],
				normals : [],
				uvs : [],
				triangles : []
			};
			ConvertBody (model, body, mesh);
			result.meshes.push (mesh);
		}
		
		return result;
	};

	/**
	* Function: MergeJsonDataMeshes
	* Description: Merges meshes in json data.
	* Parameters:
	*	jsonData {object} the original data
	* Returns:
	*	{object} the result data
	*/
	JSM.MergeJsonDataMeshes = function (jsonData)
	{
		function MergeMesh (mesh, currentMesh, materialToTriangles)
		{
			function MergeAttributes (mesh, currentMesh)
			{
				var i;
				for (i = 0; i < currentMesh.vertices.length; i++) {
					mesh.vertices.push (currentMesh.vertices[i]);
				}
				for (i = 0; i < currentMesh.normals.length; i++) {
					mesh.normals.push (currentMesh.normals[i]);
				}
				for (i = 0; i < currentMesh.uvs.length; i++) {
					mesh.uvs.push (currentMesh.uvs[i]);
				}
			}
		
			function MergeTriangles (mesh, currentTriangles, materialToTriangles, vertexOffset, normalOffset, uvOffset)
			{
				var material = currentTriangles.material;
				var trianglesIndex = materialToTriangles[material];
				if (trianglesIndex === undefined) {
					mesh.triangles.push ({
						material : material,
						parameters : []
					});
					trianglesIndex = mesh.triangles.length - 1;
					materialToTriangles[material] = trianglesIndex;
				}
				
				var triangles = mesh.triangles[trianglesIndex];
				var triangleParameters = triangles.parameters;
				var i;
				for (i = 0; i < currentTriangles.parameters.length; i = i + 9) {
					triangleParameters.push (
						currentTriangles.parameters[i] + vertexOffset,
						currentTriangles.parameters[i + 1] + vertexOffset,
						currentTriangles.parameters[i + 2] + vertexOffset,
						currentTriangles.parameters[i + 3] + normalOffset,
						currentTriangles.parameters[i + 4] + normalOffset,
						currentTriangles.parameters[i + 5] + normalOffset,
						currentTriangles.parameters[i + 6] + uvOffset,
						currentTriangles.parameters[i + 7] + uvOffset,
						currentTriangles.parameters[i + 8] + uvOffset
					);
				}
			}
		
			var vertexOffset = mesh.vertices.length / 3;
			var normalOffset = mesh.normals.length / 3;
			var uvOffset = mesh.uvs.length / 2;
			MergeAttributes (mesh, currentMesh);

			var i, currentTriangles;
			for (i = 0; i < currentMesh.triangles.length; i++) {
				currentTriangles = currentMesh.triangles[i];
				MergeTriangles (mesh, currentTriangles, materialToTriangles, vertexOffset, normalOffset, uvOffset);
			}
		}

		var result = {
			version : jsonData.version,
			materials : jsonData.materials,
			meshes : []
		};
		
		var mesh = {
			name : 'Merged',
			vertices : [],
			normals : [],
			uvs : [],
			triangles : []
		};
		
		var materialToTriangles = {};
		var i, currentMesh;
		for (i = 0; i < jsonData.meshes.length; i++) {
			currentMesh = jsonData.meshes[i];
			MergeMesh (mesh, currentMesh, materialToTriangles);
		}
		
		result.meshes.push (mesh);
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/modeler/rayutils',["../core/jsm"],function(JSM){
	/**
	* Function: RayTriangleIntersection
	* Description: Calculates intersection between a ray and a triangle.
	* Parameters:
	*	ray {Ray} the ray
	*	v0, v1, v2 {Coord} the vertices of the triangle
	* Returns:
	*	{object} the result data (position, distance) if intersection found, null otherwise
	*/
	JSM.RayTriangleIntersection = function (ray, v0, v1, v2)
	{
		var rayOrigin = ray.GetOrigin ();
		var rayDirection = ray.GetDirection ();

		var edgeDir1 = JSM.CoordSub (v1, v0);
		var edgeDir2 = JSM.CoordSub (v2, v0);
		var pVector = JSM.VectorCross (rayDirection, edgeDir2);

		var determinant = JSM.VectorDot (edgeDir1, pVector);
		if (JSM.IsZero (determinant)) {
			return null;
		}
		
		var isFrontFacing = JSM.IsPositive (determinant);
		if (!isFrontFacing) {
			return null;
		}

		var invDeterminant = 1.0 / determinant;

		var tVector = JSM.CoordSub (rayOrigin, v0);
		var u = JSM.VectorDot (tVector, pVector) * invDeterminant;
		if (JSM.IsLower (u, 0.0) || JSM.IsGreater (u, 1.0)) {
			return null;
		}

		var qVector = JSM.VectorCross (tVector, edgeDir1);
		var v = JSM.VectorDot (rayDirection, qVector) * invDeterminant;
		if (JSM.IsLower (v, 0.0) || JSM.IsGreater (u + v, 1.0)) {
			return null;
		}
	 
		var distance = JSM.VectorDot (edgeDir2, qVector) * invDeterminant;
		if (!JSM.IsPositive (distance)) {
			return null;
		}

		if (ray.IsLengthReached (distance)) {
			return null;
		}
		
		var scaledDirection = rayDirection.Clone ().MultiplyScalar (distance);
		var intersection = {
			position : JSM.CoordAdd (rayOrigin, scaledDirection),
			distance : distance
		};
		return intersection;
	};

	/**
	* Function: RayBoxIntersection
	* Description: Calculates intersection between a ray and a box.
	* Parameters:
	*	ray {Ray} the ray
	*	min, max {Coord} the minimum and maximum points of the box
	* Returns:
	*	{object} the result data (position, distance) if intersection found, null otherwise
	*/
	JSM.RayBoxIntersection = function (ray, min, max)
	{
		var rayOriginVec = ray.GetOrigin ();
		var rayDirectionVec = ray.GetDirection ();

		var rayOrigin = JSM.CoordToArray (rayOriginVec);
		var rayDirection = JSM.CoordToArray (rayDirectionVec);
		var minB = JSM.CoordToArray (min);
		var maxB = JSM.CoordToArray (max);
		var quadrant = [0, 0, 0];
		var candidatePlane = [0.0, 0.0, 0.0];

		var originInBox = true;
		var i;
		for (i = 0; i < 3; i++) {
			if (JSM.IsLower (rayOrigin[i], minB[i])) {
				quadrant[i] = -1; // left
				candidatePlane[i] = minB[i];
				originInBox = false;
			} else if (JSM.IsGreater (rayOrigin[i], maxB[i])) {
				quadrant[i] = 1; // right
				candidatePlane[i] = maxB[i];
				originInBox = false;
			} else {
				quadrant[i] = 0; // middle
			}
		}

		var intersection = null;
		if (originInBox) {
			intersection = {
				position : rayOriginVec,
				distance : 0.0
			};
			return intersection;
		}

		var maxT = [0.0, 0.0, 0.0];
		for (i = 0; i < 3; i++) {
			if (quadrant[i] !== 0 && !JSM.IsZero (rayDirection[i])) {
				maxT[i] = (candidatePlane[i] - rayOrigin[i]) / rayDirection[i];
			} else {
				maxT[i] = -1.0;
			}
		}

		var whichPlane = 0;
		for (i = 1; i < 3; i++) {
			if (JSM.IsLower (maxT[whichPlane], maxT[i])) {
				whichPlane = i;
			}
		}

		if (JSM.IsNegative (maxT[whichPlane])) {
			return null;
		}

		var xCoord = [0.0, 0.0, 0.0];
		for (i = 0; i < 3; i++) {
			if (whichPlane != i) {
				xCoord[i] = rayOrigin[i] + maxT[whichPlane] * rayDirection[i];
				if (JSM.IsLower (xCoord[i], minB[i]) || JSM.IsGreater (xCoord[i], maxB[i])) {
					return null;
				}
			} else {
				xCoord[i] = candidatePlane[i];
			}
		}

		var intersectionCoord = JSM.CoordFromArray (xCoord);
		var distance = rayOriginVec.DistanceTo (intersectionCoord);
		if (ray.IsLengthReached (distance)) {
			return null;
		}

		intersection = {
			position : intersectionCoord,
			distance : distance
		};
		return intersection;
	};

	/**
	* Function: RayOctreeIntersection
	* Description: Calculates the nearest intersection between a ray and an octree.
	* Parameters:
	*	ray {Ray} the ray
	*	octree {Octree} the octree
	*	intersection {object} the result data (position, distance, userData)
	* Returns:
	*	{boolean} true if found intersection, false otherwise
	*/
	JSM.RayOctreeIntersection = function (ray, octree, intersection)
	{
		var minIntersection = null;
		var foundIntersection = false;
		var calcMinIntersection = (intersection !== null && intersection !== undefined);

		JSM.TraverseOctreeNodes (octree, function (node) {
			if (!calcMinIntersection && foundIntersection) {
				return false;
			}
			if (!JSM.RayBoxIntersection (ray, node.box.min, node.box.max)) {
				return false;
			}
			var i;
			for (i = 0; i < node.triangles.length; i++) {
				var triangle = node.triangles[i];
				var v0 = triangle.v0;
				var v1 = triangle.v1;
				var v2 = triangle.v2;
				var currentIntersection = JSM.RayTriangleIntersection (ray, v0, v1, v2);
				if (currentIntersection !== null) {
					foundIntersection = true;
					if (!calcMinIntersection) {
						return false;
					}
					if (minIntersection === null || currentIntersection.distance < minIntersection.distance) {
						minIntersection = currentIntersection;
						minIntersection.userData = triangle.userData;
					}
				}
			}
			return true;
		});	

		if (calcMinIntersection && minIntersection !== null) {
			intersection.position = minIntersection.position;
			intersection.distance = minIntersection.distance;
			intersection.userData = minIntersection.userData;
		}
		return foundIntersection;
	};

	/**
	* Function: RayTriangleBodyIntersection
	* Description: Calculates the nearest intersection between a ray and a triangle body.
	* Parameters:
	*	ray {Ray} the ray
	*	body {TriangleBody} the triangle body
	*	intersection {object} the result data (position, distance, triangleIndex)
	* Returns:
	*	{boolean} true if found intersection, false otherwise
	*/
	JSM.RayTriangleBodyIntersection = function (ray, body, intersection)
	{
		var minIntersection = null;
		var foundIntersection = false;
		var calcMinIntersection = (intersection !== null && intersection !== undefined);
		
		var i, triangle, v0, v1, v2, currentIntersection;
		for (i = 0; i < body.TriangleCount (); i++) {
			triangle = body.GetTriangle (i);
			v0 = body.GetVertex (triangle.v0);
			v1 = body.GetVertex (triangle.v1);
			v2 = body.GetVertex (triangle.v2);
			currentIntersection = JSM.RayTriangleIntersection (ray, v0, v1, v2);
			if (currentIntersection !== null) {
				foundIntersection = true;
				if (!calcMinIntersection) {
					break;
				}
				if (minIntersection === null || currentIntersection.distance < minIntersection.distance) {
					minIntersection = currentIntersection;
					minIntersection.triangleIndex = i;
				}
			}
		}
		
		if (calcMinIntersection && minIntersection !== null) {
			intersection.position = minIntersection.position;
			intersection.distance = minIntersection.distance;
			intersection.triangleIndex = minIntersection.triangleIndex;
		}
		return foundIntersection;
	};

	/**
	* Function: RayTriangleModelIntersection
	* Description: Calculates the nearest intersection between a ray and a triangle model.
	* Parameters:
	*	ray {Ray} the ray
	*	model {TriangleModel} the triangle model
	*	intersection {object} the result data (position, distance, triangleIndex, bodyIndex)
	* Returns:
	*	{boolean} true if found intersection, false otherwise
	*/
	JSM.RayTriangleModelIntersection = function (ray, model, intersection)
	{
		var minIntersection = null;
		var foundIntersection = false;
		var calcMinIntersection = (intersection !== null && intersection !== undefined);
		var i, body, currentIntersection;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			currentIntersection = calcMinIntersection ? {} : null;
			if (JSM.RayTriangleBodyIntersection (ray, body, currentIntersection)) {
				foundIntersection = true;
				if (!calcMinIntersection) {
					break;
				}
				if (minIntersection === null || currentIntersection.distance < minIntersection.distance) {
					minIntersection = currentIntersection;
					minIntersection.bodyIndex = i;
				}
			}
		}
		
		if (calcMinIntersection && minIntersection !== null) {
			intersection.position = minIntersection.position;
			intersection.distance = minIntersection.distance;
			intersection.triangleIndex = minIntersection.triangleIndex;
			intersection.bodyIndex = minIntersection.bodyIndex;
		}	
		return foundIntersection;
	};

	/**
	* Function: RayTriangleModelIntersectionWithOctree
	* Description:
	*	Calculates the nearest intersection between a ray and a triangle model.
	*	Caches the octrees for all bodies in the model.
	* Parameters:
	*	ray {Ray} the ray
	*	model {TriangleModel} the triangle model
	*	intersection {object} the result data (position, distance, triangleIndex, bodyIndex)
	* Returns:
	*	{boolean} true if found intersection, false otherwise
	*/
	JSM.RayTriangleModelIntersectionWithOctree = function (ray, model, intersection)
	{
		var minIntersection = null;
		var foundIntersection = false;
		var calcMinIntersection = (intersection !== null && intersection !== undefined);
		var i, body, hasIntersection, currentIntersection;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			hasIntersection = false;
			currentIntersection = calcMinIntersection ? {} : null;
			if (body.TriangleCount () > 20) {
				if (body.octree === undefined) {
					body.octree = JSM.ConvertTriangleBodyToOctree (body);
				}
				hasIntersection = JSM.RayOctreeIntersection (ray, body.octree, currentIntersection);
			} else {
				hasIntersection = JSM.RayTriangleBodyIntersection (ray, body, currentIntersection);
			}
			
			if (hasIntersection) {
				foundIntersection = true;
				if (!calcMinIntersection) {
					break;
				}
				if (minIntersection === null || currentIntersection.distance < minIntersection.distance) {
					minIntersection = currentIntersection;
					if (currentIntersection.userData !== undefined) {
						minIntersection.triangleIndex = currentIntersection.userData.triangleIndex;
					}
					minIntersection.bodyIndex = i;
				}
			}
		}
		
		if (calcMinIntersection && minIntersection !== null) {
			intersection.position = minIntersection.position;
			intersection.distance = minIntersection.distance;
			intersection.triangleIndex = minIntersection.triangleIndex;
			intersection.bodyIndex = minIntersection.bodyIndex;
		}	
		return foundIntersection;
	};

	return JSM;
});

define('skylark-jsmodeler/import/binaryreader',["../core/jsm"],function(JSM){
	JSM.BinaryReader = function (arrayBuffer, isLittleEndian)
	{
		this.arrayBuffer = arrayBuffer;
		this.dataView = new DataView (arrayBuffer);
		this.isLittleEndian = isLittleEndian;
		this.position = 0;
	};

	JSM.BinaryReader.prototype.GetPosition = function ()
	{
		return this.position;
	};

	JSM.BinaryReader.prototype.GetByteLength = function ()
	{
		return this.arrayBuffer.byteLength;
	};

	JSM.BinaryReader.prototype.Skip = function (bytes)
	{
		this.position = this.position + bytes;
	};

	JSM.BinaryReader.prototype.End = function ()
	{
		return this.position >= this.arrayBuffer.byteLength;
	};

	JSM.BinaryReader.prototype.ReadBoolean = function ()
	{
		var result = this.dataView.getInt8 (this.position);
		this.position = this.position + 1;
		return result ? true : false;
	};

	JSM.BinaryReader.prototype.ReadCharacter = function ()
	{
		var result = this.dataView.getInt8 (this.position);
		this.position = this.position + 1;
		return result;
	};

	JSM.BinaryReader.prototype.ReadUnsignedCharacter = function ()
	{
		var result = this.dataView.getUint8 (this.position);
		this.position = this.position + 1;
		return result;
	};

	JSM.BinaryReader.prototype.ReadInteger16 = function ()
	{
		var result = this.dataView.getInt16 (this.position, this.isLittleEndian);
		this.position = this.position + 2;
		return result;
	};

	JSM.BinaryReader.prototype.ReadUnsignedInteger16 = function ()
	{
		var result = this.dataView.getUint16 (this.position, this.isLittleEndian);
		this.position = this.position + 2;
		return result;
	};

	JSM.BinaryReader.prototype.ReadInteger32 = function ()
	{
		var result = this.dataView.getInt32 (this.position, this.isLittleEndian);
		this.position = this.position + 4;
		return result;
	};

	JSM.BinaryReader.prototype.ReadUnsignedInteger32 = function ()
	{
		var result = this.dataView.getUint32 (this.position, this.isLittleEndian);
		this.position = this.position + 4;
		return result;
	};

	JSM.BinaryReader.prototype.ReadFloat32 = function ()
	{
		var result = this.dataView.getFloat32 (this.position, this.isLittleEndian);
		this.position = this.position + 4;
		return result;
	};

	JSM.BinaryReader.prototype.ReadDouble64 = function ()
	{
		var result = this.dataView.getFloat64 (this.position, this.isLittleEndian);
		this.position = this.position + 8;
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/import/importerutils',["../core/jsm"],function(JSM){
	JSM.GetArrayBufferFromURL = function (url, callbacks)
	{
		var request = new XMLHttpRequest ();
		request.open ('GET', url, true);
		request.responseType = 'arraybuffer';

		request.onload = function () {
			var arrayBuffer = request.response;
			if (arrayBuffer && callbacks.onReady) {
				callbacks.onReady (arrayBuffer);
			}
		};
		
		request.onerror = function () {
			if (callbacks.onError) {
				callbacks.onError ();
			}
		};

		request.send (null);
	};

	JSM.GetArrayBufferFromFile = function (file, callbacks)
	{
		var reader = new FileReader ();

		reader.onloadend = function (event) {
			if (event.target.readyState == FileReader.DONE && callbacks.onReady) {
				callbacks.onReady (event.target.result);
			}
		};
		
		reader.onerror = function () {
			if (callbacks.onError) {
				callbacks.onError ();
			}
		};

		reader.readAsArrayBuffer (file);
	};

	JSM.GetStringBufferFromURL = function (url, callbacks)
	{
		var request = new XMLHttpRequest ();
		request.open ('GET', url, true);
		request.responseType = 'text';

		request.onload = function () {
			var stringBuffer = request.response;
			if (stringBuffer && callbacks.onReady) {
				callbacks.onReady (stringBuffer);
			}
		};
		
		request.onerror = function () {
			if (callbacks.onError) {
				callbacks.onError ();
			}
		};

		request.send (null);
	};

	JSM.GetStringBufferFromFile = function (file, callbacks)
	{
		var reader = new FileReader ();

		reader.onloadend = function (event) {
			if (event.target.readyState == FileReader.DONE && callbacks.onReady) {
				callbacks.onReady (event.target.result);
			}
		};

		reader.onerror = function () {
			if (callbacks.onError) {
				callbacks.onError ();
			}
		};	
		
		reader.readAsText (file);
	};

	JSM.LoadMultipleBuffers = function (inputList, onReady)
	{
		function LoadMultipleBuffersInternal (inputList, index, result, onReady)
		{
			if (index >= inputList.length) {
				onReady (result);
				return;
			}
			
			var currentInput = inputList[index];
			var loaderFunction = null;
			if (currentInput.isFile) {
				if (currentInput.isArrayBuffer) {
					loaderFunction = JSM.GetArrayBufferFromFile;
				} else {
					loaderFunction = JSM.GetStringBufferFromFile;
				}
			} else {
				if (currentInput.isArrayBuffer) {
					loaderFunction = JSM.GetArrayBufferFromURL;
				} else {
					loaderFunction = JSM.GetStringBufferFromURL;
				}
			}
			
			loaderFunction (currentInput.originalObject, {
				onReady : function (resultBuffer) {
					result.push (resultBuffer);
					LoadMultipleBuffersInternal (inputList, index + 1, result, onReady);
				},
				onError : function () {
					result.push (null);
					LoadMultipleBuffersInternal (inputList, index + 1, result, onReady);
				}
			});
		}

		var result = [];
		LoadMultipleBuffersInternal (inputList, 0, result, function (result) {
			onReady (result);
		});
	};

	return JSM;
});

define('skylark-jsmodeler/import/importer3ds',["../core/jsm"],function(JSM){
	JSM.Read3dsFile = function (arrayBuffer, callbacks)
	{
		function OnLog (logText, logLevel)
		{
			if (callbacks.onLog !== undefined && callbacks.onLog !== null) {
				callbacks.onLog (logText, logLevel);
			}
		}

		function OnMaterial (material)
		{
			if (callbacks.onMaterial !== undefined && callbacks.onMaterial !== null) {
				callbacks.onMaterial (material);
			}
		}

		function OnMesh (objectName)
		{
			if (callbacks.onMesh !== undefined && callbacks.onMesh !== null) {
				callbacks.onMesh (objectName);
			}
		}

		function OnTransformation (matrix)
		{
			if (callbacks.onTransformation !== undefined && callbacks.onTransformation !== null) {
				callbacks.onTransformation (matrix);
			}
		}
		
		function OnObjectNode (objectNode)
		{
			if (callbacks.onObjectNode !== undefined && callbacks.onObjectNode !== null) {
				callbacks.onObjectNode (objectNode);
			}
		}

		function OnVertex (x, y, z)
		{
			if (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {
				callbacks.onVertex (x, y, z);
			}
		}

		function OnTextureVertex (x, y)
		{
			if (callbacks.onTextureVertex !== undefined && callbacks.onTextureVertex !== null) {
				callbacks.onTextureVertex (x, y);
			}
		}

		function OnFace (v0, v1, v2, flags)
		{
			if (callbacks.onFace !== undefined && callbacks.onFace !== null) {
				callbacks.onFace (v0, v1, v2, flags);
			}
		}

		function OnFaceMaterial (faceIndex, materialName)
		{
			if (callbacks.onFaceMaterial !== undefined && callbacks.onFaceMaterial !== null) {
				callbacks.onFaceMaterial (faceIndex, materialName);
			}
		}

		function OnFaceSmoothingGroup (faceIndex, smoothingGroup)
		{
			if (callbacks.onFaceSmoothingGroup !== undefined && callbacks.onFaceSmoothingGroup !== null) {
				callbacks.onFaceSmoothingGroup (faceIndex, smoothingGroup);
			}
		}

		function ReadChunk (reader, onReady)
		{
			var chunkId = reader.ReadUnsignedInteger16 ();
			var chunkLength = reader.ReadUnsignedInteger32 ();
			onReady (chunkId, chunkLength);
		}
		
		function SkipChunk (reader, length)
		{
			reader.Skip (length - 6);
		}
		
		function GetChunkEnd (reader, length)
		{
			return reader.GetPosition () + length - 6;
		}
		
		function ReadName (reader)
		{
			var name = '';
			var letter = 0;
			var count = 0;
			while (count < 64) {
				letter = reader.ReadCharacter ();
				if (letter === 0) {
					break;
				}
				name = name + String.fromCharCode (letter);
				count = count + 1;
			}
			return name;
		}

		function ReadVector (reader)
		{
			var result = [];
			var i;
			for (i = 0; i < 3; i++) {
				result[i] = reader.ReadFloat32 ();
			}
			return result;
		}

		function ReadChunks (reader, endByte, onReady)
		{
			while (reader.GetPosition () <= endByte - 6) {
				ReadChunk (reader, onReady);
			}
		}

		function ReadFile (reader, chunks)
		{
			function ReadColorChunk (reader, id, length)
			{
				var color = [0.0, 0.0, 0.0];
				var endByte = GetChunkEnd (reader, length);
				var hasLinColor = false;
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.MAT_COLOR) {
						if (!hasLinColor) {
							color[0] = reader.ReadUnsignedCharacter () / 255.0;
							color[1] = reader.ReadUnsignedCharacter () / 255.0;
							color[2] = reader.ReadUnsignedCharacter () / 255.0;
						}
					} else if (chunkId == chunks.MAT_LIN_COLOR) {
						color[0] = reader.ReadUnsignedCharacter () / 255.0;
						color[1] = reader.ReadUnsignedCharacter () / 255.0;
						color[2] = reader.ReadUnsignedCharacter () / 255.0;
						hasLinColor = true;
					} else if (chunkId == chunks.MAT_COLOR_F) {
						if (!hasLinColor) {
							color[0] = reader.ReadFloat32 ();
							color[1] = reader.ReadFloat32 ();
							color[2] = reader.ReadFloat32 ();
						}
					} else if (chunkId == chunks.MAT_LIN_COLOR_F) {
						color[0] = reader.ReadFloat32 ();
						color[1] = reader.ReadFloat32 ();
						color[2] = reader.ReadFloat32 ();
						hasLinColor = true;
					} else {
						SkipChunk (reader, chunkLength);
					}
				});
				return color;
			}
			
			function ReadPercentageChunk (reader, id, length)
			{
				var percentage = 0.0;
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.PERCENTAGE) {
						percentage = reader.ReadUnsignedInteger16 () / 100.0;
					} else if (chunkId == chunks.PERCENTAGE_F) {
						percentage = reader.ReadFloat32 ();
					} else {
						SkipChunk (reader, chunkLength);
					}
				});
				return percentage;
			}

			function ReadTextureMapChunk (reader, id, length, material)
			{
				material.texture = null;
				material.offset = [0.0, 0.0];
				material.scale = [1.0, 1.0];
				material.rotation = 0.0;
			
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.MAT_TEXMAP_NAME) {
						material.texture = ReadName (reader);
					} else if (chunkId == chunks.MAT_TEXMAP_UOFFSET) {
						material.offset[0] = reader.ReadFloat32 ();
					} else if (chunkId == chunks.MAT_TEXMAP_VOFFSET) {
						material.offset[1] = reader.ReadFloat32 ();
					} else if (chunkId == chunks.MAT_TEXMAP_USCALE) {
						material.scale[0] = reader.ReadFloat32 ();
					} else if (chunkId == chunks.MAT_TEXMAP_VSCALE) {
						material.scale[1] = reader.ReadFloat32 ();
					} else if (chunkId == chunks.MAT_TEXMAP_ROTATION) {
						material.rotation = reader.ReadFloat32 ();
					} else {
						SkipChunk (reader, chunkLength);
					}
				});
			}

			function ReadMaterialChunk (reader, id, length)
			{
				OnLog ('Read material chunk (' + id.toString (16) + ', ' + length + ')', 2);
				
				var material = {};
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.MAT_NAME) {
						OnLog ('Read material name chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.name = ReadName (reader);
					} else if (chunkId == chunks.MAT_AMBIENT) {
						OnLog ('Read material ambient chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.ambient = ReadColorChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.MAT_DIFFUSE) {
						OnLog ('Read material diffuse chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.diffuse = ReadColorChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.MAT_SPECULAR) {
						OnLog ('Read material specular chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.specular = ReadColorChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.MAT_SHININESS) {
						OnLog ('Read material shininess chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.shininess = ReadPercentageChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.MAT_SHININESS_STRENGTH) {
						OnLog ('Read material shininess strength chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.shininessStrength = ReadPercentageChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.MAT_TRANSPARENCY) {
						OnLog ('Read material transparency chunk (' + id.toString (16) + ', ' + length + ')', 3);
						material.transparency = ReadPercentageChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.MAT_TEXMAP) {
						OnLog ('Read material texture map chunk (' + id.toString (16) + ', ' + length + ')', 3);
						ReadTextureMapChunk (reader, chunkId, chunkLength, material);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 3);
						SkipChunk (reader, chunkLength);
					}
				});
				
				OnMaterial (material);
			}

			function ReadVerticesChunk (reader, id, length)
			{
				OnLog ('Read vertices chunk (' + id.toString (16) + ', ' + length + ')', 4);
				
				var vertexCount = reader.ReadUnsignedInteger16 ();
				var i, x, y, z;
				for (i = 0; i < vertexCount; i++) {
					x = reader.ReadFloat32 ();
					y = reader.ReadFloat32 ();
					z = reader.ReadFloat32 ();
					OnVertex (x, y, z);
				}
			}

			function ReadTextureVerticesChunk (reader, id, length)
			{
				OnLog ('Read texture vertices chunk (' + id.toString (16) + ', ' + length + ')', 4);
				
				var texVertexCount = reader.ReadUnsignedInteger16 ();
				var i, x, y;
				for (i = 0; i < texVertexCount; i++) {
					x = reader.ReadFloat32 ();
					y = reader.ReadFloat32 ();
					OnTextureVertex (x, y);
				}
			}

			function ReadFaceMaterialsChunk (reader, id, length)
			{
				OnLog ('Read face materials chunk (' + id.toString (16) + ', ' + length + ')', 5);
				
				var materialName = ReadName (reader);
				var faceCount = reader.ReadUnsignedInteger16 ();
				var i, faceIndex;
				for (i = 0; i < faceCount; i++) {
					faceIndex = reader.ReadUnsignedInteger16 ();
					OnFaceMaterial (faceIndex, materialName);
				}
			}
			
			function ReadFaceSmoothingGroupsChunk (reader, faceCount, id, length)
			{
				OnLog ('Read face smoothing groups chunk (' + id.toString (16) + ', ' + length + ')', 5);
				
				var i, smoothingGroup;
				for (i = 0; i < faceCount; i++) {
					smoothingGroup = reader.ReadUnsignedInteger32 ();
					OnFaceSmoothingGroup (i, smoothingGroup);
				}
			}

			function ReadFacesChunk (reader, id, length)
			{
				OnLog ('Read faces chunk (' + id.toString (16) + ', ' + length + ')', 4);
				
				var endByte = GetChunkEnd (reader, length);
				var faceCount = reader.ReadUnsignedInteger16 ();
				var i, v0, v1, v2, flags;
				for (i = 0; i < faceCount; i++) {
					v0 = reader.ReadUnsignedInteger16 ();
					v1 = reader.ReadUnsignedInteger16 ();
					v2 = reader.ReadUnsignedInteger16 ();
					flags = reader.ReadUnsignedInteger16 ();
					OnFace (v0, v1, v2, flags);
				}

				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.TRI_MATERIAL) {
						ReadFaceMaterialsChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.TRI_SMOOTH) {
						ReadFaceSmoothingGroupsChunk (reader, faceCount,  chunkId, chunkLength);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 5);
						SkipChunk (reader, chunkLength);
					}
				});
			}

			function ReadTransformationChunk (reader, id, length)
			{
				OnLog ('Read transformation chunk (' + id.toString (16) + ', ' + length + ')', 4);
				var matrix = [];
				var i, j;
				for (i = 0; i < 4; i++) {
					for (j = 0; j < 3; j++) {
						matrix.push (reader.ReadFloat32 ());
					}
					if (i < 3) {
						matrix.push (0);
					} else {
						matrix.push (1);
					}
				}

				OnTransformation (matrix);
			}

			function ReadMeshChunk (reader, objectName, id, length)
			{
				OnLog ('Read mesh chunk (' + objectName + ', ' +  id.toString (16) + ', ' + length + ')', 3);

				OnMesh (objectName);
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.TRI_VERTEX) {
						ReadVerticesChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.TRI_TEXVERTEX) {
						ReadTextureVerticesChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.TRI_FACE) {
						ReadFacesChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.TRI_TRANSFORMATION) {
						ReadTransformationChunk (reader, chunkId, chunkLength);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 4);
						SkipChunk (reader, chunkLength);
					}
				});
			}

			function ReadLightChunk (reader, objectName, id, length)
			{
				OnLog ('Skip light chunk (' + objectName + ', ' + id.toString (16) + ', ' + length + ')', 3);
				SkipChunk (reader, length);
			}

			function ReadCameraChunk (reader, objectName, id, length)
			{
				OnLog ('Skip camera chunk (' + objectName + ', ' +  id.toString (16) + ', ' + length + ')', 3);
				SkipChunk (reader, length);
			}

			function ReadObjectChunk (reader, id, length)
			{
				OnLog ('Read object chunk (' + id.toString (16) + ', ' + length + ')', 2);
				
				var endByte = GetChunkEnd (reader, length);
				var objectName = ReadName (reader);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.OBJ_TRIMESH) {
						ReadMeshChunk (reader, objectName, chunkId, chunkLength);
					} else if (chunkId == chunks.OBJ_LIGHT) {
						ReadLightChunk (reader, objectName, chunkId, chunkLength);
					} else if (chunkId == chunks.OBJ_CAMERA) {
						ReadCameraChunk (reader, objectName, chunkId, chunkLength);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 3);
						SkipChunk (reader, chunkLength);
					}
				});
			}

			function ReadEditorChunk (reader, id, length)
			{
				OnLog ('Read editor chunk (' + id.toString (16) + ', ' + length + ')', 1);
				
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.EDIT_MATERIAL) {
						ReadMaterialChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.EDIT_OBJECT) {
						ReadObjectChunk (reader, chunkId, chunkLength);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 2);
						SkipChunk (reader, chunkLength);
					}
				});
			}

			function ReadObjectNodeChunk (reader, id, length)
			{
				function ReadTrackVector (reader, type)
				{
					var result = [];
					reader.Skip (10);
					
					var i, flags, current, tmp;
					var keyNum = reader.ReadInteger32 ();
					for (i = 0; i < keyNum; i++) {
						reader.ReadInteger32 ();
						flags = reader.ReadUnsignedInteger16 ();
						if (flags !== 0) {
							reader.ReadFloat32 ();
						}
						
						current = null;
						if (type == chunks.OBJECT_ROTATION) {
							tmp = reader.ReadFloat32 ();
							current = ReadVector (reader);
							current[3] = tmp;
						} else {
							current = ReadVector (reader);
						}
						result.push (current);
					}

					return result;
				}
			
				OnLog ('Read object node chunk (' + id.toString (16) + ', ' + length + ')', 2);
				
				var objectNode = {
					name : '',
					nodeId : -1,
					flags : -1,
					userId : -1,
					pivot : [0.0, 0.0, 0.0],
					positions : [],
					rotations : [],
					scales : []
				};
				
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.OBJECT_HIERARCHY) {
						objectNode.name = ReadName (reader);
						objectNode.flags = reader.ReadUnsignedInteger32 ();
						objectNode.userId = reader.ReadUnsignedInteger16 ();
					} else if (chunkId == chunks.OBJECT_PIVOT) {
						objectNode.pivot = ReadVector (reader);
					} else if (chunkId == chunks.OBJECT_POSITION) {
						objectNode.positions = ReadTrackVector (reader, chunks.OBJECT_POSITION);
					} else if (chunkId == chunks.OBJECT_ROTATION) {
						objectNode.rotations = ReadTrackVector (reader, chunks.OBJECT_ROTATION);
					} else if (chunkId == chunks.OBJECT_SCALE) {
						objectNode.scales = ReadTrackVector (reader, chunks.OBJECT_SCALE);
					} else if (chunkId == chunks.OBJECT_ID) {
						objectNode.nodeId = reader.ReadUnsignedInteger16 ();
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 3);
						SkipChunk (reader, chunkLength);
					}
				});

				OnObjectNode (objectNode);
			}
			
			function ReadKeyFrameChunk (reader, id, length)
			{
				OnLog ('Read keyframe chunk (' + id.toString (16) + ', ' + length + ')', 1);
				
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.OBJECT_NODE) {
						ReadObjectNodeChunk (reader, chunkId, chunkLength);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 2);
						SkipChunk (reader, chunkLength);
					}
				});
			}
			
			function ReadMainChunk (reader, id, length)
			{
				OnLog ('Read main chunk (' + id.toString (16) + ', ' + length + ')', 0);
				
				var endByte = GetChunkEnd (reader, length);
				ReadChunks (reader, endByte, function (chunkId, chunkLength) {
					if (chunkId == chunks.EDIT3DS) {
						ReadEditorChunk (reader, chunkId, chunkLength);
					} else if (chunkId == chunks.KF3DS) {
						ReadKeyFrameChunk (reader, chunkId, chunkLength);
					} else {
						OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 1);
						SkipChunk (reader, chunkLength);
					}
				});
			}
		
			var endByte = reader.GetByteLength ();
			ReadChunks (reader, endByte, function (chunkId, chunkLength) {
				if (chunkId == chunks.MAIN3DS) {
					ReadMainChunk (reader, chunkId, chunkLength);
				} else {
					OnLog ('Skip chunk (' + chunkId.toString (16) + ', ' + chunkLength + ')', 0);
					SkipChunk (reader, chunkLength);
				}
			});
		}
		
		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		var chunks = {
			MAIN3DS : 0x4D4D,
			EDIT3DS : 0x3D3D,
			EDIT_MATERIAL : 0xAFFF,
			MAT_NAME : 0xA000,
			MAT_AMBIENT : 0xA010,
			MAT_DIFFUSE : 0xA020,
			MAT_SPECULAR : 0xA030,
			MAT_SHININESS : 0xA040,
			MAT_SHININESS_STRENGTH : 0xA041,
			MAT_TRANSPARENCY : 0xA050,
			MAT_COLOR_F : 0x0010,
			MAT_COLOR : 0x0011,
			MAT_LIN_COLOR : 0x0012,
			MAT_LIN_COLOR_F : 0x0013,
			MAT_TEXMAP : 0xA200,
			MAT_TEXMAP_NAME : 0xA300,
			MAT_TEXMAP_UOFFSET : 0xA358,
			MAT_TEXMAP_VOFFSET : 0xA35A,
			MAT_TEXMAP_USCALE : 0xA354,
			MAT_TEXMAP_VSCALE : 0xA356,
			MAT_TEXMAP_ROTATION : 0xA35C,
			PERCENTAGE : 0x0030,
			PERCENTAGE_F : 0x0031,
			EDIT_OBJECT : 0x4000,
			OBJ_TRIMESH : 0x4100,
			OBJ_LIGHT : 0x4600,
			OBJ_CAMERA : 0x4700,
			TRI_VERTEX : 0x4110,
			TRI_TEXVERTEX : 0x4140,
			TRI_FACE : 0x4120,
			TRI_TRANSFORMATION : 0x4160,
			TRI_MATERIAL : 0x4130,
			TRI_SMOOTH : 0x4150,
			KF3DS : 0xB000,
			OBJECT_NODE : 0xB002,
			OBJECT_HIERARCHY : 0xB010,
			OBJECT_PIVOT : 0xB013,
			OBJECT_POSITION : 0xB020,
			OBJECT_ROTATION : 0xB021,
			OBJECT_SCALE : 0xB022,
			OBJECT_ID : 0xB030
		};
		
		var reader = new JSM.BinaryReader (arrayBuffer, true);
		ReadFile (reader, chunks);
	};

	JSM.Convert3dsToJsonData = function (arrayBuffer, callbacks)
	{
		function OnFileRequested (fileName)
		{
			if (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {
				return callbacks.onFileRequested (fileName);
			}
			return null;
		}

		function FinalizeMeshes (nodeHierarcy, triangleModel, materialNameToIndex)
		{
			function ApplyTransformation (body, node, nodeHierarcy)
			{
				function MatrixScale (matrix, scale)
				{
					var x = scale[0];
					var y = scale[1];
					var z = scale[2];
				
					var i;
					for (i = 0; i < 4; i++) {
						matrix[0 * 4 + i] *= x;
						matrix[1 * 4 + i] *= y;
						matrix[2 * 4 + i] *= z;
					}
					
					return matrix;
				}

				function MatrixTranslate (matrix, translation)
				{
					var x = translation[0];
					var y = translation[1];
					var z = translation[2];

					var i;
					for (i = 0; i < 3; i++) {
						matrix[3 * 4 + i] += matrix[0 * 4 + i] * x + matrix[1 * 4 + i] * y + matrix[2 * 4 + i] * z;
					}
					
					return matrix;
				}

				function MatrixRotate (matrix, quaternion)
				{
					var rotation = JSM.MatrixRotationQuaternion (quaternion);
					return JSM.MatrixMultiply (rotation, matrix);
				}

				function TransformBodyVertices (body, matrix)
				{
					var i, vertex, transformedVertex;
					for (i = 0; i < body.VertexCount (); i++) {
						vertex = body.GetVertex (i);
						transformedVertex = JSM.ApplyTransformation (matrix, vertex);
						body.SetVertex (i, transformedVertex.x, transformedVertex.y, transformedVertex.z);
					}			
				}
				
				function FlipByXCoordinates (body, matrix, invMatrix)	
				{
					var determinant = JSM.MatrixDeterminant (matrix);
					if (!JSM.IsNegative (determinant)) {
						return;
					}

					var flippedMatrix = JSM.MatrixClone (matrix);
					MatrixScale (flippedMatrix, [-1.0, 1.0, 1.0]);
					
					var finalMatrix = JSM.MatrixMultiply (invMatrix, flippedMatrix);
					TransformBodyVertices (body, finalMatrix);
				}

				function GetNodeTransformation (node, nodeHierarcy)
				{
					function GetNodePosition (node)
					{
						if (node.positions.length === 0) {
							return [0.0, 0.0, 0.0];
						}
						return node.positions[0];
					}
				
					function GetNodeRotation (node)
					{
						function GetQuatFromAxisAndAngle (quat)
						{
							var result = [0.0, 0.0, 0.0, 1.0];
							var length = Math.sqrt (quat[0] * quat[0] + quat[1] * quat[1] + quat[2] * quat[2]);
							if (JSM.IsPositive (length)) {
								var omega = quat[3] * -0.5;
								var si = Math.sin (omega) / length;
								result = [si * quat[0], si * quat[1], si * quat[2], Math.cos (omega)];
							}
							return result;
						}

						if (node.rotations.length === 0) {
							return [0.0, 0.0, 0.0, 0.0];
						}
						
						var quat = node.rotations[0];
						return GetQuatFromAxisAndAngle (quat);
					}

					function GetNodeScale (node)
					{
						if (node.scales.length === 0) {
							return [0.0, 0.0, 0.0, 0.0];
						}
						return node.scales[0];
					}
					
					if (node.matrix !== undefined) {
						return node.matrix;
					}
					
					var result = JSM.MatrixIdentity ();
					result = MatrixTranslate (result, GetNodePosition (node));
					result = MatrixRotate (result, GetNodeRotation (node));
					result = MatrixScale (result, GetNodeScale (node));
					
					if (node.userId != 65535) {
						var parentIndex = nodeHierarcy.nodeIdToIndex[node.userId];
						if (parentIndex !== undefined) {
							var parentNode = nodeHierarcy.nodes[parentIndex];
							var parentTransformation = GetNodeTransformation (parentNode, nodeHierarcy);
							result = JSM.MatrixMultiply (result, parentTransformation);
						}
					}
					
					node.matrix = result;
					return result;
				}
			
				function GetNodePivotPoint (node)
				{
					if (node === undefined || node === null) {
						return [0.0, 0.0, 0.0];
					}
					return node.pivot;
				}

				function GetMeshTransformation (mesh)
				{
					if (mesh === undefined || mesh === null) {
						return null;
					}
					return mesh.transformation;
				}
				
				var currentMeshData = body.meshData;
				var meshTransformation = GetMeshTransformation (currentMeshData);
				if (meshTransformation === null) {
					return;
				}
				
				var nodeTransformation = null;
				if (node !== null) {
					nodeTransformation = GetNodeTransformation (node, nodeHierarcy);
				} else {
					nodeTransformation = meshTransformation;
				}

				var matrix = JSM.MatrixClone (nodeTransformation);
				var meshMatrix = JSM.MatrixClone (meshTransformation);
				var invMeshMatrix = JSM.MatrixInvert (meshMatrix);
				if (invMeshMatrix === null) {
					return;
				}

				FlipByXCoordinates (body, meshMatrix, invMeshMatrix);

				var nodePivotPoint = GetNodePivotPoint (node);
				MatrixTranslate (matrix, [-nodePivotPoint[0], -nodePivotPoint[1], -nodePivotPoint[2]]);
				var finalMatrix = JSM.MatrixMultiply (invMeshMatrix, matrix);
				TransformBodyVertices (body, finalMatrix);
			}

			function FinalizeMaterials (body, materialNameToIndex)
			{
				var hasTextureCoordinates = (body.UVCount () == body.VertexCount ());
				var currentMeshData = body.meshData;
				var i, triangle, materialName, materialIndex, smoothingGroup;
				for (i = 0; i < body.TriangleCount (); i++) {
					triangle = body.GetTriangle (i);
					if (hasTextureCoordinates) {
						triangle.u0 = triangle.v0;
						triangle.u1 = triangle.v1;
						triangle.u2 = triangle.v2;
					}
					
					materialName = currentMeshData.faceToMaterial[i];
					if (materialName !== undefined) {
						materialIndex = materialNameToIndex[materialName];
						if (materialIndex !== undefined) {
							triangle.mat = materialIndex;
						}
					}
					
					smoothingGroup = currentMeshData.faceToSmoothingGroup[i];
					if (smoothingGroup !== undefined && smoothingGroup > 0) {
						triangle.curve = smoothingGroup;
					}
				}
			}

			function FinalizeMesh (body, node, materialNameToIndex, nodeHierarcy)
			{
				ApplyTransformation (body, node, nodeHierarcy);
				FinalizeMaterials (body, materialNameToIndex);		
			}
			
			function DuplicateBody (model, body, bodyIndex, instanceIndex)
			{
				var clonedBody = body.Clone ();
				clonedBody.SetName (clonedBody.GetName () + ' (' + instanceIndex + ')');
				if (bodyIndex < model.BodyCount ()) {
					model.AddBodyToIndex (clonedBody, bodyIndex);
				} else {
					model.AddBody (clonedBody);
				}
				return clonedBody;
			}

			var i, j, currentBody, currentMeshData, currentNode;
			var firstNode, addedBody;
			for (i = 0; i < triangleModel.BodyCount (); i++) {
				currentBody = triangleModel.GetBody (i);
				currentMeshData = currentBody.meshData;
				if (currentMeshData.objectNodes.length === 0) {
					FinalizeMesh (currentBody, null, materialNameToIndex, nodeHierarcy);
				} else {
					firstNode = nodeHierarcy.nodes[currentMeshData.objectNodes[0]];
					for (j = 1; j < currentMeshData.objectNodes.length; j++) {
						currentNode = nodeHierarcy.nodes[currentMeshData.objectNodes[j]];
						addedBody = DuplicateBody (triangleModel, currentBody, i + 1, j + 1);
						addedBody.meshData = currentBody.meshData;
						FinalizeMesh (addedBody, currentNode, materialNameToIndex, nodeHierarcy);
						i = i + 1;
					}
					FinalizeMesh (currentBody, firstNode, materialNameToIndex, nodeHierarcy);
				}
			}
		}

		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		var triangleModel = new JSM.TriangleModel ();
		var currentBody = null;
		
		var materialNameToIndex = {};
		var bodyNameToIndex = {};

		var nodeHierarcy = {
			nodes : [],
			nodeIdToIndex : {}
		};
		
		JSM.Read3dsFile (arrayBuffer, {
			onMaterial : function (material) {
				function GetOpacity (transparency)
				{
					if (transparency === undefined || transparency === null) {
						return 1.0;
					}
					return 1.0 - transparency;
				}
				
				function GetShininess (shininess, shininessStrength)
				{
					if (shininess === undefined || shininess === null) {
						return 0.0;
					}
					if (shininessStrength === undefined || shininessStrength === null) {
						return 0.0;
					}
					return shininess * shininessStrength;
				}
				
				if (materialNameToIndex[material.name] !== undefined) {
					return;
				}
				
				var index = triangleModel.AddMaterial ({
					name : material.name,
					ambient : material.ambient,
					diffuse : material.diffuse,
					specular : material.specular,
					shininess : GetShininess (material.shininess, material.shininessStrength),
					opacity : GetOpacity (material.transparency)
				});
				
				var currentMaterial = triangleModel.GetMaterial (index);
				if (material.texture !== undefined && material.texture !== null) {
					var textureBuffer = OnFileRequested (material.texture);
					if (textureBuffer !== null) {
						var blob = new window.Blob ([textureBuffer]);
						var blobURL = window.URL.createObjectURL (blob);
						currentMaterial.texture = blobURL;
						currentMaterial.offset = material.offset;
						currentMaterial.scale = material.scale;
						currentMaterial.rotation = -material.rotation;
					}
				}

				materialNameToIndex[material.name] = index;
			},
			onMesh : function (meshName) {
				if (bodyNameToIndex[meshName] !== undefined) {
					return;
				}
			
				var index = triangleModel.AddBody (new JSM.TriangleBody (meshName));
				currentBody = triangleModel.GetBody (index);
				currentBody.meshData ={
					faceToMaterial : {},
					faceToSmoothingGroup : {},
					objectNodes : [],
					transformation : null
				};
				bodyNameToIndex[meshName] = index;
			},
			onTransformation : function (matrix) {
				if (currentBody === null) {
					return;
				}
				currentBody.meshData.transformation = matrix;
			},
			onObjectNode : function (objectNode) {
				var nodeIndex = nodeHierarcy.nodes.length;
				nodeHierarcy.nodes.push (objectNode);
				nodeHierarcy.nodeIdToIndex[objectNode.nodeId] = nodeIndex;

				var bodyIndex = bodyNameToIndex[objectNode.name];
				if (bodyIndex === undefined) {
					return;
				}
				var body = triangleModel.GetBody (bodyIndex);
				body.meshData.objectNodes.push (nodeIndex);
			},
			onVertex : function (x, y, z) {
				if (currentBody === null) {
					return;
				}
				currentBody.AddVertex (x, y, z);
			},
			onTextureVertex : function (x, y) {
				if (currentBody === null) {
					return;
				}
				currentBody.AddUV (x, y);
			},
			onFace : function (v0, v1, v2) {
				if (currentBody === null) {
					return;
				}
				currentBody.AddTriangle (v0, v1, v2);
			},
			onFaceMaterial : function (faceIndex, materialName) {
				if (currentBody === null) {
					return;
				}
				currentBody.meshData.faceToMaterial[faceIndex] = materialName;
			},
			onFaceSmoothingGroup : function (faceIndex, smoothingGroup) {
				if (currentBody === null) {
					return;
				}
				currentBody.meshData.faceToSmoothingGroup[faceIndex] = smoothingGroup;
			},
			onFileRequested : OnFileRequested
		});
		
		FinalizeMeshes (nodeHierarcy, triangleModel, materialNameToIndex);
		triangleModel.Finalize ();

		var jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);
		return jsonData;
	};

	return JSM;
});

define('skylark-jsmodeler/import/importerobj',["../core/jsm"],function(JSM){
	JSM.ReadObjFile = function (stringBuffer, callbacks)
	{
		function OnNewMaterial (name)
		{
			if (callbacks.onNewMaterial !== undefined && callbacks.onNewMaterial !== null) {
				callbacks.onNewMaterial (name);
			}
		}

		function OnMaterialComponent (name, red, green, blue)
		{
			if (callbacks.onMaterialComponent !== undefined && callbacks.onMaterialComponent !== null) {
				callbacks.onMaterialComponent (name, red, green, blue);
			}
		}

		function OnMaterialParameter (name, value)
		{
			if (callbacks.onMaterialParameter !== undefined && callbacks.onMaterialParameter !== null) {
				callbacks.onMaterialParameter (name, value);
			}
		}

		function OnMaterialTexture (textureName)
		{
			if (callbacks.onMaterialTexture !== undefined && callbacks.onMaterialTexture !== null) {
				callbacks.onMaterialTexture (textureName);
			}
		}
		
		function OnUseMaterial (name)
		{
			if (callbacks.onUseMaterial !== undefined && callbacks.onUseMaterial !== null) {
				callbacks.onUseMaterial (name);
			}
		}

		function OnMesh (meshName)
		{
			if (callbacks.onMesh !== undefined && callbacks.onMesh !== null) {
				callbacks.onMesh (meshName);
			}
		}
		
		function OnVertex (x, y, z)
		{
			if (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {
				callbacks.onVertex (x, y, z);
			}
		}

		function OnNormal (x, y, z)
		{
			if (callbacks.onNormal !== undefined && callbacks.onNormal !== null) {
				callbacks.onNormal (x, y, z);
			}
		}

		function OnTexCoord (x, y)
		{
			if (callbacks.onTexCoord !== undefined && callbacks.onTexCoord !== null) {
				callbacks.onTexCoord (x, y);
			}
		}

		function OnFace (vertices, normals, uvs)
		{
			if (callbacks.onFace !== undefined && callbacks.onFace !== null) {
				callbacks.onFace (vertices, normals, uvs);
			}
		}

		function OnFileRequested (fileName)
		{
			if (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {
				return callbacks.onFileRequested (fileName);
			}
			return null;
		}

		function ProcessLine (line, objectCounter)
		{
			function GetIndex (index, count)
			{
				if (index > 0) {
					return index - 1;
				} else {
					return count + index;
				}
			}

			function GetFileName (line, keyword)
			{
				var fileNameIndex = line.indexOf (keyword) + keyword.length;
				var fileName = line.substr (fileNameIndex, line.length - fileNameIndex);
				return fileName.trim ();
			}
		
			if (line.length === 0) {
				return;
			}
			
			if (line[0] == '#') {
				return;
			}

			var lineParts = line.split (/\s+/);
			if (lineParts.length === 0 || lineParts[0][0] == '#') {
				return;
			}

			var i, fileName;
			if (lineParts[0] == 'g') {
				if (lineParts.length < 2) {
					return;
				}
				var meshName = '';
				for (i = 1; i < lineParts.length; i++) {
					meshName += lineParts[i];
					if (i < lineParts.length - 1) {
						meshName += ' ';
					}
				}
				OnMesh (meshName);
			} else if (lineParts[0] == 'v') {
				if (lineParts.length < 4) {
					return;
				}
				objectCounter.vertexCount += 1;
				OnVertex (parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));
			} else if (lineParts[0] == 'vn') {
				if (lineParts.length < 4) {
					return;
				}
				objectCounter.normalCount += 1;
				OnNormal (parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));
			} else if (lineParts[0] == 'vt') {
				if (lineParts.length < 3) {
					return;
				}
				objectCounter.uvCount += 1;
				OnTexCoord (parseFloat (lineParts[1]), parseFloat (lineParts[2]));
			} else if (lineParts[0] == 'f') {
				if (lineParts.length < 4) {
					return;
				}
				
				var vertices = [];
				var normals = [];
				var uvs = [];
				
				var partSplitted;
				for (i = 1; i < lineParts.length; i++) {
					partSplitted = lineParts[i].split ('/');
					vertices.push (GetIndex (parseInt (partSplitted[0], 10), objectCounter.vertexCount));
					if (partSplitted.length > 1 && partSplitted[1].length > 0) {
						uvs.push (GetIndex (parseInt (partSplitted[1], 10), objectCounter.uvCount));
					}
					if (partSplitted.length > 2 && partSplitted[2].length > 0) {
						normals.push (GetIndex (parseInt (partSplitted[2], 10), objectCounter.normalCount));
					}
				}
				OnFace (vertices, normals, uvs);
			} else if (lineParts[0] == 'usemtl') {
				if (lineParts.length < 2) {
					return;
				}
				
				OnUseMaterial (lineParts[1]);
			} else if (lineParts[0] == 'newmtl') {
				if (lineParts.length < 2) {
					return;
				}
				
				OnNewMaterial (lineParts[1]);
			} else if (lineParts[0] == 'Ka' || lineParts[0] == 'Kd' || lineParts[0] == 'Ks') {
				if (lineParts.length < 4) {
					return;
				}
				
				OnMaterialComponent (lineParts[0], parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3]));
			} else if (lineParts[0] == 'Ns' || lineParts[0] == 'Tr' || lineParts[0] == 'd') {
				if (lineParts.length < 2) {
					return;
				}

				OnMaterialParameter (lineParts[0], lineParts[1]);
			} else if (lineParts[0] == 'map_Kd') {
				if (lineParts.length < 2) {
					return;
				}
				
				fileName = GetFileName (line, 'map_Kd');
				OnMaterialTexture (fileName);
			} else if (lineParts[0] == 'mtllib') {
				if (lineParts.length < 2) {
					return;
				}

				fileName = GetFileName (line, 'mtllib');
				var fileStringBuffer = OnFileRequested (fileName.trim ());
				if (fileStringBuffer === null) {
					return;
				}
				ProcessFile (fileStringBuffer);
			}
		}
		
		function ProcessFile (stringBuffer, objectCounter)
		{
			var lines = stringBuffer.split ('\n');
			var i, line;
			for (i = 0; i < lines.length; i++) {
				line = lines[i].trim ();
				ProcessLine (line, objectCounter);
			}
		}
		
		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		var objectCounter = {
			vertexCount : 0,
			normalCount : 0,
			uvCount : 0
		};

		ProcessFile (stringBuffer, objectCounter);
	};

	JSM.ConvertObjToJsonData = function (stringBuffer, callbacks)
	{
		function OnFileRequested (fileName)
		{
			if (callbacks.onFileRequested !== undefined && callbacks.onFileRequested !== null) {
				return callbacks.onFileRequested (fileName);
			}
			return null;
		}

		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		var triangleModel = new JSM.TriangleModel ();
		var index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));
		var currentBody = triangleModel.GetBody (index);
		
		var materialNameToIndex = {};
		var currentMaterial = null;
		var currentMaterialIndex = null;
		
		var globalVertices = [];
		var globalNormals = [];
		var globalUVs = [];
		
		var globalToLocalVertices = {};
		var globalToLocalNormals = {};
		var globalToLocalUVs = {};
		
		JSM.ReadObjFile (stringBuffer, {
			onNewMaterial : function (name) {
				var index = triangleModel.AddMaterial ({
					name : name
				});
				currentMaterial = triangleModel.GetMaterial (index);
				materialNameToIndex[name] = index;
			},
			onMaterialComponent : function (name, red, green, blue) {
				if (currentMaterial === null) {
					return;
				}
				if (name == 'Ka') {
					currentMaterial.ambient = [red, green, blue];
				} else if (name == 'Kd') {
					currentMaterial.diffuse = [red, green, blue];
				} else if (name == 'Ks') {
					currentMaterial.specular = [red, green, blue];
				}
			},
			onMaterialParameter : function (name, value) {
				if (currentMaterial === null) {
					return;
				}
				if (name == 'Ns') {
					currentMaterial.shininess = 0.0;
					if (JSM.IsPositive (value)) {
						currentMaterial.shininess = (Math.log2 (parseFloat (value)) - 1) / 10.0;
					}
				} else if (name == 'Tr') {
					currentMaterial.opacity = 1.0 - parseFloat (value);
				} else if (name == 'd') {
					currentMaterial.opacity = parseFloat (value);
				}			
			},
			onMaterialTexture : function (textureName) {
				if (currentMaterial === null) {
					return;
				}

				var textureBuffer = OnFileRequested (textureName);
				if (textureBuffer === null) {
					return;
				}
				
				var blob = new window.Blob ([textureBuffer]);
				var blobURL = window.URL.createObjectURL (blob);
				currentMaterial.texture = blobURL;
			},
			onUseMaterial : function (name) {
				var materialIndex = materialNameToIndex[name];
				if (materialIndex !== undefined) {
					currentMaterialIndex = materialIndex;
				}
			},
			onMesh : function (meshName) {
				var index = triangleModel.AddBody (new JSM.TriangleBody (meshName));
				currentBody = triangleModel.GetBody (index);
				globalToLocalVertices = {};
				globalToLocalNormals = {};
				globalToLocalUVs = {};
			},
			onVertex : function (x, y, z) {
				globalVertices.push (new JSM.Coord (x, y, z));
			},
			onNormal : function (x, y, z) {
				globalNormals.push (new JSM.Coord (x, y, z));
			},
			onTexCoord : function (x, y) {
				globalUVs.push (new JSM.Coord2D (x, y));
			},
			onFace : function (vertices, normals, uvs) {
				function GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, valueAdderFunc)
				{
					if (globalIndex < 0 || globalIndex >= globalValueArray.length) {
						return undefined;
					}				
					var result = globalToLocalIndices[globalIndex];
					if (result === undefined) {
						var globalValue = globalValueArray[globalIndex];
						result = valueAdderFunc (globalValue);
						globalToLocalIndices[globalIndex] = result;
					}
					return result;
				}
				
				function GetLocalVertexIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)
				{
					return GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {
						return triangleBody.AddVertex (val.x, val.y, val.z);
					});
				}
				
				function GetLocalNormalIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)
				{
					return GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {
						return triangleBody.AddNormal (val.x, val.y, val.z);
					});
				}
				
				function GetLocalUVIndex (triangleBody, globalValueArray, globalToLocalIndices, globalIndex)
				{
					return GetLocalIndex (globalValueArray, globalToLocalIndices, globalIndex, function (val) {
						return triangleBody.AddUV (val.x, val.y);
					});
				}
				
				var i, v0, v1, v2, triangle, triangleIndex;
				var hasNormals = (normals.length == vertices.length);
				var hasUVs = (uvs.length == vertices.length);
				var count = vertices.length;
				for (i = 0; i < count - 2; i++) {
					v0 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[0]);
					v1 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[(i + 1) % count]);
					v2 = GetLocalVertexIndex (currentBody, globalVertices, globalToLocalVertices, vertices[(i + 2) % count]);
					triangleIndex = currentBody.AddTriangle (v0, v1, v2);
					triangle = currentBody.GetTriangle (triangleIndex);
					if (hasNormals) {
						triangle.n0 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[0]);
						triangle.n1 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[(i + 1) % count]);
						triangle.n2 = GetLocalNormalIndex (currentBody, globalNormals, globalToLocalNormals, normals[(i + 2) % count]);
					}
					if (hasUVs) {
						triangle.u0 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[0]);
						triangle.u1 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[(i + 1) % count]);
						triangle.u2 = GetLocalUVIndex (currentBody, globalUVs, globalToLocalUVs, uvs[(i + 2) % count]);
					}
					if (currentMaterialIndex !== null) {
						triangle.mat = currentMaterialIndex;
					}
				}
			},
			onFileRequested : OnFileRequested
		});

		triangleModel.Finalize ();
		
		var jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);
		return jsonData;
	};

	return JSM;
});

define('skylark-jsmodeler/import/importerstl',["../core/jsm"],function(JSM){
	JSM.ReadBinaryStlFile = function (arrayBuffer, callbacks)
	{
		function OnFace (v0, v1, v2, normal)
		{
			if (callbacks.onFace !== undefined && callbacks.onFace !== null) {
				callbacks.onFace (v0, v1, v2, normal);
			}
		}

		function ReadVector (reader)
		{
			var result = [];
			var i;
			for (i = 0; i < 3; i++) {
				result[i] = reader.ReadFloat32 ();
			}
			return result;
		}

		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		var reader = new JSM.BinaryReader (arrayBuffer, true);
		reader.Skip (80);
		
		var triangleCount = reader.ReadUnsignedInteger32 ();
		var i, v0, v1, v2, normal;
		for (i = 0; i < triangleCount; i++) {
			normal = ReadVector (reader);
			v0 = ReadVector (reader);
			v1 = ReadVector (reader);
			v2 = ReadVector (reader);
			reader.Skip (2);
			OnFace (v0, v1, v2, normal);
		}
	};

	JSM.ReadAsciiStlFile = function (stringBuffer, callbacks)
	{
		function OnFace (v0, v1, v2, normal)
		{
			if (callbacks.onFace !== undefined && callbacks.onFace !== null) {
				callbacks.onFace (v0, v1, v2, normal);
			}
		}

		function ProcessLine (lines, lineIndex)
		{
			function GetLine (lines, lineIndex)
			{
				return lines[lineIndex].trim ();
			}
		
			function GetVertices (lines, lineIndex, vertices)
			{
				var currentLineIndex, currentLine, lineParts, vertex;
				for (currentLineIndex = lineIndex; currentLineIndex < lines.length && vertices.length < 3; currentLineIndex++) {
					currentLine = GetLine (lines, currentLineIndex);
					if (currentLine.length === 0) {
						continue;
					}
					
					lineParts = currentLine.split (/\s+/);
					if (lineParts.length === 0) {
						continue;
					}
					
					if (lineParts[0] == 'vertex') {
						if (lineParts.length < 4) {
							break;
						} else {
							vertex = [parseFloat (lineParts[1]), parseFloat (lineParts[2]), parseFloat (lineParts[3])];
							vertices.push (vertex);
						}
					}
				}
				return currentLineIndex + 1;
			}
		
			var line = GetLine (lines, lineIndex);
			if (line.length === 0) {
				return lineIndex + 1;
			}
			
			var lineParts = line.split (/\s+/);
			if (lineParts.length === 0) {
				return lineIndex + 1;
			}

			if (lineParts[0] == 'solid') {
				return lineIndex + 1;
			} else if (lineParts[0] == 'facet' && lineParts[1] == 'normal') {
				if (lineParts.length < 5) {
					return -1;
				}
				
				var normal = [parseFloat (lineParts[2]), parseFloat (lineParts[3]), parseFloat (lineParts[4])];
				var vertices = [];
				var nextLineIndex = GetVertices (lines, lineIndex + 1, vertices);
				if (vertices.length != 3) {
					return -1;
				}
				
				OnFace (vertices[0], vertices[1], vertices[2], normal);
				return nextLineIndex;
			}

			return lineIndex + 1;
		}
		
		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		var lineIndex = 0;
		var lines = stringBuffer.split ('\n');
		while (lineIndex < lines.length && lineIndex != -1) {
			lineIndex = ProcessLine (lines, lineIndex);
		}
	};

	JSM.IsBinaryStlFile = function (arrayBuffer)
	{
		var byteLength = arrayBuffer.byteLength;
		if (byteLength < 84) {
			return false;
		}
		
		var reader = new JSM.BinaryReader (arrayBuffer, true);
		reader.Skip (80);
		
		var triangleCount = reader.ReadUnsignedInteger32 ();
		if (byteLength != triangleCount * 50 + 84) {
			return false;
		}
		
		return true;
	};

	JSM.ConvertStlToJsonData = function (arrayBuffer, stringBuffer)
	{
		var triangleModel = new JSM.TriangleModel ();
		var index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));
		var currentBody = triangleModel.GetBody (index);

		if (arrayBuffer !== null) {
			JSM.ReadBinaryStlFile (arrayBuffer, {
				onFace : function (v0, v1, v2, normal) {
					var v0Index = currentBody.AddVertex (v0[0], v0[1], v0[2]);
					var v1Index = currentBody.AddVertex (v1[0], v1[1], v1[2]);
					var v2Index = currentBody.AddVertex (v2[0], v2[1], v2[2]);
					var triangleNormal = new JSM.Vector (normal[0], normal[1], normal[2]).Normalize ();
					var normalIndex = currentBody.AddNormal (triangleNormal.x, triangleNormal.y, triangleNormal.z);
					currentBody.AddTriangle (v0Index, v1Index, v2Index, normalIndex, normalIndex, normalIndex);
				}
			});
		} else if (stringBuffer !== null) {
			JSM.ReadAsciiStlFile (stringBuffer, {
				onFace : function (v0, v1, v2, normal) {
					var v0Index = currentBody.AddVertex (v0[0], v0[1], v0[2]);
					var v1Index = currentBody.AddVertex (v1[0], v1[1], v1[2]);
					var v2Index = currentBody.AddVertex (v2[0], v2[1], v2[2]);
					var triangleNormal = new JSM.Vector (normal[0], normal[1], normal[2]).Normalize ();
					var normalIndex = currentBody.AddNormal (triangleNormal.x, triangleNormal.y, triangleNormal.z);
					currentBody.AddTriangle (v0Index, v1Index, v2Index, normalIndex, normalIndex, normalIndex);
				}
			});
		}
		
		triangleModel.Finalize ();
		
		var jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);
		return jsonData;
	};

	return JSM;
});

define('skylark-jsmodeler/import/importeroff',["../core/jsm"],function(JSM){
	JSM.ReadOffFile = function (stringBuffer, callbacks)
	{
		function OnVertex (x, y, z)
		{
			if (callbacks.onVertex !== undefined && callbacks.onVertex !== null) {
				callbacks.onVertex (x, y, z);
			}
		}

		function OnFace (vertices)
		{
			if (callbacks.onFace !== undefined && callbacks.onFace !== null) {
				callbacks.onFace (vertices);
			}
		}

		function ProcessLine (line, readState)
		{
			if (line.length === 0) {
				return;
			}
			
			if (line[0] == '#') {
				return;
			}

			var lineParts = line.split (/\s+/);
			if (lineParts.length === 0 || lineParts[0][0] == '#') {
				return;
			}

			if (!readState.offHeaderFound) {
				if (lineParts.length == 1 && lineParts[0] == 'OFF') {
					readState.offHeaderFound = true;
				}
				return;
			}
			
			if (!readState.infoFound) {
				if (lineParts.length == 3) {
					readState.vertexCount = parseInt (lineParts[0]);
					readState.faceCount = parseInt (lineParts[1]);
					readState.infoFound = true;
				}
				return;
			}
			
			if (readState.readVertices < readState.vertexCount) {
				if (lineParts.length == 3) {
					OnVertex (parseFloat (lineParts[0]), parseFloat (lineParts[1]), parseFloat (lineParts[2]));
					readState.readVertices += 1;
				}
				return;
			}
			
			if (readState.readFaces < readState.faceCount) {
				var vertexCount = parseInt (lineParts[0]);
				if (lineParts.length >= vertexCount + 1) {
					var vertices = [];
					var i, vertex;
					for (i = 1; i < vertexCount + 1; i++) {
						vertex = parseInt (lineParts[i]);
						vertices.push (vertex);
					}
					OnFace (vertices);
					readState.readFaces += 1;
				}
				return;
			}
		}
		
		function ProcessFile (stringBuffer)
		{
			var readState = {
				offHeaderFound : false,
				infoFound : false,
				vertexCount : 0,
				faceCount : 0,
				readVertices : 0,
				readFaces : 0
			};
			
			var lines = stringBuffer.split ('\n');
			var i, line;
			for (i = 0; i < lines.length; i++) {
				line = lines[i].trim ();
				ProcessLine (line, readState);
			}
		}
		
		if (callbacks === undefined || callbacks === null) {
			callbacks = {};
		}

		ProcessFile (stringBuffer);
	};

	JSM.ConvertOffToJsonData = function (stringBuffer)
	{
		var triangleModel = new JSM.TriangleModel ();
		var index = triangleModel.AddBody (new JSM.TriangleBody ('Default'));
		var currentBody = triangleModel.GetBody (index);
		
		JSM.ReadOffFile (stringBuffer, {
			onVertex : function (x, y, z) {
				currentBody.AddVertex (x, y, z);
			},
			onFace : function (vertices) {
				var i, v0, v1, v2;
				var count = vertices.length;
				for (i = 0; i < count - 2; i++) {
					v0 = vertices[0];
					v1 = vertices[i + 1];
					v2 = vertices[i + 2];
					currentBody.AddTriangle (v0, v1, v2);
				}
			}
		});

		triangleModel.Finalize ();
		
		var jsonData = JSM.ConvertTriangleModelToJsonData (triangleModel);
		return jsonData;
	};

	return JSM;
});

define('skylark-jsmodeler/import/importercommon',["../core/jsm"],function(JSM){
	JSM.ImportFileList = function ()
	{
		this.descriptors = null;
		this.isFile = null;
	};

	JSM.ImportFileList.prototype.InitFromFiles = function (fileList)
	{
		this.descriptors = [];
		var i, file, descriptor;
		for (i = 0; i < fileList.length; i++) {
			file = fileList[i];
			descriptor = {
				originalObject : file,
				originalFileName : file.name,
				fileName : file.name.toUpperCase (),
				extension : this.GetFileExtension (file.name).toUpperCase ()
			};
			this.descriptors.push (descriptor);
		}
		this.isFile = true;
	};

	JSM.ImportFileList.prototype.InitFromURLs = function (urlList)
	{
		this.descriptors = [];
		var i, url, fileName, descriptor;
		for (i = 0; i < urlList.length; i++) {
			url = urlList[i];
			fileName = this.GetFileName (url);
			descriptor = {
				originalObject : url,
				originalFileName : fileName,
				fileName : fileName.toUpperCase (),
				extension : this.GetFileExtension (fileName).toUpperCase ()
			};
			this.descriptors.push (descriptor);
		}
		this.isFile = false;
	};

	JSM.ImportFileList.prototype.GetInputList = function ()
	{
		function IsArrayBuffer (descriptor)
		{
			if (descriptor.extension == '.OBJ' || descriptor.extension == '.MTL' || descriptor.extension == '.OFF') {
				return false;
			}
			return true;
		}

		var result = [];
		var i, descriptor, inputListElem;
		for (i = 0; i < this.descriptors.length; i++) {
			descriptor = this.descriptors[i];
			inputListElem = {
				originalObject : descriptor.originalObject,
				isFile : this.isFile,
				isArrayBuffer : IsArrayBuffer (descriptor)
			};
			result.push (inputListElem);
		}
		return result;
	};

	JSM.ImportFileList.prototype.GetFileName = function (fullFileName)
	{
		var splitted = fullFileName.split ('/');
		if (splitted.length == 1) {
			splitted = fullFileName.split ('\\');
		}
		if (splitted.length === 0) {
			return '';
		}
		var fileName = splitted[splitted.length - 1];
		return decodeURI (fileName);
	};

	JSM.ImportFileList.prototype.GetFileDescriptor = function (index)
	{
		return this.descriptors[index];
	};

	JSM.ImportFileList.prototype.GetMainFileIndex = function ()
	{
		var i, descriptor;
		for (i = 0; i < this.descriptors.length; i++) {
			descriptor = this.descriptors[i];
			if (this.IsSupportedExtension (descriptor.extension)) {
				return i;
			}
		}
		return -1;
	};

	JSM.ImportFileList.prototype.GetFileIndexByName = function (fileName)
	{
		var i, descriptor, currentFileName;
		for (i = 0; i < this.descriptors.length; i++) {
			descriptor = this.descriptors[i];
			currentFileName = this.GetFileName (fileName);
			if (descriptor.fileName == currentFileName.toUpperCase ()) {
				return i;
			}
		}
		return -1;
	};

	JSM.ImportFileList.prototype.IsSupportedExtension = function (extension)
	{
		if (extension == '.3DS' || extension == '.OBJ' || extension == '.STL' || extension == '.OFF') {
			return true;
		}
		return false;
	};

	JSM.ImportFileList.prototype.GetFileExtension = function (fileName)
	{
		var lastPoint = fileName.lastIndexOf ('.');
		if (lastPoint == -1) {
			return '';
		}
		var extension = fileName.substr (lastPoint);
		return extension;
	};

	JSM.ConvertImportFileListToJsonData = function (importFileList, callbacks)
	{
		function OnError ()
		{
			if (callbacks.onError !== undefined && callbacks.onError !== null) {
				callbacks.onError ();
			}
		}

		function OnReady (fileNames, jsonData)
		{
			if (callbacks.onReady !== undefined && callbacks.onReady !== null) {
				callbacks.onReady (fileNames, jsonData);
			}
		}
		
		function FileRequested (importFileList, resultBuffers, fileName, fileNames)
		{
			var requestedFileIndex = importFileList.GetFileIndexByName (fileName);
			var currentFileName = importFileList.GetFileName (fileName);
			if (requestedFileIndex == -1) {
				fileNames.missing.push (currentFileName);
				return null;
			}
			if (fileNames.requested.indexOf (currentFileName) == -1) {
				fileNames.requested.push (currentFileName);
			}
			return resultBuffers[requestedFileIndex];	
		}
		
		var mainFileIndex = importFileList.GetMainFileIndex ();
		if (mainFileIndex === -1) {
			OnError ();
			return;
		}
		
		var mainFile = importFileList.GetFileDescriptor (mainFileIndex);
		var fileNames = {
			main : mainFile.originalFileName,
			requested : [],
			missing : []
		};

		var inputList = importFileList.GetInputList ();
		try {
			if (mainFile.extension == '.3DS') {
				JSM.LoadMultipleBuffers (inputList, function (resultBuffers) {
					var mainFileBuffer = resultBuffers[mainFileIndex];
					if (mainFileBuffer === null) {
						OnError ();
					} else {
						var jsonData = JSM.Convert3dsToJsonData (mainFileBuffer, {
							onFileRequested : function (fileName) {
								return FileRequested (importFileList, resultBuffers, fileName, fileNames);
							}
						});
						OnReady (fileNames, jsonData);
					}
				});
			} else if (mainFile.extension == '.OBJ') {
				JSM.LoadMultipleBuffers (inputList, function (resultBuffers) {
					var mainFileBuffer = resultBuffers[mainFileIndex];
					if (mainFileBuffer === null) {
						OnError ();
					} else {
						var jsonData = JSM.ConvertObjToJsonData (mainFileBuffer, {
							onFileRequested : function (fileName) {
								return FileRequested (importFileList, resultBuffers, fileName, fileNames);
							}
						});
						OnReady (fileNames, jsonData);
					}
				});
			} else if (mainFile.extension == '.STL') {
				JSM.LoadMultipleBuffers (inputList, function (resultBuffers) {
					var mainFileBuffer = resultBuffers[mainFileIndex];
					if (mainFileBuffer === null) {
						OnError ();
					} else {
						if (JSM.IsBinaryStlFile (mainFileBuffer)) {
							var jsonData = JSM.ConvertStlToJsonData (mainFileBuffer, null);
							OnReady (fileNames, jsonData);
						} else {
							var i;
							for (i = 0; i < inputList.length; i++) {
								inputList[i].isArrayBuffer = false;
							}
							JSM.LoadMultipleBuffers (inputList, function (resultBuffers) {
								var mainFileBuffer = resultBuffers[mainFileIndex];
								if (mainFileBuffer === null) {
									OnError ();
								} else {
									var jsonData = JSM.ConvertStlToJsonData (null, mainFileBuffer);
									OnReady (fileNames, jsonData);
								}
							});
						}
					}
				});
			} else if (mainFile.extension == '.OFF') {
				JSM.LoadMultipleBuffers (inputList, function (resultBuffers) {
					var mainFileBuffer = resultBuffers[mainFileIndex];
					if (mainFileBuffer === null) {
						OnError ();
					} else {
						var jsonData = JSM.ConvertOffToJsonData (mainFileBuffer);
						OnReady (fileNames, jsonData);
					}
				});
			}
		} catch (exception) {
			OnError ();
			return;
		}
	};

	JSM.ConvertFileListToJsonData = function (fileList, callbacks)
	{
		var importFileList = new JSM.ImportFileList ();
		importFileList.InitFromFiles (fileList);
		JSM.ConvertImportFileListToJsonData (importFileList, callbacks);
	};

	JSM.ConvertURLListToJsonData = function (urlList, callbacks)
	{
		var importFileList = new JSM.ImportFileList ();
		importFileList.InitFromURLs (urlList);
		JSM.ConvertImportFileListToJsonData (importFileList, callbacks);
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/webglutils',["../core/jsm"],function(JSM){
	JSM.IsPowerOfTwo = function (x)
	{
		return (x & (x - 1) === 0);
	};

	JSM.NextPowerOfTwo = function (x)
	{
		if (JSM.IsPowerOfTwo (x)) {
			return x;
		}

		var result = 1;
		while (result < x) {
			result *= 2;
		}
		return result;
	};

	JSM.ResizeImageToPowerOfTwoSides = function (image)
	{
		if (JSM.IsPowerOfTwo (image.width) && !JSM.IsPowerOfTwo (image.height)) {
			return image;
		}
		
		var width = JSM.NextPowerOfTwo (image.width);
		var height = JSM.NextPowerOfTwo (image.height);

		var canvas = document.createElement ('canvas');
		canvas.width = width;
		canvas.height = height;
		
		var context = canvas.getContext ('2d');
		context.drawImage (image, 0, 0, width, height);
		return context.getImageData (0, 0, width, height);
	};

	JSM.WebGLInitContext = function (canvas)
	{
		if (canvas === null) {
			return null;
		}
		
		if (canvas.getContext === undefined) {
			return null;
		}
		
		var context = canvas.getContext ('webgl') || canvas.getContext ('experimental-webgl');
		if (context === null) {
			return null;
		}
		
		context.viewport (0, 0, canvas.width, canvas.height);
		context.clearColor (1.0, 1.0, 1.0, 1.0);
		return context;
	};

	JSM.WebGLInitShaderProgram = function (context, vertexShader, fragmentShader, onError)
	{
		function CompileShader (context, script, type, onError)
		{
			var shader = context.createShader (type);
			context.shaderSource (shader, script);
			context.compileShader (shader);
			if (!context.getShaderParameter (shader, context.COMPILE_STATUS)) {
				if (onError !== undefined && onError !== null) {
					onError (context.getShaderInfoLog (shader));
				}
				return null;
			}
			return shader;
		}
		
		function CreateShader (context, fragmentShaderScript, vertexShaderScript, onError)
		{
			var fragmentShader = CompileShader (context, fragmentShaderScript, context.FRAGMENT_SHADER, onError);
			var vertexShader = CompileShader (context, vertexShaderScript, context.VERTEX_SHADER, onError);
			if (fragmentShader === null || vertexShader === null) {
				return null;
			}

			var shaderProgram = context.createProgram ();
			context.attachShader (shaderProgram, vertexShader);
			context.attachShader (shaderProgram, fragmentShader);
			context.linkProgram (shaderProgram);
			if (!context.getProgramParameter (shaderProgram, context.LINK_STATUS)) {
				return null;
			}
			
			return shaderProgram;
		}
		
		var shader = CreateShader (context, fragmentShader, vertexShader, onError);
		if (shader === null) {
			return null;
		}
		
		context.useProgram (shader);
		return shader;
	};

	JSM.WebGLGetFloatTextureBufferSize = function (array)
	{
		return JSM.NextPowerOfTwo (Math.ceil (Math.sqrt (array.length / 4.0)));
	};

	JSM.WebGLCreateFloatTextureBuffer = function (context, array, size)
	{
		var floatArray = null;
		if (array !== null) {
			while (array.length < size * size * 4) {
				array.push (0.0);
			}
			floatArray = new Float32Array (array);
		}
		var textureBuffer = context.createTexture ();
		context.bindTexture (context.TEXTURE_2D, textureBuffer);
		context.texParameteri (context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.NEAREST);
		context.texParameteri (context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.NEAREST);
		context.texParameteri (context.TEXTURE_2D, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);
		context.texParameteri (context.TEXTURE_2D, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);
		context.texImage2D (context.TEXTURE_2D, 0, context.RGBA, size, size, 0, context.RGBA, context.FLOAT, floatArray);
		context.bindTexture (context.TEXTURE_2D, null);
		return textureBuffer;
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/renderlight',["../core/jsm"],function(JSM){
	JSM.RenderAmbientLight = function (color)
	{
		this.color = JSM.HexColorToNormalizedRGBComponents (color);
	};

	JSM.RenderDirectionalLight = function (diffuse, specular, direction)
	{
		this.diffuse = JSM.HexColorToNormalizedRGBComponents (diffuse);
		this.specular = JSM.HexColorToNormalizedRGBComponents (specular);
		this.direction = direction.Clone ();
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/rendermaterial',["../core/jsm"],function(JSM){
	JSM.RenderMaterialFlags = {
		Point : 1,
		Line : 2,
		Triangle : 4,
		Textured : 8,
		Transparent : 16
	};

	JSM.RenderMaterial = function (type, parameters)
	{
		this.type = type;
		this.ambient = [0.0, 0.8, 0.0];
		this.diffuse = [0.0, 0.8, 0.0];
		this.specular = [0.0, 0.0, 0.0];
		this.shininess = 0.0;
		this.opacity = 1.0;
		this.reflection = 0.0;
		this.singleSided = false;
		this.pointSize = 0.1;
		this.texture = null;
		JSM.CopyObjectProperties (parameters, this, true);
	};

	JSM.RenderMaterial.prototype.SetType = function (type)
	{
		this.type = type;
	};

	JSM.RenderMaterial.prototype.SetBuffers = function (textureBuffer, textureImage)
	{
		this.textureBuffer = textureBuffer;
		this.textureImage = textureImage;
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/rendermesh',["../core/jsm"],function(JSM){
	JSM.RenderMesh = function (material)
	{
		this.material = material;
		
		this.vertexArray = null;
		this.normalArray = null;
		this.uvArray = null;
		
		this.vertexBuffer = null;
		this.normalBuffer = null;
		this.uvBuffer = null;
	};

	JSM.RenderMesh.prototype.SetMaterial = function (material)
	{
		this.material = material;
	};

	JSM.RenderMesh.prototype.GetMaterial = function ()
	{
		return this.material;
	};

	JSM.RenderMesh.prototype.SetVertexArray = function (vertices)
	{
		this.vertexArray = new Float32Array (vertices);
	};

	JSM.RenderMesh.prototype.SetNormalArray = function (normals)
	{
		this.normalArray = new Float32Array (normals);
	};

	JSM.RenderMesh.prototype.SetUVArray = function (uvs)
	{
		this.uvArray = new Float32Array (uvs);
	};

	JSM.RenderMesh.prototype.HasVertexArray = function ()
	{
		return this.vertexArray !== null;
	};

	JSM.RenderMesh.prototype.HasNormalArray = function ()
	{
		return this.normalArray !== null;
	};

	JSM.RenderMesh.prototype.HasUVArray = function ()
	{
		return this.uvArray !== null;
	};

	JSM.RenderMesh.prototype.GetVertexArray = function ()
	{
		return this.vertexArray;
	};

	JSM.RenderMesh.prototype.GetNormalArray = function ()
	{
		return this.normalArray;
	};

	JSM.RenderMesh.prototype.GetUVArray = function ()
	{
		return this.uvArray;
	};

	JSM.RenderMesh.prototype.SetBuffers = function (vertexBuffer, normalBuffer, uvBuffer)
	{
		this.vertexBuffer = vertexBuffer;
		this.normalBuffer = normalBuffer;
		this.uvBuffer = uvBuffer;
	};

	JSM.RenderMesh.prototype.GetVertexBuffer = function ()
	{
		return this.vertexBuffer;
	};

	JSM.RenderMesh.prototype.GetNormalBuffer = function ()
	{
		return this.normalBuffer;
	};

	JSM.RenderMesh.prototype.GetUVBuffer = function ()
	{
		return this.uvBuffer;
	};

	JSM.RenderMesh.prototype.VertexCount = function ()
	{
		return parseInt (this.vertexArray.length / 3, 10);
	};

	JSM.RenderMesh.prototype.NormalCount = function ()
	{
		return parseInt (this.normalArray.length / 3, 10);
	};

	JSM.RenderMesh.prototype.UVCount = function ()
	{
		return parseInt (this.uvArray.length / 2, 10);
	};

	JSM.RenderMesh.prototype.GetVertex = function (index)
	{
		return new JSM.Coord (this.vertexArray[3 * index], this.vertexArray[3 * index + 1], this.vertexArray[3 * index + 2]);
	};

	JSM.RenderMesh.prototype.GetTransformedVertex = function (index, transformation)
	{
		var vertex = this.GetVertex (index);
		return transformation.Apply (vertex);
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/renderbody',["../core/jsm"],function(JSM){
	JSM.RenderBody = function ()
	{
		this.transformation = new JSM.Transformation ();
		this.meshes = {};
	};

	JSM.RenderBody.prototype.AddMesh = function (mesh)
	{
		if (this.meshes[mesh.material.type] === undefined) {
			this.meshes[mesh.material.type] = [];
		}
		this.meshes[mesh.material.type].push (mesh);
	};

	JSM.RenderBody.prototype.EnumerateMeshes = function (onMeshFound)
	{
		var meshType;
		for (meshType in this.meshes) {
			if (this.meshes.hasOwnProperty (meshType)) {
				this.EnumerateTypedMeshes (meshType, onMeshFound);
			}
		}
	};

	JSM.RenderBody.prototype.HasTypedMeshes = function (meshType)
	{
		return this.meshes[meshType] !== undefined;
	};

	JSM.RenderBody.prototype.EnumerateTypedMeshes = function (meshType, onMeshFound)
	{
		if (!this.HasTypedMeshes (meshType)) {
			return;
		}
		
		var typedMeshes = this.meshes[meshType];
		var	i, typedMesh;
		for	(i = 0; i < typedMeshes.length; i++) {
			typedMesh = typedMeshes[i];
			onMeshFound (typedMesh);
		}
	};

	JSM.RenderBody.prototype.EnumerateMeshesWithFlag = function (flag, onMeshFound)
	{
		var meshType;
		for (meshType in this.meshes) {
			if (this.meshes.hasOwnProperty (meshType) && (meshType & flag)) {
				this.EnumerateTypedMeshes (meshType, onMeshFound);
			}
		}
	};

	JSM.RenderBody.prototype.GetTransformation = function ()
	{
		return this.transformation;
	};

	JSM.RenderBody.prototype.GetTransformationMatrix = function ()
	{
		return this.transformation.matrix;
	};

	JSM.RenderBody.prototype.SetTransformation = function (transformation)
	{
		this.transformation = transformation;
	};

	JSM.RenderBody.prototype.AppendTransformation = function (transformation)
	{
		this.transformation.Append (transformation);
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/shaderprogram',["../core/jsm"],function(JSM){
	JSM.ShaderType = {
		Point : 0,
		Line : 1,
		Triangle : 2,
		TexturedTriangle : 3
	};

	JSM.ShaderProgram = function (context)
	{
		this.context = context;
		this.globalParams = null;
		this.shaders = null;
		this.currentShader = null;
		this.currentType = null;
		this.cullEnabled = null;
	};

	JSM.ShaderProgram.prototype.Init = function ()
	{
		if (!this.InitGlobalParams ()) {
			return false;
		}
		
		if (!this.InitShaders ()) {
			return false;
		}
		
		return true;	
	};

	JSM.ShaderProgram.prototype.GetMaxLightCount = function ()
	{
		return this.globalParams.maxLightCount;
	};

	JSM.ShaderProgram.prototype.InitGlobalParams = function ()
	{
		var noDirectionalLight = new JSM.RenderDirectionalLight (0x000000, 0x000000, new JSM.Vector (0.0, 0.0, 0.0));
		this.globalParams = {
			noDirectionalLight : noDirectionalLight,
			maxLightCount : 4
		};
		return true;
	};

	JSM.ShaderProgram.prototype.InitShaders = function ()
	{
		function GetFragmentShaderScript (shaderType, globalParams)
		{
			var script = null;
			if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {
				script = [
					'#define MAX_LIGHTS ' + globalParams.maxLightCount,

					'struct Light',
					'{',
					'	mediump vec3 diffuseColor;',
					'};',

					'struct Material',
					'{',
					'	mediump vec3 ambientColor;',
					'	mediump vec3 diffuseColor;',
					'};',
					
					'uniform mediump vec3 uAmbientLightColor;',
					'uniform Light uLights[MAX_LIGHTS];',
					'uniform Material uMaterial;',
					
					'void main (void) {',
					'	mediump vec3 ambientComponent = uMaterial.ambientColor * uAmbientLightColor;',
					'	mediump vec3 diffuseComponent = vec3 (0.0, 0.0, 0.0);',
					'	for (int i = 0; i < MAX_LIGHTS; i++) {',
					'		diffuseComponent += uMaterial.diffuseColor * uLights[i].diffuseColor;',
					'	}',
					'	gl_FragColor = vec4 (ambientComponent + diffuseComponent, 1.0);',
					'}'
				].join ('\n');
			} else if (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {
				script = [
					'#define ' + (shaderType == JSM.ShaderType.Triangle ? 'NOTEXTURE' : 'USETEXTURE'),
					'#define MAX_LIGHTS ' + globalParams.maxLightCount,
					
					'struct Light',
					'{',
					'	mediump vec3 diffuseColor;',
					'	mediump vec3 specularColor;',
					'	mediump vec3 direction;',
					'};',

					'struct Material',
					'{',
					'	mediump vec3 ambientColor;',
					'	mediump vec3 diffuseColor;',
					'	mediump vec3 specularColor;',
					'	mediump float shininess;',
					'	mediump float opacity;',
					'};',
					
					'uniform mediump vec3 uAmbientLightColor;',
					'uniform Light uLights[MAX_LIGHTS];',
					'uniform Material uMaterial;',

					'varying mediump vec3 vVertex;',
					'varying mediump vec3 vNormal;',
					
					'#ifdef USETEXTURE',
					'varying mediump vec2 vUV;',
					'uniform sampler2D uSampler;',
					'#endif',
					
					'void main (void) {',
					'	mediump vec3 N = normalize (vNormal);',
					'	if (!gl_FrontFacing) {',
					'		N = -N;',
					'	}',
					'	mediump vec3 ambientComponent = uMaterial.ambientColor * uAmbientLightColor;',
					'	mediump vec3 diffuseComponent = vec3 (0.0, 0.0, 0.0);',
					'	mediump vec3 specularComponent = vec3 (0.0, 0.0, 0.0);',
					'	mediump vec3 E = normalize (-vVertex);',

					'	for (int i = 0; i < MAX_LIGHTS; i++) {',
					'		mediump vec3 L = normalize (-uLights[i].direction);',
					'		mediump vec3 R = normalize (-reflect (L, N));',
					'		diffuseComponent += uMaterial.diffuseColor * uLights[i].diffuseColor * max (dot (N, L), 0.0);',
					'		specularComponent += uMaterial.specularColor * uLights[i].specularColor * pow (max (dot (R, E), 0.0), uMaterial.shininess);',
					'	}',
					
					'#ifdef USETEXTURE',
					'	mediump vec3 textureColor = texture2D (uSampler, vec2 (vUV.s, vUV.t)).xyz;',
					'	ambientComponent = ambientComponent * textureColor;',
					'	diffuseComponent = diffuseComponent * textureColor;',
					'	specularComponent = specularComponent * textureColor;',
					'#endif',
					
					'	ambientComponent = clamp (ambientComponent, 0.0, 1.0);',
					'	diffuseComponent = clamp (diffuseComponent, 0.0, 1.0);',
					'	specularComponent = clamp (specularComponent, 0.0, 1.0);',
					'	gl_FragColor = vec4 (ambientComponent + diffuseComponent + specularComponent, uMaterial.opacity);',
					'}'
				].join ('\n');
			}
			return script;
		}
		
		function GetVertexShaderScript (shaderType)
		{
			var script = null;
			if (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {
				script = [
					'#define ' + (shaderType == JSM.ShaderType.Triangle ? 'NOTEXTURE' : 'USETEXTURE'),
					'attribute mediump vec3 aVertexPosition;',
					'attribute mediump vec3 aVertexNormal;',

					'uniform mediump mat4 uViewMatrix;',
					'uniform mediump mat4 uProjectionMatrix;',
					'uniform mediump mat4 uTransformationMatrix;',

					'varying mediump vec3 vVertex;',
					'varying mediump vec3 vNormal;',

					'#ifdef USETEXTURE',
					'attribute mediump vec2 aVertexUV;',
					'varying mediump vec2 vUV;',
					'#endif',

					'void main (void) {',
					'	mat4 modelViewMatrix = uViewMatrix * uTransformationMatrix;',
					'	vVertex = vec3 (modelViewMatrix * vec4 (aVertexPosition, 1.0));',
					'	vNormal = normalize (vec3 (modelViewMatrix * vec4 (aVertexNormal, 0.0)));',
					'#ifdef USETEXTURE',
					'	vUV = aVertexUV;',
					'#endif',
					'	gl_Position = uProjectionMatrix * vec4 (vVertex, 1.0);',
					'}'
				].join ('\n');
			} else if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {
				script = [
					'#define ' + (shaderType == JSM.ShaderType.Point ? 'POINT' : 'LINE'),
					'attribute mediump vec3 aVertexPosition;',
					
					'uniform mediump mat4 uViewMatrix;',
					'uniform mediump mat4 uProjectionMatrix;',
					'uniform mediump mat4 uTransformationMatrix;',
					'#ifdef POINT',
					'uniform mediump float uPointSize;',
					'#endif',

					'varying mediump vec3 vVertex;',

					'void main (void) {',
					'	mat4 modelViewMatrix = uViewMatrix * uTransformationMatrix;',
					'	vVertex = vec3 (modelViewMatrix * vec4 (aVertexPosition, 1.0));',
					'#ifdef POINT',
					'	const mediump float scale = 200.0;',
					'	gl_PointSize = uPointSize * (scale / length (vVertex));',
					'#endif',
					'	gl_Position = uProjectionMatrix * vec4 (vVertex, 1.0);',
					'}'
				].join ('\n');
			}
			return script;
		}

		function InitShaderParameters (context, shader, globalParams, shaderType)
		{
			if (shaderType == JSM.ShaderType.Triangle || shaderType == JSM.ShaderType.TexturedTriangle) {
				shader.vertexPositionAttribute = context.getAttribLocation (shader, 'aVertexPosition');
				shader.vertexNormalAttribute = context.getAttribLocation (shader, 'aVertexNormal');

				shader.ambientLightColorUniform = context.getUniformLocation (shader, 'uAmbientLightColor');
				shader.lightUniforms = [];
				var i;
				for (i = 0; i < globalParams.maxLightCount; i++) {
					shader.lightUniforms.push ({
						diffuseColor : context.getUniformLocation (shader, 'uLights[' + i + '].diffuseColor'),
						specularColor : context.getUniformLocation (shader, 'uLights[' + i + '].specularColor'),
						direction : context.getUniformLocation (shader, 'uLights[' + i + '].direction')
					});
				}
				
				shader.materialUniforms = {
					ambientColor : context.getUniformLocation (shader, 'uMaterial.ambientColor'),
					diffuseColor : context.getUniformLocation (shader, 'uMaterial.diffuseColor'),
					specularColor : context.getUniformLocation (shader, 'uMaterial.specularColor'),
					shininess : context.getUniformLocation (shader, 'uMaterial.shininess'),
					opacity : context.getUniformLocation (shader, 'uMaterial.opacity')
				};
				
				shader.vMatrixUniform = context.getUniformLocation (shader, 'uViewMatrix');
				shader.pMatrixUniform = context.getUniformLocation (shader, 'uProjectionMatrix');
				shader.tMatrixUniform = context.getUniformLocation (shader, 'uTransformationMatrix');

				if (shaderType == JSM.ShaderType.TexturedTriangle) {
					shader.vertexUVAttribute = context.getAttribLocation (shader, 'aVertexUV');
					shader.samplerUniform = context.getUniformLocation (shader, 'uSampler');
				}
			} else if (shaderType == JSM.ShaderType.Point || shaderType == JSM.ShaderType.Line) {
				shader.vertexPositionAttribute = context.getAttribLocation (shader, 'aVertexPosition');

				shader.ambientLightColorUniform = context.getUniformLocation (shader, 'uAmbientLightColor');
				shader.lightUniforms = [];
				for (i = 0; i < globalParams.maxLightCount; i++) {
					shader.lightUniforms.push ({
						diffuseColor : context.getUniformLocation (shader, 'uLights[' + i + '].diffuseColor')
					});
				}

				shader.materialUniforms = {
					ambientColor : context.getUniformLocation (shader, 'uMaterial.ambientColor'),
					diffuseColor : context.getUniformLocation (shader, 'uMaterial.diffuseColor'),
				};
				
				shader.vMatrixUniform = context.getUniformLocation (shader, 'uViewMatrix');
				shader.pMatrixUniform = context.getUniformLocation (shader, 'uProjectionMatrix');
				shader.tMatrixUniform = context.getUniformLocation (shader, 'uTransformationMatrix');

				if (shaderType == JSM.ShaderType.Point) {
					shader.pointSizeUniform = context.getUniformLocation (shader, 'uPointSize');
				}
			}
		}
		
		function InitShader (context, shaders, globalParams, shaderType)
		{
			var vertexShaderScript = GetVertexShaderScript (shaderType);
			var fragmentShaderScript = GetFragmentShaderScript (shaderType, globalParams);
			if (vertexShaderScript === null || fragmentShaderScript === null) {
				return false;
			}
			var shader = JSM.WebGLInitShaderProgram (context, vertexShaderScript, fragmentShaderScript, function (message) {
				JSM.Message (message);
			});
			if (shader === null) {
				return false;
			}
			
			context.useProgram (shader);
			InitShaderParameters (context, shader, globalParams, shaderType);
			shaders[shaderType] = shader;
			return true;
		}
		
		this.shaders = {};
		
		if (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Point)) {
			return false;
		}

		if (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Line)) {
			return false;
		}

		if (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.Triangle)) {
			return false;
		}
		
		if (!InitShader (this.context, this.shaders, this.globalParams, JSM.ShaderType.TexturedTriangle)) {
			return false;
		}

		this.context.enable (this.context.DEPTH_TEST);
		this.context.depthFunc (this.context.LEQUAL);
		
		this.context.enable (this.context.BLEND);
		this.context.blendEquation (this.context.FUNC_ADD);
		this.context.blendFunc (this.context.SRC_ALPHA, this.context.ONE_MINUS_SRC_ALPHA);

		this.context.disable (this.context.CULL_FACE);
		this.cullEnabled = false;

		return true;
	};

	JSM.ShaderProgram.prototype.CompileMaterial = function (material, textureLoaded)
	{
		if (material.texture !== null) {
			var context = this.context;
			var textureBuffer = context.createTexture ();
			var textureImage = new Image ();
			textureImage.src = material.texture;
			textureImage.onload = function () {
				var resizedImage = JSM.ResizeImageToPowerOfTwoSides (textureImage);
				context.bindTexture (context.TEXTURE_2D, textureBuffer);
				context.texParameteri (context.TEXTURE_2D, context.TEXTURE_MAG_FILTER, context.LINEAR);
				context.texParameteri (context.TEXTURE_2D, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);
				context.texImage2D (context.TEXTURE_2D, 0, context.RGBA, context.RGBA, context.UNSIGNED_BYTE, resizedImage);
				context.generateMipmap (context.TEXTURE_2D);
				context.bindTexture (context.TEXTURE_2D, null);
				if (textureLoaded !== undefined && textureLoaded !== null) {
					textureLoaded ();
				}
			};
			material.SetBuffers (textureBuffer, textureImage);
		}
	};

	JSM.ShaderProgram.prototype.CompileMesh = function (mesh)
	{
		var context = this.context;
		var vertexBuffer = context.createBuffer ();
		context.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);
		context.bufferData (context.ARRAY_BUFFER, mesh.GetVertexArray (), context.STATIC_DRAW);
		vertexBuffer.itemSize = 3;
		vertexBuffer.numItems = mesh.VertexCount ();

		var normalBuffer = null;
		if (mesh.HasNormalArray ()) {
			normalBuffer = context.createBuffer ();
			context.bindBuffer (context.ARRAY_BUFFER, normalBuffer);
			context.bufferData (context.ARRAY_BUFFER, mesh.GetNormalArray (), context.STATIC_DRAW);
			normalBuffer.itemSize = 3;
			normalBuffer.numItems = mesh.NormalCount ();
		}

		var uvBuffer = null;
		if (mesh.HasUVArray ()) {
			uvBuffer = context.createBuffer ();
			context.bindBuffer (context.ARRAY_BUFFER, uvBuffer);
			context.bufferData (context.ARRAY_BUFFER, mesh.GetUVArray (), context.STATIC_DRAW);
			uvBuffer.itemSize = 2;
			uvBuffer.numItems = mesh.UVCount ();
		}
		
		mesh.SetBuffers (vertexBuffer, normalBuffer, uvBuffer);
	};

	JSM.ShaderProgram.prototype.GetShader = function (shaderType)
	{
		return this.shaders[shaderType];
	};

	JSM.ShaderProgram.prototype.UseShader = function (shaderType)
	{
		this.currentShader = this.GetShader (shaderType);
		this.currentType = shaderType;
		this.context.useProgram (this.currentShader);
	};

	JSM.ShaderProgram.prototype.SetParameters = function (ambientLight, directionalLights, viewMatrix, projectionMatrix)
	{
		function GetLight (directionalLights, index, noDirectionalLight)
		{
			if (index < directionalLights.length) {
				return directionalLights[index];
			}

			return noDirectionalLight;
		}
		
		var context = this.context;
		var shader = this.currentShader;
		
		var i, light, lightDirection;
		if (this.currentType == JSM.ShaderType.Triangle || this.currentType == JSM.ShaderType.TexturedTriangle) {
			context.uniform3f (shader.ambientLightColorUniform, ambientLight.color[0], ambientLight.color[1], ambientLight.color[2]);
			for (i = 0; i < this.globalParams.maxLightCount; i++) {
				light = GetLight (directionalLights, i, this.globalParams.noDirectionalLight);
				lightDirection = JSM.ApplyRotation (viewMatrix, light.direction);
				context.uniform3f (shader.lightUniforms[i].diffuseColor, light.diffuse[0], light.diffuse[1], light.diffuse[2]);
				context.uniform3f (shader.lightUniforms[i].specularColor, light.specular[0], light.specular[1], light.specular[2]);
				context.uniform3f (shader.lightUniforms[i].direction, lightDirection.x, lightDirection.y, lightDirection.z);
			}
			context.uniformMatrix4fv (shader.pMatrixUniform, false, projectionMatrix);
			context.uniformMatrix4fv (shader.vMatrixUniform, false, viewMatrix);
		} else if (this.currentType == JSM.ShaderType.Point || this.currentType == JSM.ShaderType.Line) {
			context.uniform3f (shader.ambientLightColorUniform, ambientLight.color[0], ambientLight.color[1], ambientLight.color[2]);
			for (i = 0; i < this.globalParams.maxLightCount; i++) {
				light = GetLight (directionalLights, i, this.globalParams.noDirectionalLight);
				context.uniform3f (shader.lightUniforms[i].diffuseColor, light.diffuse[0], light.diffuse[1], light.diffuse[2]);
			}
			context.uniformMatrix4fv (shader.pMatrixUniform, false, projectionMatrix);
			context.uniformMatrix4fv (shader.vMatrixUniform, false, viewMatrix);
		}
	};

	JSM.ShaderProgram.prototype.SetCullEnabled = function (enable)
	{
		if (enable && !this.cullEnabled) {
			this.context.enable (this.context.CULL_FACE);
			this.cullEnabled = true;
		} else if (!enable && this.cullEnabled) {
			this.context.disable (this.context.CULL_FACE);
			this.cullEnabled = false;
		}
	};

	JSM.ShaderProgram.prototype.DrawArrays = function (material, matrix, vertexBuffer, normalBuffer, uvBuffer)
	{
		var context = this.context;
		var shader = this.currentShader;
		this.SetCullEnabled (material.singleSided);
		
		if (this.currentType == JSM.ShaderType.Triangle || this.currentType == JSM.ShaderType.TexturedTriangle) {
			context.uniform3f (shader.materialUniforms.ambientColor, material.ambient[0], material.ambient[1], material.ambient[2]);
			context.uniform3f (shader.materialUniforms.diffuseColor, material.diffuse[0], material.diffuse[1], material.diffuse[2]);
			context.uniform3f (shader.materialUniforms.specularColor, material.specular[0], material.specular[1], material.specular[2]);
			context.uniform1f (shader.materialUniforms.shininess, material.shininess);
			context.uniform1f (shader.materialUniforms.opacity, material.opacity);

			context.uniformMatrix4fv (shader.tMatrixUniform, false, matrix);

			context.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);
			context.enableVertexAttribArray (shader.vertexPositionAttribute);
			context.vertexAttribPointer (shader.vertexPositionAttribute, vertexBuffer.itemSize, context.FLOAT, false, 0, 0);
			
			context.bindBuffer (context.ARRAY_BUFFER, normalBuffer);
			context.enableVertexAttribArray (shader.vertexNormalAttribute);
			context.vertexAttribPointer (shader.vertexNormalAttribute, normalBuffer.itemSize, context.FLOAT, false, 0, 0);

			if (this.currentType == JSM.ShaderType.TexturedTriangle) {
				context.activeTexture (context.TEXTURE0);
				context.bindTexture (context.TEXTURE_2D, material.textureBuffer);
				context.bindBuffer (context.ARRAY_BUFFER, uvBuffer);
				context.enableVertexAttribArray (shader.vertexUVAttribute);
				context.vertexAttribPointer (shader.vertexUVAttribute, uvBuffer.itemSize, context.FLOAT, false, 0, 0);
				context.uniform1i (shader.samplerUniform, 0);
			}
			
			context.drawArrays (context.TRIANGLES, 0, vertexBuffer.numItems);
		} else if (this.currentType == JSM.ShaderType.Point || this.currentType == JSM.ShaderType.Line) {
			context.uniform3f (shader.materialUniforms.ambientColor, material.ambient[0], material.ambient[1], material.ambient[2]);
			context.uniform3f (shader.materialUniforms.diffuseColor, material.diffuse[0], material.diffuse[1], material.diffuse[2]);
			
			context.uniformMatrix4fv (shader.tMatrixUniform, false, matrix);
			
			context.bindBuffer (context.ARRAY_BUFFER, vertexBuffer);
			context.enableVertexAttribArray (shader.vertexPositionAttribute);
			context.vertexAttribPointer (shader.vertexPositionAttribute, vertexBuffer.itemSize, context.FLOAT, false, 0, 0);
			
			if (this.currentType == JSM.ShaderType.Point) {
				context.uniform1f (shader.pointSizeUniform, material.pointSize);
				context.drawArrays (context.POINTS, 0, vertexBuffer.numItems);
			} else if (this.currentType == JSM.ShaderType.Line) {
				context.drawArrays (context.LINES, 0, vertexBuffer.numItems);
			}
		}
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/renderer',["../core/jsm"],function(JSM){
	JSM.Renderer = function ()
	{
		this.canvas = null;
		this.context = null;
		this.shader = null;
		
		this.ambientLight = null;
		this.directionalLights = null;
		this.bodies = null;
	};

	JSM.Renderer.prototype.Init = function (canvas)
	{
		if (!JSM.IsWebGLEnabled ()) {
			return false;
		}

		if (!this.InitContext (canvas)) {
			return false;
		}

		if (!this.InitView ()) {
			return false;
		}

		if (!this.InitShaders ()) {
			return false;
		}

		if (!this.InitLights ()) {
			return false;
		}	
		
		if (!this.InitBodies ()) {
			return false;
		}

		return true;
	};

	JSM.Renderer.prototype.InitContext = function (canvas)
	{
		this.canvas = canvas;
		if (this.canvas === null) {
			return false;
		}
		
		if (this.canvas.getContext === undefined) {
			return false;
		}

		this.context = this.canvas.getContext ('webgl') || this.canvas.getContext ('experimental-webgl');
		if (this.context === null) {
			return false;
		}

		this.context = JSM.WebGLInitContext (canvas);
		if (this.context === null) {
			return false;
		}

		return true;
	};

	JSM.Renderer.prototype.InitShaders = function ()
	{
		this.shader = new JSM.ShaderProgram (this.context);
		return this.shader.Init ();
	};

	JSM.Renderer.prototype.InitLights = function ()
	{
		this.ambientLight = new JSM.RenderAmbientLight (0x000000);
		this.directionalLights = [];
		return true;
	};

	JSM.Renderer.prototype.InitBodies = function ()
	{
		this.bodies = [];
		return true;
	};

	JSM.Renderer.prototype.InitView = function ()
	{
		this.directionalLights = [];
		return true;
	};

	JSM.Renderer.prototype.SetClearColor = function (red, green, blue)
	{
		this.context.clearColor (red, green, blue, 1.0);
	};

	JSM.Renderer.prototype.SetAmbientLight = function (light)
	{
		this.ambientLight = light;
	};

	JSM.Renderer.prototype.AddLight = function (light)
	{
		var maxLightCount = this.shader.GetMaxLightCount ();
		if (this.directionalLights.length >= maxLightCount) {
			return -1;
		}
		this.directionalLights.push (light);
		return this.directionalLights.length - 1;
	};

	JSM.Renderer.prototype.RemoveLight = function (light)
	{
		var index = this.directionalLights.indexOf (light);
		if (index != -1) {
			this.directionalLights.splice (index, 1);
		}
	};

	JSM.Renderer.prototype.RemoveLights = function ()
	{
		this.directionalLights = [];
	};

	JSM.Renderer.prototype.GetLight = function (index)
	{
		return this.directionalLights[index];
	};

	JSM.Renderer.prototype.AddBody = function (renderBody, textureLoaded)
	{
		var shader = this.shader;
		renderBody.EnumerateMeshes (function (mesh) {
			shader.CompileMaterial (mesh.GetMaterial (), textureLoaded);
			shader.CompileMesh (mesh);
		});
		this.bodies.push (renderBody);
	};

	JSM.Renderer.prototype.AddBodies = function (renderBodies, textureLoaded)
	{
		var i, body;
		for (i = 0; i < renderBodies.length; i++) {
			body = renderBodies[i];
			this.AddBody (body, textureLoaded);
		}
	};

	JSM.Renderer.prototype.EnumerateBodies = function (onBodyFound)
	{
		var i;
		for (i = 0; i < this.bodies.length; i++) {
			onBodyFound (this.bodies[i]);
		}
	};

	JSM.Renderer.prototype.RemoveBody = function (body)
	{
		var index = this.bodies.indexOf (body);
		if (index != -1) {
			this.bodies.splice (index, 1);
		}
	};

	JSM.Renderer.prototype.RemoveBodies = function ()
	{
		this.bodies = [];
	};

	JSM.Renderer.prototype.GetBody = function (index)
	{
		return this.bodies[index];
	};

	JSM.Renderer.prototype.Resize = function ()
	{
		this.context.viewport (0, 0, this.canvas.width, this.canvas.height);
	};

	JSM.Renderer.prototype.FindObjects = function (camera, screenX, screenY)
	{
		var screenCoord = new JSM.Coord (screenX, this.canvas.height - screenY, 0.5);
		var aspectRatio = this.canvas.width / this.canvas.height;
		var viewPort = [0, 0, this.canvas.width, this.canvas.height];
		var unprojected = JSM.Unproject (screenCoord, camera.eye, camera.center, camera.up, camera.fieldOfView * JSM.DegRad, aspectRatio, camera.nearClippingPlane, camera.farClippingPlane, viewPort);
		var ray = new JSM.Ray (camera.eye, JSM.CoordSub (unprojected, camera.eye), null);
		
		var result = [];
		this.EnumerateBodies (function (body) {
			var transformation = body.GetTransformation ();
			body.EnumerateMeshesWithFlag (JSM.RenderMaterialFlags.Triangle, function (mesh) {
				var vertexCount = mesh.VertexCount ();
				var i, v0, v1, v2, intersection;
				for (i = 0; i < vertexCount; i += 3) {
					v0 = mesh.GetTransformedVertex (i + 0, transformation);
					v1 = mesh.GetTransformedVertex (i + 1, transformation);
					v2 = mesh.GetTransformedVertex (i + 2, transformation);
					intersection = JSM.RayTriangleIntersection (ray, v0, v1, v2);
					if (intersection !== null) {
						result.push ({
							renderBody : body,
							renderMesh : mesh,
							triangleIndex : parseInt (i / 3, 10),
							intersection : intersection
						});
					}
				}
			});
		});
		result.sort (function (a, b) {
			return a.intersection.distance - b.intersection.distance;
		});
		return result;
	};

	JSM.Renderer.prototype.Render = function (camera)
	{
		function DrawMeshes (renderer, materialType, viewMatrix, projectionMatrix)
		{
			function MaterialTypeToShaderType (materialType)
			{
				function HasFlag (type, flag)
				{
					return type & flag;
				}
				
				if (HasFlag (materialType, JSM.RenderMaterialFlags.Triangle)) {
					if (HasFlag (materialType, JSM.RenderMaterialFlags.Textured)) {
						return JSM.ShaderType.TexturedTriangle;
					} else if (!HasFlag (materialType, JSM.RenderMaterialFlags.Textured)) {
						return JSM.ShaderType.Triangle;
					}
				} else if (HasFlag (materialType, JSM.RenderMaterialFlags.Line)) {
					return JSM.ShaderType.Line;
				} else if (HasFlag (materialType, JSM.RenderMaterialFlags.Point)) {
					return JSM.ShaderType.Point;
				}
				
				return null;
			}

			var shaderType = null;
			renderer.EnumerateBodies (function (body) {
				if (body.HasTypedMeshes (materialType)) {
					var matrix = body.GetTransformationMatrix ();
					body.EnumerateTypedMeshes (materialType, function (mesh) {
						if (shaderType === null) {
							shaderType = MaterialTypeToShaderType (materialType);
							renderer.shader.UseShader (shaderType);
							renderer.shader.SetParameters (renderer.ambientLight, renderer.directionalLights, viewMatrix, projectionMatrix);
						}
						var material = mesh.GetMaterial ();
						var vertexBuffer = mesh.GetVertexBuffer ();
						var normalBuffer = mesh.GetNormalBuffer ();
						var uvBuffer = mesh.GetUVBuffer ();
						renderer.shader.DrawArrays (material, matrix, vertexBuffer, normalBuffer, uvBuffer);
					});
				}
			});
		}

		this.context.clear (this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);
		
		var viewMatrix = JSM.MatrixView (camera.eye, camera.center, camera.up);
		var projectionMatrix = JSM.MatrixPerspective (camera.fieldOfView * JSM.DegRad, this.canvas.width / this.canvas.height, camera.nearClippingPlane, camera.farClippingPlane);

		DrawMeshes (this, JSM.RenderMaterialFlags.Triangle, viewMatrix, projectionMatrix);
		DrawMeshes (this, JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Textured, viewMatrix, projectionMatrix);
		DrawMeshes (this, JSM.RenderMaterialFlags.Line, viewMatrix, projectionMatrix);
		DrawMeshes (this, JSM.RenderMaterialFlags.Point, viewMatrix, projectionMatrix);
		DrawMeshes (this, JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Transparent, viewMatrix, projectionMatrix);
		DrawMeshes (this, JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Transparent + JSM.RenderMaterialFlags.Textured, viewMatrix, projectionMatrix);
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/pointcloudrenderer',["../core/jsm"],function(JSM){
	JSM.PointCloudRenderer = function ()
	{
		this.canvas = null;
		this.context = null;
		this.shader = null;
		
		this.camera = null;
		this.points = null;
		this.pointSize = null;
	};

	JSM.PointCloudRenderer.prototype.Init = function (canvas, camera)
	{
		if (!JSM.IsWebGLEnabled ()) {
			return false;
		}

		if (!this.InitContext (canvas)) {
			return false;
		}

		if (!this.InitShaders ()) {
			return false;
		}

		if (!this.InitBuffers ()) {
			return false;
		}

		if (!this.InitView (camera)) {
			return false;
		}

		return true;
	};

	JSM.PointCloudRenderer.prototype.InitContext = function (canvas)
	{
		this.canvas = canvas;
		if (this.canvas === null) {
			return false;
		}
		
		if (this.canvas.getContext === undefined) {
			return false;
		}

		this.context = this.canvas.getContext ('experimental-webgl');
		if (this.context === null) {
			return false;
		}

		this.context.clearColor (1.0, 1.0, 1.0, 1.0);
		this.context.enable (this.context.DEPTH_TEST);

		return true;
	};

	JSM.PointCloudRenderer.prototype.InitShaders = function ()
	{
		function CreateShaderFromScript (context, script, type)
		{
			var shader = context.createShader (type);
			context.shaderSource (shader, script);
			context.compileShader (shader);
			if (!context.getShaderParameter (shader, context.COMPILE_STATUS)) {
				return null;
			}
			return shader;
		}

		var fragmentShaderScript = [
			'varying highp vec3 vColor;',
			'void main (void) {',
			'	gl_FragColor = vec4 (vColor, 1.0);',
			'}'
			].join('\n');
		
		var vertexShaderScript = [
			'attribute highp vec3 aVertexPosition;',
			'attribute highp vec3 aVertexColor;',

			'uniform highp mat4 uViewMatrix;',
			'uniform highp mat4 uProjectionMatrix;',

			'uniform highp float uPointSize;',
			
			'varying highp vec3 vColor;',
			
			'void main (void) {',
			'	vColor = aVertexColor;',
			'	gl_PointSize = uPointSize;',
			'	gl_Position = uProjectionMatrix * uViewMatrix * vec4 (aVertexPosition, 1.0);',
			'}'
			].join('\n');
		
		var fragmentShader = CreateShaderFromScript (this.context, fragmentShaderScript, this.context.FRAGMENT_SHADER);
		var vertexShader = CreateShaderFromScript (this.context, vertexShaderScript, this.context.VERTEX_SHADER);
		if (fragmentShader === null || vertexShader === null) {
			return false;
		}

		this.shader = this.context.createProgram ();
		this.context.attachShader (this.shader, vertexShader);
		this.context.attachShader (this.shader, fragmentShader);
		this.context.linkProgram (this.shader);
		if (!this.context.getProgramParameter (this.shader, this.context.LINK_STATUS)) {
			return false;
		}
		this.context.useProgram (this.shader);

		this.shader.vertexPositionAttribute = this.context.getAttribLocation (this.shader, 'aVertexPosition');
		this.context.enableVertexAttribArray (this.shader.vertexPositionAttribute);

		this.shader.vertexColorAttribute = this.context.getAttribLocation (this.shader, 'aVertexColor');
		this.context.enableVertexAttribArray (this.shader.vertexColorAttribute);

		this.shader.pMatrixUniform = this.context.getUniformLocation (this.shader, 'uProjectionMatrix');
		this.shader.vMatrixUniform = this.context.getUniformLocation (this.shader, 'uViewMatrix');
		
		this.shader.pointSizeUniform = this.context.getUniformLocation (this.shader, 'uPointSize');

		return true;
	};

	JSM.PointCloudRenderer.prototype.InitBuffers = function ()
	{
		this.points = [];
		this.pointSize = 1.0;
		return true;
	};

	JSM.PointCloudRenderer.prototype.InitView = function (camera)
	{
		this.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());
		if (!this.camera) {
			return false;
		}

		return true;
	};

	JSM.PointCloudRenderer.prototype.SetClearColor = function (red, green, blue)
	{
		this.context.clearColor (red, green, blue, 1.0);
	};

	JSM.PointCloudRenderer.prototype.SetPointSize = function (pointSize)
	{
		this.pointSize = pointSize;
	};

	JSM.PointCloudRenderer.prototype.AddPoints = function (points, colors)
	{
		var pointBuffer = this.context.createBuffer ();
		var pointArray = new Float32Array (points);

		this.context.bindBuffer (this.context.ARRAY_BUFFER, pointBuffer);
		this.context.bufferData (this.context.ARRAY_BUFFER, pointArray, this.context.STATIC_DRAW);
		pointBuffer.itemSize = 3;
		pointBuffer.numItems = parseInt (pointArray.length / 3, 10);
		
		var colorBuffer = this.context.createBuffer ();
		var colorArray = new Float32Array (colors);

		this.context.bindBuffer (this.context.ARRAY_BUFFER, colorBuffer);
		this.context.bufferData (this.context.ARRAY_BUFFER, colorArray, this.context.STATIC_DRAW);
		colorBuffer.itemSize = 3;
		colorBuffer.numItems = parseInt (colorArray.length / 3, 10);

		this.points.push ({pointArray : pointArray, pointBuffer : pointBuffer, colorBuffer : colorBuffer});
	};

	JSM.PointCloudRenderer.prototype.RemovePoints = function ()
	{
		this.points = [];
	};

	JSM.PointCloudRenderer.prototype.Resize = function ()
	{
		this.context.viewport (0, 0, this.canvas.width, this.canvas.height);
	};

	JSM.PointCloudRenderer.prototype.Render = function ()
	{
		this.context.clear (this.context.COLOR_BUFFER_BIT | this.context.DEPTH_BUFFER_BIT);
		
		var projectionMatrix = JSM.MatrixPerspective (this.camera.fieldOfView * JSM.DegRad, this.canvas.width / this.canvas.height, this.camera.nearClippingPlane, this.camera.farClippingPlane);
		this.context.uniformMatrix4fv (this.shader.pMatrixUniform, false, projectionMatrix);

		var viewMatrix = JSM.MatrixView (this.camera.eye, this.camera.center, this.camera.up);
		this.context.uniformMatrix4fv (this.shader.vMatrixUniform, false, viewMatrix);

		this.context.uniform1f (this.shader.pointSizeUniform, this.pointSize);
		
		var i, pointBuffer, colorBuffer;
		for (i = 0; i < this.points.length; i++) {
			pointBuffer = this.points[i].pointBuffer;
			colorBuffer = this.points[i].colorBuffer;
			this.context.bindBuffer (this.context.ARRAY_BUFFER, pointBuffer);
			this.context.vertexAttribPointer (this.shader.vertexPositionAttribute, pointBuffer.itemSize, this.context.FLOAT, false, 0, 0);
			this.context.bindBuffer (this.context.ARRAY_BUFFER, colorBuffer);
			this.context.vertexAttribPointer (this.shader.vertexColorAttribute, colorBuffer.itemSize, this.context.FLOAT, false, 0, 0);
			this.context.drawArrays (this.context.POINTS, 0, pointBuffer.numItems);
		}
	};

	return JSM;
});

define('skylark-jsmodeler/renderer/renderconverter',["../core/jsm"],function(JSM){
	JSM.ConvertBodyToRenderBody = function (body, materials, parameters)
	{
		function MaterialToRenderMaterial (material, materialType)
		{
			var renderAmbient = JSM.HexColorToNormalizedRGBComponents (material.ambient);
			var renderDiffuse = JSM.HexColorToNormalizedRGBComponents (material.diffuse);
			var renderSpecular = JSM.HexColorToNormalizedRGBComponents (material.specular);
			var renderMaterial = new JSM.RenderMaterial (materialType, {
				ambient : renderAmbient,
				diffuse : renderDiffuse,
				specular : renderSpecular,
				shininess : material.shininess,
				opacity : material.opacity,
				singleSided : material.singleSided,
				pointSize : material.pointSize,
				texture : material.texture
			});
			return renderMaterial;
		}
		
		var hasConvexPolygons = false;
		if (parameters !== undefined && parameters !== null) {
			if (parameters.hasConvexPolygons !== undefined && parameters.hasConvexPolygons !== null) {
				hasConvexPolygons = parameters.hasConvexPolygons;
			}
		}
		
		var renderBody = new JSM.RenderBody ();
		
		var vertices = null;
		var normals = null;
		var uvs = null;
		
		var explodeData = {
			hasConvexPolygons : hasConvexPolygons,
			onPointGeometryStart : function () {
				vertices = [];
				normals = null;
				uvs = null;
			},		
			onPointGeometryEnd : function (material) {
				var materialType = JSM.RenderMaterialFlags.Point;
				var renderMaterial = MaterialToRenderMaterial (material, materialType);
				var mesh = new JSM.RenderMesh (renderMaterial);
				mesh.SetVertexArray (vertices);
				renderBody.AddMesh (mesh);
			},
			onPoint : function (vertex) {
				vertices.push (vertex.x, vertex.y, vertex.z);
			},		
			onLineGeometryStart : function () {
				vertices = [];
				normals = null;
				uvs = null;
			},
			onLineGeometryEnd : function (material) {
				var materialType = JSM.RenderMaterialFlags.Line;
				var renderMaterial = MaterialToRenderMaterial (material, materialType);
				var mesh = new JSM.RenderMesh (renderMaterial);
				mesh.SetVertexArray (vertices);
				renderBody.AddMesh (mesh);
			},
			onLine : function (begVertex, endVertex) {
				vertices.push (begVertex.x, begVertex.y, begVertex.z);
				vertices.push (endVertex.x, endVertex.y, endVertex.z);
			},		
			onGeometryStart : function () {
				vertices = [];
				normals = [];
				uvs = [];
			},
			onGeometryEnd : function (material) {
				var materialType = JSM.RenderMaterialFlags.Triangle;
				if (material.texture !== null) {
					materialType += JSM.RenderMaterialFlags.Textured;
				}
				if (material.opacity < 1.0) {
					materialType += JSM.RenderMaterialFlags.Transparent;
				}

				var renderMaterial = MaterialToRenderMaterial (material, materialType);
				var mesh = new JSM.RenderMesh (renderMaterial);
				mesh.SetVertexArray (vertices);
				mesh.SetNormalArray (normals);
				if (material.texture !== null) {
					mesh.SetUVArray (uvs);
				}

				renderBody.AddMesh (mesh);
			},
			onTriangle : function (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3) {
				vertices.push (vertex1.x, vertex1.y, vertex1.z);
				vertices.push (vertex2.x, vertex2.y, vertex2.z);
				vertices.push (vertex3.x, vertex3.y, vertex3.z);
				
				normals.push (normal1.x, normal1.y, normal1.z);
				normals.push (normal2.x, normal2.y, normal2.z);
				normals.push (normal3.x, normal3.y, normal3.z);
				
				if (uv1 !== null && uv2 !== null && uv3 !== null) {
					uvs.push (uv1.x, uv1.y);
					uvs.push (uv2.x, uv2.y);
					uvs.push (uv3.x, uv3.y);
				}
			}
		};
		
		JSM.ExplodeBody (body, materials, explodeData);
		return renderBody;
	};

	JSM.ConvertModelToRenderBodies = function (model, parameters)
	{
		var bodies = [];
		var materials = model.GetMaterialSet ();
		var i, body, renderBody;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			renderBody = JSM.ConvertBodyToRenderBody (body, materials, parameters);
			bodies.push (renderBody);
		}
		return bodies;
	};

	JSM.ConvertJSONDataToRenderBodies = function (jsonData, asyncCallbacks)
	{
		function ConvertMeshToRenderBody (mesh, materials)
		{
			function ConvertTrianglesToRenderMesh (mesh, triangles, materials)
			{
				function GetTextureCoordinate (u, v, offset, scale, rotation)
				{
					var result = new JSM.Vector2D (u, v);
					if (!JSM.IsZero (rotation)) {
						var si = Math.sin (rotation * JSM.DegRad);
						var co = Math.cos (rotation * JSM.DegRad);
						result.x = co * u - si * v;
						result.y = si * u + co * v;
					}
					result.x = offset[0] + result.x * scale[0];
					result.y = offset[1] + result.y * scale[1];
					return result;
				}

				function AppendTriangleCoords (targetArray, sourceArray, indexArray, startIndex, componentCount)
				{
					var vertexIndex, sourceVertexIndex, componentIndex;
					for (vertexIndex = 0; vertexIndex < 3; vertexIndex++) {
						sourceVertexIndex = indexArray[startIndex + vertexIndex];
						for (componentIndex = 0; componentIndex < componentCount; componentIndex++) {
							targetArray.push (sourceArray[sourceVertexIndex * componentCount + componentIndex]);
						}
					}
				}
				
				var material = materials[triangles.material];
				var renderMaterial = new JSM.RenderMaterial (JSM.RenderMaterialFlags.Triangle, {
					ambient : material.ambient || [1.0, 1.0, 1.0],
					diffuse : material.diffuse || [1.0, 1.0, 1.0],
					specular : material.specular || [1.0, 1.0, 1.0],
					shininess : material.shininess || 0.0,
					opacity : material.opacity || 1.0,
				});
				
				var hasTexture = (material.texture !== undefined && material.texture !== null);
				if (hasTexture) {
					renderMaterial.SetType (JSM.RenderMaterialFlags.Triangle + JSM.RenderMaterialFlags.Textured);
					renderMaterial.texture = material.texture;
					renderMaterial.ambient = [1.0, 1.0, 1.0];
					renderMaterial.diffuse = [1.0, 1.0, 1.0];
				}
				
				var renderMesh = new JSM.RenderMesh (renderMaterial);
				var vertexArray = [];
				var normalArray = [];
				var uvArray = [];
				
				var i;
				for	(i = 0; i < triangles.parameters.length; i += 9) {
					AppendTriangleCoords (vertexArray, mesh.vertices, triangles.parameters, i, 3);
					AppendTriangleCoords (normalArray, mesh.normals, triangles.parameters, i + 3, 3);
					AppendTriangleCoords (uvArray, mesh.uvs, triangles.parameters, i + 6, 2);
				}

				if (hasTexture) {
					var offset = material.offset || [0.0, 0.0];
					var scale = material.scale || [1.0, 1.0];
					var rotation = material.rotation || 0.0;
					var transformedUV;
					for	(i = 0; i < uvArray.length; i += 2) {
						transformedUV = GetTextureCoordinate (uvArray[i + 0], uvArray[i + 1], offset, scale, rotation);
						uvArray[i + 0] = transformedUV.x;
						uvArray[i + 1] = -transformedUV.y;
					}
				}
				
				renderMesh.SetVertexArray (vertexArray);
				renderMesh.SetNormalArray (normalArray);
				renderMesh.SetUVArray (uvArray);
				return renderMesh;
			}
			
			var renderBody = new JSM.RenderBody ();
			var i, triangles, renderMesh;
			for (i = 0; i < mesh.triangles.length; i++) {
				triangles = mesh.triangles[i];
				renderMesh = ConvertTrianglesToRenderMesh (mesh, triangles, materials);
				renderBody.AddMesh (renderMesh);
			}
			return renderBody;
		}
		
		function AddMesh (meshes, materials, meshIndex, resultBodies)
		{
			var renderBody = ConvertMeshToRenderBody (meshes[meshIndex], materials);
			resultBodies.push (renderBody);
		}
		
		var resultBodies = [];

		var materials = jsonData.materials;
		if (materials === undefined) {
			return resultBodies;
		}
		
		var meshes = jsonData.meshes;
		if (meshes === undefined) {
			return resultBodies;
		}
		
		var meshIndex = 0;
		JSM.AsyncRunTask (
			function () {
				AddMesh (meshes, materials, meshIndex, resultBodies);
				meshIndex = meshIndex + 1;
				return true;
			},
			asyncCallbacks,
			meshes.length, 0, resultBodies
		);

		return resultBodies;
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/mouse',["../core/jsm"],function(JSM){
	JSM.Mouse = function ()
	{
		this.down = false;
		this.button = 0;
		this.shift = false;
		this.ctrl = false;
		this.alt = false;
		this.prev = new JSM.Coord2D (0, 0);
		this.curr = new JSM.Coord2D (0, 0);
		this.diff = new JSM.Coord2D (0, 0);
	};

	JSM.Mouse.prototype.Down = function (event, div)
	{
		var eventParameters = event || window.event;

		this.down = true;
		this.button = event.which;
		this.shift = event.shiftKey;
		this.ctrl = event.ctrlKey;
		this.alt = event.altKey;
		
		this.SetCurrent (eventParameters, div);
		this.prev = this.curr.Clone ();
	};

	JSM.Mouse.prototype.Move = function (event, div)
	{
		var eventParameters = event || window.event;
		
		this.shift = event.shiftKey;
		this.ctrl = event.ctrlKey;
		this.alt = event.altKey;
		
		this.SetCurrent (eventParameters, div);
		this.diff = JSM.CoordSub2D (this.curr, this.prev);
		this.prev = this.curr.Clone ();
	};

	JSM.Mouse.prototype.Up = function (event, div)
	{
		var eventParameters = event || window.event;
		
		this.down = false;
		this.SetCurrent (eventParameters, div);
	};

	JSM.Mouse.prototype.Out = function (event, div)
	{
		var eventParameters = event || window.event;
		
		this.down = false;
		this.SetCurrent (eventParameters, div);
	};

	JSM.Mouse.prototype.SetCurrent = function (eventParameters, div)
	{
		var currX = eventParameters.clientX;
		var currY = eventParameters.clientY;
		if (div.getBoundingClientRect !== undefined) {
			var clientRect = div.getBoundingClientRect ();
			currX -= clientRect.left;
			currY -= clientRect.top;
		}
		if (window.pageXOffset !== undefined && window.pageYOffset !== undefined) {
			currX += window.pageXOffset;
			currY += window.pageYOffset;
		}
		this.curr = new JSM.Coord2D (currX, currY);
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/touch',["../core/jsm"],function(JSM){
	JSM.Touch = function ()
	{
		this.down = false;
		this.fingers = 0;
		this.prev = new JSM.Coord2D ();
		this.curr = new JSM.Coord2D ();
		this.diff = new JSM.Coord2D ();
	};

	JSM.Touch.prototype.Start = function (event, div)
	{
		if (event.touches.length === 0) {
			return;
		}

		this.down = true;
		this.fingers = event.touches.length;

		this.SetCurrent (event, div);
		this.prev = this.curr.Clone ();
	};

	JSM.Touch.prototype.Move = function (event, div)
	{
		if (event.touches.length === 0) {
			return;
		}

		this.fingers = event.touches.length;

		this.SetCurrent (event, div);
		this.diff = JSM.CoordSub2D (this.curr, this.prev);
		this.prev = this.curr.Clone ();
	};

	JSM.Touch.prototype.End = function (event, div)
	{
		if (event.touches.length === 0) {
			return;
		}

		this.down = false;
		this.SetCurrent (event, div);
	};

	JSM.Touch.prototype.SetCurrent = function (event, div)
	{
		function GetEventCoord (touch, div)
		{
			var currX = touch.pageX;
			var currY = touch.pageY;
			if (div.getBoundingClientRect !== undefined) {
				var clientRect = div.getBoundingClientRect ();
				currX -= clientRect.left;
				currY -= clientRect.top;
			}
			if (window.pageXOffset !== undefined && window.pageYOffset !== undefined) {
				currX += window.pageXOffset;
				currY += window.pageYOffset;
			}
			return new JSM.Coord2D (currX, currY);
		}
		
		if (event.touches.length == 1 || event.touches.length == 3) {
			this.curr = GetEventCoord (event.touches[0], div);
		} else if (event.touches.length == 2) {
			var distance = GetEventCoord (event.touches[0], div).DistanceTo (GetEventCoord (event.touches[1], div));
			this.curr = new JSM.Coord2D (distance, distance);
		}
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/painter',["../core/jsm"],function(JSM){
	/**
	* Function: OrderPolygons
	* Description: Order body polygons from front to back depending on the eye position.
	* Parameters:
	*	body {Body} the body
	*	eye {Coord} the camera eye position
	*	center {Coord} the camera center position
	* Returns:
	*	{integer[]} the ordered polygon indices
	*/
	JSM.OrderPolygons = function (body, eye, center)
	{
		function SwapArrayValues (array, from, to)
		{
			var temp = array[from];
			array[from] = array[to];
			array[to] = temp;
		}

		function GetPolygonCenter (p)
		{
			var polygon = body.GetPolygon (p);
			var result = new JSM.Coord (0.0, 0.0, 0.0);

			var i, coord;
			for (i = 0; i < polygon.VertexIndexCount (); i++) {
				coord = body.GetVertexPosition (polygon.GetVertexIndex (i));
				result = JSM.CoordAdd (result, coord);
			}
			
			result.MultiplyScalar (1.0 / polygon.VertexIndexCount ());
			return result;
		}
		
		function CalculatePolygonValues ()
		{
			var viewDirection = JSM.CoordSub (center, eye).Normalize ();
			var cameraPlane = JSM.GetPlaneFromCoordAndDirection (eye, viewDirection);
			
			var i, j, polygon, coord, distance, minDistance, maxDistance;
			var polygonCenter, polygonCenterDistance;
			var polygonNormal, polygonViewVector, polygonDirection, polygonPlane;
			for (i = 0; i < body.PolygonCount (); i++) {
				minDistance = JSM.Inf;
				maxDistance = -JSM.Inf;
				polygon = body.GetPolygon (i);
				for (j = 0; j < polygon.VertexIndexCount (); j++) {
					coord = body.GetVertexPosition (polygon.GetVertexIndex (j));
					distance = cameraPlane.CoordDistance (coord);
					if (JSM.IsLower (distance, minDistance)) {
						minDistance = distance;
					}
					if (JSM.IsGreater (distance, maxDistance)) {
						maxDistance = distance;
					}
				}

				minViewDistances.push (minDistance);
				maxViewDistances.push (maxDistance);
				
				polygonCenter = GetPolygonCenter (i);
				polygonCenterDistance = cameraPlane.CoordDistance (polygonCenter);
				polygonCenters.push (polygonCenter);
				polygonCenterDistances.push (polygonCenterDistance);

				polygonNormal = JSM.CalculateBodyPolygonNormal (body, i);
				polygonViewVector = JSM.CoordSub (polygonCenter, eye).Normalize ();
				polygonDirection = JSM.VectorDot (polygonNormal, polygonViewVector);
				if (JSM.IsGreaterOrEqual (polygonDirection, 0.0)) {
					polygonNormal.MultiplyScalar (-1);
				}

				polygonPlane = JSM.GetPlaneFromCoordAndDirection (polygonCenter, polygonNormal);
				polygonPlanes.push (polygonPlane);
			}
		}
		
		function PolygonViewOverlap (s, p)
		{
			return JSM.IsLowerOrEqual (minViewDistances[s], maxViewDistances[p]);
		}

		function PolygonIsFrontOfPlane (s, p)
		{
			var sPlane = polygonPlanes[s];
			var pPlane = polygonPlanes[p];

			var i, coord;

			var isSBehindP = true;
			var sPolygon = body.GetPolygon (s);
			for (i = 0; i < sPolygon.VertexIndexCount (); i++) {
				coord = body.GetVertexPosition (sPolygon.GetVertexIndex (i));
				if (pPlane.CoordPosition (coord) === JSM.CoordPlanePosition.CoordInFrontOfPlane) {
					isSBehindP = false;
					break;
				}
			}
			
			if (isSBehindP) {
				return false;
			}

			var isPFrontOfS = true;
			var pPolygon = body.GetPolygon (p);
			for (i = 0; i < pPolygon.VertexIndexCount (); i++) {
				coord = body.GetVertexPosition (pPolygon.GetVertexIndex (i));
				if (sPlane.CoordPosition (coord) === JSM.CoordPlanePosition.CoordAtBackOfPlane) {
					isPFrontOfS = false;
					break;
				}
			}
			
			if (isPFrontOfS) {
				return false;
			}
			
			return true;
		}

		function HasLowerDistance (s, p)
		{
			if (JSM.IsLower (maxViewDistances[s], maxViewDistances[p])) {
				return true;
			} else if (JSM.IsEqual (maxViewDistances[s], maxViewDistances[p])) {
				if (JSM.IsLower (polygonCenterDistances[s], polygonCenterDistances[p])) {
					return true;
				}
			}
			
			return false;
		}
		
		function OrderPolygonsByMaxViewDistance ()
		{
			var count = ordered.length;
			
			var i, j;
			for (i = 0; i < count - 1; i++) {
				for (j = 0; j < count - i - 1; j++) {
					if (HasLowerDistance (ordered[j], ordered[j + 1])) {
						SwapArrayValues (ordered, j, j + 1);
					}
				}
			}
		}

		function NeedToChangeOrder (s, p)
		{
			if (needToChangeOrderCache[s][p] !== null) {
				return needToChangeOrderCache[s][p];
			}

			if (PolygonViewOverlap (s, p)) {
				if (PolygonIsFrontOfPlane (s, p)) {
					needToChangeOrderCache[s][p] = true;
					return true;
				}
			}

			needToChangeOrderCache[s][p] = false;
			return false;
		}
		
		function ReorderPolygons ()
		{
			var count = ordered.length;

			var i, j;
			for (i = 0; i < count - 1; i++) {
				for (j = 0; j < count - i - 1; j++) {
					if (NeedToChangeOrder (ordered[j], ordered[j + 1])) {
						SwapArrayValues (ordered, j, j + 1);
					}
				}
			}
		}
		
		var result = [];
		
		var minViewDistances = [];
		var maxViewDistances = [];
		var polygonCenters = [];
		var polygonCenterDistances = [];
		var polygonPlanes = [];
		
		var ordered = [];
		var needToChangeOrderCache = [];
		var count = body.PolygonCount ();
		
		var i, j;
		for (i = 0; i < count; i++) {
			ordered.push (i);
			needToChangeOrderCache.push ([]);
			for (j = 0; j < count; j++) {
				needToChangeOrderCache[i].push (null);
			}
		}

		CalculatePolygonValues ();
		OrderPolygonsByMaxViewDistance ();
		ReorderPolygons ();
		
		result = ordered;
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/drawing',["../core/jsm"],function(JSM){
	/**
	* Class: CanvasDrawer
	* Description: Represents an object which can draw primitives to a canvas.
	* Parameters:
	*	canvas {html canvas element} the destination element
	*/
	JSM.CanvasDrawer = function (canvas)
	{
		this.canvas = canvas;
		this.context = this.canvas.getContext ('2d');
	};

	/**
	* Function: CanvasDrawer.GetWidth
	* Description: Returns the width of the target.
	* Returns:
	*	{integer} the result
	*/
	JSM.CanvasDrawer.prototype.GetWidth = function ()
	{
		return this.canvas.width;
	};

	/**
	* Function: CanvasDrawer.GetHeight
	* Description: Returns the height of the target.
	* Returns:
	*	{integer} the result
	*/
	JSM.CanvasDrawer.prototype.GetHeight = function ()
	{
		return this.canvas.height;
	};

	/**
	* Function: CanvasDrawer.Clear
	* Description: Clears the target.
	*/
	JSM.CanvasDrawer.prototype.Clear = function ()
	{
		this.context.clearRect (0, 0, this.canvas.width, this.canvas.height);
		this.context.fillStyle = '#ffffff';
		this.context.fillRect (0, 0, this.canvas.width, this.canvas.height);
	};

	/**
	* Function: CanvasDrawer.DrawLine
	* Description: Draws a line to the target.
	* Parameters:
	*	from {Coord2D} the start of the line
	*	to {Coord2D} the end of the line
	*/
	JSM.CanvasDrawer.prototype.DrawLine = function (from, to)
	{
		this.context.beginPath ();
		this.context.moveTo (from.x, this.canvas.height - from.y);
		this.context.lineTo (to.x, this.canvas.height - to.y);
		this.context.stroke ();
	};

	/**
	* Function: CanvasDrawer.DrawPolygon
	* Description: Draws a polygon to the target.
	* Parameters:
	*	polygon {Polygon2D} the polygon
	*	color {string} the hex color string
	*	contour {boolean} need to draw contour
	*/
	JSM.CanvasDrawer.prototype.DrawPolygon = function (polygon, color, contour)
	{
		function HexColorToHTMLColor (hexColor)
		{
			var rgb = JSM.HexColorToRGBComponents (hexColor);
			var result = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';
			return result;
		}
		
		this.context.fillStyle = HexColorToHTMLColor (color);
		this.context.beginPath ();

		var i, vertex, nextVertex;
		for (i = 0; i < polygon.VertexCount (); i++) {
			vertex = polygon.GetVertex (i);
			if (i === 0) {
				this.context.moveTo (vertex.x, this.canvas.height - vertex.y);
			} else {
				this.context.lineTo (vertex.x, this.canvas.height - vertex.y);
			}
		}

		this.context.closePath ();
		this.context.fill ();

		if (contour) {
			for (i = 0; i < polygon.VertexCount (); i++) {
				vertex = polygon.GetVertex (i);
				nextVertex = polygon.GetVertex (i < polygon.VertexCount () - 1 ? i + 1 : 0);
				this.DrawLine (vertex, nextVertex);
			}
		}
	};

	/**
	* Class: SVGDrawer
	* Description: Represents an object which can draw primitives to an svg.
	* Parameters:
	*	svgObject {html svg element} the destination element
	*/
	JSM.SVGDrawer = function (svgObject)
	{
		this.svgObject = svgObject;
		this.svgNameSpace = 'http://www.w3.org/2000/svg';
	};

	/**
	* Function: SVGDrawer.GetWidth
	* Description: Returns the width of the target.
	* Returns:
	*	{integer} the result
	*/
	JSM.SVGDrawer.prototype.GetWidth = function ()
	{
		return this.svgObject.getAttribute ('width');
	};

	/**
	* Function: SVGDrawer.GetHeight
	* Description: Returns the height of the target.
	* Returns:
	*	{integer} the result
	*/
	JSM.SVGDrawer.prototype.GetHeight = function ()
	{
		return this.svgObject.getAttribute ('height');
	};

	/**
	* Function: SVGDrawer.Clear
	* Description: Clears the target.
	*/
	JSM.SVGDrawer.prototype.Clear = function ()
	{
		while (this.svgObject.lastChild) {
			this.svgObject.removeChild (this.svgObject.lastChild);
		}
	};

	/**
	* Function: SVGDrawer.DrawLine
	* Description: Draws a line to the target.
	* Parameters:
	*	from {Coord2D} the start of the line
	*	to {Coord2D} the end of the line
	*/
	JSM.SVGDrawer.prototype.DrawLine = function (from, to)
	{
		var svgLine = document.createElementNS (this.svgNameSpace, 'line');
		var height = this.GetHeight ();
		svgLine.setAttributeNS (null, 'stroke', 'black');
		svgLine.setAttributeNS (null, 'x1', from.x);
		svgLine.setAttributeNS (null, 'y1', height - from.y);
		svgLine.setAttributeNS (null, 'x2', to.x);
		svgLine.setAttributeNS (null, 'y2', height - to.y);
		this.svgObject.appendChild (svgLine);
	};

	/**
	* Function: SVGDrawer.DrawPolygon
	* Description: Draws a polygon to the target.
	* Parameters:
	*	polygon {Polygon2D} the polygon
	*	color {string} the hex color string
	*	contour {boolean} need to draw contour
	*/
	JSM.SVGDrawer.prototype.DrawPolygon = function (polygon, color/*, contour*/)
	{
		function HexColorToHTMLColor (hexColor)
		{
			var rgb = JSM.HexColorToRGBComponents (hexColor);
			var result = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';
			return result;
		}

		var pointsString = '';
		var height = this.GetHeight ();
		
		var i, vertex;
		for (i = 0; i < polygon.VertexCount (); i++) {
			vertex = polygon.GetVertex (i);
			pointsString = pointsString + vertex.x + ', ' + (height - vertex.y);
			if (i < polygon.VertexCount () - 1) {
				pointsString = pointsString + ', ';
			}
		}
		
		var svgPolyon = document.createElementNS (this.svgNameSpace, 'polygon');
		svgPolyon.setAttributeNS (null, 'points', pointsString);
		svgPolyon.setAttributeNS (null, 'fill', HexColorToHTMLColor (color));
		svgPolyon.setAttributeNS (null, 'fill-opacity', '1.0');
		svgPolyon.setAttributeNS (null, 'stroke', 'black');
		this.svgObject.appendChild (svgPolyon);
	};

	/**
	* Function: DrawProjectedBody
	* Description: Draws a projected body.
	* Parameters:
	*	body {Body} the body
	*	materials {MaterialSet} the material container
	*	camera {Camera} the camera for projection
	*	drawMode {string} draw mode ('HiddenLinePainter', 'HiddenLineFrontFacing' or 'Wireframe')
	*	needClear {boolean} clear the display before draw
	*	drawer {drawer object} the drawer object
	*/
	JSM.DrawProjectedBody = function (body, materials, camera, drawMode, needClear, drawer)
	{
		function AddProjectedCoord (projectedPolygon, coord)
		{
			var projected = JSM.Project (coord, eye, center, up, fieldOfView * JSM.DegRad, aspectRatio, nearPlane, farPlane, viewPort);
			projectedPolygon.AddVertex (projected.x, projected.y);
		}

		function GetProjectedPolygonFromBody (polygon)
		{
			var projectedPolygon = new JSM.Polygon2D ();
			var i, coord;
			for (i = 0; i < polygon.VertexIndexCount (); i++) {
				coord = body.GetVertexPosition (polygon.GetVertexIndex (i));
				AddProjectedCoord (projectedPolygon, coord);
			}
			return projectedPolygon;
		}

		function GetProjectedPolygonFromPolygon (polygon)
		{
			var projectedPolygon = new JSM.Polygon2D ();
			var i, coord;
			for (i = 0; i < polygon.VertexCount (); i++) {
				coord = polygon.GetVertex (i);
				AddProjectedCoord (projectedPolygon, coord);
			}
			return projectedPolygon;
		}

		if (needClear) {
			drawer.Clear ();
		}

		var width = drawer.GetWidth ();
		var height = drawer.GetHeight ();
		
		var eye = camera.eye;
		var center = camera.center;
		var up = camera.up;
		var fieldOfView = camera.fieldOfView;
		var aspectRatio = width / height;
		var nearPlane = camera.nearClippingPlane;
		var farPlane = camera.farClippingPlane;
		var viewPort = [0, 0, width, height];

		var i, j, polygon, coord, projected, materialIndex, color;
		if (drawMode == 'HiddenLinePainter') {
			var orderedPolygons = JSM.OrderPolygons (body, eye, center);
			if (materials === undefined || materials === null) {
				materials = new JSM.MaterialSet ();
			}
			for (i = 0; i < orderedPolygons.length; i++) {
				polygon = body.GetPolygon (orderedPolygons[i]);
				projected = GetProjectedPolygonFromBody (polygon);
				materialIndex = polygon.GetMaterialIndex ();
				color = materials.GetMaterial (materialIndex).diffuse;
				drawer.DrawPolygon (projected, color, true);
			}
		} else if (drawMode == 'HiddenLineBSPTree') {
			if (materials === undefined || materials === null) {
				materials = new JSM.MaterialSet ();
			}

			var bspTree = new JSM.BSPTree ();
			JSM.AddBodyToBSPTree (body, bspTree);

			JSM.TraverseBSPTreeForEyePosition (bspTree, camera.eye, function (node) {
				projected = GetProjectedPolygonFromPolygon (node.polygon);
				polygon = body.GetPolygon (node.userData.originalPolygon);
				materialIndex = polygon.GetMaterialIndex ();
				color = materials.GetMaterial (materialIndex).diffuse;
				drawer.DrawPolygon (projected, color, true);
			});		
		} else if (drawMode == 'HiddenLineFrontFacing') {
			if (materials === undefined || materials === null) {
				materials = new JSM.MaterialSet ();
			}
			
			for (i = 0; i < body.PolygonCount (); i++) {
				polygon = body.GetPolygon (i);
				projected = GetProjectedPolygonFromBody (polygon);
				if (projected.GetOrientation () == JSM.Orientation.CounterClockwise) {
					materialIndex = polygon.GetMaterialIndex ();
					color = materials.GetMaterial (materialIndex).diffuse;
					drawer.DrawPolygon (projected, color, true);
				}
			}
		} else if (drawMode == 'Wireframe') {
			var vertexCount, currentCoord, currentVertex, vertex;
			var drawedLines = [];
			for (i = 0; i < body.PolygonCount (); i++) {
				currentCoord = null;
				currentVertex = null;
				polygon = body.GetPolygon (i);
				vertexCount = polygon.VertexIndexCount ();
				for (j = 0; j <= vertexCount; j++) {
					vertex = polygon.GetVertexIndex (j % vertexCount);
					coord = body.GetVertexPosition (vertex);
					projected = JSM.Project (coord, eye, center, up, fieldOfView * JSM.DegRad, aspectRatio, nearPlane, farPlane, viewPort);
					if (currentCoord !== null && currentVertex !== null && drawedLines[[currentVertex, vertex]] === undefined) {
						drawer.DrawLine (currentCoord, projected);
						drawedLines[[currentVertex, vertex]] = true;
						drawedLines[[vertex, currentVertex]] = true;
					}
					currentVertex = vertex;
					currentCoord = projected;
				}
			}
		}

		return true;
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/navigation',["../core/jsm"],function(JSM){
	JSM.Navigation = function ()
	{
		this.canvas = null;
		this.camera = null;
		this.drawCallback = null;
		this.resizeCallback = null;
		
		this.mouse = null;
		this.touch = null;
		
		this.cameraFixUp = null;
		this.cameraEnableOrbit = null;
		this.cameraEnablePan = null;
		this.cameraEnableZoom = null;
		this.cameraNearDistanceLimit = null;
		this.cameraFarDistanceLimit = null;
		
		this.orbitCenter = null;
		this.fullscreen = null;
	};

	JSM.Navigation.prototype.Init = function (canvas, camera, drawCallback, resizeCallback)
	{
		this.canvas = canvas;
		this.camera = camera;
		this.drawCallback = drawCallback;
		this.resizeCallback = resizeCallback;

		this.mouse = new JSM.Mouse ();
		this.touch = new JSM.Touch ();
		
		this.cameraFixUp = true;
		this.cameraEnableOrbit = true;
		this.cameraEnablePan = true;
		this.cameraEnableZoom = true;
		
		this.orbitCenter = this.camera.center.Clone ();
		this.fullscreen = false;

		var myThis = this;
		if (document.addEventListener) {
			document.addEventListener ('mousemove', function (event) {myThis.OnMouseMove (event);});
			document.addEventListener ('mouseup', function (event) {myThis.OnMouseUp (event);});
		}
		if (this.canvas.addEventListener) {
			this.canvas.addEventListener ('mousedown', function (event) {myThis.OnMouseDown (event);}, false);
			this.canvas.addEventListener ('DOMMouseScroll', function (event) {myThis.OnMouseWheel (event);}, false);
			this.canvas.addEventListener ('mousewheel', function (event) {myThis.OnMouseWheel (event);}, false);
			this.canvas.addEventListener ('touchstart', function (event) {myThis.OnTouchStart (event);}, false);
			this.canvas.addEventListener ('touchmove', function (event) {myThis.OnTouchMove (event);}, false);
			this.canvas.addEventListener ('touchend', function (event) {myThis.OnTouchEnd (event);}, false);
			this.canvas.addEventListener ('contextmenu', function (event) {myThis.OnContextMenu (event);}, false);
		}
		if (window.addEventListener) {
			window.addEventListener ('resize', function (event) {myThis.OnResize (event);}, false);
		}
		
		return true;
	};

	JSM.Navigation.prototype.SetCamera = function (eye, center, up)
	{
		this.camera.Set (eye, center, up);
		this.orbitCenter = this.camera.center.Clone ();
	};

	JSM.Navigation.prototype.EnableFixUp = function (enable)
	{
		this.cameraFixUp = enable;
	};

	JSM.Navigation.prototype.EnableOrbit = function (enable)
	{
		this.cameraEnableOrbit = enable;
	};

	JSM.Navigation.prototype.EnablePan = function (enable)
	{
		this.cameraEnablePan = enable;
	};

	JSM.Navigation.prototype.EnableZoom = function (enable)
	{
		this.cameraEnableZoom = enable;
	};

	JSM.Navigation.prototype.SetNearDistanceLimit = function (limit)
	{
		this.cameraNearDistanceLimit = limit;
	};

	JSM.Navigation.prototype.SetFarDistanceLimit = function (limit)
	{
		this.cameraFarDistanceLimit = limit;
	};

	JSM.Navigation.prototype.SetOrbitCenter = function (orbitCenter)
	{
		this.orbitCenter = orbitCenter;
	};

	JSM.Navigation.prototype.FitInWindow = function (center, radius)
	{
		if (JSM.IsZero (radius)) {
			return;
		}
		
		var offsetToOrigo = JSM.CoordSub (this.camera.center, center);
		this.camera.center = center;
		this.camera.eye = JSM.CoordSub (this.camera.eye, offsetToOrigo);
		
		var centerEyeDirection = JSM.CoordSub (this.camera.eye, this.camera.center).Normalize ();
		var fieldOfView = this.camera.fieldOfView / 2.0;
		if (this.canvas.width < this.canvas.height) {
			fieldOfView = fieldOfView * this.canvas.width / this.canvas.height;
		}
		var distance = radius / Math.sin (fieldOfView * JSM.DegRad);
		
		this.camera.eye = this.camera.center.Clone ().Offset (centerEyeDirection, distance);
		this.orbitCenter = this.camera.center.Clone ();
	};

	JSM.Navigation.prototype.SetFullscreen = function (fullscreen)
	{
		this.fullscreen = fullscreen;
		this.ResizeCallback ();
	};

	JSM.Navigation.prototype.Orbit = function (angleX, angleY)
	{
		var radAngleX = angleX * JSM.DegRad;
		var radAngleY = angleY * JSM.DegRad;
		
		var viewDirection = JSM.CoordSub (this.camera.center, this.camera.eye).Normalize ();
		var horizontalDirection = JSM.VectorCross (viewDirection, this.camera.up).Normalize ();
		var differentCenter = !this.orbitCenter.IsEqual (this.camera.center);
		
		if (this.cameraFixUp) {
			var originalAngle = viewDirection.AngleTo (this.camera.up);
			var newAngle = originalAngle + radAngleY;
			if (JSM.IsGreater (newAngle, 0.0) && JSM.IsLower (newAngle, Math.PI)) {
				this.camera.eye.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);
				if (differentCenter) {
					this.camera.center.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);
				}
			}
			this.camera.eye.Rotate (this.camera.up, -radAngleX, this.orbitCenter);
			if (differentCenter) {
				this.camera.center.Rotate (this.camera.up, -radAngleX, this.orbitCenter);
			}
		} else {
			var verticalDirection = JSM.VectorCross (horizontalDirection, viewDirection).Normalize ();
			this.camera.eye.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);
			this.camera.eye.Rotate (verticalDirection, -radAngleX, this.orbitCenter);
			if (differentCenter) {
				this.camera.center.Rotate (horizontalDirection, -radAngleY, this.orbitCenter);
				this.camera.center.Rotate (verticalDirection, -radAngleX, this.orbitCenter);
			}
			this.camera.up = verticalDirection;
		}
	};

	JSM.Navigation.prototype.Pan = function (moveX, moveY)
	{
		var viewDirection = JSM.CoordSub (this.camera.center, this.camera.eye).Normalize ();
		var horizontalDirection = JSM.VectorCross (viewDirection, this.camera.up).Normalize ();
		var verticalDirection = JSM.VectorCross (horizontalDirection, viewDirection).Normalize ();
		
		this.camera.eye.Offset (horizontalDirection, -moveX);
		this.camera.center.Offset (horizontalDirection, -moveX);

		this.camera.eye.Offset (verticalDirection, moveY);
		this.camera.center.Offset (verticalDirection, moveY);
	};

	JSM.Navigation.prototype.Zoom = function (ratio)
	{
		var direction = JSM.CoordSub (this.camera.center, this.camera.eye);
		var distance = direction.Length ();
		var zoomIn = ratio > 0;
		if (zoomIn && this.cameraNearDistanceLimit !== null && distance < this.cameraNearDistanceLimit) {
			return 0;
		} else if (!zoomIn && this.cameraFarDistanceLimit !== null && distance > this.cameraFarDistanceLimit) {
			return 0;
		}

		var move = distance * ratio;
		this.camera.eye.Offset (direction, move);
	};

	JSM.Navigation.prototype.DrawCallback = function ()
	{
		if (this.drawCallback !== undefined && this.drawCallback !== null) {
			this.drawCallback ();
		}
	};

	JSM.Navigation.prototype.ResizeCallback = function ()
	{
		if (this.resizeCallback !== undefined && this.resizeCallback !== null) {
			if (this.fullscreen) {
				this.canvas.width = window.innerWidth;
				this.canvas.height = window.innerHeight;
			}
			this.resizeCallback ();
		}
	};

	JSM.Navigation.prototype.OnMouseDown = function (event)
	{
		event.preventDefault ();
		this.mouse.Down (event, this.canvas);
	};

	JSM.Navigation.prototype.OnMouseMove = function (event)
	{
		event.preventDefault ();
		this.mouse.Move (event, this.canvas);
		if (!this.mouse.down) {
			return;
		}

		var ratio = 0.0;
		if (this.mouse.button == 1) {
			if (!this.cameraEnableOrbit) {
				return;
			}		
			ratio = 0.5;
			this.Orbit (this.mouse.diff.x * ratio, this.mouse.diff.y * ratio);
		} else if (this.mouse.button == 3) {
			if (!this.cameraEnablePan) {
				return;
			}
			var eyeCenterDistance = this.camera.eye.DistanceTo (this.camera.center);
			ratio = 0.001 * eyeCenterDistance;
			this.Pan (this.mouse.diff.x * ratio, this.mouse.diff.y * ratio);
		}
		this.DrawCallback ();
	};

	JSM.Navigation.prototype.OnMouseUp = function (event)
	{
		event.preventDefault ();
		this.mouse.Up (event, this.canvas);
	};

	JSM.Navigation.prototype.OnMouseOut = function (event)
	{
		event.preventDefault ();
		this.mouse.Out (event, this.canvas);
	};

	JSM.Navigation.prototype.OnMouseWheel = function (event)
	{
		event.preventDefault ();
		if (!this.cameraEnableZoom) {
			return;
		}

		var eventParameters = event;
		if (eventParameters === null) {
			eventParameters = window.event;
		}
		
		var delta = 0;
		if (eventParameters.detail) {
			delta = -eventParameters.detail;
		} else if (eventParameters.wheelDelta) {
			delta = eventParameters.wheelDelta / 40;
		}

		var ratio = 0.1;
		if (delta < 0) {
			ratio = ratio * -1.0;
		}

		this.Zoom (ratio);
		this.DrawCallback ();
	};

	JSM.Navigation.prototype.OnTouchStart = function (event)
	{
		event.preventDefault ();
		this.touch.Start (event, this.canvas);
	};

	JSM.Navigation.prototype.OnTouchMove = function (event)
	{
		event.preventDefault ();
		this.touch.Move (event, this.canvas);
		if (!this.touch.down) {
			return;
		}

		var ratio = 0.0;
		if (this.touch.fingers == 1) {
			if (!this.cameraEnableOrbit) {
				return;
			}
			ratio = 0.5;
			this.Orbit (this.touch.diff.x * ratio, this.touch.diff.y * ratio);
		} else if (this.touch.fingers == 2) {
			if (!this.cameraEnableZoom) {
				return;
			}
			ratio = 0.005;
			this.Zoom (this.touch.diff.x * ratio);
		} else if (this.touch.fingers == 3) {
			if (!this.cameraEnablePan) {
				return;
			}
			var eyeCenterDistance = this.camera.eye.DistanceTo (this.camera.center);
			ratio = 0.001 * eyeCenterDistance;
			this.Pan (this.touch.diff.x * ratio, this.touch.diff.y * ratio);
		}
		this.DrawCallback ();
	};

	JSM.Navigation.prototype.OnTouchEnd = function (event)
	{
		event.preventDefault ();
		this.touch.End (event, this.canvas);
	};

	JSM.Navigation.prototype.OnContextMenu = function (event)
	{
		event.preventDefault ();
	};

	JSM.Navigation.prototype.OnResize = function (event)
	{
		event.preventDefault ();
		this.ResizeCallback ();
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/softwareviewer',["../core/jsm"],function(JSM){
	JSM.SoftwareViewer = function ()
	{
		this.canvas = null;
		this.camera = null;
		this.bodies = null;
		this.drawer = null;
		this.drawMode = null;
		this.navigation = null;
	};

	JSM.SoftwareViewer.prototype.Start = function (canvas, camera)
	{
		if (!this.InitCanvas (canvas)) {
			return false;
		}

		if (!this.InitCamera (camera)) {
			return false;
		}

		return true;
	};

	JSM.SoftwareViewer.prototype.InitCanvas = function (canvas)
	{
		this.bodies = [];
		this.canvas = canvas;
		if (!this.canvas) {
			return false;
		}
		
		if (this.canvas instanceof (HTMLCanvasElement)) {
			this.drawer = new JSM.CanvasDrawer (this.canvas);
		} else if (this.canvas instanceof (SVGSVGElement)) {
			this.drawer = new JSM.SVGDrawer (this.canvas);
		}
		
		if (!this.drawer) {
			return false;
		}
		
		this.drawMode = 'Wireframe';
		return true;
	};

	JSM.SoftwareViewer.prototype.InitCamera = function (camera)
	{
		this.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());
		if (!this.camera) {
			return false;
		}

		this.navigation = new JSM.Navigation ();
		if (!this.navigation.Init (this.canvas, this.camera, this.Draw.bind (this), this.Resize.bind (this))) {
			return false;
		}

		return true;
	};

	JSM.SoftwareViewer.prototype.AddBody = function (body, materials)
	{
		this.bodies.push ([body, materials]);
	};

	JSM.SoftwareViewer.prototype.RemoveBodies = function ()
	{
		this.bodies = [];
	};

	JSM.SoftwareViewer.prototype.FitInWindow = function ()
	{
		var sphere = this.GetBoundingSphere ();
		this.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());
		this.Draw ();
	};

	JSM.SoftwareViewer.prototype.GetCenter = function ()
	{
		var boundingBox = this.GetBoundingBox ();
		return boundingBox.GetCenter ();
	};

	JSM.SoftwareViewer.prototype.GetBoundingBox = function ()
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);
		
		var i, j, body, vertex;
		for (i = 0; i < this.bodies.length; i++) {
			body = this.bodies[i][0];
			for (j = 0; j < body.VertexCount (); j++) {
				vertex = body.GetVertex (j);
				min.x = JSM.Minimum (min.x, vertex.position.x);
				min.y = JSM.Minimum (min.y, vertex.position.y);
				min.z = JSM.Minimum (min.z, vertex.position.z);
				max.x = JSM.Maximum (max.x, vertex.position.x);
				max.y = JSM.Maximum (max.y, vertex.position.y);
				max.z = JSM.Maximum (max.z, vertex.position.z);
			}
		}

		return new JSM.Box (min, max);
	};

	JSM.SoftwareViewer.prototype.GetBoundingSphere = function ()
	{
		var center = this.GetCenter ();
		var radius = 0.0;

		var i, j, body, vertex, distance;
		for (i = 0; i < this.bodies.length; i++) {
			body = this.bodies[i][0];
			for (j = 0; j < body.VertexCount (); j++) {
				vertex = body.GetVertex (j);
				distance = center.DistanceTo (vertex.position);
				if (JSM.IsGreater (distance, radius)) {
					radius = distance;
				}
			}
		}

		var sphere = new JSM.Sphere (center, radius);
		return sphere;
	};

	JSM.SoftwareViewer.prototype.Resize = function ()
	{
		this.Draw ();
	};

	JSM.SoftwareViewer.prototype.Draw = function ()
	{
		var i, bodyAndMaterials;
		this.drawer.Clear ();
		
		for (i = 0; i < this.bodies.length; i++) {
			bodyAndMaterials = this.bodies[i];
			JSM.DrawProjectedBody (bodyAndMaterials[0], bodyAndMaterials[1], this.camera, this.drawMode, false, this.drawer);
		}

		return true;
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/spriteviewer',["../core/jsm"],function(JSM){
	JSM.SpriteViewer = function ()
	{
		this.canvas = null;
		this.camera = null;
		this.callbacks = null;
		this.points = null;
		this.projected = null;
		this.navigation = null;
	};

	JSM.SpriteViewer.prototype.Start = function (canvas, camera, callbacks)
	{
		if (!this.InitCanvas (canvas)) {
			return false;
		}

		if (!this.InitCamera (camera)) {
			return false;
		}

		if (!this.InitCallbacks (callbacks)) {
			return false;
		}
		
		return true;
	};

	JSM.SpriteViewer.prototype.InitCanvas = function (canvas)
	{
		this.points = [];
		this.canvas = canvas;
		if (!this.canvas) {
			return false;
		}
		
		return true;
	};

	JSM.SpriteViewer.prototype.InitCamera = function (camera)
	{
		this.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());
		if (!this.camera) {
			return false;
		}

		this.navigation = new JSM.Navigation ();
		if (!this.navigation.Init (this.canvas, this.camera, this.Draw.bind (this))) {
			return false;
		}

		return true;
	};

	JSM.SpriteViewer.prototype.InitCallbacks = function (callbacks)
	{
		this.callbacks = {
			onPointDraw : null
		};

		if (callbacks !== undefined) {
			if (callbacks.onDrawStart !== undefined) { this.callbacks.onDrawStart = callbacks.onDrawStart; }
			if (callbacks.onPointDraw !== undefined) { this.callbacks.onPointDraw = callbacks.onPointDraw; }
			if (callbacks.onDrawEnd !== undefined) { this.callbacks.onDrawEnd = callbacks.onDrawEnd; }
		}

		return true;
	};

	JSM.SpriteViewer.prototype.AddPoint = function (point)
	{
		this.points.push (point);
	};

	JSM.SpriteViewer.prototype.RemovePoints = function ()
	{
		this.points = [];
	};

	JSM.SpriteViewer.prototype.Resize = function ()
	{
		this.Draw ();
	};

	JSM.SpriteViewer.prototype.NearestPointUnderPosition = function (maxDistance, x, y)
	{
		var position = new JSM.Coord2D (x, y);
		
		var minIndex = -1;
		var minDistance = JSM.Inf;
		var i, projected, distance;
		for (i = 0; i < this.projected.length; i++) {
			projected = this.projected[i];
			distance = position.DistanceTo (new JSM.Coord2D (projected.position.x, projected.position.y));
			if (JSM.IsLower (distance, maxDistance) && JSM.IsLower (distance, minDistance)) {
				minIndex = projected.originalIndex;
				minDistance = distance;
			}
		}
		
		return minIndex;
	};

	JSM.SpriteViewer.prototype.NearestPointUnderMouse = function (maxDistance)
	{
		return this.NearestPointUnderPosition (maxDistance, this.navigation.mouse.curr.x, this.navigation.mouse.curr.y);
	};

	JSM.SpriteViewer.prototype.NearestPointUnderTouch = function (maxDistance)
	{
		return this.NearestPointUnderPosition (maxDistance, this.navigation.touch.curr.x, this.navigation.touch.curr.y);
	};

	JSM.SpriteViewer.prototype.FitInWindow = function ()
	{
		var sphere = this.GetBoundingSphere ();
		this.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());
		this.Draw ();
	};

	JSM.SpriteViewer.prototype.GetCenter = function ()
	{
		var boundingBox = this.GetBoundingBox ();
		return boundingBox.GetCenter ();
	};

	JSM.SpriteViewer.prototype.GetBoundingBox = function ()
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);
		
		var i, coord;
		for (i = 0; i < this.points.length; i++) {
			coord = this.points[i];
			min.x = JSM.Minimum (min.x, coord.x);
			min.y = JSM.Minimum (min.y, coord.y);
			min.z = JSM.Minimum (min.z, coord.z);
			max.x = JSM.Maximum (max.x, coord.x);
			max.y = JSM.Maximum (max.y, coord.y);
			max.z = JSM.Maximum (max.z, coord.z);
		}

		return new JSM.Box (min, max);
	};

	JSM.SpriteViewer.prototype.GetBoundingSphere = function ()
	{
		var center = this.GetCenter ();
		var radius = 0.0;

		var i, coord, distance;
		for (i = 0; i < this.points.length; i++) {
			coord = this.points[i];
			distance = center.DistanceTo (coord);
			if (JSM.IsGreater (distance, radius)) {
				radius = distance;
			}
		}

		var sphere = new JSM.Sphere (center, radius);
		return sphere;
	};

	JSM.SpriteViewer.prototype.Draw = function ()
	{
		if (this.callbacks.onDrawStart !== null) {
			this.callbacks.onDrawStart (this.canvas);
		}

		var aspectRatio = this.canvas.width / this.canvas.height;
		var viewPort = [0, 0, this.canvas.width, this.canvas.height];
		this.projected = [];
		
		var i, coord, projected;
		for (i = 0; i < this.points.length; i++) {
			coord = this.points[i];
			projected = JSM.Project (coord, this.camera.eye, this.camera.center, this.camera.up, this.camera.fieldOfView * JSM.DegRad, aspectRatio, this.camera.nearClippingPlane, this.camera.farClippingPlane, viewPort);
			projected.y = this.canvas.height - projected.y;
			if (projected !== null) {
				this.projected.push ({position : projected, originalIndex : i});
			}
		}

		this.projected.sort (function (a, b) {
			if (a.position.z > b.position.z) {
				return -1;
			} else if (a.position.z < b.position.z) {
				return 1;
			}
			return 0;
		});
		
		for (i = 0; i < this.projected.length; i++) {
			if (this.callbacks.onPointDraw !== null) {
				this.callbacks.onPointDraw (this.canvas, this.projected[i].originalIndex, this.projected[i].position);
			}
		}

		if (this.callbacks.onDrawEnd !== null) {
			this.callbacks.onDrawEnd (this.canvas);
		}
		return true;
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/viewer',["../core/jsm"],function(JSM){
	JSM.Viewer = function ()
	{
		this.camera = null;
		this.renderer = null;
		this.navigation = null;
		this.cameraLight = null;
	};

	JSM.Viewer.prototype.Init = function (canvas, camera)
	{
		if (!this.InitRenderer (canvas)) {
			return false;
		}

		if (!this.InitNavigation (camera)) {
			return false;
		}

		if (!this.InitLights ()) {
			return false;
		}

		return true;
	};

	JSM.Viewer.prototype.Reset = function ()
	{
		this.RemoveBodies ();
		this.RemoveLights ();
		this.SetAmbientLight (new JSM.RenderAmbientLight (0x7f7f7f));
		this.EnableCameraLight ();
	};

	JSM.Viewer.prototype.InitRenderer = function (canvas)
	{
		this.renderer = new JSM.Renderer ();
		if (!this.renderer.Init (canvas)) {
			return false;
		}
		return true;
	};

	JSM.Viewer.prototype.InitNavigation = function (camera)
	{
		this.camera = JSM.ValueOrDefault (camera, new JSM.Camera ());
		if (!this.camera) {
			return false;
		}

		this.navigation = new JSM.Navigation ();
		if (!this.navigation.Init (this.renderer.canvas, this.camera, this.Draw.bind (this), this.Resize.bind (this))) {
			return false;
		}

		return true;
	};

	JSM.Viewer.prototype.InitLights = function ()
	{
		this.SetAmbientLight (new JSM.RenderAmbientLight (0x7f7f7f));
		this.EnableCameraLight ();
		return true;
	};

	JSM.Viewer.prototype.SetClearColor = function (red, green, blue)
	{
		this.renderer.SetClearColor (red, green, blue);
	};

	JSM.Viewer.prototype.EnableCameraLight = function ()
	{
		if (this.cameraLight !== null) {
			return;
		}
		this.cameraLight = new JSM.RenderDirectionalLight (0x7f7f7f, 0xffffff, new JSM.Vector (1.0, 0.0, 0.0));
		this.AddLight (this.cameraLight);
	};

	JSM.Viewer.prototype.DisableCameraLight = function ()
	{
		if (this.cameraLight === null) {
			return;
		}
		this.RemoveLight (this.cameraLight);
		this.cameraLight = null;
	};

	JSM.Viewer.prototype.GetCameraLight = function ()
	{
		return this.cameraLight;
	};

	JSM.Viewer.prototype.SetAmbientLight = function (light)
	{
		this.renderer.SetAmbientLight (light);
	};

	JSM.Viewer.prototype.AddLight = function (light)
	{
		this.renderer.AddLight (light);
	};

	JSM.Viewer.prototype.RemoveLight = function (light)
	{
		this.renderer.RemoveLight (light);
	};

	JSM.Viewer.prototype.RemoveLights = function ()
	{
		this.renderer.RemoveLights ();
		this.cameraLight = null;
	};

	JSM.Viewer.prototype.AddBody = function (renderBody)
	{
		this.renderer.AddBody (renderBody, this.Draw.bind (this));
	};

	JSM.Viewer.prototype.AddBodies = function (renderBodies)
	{
		this.renderer.AddBodies (renderBodies, this.Draw.bind (this));
	};

	JSM.Viewer.prototype.RemoveBody = function (body)
	{
		this.renderer.RemoveBody (body);
	};

	JSM.Viewer.prototype.RemoveBodies = function ()
	{
		this.renderer.RemoveBodies ();
	};

	JSM.Viewer.prototype.FitInWindow = function ()
	{
		var sphere = this.GetBoundingSphere ();
		this.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());
	};

	JSM.Viewer.prototype.SetFullscreen = function (fullscreen)
	{
		this.navigation.SetFullscreen (fullscreen);
	};

	JSM.Viewer.prototype.GetCenter = function ()
	{
		var boundingBox = this.GetBoundingBox ();
		return boundingBox.GetCenter ();
	};

	JSM.Viewer.prototype.GetBoundingBox = function ()
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);
		
		this.renderer.EnumerateBodies (function (body) {
			var transformation = body.GetTransformation ();
			body.EnumerateMeshes (function (mesh) {
				var i, vertex;
				for (i = 0; i < mesh.VertexCount (); i++) {
					vertex = mesh.GetTransformedVertex (i, transformation);
					min.x = JSM.Minimum (min.x, vertex.x);
					min.y = JSM.Minimum (min.y, vertex.y);
					min.z = JSM.Minimum (min.z, vertex.z);
					max.x = JSM.Maximum (max.x, vertex.x);
					max.y = JSM.Maximum (max.y, vertex.y);
					max.z = JSM.Maximum (max.z, vertex.z);
				}
			});
		});

		return new JSM.Box (min, max);
	};

	JSM.Viewer.prototype.GetBoundingSphere = function ()
	{
		var center = this.GetCenter ();
		var radius = 0.0;

		this.renderer.EnumerateBodies (function (body) {
			var transformation = body.GetTransformation ();
			body.EnumerateMeshes (function (mesh) {
				var i, vertex, distance;
				for (i = 0; i < mesh.VertexCount (); i++) {
					vertex = mesh.GetTransformedVertex (i, transformation);
					distance = center.DistanceTo (vertex);
					if (JSM.IsGreater (distance, radius)) {
						radius = distance;
					}
				}
			});
		});
		
		var sphere = new JSM.Sphere (center, radius);
		return sphere;
	};

	JSM.Viewer.prototype.FindObjects = function (screenX, screenY)
	{
		return this.renderer.FindObjects (this.camera, screenX, screenY);
	};

	JSM.Viewer.prototype.Resize = function ()
	{
		this.renderer.Resize ();
		this.Draw ();
	};

	JSM.Viewer.prototype.Draw = function ()
	{
		var camera = this.camera;
		var cameraLight = this.GetCameraLight ();
		if (cameraLight !== null) {
			cameraLight.direction = JSM.CoordSub (camera.center, camera.eye).Normalize ();
		}
		this.renderer.Render (camera);
	};

	return JSM;
});

define('skylark-jsmodeler/viewer/pointcloudviewer',["../core/jsm"],function(JSM){
	JSM.PointCloudViewer = function ()
	{
		this.canvas = null;
		this.renderer = null;
		this.navigation = null;
	};

	JSM.PointCloudViewer.prototype.Init = function (canvas, camera)
	{
		if (!this.InitRenderer (canvas, camera)) {
			return false;
		}

		if (!this.InitNavigation ()) {
			return false;
		}

		return true;
	};

	JSM.PointCloudViewer.prototype.InitRenderer = function (canvas, camera)
	{
		this.renderer = new JSM.PointCloudRenderer ();
		if (!this.renderer.Init (canvas, camera)) {
			return false;
		}
		return true;
	};

	JSM.PointCloudViewer.prototype.InitNavigation = function ()
	{
		this.navigation = new JSM.Navigation ();
		if (!this.navigation.Init (this.renderer.canvas, this.renderer.camera, this.Draw.bind (this), this.Resize.bind (this))) {
			return false;
		}
		return true;
	};

	JSM.PointCloudViewer.prototype.SetClearColor = function (red, green, blue)
	{
		this.renderer.SetClearColor (red, green, blue);
	};

	JSM.PointCloudViewer.prototype.SetPointSize = function (pointSize)
	{
		this.renderer.SetPointSize (pointSize);
	};

	JSM.PointCloudViewer.prototype.AddPoints = function (points, colors)
	{
		this.renderer.AddPoints (points, colors);
	};

	JSM.PointCloudViewer.prototype.RemovePoints = function ()
	{
		this.renderer.RemovePoints ();
	};

	JSM.PointCloudViewer.prototype.FitInWindow = function ()
	{
		var sphere = this.GetBoundingSphere ();
		this.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());
		this.Draw ();
	};

	JSM.PointCloudViewer.prototype.GetCenter = function ()
	{
		var boundingBox = this.GetBoundingBox ();
		return boundingBox.GetCenter ();
	};

	JSM.PointCloudViewer.prototype.GetBoundingBox = function ()
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);
		
		var i, j, points, point;
		for (i = 0; i < this.renderer.points.length; i++) {
			points = this.renderer.points[i].pointArray;
			for (j = 0; j < points.length; j = j + 3) {
				point = new JSM.Coord (points[j], points[j + 1], points[j + 2]);
				min.x = JSM.Minimum (min.x, point.x);
				min.y = JSM.Minimum (min.y, point.y);
				min.z = JSM.Minimum (min.z, point.z);
				max.x = JSM.Maximum (max.x, point.x);
				max.y = JSM.Maximum (max.y, point.y);
				max.z = JSM.Maximum (max.z, point.z);
			}
		}

		return new JSM.Box (min, max);
	};

	JSM.PointCloudViewer.prototype.GetBoundingSphere = function ()
	{
		var center = this.GetCenter ();
		var radius = 0.0;

		var i, j, points, point, distance;
		for (i = 0; i < this.renderer.points.length; i++) {
			points = this.renderer.points[i].pointArray;
			for (j = 0; j < points.length; j = j + 3) {
				point = new JSM.Coord (points[j], points[j + 1], points[j + 2]);
				distance = center.DistanceTo (point);
				if (JSM.IsGreater (distance, radius)) {
					radius = distance;
				}
			}
		}

		var sphere = new JSM.Sphere (center, radius);
		return sphere;
	};

	JSM.PointCloudViewer.prototype.Resize = function ()
	{
		this.renderer.Resize ();
		this.Draw ();
	};

	JSM.PointCloudViewer.prototype.Draw = function ()
	{
		this.renderer.Render ();
	};

	return JSM;
});

define('skylark-jsmodeler/extras/solidgenerator',["../core/jsm"],function(JSM){
	/**
	* Function: GenerateSolidWithRadius
	* Description: Generates a special solid with the given radius.
	* Parameters:
	*	solidName {string} the name of the solid
	*	radius {number} the radius of the solid
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSolidWithRadius = function (solidName, radius)
	{
		var result = new JSM.Body ();
		var equalRadius = true;
		
		if (solidName === 'Tetrahedron') {
			result = JSM.GenerateTetrahedron ();
		} else if (solidName === 'Hexahedron') {
			result = JSM.GenerateHexahedron ();
		} else if (solidName === 'Octahedron') {
			result = JSM.GenerateOctahedron ();
		} else if (solidName === 'Dodecahedron') {
			result = JSM.GenerateDodecahedron ();
		} else if (solidName === 'Icosahedron') {
			result = JSM.GenerateIcosahedron ();
		} else if (solidName === 'TruncatedTetrahedron') {
			result = JSM.GenerateTruncatedTetrahedron ();
		} else if (solidName === 'Cuboctahedron') {
			result = JSM.GenerateCuboctahedron ();
		} else if (solidName === 'TruncatedCube') {
			result = JSM.GenerateTruncatedCube ();
		} else if (solidName === 'TruncatedOctahedron') {
			result = JSM.GenerateTruncatedOctahedron ();
		} else if (solidName === 'Rhombicuboctahedron') {
			result = JSM.GenerateRhombicuboctahedron ();
		} else if (solidName === 'TruncatedCuboctahedron') {
			result = JSM.GenerateTruncatedCuboctahedron ();
		} else if (solidName === 'SnubCube') {
			result = JSM.GenerateSnubCube ();
		} else if (solidName === 'Icosidodecahedron') {
			result = JSM.GenerateIcosidodecahedron ();
		} else if (solidName === 'TruncatedDodecahedron') {
			result = JSM.GenerateTruncatedDodecahedron ();
		} else if (solidName === 'TruncatedIcosahedron') {
			result = JSM.GenerateTruncatedIcosahedron ();
		} else if (solidName === 'Rhombicosidodecahedron') {
			result = JSM.GenerateRhombicosidodecahedron ();
		} else if (solidName === 'TruncatedIcosidodecahedron') {
			result = JSM.GenerateTruncatedIcosidodecahedron ();
		} else if (solidName === 'SnubDodecahedron') {
			result = JSM.GenerateSnubDodecahedron ();
		} else if (solidName === 'TetrakisHexahedron') {
			result = JSM.GenerateTetrakisHexahedron ();
			equalRadius = false;
		} else if (solidName === 'RhombicDodecahedron') {
			result = JSM.GenerateRhombicDodecahedron ();
			equalRadius = false;
		} else if (solidName === 'PentakisDodecahedron') {
			result = JSM.GeneratePentakisDodecahedron ();
			equalRadius = false;
		} else if (solidName === 'SmallStellatedDodecahedron') {
			result = JSM.GenerateSmallStellatedDodecahedron ();
			equalRadius = false;
		} else if (solidName === 'GreatDodecahedron') {
			result = JSM.GenerateGreatDodecahedron ();
			equalRadius = false;
		} else if (solidName === 'SmallTriambicIcosahedron') {
			result = JSM.GenerateSmallTriambicIcosahedron ();
			equalRadius = false;
		} else if (solidName === 'GreatStellatedDodecahedron') {
			result = JSM.GenerateGreatStellatedDodecahedron ();
			equalRadius = false;
		} else if (solidName === 'SmallTriakisOctahedron') {
			result = JSM.GenerateSmallTriakisOctahedron ();
			equalRadius = false;
		} else if (solidName === 'StellaOctangula') {
			result = JSM.GenerateStellaOctangula ();
			equalRadius = false;
		} else if (solidName === 'TriakisTetrahedron') {
			result = JSM.GenerateTriakisTetrahedron ();
			equalRadius = false;
		}

		if (result.VertexCount () > 0) {
			var i;
		
			var maxRadius = 0.0;
			if (equalRadius) {
				maxRadius = result.GetVertexPosition (0).Length ();
			} else {
				var currentRadius;
				for (i = 0; i < result.VertexCount (); i++) {
					currentRadius = result.GetVertexPosition (i).Length ();
					if (JSM.IsGreater (currentRadius, maxRadius)) {
						maxRadius = currentRadius;
					}
				}
			}
			
			var scale = radius / maxRadius;
			
			var vertex;
			for (i = 0; i < result.VertexCount (); i++) {
				vertex = result.GetVertex (i);
				vertex.position.MultiplyScalar (scale);
			}
		}
		
		return result;
	};

	/**
	* Function: GenerateTetrahedron
	* Description: Generates a tetrahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTetrahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;

		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, +a, +a)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, -a, +a)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, +a, -a)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, -a, -a)));

		result.AddPolygon (new JSM.BodyPolygon ([0, 1, 3]));
		result.AddPolygon (new JSM.BodyPolygon ([0, 2, 1]));
		result.AddPolygon (new JSM.BodyPolygon ([0, 3, 2]));
		result.AddPolygon (new JSM.BodyPolygon ([1, 2, 3]));
		
		return result;
	};

	/**
	* Function: GenerateHexahedron
	* Description: Generates a hexahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateHexahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;

		JSM.AddVertexToBody (result, +a, +a, +a);
		JSM.AddVertexToBody (result, +a, +a, -a);
		JSM.AddVertexToBody (result, +a, -a, +a);
		JSM.AddVertexToBody (result, +a, -a, -a);
		JSM.AddVertexToBody (result, -a, +a, +a);
		JSM.AddVertexToBody (result, -a, +a, -a);
		JSM.AddVertexToBody (result, -a, -a, +a);
		JSM.AddVertexToBody (result, -a, -a, -a);

		JSM.AddPolygonToBody (result, [0, 1, 5, 4]);
		JSM.AddPolygonToBody (result, [0, 2, 3, 1]);
		JSM.AddPolygonToBody (result, [0, 4, 6, 2]);
		JSM.AddPolygonToBody (result, [1, 3, 7, 5]);
		JSM.AddPolygonToBody (result, [2, 6, 7, 3]);
		JSM.AddPolygonToBody (result, [4, 5, 7, 6]);

		return result;
	};

	/**
	* Function: GenerateOctahedron
	* Description: Generates an octahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateOctahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;

		JSM.AddVertexToBody (result, +a, +b, +b);
		JSM.AddVertexToBody (result, -a, +b, +b);
		JSM.AddVertexToBody (result, +b, +a, +b);
		JSM.AddVertexToBody (result, +b, -a, +b);
		JSM.AddVertexToBody (result, +b, +b, +a);
		JSM.AddVertexToBody (result, +b, +b, -a);

		JSM.AddPolygonToBody (result, [0, 2, 4]);
		JSM.AddPolygonToBody (result, [0, 3, 5]);
		JSM.AddPolygonToBody (result, [0, 4, 3]);
		JSM.AddPolygonToBody (result, [0, 5, 2]);
		JSM.AddPolygonToBody (result, [1, 2, 5]);
		JSM.AddPolygonToBody (result, [1, 3, 4]);
		JSM.AddPolygonToBody (result, [1, 4, 2]);
		JSM.AddPolygonToBody (result, [1, 5, 3]);

		return result;
	};

	/**
	* Function: GenerateDodecahedron
	* Description: Generates a dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateDodecahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;
		var c = (1.0 + Math.sqrt (5.0)) / 2.0;
		var d = 1.0 / c;

		JSM.AddVertexToBody (result, +a, +a, +a);
		JSM.AddVertexToBody (result, +a, +a, -a);
		JSM.AddVertexToBody (result, +a, -a, +a);
		JSM.AddVertexToBody (result, -a, +a, +a);
		
		JSM.AddVertexToBody (result, +a, -a, -a);
		JSM.AddVertexToBody (result, -a, +a, -a);
		JSM.AddVertexToBody (result, -a, -a, +a);
		JSM.AddVertexToBody (result, -a, -a, -a);

		JSM.AddVertexToBody (result, +b, +d, +c);
		JSM.AddVertexToBody (result, +b, +d, -c);
		JSM.AddVertexToBody (result, +b, -d, +c);
		JSM.AddVertexToBody (result, +b, -d, -c);

		JSM.AddVertexToBody (result, +d, +c, +b);
		JSM.AddVertexToBody (result, +d, -c, +b);
		JSM.AddVertexToBody (result, -d, +c, +b);
		JSM.AddVertexToBody (result, -d, -c, +b);

		JSM.AddVertexToBody (result, +c, +b, +d);
		JSM.AddVertexToBody (result, -c, +b, +d);
		JSM.AddVertexToBody (result, +c, +b, -d);
		JSM.AddVertexToBody (result, -c, +b, -d);

		JSM.AddPolygonToBody (result, [0, 8, 10, 2, 16]);
		JSM.AddPolygonToBody (result, [0, 16, 18, 1, 12]);
		JSM.AddPolygonToBody (result, [0, 12, 14, 3, 8]);
		JSM.AddPolygonToBody (result, [1, 9, 5, 14, 12]);
		JSM.AddPolygonToBody (result, [1, 18, 4, 11, 9]);
		JSM.AddPolygonToBody (result, [2, 10, 6, 15, 13]);
		JSM.AddPolygonToBody (result, [2, 13, 4, 18, 16]);
		JSM.AddPolygonToBody (result, [3, 14, 5, 19, 17]);
		JSM.AddPolygonToBody (result, [3, 17, 6, 10, 8]);
		JSM.AddPolygonToBody (result, [4, 13, 15, 7, 11]);
		JSM.AddPolygonToBody (result, [5, 9, 11, 7, 19]);
		JSM.AddPolygonToBody (result, [6, 17, 19, 7, 15]);

		return result;
	};

	/**
	* Function: GenerateIcosahedron
	* Description: Generates an icosahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateIcosahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;
		var c = (1.0 + Math.sqrt (5.0)) / 2.0;

		JSM.AddVertexToBody (result, +b, +a, +c);
		JSM.AddVertexToBody (result, +b, +a, -c);
		JSM.AddVertexToBody (result, +b, -a, +c);
		JSM.AddVertexToBody (result, +b, -a, -c);

		JSM.AddVertexToBody (result, +a, +c, +b);
		JSM.AddVertexToBody (result, +a, -c, +b);
		JSM.AddVertexToBody (result, -a, +c, +b);
		JSM.AddVertexToBody (result, -a, -c, +b);

		JSM.AddVertexToBody (result, +c, +b, +a);
		JSM.AddVertexToBody (result, +c, +b, -a);
		JSM.AddVertexToBody (result, -c, +b, +a);
		JSM.AddVertexToBody (result, -c, +b, -a);

		JSM.AddPolygonToBody (result, [0, 2, 8]);
		JSM.AddPolygonToBody (result, [0, 4, 6]);
		JSM.AddPolygonToBody (result, [0, 6, 10]);
		JSM.AddPolygonToBody (result, [0, 8, 4]);
		JSM.AddPolygonToBody (result, [0, 10, 2]);
		JSM.AddPolygonToBody (result, [1, 3, 11]);
		JSM.AddPolygonToBody (result, [1, 4, 9]);
		JSM.AddPolygonToBody (result, [1, 6, 4]);
		JSM.AddPolygonToBody (result, [1, 9, 3]);
		JSM.AddPolygonToBody (result, [1, 11, 6]);
		JSM.AddPolygonToBody (result, [2, 5, 8]);
		JSM.AddPolygonToBody (result, [2, 7, 5]);
		JSM.AddPolygonToBody (result, [2, 10, 7]);
		JSM.AddPolygonToBody (result, [3, 5, 7]);
		JSM.AddPolygonToBody (result, [3, 7, 11]);
		JSM.AddPolygonToBody (result, [3, 9, 5]);
		JSM.AddPolygonToBody (result, [4, 8, 9]);
		JSM.AddPolygonToBody (result, [5, 9, 8]);
		JSM.AddPolygonToBody (result, [6, 11, 10]);
		JSM.AddPolygonToBody (result, [7, 10, 11]);

		return result;
	};

	/**
	* Function: GenerateTruncatedTetrahedron
	* Description: Generates a truncated tetrahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedTetrahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 3.0;

		JSM.AddVertexToBody (result, +a, +a, +b);
		JSM.AddVertexToBody (result, +a, -a, -b);
		JSM.AddVertexToBody (result, -a, -a, +b);
		JSM.AddVertexToBody (result, -a, +a, -b);

		JSM.AddVertexToBody (result, +a, +b, +a);
		JSM.AddVertexToBody (result, +a, -b, -a);
		JSM.AddVertexToBody (result, -a, -b, +a);
		JSM.AddVertexToBody (result, -a, +b, -a);

		JSM.AddVertexToBody (result, +b, +a, +a);
		JSM.AddVertexToBody (result, +b, -a, -a);
		JSM.AddVertexToBody (result, -b, -a, +a);
		JSM.AddVertexToBody (result, -b, +a, -a);

		JSM.AddPolygonToBody (result, [0, 8, 4]);
		JSM.AddPolygonToBody (result, [1, 9, 5]);
		JSM.AddPolygonToBody (result, [2, 10, 6]);
		JSM.AddPolygonToBody (result, [3, 11, 7]);

		JSM.AddPolygonToBody (result, [0, 2, 6, 5, 9, 8]);
		JSM.AddPolygonToBody (result, [0, 4, 7, 11, 10, 2]);
		JSM.AddPolygonToBody (result, [1, 3, 7, 4, 8, 9]);
		JSM.AddPolygonToBody (result, [1, 5, 6, 10, 11, 3]);

		return result;
	};

	/**
	* Function: GenerateCuboctahedron
	* Description: Generates a cuboctahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCuboctahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;

		JSM.AddVertexToBody (result, +a, +a, +b);
		JSM.AddVertexToBody (result, +a, -a, +b);
		JSM.AddVertexToBody (result, -a, -a, +b);
		JSM.AddVertexToBody (result, -a, +a, +b);

		JSM.AddVertexToBody (result, +a, +b, +a);
		JSM.AddVertexToBody (result, +a, +b, -a);
		JSM.AddVertexToBody (result, -a, +b, +a);
		JSM.AddVertexToBody (result, -a, +b, -a);

		JSM.AddVertexToBody (result, +b, +a, +a);
		JSM.AddVertexToBody (result, +b, -a, -a);
		JSM.AddVertexToBody (result, +b, -a, +a);
		JSM.AddVertexToBody (result, +b, +a, -a);

		JSM.AddPolygonToBody (result, [0, 5, 11]);
		JSM.AddPolygonToBody (result, [0, 8, 4]);
		JSM.AddPolygonToBody (result, [1, 4, 10]);
		JSM.AddPolygonToBody (result, [1, 9, 5]);
		JSM.AddPolygonToBody (result, [2, 7, 9]);
		JSM.AddPolygonToBody (result, [2, 10, 6]);
		JSM.AddPolygonToBody (result, [3, 6, 8]);
		JSM.AddPolygonToBody (result, [3, 11, 7]);

		JSM.AddPolygonToBody (result, [0, 4, 1, 5]);
		JSM.AddPolygonToBody (result, [0, 11, 3, 8]);
		JSM.AddPolygonToBody (result, [1, 10, 2, 9]);
		JSM.AddPolygonToBody (result, [2, 6, 3, 7]);
		JSM.AddPolygonToBody (result, [4, 8, 6, 10]);
		JSM.AddPolygonToBody (result, [5, 9, 7, 11]);

		return result;
	};

	/**
	* Function: GenerateTruncatedCube
	* Description: Generates a truncated cube.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedCube = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = Math.sqrt (2.0) - 1.0;

		JSM.AddVertexToBody (result, +a, +a, +b);
		JSM.AddVertexToBody (result, +a, +a, -b);
		JSM.AddVertexToBody (result, +a, -a, +b);
		JSM.AddVertexToBody (result, -a, +a, +b);
		JSM.AddVertexToBody (result, +a, -a, -b);
		JSM.AddVertexToBody (result, -a, +a, -b);
		JSM.AddVertexToBody (result, -a, -a, +b);
		JSM.AddVertexToBody (result, -a, -a, -b);

		JSM.AddVertexToBody (result, +a, +b, +a);
		JSM.AddVertexToBody (result, +a, +b, -a);
		JSM.AddVertexToBody (result, +a, -b, +a);
		JSM.AddVertexToBody (result, -a, +b, +a);
		JSM.AddVertexToBody (result, +a, -b, -a);
		JSM.AddVertexToBody (result, -a, +b, -a);
		JSM.AddVertexToBody (result, -a, -b, +a);
		JSM.AddVertexToBody (result, -a, -b, -a);

		JSM.AddVertexToBody (result, +b, +a, +a);
		JSM.AddVertexToBody (result, +b, +a, -a);
		JSM.AddVertexToBody (result, +b, -a, +a);
		JSM.AddVertexToBody (result, -b, +a, +a);
		JSM.AddVertexToBody (result, +b, -a, -a);
		JSM.AddVertexToBody (result, -b, +a, -a);
		JSM.AddVertexToBody (result, -b, -a, +a);
		JSM.AddVertexToBody (result, -b, -a, -a);

		JSM.AddPolygonToBody (result, [0, 16, 8]);
		JSM.AddPolygonToBody (result, [1, 9, 17]);
		JSM.AddPolygonToBody (result, [2, 10, 18]);
		JSM.AddPolygonToBody (result, [3, 11, 19]);
		JSM.AddPolygonToBody (result, [4, 20, 12]);
		JSM.AddPolygonToBody (result, [5, 21, 13]);
		JSM.AddPolygonToBody (result, [6, 22, 14]);
		JSM.AddPolygonToBody (result, [7, 15, 23]);

		JSM.AddPolygonToBody (result, [0, 1, 17, 21, 5, 3, 19, 16]);
		JSM.AddPolygonToBody (result, [0, 8, 10, 2, 4, 12, 9, 1]);
		JSM.AddPolygonToBody (result, [2, 18, 22, 6, 7, 23, 20, 4]);
		JSM.AddPolygonToBody (result, [3, 5, 13, 15, 7, 6, 14, 11]);
		JSM.AddPolygonToBody (result, [8, 16, 19, 11, 14, 22, 18, 10]);
		JSM.AddPolygonToBody (result, [9, 12, 20, 23, 15, 13, 21, 17]);

		return result;
	};

	/**
	* Function: GenerateTruncatedOctahedron
	* Description: Generates a truncated octahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedOctahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;
		var c = 2.0;

		JSM.AddVertexToBody (result, +b, +a, +c);
		JSM.AddVertexToBody (result, +b, +a, -c);
		JSM.AddVertexToBody (result, +b, -a, +c);
		JSM.AddVertexToBody (result, +b, -a, -c);

		JSM.AddVertexToBody (result, +b, +c, +a);
		JSM.AddVertexToBody (result, +b, -c, +a);
		JSM.AddVertexToBody (result, +b, +c, -a);
		JSM.AddVertexToBody (result, +b, -c, -a);

		JSM.AddVertexToBody (result, +a, +b, +c);
		JSM.AddVertexToBody (result, +a, +b, -c);
		JSM.AddVertexToBody (result, -a, +b, +c);
		JSM.AddVertexToBody (result, -a, +b, -c);

		JSM.AddVertexToBody (result, +a, +c, +b);
		JSM.AddVertexToBody (result, +a, -c, +b);
		JSM.AddVertexToBody (result, -a, +c, +b);
		JSM.AddVertexToBody (result, -a, -c, +b);

		JSM.AddVertexToBody (result, +c, +b, +a);
		JSM.AddVertexToBody (result, -c, +b, +a);
		JSM.AddVertexToBody (result, +c, +b, -a);
		JSM.AddVertexToBody (result, -c, +b, -a);

		JSM.AddVertexToBody (result, +c, +a, +b);
		JSM.AddVertexToBody (result, -c, +a, +b);
		JSM.AddVertexToBody (result, +c, -a, +b);
		JSM.AddVertexToBody (result, -c, -a, +b);

		JSM.AddPolygonToBody (result, [0, 10, 2, 8]);
		JSM.AddPolygonToBody (result, [1, 9, 3, 11]);
		JSM.AddPolygonToBody (result, [4, 12, 6, 14]);
		JSM.AddPolygonToBody (result, [5, 15, 7, 13]);
		JSM.AddPolygonToBody (result, [16, 22, 18, 20]);
		JSM.AddPolygonToBody (result, [17, 21, 19, 23]);

		JSM.AddPolygonToBody (result, [0, 4, 14, 21, 17, 10]);
		JSM.AddPolygonToBody (result, [0, 8, 16, 20, 12, 4]);
		JSM.AddPolygonToBody (result, [1, 6, 12, 20, 18, 9]);
		JSM.AddPolygonToBody (result, [1, 11, 19, 21, 14, 6]);
		JSM.AddPolygonToBody (result, [2, 5, 13, 22, 16, 8]);
		JSM.AddPolygonToBody (result, [2, 10, 17, 23, 15, 5]);
		JSM.AddPolygonToBody (result, [3, 7, 15, 23, 19, 11]);
		JSM.AddPolygonToBody (result, [3, 9, 18, 22, 13, 7]);

		return result;
	};

	/**
	* Function: GenerateRhombicuboctahedron
	* Description: Generates a rhombicuboctahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRhombicuboctahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 1.0 + Math.sqrt (2.0);

		JSM.AddVertexToBody (result, +a, +a, +b);
		JSM.AddVertexToBody (result, +a, +a, -b);
		JSM.AddVertexToBody (result, +a, -a, +b);
		JSM.AddVertexToBody (result, -a, +a, +b);
		JSM.AddVertexToBody (result, +a, -a, -b);
		JSM.AddVertexToBody (result, -a, +a, -b);
		JSM.AddVertexToBody (result, -a, -a, +b);
		JSM.AddVertexToBody (result, -a, -a, -b);

		JSM.AddVertexToBody (result, +a, +b, +a);
		JSM.AddVertexToBody (result, +a, +b, -a);
		JSM.AddVertexToBody (result, +a, -b, +a);
		JSM.AddVertexToBody (result, -a, +b, +a);
		JSM.AddVertexToBody (result, +a, -b, -a);
		JSM.AddVertexToBody (result, -a, +b, -a);
		JSM.AddVertexToBody (result, -a, -b, +a);
		JSM.AddVertexToBody (result, -a, -b, -a);

		JSM.AddVertexToBody (result, +b, +a, +a);
		JSM.AddVertexToBody (result, +b, +a, -a);
		JSM.AddVertexToBody (result, +b, -a, +a);
		JSM.AddVertexToBody (result, -b, +a, +a);
		JSM.AddVertexToBody (result, +b, -a, -a);
		JSM.AddVertexToBody (result, -b, +a, -a);
		JSM.AddVertexToBody (result, -b, -a, +a);
		JSM.AddVertexToBody (result, -b, -a, -a);

		JSM.AddPolygonToBody (result, [0, 16, 8]);
		JSM.AddPolygonToBody (result, [1, 9, 17]);
		JSM.AddPolygonToBody (result, [2, 10, 18]);
		JSM.AddPolygonToBody (result, [3, 11, 19]);
		JSM.AddPolygonToBody (result, [4, 20, 12]);
		JSM.AddPolygonToBody (result, [5, 21, 13]);
		JSM.AddPolygonToBody (result, [6, 22, 14]);
		JSM.AddPolygonToBody (result, [7, 15, 23]);

		JSM.AddPolygonToBody (result, [0, 2, 18, 16]);
		JSM.AddPolygonToBody (result, [0, 3, 6, 2]);
		JSM.AddPolygonToBody (result, [0, 8, 11, 3]);
		JSM.AddPolygonToBody (result, [1, 4, 7, 5]);
		JSM.AddPolygonToBody (result, [1, 5, 13, 9]);
		JSM.AddPolygonToBody (result, [1, 17, 20, 4]);
		JSM.AddPolygonToBody (result, [2, 6, 14, 10]);
		JSM.AddPolygonToBody (result, [3, 19, 22, 6]);
		JSM.AddPolygonToBody (result, [4, 12, 15, 7]);
		JSM.AddPolygonToBody (result, [5, 7, 23, 21]);
		JSM.AddPolygonToBody (result, [8, 9, 13, 11]);
		JSM.AddPolygonToBody (result, [8, 16, 17, 9]);
		JSM.AddPolygonToBody (result, [10, 12, 20, 18]);
		JSM.AddPolygonToBody (result, [10, 14, 15, 12]);
		JSM.AddPolygonToBody (result, [11, 13, 21, 19]);
		JSM.AddPolygonToBody (result, [14, 22, 23, 15]);
		JSM.AddPolygonToBody (result, [16, 18, 20, 17]);
		JSM.AddPolygonToBody (result, [19, 21, 23, 22]);

		return result;
	};

	/**
	* Function: GenerateTruncatedCuboctahedron
	* Description: Generates a truncated cuboctahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedCuboctahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 1.0 + Math.sqrt (2.0);
		var c = 1.0 + 2.0 * Math.sqrt (2.0);

		JSM.AddVertexToBody (result, +a, +b, +c);
		JSM.AddVertexToBody (result, +a, +b, -c);
		JSM.AddVertexToBody (result, +a, -b, +c);
		JSM.AddVertexToBody (result, -a, +b, +c);
		JSM.AddVertexToBody (result, +a, -b, -c);
		JSM.AddVertexToBody (result, -a, +b, -c);
		JSM.AddVertexToBody (result, -a, -b, +c);
		JSM.AddVertexToBody (result, -a, -b, -c);

		JSM.AddVertexToBody (result, +a, +c, +b);
		JSM.AddVertexToBody (result, +a, -c, +b);
		JSM.AddVertexToBody (result, +a, +c, -b);
		JSM.AddVertexToBody (result, -a, +c, +b);
		JSM.AddVertexToBody (result, +a, -c, -b);
		JSM.AddVertexToBody (result, -a, -c, +b);
		JSM.AddVertexToBody (result, -a, +c, -b);
		JSM.AddVertexToBody (result, -a, -c, -b);

		JSM.AddVertexToBody (result, +b, +a, +c);
		JSM.AddVertexToBody (result, +b, +a, -c);
		JSM.AddVertexToBody (result, -b, +a, +c);
		JSM.AddVertexToBody (result, +b, -a, +c);
		JSM.AddVertexToBody (result, -b, +a, -c);
		JSM.AddVertexToBody (result, +b, -a, -c);
		JSM.AddVertexToBody (result, -b, -a, +c);
		JSM.AddVertexToBody (result, -b, -a, -c);

		JSM.AddVertexToBody (result, +b, +c, +a);
		JSM.AddVertexToBody (result, +b, -c, +a);
		JSM.AddVertexToBody (result, -b, +c, +a);
		JSM.AddVertexToBody (result, +b, +c, -a);
		JSM.AddVertexToBody (result, -b, -c, +a);
		JSM.AddVertexToBody (result, +b, -c, -a);
		JSM.AddVertexToBody (result, -b, +c, -a);
		JSM.AddVertexToBody (result, -b, -c, -a);

		JSM.AddVertexToBody (result, +c, +a, +b);
		JSM.AddVertexToBody (result, -c, +a, +b);
		JSM.AddVertexToBody (result, +c, +a, -b);
		JSM.AddVertexToBody (result, +c, -a, +b);
		JSM.AddVertexToBody (result, -c, +a, -b);
		JSM.AddVertexToBody (result, -c, -a, +b);
		JSM.AddVertexToBody (result, +c, -a, -b);
		JSM.AddVertexToBody (result, -c, -a, -b);

		JSM.AddVertexToBody (result, +c, +b, +a);
		JSM.AddVertexToBody (result, -c, +b, +a);
		JSM.AddVertexToBody (result, +c, -b, +a);
		JSM.AddVertexToBody (result, +c, +b, -a);
		JSM.AddVertexToBody (result, -c, -b, +a);
		JSM.AddVertexToBody (result, -c, +b, -a);
		JSM.AddVertexToBody (result, +c, -b, -a);
		JSM.AddVertexToBody (result, -c, -b, -a);

		JSM.AddPolygonToBody (result, [0, 8, 11, 3]);
		JSM.AddPolygonToBody (result, [1, 5, 14, 10]);
		JSM.AddPolygonToBody (result, [2, 6, 13, 9]);
		JSM.AddPolygonToBody (result, [4, 12, 15, 7]);
		JSM.AddPolygonToBody (result, [16, 19, 35, 32]);
		JSM.AddPolygonToBody (result, [17, 34, 38, 21]);
		JSM.AddPolygonToBody (result, [18, 33, 37, 22]);
		JSM.AddPolygonToBody (result, [23, 39, 36, 20]);
		JSM.AddPolygonToBody (result, [24, 40, 43, 27]);
		JSM.AddPolygonToBody (result, [25, 29, 46, 42]);
		JSM.AddPolygonToBody (result, [26, 30, 45, 41]);
		JSM.AddPolygonToBody (result, [28, 44, 47, 31]);

		JSM.AddPolygonToBody (result, [0, 16, 32, 40, 24, 8]);
		JSM.AddPolygonToBody (result, [1, 10, 27, 43, 34, 17]);
		JSM.AddPolygonToBody (result, [2, 9, 25, 42, 35, 19]);
		JSM.AddPolygonToBody (result, [3, 11, 26, 41, 33, 18]);
		JSM.AddPolygonToBody (result, [4, 21, 38, 46, 29, 12]);
		JSM.AddPolygonToBody (result, [5, 20, 36, 45, 30, 14]);
		JSM.AddPolygonToBody (result, [6, 22, 37, 44, 28, 13]);
		JSM.AddPolygonToBody (result, [7, 15, 31, 47, 39, 23]);

		JSM.AddPolygonToBody (result, [0, 3, 18, 22, 6, 2, 19, 16]);
		JSM.AddPolygonToBody (result, [1, 17, 21, 4, 7, 23, 20, 5]);
		JSM.AddPolygonToBody (result, [8, 24, 27, 10, 14, 30, 26, 11]);
		JSM.AddPolygonToBody (result, [9, 13, 28, 31, 15, 12, 29, 25]);
		JSM.AddPolygonToBody (result, [32, 35, 42, 46, 38, 34, 43, 40]);
		JSM.AddPolygonToBody (result, [33, 41, 45, 36, 39, 47, 44, 37]);

		return result;
	};

	/**
	* Function: GenerateSnubCube
	* Description: Generates a snub cube.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSnubCube = function ()
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = (1.0 / 3.0) * (Math.pow (17 + 3.0 * Math.sqrt (33.0), 1.0 / 3.0) - Math.pow (-17 + 3.0 * Math.sqrt (33.0), 1.0 / 3.0) - 1.0);
		var c = 1.0 / b;

		JSM.AddVertexToBody (result, +a, +b, -c);
		JSM.AddVertexToBody (result, +a, -b, +c);
		JSM.AddVertexToBody (result, -a, +b, +c);
		JSM.AddVertexToBody (result, -a, -b, -c);

		JSM.AddVertexToBody (result, +b, -c, +a);
		JSM.AddVertexToBody (result, -b, +c, +a);
		JSM.AddVertexToBody (result, +b, +c, -a);
		JSM.AddVertexToBody (result, -b, -c, -a);

		JSM.AddVertexToBody (result, -c, +a, +b);
		JSM.AddVertexToBody (result, +c, +a, -b);
		JSM.AddVertexToBody (result, +c, -a, +b);
		JSM.AddVertexToBody (result, -c, -a, -b);

		JSM.AddVertexToBody (result, +a, +c, +b);
		JSM.AddVertexToBody (result, +a, -c, -b);
		JSM.AddVertexToBody (result, -a, +c, -b);
		JSM.AddVertexToBody (result, -a, -c, +b);

		JSM.AddVertexToBody (result, +b, +a, +c);
		JSM.AddVertexToBody (result, -b, +a, -c);
		JSM.AddVertexToBody (result, -b, -a, +c);
		JSM.AddVertexToBody (result, +b, -a, -c);

		JSM.AddVertexToBody (result, +c, +b, +a);
		JSM.AddVertexToBody (result, -c, -b, +a);
		JSM.AddVertexToBody (result, +c, -b, -a);
		JSM.AddVertexToBody (result, -c, +b, -a);

		JSM.AddPolygonToBody (result, [0, 6, 9]);
		JSM.AddPolygonToBody (result, [0, 9, 22]);
		JSM.AddPolygonToBody (result, [0, 17, 6]);
		JSM.AddPolygonToBody (result, [0, 22, 19]);
		JSM.AddPolygonToBody (result, [1, 4, 10]);
		JSM.AddPolygonToBody (result, [1, 10, 20]);
		JSM.AddPolygonToBody (result, [1, 18, 4]);
		JSM.AddPolygonToBody (result, [1, 20, 16]);
		JSM.AddPolygonToBody (result, [2, 5, 8]);
		JSM.AddPolygonToBody (result, [2, 8, 21]);
		JSM.AddPolygonToBody (result, [2, 16, 5]);
		JSM.AddPolygonToBody (result, [2, 21, 18]);
		JSM.AddPolygonToBody (result, [3, 7, 11]);
		JSM.AddPolygonToBody (result, [3, 11, 23]);
		JSM.AddPolygonToBody (result, [3, 19, 7]);
		JSM.AddPolygonToBody (result, [3, 23, 17]);
		JSM.AddPolygonToBody (result, [4, 13, 10]);
		JSM.AddPolygonToBody (result, [4, 18, 15]);
		JSM.AddPolygonToBody (result, [5, 14, 8]);
		JSM.AddPolygonToBody (result, [5, 16, 12]);
		JSM.AddPolygonToBody (result, [6, 12, 9]);
		JSM.AddPolygonToBody (result, [6, 17, 14]);
		JSM.AddPolygonToBody (result, [7, 15, 11]);
		JSM.AddPolygonToBody (result, [7, 19, 13]);
		JSM.AddPolygonToBody (result, [8, 14, 23]);
		JSM.AddPolygonToBody (result, [9, 12, 20]);
		JSM.AddPolygonToBody (result, [10, 13, 22]);
		JSM.AddPolygonToBody (result, [11, 15, 21]);
		JSM.AddPolygonToBody (result, [12, 16, 20]);
		JSM.AddPolygonToBody (result, [13, 19, 22]);
		JSM.AddPolygonToBody (result, [14, 17, 23]);
		JSM.AddPolygonToBody (result, [15, 18, 21]);

		JSM.AddPolygonToBody (result, [0, 19, 3, 17]);
		JSM.AddPolygonToBody (result, [1, 16, 2, 18]);
		JSM.AddPolygonToBody (result, [4, 15, 7, 13]);
		JSM.AddPolygonToBody (result, [5, 12, 6, 14]);
		JSM.AddPolygonToBody (result, [8, 23, 11, 21]);
		JSM.AddPolygonToBody (result, [9, 20, 10, 22]);

		return result;
	};

	/**
	* Function: GenerateIcosidodecahedron
	* Description: Generates an icosidodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateIcosidodecahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 0.0;
		var b = (1.0 + Math.sqrt (5.0)) / 2.0;
		var c = 1.0 / 2.0;
		var d = b / 2.0;
		var e = (1.0 + b) / 2.0;

		JSM.AddVertexToBody (result, +a, +a, +b);
		JSM.AddVertexToBody (result, +a, +a, -b);
		JSM.AddVertexToBody (result, +a, +b, +a);
		JSM.AddVertexToBody (result, +a, -b, +a);
		JSM.AddVertexToBody (result, +b, +a, +a);
		JSM.AddVertexToBody (result, -b, +a, +a);

		JSM.AddVertexToBody (result, +c, +d, +e);
		JSM.AddVertexToBody (result, +c, +d, -e);
		JSM.AddVertexToBody (result, +c, -d, +e);
		JSM.AddVertexToBody (result, -c, +d, +e);
		JSM.AddVertexToBody (result, +c, -d, -e);
		JSM.AddVertexToBody (result, -c, +d, -e);
		JSM.AddVertexToBody (result, -c, -d, +e);
		JSM.AddVertexToBody (result, -c, -d, -e);

		JSM.AddVertexToBody (result, +d, +e, +c);
		JSM.AddVertexToBody (result, +d, -e, +c);
		JSM.AddVertexToBody (result, -d, +e, +c);
		JSM.AddVertexToBody (result, +d, +e, -c);
		JSM.AddVertexToBody (result, -d, -e, +c);
		JSM.AddVertexToBody (result, +d, -e, -c);
		JSM.AddVertexToBody (result, -d, +e, -c);
		JSM.AddVertexToBody (result, -d, -e, -c);

		JSM.AddVertexToBody (result, +e, +c, +d);
		JSM.AddVertexToBody (result, -e, +c, +d);
		JSM.AddVertexToBody (result, +e, +c, -d);
		JSM.AddVertexToBody (result, +e, -c, +d);
		JSM.AddVertexToBody (result, -e, +c, -d);
		JSM.AddVertexToBody (result, -e, -c, +d);
		JSM.AddVertexToBody (result, +e, -c, -d);
		JSM.AddVertexToBody (result, -e, -c, -d);

		JSM.AddPolygonToBody (result, [0, 6, 9]);
		JSM.AddPolygonToBody (result, [0, 12, 8]);
		JSM.AddPolygonToBody (result, [1, 10, 13]);
		JSM.AddPolygonToBody (result, [1, 11, 7]);
		JSM.AddPolygonToBody (result, [2, 14, 17]);
		JSM.AddPolygonToBody (result, [2, 20, 16]);
		JSM.AddPolygonToBody (result, [3, 18, 21]);
		JSM.AddPolygonToBody (result, [3, 19, 15]);
		JSM.AddPolygonToBody (result, [4, 22, 25]);
		JSM.AddPolygonToBody (result, [4, 28, 24]);
		JSM.AddPolygonToBody (result, [5, 26, 29]);
		JSM.AddPolygonToBody (result, [5, 27, 23]);
		JSM.AddPolygonToBody (result, [6, 22, 14]);
		JSM.AddPolygonToBody (result, [7, 17, 24]);
		JSM.AddPolygonToBody (result, [8, 15, 25]);
		JSM.AddPolygonToBody (result, [9, 16, 23]);
		JSM.AddPolygonToBody (result, [10, 28, 19]);
		JSM.AddPolygonToBody (result, [11, 26, 20]);
		JSM.AddPolygonToBody (result, [12, 27, 18]);
		JSM.AddPolygonToBody (result, [13, 21, 29]);

		JSM.AddPolygonToBody (result, [0, 8, 25, 22, 6]);
		JSM.AddPolygonToBody (result, [0, 9, 23, 27, 12]);
		JSM.AddPolygonToBody (result, [1, 7, 24, 28, 10]);
		JSM.AddPolygonToBody (result, [1, 13, 29, 26, 11]);
		JSM.AddPolygonToBody (result, [2, 16, 9, 6, 14]);
		JSM.AddPolygonToBody (result, [2, 17, 7, 11, 20]);
		JSM.AddPolygonToBody (result, [3, 15, 8, 12, 18]);
		JSM.AddPolygonToBody (result, [3, 21, 13, 10, 19]);
		JSM.AddPolygonToBody (result, [4, 24, 17, 14, 22]);
		JSM.AddPolygonToBody (result, [4, 25, 15, 19, 28]);
		JSM.AddPolygonToBody (result, [5, 23, 16, 20, 26]);
		JSM.AddPolygonToBody (result, [5, 29, 21, 18, 27]);

		return result;
	};

	/**
	* Function: GenerateTruncatedDodecahedron
	* Description: Generates a truncated dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedDodecahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 0.0;
		var b = 2.0;
		var c = (1.0 + Math.sqrt (5.0)) / 2.0;
		var d = 1.0 / c;
		var e = 2.0 + c;
		var f = 2.0 * c;
		var g = Math.pow (c, 2.0);

		JSM.AddVertexToBody (result, +a, +d, +e);
		JSM.AddVertexToBody (result, +a, +d, -e);
		JSM.AddVertexToBody (result, +a, -d, +e);
		JSM.AddVertexToBody (result, +a, -d, -e);

		JSM.AddVertexToBody (result, +e, +a, +d);
		JSM.AddVertexToBody (result, -e, +a, +d);
		JSM.AddVertexToBody (result, +e, +a, -d);
		JSM.AddVertexToBody (result, -e, +a, -d);

		JSM.AddVertexToBody (result, +d, +e, +a);
		JSM.AddVertexToBody (result, +d, -e, +a);
		JSM.AddVertexToBody (result, -d, +e, +a);
		JSM.AddVertexToBody (result, -d, -e, +a);

		JSM.AddVertexToBody (result, +d, +c, +f);
		JSM.AddVertexToBody (result, +d, +c, -f);
		JSM.AddVertexToBody (result, +d, -c, +f);
		JSM.AddVertexToBody (result, -d, +c, +f);
		JSM.AddVertexToBody (result, +d, -c, -f);
		JSM.AddVertexToBody (result, -d, +c, -f);
		JSM.AddVertexToBody (result, -d, -c, +f);
		JSM.AddVertexToBody (result, -d, -c, -f);

		JSM.AddVertexToBody (result, +f, +d, +c);
		JSM.AddVertexToBody (result, +f, +d, -c);
		JSM.AddVertexToBody (result, +f, -d, +c);
		JSM.AddVertexToBody (result, -f, +d, +c);
		JSM.AddVertexToBody (result, +f, -d, -c);
		JSM.AddVertexToBody (result, -f, +d, -c);
		JSM.AddVertexToBody (result, -f, -d, +c);
		JSM.AddVertexToBody (result, -f, -d, -c);

		JSM.AddVertexToBody (result, +c, +f, +d);
		JSM.AddVertexToBody (result, +c, +f, -d);
		JSM.AddVertexToBody (result, +c, -f, +d);
		JSM.AddVertexToBody (result, -c, +f, +d);
		JSM.AddVertexToBody (result, +c, -f, -d);
		JSM.AddVertexToBody (result, -c, +f, -d);
		JSM.AddVertexToBody (result, -c, -f, +d);
		JSM.AddVertexToBody (result, -c, -f, -d);

		JSM.AddVertexToBody (result, +c, +b, +g);
		JSM.AddVertexToBody (result, +c, +b, -g);
		JSM.AddVertexToBody (result, +c, -b, +g);
		JSM.AddVertexToBody (result, -c, +b, +g);
		JSM.AddVertexToBody (result, +c, -b, -g);
		JSM.AddVertexToBody (result, -c, +b, -g);
		JSM.AddVertexToBody (result, -c, -b, +g);
		JSM.AddVertexToBody (result, -c, -b, -g);

		JSM.AddVertexToBody (result, +g, +c, +b);
		JSM.AddVertexToBody (result, +g, +c, -b);
		JSM.AddVertexToBody (result, +g, -c, +b);
		JSM.AddVertexToBody (result, -g, +c, +b);
		JSM.AddVertexToBody (result, +g, -c, -b);
		JSM.AddVertexToBody (result, -g, +c, -b);
		JSM.AddVertexToBody (result, -g, -c, +b);
		JSM.AddVertexToBody (result, -g, -c, -b);

		JSM.AddVertexToBody (result, +b, +g, +c);
		JSM.AddVertexToBody (result, +b, +g, -c);
		JSM.AddVertexToBody (result, +b, -g, +c);
		JSM.AddVertexToBody (result, -b, +g, +c);
		JSM.AddVertexToBody (result, +b, -g, -c);
		JSM.AddVertexToBody (result, -b, +g, -c);
		JSM.AddVertexToBody (result, -b, -g, +c);
		JSM.AddVertexToBody (result, -b, -g, -c);

		JSM.AddPolygonToBody (result, [0, 12, 15]);
		JSM.AddPolygonToBody (result, [1, 17, 13]);
		JSM.AddPolygonToBody (result, [2, 18, 14]);
		JSM.AddPolygonToBody (result, [3, 16, 19]);
		JSM.AddPolygonToBody (result, [4, 20, 22]);
		JSM.AddPolygonToBody (result, [5, 26, 23]);
		JSM.AddPolygonToBody (result, [6, 24, 21]);
		JSM.AddPolygonToBody (result, [7, 25, 27]);
		JSM.AddPolygonToBody (result, [8, 28, 29]);
		JSM.AddPolygonToBody (result, [9, 32, 30]);
		JSM.AddPolygonToBody (result, [10, 33, 31]);
		JSM.AddPolygonToBody (result, [11, 34, 35]);
		JSM.AddPolygonToBody (result, [36, 44, 52]);
		JSM.AddPolygonToBody (result, [37, 53, 45]);
		JSM.AddPolygonToBody (result, [38, 54, 46]);
		JSM.AddPolygonToBody (result, [39, 55, 47]);
		JSM.AddPolygonToBody (result, [40, 48, 56]);
		JSM.AddPolygonToBody (result, [41, 49, 57]);
		JSM.AddPolygonToBody (result, [42, 50, 58]);
		JSM.AddPolygonToBody (result, [43, 59, 51]);

		JSM.AddPolygonToBody (result, [0, 2, 14, 38, 46, 22, 20, 44, 36, 12]);
		JSM.AddPolygonToBody (result, [0, 15, 39, 47, 23, 26, 50, 42, 18, 2]);
		JSM.AddPolygonToBody (result, [1, 3, 19, 43, 51, 27, 25, 49, 41, 17]);
		JSM.AddPolygonToBody (result, [1, 13, 37, 45, 21, 24, 48, 40, 16, 3]);
		JSM.AddPolygonToBody (result, [4, 6, 21, 45, 53, 29, 28, 52, 44, 20]);
		JSM.AddPolygonToBody (result, [4, 22, 46, 54, 30, 32, 56, 48, 24, 6]);
		JSM.AddPolygonToBody (result, [5, 7, 27, 51, 59, 35, 34, 58, 50, 26]);
		JSM.AddPolygonToBody (result, [5, 23, 47, 55, 31, 33, 57, 49, 25, 7]);
		JSM.AddPolygonToBody (result, [8, 10, 31, 55, 39, 15, 12, 36, 52, 28]);
		JSM.AddPolygonToBody (result, [8, 29, 53, 37, 13, 17, 41, 57, 33, 10]);
		JSM.AddPolygonToBody (result, [9, 11, 35, 59, 43, 19, 16, 40, 56, 32]);
		JSM.AddPolygonToBody (result, [9, 30, 54, 38, 14, 18, 42, 58, 34, 11]);

		return result;
	};

	/**
	* Function: GenerateTruncatedIcosahedron
	* Description: Generates a truncated icosahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedIcosahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 0.0;
		var b = 1.0;
		var c = 2.0;
		var d = (1.0 + Math.sqrt (5.0)) / 2.0;
		var e = 3.0 * d;
		var f = 1.0 + 2.0 * d;
		var g = 2.0 + d;
		var h = 2.0 * d;

		JSM.AddVertexToBody (result, +a, +b, +e);
		JSM.AddVertexToBody (result, +a, +b, -e);
		JSM.AddVertexToBody (result, +a, -b, +e);
		JSM.AddVertexToBody (result, +a, -b, -e);

		JSM.AddVertexToBody (result, +b, +e, +a);
		JSM.AddVertexToBody (result, +b, -e, +a);
		JSM.AddVertexToBody (result, -b, +e, +a);
		JSM.AddVertexToBody (result, -b, -e, +a);

		JSM.AddVertexToBody (result, +e, +a, +b);
		JSM.AddVertexToBody (result, -e, +a, +b);
		JSM.AddVertexToBody (result, +e, +a, -b);
		JSM.AddVertexToBody (result, -e, +a, -b);

		JSM.AddVertexToBody (result, +c, +f, +d);
		JSM.AddVertexToBody (result, +c, +f, -d);
		JSM.AddVertexToBody (result, +c, -f, +d);
		JSM.AddVertexToBody (result, -c, +f, +d);
		JSM.AddVertexToBody (result, +c, -f, -d);
		JSM.AddVertexToBody (result, -c, +f, -d);
		JSM.AddVertexToBody (result, -c, -f, +d);
		JSM.AddVertexToBody (result, -c, -f, -d);

		JSM.AddVertexToBody (result, +f, +d, +c);
		JSM.AddVertexToBody (result, +f, -d, +c);
		JSM.AddVertexToBody (result, -f, +d, +c);
		JSM.AddVertexToBody (result, +f, +d, -c);
		JSM.AddVertexToBody (result, -f, -d, +c);
		JSM.AddVertexToBody (result, +f, -d, -c);
		JSM.AddVertexToBody (result, -f, +d, -c);
		JSM.AddVertexToBody (result, -f, -d, -c);

		JSM.AddVertexToBody (result, +d, +c, +f);
		JSM.AddVertexToBody (result, -d, +c, +f);
		JSM.AddVertexToBody (result, +d, +c, -f);
		JSM.AddVertexToBody (result, +d, -c, +f);
		JSM.AddVertexToBody (result, -d, +c, -f);
		JSM.AddVertexToBody (result, -d, -c, +f);
		JSM.AddVertexToBody (result, +d, -c, -f);
		JSM.AddVertexToBody (result, -d, -c, -f);

		JSM.AddVertexToBody (result, +b, +g, +h);
		JSM.AddVertexToBody (result, +b, +g, -h);
		JSM.AddVertexToBody (result, +b, -g, +h);
		JSM.AddVertexToBody (result, -b, +g, +h);
		JSM.AddVertexToBody (result, +b, -g, -h);
		JSM.AddVertexToBody (result, -b, +g, -h);
		JSM.AddVertexToBody (result, -b, -g, +h);
		JSM.AddVertexToBody (result, -b, -g, -h);

		JSM.AddVertexToBody (result, +g, +h, +b);
		JSM.AddVertexToBody (result, +g, -h, +b);
		JSM.AddVertexToBody (result, -g, +h, +b);
		JSM.AddVertexToBody (result, +g, +h, -b);
		JSM.AddVertexToBody (result, -g, -h, +b);
		JSM.AddVertexToBody (result, +g, -h, -b);
		JSM.AddVertexToBody (result, -g, +h, -b);
		JSM.AddVertexToBody (result, -g, -h, -b);

		JSM.AddVertexToBody (result, +h, +b, +g);
		JSM.AddVertexToBody (result, -h, +b, +g);
		JSM.AddVertexToBody (result, +h, +b, -g);
		JSM.AddVertexToBody (result, +h, -b, +g);
		JSM.AddVertexToBody (result, -h, +b, -g);
		JSM.AddVertexToBody (result, -h, -b, +g);
		JSM.AddVertexToBody (result, +h, -b, -g);
		JSM.AddVertexToBody (result, -h, -b, -g);

		JSM.AddPolygonToBody (result, [0, 28, 36, 39, 29]);
		JSM.AddPolygonToBody (result, [1, 32, 41, 37, 30]);
		JSM.AddPolygonToBody (result, [2, 33, 42, 38, 31]);
		JSM.AddPolygonToBody (result, [3, 34, 40, 43, 35]);
		JSM.AddPolygonToBody (result, [4, 12, 44, 47, 13]);
		JSM.AddPolygonToBody (result, [5, 16, 49, 45, 14]);
		JSM.AddPolygonToBody (result, [6, 17, 50, 46, 15]);
		JSM.AddPolygonToBody (result, [7, 18, 48, 51, 19]);
		JSM.AddPolygonToBody (result, [8, 20, 52, 55, 21]);
		JSM.AddPolygonToBody (result, [9, 24, 57, 53, 22]);
		JSM.AddPolygonToBody (result, [10, 25, 58, 54, 23]);
		JSM.AddPolygonToBody (result, [11, 26, 56, 59, 27]);

		JSM.AddPolygonToBody (result, [0, 2, 31, 55, 52, 28]);
		JSM.AddPolygonToBody (result, [0, 29, 53, 57, 33, 2]);
		JSM.AddPolygonToBody (result, [1, 3, 35, 59, 56, 32]);
		JSM.AddPolygonToBody (result, [1, 30, 54, 58, 34, 3]);
		JSM.AddPolygonToBody (result, [4, 6, 15, 39, 36, 12]);
		JSM.AddPolygonToBody (result, [4, 13, 37, 41, 17, 6]);
		JSM.AddPolygonToBody (result, [5, 7, 19, 43, 40, 16]);
		JSM.AddPolygonToBody (result, [5, 14, 38, 42, 18, 7]);
		JSM.AddPolygonToBody (result, [8, 10, 23, 47, 44, 20]);
		JSM.AddPolygonToBody (result, [8, 21, 45, 49, 25, 10]);
		JSM.AddPolygonToBody (result, [9, 11, 27, 51, 48, 24]);
		JSM.AddPolygonToBody (result, [9, 22, 46, 50, 26, 11]);
		JSM.AddPolygonToBody (result, [12, 36, 28, 52, 20, 44]);
		JSM.AddPolygonToBody (result, [13, 47, 23, 54, 30, 37]);
		JSM.AddPolygonToBody (result, [14, 45, 21, 55, 31, 38]);
		JSM.AddPolygonToBody (result, [15, 46, 22, 53, 29, 39]);
		JSM.AddPolygonToBody (result, [16, 40, 34, 58, 25, 49]);
		JSM.AddPolygonToBody (result, [17, 41, 32, 56, 26, 50]);
		JSM.AddPolygonToBody (result, [18, 42, 33, 57, 24, 48]);
		JSM.AddPolygonToBody (result, [19, 51, 27, 59, 35, 43]);

		return result;
	};

	/**
	* Function: GenerateRhombicosidodecahedron
	* Description: Generates a rhombicosidodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRhombicosidodecahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 0.0;
		var b = 1.0;
		var c = (1.0 + Math.sqrt (5.0)) / 2.0;
		var d = Math.pow (c, 2.0);
		var e = Math.pow (c, 3.0);
		var f = 2.0 * c;
		var g = 2.0 + c;

		JSM.AddVertexToBody (result, +b, +b, +e);
		JSM.AddVertexToBody (result, +b, +b, -e);
		JSM.AddVertexToBody (result, +b, -b, +e);
		JSM.AddVertexToBody (result, -b, +b, +e);
		JSM.AddVertexToBody (result, +b, -b, -e);
		JSM.AddVertexToBody (result, -b, +b, -e);
		JSM.AddVertexToBody (result, -b, -b, +e);
		JSM.AddVertexToBody (result, -b, -b, -e);

		JSM.AddVertexToBody (result, +e, +b, +b);
		JSM.AddVertexToBody (result, +e, +b, -b);
		JSM.AddVertexToBody (result, +e, -b, +b);
		JSM.AddVertexToBody (result, -e, +b, +b);
		JSM.AddVertexToBody (result, +e, -b, -b);
		JSM.AddVertexToBody (result, -e, +b, -b);
		JSM.AddVertexToBody (result, -e, -b, +b);
		JSM.AddVertexToBody (result, -e, -b, -b);

		JSM.AddVertexToBody (result, +b, +e, +b);
		JSM.AddVertexToBody (result, +b, +e, -b);
		JSM.AddVertexToBody (result, +b, -e, +b);
		JSM.AddVertexToBody (result, -b, +e, +b);
		JSM.AddVertexToBody (result, +b, -e, -b);
		JSM.AddVertexToBody (result, -b, +e, -b);
		JSM.AddVertexToBody (result, -b, -e, +b);
		JSM.AddVertexToBody (result, -b, -e, -b);

		JSM.AddVertexToBody (result, +d, +c, +f);
		JSM.AddVertexToBody (result, +d, +c, -f);
		JSM.AddVertexToBody (result, +d, -c, +f);
		JSM.AddVertexToBody (result, -d, +c, +f);
		JSM.AddVertexToBody (result, +d, -c, -f);
		JSM.AddVertexToBody (result, -d, +c, -f);
		JSM.AddVertexToBody (result, -d, -c, +f);
		JSM.AddVertexToBody (result, -d, -c, -f);

		JSM.AddVertexToBody (result, +f, +d, +c);
		JSM.AddVertexToBody (result, +f, +d, -c);
		JSM.AddVertexToBody (result, +f, -d, +c);
		JSM.AddVertexToBody (result, -f, +d, +c);
		JSM.AddVertexToBody (result, +f, -d, -c);
		JSM.AddVertexToBody (result, -f, +d, -c);
		JSM.AddVertexToBody (result, -f, -d, +c);
		JSM.AddVertexToBody (result, -f, -d, -c);

		JSM.AddVertexToBody (result, +c, +f, +d);
		JSM.AddVertexToBody (result, +c, +f, -d);
		JSM.AddVertexToBody (result, +c, -f, +d);
		JSM.AddVertexToBody (result, -c, +f, +d);
		JSM.AddVertexToBody (result, +c, -f, -d);
		JSM.AddVertexToBody (result, -c, +f, -d);
		JSM.AddVertexToBody (result, -c, -f, +d);
		JSM.AddVertexToBody (result, -c, -f, -d);

		JSM.AddVertexToBody (result, +g, +a, +d);
		JSM.AddVertexToBody (result, +g, +a, -d);
		JSM.AddVertexToBody (result, -g, +a, +d);
		JSM.AddVertexToBody (result, -g, +a, -d);

		JSM.AddVertexToBody (result, +d, +g, +a);
		JSM.AddVertexToBody (result, -d, +g, +a);
		JSM.AddVertexToBody (result, +d, -g, +a);
		JSM.AddVertexToBody (result, -d, -g, +a);

		JSM.AddVertexToBody (result, +a, +d, +g);
		JSM.AddVertexToBody (result, +a, -d, +g);
		JSM.AddVertexToBody (result, +a, +d, -g);
		JSM.AddVertexToBody (result, +a, -d, -g);

		JSM.AddPolygonToBody (result, [0, 56, 3]);
		JSM.AddPolygonToBody (result, [1, 5, 58]);
		JSM.AddPolygonToBody (result, [2, 6, 57]);
		JSM.AddPolygonToBody (result, [4, 59, 7]);
		JSM.AddPolygonToBody (result, [8, 48, 10]);
		JSM.AddPolygonToBody (result, [9, 12, 49]);
		JSM.AddPolygonToBody (result, [11, 14, 50]);
		JSM.AddPolygonToBody (result, [13, 51, 15]);
		JSM.AddPolygonToBody (result, [16, 52, 17]);
		JSM.AddPolygonToBody (result, [18, 20, 54]);
		JSM.AddPolygonToBody (result, [19, 21, 53]);
		JSM.AddPolygonToBody (result, [22, 55, 23]);
		JSM.AddPolygonToBody (result, [24, 32, 40]);
		JSM.AddPolygonToBody (result, [25, 41, 33]);
		JSM.AddPolygonToBody (result, [26, 42, 34]);
		JSM.AddPolygonToBody (result, [27, 43, 35]);
		JSM.AddPolygonToBody (result, [28, 36, 44]);
		JSM.AddPolygonToBody (result, [29, 37, 45]);
		JSM.AddPolygonToBody (result, [30, 38, 46]);
		JSM.AddPolygonToBody (result, [31, 47, 39]);

		JSM.AddPolygonToBody (result, [0, 3, 6, 2]);
		JSM.AddPolygonToBody (result, [0, 24, 40, 56]);
		JSM.AddPolygonToBody (result, [1, 4, 7, 5]);
		JSM.AddPolygonToBody (result, [1, 58, 41, 25]);
		JSM.AddPolygonToBody (result, [2, 57, 42, 26]);
		JSM.AddPolygonToBody (result, [3, 56, 43, 27]);
		JSM.AddPolygonToBody (result, [4, 28, 44, 59]);
		JSM.AddPolygonToBody (result, [5, 29, 45, 58]);
		JSM.AddPolygonToBody (result, [6, 30, 46, 57]);
		JSM.AddPolygonToBody (result, [7, 59, 47, 31]);
		JSM.AddPolygonToBody (result, [8, 10, 12, 9]);
		JSM.AddPolygonToBody (result, [8, 32, 24, 48]);
		JSM.AddPolygonToBody (result, [9, 49, 25, 33]);
		JSM.AddPolygonToBody (result, [10, 48, 26, 34]);
		JSM.AddPolygonToBody (result, [11, 13, 15, 14]);
		JSM.AddPolygonToBody (result, [11, 50, 27, 35]);
		JSM.AddPolygonToBody (result, [12, 36, 28, 49]);
		JSM.AddPolygonToBody (result, [13, 37, 29, 51]);
		JSM.AddPolygonToBody (result, [14, 38, 30, 50]);
		JSM.AddPolygonToBody (result, [15, 51, 31, 39]);
		JSM.AddPolygonToBody (result, [16, 17, 21, 19]);
		JSM.AddPolygonToBody (result, [16, 40, 32, 52]);
		JSM.AddPolygonToBody (result, [17, 52, 33, 41]);
		JSM.AddPolygonToBody (result, [18, 22, 23, 20]);
		JSM.AddPolygonToBody (result, [18, 54, 34, 42]);
		JSM.AddPolygonToBody (result, [19, 53, 35, 43]);
		JSM.AddPolygonToBody (result, [20, 44, 36, 54]);
		JSM.AddPolygonToBody (result, [21, 45, 37, 53]);
		JSM.AddPolygonToBody (result, [22, 46, 38, 55]);
		JSM.AddPolygonToBody (result, [23, 55, 39, 47]);

		JSM.AddPolygonToBody (result, [0, 2, 26, 48, 24]);
		JSM.AddPolygonToBody (result, [1, 25, 49, 28, 4]);
		JSM.AddPolygonToBody (result, [3, 27, 50, 30, 6]);
		JSM.AddPolygonToBody (result, [5, 7, 31, 51, 29]);
		JSM.AddPolygonToBody (result, [8, 9, 33, 52, 32]);
		JSM.AddPolygonToBody (result, [10, 34, 54, 36, 12]);
		JSM.AddPolygonToBody (result, [11, 35, 53, 37, 13]);
		JSM.AddPolygonToBody (result, [14, 15, 39, 55, 38]);
		JSM.AddPolygonToBody (result, [16, 19, 43, 56, 40]);
		JSM.AddPolygonToBody (result, [17, 41, 58, 45, 21]);
		JSM.AddPolygonToBody (result, [18, 42, 57, 46, 22]);
		JSM.AddPolygonToBody (result, [20, 23, 47, 59, 44]);

		return result;
	};

	/**
	* Function: GenerateTruncatedIcosidodecahedron
	* Description: Generates a truncated icosidodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTruncatedIcosidodecahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 2.0;
		var b = (1.0 + Math.sqrt (5.0)) / 2.0;
		var c = 1.0 / b;
		var d = 3.0 + b;
		var e = 2.0 / b;
		var f = 1 + 2.0 * b;
		var g = Math.pow (b, 2.0);
		var h = -1.0 + 3.0 * b;
		var i = -1.0 + 2.0 * b;
		var j = 2.0 + b;
		var k = 3.0;
		var l = 2.0 * b;

		JSM.AddVertexToBody (result, +c, +c, +d);
		JSM.AddVertexToBody (result, +c, +c, -d);
		JSM.AddVertexToBody (result, +c, -c, +d);
		JSM.AddVertexToBody (result, -c, +c, +d);
		JSM.AddVertexToBody (result, +c, -c, -d);
		JSM.AddVertexToBody (result, -c, +c, -d);
		JSM.AddVertexToBody (result, -c, -c, +d);
		JSM.AddVertexToBody (result, -c, -c, -d);

		JSM.AddVertexToBody (result, +c, +d, +c);
		JSM.AddVertexToBody (result, +c, -d, +c);
		JSM.AddVertexToBody (result, -c, +d, +c);
		JSM.AddVertexToBody (result, +c, +d, -c);
		JSM.AddVertexToBody (result, -c, -d, +c);
		JSM.AddVertexToBody (result, +c, -d, -c);
		JSM.AddVertexToBody (result, -c, +d, -c);
		JSM.AddVertexToBody (result, -c, -d, -c);

		JSM.AddVertexToBody (result, +d, +c, +c);
		JSM.AddVertexToBody (result, -d, +c, +c);
		JSM.AddVertexToBody (result, +d, +c, -c);
		JSM.AddVertexToBody (result, +d, -c, +c);
		JSM.AddVertexToBody (result, -d, +c, -c);
		JSM.AddVertexToBody (result, -d, -c, +c);
		JSM.AddVertexToBody (result, +d, -c, -c);
		JSM.AddVertexToBody (result, -d, -c, -c);

		JSM.AddVertexToBody (result, +e, +b, +f);
		JSM.AddVertexToBody (result, +e, +b, -f);
		JSM.AddVertexToBody (result, +e, -b, +f);
		JSM.AddVertexToBody (result, -e, +b, +f);
		JSM.AddVertexToBody (result, +e, -b, -f);
		JSM.AddVertexToBody (result, -e, +b, -f);
		JSM.AddVertexToBody (result, -e, -b, +f);
		JSM.AddVertexToBody (result, -e, -b, -f);

		JSM.AddVertexToBody (result, +b, +f, +e);
		JSM.AddVertexToBody (result, +b, -f, +e);
		JSM.AddVertexToBody (result, -b, +f, +e);
		JSM.AddVertexToBody (result, +b, +f, -e);
		JSM.AddVertexToBody (result, -b, -f, +e);
		JSM.AddVertexToBody (result, +b, -f, -e);
		JSM.AddVertexToBody (result, -b, +f, -e);
		JSM.AddVertexToBody (result, -b, -f, -e);

		JSM.AddVertexToBody (result, +f, +e, +b);
		JSM.AddVertexToBody (result, -f, +e, +b);
		JSM.AddVertexToBody (result, +f, +e, -b);
		JSM.AddVertexToBody (result, +f, -e, +b);
		JSM.AddVertexToBody (result, -f, +e, -b);
		JSM.AddVertexToBody (result, -f, -e, +b);
		JSM.AddVertexToBody (result, +f, -e, -b);
		JSM.AddVertexToBody (result, -f, -e, -b);

		JSM.AddVertexToBody (result, +c, +g, +h);
		JSM.AddVertexToBody (result, +c, +g, -h);
		JSM.AddVertexToBody (result, +c, -g, +h);
		JSM.AddVertexToBody (result, -c, +g, +h);
		JSM.AddVertexToBody (result, +c, -g, -h);
		JSM.AddVertexToBody (result, -c, +g, -h);
		JSM.AddVertexToBody (result, -c, -g, +h);
		JSM.AddVertexToBody (result, -c, -g, -h);

		JSM.AddVertexToBody (result, +g, +h, +c);
		JSM.AddVertexToBody (result, +g, -h, +c);
		JSM.AddVertexToBody (result, -g, +h, +c);
		JSM.AddVertexToBody (result, +g, +h, -c);
		JSM.AddVertexToBody (result, -g, -h, +c);
		JSM.AddVertexToBody (result, +g, -h, -c);
		JSM.AddVertexToBody (result, -g, +h, -c);
		JSM.AddVertexToBody (result, -g, -h, -c);

		JSM.AddVertexToBody (result, +h, +c, +g);
		JSM.AddVertexToBody (result, -h, +c, +g);
		JSM.AddVertexToBody (result, +h, +c, -g);
		JSM.AddVertexToBody (result, +h, -c, +g);
		JSM.AddVertexToBody (result, -h, +c, -g);
		JSM.AddVertexToBody (result, -h, -c, +g);
		JSM.AddVertexToBody (result, +h, -c, -g);
		JSM.AddVertexToBody (result, -h, -c, -g);

		JSM.AddVertexToBody (result, +i, +a, +j);
		JSM.AddVertexToBody (result, +i, +a, -j);
		JSM.AddVertexToBody (result, +i, -a, +j);
		JSM.AddVertexToBody (result, -i, +a, +j);
		JSM.AddVertexToBody (result, +i, -a, -j);
		JSM.AddVertexToBody (result, -i, +a, -j);
		JSM.AddVertexToBody (result, -i, -a, +j);
		JSM.AddVertexToBody (result, -i, -a, -j);

		JSM.AddVertexToBody (result, +a, +j, +i);
		JSM.AddVertexToBody (result, +a, -j, +i);
		JSM.AddVertexToBody (result, -a, +j, +i);
		JSM.AddVertexToBody (result, +a, +j, -i);
		JSM.AddVertexToBody (result, -a, -j, +i);
		JSM.AddVertexToBody (result, +a, -j, -i);
		JSM.AddVertexToBody (result, -a, +j, -i);
		JSM.AddVertexToBody (result, -a, -j, -i);

		JSM.AddVertexToBody (result, +j, +i, +a);
		JSM.AddVertexToBody (result, -j, +i, +a);
		JSM.AddVertexToBody (result, +j, +i, -a);
		JSM.AddVertexToBody (result, +j, -i, +a);
		JSM.AddVertexToBody (result, -j, +i, -a);
		JSM.AddVertexToBody (result, -j, -i, +a);
		JSM.AddVertexToBody (result, +j, -i, -a);
		JSM.AddVertexToBody (result, -j, -i, -a);

		JSM.AddVertexToBody (result, +b, +k, +l);
		JSM.AddVertexToBody (result, +b, +k, -l);
		JSM.AddVertexToBody (result, +b, -k, +l);
		JSM.AddVertexToBody (result, -b, +k, +l);
		JSM.AddVertexToBody (result, +b, -k, -l);
		JSM.AddVertexToBody (result, -b, +k, -l);
		JSM.AddVertexToBody (result, -b, -k, +l);
		JSM.AddVertexToBody (result, -b, -k, -l);

		JSM.AddVertexToBody (result, +k, +l, +b);
		JSM.AddVertexToBody (result, +k, -l, +b);
		JSM.AddVertexToBody (result, -k, +l, +b);
		JSM.AddVertexToBody (result, +k, +l, -b);
		JSM.AddVertexToBody (result, -k, -l, +b);
		JSM.AddVertexToBody (result, +k, -l, -b);
		JSM.AddVertexToBody (result, -k, +l, -b);
		JSM.AddVertexToBody (result, -k, -l, -b);

		JSM.AddVertexToBody (result, +l, +b, +k);
		JSM.AddVertexToBody (result, -l, +b, +k);
		JSM.AddVertexToBody (result, +l, +b, -k);
		JSM.AddVertexToBody (result, +l, -b, +k);
		JSM.AddVertexToBody (result, -l, +b, -k);
		JSM.AddVertexToBody (result, -l, -b, +k);
		JSM.AddVertexToBody (result, +l, -b, -k);
		JSM.AddVertexToBody (result, -l, -b, -k);

		JSM.AddPolygonToBody (result, [0, 3, 6, 2]);
		JSM.AddPolygonToBody (result, [1, 4, 7, 5]);
		JSM.AddPolygonToBody (result, [8, 11, 14, 10]);
		JSM.AddPolygonToBody (result, [9, 12, 15, 13]);
		JSM.AddPolygonToBody (result, [16, 19, 22, 18]);
		JSM.AddPolygonToBody (result, [17, 20, 23, 21]);
		JSM.AddPolygonToBody (result, [24, 72, 96, 48]);
		JSM.AddPolygonToBody (result, [25, 49, 97, 73]);
		JSM.AddPolygonToBody (result, [26, 50, 98, 74]);
		JSM.AddPolygonToBody (result, [27, 51, 99, 75]);
		JSM.AddPolygonToBody (result, [28, 76, 100, 52]);
		JSM.AddPolygonToBody (result, [29, 77, 101, 53]);
		JSM.AddPolygonToBody (result, [30, 78, 102, 54]);
		JSM.AddPolygonToBody (result, [31, 55, 103, 79]);
		JSM.AddPolygonToBody (result, [32, 80, 104, 56]);
		JSM.AddPolygonToBody (result, [33, 57, 105, 81]);
		JSM.AddPolygonToBody (result, [34, 58, 106, 82]);
		JSM.AddPolygonToBody (result, [35, 59, 107, 83]);
		JSM.AddPolygonToBody (result, [36, 84, 108, 60]);
		JSM.AddPolygonToBody (result, [37, 85, 109, 61]);
		JSM.AddPolygonToBody (result, [38, 86, 110, 62]);
		JSM.AddPolygonToBody (result, [39, 63, 111, 87]);
		JSM.AddPolygonToBody (result, [40, 88, 112, 64]);
		JSM.AddPolygonToBody (result, [41, 65, 113, 89]);
		JSM.AddPolygonToBody (result, [42, 66, 114, 90]);
		JSM.AddPolygonToBody (result, [43, 67, 115, 91]);
		JSM.AddPolygonToBody (result, [44, 92, 116, 68]);
		JSM.AddPolygonToBody (result, [45, 93, 117, 69]);
		JSM.AddPolygonToBody (result, [46, 94, 118, 70]);
		JSM.AddPolygonToBody (result, [47, 71, 119, 95]);

		JSM.AddPolygonToBody (result, [0, 24, 48, 51, 27, 3]);
		JSM.AddPolygonToBody (result, [1, 5, 29, 53, 49, 25]);
		JSM.AddPolygonToBody (result, [2, 6, 30, 54, 50, 26]);
		JSM.AddPolygonToBody (result, [4, 28, 52, 55, 31, 7]);
		JSM.AddPolygonToBody (result, [8, 32, 56, 59, 35, 11]);
		JSM.AddPolygonToBody (result, [9, 13, 37, 61, 57, 33]);
		JSM.AddPolygonToBody (result, [10, 14, 38, 62, 58, 34]);
		JSM.AddPolygonToBody (result, [12, 36, 60, 63, 39, 15]);
		JSM.AddPolygonToBody (result, [16, 40, 64, 67, 43, 19]);
		JSM.AddPolygonToBody (result, [17, 21, 45, 69, 65, 41]);
		JSM.AddPolygonToBody (result, [18, 22, 46, 70, 66, 42]);
		JSM.AddPolygonToBody (result, [20, 44, 68, 71, 47, 23]);
		JSM.AddPolygonToBody (result, [72, 112, 88, 104, 80, 96]);
		JSM.AddPolygonToBody (result, [73, 97, 83, 107, 90, 114]);
		JSM.AddPolygonToBody (result, [74, 98, 81, 105, 91, 115]);
		JSM.AddPolygonToBody (result, [75, 99, 82, 106, 89, 113]);
		JSM.AddPolygonToBody (result, [76, 118, 94, 109, 85, 100]);
		JSM.AddPolygonToBody (result, [78, 117, 93, 108, 84, 102]);
		JSM.AddPolygonToBody (result, [79, 103, 87, 111, 95, 119]);
		JSM.AddPolygonToBody (result, [86, 101, 77, 116, 92, 110]);

		JSM.AddPolygonToBody (result, [0, 2, 26, 74, 115, 67, 64, 112, 72, 24]);
		JSM.AddPolygonToBody (result, [1, 25, 73, 114, 66, 70, 118, 76, 28, 4]);
		JSM.AddPolygonToBody (result, [3, 27, 75, 113, 65, 69, 117, 78, 30, 6]);
		JSM.AddPolygonToBody (result, [5, 7, 31, 79, 119, 71, 68, 116, 77, 29]);
		JSM.AddPolygonToBody (result, [8, 10, 34, 82, 99, 51, 48, 96, 80, 32]);
		JSM.AddPolygonToBody (result, [9, 33, 81, 98, 50, 54, 102, 84, 36, 12]);
		JSM.AddPolygonToBody (result, [11, 35, 83, 97, 49, 53, 101, 86, 38, 14]);
		JSM.AddPolygonToBody (result, [13, 15, 39, 87, 103, 55, 52, 100, 85, 37]);
		JSM.AddPolygonToBody (result, [16, 18, 42, 90, 107, 59, 56, 104, 88, 40]);
		JSM.AddPolygonToBody (result, [17, 41, 89, 106, 58, 62, 110, 92, 44, 20]);
		JSM.AddPolygonToBody (result, [19, 43, 91, 105, 57, 61, 109, 94, 46, 22]);
		JSM.AddPolygonToBody (result, [21, 23, 47, 95, 111, 63, 60, 108, 93, 45]);

		return result;
	};

	/**
	* Function: GenerateSnubDodecahedron
	* Description: Generates a snub dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSnubDodecahedron = function ()
	{
		var result = new JSM.Body ();

		var a = 2.0;
		var b = (1.0 + Math.sqrt (5.0)) / 2.0;
		var c = Math.pow (b / 2.0 + (1.0 / 2.0) * Math.sqrt (b - (5.0 / 27.0)), 1.0 / 3.0) + Math.pow (b / 2.0 - (1.0 / 2.0) * Math.sqrt (b - (5.0 / 27.0)), 1.0 / 3.0);
		var d = c - (1.0 / c);
		var e = c * b + Math.pow (b, 2.0) + b / c;
		var f = 2.0 * d;
		var g = 2.0 * e;
		var h = d + (e / b) + b;
		var i = -(d * b) + e + (1.0 / b);
		var j = (d / b) + (e * b) - 1.0;
		var k = -(d / b) + (e * b) + 1.0;
		var l = -d + (e / b) - b;
		var m = (d * b) + e - (1.0 / b);
		var n = -(d / b) + (e * b) - 1.0;
		var o = d - (e / b) - b;
		var p = (d * b) + e + (1.0 / b);
		var q = d + (e / b) - b;
		var r = (d * b) - e + (1.0 / b);
		var s = (d / b) + (e * b) + 1.0;

		JSM.AddVertexToBody (result, +f, +a, -g);
		JSM.AddVertexToBody (result, +f, -a, +g);
		JSM.AddVertexToBody (result, -f, +a, +g);
		JSM.AddVertexToBody (result, -f, -a, -g);

		JSM.AddVertexToBody (result, +a, -g, +f);
		JSM.AddVertexToBody (result, -a, +g, +f);
		JSM.AddVertexToBody (result, +a, +g, -f);
		JSM.AddVertexToBody (result, -a, -g, -f);

		JSM.AddVertexToBody (result, -g, +f, +a);
		JSM.AddVertexToBody (result, +g, +f, -a);
		JSM.AddVertexToBody (result, +g, -f, +a);
		JSM.AddVertexToBody (result, -g, -f, -a);

		JSM.AddVertexToBody (result, +h, +i, -j);
		JSM.AddVertexToBody (result, +h, -i, +j);
		JSM.AddVertexToBody (result, -h, +i, +j);
		JSM.AddVertexToBody (result, -h, -i, -j);

		JSM.AddVertexToBody (result, +i, -j, +h);
		JSM.AddVertexToBody (result, -i, +j, +h);
		JSM.AddVertexToBody (result, +i, +j, -h);
		JSM.AddVertexToBody (result, -i, -j, -h);

		JSM.AddVertexToBody (result, -j, +h, +i);
		JSM.AddVertexToBody (result, +j, +h, -i);
		JSM.AddVertexToBody (result, +j, -h, +i);
		JSM.AddVertexToBody (result, -j, -h, -i);

		JSM.AddVertexToBody (result, +k, +l, -m);
		JSM.AddVertexToBody (result, +k, -l, +m);
		JSM.AddVertexToBody (result, -k, +l, +m);
		JSM.AddVertexToBody (result, -k, -l, -m);

		JSM.AddVertexToBody (result, +l, -m, +k);
		JSM.AddVertexToBody (result, -l, +m, +k);
		JSM.AddVertexToBody (result, +l, +m, -k);
		JSM.AddVertexToBody (result, -l, -m, -k);

		JSM.AddVertexToBody (result, -m, +k, +l);
		JSM.AddVertexToBody (result, +m, +k, -l);
		JSM.AddVertexToBody (result, +m, -k, +l);
		JSM.AddVertexToBody (result, -m, -k, -l);

		JSM.AddVertexToBody (result, +n, +o, -p);
		JSM.AddVertexToBody (result, +n, -o, +p);
		JSM.AddVertexToBody (result, -n, +o, +p);
		JSM.AddVertexToBody (result, -n, -o, -p);

		JSM.AddVertexToBody (result, +o, -p, +n);
		JSM.AddVertexToBody (result, -o, +p, +n);
		JSM.AddVertexToBody (result, +o, +p, -n);
		JSM.AddVertexToBody (result, -o, -p, -n);

		JSM.AddVertexToBody (result, -p, +n, +o);
		JSM.AddVertexToBody (result, +p, +n, -o);
		JSM.AddVertexToBody (result, +p, -n, +o);
		JSM.AddVertexToBody (result, -p, -n, -o);

		JSM.AddVertexToBody (result, +q, +r, -s);
		JSM.AddVertexToBody (result, +q, -r, +s);
		JSM.AddVertexToBody (result, -q, +r, +s);
		JSM.AddVertexToBody (result, -q, -r, -s);

		JSM.AddVertexToBody (result, +r, -s, +q);
		JSM.AddVertexToBody (result, -r, +s, +q);
		JSM.AddVertexToBody (result, +r, +s, -q);
		JSM.AddVertexToBody (result, -r, -s, -q);

		JSM.AddVertexToBody (result, -s, +q, +r);
		JSM.AddVertexToBody (result, +s, +q, -r);
		JSM.AddVertexToBody (result, +s, -q, +r);
		JSM.AddVertexToBody (result, -s, -q, -r);

		JSM.AddPolygonToBody (result, [0, 3, 51]);
		JSM.AddPolygonToBody (result, [0, 30, 12]);
		JSM.AddPolygonToBody (result, [0, 48, 3]);
		JSM.AddPolygonToBody (result, [0, 51, 30]);
		JSM.AddPolygonToBody (result, [1, 2, 50]);
		JSM.AddPolygonToBody (result, [1, 28, 13]);
		JSM.AddPolygonToBody (result, [1, 49, 2]);
		JSM.AddPolygonToBody (result, [1, 50, 28]);
		JSM.AddPolygonToBody (result, [2, 29, 14]);
		JSM.AddPolygonToBody (result, [2, 49, 29]);
		JSM.AddPolygonToBody (result, [3, 31, 15]);
		JSM.AddPolygonToBody (result, [3, 48, 31]);
		JSM.AddPolygonToBody (result, [4, 7, 55]);
		JSM.AddPolygonToBody (result, [4, 34, 16]);
		JSM.AddPolygonToBody (result, [4, 52, 7]);
		JSM.AddPolygonToBody (result, [4, 55, 34]);
		JSM.AddPolygonToBody (result, [5, 6, 54]);
		JSM.AddPolygonToBody (result, [5, 32, 17]);
		JSM.AddPolygonToBody (result, [5, 53, 6]);
		JSM.AddPolygonToBody (result, [5, 54, 32]);
		JSM.AddPolygonToBody (result, [6, 33, 18]);
		JSM.AddPolygonToBody (result, [6, 53, 33]);
		JSM.AddPolygonToBody (result, [7, 35, 19]);
		JSM.AddPolygonToBody (result, [7, 52, 35]);
		JSM.AddPolygonToBody (result, [8, 11, 59]);
		JSM.AddPolygonToBody (result, [8, 26, 20]);
		JSM.AddPolygonToBody (result, [8, 56, 11]);
		JSM.AddPolygonToBody (result, [8, 59, 26]);
		JSM.AddPolygonToBody (result, [9, 10, 58]);
		JSM.AddPolygonToBody (result, [9, 24, 21]);
		JSM.AddPolygonToBody (result, [9, 57, 10]);
		JSM.AddPolygonToBody (result, [9, 58, 24]);
		JSM.AddPolygonToBody (result, [10, 25, 22]);
		JSM.AddPolygonToBody (result, [10, 57, 25]);
		JSM.AddPolygonToBody (result, [11, 27, 23]);
		JSM.AddPolygonToBody (result, [11, 56, 27]);
		JSM.AddPolygonToBody (result, [12, 18, 21]);
		JSM.AddPolygonToBody (result, [12, 21, 24]);
		JSM.AddPolygonToBody (result, [12, 30, 18]);
		JSM.AddPolygonToBody (result, [13, 16, 22]);
		JSM.AddPolygonToBody (result, [13, 22, 25]);
		JSM.AddPolygonToBody (result, [13, 28, 16]);
		JSM.AddPolygonToBody (result, [14, 17, 20]);
		JSM.AddPolygonToBody (result, [14, 20, 26]);
		JSM.AddPolygonToBody (result, [14, 29, 17]);
		JSM.AddPolygonToBody (result, [15, 19, 23]);
		JSM.AddPolygonToBody (result, [15, 23, 27]);
		JSM.AddPolygonToBody (result, [15, 31, 19]);
		JSM.AddPolygonToBody (result, [16, 34, 22]);
		JSM.AddPolygonToBody (result, [17, 32, 20]);
		JSM.AddPolygonToBody (result, [18, 33, 21]);
		JSM.AddPolygonToBody (result, [19, 35, 23]);
		JSM.AddPolygonToBody (result, [24, 58, 36]);
		JSM.AddPolygonToBody (result, [25, 57, 37]);
		JSM.AddPolygonToBody (result, [26, 59, 38]);
		JSM.AddPolygonToBody (result, [27, 56, 39]);
		JSM.AddPolygonToBody (result, [28, 50, 40]);
		JSM.AddPolygonToBody (result, [29, 49, 41]);
		JSM.AddPolygonToBody (result, [30, 51, 42]);
		JSM.AddPolygonToBody (result, [31, 48, 43]);
		JSM.AddPolygonToBody (result, [32, 54, 44]);
		JSM.AddPolygonToBody (result, [33, 53, 45]);
		JSM.AddPolygonToBody (result, [34, 55, 46]);
		JSM.AddPolygonToBody (result, [35, 52, 47]);
		JSM.AddPolygonToBody (result, [36, 43, 48]);
		JSM.AddPolygonToBody (result, [36, 46, 43]);
		JSM.AddPolygonToBody (result, [36, 58, 46]);
		JSM.AddPolygonToBody (result, [37, 41, 49]);
		JSM.AddPolygonToBody (result, [37, 45, 41]);
		JSM.AddPolygonToBody (result, [37, 57, 45]);
		JSM.AddPolygonToBody (result, [38, 40, 50]);
		JSM.AddPolygonToBody (result, [38, 47, 40]);
		JSM.AddPolygonToBody (result, [38, 59, 47]);
		JSM.AddPolygonToBody (result, [39, 42, 51]);
		JSM.AddPolygonToBody (result, [39, 44, 42]);
		JSM.AddPolygonToBody (result, [39, 56, 44]);
		JSM.AddPolygonToBody (result, [40, 47, 52]);
		JSM.AddPolygonToBody (result, [41, 45, 53]);
		JSM.AddPolygonToBody (result, [42, 44, 54]);
		JSM.AddPolygonToBody (result, [43, 46, 55]);

		JSM.AddPolygonToBody (result, [0, 12, 24, 36, 48]);
		JSM.AddPolygonToBody (result, [1, 13, 25, 37, 49]);
		JSM.AddPolygonToBody (result, [2, 14, 26, 38, 50]);
		JSM.AddPolygonToBody (result, [3, 15, 27, 39, 51]);
		JSM.AddPolygonToBody (result, [4, 16, 28, 40, 52]);
		JSM.AddPolygonToBody (result, [5, 17, 29, 41, 53]);
		JSM.AddPolygonToBody (result, [6, 18, 30, 42, 54]);
		JSM.AddPolygonToBody (result, [7, 19, 31, 43, 55]);
		JSM.AddPolygonToBody (result, [8, 20, 32, 44, 56]);
		JSM.AddPolygonToBody (result, [9, 21, 33, 45, 57]);
		JSM.AddPolygonToBody (result, [10, 22, 34, 46, 58]);
		JSM.AddPolygonToBody (result, [11, 23, 35, 47, 59]);

		return result;
	};

	/**
	* Function: AddCumulatedPolygonToBody
	* Description: Adds polygons to a body by cumulating the original polygons vertex index array.
	* Parameters:
	*	body {Body} the body
	*	vertices {integer[*]} the vertices of the original polygon
	*	height {number} the height of the cumulation
	*/
	JSM.AddCumulatedPolygonToBody = function (body, vertices, height)
	{
		function CalculatePolygonCentroidAndNormal (vertices, centroidCoord, normalVector)
		{
			var vertexCoords = [];
			
			var i;
			for (i = 0; i < vertices.length; i++) {
				vertexCoords.push (body.GetVertexPosition (vertices[i]));
			}
			
			var centroid = JSM.CalculateCentroid (vertexCoords);
			var normal = JSM.CalculateNormal (vertexCoords);

			centroidCoord.Set (centroid.x, centroid.y, centroid.z);
			normalVector.Set (normal.x, normal.y, normal.z);
		}

		var centroidCoord = new JSM.Coord (0.0, 0.0, 0.0);
		var normalVector = new JSM.Vector (0.0, 0.0, 0.0);
		CalculatePolygonCentroidAndNormal (vertices, centroidCoord, normalVector);
		centroidCoord.Offset (normalVector, height);
		
		var centroid = body.VertexCount ();
		JSM.AddVertexToBody (body, centroidCoord.x, centroidCoord.y, centroidCoord.z);

		var count = vertices.length;

		var i, curr, next;
		for (i = 0; i < count; i++) {
			curr = vertices[i];
			next = vertices [i < count - 1 ? i + 1 : 0];
			JSM.AddPolygonToBody (body, [curr, next, centroid]);
		}
	};

	/**
	* Function: GenerateCumulatedTetrahedron
	* Description: Generates a cumulated tetrahedron.
	* Parameters:
	*	pyramidUnitHeight {number} the unit height of pyramids
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCumulatedTetrahedron = function (pyramidUnitHeight)
	{
		var result = new JSM.Body ();

		var a = 1.0;

		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, +a, +a)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, -a, +a)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (-a, +a, -a)));
		result.AddVertex (new JSM.BodyVertex (new JSM.Coord (+a, -a, -a)));

		var edgeLength = 2.0 * Math.sqrt (2.0);
		var height = edgeLength * pyramidUnitHeight;
		
		JSM.AddCumulatedPolygonToBody (result, [0, 1, 3], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 2, 1], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 3, 2], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 2, 3], height);

		return result;
	};

	/**
	* Function: GenerateCumulatedHexahedron
	* Description: Generates a cumulated hexahedron.
	* Parameters:
	*	pyramidUnitHeight {number} the unit height of pyramids
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCumulatedHexahedron = function (pyramidUnitHeight)
	{
		var result = new JSM.Body ();

		var a = 1.0;

		JSM.AddVertexToBody (result, +a, +a, +a);
		JSM.AddVertexToBody (result, +a, +a, -a);
		JSM.AddVertexToBody (result, +a, -a, +a);
		JSM.AddVertexToBody (result, -a, +a, +a);
		JSM.AddVertexToBody (result, +a, -a, -a);
		JSM.AddVertexToBody (result, -a, +a, -a);
		JSM.AddVertexToBody (result, -a, -a, +a);
		JSM.AddVertexToBody (result, -a, -a, -a);

		var edgeLength = 2.0;
		var height = edgeLength * pyramidUnitHeight;
		
		JSM.AddCumulatedPolygonToBody (result, [0, 1, 5, 3], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 2, 4, 1], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 3, 6, 2], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 4, 7, 5], height);
		JSM.AddCumulatedPolygonToBody (result, [2, 6, 7, 4], height);
		JSM.AddCumulatedPolygonToBody (result, [3, 5, 7, 6], height);

		return result;
	};

	/**
	* Function: GenerateCumulatedOctahedron
	* Description: Generates a cumulated octahedron.
	* Parameters:
	*	pyramidUnitHeight {number} the unit height of pyramids
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCumulatedOctahedron = function (pyramidUnitHeight)
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;

		JSM.AddVertexToBody (result, +a, +b, +b);
		JSM.AddVertexToBody (result, -a, +b, +b);
		JSM.AddVertexToBody (result, +b, +a, +b);
		JSM.AddVertexToBody (result, +b, -a, +b);
		JSM.AddVertexToBody (result, +b, +b, +a);
		JSM.AddVertexToBody (result, +b, +b, -a);

		var edgeLength = Math.sqrt (2.0);
		var height = edgeLength * pyramidUnitHeight;
		
		JSM.AddCumulatedPolygonToBody (result, [0, 2, 4], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 3, 5], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 4, 3], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 5, 2], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 2, 5], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 3, 4], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 4, 2], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 5, 3], height);

		return result;
	};

	/**
	* Function: GenerateCumulatedDodecahedron
	* Description: Generates a cumulated dodecahedron.
	* Parameters:
	*	pyramidUnitHeight {number} the unit height of pyramids
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCumulatedDodecahedron = function (pyramidUnitHeight)
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;
		var c = (1.0 + Math.sqrt (5.0)) / 2.0;
		var d = 1.0 / c;

		JSM.AddVertexToBody (result, +a, +a, +a);
		JSM.AddVertexToBody (result, +a, +a, -a);
		JSM.AddVertexToBody (result, +a, -a, +a);
		JSM.AddVertexToBody (result, -a, +a, +a);
		JSM.AddVertexToBody (result, +a, -a, -a);
		JSM.AddVertexToBody (result, -a, +a, -a);
		JSM.AddVertexToBody (result, -a, -a, +a);
		JSM.AddVertexToBody (result, -a, -a, -a);

		JSM.AddVertexToBody (result, +b, +d, +c);
		JSM.AddVertexToBody (result, +b, +d, -c);
		JSM.AddVertexToBody (result, +b, -d, +c);
		JSM.AddVertexToBody (result, +b, -d, -c);

		JSM.AddVertexToBody (result, +d, +c, +b);
		JSM.AddVertexToBody (result, +d, -c, +b);
		JSM.AddVertexToBody (result, -d, +c, +b);
		JSM.AddVertexToBody (result, -d, -c, +b);

		JSM.AddVertexToBody (result, +c, +b, +d);
		JSM.AddVertexToBody (result, -c, +b, +d);
		JSM.AddVertexToBody (result, +c, +b, -d);
		JSM.AddVertexToBody (result, -c, +b, -d);

		var edgeLength = Math.sqrt (5.0) - 1.0;
		var height = edgeLength * pyramidUnitHeight;
		
		JSM.AddCumulatedPolygonToBody (result, [0, 8, 10, 2, 16], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 16, 18, 1, 12], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 12, 14, 3, 8], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 9, 5, 14, 12], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 18, 4, 11, 9], height);
		JSM.AddCumulatedPolygonToBody (result, [2, 10, 6, 15, 13], height);
		JSM.AddCumulatedPolygonToBody (result, [2, 13, 4, 18, 16], height);
		JSM.AddCumulatedPolygonToBody (result, [3, 14, 5, 19, 17], height);
		JSM.AddCumulatedPolygonToBody (result, [3, 17, 6, 10, 8], height);
		JSM.AddCumulatedPolygonToBody (result, [4, 13, 15, 7, 11], height);
		JSM.AddCumulatedPolygonToBody (result, [5, 9, 11, 7, 19], height);
		JSM.AddCumulatedPolygonToBody (result, [6, 17, 19, 7, 15], height);

		return result;
	};

	/**
	* Function: GenerateCumulatedIcosahedron
	* Description: Generates a cumulated icosahedron.
	* Parameters:
	*	pyramidUnitHeight {number} the unit height of pyramids
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateCumulatedIcosahedron = function (pyramidUnitHeight)
	{
		var result = new JSM.Body ();

		var a = 1.0;
		var b = 0.0;
		var c = (1.0 + Math.sqrt (5.0)) / 2.0;

		JSM.AddVertexToBody (result, +b, +a, +c);
		JSM.AddVertexToBody (result, +b, +a, -c);
		JSM.AddVertexToBody (result, +b, -a, +c);
		JSM.AddVertexToBody (result, +b, -a, -c);

		JSM.AddVertexToBody (result, +a, +c, +b);
		JSM.AddVertexToBody (result, +a, -c, +b);
		JSM.AddVertexToBody (result, -a, +c, +b);
		JSM.AddVertexToBody (result, -a, -c, +b);

		JSM.AddVertexToBody (result, +c, +b, +a);
		JSM.AddVertexToBody (result, -c, +b, +a);
		JSM.AddVertexToBody (result, +c, +b, -a);
		JSM.AddVertexToBody (result, -c, +b, -a);

		var edgeLength = 2;
		var height = edgeLength * pyramidUnitHeight;

		JSM.AddCumulatedPolygonToBody (result, [0, 2, 8], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 4, 6], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 6, 9], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 8, 4], height);
		JSM.AddCumulatedPolygonToBody (result, [0, 9, 2], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 3, 11], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 4, 10], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 6, 4], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 10, 3], height);
		JSM.AddCumulatedPolygonToBody (result, [1, 11, 6], height);
		JSM.AddCumulatedPolygonToBody (result, [2, 5, 8], height);
		JSM.AddCumulatedPolygonToBody (result, [2, 7, 5], height);
		JSM.AddCumulatedPolygonToBody (result, [2, 9, 7], height);
		JSM.AddCumulatedPolygonToBody (result, [3, 5, 7], height);
		JSM.AddCumulatedPolygonToBody (result, [3, 7, 11], height);
		JSM.AddCumulatedPolygonToBody (result, [3, 10, 5], height);
		JSM.AddCumulatedPolygonToBody (result, [4, 8, 10], height);
		JSM.AddCumulatedPolygonToBody (result, [6, 11, 9], height);
		JSM.AddCumulatedPolygonToBody (result, [5, 10, 8], height);
		JSM.AddCumulatedPolygonToBody (result, [7, 9, 11], height);

		return result;
	};

	/**
	* Function: GenerateTetrakisHexahedron
	* Description: Generates a tetrakis hexahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTetrakisHexahedron = function ()
	{
		var pyramidUnitHeight = 1.0 / 4.0;
		return JSM.GenerateCumulatedHexahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateRhombicDodecahedron
	* Description: Generates a rhombic dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateRhombicDodecahedron = function ()
	{
		var pyramidUnitHeight = 1.0 / 2.0;
		return JSM.GenerateCumulatedHexahedron (pyramidUnitHeight);
	};

	/**
	* Function: GeneratePentakisDodecahedron
	* Description: Generates a pentakis dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GeneratePentakisDodecahedron = function ()
	{
		var pyramidUnitHeight = Math.sqrt ((65.0 + 22.0 * Math.sqrt (5.0)) / 5.0) / 19.0;
		return JSM.GenerateCumulatedDodecahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateSmallStellatedDodecahedron
	* Description: Generates a small stellated dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSmallStellatedDodecahedron = function ()
	{
		var pyramidUnitHeight = Math.sqrt ((5.0 + 2.0 * Math.sqrt (5.0)) / 5.0);
		return JSM.GenerateCumulatedDodecahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateGreatDodecahedron
	* Description: Generates a great dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateGreatDodecahedron = function ()
	{
		var pyramidUnitHeight = (Math.sqrt (3.0) * (Math.sqrt (5.0) - 3.0)) / 6.0;
		return JSM.GenerateCumulatedIcosahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateSmallTriambicIcosahedron
	* Description: Generates a small triambic icosahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSmallTriambicIcosahedron = function ()
	{
		var pyramidUnitHeight = Math.sqrt (15.0) / 15.0;
		return JSM.GenerateCumulatedIcosahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateGreatStellatedDodecahedron
	* Description: Generates a great stellated dodecahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateGreatStellatedDodecahedron = function ()
	{
		var pyramidUnitHeight = (Math.sqrt (3.0) * (3.0 + Math.sqrt (5.0))) / 6.0;
		return JSM.GenerateCumulatedIcosahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateSmallTriakisOctahedron
	* Description: Generates a small triakis octahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSmallTriakisOctahedron = function ()
	{
		var pyramidUnitHeight = Math.sqrt (3.0) - 2.0 * Math.sqrt (6.0) / 3.0;
		return JSM.GenerateCumulatedOctahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateStellaOctangula
	* Description: Generates a stella octangula.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateStellaOctangula = function ()
	{
		var pyramidUnitHeight = Math.sqrt (6.0) / 3.0;
		return JSM.GenerateCumulatedOctahedron (pyramidUnitHeight);
	};

	/**
	* Function: GenerateTriakisTetrahedron
	* Description: Generates a triakis tetrahedron.
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateTriakisTetrahedron = function ()
	{
		var pyramidUnitHeight = Math.sqrt (6.0) / 15.0;
		return JSM.GenerateCumulatedTetrahedron (pyramidUnitHeight);
	};

	return JSM;
});

define('skylark-jsmodeler/extras/extgenerator',["../core/jsm"],function(JSM){
	/**
	* Class: LegoDimensions
	* Description: Class that contains lego brick dimensions.
	*/
	JSM.LegoDimensions = function ()
	{
		this.legoWidth = 0.78;
		this.legoSmallHeight = 0.32;
		this.legoLargeHeight = 0.96;
		this.legoWallWidth = 0.16;
		this.legoCylinderWidth = 0.5;
		this.legoCylinderHeight = 0.17;
		this.legoBottomSmallCylinderWidth = 0.3;
		this.legoBottomLargeCylinderWidth = 0.6;
		this.legoBottomLargeCylinderWallWidth = 0.1;
	};

	/**
	* Function: GenerateLegoBrick
	* Description: Generates a lego brick.
	* Parameters:
	*	rows {integer} the row count
	*	columns {integer} the columns count
	*	isLarge {boolean} the brick is large
	*	hasTopCylinders {boolean} the brick has top cylinders
	*	hasBottomCylinders {boolean} the brick has bottom cylinders
	*	segmentation {integer} the segmentation of cylinders
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateLegoBrick = function (rows, columns, isLarge, hasTopCylinders, hasBottomCylinders, segmentation, isCurved)
	{
		function OffsetBody (body, offset)
		{
			var i, vertex;
			for (i = 0; i < body.VertexCount (); i++) {
				vertex = body.GetVertex (i);
				vertex.position = JSM.CoordAdd (vertex.position, offset);
			}
		}
		
		var legoDimensions = new JSM.LegoDimensions ();

		var normal = new JSM.Vector (0.0, 0.0, 1.0);
		var unitWidth = legoDimensions.legoWidth;
		var unitHeight = legoDimensions.legoLargeHeight;
		if (!isLarge) {
			unitHeight = legoDimensions.legoSmallHeight;
		}
		var wallWidth = legoDimensions.legoWallWidth;
		var topCylinderWidth = legoDimensions.legoCylinderWidth;
		var topCylinderHeight = legoDimensions.legoCylinderHeight;
		var bottomSmallCylinderWidth = legoDimensions.legoBottomSmallCylinderWidth;
		var bottomLargeCylinderWidth = legoDimensions.legoBottomLargeCylinderWidth;
		var bottomLargeCylinderWallWidth = legoDimensions.legoBottomLargeCylinderWallWidth;

		var basePolygon = [];
		basePolygon.push (new JSM.Coord (0.0, 0.0, 0.0));
		basePolygon.push (new JSM.Coord (unitWidth * rows, 0.0, 0.0));
		basePolygon.push (new JSM.Coord (unitWidth * rows, unitWidth * columns, 0.0));
		basePolygon.push (new JSM.Coord (0.0, unitWidth * columns, 0.0));

		var result = new JSM.Body ();
		
		var walls = JSM.GeneratePrismShell (basePolygon, normal, unitHeight - wallWidth, wallWidth, true);
		result.Merge (walls);
			
		var i, j;
		for (i = 0; i < 4; i++) {
			basePolygon[i].z = unitHeight - wallWidth;
		}
		
		var top = JSM.GeneratePrism (basePolygon, normal, wallWidth, true, null);
		result.Merge (top);
		
		var cylinderCenter, cylinder;
		if (hasTopCylinders) {
			for (i = 0; i < rows; i++) {
				for (j = 0; j < columns; j++) {
					cylinderCenter = new JSM.Coord (unitWidth * i + unitWidth / 2.0, unitWidth * j + unitWidth / 2.0, unitHeight + topCylinderHeight / 2.0);
					cylinder = JSM.GenerateCylinder (topCylinderWidth / 2.0, topCylinderHeight, segmentation, true, isCurved);
					OffsetBody (cylinder, cylinderCenter);
					result.Merge (cylinder);
				}
			}
		}
		
		if (hasBottomCylinders) {
			var circle, bigger, columnWise;
			if ((rows === 1 && columns > 1) || (columns === 1 && rows > 1)) {
				bigger = columns;
				columnWise = true;
				if (rows > columns) {
					bigger = rows;
					columnWise = false;
				}
				for (i = 0; i < bigger - 1; i++) {
					if (columnWise) {
						cylinderCenter = new JSM.Coord (unitWidth / 2.0, unitWidth * (i + 1), (unitHeight - wallWidth) / 2.0);
					} else {
						cylinderCenter = new JSM.Coord (unitWidth * (i + 1), unitWidth / 2.0, (unitHeight - wallWidth) / 2.0);
					}
					cylinder = JSM.GenerateCylinder (bottomSmallCylinderWidth / 2.0, unitHeight - wallWidth, segmentation, true, isCurved);
					OffsetBody (cylinder, cylinderCenter);
					result.Merge (cylinder);
				}
			} else if (rows > 1 && columns > 1) {
				for (i = 0; i < rows - 1; i++) {
					for (j = 0; j < columns - 1; j++) {
						circle = [];
						cylinderCenter = new JSM.Coord (unitWidth * (i + 1), unitWidth * (j + 1), (unitHeight - wallWidth) / 2.0);
						cylinder = JSM.GenerateCylinderShell (bottomLargeCylinderWidth / 2.0, unitHeight - wallWidth, bottomLargeCylinderWallWidth, segmentation, true, isCurved);
						OffsetBody (cylinder, cylinderCenter);
						result.Merge (cylinder);
					}
				}
			}
		}

		result.SetCubicTextureProjection (new JSM.Coord (0.0, 0.0, 0.0), new JSM.Coord (1.0, 0.0, 0.0), new JSM.Coord (0.0, 1.0, 0.0), new JSM.Coord (0.0, 0.0, 1.0));
		return result;
	};

	/**
	* Function: GenerateConvexHullBody
	* Description: Generates a convex hull body from the given coordinates.
	* Parameters:
	*	coord {Coord[*]} the coordinates
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateConvexHullBody = function (coords)
	{
		var result = new JSM.Body ();
		var convexHull = JSM.ConvexHull3D (coords);
		
		var oldToNewIndexTable = {};
		var i, j, current, index;
		for (i = 0; i < convexHull.length; i++) {
			current = convexHull[i];
			for (j = 0; j < current.length; j++) {
				index = current[j];
				if (!(index in oldToNewIndexTable)) {
					oldToNewIndexTable[index] = result.VertexCount ();
					result.AddVertex (new JSM.BodyVertex (coords[index]));
				}
			}
		}
		
		var newPolygon;
		for (i = 0; i < convexHull.length; i++) {
			current = convexHull[i];
			newPolygon = [];
			for (j = 0; j < current.length; j++) {
				index = current[j];
				newPolygon.push (oldToNewIndexTable[index]);
			}
			result.AddPolygon (new JSM.BodyPolygon (newPolygon));
		}

		return result;
	};

	/**
	* Function: GenerateSuperShape
	* Description: Generates a supershape.
	* Parameters:
	*	parameters {12 numbers} the supershape parameters
	*	segmentation {integer} the segmentation
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSuperShape = function (	aLon, bLon, mLon, n1Lon, n2Lon, n3Lon,
										aLat, bLat, mLat, n1Lat, n2Lat, n3Lat,
										segmentation, isCurved)
	{
		function CartesianToSpherical (coord)
		{
			var radius = Math.sqrt (coord.x * coord.x + coord.y * coord.y + coord.z * coord.z);
			var phi = Math.asin (coord.z / radius);
			var theta = Math.atan2 (coord.y, coord.x);
			return [radius, phi, theta];
		}

		function CalculateSuperFormula (p, a, b, m, n1, n2, n3)
		{
			var abs1 = Math.abs (Math.cos (m * p / 4.0) / a);
			var abs2 = Math.abs (Math.sin (m * p / 4.0) / b);
			return Math.pow (Math.pow (abs1, n2) + Math.pow (abs2, n3), -1.0 / n1);
		}

		function CalculateSuperFormulaCoordinate (phi, theta)
		{
			var coord = new JSM.Coord (0.0, 0.0, 0.0);
			var rPhi = CalculateSuperFormula (phi, aLat, bLat, mLat, n1Lat, n2Lat, n3Lat);
			var rTheta = CalculateSuperFormula (theta, aLon, bLon, mLon, n1Lon, n2Lon, n3Lon);
			coord.x = rTheta * Math.cos (theta) * rPhi * Math.cos (phi);
			coord.y = rTheta * Math.sin (theta) * rPhi * Math.cos (phi);
			coord.z = rPhi * Math.sin (phi);
			return coord;
		}

		var result = JSM.GenerateSphere (1.0, segmentation, isCurved);

		var i, vertex, coord, spherical, newCoord;
		for (i = 0; i < result.VertexCount (); i++) {
			vertex = result.GetVertex (i);
			coord = vertex.position;
			spherical = CartesianToSpherical (coord);
			newCoord = CalculateSuperFormulaCoordinate (spherical[1], spherical[2]);
			vertex.SetPosition (newCoord);
		}
		
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/extras/subdivision',["../core/jsm"],function(JSM){
	/**
	* Function: CatmullClarkSubdivisionOneIteration
	* Description: Runs one iteration of Catmull-Clark subdivision on a body.
	* Parameters:
	*	body {Body} the body
	* Returns:
	*	{Body} the result
	*/
	JSM.CatmullClarkSubdivisionOneIteration = function (body)
	{
		function AddOriginalVertices (body, result, adjacencyInfo)
		{
			var i, vertCoord;
			for (i = 0; i < adjacencyInfo.verts.length; i++) {
				vertCoord = body.GetVertexPosition (i);
				result.AddVertex (new JSM.BodyVertex (vertCoord.Clone ()));
			}
		}

		function AddPolygonVertices (body, result, adjacencyInfo, pgonVertices)
		{
			var i, j, pgon, vertCoord, pgonCoord;
			for (i = 0; i < adjacencyInfo.pgons.length; i++) {
				pgon = adjacencyInfo.pgons[i];
				pgonCoord = new JSM.Coord (0.0, 0.0, 0.0);
				for (j = 0; j < pgon.verts.length; j++) {
					vertCoord = body.GetVertexPosition (pgon.verts[j]);
					pgonCoord = JSM.CoordAdd (pgonCoord, vertCoord);
				}

				pgonCoord.MultiplyScalar (1.0 / pgon.verts.length);
				pgonVertices.push (result.AddVertex (new JSM.BodyVertex (pgonCoord)));
			}
		}
		
		function AddEdgeVertices (body, result, adjacencyInfo, pgonVertices, edgeVertices)
		{
			var i, j, edge, edgeCoord1, edgeCoord2, edgeCoord, pgonIndex, pgonCoord;
			for (i = 0; i < adjacencyInfo.edges.length; i++) {
				edge = adjacencyInfo.edges[i];
				edgeCoord1 = body.GetVertexPosition (edge.vert1);
				edgeCoord2 = body.GetVertexPosition (edge.vert2);
				if (adjacencyInfo.IsContourEdge (edge)) {
					edgeCoord = JSM.MidCoord (edgeCoord1, edgeCoord2);
				} else {
					edgeCoord = JSM.CoordAdd (edgeCoord1, edgeCoord2);
					for (j = 0; j < 2; j++) {
						pgonIndex = (j === 0 ? edge.pgon1 : edge.pgon2);
						pgonCoord = result.GetVertexPosition (pgonVertices[pgonIndex]);
						edgeCoord = JSM.CoordAdd (edgeCoord, pgonCoord);
					}
					edgeCoord.MultiplyScalar (1.0 / 4.0);
				}
				edgeVertices.push (result.AddVertex (new JSM.BodyVertex (edgeCoord)));
			}
		}

		function MoveOriginalVertices (body, result, adjacencyInfo, pgonVertices)
		{
			function MoveContourVertex (newVertCoord, vertCoord)
			{
				vertCoord.x = newVertCoord.x;
				vertCoord.y = newVertCoord.y;
				vertCoord.z = newVertCoord.z;
			}		
			
			function MoveVertex (pgonAverage, edgeAverage, vertEdgeCount, vertCoord)
			{
				vertCoord.x = (pgonAverage.x + 2.0 * edgeAverage.x + (vertEdgeCount - 3) * vertCoord.x) / vertEdgeCount;
				vertCoord.y = (pgonAverage.y + 2.0 * edgeAverage.y + (vertEdgeCount - 3) * vertCoord.y) / vertEdgeCount;
				vertCoord.z = (pgonAverage.z + 2.0 * edgeAverage.z + (vertEdgeCount - 3) * vertCoord.z) / vertEdgeCount;
			}
		
			var edgeMidCoords = [];
			
			var edge, edgeCoord;
			var i, j;
			for (i = 0; i < adjacencyInfo.edges.length; i++) {
				edge = adjacencyInfo.edges[i];
				edgeCoord = JSM.MidCoord (body.GetVertexPosition (edge.vert1), body.GetVertexPosition (edge.vert2));
				edgeMidCoords.push (edgeCoord);
			}
		
			var vert, pgon, vertCoord, currentVertCoord;
			var pgonAverage, edgeAverage, edgeCountForAverage;
			for (i = 0; i < adjacencyInfo.verts.length; i++) {
				vert = adjacencyInfo.verts[i];
				vertCoord = result.GetVertexPosition (i);
				if (adjacencyInfo.IsContourVertex (vert)) {
					edgeCountForAverage = 0;
					edgeAverage = new JSM.Coord (0.0, 0.0, 0.0);
					for (j = 0; j < vert.edges.length; j++) {
						edge = vert.edges[j];
						if (adjacencyInfo.IsContourEdge (adjacencyInfo.edges[edge])) {
							edgeCoord = edgeMidCoords [vert.edges[j]];
							edgeAverage.Add (edgeCoord);
							edgeCountForAverage++;
						}
					}
					edgeAverage.Add (vertCoord);
					edgeCountForAverage++;
					edgeAverage.MultiplyScalar (1.0 / edgeCountForAverage);
					MoveContourVertex (edgeAverage, vertCoord);
				} else {
					pgonAverage = new JSM.Coord (0.0, 0.0, 0.0);
					edgeAverage = new JSM.Coord (0.0, 0.0, 0.0);
					
					for (j = 0; j < vert.pgons.length; j++) {
						pgon = vert.pgons[j];
						currentVertCoord = result.GetVertexPosition (pgonVertices[pgon]);
						pgonAverage.Add (currentVertCoord);
					}
					pgonAverage.MultiplyScalar (1.0 / vert.pgons.length);

					for (j = 0; j < vert.edges.length; j++) {
						edge = vert.edges[j];
						edgeCoord = edgeMidCoords [edge];
						edgeAverage.Add (edgeCoord);
					}
					edgeAverage.MultiplyScalar (1.0 / vert.edges.length);
					MoveVertex (pgonAverage, edgeAverage, vert.edges.length, vertCoord);
				}
			}
		}
		
		function AddNewPolygons (body, result, adjacencyInfo, pgonVertices, edgeVertices)
		{
			var edgeCount, currentEdge, nextEdge;
			var centroid, currentEdgeVertex, originalVertex, nextEdgeVertex;
			var polygon, oldPolygon;
			var i, j, pgon;
			for (i = 0; i < adjacencyInfo.pgons.length; i++) {
				pgon = adjacencyInfo.pgons[i];
				edgeCount = pgon.verts.length;
				for (j = 0; j < edgeCount; j++) {
					currentEdge = pgon.pedges[j];
					nextEdge = pgon.pedges[(j + 1) % edgeCount];

					centroid = pgonVertices[i];
					currentEdgeVertex = edgeVertices[currentEdge.index];
					originalVertex = adjacencyInfo.GetPolyEdgeStartVertex (nextEdge);
					nextEdgeVertex = edgeVertices[nextEdge.index];
					
					polygon = new JSM.BodyPolygon ([centroid, currentEdgeVertex, originalVertex, nextEdgeVertex]);
					oldPolygon = body.GetPolygon (i);
					polygon.material = oldPolygon.material;
					polygon.curved = oldPolygon.curved;
					result.AddPolygon (polygon);
				}
			}
		}

		var result = new JSM.Body ();
		var adjacencyInfo = new JSM.AdjacencyInfo (body);

		var pgonVertices = [];
		var edgeVertices = [];

		AddOriginalVertices (body, result, adjacencyInfo);
		AddPolygonVertices (body, result, adjacencyInfo, pgonVertices);
		AddEdgeVertices (body, result, adjacencyInfo, pgonVertices, edgeVertices);

		MoveOriginalVertices (body, result, adjacencyInfo, pgonVertices);
		AddNewPolygons (body, result, adjacencyInfo, pgonVertices, edgeVertices);
		
		return result;
	};

	/**
	* Function: CatmullClarkSubdivision
	* Description: Runs multiple iterations of Catmull-Clark subdivision on a body.
	* Parameters:
	*	body {Body} the body
	*	iterations {integer} the iteration number
	* Returns:
	*	{Body} the result
	*/
	JSM.CatmullClarkSubdivision = function (body, iterations)
	{
		var result = body;
		
		var i;
		for (i = 0; i < iterations; i++) {
			result = JSM.CatmullClarkSubdivisionOneIteration (result);
		}
		
		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/extras/csg',["../core/jsm"],function(JSM){
	/**
	* Function: BooleanOperation
	* Description: Makes a boolean operation on the given bodies.
	* Parameters:
	*	operation {string} the operation ('Union', 'Difference', or 'Intersection')
	*	aBody {Body} the first body
	*	bBody {Body} the second body
	* Returns:
	*	{Body} the result
	*/
	JSM.BooleanOperation = function (operation, aBody, bBody)
	{
		function AddPolygonToBody (polygon, body, octree, reversed)
		{
			function AddBodyVertex (coord, octree)
			{
				var merge = false;
				if (merge) {
					var index = octree.FindCoord (coord);
					if (index == -1) {
						index = body.AddVertex (new JSM.BodyVertex (coord));
						octree.AddCoord (coord);
					}
					return index;
				}
				
				return body.AddVertex (new JSM.BodyVertex (coord));
			}

			var bodyPolygon = new JSM.BodyPolygon ([]);

			var i, vertexIndex;
			if (!reversed) {
				for (i = 0; i < polygon.VertexCount (); i++) {
					vertexIndex = AddBodyVertex (polygon.GetVertex (i), octree);
					bodyPolygon.AddVertexIndex (vertexIndex);
				}
			} else {
				for (i = polygon.VertexCount () - 1; i >= 0; i--) {
					vertexIndex = AddBodyVertex (polygon.GetVertex (i), octree);
					bodyPolygon.AddVertexIndex (vertexIndex);
				}
			}
			
			if (polygon.userData !== undefined) {
				bodyPolygon.SetMaterialIndex (polygon.userData.material);
			}
			body.AddPolygon (bodyPolygon);
		}

		function AddPolygonsToBody (polygons, body, octree, reversed)
		{
			var i;
			for (i = 0; i < polygons.length; i++) {
				AddPolygonToBody (polygons[i], body, octree, reversed);
			}
		}
		
		function ClipNodePolygonsWithTree (nodes, tree, frontPolygons, backPolygons, planarFrontPolygons, planarBackPolygons)
		{
			function SetPolygonsUserData (polygons, userData)
			{
				var i, polygon;
				for (i = 0; i < polygons.length; i++) {
					polygon = polygons[i];
					if (polygon.userData === undefined) {
						polygon.userData = userData;
					}
				}
			}
		
			var i, node;
			for (i = 0; i < nodes.length; i++) {
				node = nodes[i];
				JSM.ClipPolygonWithBSPTree (node.polygon, tree, frontPolygons, backPolygons, planarFrontPolygons, planarBackPolygons);
				SetPolygonsUserData (frontPolygons, node.userData);
				SetPolygonsUserData (backPolygons, node.userData);
				SetPolygonsUserData (planarFrontPolygons, node.userData);
				SetPolygonsUserData (planarBackPolygons, node.userData);
			}
		}

		var aTree = new JSM.BSPTree ();
		var bTree = new JSM.BSPTree ();
		JSM.AddBodyToBSPTree (aBody, aTree, 'a');
		JSM.AddBodyToBSPTree (bBody, bTree, 'b');

		var aFrontPolygons = [];
		var aBackPolygons = [];
		var aPlanarFrontPolygons = [];
		var aPlanarBackPolygons = [];
		ClipNodePolygonsWithTree (aTree.GetNodes (), bTree, aFrontPolygons, aBackPolygons, aPlanarFrontPolygons, aPlanarBackPolygons);

		var bFrontPolygons = [];
		var bBackPolygons = [];
		var bPlanarFrontPolygons = [];
		var bPlanarBackPolygons = [];
		ClipNodePolygonsWithTree (bTree.GetNodes (), aTree, bFrontPolygons, bBackPolygons, bPlanarFrontPolygons, bPlanarBackPolygons);

		var result = new JSM.Body ();
		var resultOctree = new JSM.Octree (JSM.BoxUnion (aBody.GetBoundingBox (), bBody.GetBoundingBox ()));
		
		if (operation == 'Union') {
			AddPolygonsToBody (aFrontPolygons, result, resultOctree, false);
			AddPolygonsToBody (aPlanarFrontPolygons, result, resultOctree, false);
			AddPolygonsToBody (aPlanarBackPolygons, result, resultOctree, false);
			AddPolygonsToBody (bFrontPolygons, result, resultOctree, false);
			AddPolygonsToBody (bPlanarFrontPolygons, result, resultOctree, false);
		} else if (operation == 'Difference') {
			AddPolygonsToBody (aFrontPolygons, result, resultOctree, false);
			AddPolygonsToBody (aPlanarFrontPolygons, result, resultOctree, false);
			AddPolygonsToBody (bBackPolygons, result, resultOctree, true);
		} else if (operation == 'Intersection') {
			AddPolygonsToBody (aBackPolygons, result, resultOctree, false);
			AddPolygonsToBody (aPlanarBackPolygons, result, resultOctree, false);
			AddPolygonsToBody (bBackPolygons, result, resultOctree, false);
		}

		return result;
	};

	return JSM;
});

define('skylark-jsmodeler/extras/surfaces',["../core/jsm"],function(JSM){
	/**
	* Function: GenerateSurface
	* Description: Generates a parametric surface.
	* Parameters:
	*	xRange {number[2]} the from-to range on x axis
	*	yRange {number[2]} the from-to range on y axis
	*	xSegmentation {integer} the segmentation along the x axis
	*	ySegmentation {integer} the segmentation along the y axis
	*	useTriangles {boolean} generate triangles instead of quadrangles
	*	isCurved {boolean} create smooth surfaces
	*	getPointCallback {function} callback function which returns the point for a position
	*	userData {anything} user data which will be passed to getPointCallback
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateSurface = function (xRange, yRange, xSegmentation, ySegmentation, useTriangles, isCurved, getPointCallback, userData)
	{
		function AddVertices (result, xStart, yStart, xSegment, ySegment)
		{
			var i, j, u, v, coord;
			for (i = 0; i <= ySegmentation; i++) {
				for (j = 0; j <= xSegmentation; j++) {
					u = xStart + j * xSegment;
					v = yStart + i * ySegment;
					coord = getPointCallback (i, j, u, v, userData);
					result.AddVertex (new JSM.BodyVertex (coord));
				}
			}
		}

		function AddPolygons (result)
		{
			var i, j;
			var current, next, top, ntop;
			var polygon;
			
			for (j = 0; j < ySegmentation; j++) {
				for (i = 0; i < xSegmentation; i++) {
					current = j * (xSegmentation + 1) + i;
					next = current + 1;
					top = current + xSegmentation + 1;
					ntop = top + 1;
					
					if (useTriangles) {
						polygon = new JSM.BodyPolygon ([current, next, ntop]);
						if (isCurved) {
							polygon.SetCurveGroup (0);
						}
						result.AddPolygon (polygon);
						polygon = new JSM.BodyPolygon ([current, ntop, top]);
						if (isCurved) {
							polygon.SetCurveGroup (0);
						}
						result.AddPolygon (polygon);
					} else {
						polygon = new JSM.BodyPolygon ([current, next, ntop, top]);
						if (isCurved) {
							polygon.SetCurveGroup (0);
						}
						result.AddPolygon (polygon);
					}
				}
			}
		}

		var result = new JSM.Body ();
		
		var xStart = xRange[0];
		var yStart = yRange[0];
		var xDiff = xRange[1] - xRange[0];
		var yDiff = yRange[1] - yRange[0];
		var xSegment = xDiff / xSegmentation;
		var ySegment = yDiff / ySegmentation;
		
		AddVertices (result, xStart, yStart, xSegment, ySegment);
		AddPolygons (result);

		return result;
	};

	/**
	* Class: SurfaceControlPoints
	* Description: Represents control points for surface generation.
	* Parameters:
	*	n {integer} the first dimension
	*	m {integer} the second dimension
	*/
	JSM.SurfaceControlPoints = function (n, m)
	{
		this.n = n;
		this.m = m;
		this.points = [];
		
		var i, j;
		for (i = 0; i <= this.n; i++) {
			this.points.push ([]);
			for (j = 0; j <= this.m; j++) {
				this.points[i].push (new JSM.Coord (0.0, 0.0, 0.0));
			}
		}
	};

	/**
	* Function: SurfaceControlPoints.GetNValue
	* Description: Returns the n value.
	* Returns:
	*	{integer} the result
	*/
	JSM.SurfaceControlPoints.prototype.GetNValue = function ()
	{
		return this.n;
	};

	/**
	* Function: SurfaceControlPoints.GetMValue
	* Description: Returns the m value.
	* Returns:
	*	{integer} the result
	*/
	JSM.SurfaceControlPoints.prototype.GetMValue = function ()
	{
		return this.m;
	};

	/**
	* Function: SurfaceControlPoints.GetControlPoint
	* Description: Returns a control point.
	* Parameters:
	*	i {integer} the first dimension
	*	j {integer} the second dimension
	* Returns:
	*	{Coord} the result
	*/
	JSM.SurfaceControlPoints.prototype.GetControlPoint = function (i, j)
	{
		return this.points[i][j];
	};

	/**
	* Function: SurfaceControlPoints.InitPlanar
	* Description: Inits planar control points.
	* Parameters:
	*	xSize {number} the x size
	*	xSize {number} the y size
	*/
	JSM.SurfaceControlPoints.prototype.InitPlanar = function (xSize, ySize)
	{
		var iStep = xSize / this.n;
		var jStep = ySize / this.m;

		var i, j, point;
		for (i = 0; i <= this.n; i++) {
			for (j = 0; j <= this.m; j++) {
				point = this.points[i][j];
				point.x = i * iStep;
				point.y = j * jStep;
			}
		}
	};

	/**
	* Function: GenerateBezierSurface
	* Description: Generates a bezier surface base on the given control points.
	* Parameters:
	*	surfaceControlPoints {SurfaceControlPoints} the control points
	*	xSegmentation {integer} the segmentation along the x axis
	*	ySegmentation {integer} the segmentation along the y axis
	*	isCurved {boolean} create smooth surfaces
	* Returns:
	*	{Body} the result
	*/
	JSM.GenerateBezierSurface = function (surfaceControlPoints, xSegmentation, ySegmentation, isCurved)
	{
		function GetBezierSurfacePoint (uIndex, vIndex, u, v, surfaceControlPoints)
		{
			var i, j, result, tmp1, tmp2, scalar;
			var n = surfaceControlPoints.GetNValue ();
			var m = surfaceControlPoints.GetMValue ();
			
			result = new JSM.Coord (0.0, 0.0, 0.0);
			for (i = 0; i <= n; i++) {
				tmp1 = new JSM.Coord (0.0, 0.0, 0.0);
				for (j = 0; j <= m; j++) {
					scalar = JSM.BernsteinPolynomial (i, n, u) * JSM.BernsteinPolynomial (j, m, v);
					tmp2 = surfaceControlPoints.GetControlPoint (i, j).Clone ().MultiplyScalar (scalar);
					tmp1 = JSM.CoordAdd (tmp1, tmp2);
				}
				result = JSM.CoordAdd (result, tmp1);
			}
			return result;
		}

		var body = JSM.GenerateSurface ([0, 1], [0, 1], xSegmentation, ySegmentation, false, isCurved, GetBezierSurfacePoint, surfaceControlPoints);
		return body;
	};

	return JSM;
});

define('skylark-jsmodeler/extensions/svgtomodel/svgtomodel',["../../core/jsm"],function(JSM){
	/**
	* Function: SvgToModel
	* Description: Converts an svg objects rect, path and polygon elements to a body.
	* Parameters:
	*	svgObject {html svg element} the svg element
	*	height {number} the height of the result body
	*	segmentLength {number} the maximum length of curved segments
	*	curveAngle {number} if not null, defines the curve angle of the model
	* Returns:
	*	{Model} the result
	*/
	JSM.SvgToModel = function (svgObject, height, segmentLength, curveAngle)
	{
		function SegmentElem (elem, segmentLength)
		{
			function AddTransformedVertex (dummySVG, result, elem, x, y)
			{
				var point = dummySVG.createSVGPoint ();
				point.x = x;
				point.y = y;
				
				var transformed = point;
				var matrix = elem.getCTM ();
				if (matrix !== undefined && matrix !== null) {
					transformed = point.matrixTransform (matrix);				
				}
				var transformedCoord = new JSM.Coord2D (transformed.x, transformed.y);
				var resultCoord = new JSM.Coord2D (x, y);
				
				var contour = result.GetLastContour ();
				var contourVertexCount = contour.VertexCount ();
				if (contourVertexCount > 0) {
					if (contour.GetVertex (contourVertexCount - 1).IsEqualWithEps (transformedCoord, 0.1)) {
						return resultCoord;
					}
				}
				
				contour.AddVertex (transformed.x, transformed.y);
				return resultCoord;
			}

			function SegmentCurve (dummySVG, originalPath, segmentLength, lastCoord, items, result)
			{
				function CreatePath (items)
				{
					function GenerateMoveCommand (x, y)
					{
						return 'M ' + x + ' ' + y + ' ';
					}
				
					var svgNameSpace = 'http://www.w3.org/2000/svg';
					var path = document.createElementNS (svgNameSpace, 'path');

					var commandString = GenerateMoveCommand (lastCoord.x, lastCoord.y);
					var i, item, command, largeArcFlag, sweepFlag;
					for (i = 0; i < items.length; i++) {
						item = items[i];
						if (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ||
							item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL) {
							command = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ? 'C' : 'c');
							commandString += command + ' ' + item.x1 + ' ' + item.y1 + ' ' + item.x2 + ' ' + item.y2 + ' ' + item.x + ' ' + item.y + ' ';
						} else if (	item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ||
									item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL){
							command = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ? 'Q' : 'q');
							commandString += command + ' ' + item.x1 + ' ' + item.y1 + ' ' + item.x + ' ' + item.y + ' ';
						} else if (	item.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ||
									item.pathSegType == SVGPathSeg.PATHSEG_ARC_REL){
							command = (item.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ? 'A' : 'a');
							largeArcFlag = (item.largeArcFlag ? 1 : 0);
							sweepFlag = (item.sweepFlag ? 1 : 0);
							commandString +=  command + ' ' + item.r1 + ' ' + item.r2 + ' ' + item.angle + ' ' + largeArcFlag + ' ' + sweepFlag + ' ' + item.x + ' ' + item.y + ' ';
						} else if (	item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||
									item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL){
							command = (item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ? 'S' : 's');
							commandString +=  command + ' ' + item.x2 + ' ' + item.y2 + ' ' + item.x + ' ' + item.y + ' ';
						} else {
							// unknown segment type
						}
					}
					
					path.setAttributeNS (null, 'd', commandString);
					return path;
				}
			
				var path = CreatePath (items);
				var pathLength = path.getTotalLength ();

				var segmentation = 0;
				if (segmentLength > 0) {
					segmentation = parseInt (pathLength / segmentLength, 10);
				}
				if (segmentation < 3) {
					segmentation = 3;
				}
				
				var step = pathLength / segmentation;
				var i, point;
				for (i = 1; i <= segmentation; i++) {
					point = path.getPointAtLength (i * step);
					lastCoord = AddTransformedVertex (dummySVG, result, originalPath, point.x, point.y);
				}
				
				return lastCoord;
			}
			
			function IsCurvedItem (item)
			{
				return	item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS ||
						item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL ||
						item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS ||
						item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL ||
						item.pathSegType == SVGPathSeg.PATHSEG_ARC_ABS ||
						item.pathSegType == SVGPathSeg.PATHSEG_ARC_REL ||
						item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||
						item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
			}
			
			function IsSmoothItem (item)
			{
				return	item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS ||
						item.pathSegType == SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
			}

			function RemoveEqualEndVertices (polygon)
			{
				var contour = polygon.GetLastContour ();
				var vertexCount = contour.VertexCount ();
				if (vertexCount === 0) {
					return;
				}
				
				var firstCoord = contour.GetVertex (0);
				var lastCoord = contour.GetVertex (vertexCount - 1);
				if (firstCoord.IsEqualWithEps (lastCoord, 0.1)) {
					// TODO: Do not access vertices directly
					contour.vertices.pop ();
				}
			}
		
			function StartNewContour (result)
			{
				if (result.GetLastContour ().VertexCount () > 0) {
					RemoveEqualEndVertices (result);
					result.AddContour ();
				}
			}
		
			function SVGColorToHex (path)
			{
				var svgColor = '';
				var target = path;
				while (target !== null && target !== undefined && svgColor.length === 0) {
					svgColor = target.getAttribute ('fill');
					if (svgColor === null) {
						svgColor = target.style.fill;
					}
					target = target.parentElement;
				}

				var result = 0x000000;
				if (svgColor.length === 0) {
					return result;
				}
				
				if (svgColor[0] == '#') {
					result = JSM.HexColorToRGBColor (svgColor.substring (1));
				} else {
					var firstBracket = svgColor.indexOf ('(');
					var secondBracket = svgColor.indexOf (')');
					if (firstBracket == -1 || secondBracket == -1) {
						return result;
					}
					
					var numbers = svgColor.substring (firstBracket + 1, secondBracket);
					var rgb = numbers.split (', ');
					if (rgb.length != 3) {
						return result;
					}
					
					result = JSM.RGBComponentsToHexColor (rgb[0], rgb[1], rgb[2]);
				}
				
				return result;
			}
		
			var result = new JSM.ContourPolygon2D ();
			result.AddContour ();

			var dummySVG = document.createElementNS ('http://www.w3.org/2000/svg', 'svg');

			var i, j;
			if (elem instanceof SVGPathElement) {
				var lastCoord = new JSM.Coord2D (0.0, 0.0);
				var lastMoveCoord = new JSM.Coord2D (0.0, 0.0);

				var currentSegmentLength = segmentLength;
				if (elem.hasAttribute ('segmentlength')) {
					currentSegmentLength = parseFloat (elem.getAttribute ('segmentlength'));
				}
				
				var item, items, currentItem;
				for (i = 0; i < elem.pathSegList.numberOfItems; i++) {
					item = elem.pathSegList.getItem (i);
					if (item.pathSegType == SVGPathSeg.PATHSEG_CLOSEPATH) {
						// do nothing
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_MOVETO_ABS) {
						StartNewContour (result);
						lastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, item.y);
						lastMoveCoord = lastCoord.Clone ();
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_MOVETO_REL) {
						StartNewContour (result);
						lastCoord = AddTransformedVertex (dummySVG, result, elem, lastMoveCoord.x + item.x, lastMoveCoord.y + item.y);
						lastMoveCoord = lastCoord.Clone ();
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_ABS) {
						lastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, item.y);
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_REL) {
						lastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x + item.x, lastCoord.y + item.y);
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS) {
						lastCoord = AddTransformedVertex (dummySVG, result, elem, item.x, lastCoord.y);
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS) {
						lastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x, item.y);
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL) {
						lastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x + item.x, lastCoord.y);
					} else if (item.pathSegType == SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL) {
						lastCoord = AddTransformedVertex (dummySVG, result, elem, lastCoord.x, lastCoord.y + item.y);
					} else if (IsCurvedItem (item)) {
						items = [];
						if (IsSmoothItem (item)) {
							for (j = i; j < elem.pathSegList.numberOfItems; j++) {
								currentItem = elem.pathSegList.getItem (j);
								if (!IsSmoothItem (currentItem)) {
									break;
								}
								items.push (currentItem);
							}
							i = j - 1;
						} else {
							items.push (item);
						}
						lastCoord = SegmentCurve (dummySVG, elem, currentSegmentLength, lastCoord, items, result);
					} else {
						// unknown segment type
					}
				}
				
				RemoveEqualEndVertices (result);
			} else if (elem instanceof SVGRectElement) {
				AddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value, elem.y.baseVal.value);
				AddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value + elem.width.baseVal.value, elem.y.baseVal.value);
				AddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value + elem.width.baseVal.value, elem.y.baseVal.value + elem.height.baseVal.value);
				AddTransformedVertex (dummySVG, result, elem, elem.x.baseVal.value, elem.y.baseVal.value + elem.height.baseVal.value);
			} else if (elem instanceof SVGPolygonElement) {
				var point;
				for (i = 0; i < elem.points.numberOfItems; i++) {
					point = elem.points.getItem (i);
					AddTransformedVertex (dummySVG, result, elem, point.x, point.y);
				}
			}
			result.color = SVGColorToHex (elem);
			result.originalElem = elem;
			return result;
		}
		
		function SegmentPaths (svgObject, segmentLength)
		{
			function AddElemType (svgObject, elemType, result)
			{
				var elems = svgObject.getElementsByTagName (elemType);
				var i;
				for (i = 0; i < elems.length; i++) {
					result.push (elems[i]);
				}
			}
		
			var result = [];
			var elems = [];
			AddElemType (svgObject, 'path', elems);
			AddElemType (svgObject, 'rect', elems);
			AddElemType (svgObject, 'polygon', elems);
			
			var currentSegmentLength = segmentLength;
			if (svgObject.hasAttribute ('segmentlength')) {
				currentSegmentLength = parseFloat (svgObject.getAttribute ('segmentlength'));
			}

			var i, current;
			for (i = 0; i < elems.length; i++) {
				current = SegmentElem (elems[i], currentSegmentLength);
				result.push (current);
			}
			
			return result;
		}
		
		function ContourPolygonToPrisms (polygon, height, curveAngle)
		{
			function AppendPolygonVertices (polygon, vertexArray, reversed)
			{
				var i, coord;
				if (!reversed) {
					for (i = 0; i < polygon.VertexCount (); i++) {
						coord = polygon.GetVertex (i);
						vertexArray.push (new JSM.Coord (coord.x, -coord.y, 0.0));
					}
				} else {
					for (i = polygon.VertexCount () - 1; i >= 0; i--) {
						coord = polygon.GetVertex (i);
						vertexArray.push (new JSM.Coord (coord.x, -coord.y, 0.0));
					}
				}
			}
			
			function CreateBasePolygon (polygon)
			{
				var basePolygon = [];
				var orientation = polygon.GetOrientation ();
				var reversed = (orientation == JSM.Orientation.CounterClockwise);
				AppendPolygonVertices (polygon, basePolygon, reversed);
				return basePolygon;
			}
		
			function AddHoleToBasePolygon (basePolygon, holePolygon)
			{
				basePolygon.push (null);
				var orientation = holePolygon.GetOrientation ();
				var reversed = (orientation == JSM.Orientation.Clockwise);
				AppendPolygonVertices (holePolygon, basePolygon, reversed);
			}

			var prisms = [];
			var direction = new JSM.Vector (0.0, 0.0, 1.0);
			
			var currentHeight = height;
			if (polygon.originalElem !== undefined) {
				if (polygon.originalElem.hasAttribute ('modelheight')) {
					currentHeight = parseFloat (polygon.originalElem.getAttribute ('modelheight'));
				}
			}
			
			var basePolygon, baseOrientation, prism;
			var contourCount = polygon.ContourCount ();
			if (contourCount === 0) {
				return null;
			}
			
			if (contourCount == 1) {
				baseOrientation = polygon.GetContour (0).GetOrientation ();
				basePolygon = CreateBasePolygon (polygon.GetContour (0));
				prism = JSM.GeneratePrism (basePolygon, direction, currentHeight, true, curveAngle);
				prisms.push (prism);
			} else if (contourCount > 1) {
				baseOrientation = polygon.GetContour (0).GetOrientation ();
				var holeBasePolygon = CreateBasePolygon (polygon.GetContour (0));
				var hasHoles = false;
				
				var i, orientation;
				for (i = 1; i < polygon.ContourCount (); i++) {
					orientation = polygon.GetContour (i).GetOrientation ();
					if (orientation == baseOrientation) {
						basePolygon = CreateBasePolygon (polygon.GetContour (i));
						prism = JSM.GeneratePrism (basePolygon, direction, currentHeight, true, curveAngle);
						prisms.push (prism);
					} else {
						AddHoleToBasePolygon (holeBasePolygon, polygon.GetContour (i));
						hasHoles = true;
					}
				}
				
				if (!hasHoles) {
					prism = JSM.GeneratePrism (holeBasePolygon, direction, currentHeight, true, curveAngle);
					prisms.push (prism);
				} else {
					prism = JSM.GeneratePrismWithHole (holeBasePolygon, direction, currentHeight, true, curveAngle);
					prisms.push (prism);
				}
			}
			
			var material = new JSM.Material ({ambient : polygon.color, diffuse : polygon.color});
			return [prisms, material];
		}
		
		var model = new JSM.Model ();
		var polygons = SegmentPaths (svgObject, segmentLength);

		var currentHeight = height;
		if (svgObject.hasAttribute ('modelheight')) {
			currentHeight = parseFloat (svgObject.getAttribute ('modelheight'));
		}
		
		var i, j, prismsAndMaterial, currentPrisms, currentPrism, currentMaterial;
		for (i = 0; i < polygons.length; i++) {
			prismsAndMaterial = ContourPolygonToPrisms (polygons[i], currentHeight, curveAngle);
			if (prismsAndMaterial === null) {
				continue;
			}
			currentPrisms = prismsAndMaterial[0];
			currentMaterial = prismsAndMaterial[1];
			model.AddMaterial (currentMaterial);
			for (j = 0; j < currentPrisms.length; j++) {
				currentPrism = currentPrisms[j];
				currentPrism.SetPolygonsMaterialIndex (model.MaterialCount () - 1);
				model.AddBody (currentPrism);
			}
		}

		return model;
	};

	return JSM;
});

define('skylark-jsmodeler/extensions/textgenerator/textgenerator',["../../core/jsm"],function(JSM){
	/**
	* Function: GenerateText
	* Description:
	*	Generates 3D model from the given text. It should get a font
	*	specification object created with facetype.js.
	* Parameters:
	*	text {string} the text
	*	fontSpec {object} the font specification object generated with facetype.js
	*	fontScale {number} the scale of the generated model
	*	fontHeight {number} the height of the generated model
	*	fontSegmentation {integer} the segmentation of font glyphs
	* Returns:
	*	{Model} the result
	*/
	JSM.GenerateText = function (text, fontSpec, fontScale, fontHeight, fontSegmentation)
	{
		function CreatePathFromSpecification (commands, segmentation, offset, scale)
		{
			function Num (str)
			{
				return parseFloat (str);
			}
		
			var path = new JSM.Path2D ({
				segmentation : segmentation,
				offset : offset,
				scale : scale
			});
			
			var parts = commands.split (' ');
			var index = 0;
			var current;
			while (index < parts.length) {
				current = parts[index++];
				if (current.length === 0) {
					continue;
				}
				if (current == 'm') {
					path.MoveTo (Num (parts[index + 0]), Num (parts[index + 1]));
					index += 2;
				} else if (current == 'l') {
					path.LineTo (Num (parts[index + 0]), Num (parts[index + 1]));
					index += 2;
				} else if (current == 'b') {
					path.CubicBezierTo (Num (parts[index + 0]), Num (parts[index + 1]), Num (parts[index + 2]), Num (parts[index + 3]), Num (parts[index + 4]), Num (parts[index + 5]));
					index += 6;
				} else if (current == 'z') {
					path.Close ();
				} else {
					JSM.Message ('Invalid path command found: ' + current);
				}
			}
			return path;
		}

		var model = new JSM.Model ();
		var offset = new JSM.Vector2D (0.0, 0.0);
		var scale = new JSM.Coord2D (fontScale, fontScale);
		var i, character, glyphs, path, bodies;
		for (i = 0; i < text.length; i++) {
			character = text[i];
			glyphs = fontSpec.glyphs[character];
			if (glyphs === undefined) {
				continue;
			}
			path = CreatePathFromSpecification (glyphs.o, fontSegmentation, offset, scale);
			bodies = JSM.GeneratePrismsFromPath2D (path, fontHeight, true, 160 * JSM.DegRad);
			model.AddBodies (bodies);
			offset.x += glyphs.ha * scale.x;
		}
		return model;
	};

	return JSM;
});

define('skylark-jsmodeler/extensions/threeviewer/threeconverter',["../../core/jsm"],function(JSM){
	JSM.ConvertBodyToThreeMeshes = function (body, materials, conversionData)
	{
		var theConversionData = {
			textureLoadedCallback : null,
			hasConvexPolygons : false
		};

		if (conversionData !== undefined && conversionData !== null) {
			theConversionData.textureLoadedCallback = JSM.ValueOrDefault (conversionData.textureLoadedCallback, theConversionData.textureLoadedCallback);
			theConversionData.hasConvexPolygons = JSM.ValueOrDefault (conversionData.hasConvexPolygons, theConversionData.hasConvexPolygons);
		}
		
		var meshes = [];
		var threeGeometry = null;
		var threeMaterial = null;

		var explodeData = {
			hasConvexPolygons : theConversionData.hasConvexPolygons,
			onPointGeometryStart : function (material) {
					threeMaterial = new JSM.THREE.PointsMaterial ({
						color : material.diffuse,
						size: material.pointSize
					});
					threeGeometry = new JSM.THREE.Geometry ();
			},
			onPointGeometryEnd : function () {
				var points = new JSM.THREE.Points (threeGeometry, threeMaterial);
				meshes.push (points);
			},
			onPoint : function (vertex)	{
				threeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex.x, vertex.y, vertex.z));
			},
			onLineGeometryStart : function (material) {
				threeGeometry = new JSM.THREE.Geometry ();
				threeMaterial = new JSM.THREE.LineBasicMaterial ({
					color : material.diffuse
				});
			},
			onLineGeometryEnd : function () {
				var lines = new JSM.THREE.LineSegments (threeGeometry, threeMaterial);
				meshes.push (lines);
			},
			onLine : function (begVertex, endVertex) {
				threeGeometry.vertices.push (new JSM.THREE.Vector3 (begVertex.x, begVertex.y, begVertex.z));
				threeGeometry.vertices.push (new JSM.THREE.Vector3 (endVertex.x, endVertex.y, endVertex.z));
			},
			onGeometryStart : function (material) {
				var hasTexture = (material.texture !== null);
				var hasOpacity = (material.opacity !== 1.0);

				var diffuse = material.diffuse;
				var specular = material.specular;
				var shininess = material.shininess;
				if (shininess === 0.0) {
					specular = 0x000000;
					shininess = 1;
				}

				threeMaterial = new JSM.THREE.MeshPhongMaterial ({
					color : diffuse,
					specular : specular,
					shininess : shininess
				});

				if (!material.singleSided) {
					threeMaterial.side = JSM.THREE.DoubleSide;
				}
				
				if (hasOpacity) {
					threeMaterial.opacity = material.opacity;
					threeMaterial.transparent = true;
				}
				
				if (hasTexture) {
					var theMaterial = threeMaterial;
					var textureName = material.texture;
					var loader = new JSM.THREE.TextureLoader ();
					loader.load (textureName, function (texture) {
						texture.image = JSM.ResizeImageToPowerOfTwoSides (texture.image);
						texture.wrapS = JSM.THREE.RepeatWrapping;
						texture.wrapT = JSM.THREE.RepeatWrapping;
						theMaterial.map = texture;
						theMaterial.needsUpdate = true;
						if (theConversionData.textureLoadedCallback !== null) {
							theConversionData.textureLoadedCallback ();
						}
					});
				}
				
				threeGeometry = new JSM.THREE.Geometry ();
			},
			onGeometryEnd : function () {
				threeGeometry.computeFaceNormals ();
				var mesh = new JSM.THREE.Mesh (threeGeometry, threeMaterial);
				meshes.push (mesh);
			},
			onTriangle : function (vertex1, vertex2, vertex3, normal1, normal2, normal3, uv1, uv2, uv3) {
				var lastVertexIndex = threeGeometry.vertices.length;
				threeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex1.x, vertex1.y, vertex1.z));
				threeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex2.x, vertex2.y, vertex2.z));
				threeGeometry.vertices.push (new JSM.THREE.Vector3 (vertex3.x, vertex3.y, vertex3.z));
				var face = new JSM.THREE.Face3 (lastVertexIndex + 0, lastVertexIndex + 1, lastVertexIndex + 2);
				threeGeometry.faces.push (face);
				
				if (normal1 !== null && normal2 !== null && normal3 !== null) {
					var normalArray = [];
					normalArray.push (new JSM.THREE.Vector3 (normal1.x, normal1.y, normal1.z));
					normalArray.push (new JSM.THREE.Vector3 (normal2.x, normal2.y, normal2.z));
					normalArray.push (new JSM.THREE.Vector3 (normal3.x, normal3.y, normal3.z));
					threeGeometry.faces[threeGeometry.faces.length - 1].vertexNormals = normalArray;
				}

				if (uv1 !== null && uv2 !== null && uv3 !== null) {
					var uvArray = [];
					uvArray.push (new JSM.THREE.Vector2 (uv1.x, -uv1.y));
					uvArray.push (new JSM.THREE.Vector2 (uv2.x, -uv2.y));
					uvArray.push (new JSM.THREE.Vector2 (uv3.x, -uv3.y));
					threeGeometry.faceVertexUvs[0].push (uvArray);
				}
			}
		};

		JSM.ExplodeBody (body, materials, explodeData);
		return meshes;
	};

	JSM.ConvertModelToThreeMeshes = function (model, conversionData)
	{
		var meshes = [];
		var materials = model.GetMaterialSet ();
		
		var i, j, body, currentMeshes;
		for (i = 0; i < model.BodyCount (); i++) {
			body = model.GetBody (i);
			currentMeshes = JSM.ConvertBodyToThreeMeshes (body, materials, conversionData);
			for (j = 0; j < currentMeshes.length; j++) {
				meshes.push (currentMeshes[j]);
			}
		}

		return meshes;
	};

	JSM.ConvertJSONDataToThreeMeshes = function (jsonData, textureLoadedCallback, asyncCallbacks)
	{
		function AddMesh (mesh, meshIndex, materials, resultMeshes)
		{
			function AddTriangles (currentTriangles, vertices, normals, uvs, materials, resultMeshes)
			{
				function GetTextureCoordinate (u, v, offset, scale, rotation)
				{
					var result = new JSM.THREE.Vector2 (u, v);
					if (!JSM.IsZero (rotation)) {
						var si = Math.sin (rotation * JSM.DegRad);
						var co = Math.cos (rotation * JSM.DegRad);
						result.x = co * u - si * v;
						result.y = si * u + co * v;
					}
					result.x = offset[0] + result.x * scale[0];
					result.y = offset[1] + result.y * scale[1];
					return result;
				}
			
				var materialIndex = currentTriangles.material;
				var parameters = currentTriangles.parameters;
				var materialData = materials[materialIndex];
				
				var textureName = materialData.texture;
				var textureOffset = materialData.offset;
				var textureScale = materialData.scale;
				var textureRotation = materialData.rotation;
				
				var diffuseColor = new JSM.THREE.Color ();
				var specularColor = new JSM.THREE.Color ();
				var shininess = materialData.shininess || 0.0;

				diffuseColor.setRGB (materialData.diffuse[0], materialData.diffuse[1], materialData.diffuse[2]);
				specularColor.setRGB (materialData.specular[0], materialData.specular[1], materialData.specular[2]);

				if (textureName !== undefined && textureName !== null) {
					diffuseColor.setRGB (1.0, 1.0, 1.0);
					specularColor.setRGB (1.0, 1.0, 1.0);
					
					if (textureOffset === undefined || textureOffset === null) {
						textureOffset = [0.0, 0.0];
					}
					if (textureScale === undefined || textureScale === null) {
						textureScale = [1.0, 1.0];
					}
					if (textureRotation === undefined || textureRotation === null) {
						textureRotation = 0.0;
					}
				}

				if (shininess === 0.0) {
					specularColor.setRGB (0.0, 0.0, 0.0);
					shininess = 1;
				}
				
				var material = new JSM.THREE.MeshPhongMaterial ({
						color : diffuseColor.getHex (),
						specular : specularColor.getHex (),
						shininess : shininess,
						side : JSM.THREE.DoubleSide
					}
				);

				if (materialData.opacity !== 1.0) {
					material.opacity = materialData.opacity;
					material.transparent = true;
				}
				
				if (textureName !== undefined && textureName !== null) {
					var loader = new JSM.THREE.TextureLoader ();
					var theMaterial = material;
					loader.load (textureName, function (texture) {
						texture.image = JSM.ResizeImageToPowerOfTwoSides (texture.image);
						texture.wrapS = JSM.THREE.RepeatWrapping;
						texture.wrapT = JSM.THREE.RepeatWrapping;
						theMaterial.map = texture;
						theMaterial.needsUpdate = true;
						if (textureLoadedCallback !== undefined && textureLoadedCallback !== null) {
							textureLoadedCallback ();
						}
					});
				}
				
				var geometry = new JSM.THREE.Geometry ();

				var v1, v2, v3, n1, n2, n3, u1, u2, u3;
				var lastVertex, lastFace, vertexNormals, textureUVs;
				var j;
				for (j = 0; j < parameters.length; j += 9) {
					v1 = 3 * parameters[j + 0];
					v2 = 3 * parameters[j + 1];
					v3 = 3 * parameters[j + 2];
					n1 = 3 * parameters[j + 3];
					n2 = 3 * parameters[j + 4];
					n3 = 3 * parameters[j + 5];
					u1 = 2 * parameters[j + 6];
					u2 = 2 * parameters[j + 7];
					u3 = 2 * parameters[j + 8];
					
					lastVertex = geometry.vertices.length;
					lastFace = geometry.faces.length;
					
					geometry.vertices.push (new JSM.THREE.Vector3 (vertices[v1 + 0], vertices[v1 + 1], vertices[v1 + 2]));
					geometry.vertices.push (new JSM.THREE.Vector3 (vertices[v2 + 0], vertices[v2 + 1], vertices[v2 + 2]));
					geometry.vertices.push (new JSM.THREE.Vector3 (vertices[v3 + 0], vertices[v3 + 1], vertices[v3 + 2]));
					geometry.faces.push (new JSM.THREE.Face3 (lastVertex + 0, lastVertex + 1, lastVertex + 2));

					vertexNormals = [];
					vertexNormals.push (new JSM.THREE.Vector3 (normals[n1 + 0], normals[n1 + 1], normals[n1 + 2]));
					vertexNormals.push (new JSM.THREE.Vector3 (normals[n2 + 0], normals[n2 + 1], normals[n2 + 2]));
					vertexNormals.push (new JSM.THREE.Vector3 (normals[n3 + 0], normals[n3 + 1], normals[n3 + 2]));
					geometry.faces[lastFace].vertexNormals = vertexNormals;

					if (textureName !== undefined && textureName !== null) {
						textureUVs = [];
						textureUVs.push (GetTextureCoordinate (uvs[u1 + 0], uvs[u1 + 1], textureOffset, textureScale, textureRotation));
						textureUVs.push (GetTextureCoordinate (uvs[u2 + 0], uvs[u2 + 1], textureOffset, textureScale, textureRotation));
						textureUVs.push (GetTextureCoordinate (uvs[u3 + 0], uvs[u3 + 1], textureOffset, textureScale, textureRotation));
						geometry.faceVertexUvs[0].push (textureUVs);
					}
				}

				var mesh = new JSM.THREE.Mesh (geometry, material);
				mesh.originalJsonMaterialIndex = materialIndex;
				mesh.originalJsonMeshIndex = meshIndex;
				resultMeshes.push (mesh);
			}

			var vertices = mesh.vertices;
			if (vertices === undefined) {
				return;
			}

			var normals = mesh.normals;
			if (normals === undefined) {
				return;
			}

			var uvs = mesh.uvs;
			if (uvs === undefined) {
				return;
			}
		
			var triangles = mesh.triangles;
			var i;
			for (i = 0; i < triangles.length; i++) {
				AddTriangles (triangles[i], vertices, normals, uvs, materials, resultMeshes);
			}
		}

		var resultMeshes = [];

		var materials = jsonData.materials;
		if (materials === undefined) {
			return resultMeshes;
		}
		
		var meshes = jsonData.meshes;
		if (meshes === undefined) {
			return resultMeshes;
		}
		
		var i = 0;
		JSM.AsyncRunTask (
			function () {
				AddMesh (meshes[i], i, materials, resultMeshes);
				i = i + 1;
				return true;
			},
			asyncCallbacks,
			meshes.length, 0, resultMeshes
		);

		return resultMeshes;
	};

	return JSM;
});

define('skylark-jsmodeler/extensions/threeviewer/threeviewer',["../../core/jsm"],function(JSM){
	JSM.ThreeViewer = function ()
	{
		this.canvas = null;
		
		this.scene = null;
		this.camera = null;
		this.renderer = null;
		this.ambientLight = null;
		this.directionalLight = null;
		this.runBeforeRender = null;
		this.runAfterRender = null;

		this.cameraMove = null;
		this.navigation = null;
		this.settings = null;
		this.drawLoop = null;
		this.enableDraw = null;
	};

	JSM.ThreeViewer.prototype.Start = function (canvas, settings)
	{
		if (!JSM.IsWebGLEnabled ()) {
			return false;
		}

		if (!this.InitSettings (settings)) {
			return false;
		}
		
		if (!this.InitThree (canvas)) {
			return false;
		}

		if (!this.InitCamera (settings)) {
			return false;
		}

		if (!this.InitLights ()) {
			return false;
		}
		
		this.drawLoop = false;
		this.enableDraw = true;
		this.DrawIfNeeded ();
		return true;
	};

	JSM.ThreeViewer.prototype.InitSettings = function (settings)
	{
		this.settings = {
			cameraEyePosition : new JSM.Coord (1.0, 1.0, 1.0),
			cameraCenterPosition : new JSM.Coord (0.0, 0.0, 0.0),
			cameraUpVector : new JSM.Coord (0.0, 0.0, 1.0),
			lightAmbientColor : [0.5, 0.5, 0.5],
			lightDiffuseColor : [0.5, 0.5, 0.5]
		};

		if (settings !== undefined) {
			if (settings.cameraEyePosition !== undefined) { this.settings.cameraEyePosition = JSM.CoordFromArray (settings.cameraEyePosition); }
			if (settings.cameraCenterPosition !== undefined) { this.settings.cameraCenterPosition = JSM.CoordFromArray (settings.cameraCenterPosition); }
			if (settings.cameraUpVector !== undefined) { this.settings.cameraUpVector = JSM.CoordFromArray (settings.cameraUpVector); }
			if (settings.lightAmbientColor !== undefined) { this.settings.lightAmbientColor = settings.lightAmbientColor; }
			if (settings.lightDiffuseColor !== undefined) { this.settings.lightDiffuseColor = settings.lightDiffuseColor; }
		}

		return true;
	};

	JSM.ThreeViewer.prototype.InitThree = function (canvas)
	{
		this.canvas = canvas;
		if (!this.canvas || !this.canvas.getContext) {
			return false;
		}

		this.scene = new JSM.THREE.Scene();
		if (!this.scene) {
			return false;
		}

		var parameters = {
			canvas : this.canvas,
			antialias : true
		};
		this.renderer = new JSM.THREE.WebGLRenderer (parameters);
		if (!this.renderer) {
			return false;
		}
		
		this.renderer.setClearColor (new JSM.THREE.Color (0xffffff));
		this.renderer.setSize (this.canvas.width, this.canvas.height);
		return true;
	};

	JSM.ThreeViewer.prototype.InitCamera = function (settings)
	{
		this.cameraMove = new JSM.Camera (
			JSM.CoordFromArray (settings.cameraEyePosition),
			JSM.CoordFromArray (settings.cameraCenterPosition),
			JSM.CoordFromArray (settings.cameraUpVector),
			settings.fieldOfView,
			settings.nearClippingPlane,
			settings.farClippingPlane
		);
		if (!this.cameraMove) {
			return false;
		}

		this.navigation = new JSM.Navigation ();
		if (!this.navigation.Init (this.canvas, this.cameraMove, this.DrawIfNeeded.bind (this), this.Resize.bind (this))) {
			return false;
		}
		
		this.camera = new JSM.THREE.PerspectiveCamera (this.cameraMove.fieldOfView, this.canvas.width / this.canvas.height, this.cameraMove.nearClippingPlane, this.cameraMove.farClippingPlane);
		if (!this.camera) {
			return false;
		}
		
		this.scene.add (this.camera);
		return true;
	};

	JSM.ThreeViewer.prototype.InitLights = function ()
	{
		var ambientColor = new JSM.THREE.Color ();
		var diffuseColor = new JSM.THREE.Color ();
		ambientColor.setRGB (this.settings.lightAmbientColor[0], this.settings.lightAmbientColor[1], this.settings.lightAmbientColor[2]);
		diffuseColor.setRGB (this.settings.lightDiffuseColor[0], this.settings.lightDiffuseColor[1], this.settings.lightDiffuseColor[2]);

		this.ambientLight = new JSM.THREE.AmbientLight (ambientColor.getHex ());
		if (!this.ambientLight) {
			return false;
		}

		this.scene.add (this.ambientLight);
		
		this.directionalLight = new JSM.THREE.DirectionalLight (diffuseColor.getHex ());
		if (!this.directionalLight) {
			return false;
		}
		
		var lightPosition = new JSM.THREE.Vector3 ().subVectors (this.cameraMove.eye, this.cameraMove.center);
		this.directionalLight.position.set (lightPosition.x, lightPosition.y, lightPosition.z);

		this.scene.add (this.directionalLight);
		return true;
	};

	JSM.ThreeViewer.prototype.SetRunBeforeRender = function (runBeforeRender)
	{
		this.runBeforeRender = runBeforeRender;
	};

	JSM.ThreeViewer.prototype.SetRunAfterRender = function (runAfterRender)
	{
		this.runAfterRender = runAfterRender;
	};

	JSM.ThreeViewer.prototype.SetClearColor = function (color)
	{
		this.renderer.setClearColor (new JSM.THREE.Color (color));
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.AddMesh = function (mesh)
	{
		this.scene.add (mesh);
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.AddMeshes = function (meshes)
	{
		var i;
		for (i = 0; i < meshes.length; i++) {
			this.scene.add (meshes[i]);
		}
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.MeshCount = function ()
	{
		var count = 0;
		
		var myThis = this;
		this.scene.traverse (function (current) {
			if (myThis.IsRelevantObject (current)) {
				count = count + 1;
			}
		});
		
		return count;
	};

	JSM.ThreeViewer.prototype.VisibleMeshCount = function ()
	{
		var count = 0;
		
		var myThis = this;
		this.scene.traverse (function (current) {
			if (myThis.IsVisibleObject (current)) {
				count = count + 1;
			}
		});
		
		return count;
	};

	JSM.ThreeViewer.prototype.VertexCount = function ()
	{
		var count = 0;
		
		var myThis = this;
		this.scene.traverse (function (current) {
			if (myThis.IsRelevantObject (current)) {
				count = count + current.geometry.vertices.length;
			}
		});
		
		return count;
	};

	JSM.ThreeViewer.prototype.FaceCount = function ()
	{
		var count = 0;
		
		this.scene.traverse (function (current) {
			if (current instanceof JSM.THREE.Mesh) {
				count = count + current.geometry.faces.length;
			}
		});
		
		return count;
	};

	JSM.ThreeViewer.prototype.GetMesh = function (index)
	{
		var current = null;
		var currIndex = 0;
		
		var i;
		for (i = 0; i < this.scene.children.length; i++) {
			current = this.scene.children[i];
			if (this.IsRelevantObject (current)) {
				if (currIndex == index) {
					return current;
				}
				currIndex = currIndex + 1;
			}
		}
		
		return null;
	};

	JSM.ThreeViewer.prototype.ShowMesh = function (mesh)
	{
		mesh.visible = true;
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.HideMesh = function (mesh)
	{
		mesh.visible = false;
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.RemoveMesh = function (mesh)
	{
		mesh.geometry.dispose ();
		this.scene.remove (mesh);
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.RemoveMeshes = function ()
	{
		var current;
		var i;
		for (i = 0; i < this.scene.children.length; i++) {
			current = this.scene.children[i];
			if (this.IsRelevantObject (current)) {
				current.geometry.dispose ();
				this.scene.remove (current);
				i--;
			}
		}
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.RemoveLastMesh = function ()
	{
		var found = null;
		
		var myThis = this;
		this.scene.traverse (function (current) {
			if (myThis.IsRelevantObject (current)) {
				found = current;
			}
		});
		
		if (found !== null) {
			this.scene.remove (found);
		}
		
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.SetCamera = function (eye, center, up)
	{
		this.navigation.SetCamera (eye, center, up);
		this.navigation.SetOrbitCenter (center.Clone ());
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.Resize = function ()
	{
		this.camera.aspect = this.canvas.width / this.canvas.height;
		this.camera.updateProjectionMatrix ();
		this.renderer.setSize (this.canvas.width, this.canvas.height);
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.FitInWindow = function ()
	{
		if (this.VisibleMeshCount () === 0) {
			return;
		}
		
		var sphere = this.GetBoundingSphere ();
		this.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.FitMeshesInWindow = function (meshes)
	{
		if (meshes.length === 0) {
			return;
		}
		var sphere = this.GetFilteredBoundingSphere (function (obj) {
			return meshes.indexOf (obj) != -1;
		});
		this.navigation.FitInWindow (sphere.GetCenter (), sphere.GetRadius ());
		this.DrawIfNeeded ();
	};

	JSM.ThreeViewer.prototype.AdjustClippingPlanes = function (radiusLimit)
	{
		var sphere = this.GetBoundingSphere ();
		if (sphere.GetRadius () < radiusLimit) {
			this.camera.near = 0.1;
			this.camera.far = 1000.0;
		} else {
			this.camera.near = 10.0;
			this.camera.far = 1000000.0;
		}
		this.camera.updateProjectionMatrix ();
		this.Draw ();
	};

	JSM.ThreeViewer.prototype.GetCenter = function ()
	{
		var myThis = this;
		return this.GetFilteredCenter (function (obj) {
			return myThis.IsVisibleObject (obj);
		});
	};

	JSM.ThreeViewer.prototype.GetBoundingBox = function ()
	{
		var myThis = this;
		return this.GetFilteredBoundingBox (function (obj) {
			return myThis.IsVisibleObject (obj);
		});
	};

	JSM.ThreeViewer.prototype.GetBoundingSphere = function ()
	{
		var myThis = this;
		return this.GetFilteredBoundingSphere (function (obj) {
			return myThis.IsVisibleObject (obj);
		});
	};

	JSM.ThreeViewer.prototype.GetFilteredCenter = function (needToProcess)
	{
		var boundingBox = this.GetFilteredBoundingBox (needToProcess);
		return boundingBox.GetCenter ();
	};

	JSM.ThreeViewer.prototype.GetFilteredBoundingBox = function (needToProcess)
	{
		var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
		var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);
		
		var geometry, coord;
		this.scene.traverse (function (current) {
			if (needToProcess (current)) {
				geometry = current.geometry;
				var j;
				for (j = 0; j < geometry.vertices.length; j++) {
					coord = geometry.vertices[j].clone ();
					coord.add (current.position);
					min.x = JSM.Minimum (min.x, coord.x);
					min.y = JSM.Minimum (min.y, coord.y);
					min.z = JSM.Minimum (min.z, coord.z);
					max.x = JSM.Maximum (max.x, coord.x);
					max.y = JSM.Maximum (max.y, coord.y);
					max.z = JSM.Maximum (max.z, coord.z);
				}
			}
		});

		return new JSM.Box (min, max);
	};

	JSM.ThreeViewer.prototype.GetFilteredBoundingSphere = function (needToProcess)
	{
		var center = this.GetFilteredCenter (needToProcess);
		var radius = 0.0;

		var geometry, coord, distance;
		this.scene.traverse (function (current) {
			if (needToProcess (current)) {
				geometry = current.geometry;
				var j;
				for (j = 0; j < geometry.vertices.length; j++) {
					coord = geometry.vertices[j].clone ();
					coord.add (current.position);
					distance = center.DistanceTo (new JSM.Coord (coord.x, coord.y, coord.z));
					if (JSM.IsGreater (distance, radius)) {
						radius = distance;
					}
				}
			}
		});

		var sphere = new JSM.Sphere (center, radius);
		return sphere;
	};

	JSM.ThreeViewer.prototype.GetObjectsUnderPosition = function (x, y)
	{
		var mouseX = (x / this.canvas.width) * 2 - 1;
		var mouseY = -(y / this.canvas.height) * 2 + 1;

		var cameraPosition = this.camera.position;
		var vector = new JSM.THREE.Vector3 (mouseX, mouseY, 0.5);
		vector.unproject (this.camera);
		vector.sub (cameraPosition);
		vector.normalize ();

		var ray = new JSM.THREE.Raycaster (cameraPosition, vector);
		return ray.intersectObjects (this.scene.children);
	};

	JSM.ThreeViewer.prototype.GetObjectsUnderMouse = function ()
	{
		return this.GetObjectsUnderPosition (this.navigation.mouse.curr.x, this.navigation.mouse.curr.y);
	};

	JSM.ThreeViewer.prototype.GetObjectsUnderTouch = function ()
	{
		return this.GetObjectsUnderPosition (this.navigation.touch.curr.x, this.navigation.touch.curr.y);
	};

	JSM.ThreeViewer.prototype.ProjectVector = function (x, y, z)
	{
		var width = this.canvas.width;
		var height = this.canvas.height;
		var halfWidth = width / 2;
		var halfHeight = height / 2;

		var vector = new JSM.THREE.Vector3 (x, y, z);
		vector.project (this.camera);
		vector.x = (vector.x * halfWidth) + halfWidth;
		vector.y = -(vector.y * halfHeight) + halfHeight;
		return vector;
	};

	JSM.ThreeViewer.prototype.EnableDraw = function (enable)
	{
		this.enableDraw = enable;
	};

	JSM.ThreeViewer.prototype.Draw = function ()
	{
		if (!this.enableDraw) {
			return;
		}

		if (this.runBeforeRender !== null) {
			this.runBeforeRender ();
		}

		this.camera.position.set (this.cameraMove.eye.x, this.cameraMove.eye.y, this.cameraMove.eye.z);
		this.camera.up.set (this.cameraMove.up.x, this.cameraMove.up.y, this.cameraMove.up.z);
		this.camera.lookAt (new JSM.THREE.Vector3 (this.cameraMove.center.x, this.cameraMove.center.y, this.cameraMove.center.z));

		var lightPosition = new JSM.THREE.Vector3 ().subVectors (this.cameraMove.eye, this.cameraMove.center);
		this.directionalLight.position.set (lightPosition.x, lightPosition.y, lightPosition.z);

		this.renderer.render (this.scene, this.camera);
		
		if (this.runAfterRender !== null) {
			this.runAfterRender ();
		}
		
		if (this.drawLoop) {
			requestAnimationFrame (this.Draw.bind (this));
		}
	};

	JSM.ThreeViewer.prototype.DrawIfNeeded = function ()
	{
		if (!this.drawLoop) {
			this.Draw ();
		}
	};

	JSM.ThreeViewer.prototype.StartDrawLoop = function ()
	{
		this.drawLoop = true;
		this.Draw ();
	};

	JSM.ThreeViewer.prototype.IsRelevantObject = function (threeObj)
	{
		return (threeObj instanceof JSM.THREE.Mesh || threeObj instanceof JSM.THREE.LineSegments || threeObj instanceof JSM.THREE.Points);
	};

	JSM.ThreeViewer.prototype.IsVisibleObject = function (threeObj)
	{
		return this.IsRelevantObject (threeObj) && threeObj.visible;
	};

	return JSM;
});

define('skylark-jsmodeler/main',[
	"skylark-langx/skylark",
	"./core/jsm",
	"./core/timer",
	"./core/algorithm",
	"./core/async",
	"./core/check",
	"./core/jsonloader",
	"./geometry/definitions",
	"./geometry/coord2d",
	"./geometry/coord",
	"./geometry/determinant",
	"./geometry/coordutils",
	"./geometry/matrix",
	"./geometry/coordsystem",
	"./geometry/sector",
	"./geometry/line",
	"./geometry/box",
	"./geometry/sphere",
	"./geometry/transformation",
	"./geometry/plane",
	"./geometry/projection",
	"./geometry/convexhull",
	"./geometry/polygon2d",
	"./geometry/polygon",
	"./geometry/cutpolygon",
	"./geometry/triangulation",
	"./geometry/octree",
	"./geometry/bsptree",
	"./geometry/curves",
	"./geometry/utilities",
	"./geometry/ray",
	"./geometry/path",
	"./modeler/color",
	"./modeler/material",
	"./modeler/materialset",
	"./modeler/body",
	"./modeler/model",
	"./modeler/adjacencyinfo",
	"./modeler/bodyutils",
	"./modeler/textureutils",
	"./modeler/cututils",
	"./modeler/generator",
	"./modeler/camera",
	"./modeler/explode",
	"./modeler/exporter",
	"./modeler/trianglebody",
	"./modeler/trianglemodel",
	"./modeler/converter",
	"./modeler/rayutils",
	"./import/binaryreader",
	"./import/importerutils",
	"./import/importer3ds",
	"./import/importerobj",
	"./import/importerstl",
	"./import/importeroff",
	"./import/importercommon",
	"./renderer/webglutils",
	"./renderer/renderlight",
	"./renderer/rendermaterial",
	"./renderer/rendermesh",
	"./renderer/renderbody",
	"./renderer/shaderprogram",
	"./renderer/renderer",
	"./renderer/pointcloudrenderer",
	"./renderer/renderconverter",
	"./viewer/mouse",
	"./viewer/touch",
	"./viewer/painter",
	"./viewer/drawing",
	"./viewer/navigation",
	"./viewer/softwareviewer",
	"./viewer/spriteviewer",
	"./viewer/viewer",
	"./viewer/pointcloudviewer",
	"./extras/solidgenerator",
	"./extras/extgenerator",
	"./extras/subdivision",
	"./extras/csg",
	"./extras/surfaces",
	"./extensions/svgtomodel/svgtomodel",
	"./extensions/textgenerator/textgenerator",
	"./extensions/threeviewer/threeconverter",
	"./extensions/threeviewer/threeviewer"

],function(skylark,jsm){
	return skylark.attach("intg.jsmodeler",jsm);
});
define('skylark-jsmodeler', ['skylark-jsmodeler/main'], function (main) { return main; });

define('skylark-online3dviewer/InfoTable',[
	"skylark-jquery"
],function($){
	var InfoTable = function (parent)
	{
		this.table = $('<table>').addClass ('infotable').appendTo (parent);
	};

	InfoTable.prototype.AddRow = function (name, value)
	{
		var tableRow = $('<tr>').appendTo (this.table);
		$('<td>').html (name).appendTo (tableRow);
		$('<td>').html (value).appendTo (tableRow);
	};

	InfoTable.prototype.AddColorRow = function (name, color)
	{
		var tableRow = $('<tr>').appendTo (this.table);
		$('<td>').html (name).appendTo (tableRow);

		var valueColumn = document.createElement ('td');
		var valueColumn = $('<td>').appendTo (tableRow);
		
		var colorDiv = $('<div>').addClass ('colorbutton').appendTo (valueColumn);
		colorDiv.attr ('title', '(' + color[0] + ', ' + color[1] + ', ' + color[2] + ')');
		var hexColor = JSM.RGBComponentsToHexColor (color[0] * 255.0, color[1] * 255.0, color[2] * 255.0);
		var colorString = hexColor.toString (16);
		while (colorString.length < 6) {
			colorString = '0' + colorString;
		}
		colorDiv.css ('background', '#' + colorString);
	};

	return InfoTable;	
});
define('skylark-online3dviewer/FloatingControl',[
	"skylark-jquery"
],function($){
	var FloatingControl = function ()
	{
		this.parent = null;
		this.controlDiv = null;
		this.contentDiv = null;
	};

	FloatingControl.prototype.Open = function (parameters)
	{
		if (this.controlDiv !== null) {
			this.Close ();
		}
		this.parent = parameters.parent;
		this.controlDiv = $('<div>').addClass ('control').appendTo ($('body'));
		this.contentDiv = $('<div>').addClass ('controlcontent').html (parameters.text).appendTo (this.controlDiv);	
		this.Resize ();
	};

	FloatingControl.prototype.Close = function ()
	{
		if (this.controlDiv === null) {
			return;
		}
		
		this.controlDiv.remove ();
		this.controlDiv = null;
	};

	FloatingControl.prototype.Resize = function ()
	{
		if (this.controlDiv === null) {
			return;
		}
		
		this.controlDiv.css ('left', (this.parent.offset ().left + (this.parent.width () - this.controlDiv.width ()) / 2.0) + 'px');
		this.controlDiv.css ('top', (this.parent.offset ().top + (this.parent.height () - this.controlDiv.height ()) / 3.0) + 'px');
	};

	return FloatingControl;	
});
define('skylark-online3dviewer/FloatingDialog',[
	"skylark-jquery"
],function($){
	var FloatingDialog = function ()
	{
		this.dialogDiv = null;
		this.contentDiv = null;
	};

	FloatingDialog.prototype.Open = function (parameters)
	{
		function AddButton (dialog, parent, button)
		{
			var buttonDiv = $('<div>').addClass ('dialogbutton').html (button.text).appendTo (parent);
			buttonDiv.click (function () {
				button.callback (dialog);
			});
		}

		if (this.dialogDiv !== null) {
			this.Close ();
		}

		this.dialogDiv = $('<div>').addClass ('dialog').appendTo ($('body'));
		$('<div>').addClass ('dialogtitle').html (parameters.title).appendTo (this.dialogDiv);
		this.contentDiv = $('<div>').addClass ('dialogcontent').appendTo (this.dialogDiv);
		if (parameters.text !== null && parameters.text !== undefined) {
			this.contentDiv.html (parameters.text);
		}
		var buttonsDiv = $('<div>').addClass ('dialogbuttons').appendTo (this.dialogDiv);

		var i, button;
		for (i = 0; i < parameters.buttons.length; i++) {
			button = parameters.buttons[i];
			AddButton (this, buttonsDiv, button);
		}

		document.addEventListener ('click', this.MouseClick.bind (this), true);
		this.Resize ();
	};

	FloatingDialog.prototype.Close = function ()
	{
		if (this.dialogDiv === null) {
			return;
		}
		
		this.dialogDiv.remove ();
		this.dialogDiv = null;
		$('body').unbind ('click');
	};

	FloatingDialog.prototype.GetContentDiv = function ()
	{
		return this.contentDiv;
	};

	FloatingDialog.prototype.Resize = function ()
	{
		if (this.dialogDiv === null) {
			return;
		}
		
		this.dialogDiv.css ('left', ((document.body.clientWidth - this.dialogDiv.width ()) / 2.0) + 'px');
		this.dialogDiv.css ('top', ((document.body.clientHeight - this.dialogDiv.height ()) / 3.0) + 'px');
	};

	FloatingDialog.prototype.MouseClick = function (clickEvent)
	{
		if (this.dialogDiv === null) {
			return;
		}

		var dialogClicked = false;
		var target = clickEvent.target;
		while (target !== null) {
			if (target === this.dialogDiv.get ()[0]) {
				dialogClicked = true;
			}
			target = target.parentElement;
		}
		
		if (!dialogClicked) {
			this.Close ();
		}
	};

	return FloatingDialog;
});
define('skylark-online3dviewer/ExtensionInterface',[],function(){
	var ExtensionInterface = function (app)
	{
		this.app = app;
	};

	ExtensionInterface.prototype.GetButtonsDiv = function ()
	{
		return this.app.extensionButtons.GetButtonsDiv ();
	};

	ExtensionInterface.prototype.GetModelJson = function ()
	{
		return this.app.viewer.GetJsonData ();
	};

	return ExtensionInterface;	
});
define('skylark-online3dviewer/ExtensionButtons',[
	"skylark-jquery"
],function($){
	var ExtensionButtons = function (parent)
	{
		this.buttonsDiv = $('<div>').attr ('id', 'extbuttons').appendTo (parent);
	};

	ExtensionButtons.prototype.GetButtonsDiv = function ()
	{
		return this.buttonsDiv;
	};
	
	return ExtensionButtons;	
});
define('skylark-online3dviewer/ImporterProgressBar',[
	"skylark-jquery"
],function($){
	var ImporterProgressBar = function (parent)
	{
		this.parent = parent;
		this.borderDiv = null;
		this.contentDiv = null;
		this.maxCount = null;
		this.maxWidth = null;
	};

	ImporterProgressBar.prototype.Init = function (maxCount)
	{
		this.borderDiv = $('<div>').addClass ('progressbarborder').appendTo (this.parent);
		this.contentDiv = $('<div>').addClass ('progressbarcontent').appendTo (this.borderDiv);

		this.maxCount = maxCount;
		this.maxWidth = this.borderDiv.width ();
		this.Step (0);
	};

	ImporterProgressBar.prototype.Step = function (count)
	{
		var step = this.maxWidth / this.maxCount;
		var width = count * step;
		if (count == this.maxCount) {
			width = this.maxWidth;
		}
		this.contentDiv.width (width);
	};
	
	return ImporterProgressBar;
});
define('skylark-online3dviewer/ImporterButtons',[
	"skylark-jquery"
],function($){
	var ImporterButtons = function (parent)
	{
		this.buttonsDiv = $('<div>').attr ('id', 'buttons').appendTo (parent);
	};

	ImporterButtons.prototype.AddLogo = function (title)
	{
		var logoDiv = $('<div>').attr ('id', 'logo').html (title).appendTo (this.buttonsDiv);
		logoDiv.click (function () {
			location.hash = '';
			location.reload ();
		});
	};

	ImporterButtons.prototype.AddButton = function (image, title, onClick)
	{
		var buttonImage = $('<img>').addClass ('topbutton').attr ('src', image).attr ('title', title).appendTo (this.buttonsDiv);
		buttonImage.click (function () {
			onClick ();
		});
	};

	ImporterButtons.prototype.AddToggleButton = function (image, toggleImage, title, onClick)
	{
		var buttonImage = $('<img>').addClass ('topbutton').attr ('src', image).attr ('title', title).appendTo (this.buttonsDiv);
		var isOn = true;
		buttonImage.click (function () {
			isOn = !isOn;
			if (isOn) {
				buttonImage.attr ('src', image);
			} else {
				buttonImage.attr ('src', toggleImage);
			}
			onClick ();
		});
	};

	return ImporterButtons;	
});
define('skylark-online3dviewer/ImporterMenu',[
	"skylark-jquery",
	"./ImporterProgressBar",
	"./ImporterButtons"	
],function($,ImporterProgressBar,ImporterButtons){
	function IsSet (val)
	{
		return val !== undefined && val !== null;
	}

	var ImporterMenuItem = function (parentDiv, name, parameters)
	{
		this.parentDiv = parentDiv;
		this.parameters = parameters;

		this.menuItemDiv = null;
		this.isOpen = null;
		this.openCloseImage = null;
		this.contentDiv = null;

		this.Initialize (name);
	};

	ImporterMenuItem.prototype.Initialize = function (name)
	{
		this.menuItemDiv = $('<div>').addClass ('menuitem').appendTo (this.parentDiv);
		if (IsSet (this.parameters)) {
			if (IsSet (this.parameters.id)) {
				this.menuItemDiv.attr ('id', this.parameters.id);
			}
			if (IsSet (this.parameters.openCloseButton)) {
				this.AddOpenCloseButton ();
			}
			if (IsSet (this.parameters.userButtons)) {
				var i, userButton;
				for (i = 0; i < this.parameters.userButtons.length; i++) {
					userButton = this.parameters.userButtons[i];
					this.AddUserButton (userButton);
				}
			}
		}

		var menuItemTextDiv = $('<div>').addClass ('menuitem').html (name).attr ('title', name).appendTo (this.menuItemDiv);
		if (IsSet (this.parameters) && IsSet (this.parameters.openCloseButton)) {
			menuItemTextDiv.css ('cursor', 'pointer');
		}
	};

	ImporterMenuItem.prototype.AddSubItem = function (name, parameters)
	{
		return new ImporterMenuItem (this.contentDiv, name, parameters);
	};

	ImporterMenuItem.prototype.GetContentDiv = function ()
	{
		return this.contentDiv;
	};

	ImporterMenuItem.prototype.AddOpenCloseButton = function ()
	{
		var myThis = this;
		this.isOpen = false;
		this.contentDiv = $('<div>').addClass ('menuitemcontent').hide ().appendTo (this.parentDiv);
		this.openCloseImage = $('<img>').addClass ('menubutton').attr ('title', this.parameters.openCloseButton.title).appendTo (this.menuItemDiv);
		this.openCloseImage.attr ('src', 'images/closed.png');
		this.menuItemDiv.click (function () {
			myThis.SetOpen (!myThis.isOpen);
		});
	};

	ImporterMenuItem.prototype.AddUserButton = function (userButton)
	{
		var userImage = $('<img>').addClass ('menubutton').attr ('title', userButton.title).appendTo (this.menuItemDiv);
		if (IsSet (userButton.id)) {
			userImage.attr ('id', userButton.id);
		}
		if (IsSet (userButton.onCreate)) {
			userButton.onCreate (userImage, userButton.userData);
		}
		if (IsSet (userButton.onClick) || IsSet (userButton.onCtrlClick)) {
			userImage.click (function (event) {
				event.stopPropagation ();
				if (event.ctrlKey && IsSet (userButton.onCtrlClick)) {
					userButton.onCtrlClick (userImage, userButton.userData);
				} else if (IsSet (userButton.onClick)) {
					userButton.onClick (userImage, userButton.userData);
				}
			});
		}
	};

	ImporterMenuItem.prototype.SetOpen = function (isOpen)
	{
		this.isOpen = isOpen;
		if (this.isOpen) {
			if (IsSet (this.parameters.openCloseButton.onOpen)) {
				this.parameters.openCloseButton.onOpen (this.contentDiv, this.parameters.openCloseButton.userData);
			}
			this.contentDiv.show ();
			this.openCloseImage.attr ('src', 'images/opened.png');
		} else {
			if (IsSet (this.parameters.openCloseButton.onClose)) {
				this.parameters.openCloseButton.onClose (this.contentDiv, this.parameters.openCloseButton.userData);
			}
			this.contentDiv.hide ();
			this.openCloseImage.attr ('src', 'images/closed.png');
		}
	};

	ImporterMenuItem.prototype.Highlight = function (highlight)
	{
		if (highlight) {
			this.menuItemDiv.addClass ('highlighted');
		} else {
			this.menuItemDiv.removeClass ('highlighted');
		}
	};

	ImporterMenuItem.prototype.IsHighlighted = function ()
	{
		return this.menuItemDiv.hasClass ('highlighted');
	};

	var ImporterMenu = function (parentDiv)
	{
		this.parentDiv = parentDiv;
		this.parentDiv.empty ();
	};

	ImporterMenu.prototype.AddGroup = function (name, parameters)
	{
		return new ImporterMenuItem (this.parentDiv, name, parameters);
	};


	return ImporterMenu;
});

define('skylark-threejs/three',[], function () { 
	'use strict';

	var exports = {};

	// Polyfills

	if ( Number.EPSILON === undefined ) {

		Number.EPSILON = Math.pow( 2, - 52 );

	}

	if ( Number.isInteger === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger

		Number.isInteger = function ( value ) {

			return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;

		};

	}

	//

	if ( Math.sign === undefined ) {

		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign

		Math.sign = function ( x ) {

			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;

		};

	}

	if ( 'name' in Function.prototype === false ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name

		Object.defineProperty( Function.prototype, 'name', {

			get: function () {

				return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];

			}

		} );

	}

	if ( Object.assign === undefined ) {

		// Missing in IE
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign

		Object.assign = function ( target ) {

			if ( target === undefined || target === null ) {

				throw new TypeError( 'Cannot convert undefined or null to object' );

			}

			var output = Object( target );

			for ( var index = 1; index < arguments.length; index ++ ) {

				var source = arguments[ index ];

				if ( source !== undefined && source !== null ) {

					for ( var nextKey in source ) {

						if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {

							output[ nextKey ] = source[ nextKey ];

						}

					}

				}

			}

			return output;

		};

	}

	var REVISION = '111';
	var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
	var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
	var CullFaceNone = 0;
	var CullFaceBack = 1;
	var CullFaceFront = 2;
	var CullFaceFrontBack = 3;
	var FrontFaceDirectionCW = 0;
	var FrontFaceDirectionCCW = 1;
	var BasicShadowMap = 0;
	var PCFShadowMap = 1;
	var PCFSoftShadowMap = 2;
	var VSMShadowMap = 3;
	var FrontSide = 0;
	var BackSide = 1;
	var DoubleSide = 2;
	var FlatShading = 1;
	var SmoothShading = 2;
	var NoColors = 0;
	var FaceColors = 1;
	var VertexColors = 2;
	var NoBlending = 0;
	var NormalBlending = 1;
	var AdditiveBlending = 2;
	var SubtractiveBlending = 3;
	var MultiplyBlending = 4;
	var CustomBlending = 5;
	var AddEquation = 100;
	var SubtractEquation = 101;
	var ReverseSubtractEquation = 102;
	var MinEquation = 103;
	var MaxEquation = 104;
	var ZeroFactor = 200;
	var OneFactor = 201;
	var SrcColorFactor = 202;
	var OneMinusSrcColorFactor = 203;
	var SrcAlphaFactor = 204;
	var OneMinusSrcAlphaFactor = 205;
	var DstAlphaFactor = 206;
	var OneMinusDstAlphaFactor = 207;
	var DstColorFactor = 208;
	var OneMinusDstColorFactor = 209;
	var SrcAlphaSaturateFactor = 210;
	var NeverDepth = 0;
	var AlwaysDepth = 1;
	var LessDepth = 2;
	var LessEqualDepth = 3;
	var EqualDepth = 4;
	var GreaterEqualDepth = 5;
	var GreaterDepth = 6;
	var NotEqualDepth = 7;
	var MultiplyOperation = 0;
	var MixOperation = 1;
	var AddOperation = 2;
	var NoToneMapping = 0;
	var LinearToneMapping = 1;
	var ReinhardToneMapping = 2;
	var Uncharted2ToneMapping = 3;
	var CineonToneMapping = 4;
	var ACESFilmicToneMapping = 5;

	var UVMapping = 300;
	var CubeReflectionMapping = 301;
	var CubeRefractionMapping = 302;
	var EquirectangularReflectionMapping = 303;
	var EquirectangularRefractionMapping = 304;
	var SphericalReflectionMapping = 305;
	var CubeUVReflectionMapping = 306;
	var CubeUVRefractionMapping = 307;
	var RepeatWrapping = 1000;
	var ClampToEdgeWrapping = 1001;
	var MirroredRepeatWrapping = 1002;
	var NearestFilter = 1003;
	var NearestMipmapNearestFilter = 1004;
	var NearestMipMapNearestFilter = 1004;
	var NearestMipmapLinearFilter = 1005;
	var NearestMipMapLinearFilter = 1005;
	var LinearFilter = 1006;
	var LinearMipmapNearestFilter = 1007;
	var LinearMipMapNearestFilter = 1007;
	var LinearMipmapLinearFilter = 1008;
	var LinearMipMapLinearFilter = 1008;
	var UnsignedByteType = 1009;
	var ByteType = 1010;
	var ShortType = 1011;
	var UnsignedShortType = 1012;
	var IntType = 1013;
	var UnsignedIntType = 1014;
	var FloatType = 1015;
	var HalfFloatType = 1016;
	var UnsignedShort4444Type = 1017;
	var UnsignedShort5551Type = 1018;
	var UnsignedShort565Type = 1019;
	var UnsignedInt248Type = 1020;
	var AlphaFormat = 1021;
	var RGBFormat = 1022;
	var RGBAFormat = 1023;
	var LuminanceFormat = 1024;
	var LuminanceAlphaFormat = 1025;
	var RGBEFormat = RGBAFormat;
	var DepthFormat = 1026;
	var DepthStencilFormat = 1027;
	var RedFormat = 1028;
	var RGB_S3TC_DXT1_Format = 33776;
	var RGBA_S3TC_DXT1_Format = 33777;
	var RGBA_S3TC_DXT3_Format = 33778;
	var RGBA_S3TC_DXT5_Format = 33779;
	var RGB_PVRTC_4BPPV1_Format = 35840;
	var RGB_PVRTC_2BPPV1_Format = 35841;
	var RGBA_PVRTC_4BPPV1_Format = 35842;
	var RGBA_PVRTC_2BPPV1_Format = 35843;
	var RGB_ETC1_Format = 36196;
	var RGBA_ASTC_4x4_Format = 37808;
	var RGBA_ASTC_5x4_Format = 37809;
	var RGBA_ASTC_5x5_Format = 37810;
	var RGBA_ASTC_6x5_Format = 37811;
	var RGBA_ASTC_6x6_Format = 37812;
	var RGBA_ASTC_8x5_Format = 37813;
	var RGBA_ASTC_8x6_Format = 37814;
	var RGBA_ASTC_8x8_Format = 37815;
	var RGBA_ASTC_10x5_Format = 37816;
	var RGBA_ASTC_10x6_Format = 37817;
	var RGBA_ASTC_10x8_Format = 37818;
	var RGBA_ASTC_10x10_Format = 37819;
	var RGBA_ASTC_12x10_Format = 37820;
	var RGBA_ASTC_12x12_Format = 37821;
	var LoopOnce = 2200;
	var LoopRepeat = 2201;
	var LoopPingPong = 2202;
	var InterpolateDiscrete = 2300;
	var InterpolateLinear = 2301;
	var InterpolateSmooth = 2302;
	var ZeroCurvatureEnding = 2400;
	var ZeroSlopeEnding = 2401;
	var WrapAroundEnding = 2402;
	var TrianglesDrawMode = 0;
	var TriangleStripDrawMode = 1;
	var TriangleFanDrawMode = 2;
	var LinearEncoding = 3000;
	var sRGBEncoding = 3001;
	var GammaEncoding = 3007;
	var RGBEEncoding = 3002;
	var LogLuvEncoding = 3003;
	var RGBM7Encoding = 3004;
	var RGBM16Encoding = 3005;
	var RGBDEncoding = 3006;
	var BasicDepthPacking = 3200;
	var RGBADepthPacking = 3201;
	var TangentSpaceNormalMap = 0;
	var ObjectSpaceNormalMap = 1;

	var ZeroStencilOp = 0;
	var KeepStencilOp = 7680;
	var ReplaceStencilOp = 7681;
	var IncrementStencilOp = 7682;
	var DecrementStencilOp = 7683;
	var IncrementWrapStencilOp = 34055;
	var DecrementWrapStencilOp = 34056;
	var InvertStencilOp = 5386;

	var NeverStencilFunc = 512;
	var LessStencilFunc = 513;
	var EqualStencilFunc = 514;
	var LessEqualStencilFunc = 515;
	var GreaterStencilFunc = 516;
	var NotEqualStencilFunc = 517;
	var GreaterEqualStencilFunc = 518;
	var AlwaysStencilFunc = 519;

	var StaticDrawUsage = 35044;
	var DynamicDrawUsage = 35048;
	var StreamDrawUsage = 35040;
	var StaticReadUsage = 35045;
	var DynamicReadUsage = 35049;
	var StreamReadUsage = 35041;
	var StaticCopyUsage = 35046;
	var DynamicCopyUsage = 35050;
	var StreamCopyUsage = 35042;

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	function EventDispatcher() {}

	Object.assign( EventDispatcher.prototype, {

		addEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) { this._listeners = {}; }

			var listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		},

		hasEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) { return false; }

			var listeners = this._listeners;

			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

		},

		removeEventListener: function ( type, listener ) {

			if ( this._listeners === undefined ) { return; }

			var listeners = this._listeners;
			var listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				var index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		},

		dispatchEvent: function ( event ) {

			if ( this._listeners === undefined ) { return; }

			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				var array = listenerArray.slice( 0 );

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					array[ i ].call( this, event );

				}

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _lut = [];

	for ( var i = 0; i < 256; i ++ ) {

		_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

	}

	var _Math = {

		DEG2RAD: Math.PI / 180,
		RAD2DEG: 180 / Math.PI,

		generateUUID: function () {

			// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

			var d0 = Math.random() * 0xffffffff | 0;
			var d1 = Math.random() * 0xffffffff | 0;
			var d2 = Math.random() * 0xffffffff | 0;
			var d3 = Math.random() * 0xffffffff | 0;
			var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
				_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
				_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
				_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

			// .toUpperCase() here flattens concatenated strings to save heap memory space.
			return uuid.toUpperCase();

		},

		clamp: function ( value, min, max ) {

			return Math.max( min, Math.min( max, value ) );

		},

		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation

		euclideanModulo: function ( n, m ) {

			return ( ( n % m ) + m ) % m;

		},

		// Linear mapping from range <a1, a2> to range <b1, b2>

		mapLinear: function ( x, a1, a2, b1, b2 ) {

			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

		},

		// https://en.wikipedia.org/wiki/Linear_interpolation

		lerp: function ( x, y, t ) {

			return ( 1 - t ) * x + t * y;

		},

		// http://en.wikipedia.org/wiki/Smoothstep

		smoothstep: function ( x, min, max ) {

			if ( x <= min ) { return 0; }
			if ( x >= max ) { return 1; }

			x = ( x - min ) / ( max - min );

			return x * x * ( 3 - 2 * x );

		},

		smootherstep: function ( x, min, max ) {

			if ( x <= min ) { return 0; }
			if ( x >= max ) { return 1; }

			x = ( x - min ) / ( max - min );

			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

		},

		// Random integer from <low, high> interval

		randInt: function ( low, high ) {

			return low + Math.floor( Math.random() * ( high - low + 1 ) );

		},

		// Random float from <low, high> interval

		randFloat: function ( low, high ) {

			return low + Math.random() * ( high - low );

		},

		// Random float from <-range/2, range/2> interval

		randFloatSpread: function ( range ) {

			return range * ( 0.5 - Math.random() );

		},

		degToRad: function ( degrees ) {

			return degrees * _Math.DEG2RAD;

		},

		radToDeg: function ( radians ) {

			return radians * _Math.RAD2DEG;

		},

		isPowerOfTwo: function ( value ) {

			return ( value & ( value - 1 ) ) === 0 && value !== 0;

		},

		ceilPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

		},

		floorPowerOfTwo: function ( value ) {

			return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	function Vector2( x, y ) {

		this.x = x || 0;
		this.y = y || 0;

	}

	Object.defineProperties( Vector2.prototype, {

		"width": {

			get: function () {

				return this.x;

			},

			set: function ( value ) {

				this.x = value;

			}

		},

		"height": {

			get: function () {

				return this.y;

			},

			set: function ( value ) {

				this.y = value;

			}

		}

	} );

	Object.assign( Vector2.prototype, {

		isVector2: true,

		set: function ( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		},

		multiply: function ( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y;

		},

		cross: function ( v ) {

			return this.x * v.y - this.y * v.x;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		angle: function () {

			// computes the angle in radians with respect to the positive x-axis

			var angle = Math.atan2( this.y, this.x );

			if ( angle < 0 ) { angle += 2 * Math.PI; }

			return angle;

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );

			return this;

		},

		rotateAround: function ( center, angle ) {

			var c = Math.cos( angle ), s = Math.sin( angle );

			var x = this.x - center.x;
			var y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	function Quaternion( x, y, z, w ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;

	}

	Object.assign( Quaternion, {

		slerp: function ( qa, qb, qm, t ) {

			return qm.copy( qa ).slerp( qb, t );

		},

		slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			var x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ],

				x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				var s = 1 - t,

					cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					var sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				var tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

	} );

	Object.defineProperties( Quaternion.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this._onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this._onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this._onChangeCallback();

			}

		},

		w: {

			get: function () {

				return this._w;

			},

			set: function ( value ) {

				this._w = value;
				this._onChangeCallback();

			}

		}

	} );

	Object.assign( Quaternion.prototype, {

		isQuaternion: true,

		set: function ( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._w );

		},

		copy: function ( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;

		},

		setFromEuler: function ( euler, update ) {

			if ( ! ( euler && euler.isEuler ) ) {

				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			var cos = Math.cos;
			var sin = Math.sin;

			var c1 = cos( x / 2 );
			var c2 = cos( y / 2 );
			var c3 = cos( z / 2 );

			var s1 = sin( x / 2 );
			var s2 = sin( y / 2 );
			var s3 = sin( z / 2 );

			if ( order === 'XYZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'YXZ' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'ZXY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'ZYX' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			} else if ( order === 'YZX' ) {

				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;

			} else if ( order === 'XZY' ) {

				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;

			}

			if ( update !== false ) { this._onChangeCallback(); }

			return this;

		},

		setFromAxisAngle: function ( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			var halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this._onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33,
				s;

			if ( trace > 0 ) {

				s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this._onChangeCallback();

			return this;

		},

		setFromUnitVectors: function ( vFrom, vTo ) {

			// assumes direction vectors vFrom and vTo are normalized

			var EPS = 0.000001;

			var r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					this._x = - vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;

				} else {

					this._x = 0;
					this._y = - vFrom.z;
					this._z = vFrom.y;
					this._w = r;

				}

			} else {

				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;

			}

			return this.normalize();

		},

		angleTo: function ( q ) {

			return 2 * Math.acos( Math.abs( _Math.clamp( this.dot( q ), - 1, 1 ) ) );

		},

		rotateTowards: function ( q, step ) {

			var angle = this.angleTo( q );

			if ( angle === 0 ) { return this; }

			var t = Math.min( 1, step / angle );

			this.slerp( q, t );

			return this;

		},

		inverse: function () {

			// quaternion is assumed to have unit length

			return this.conjugate();

		},

		conjugate: function () {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this._onChangeCallback();

			return this;

		},

		dot: function ( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		},

		lengthSq: function () {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		},

		length: function () {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		},

		normalize: function () {

			var l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this._onChangeCallback();

			return this;

		},

		multiply: function ( q, p ) {

			if ( p !== undefined ) {

				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );

			}

			return this.multiplyQuaternions( this, q );

		},

		premultiply: function ( q ) {

			return this.multiplyQuaternions( q, this );

		},

		multiplyQuaternions: function ( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;

		},

		slerp: function ( qb, t ) {

			if ( t === 0 ) { return this; }
			if ( t === 1 ) { return this.copy( qb ); }

			var x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if ( sqrSinHalfTheta <= Number.EPSILON ) {

				var s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;

				this.normalize();
				this._onChangeCallback();

				return this;

			}

			var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this._onChangeCallback();

			return this;

		},

		equals: function ( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this._onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		},

		_onChange: function ( callback ) {

			this._onChangeCallback = callback;

			return this;

		},

		_onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _vector = new Vector3();
	var _quaternion = new Quaternion();

	function Vector3( x, y, z ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;

	}

	Object.assign( Vector3.prototype, {

		isVector3: true,

		set: function ( x, y, z ) {

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		},

		multiply: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );

			}

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		},

		multiplyVectors: function ( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		},

		applyEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

			}

			return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

		},

		applyAxisAngle: function ( axis, angle ) {

			return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

		},

		applyMatrix3: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		},

		applyNormalMatrix: function ( m ) {

			return this.applyMatrix3( m ).normalize();

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		},

		applyQuaternion: function ( q ) {

			var x = this.x, y = this.y, z = this.z;
			var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			var ix = qw * x + qy * z - qz * y;
			var iy = qw * y + qz * x - qx * z;
			var iz = qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		},

		project: function ( camera ) {

			return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

		},

		unproject: function ( camera ) {

			return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

		},

		transformDirection: function ( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			var x = this.x, y = this.y, z = this.z;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		},

		divide: function ( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		},

		// TODO lengthSquared?

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		cross: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );

			}

			return this.crossVectors( this, v );

		},

		crossVectors: function ( a, b ) {

			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		},

		projectOnVector: function ( v ) {

			// v cannot be the zero v

			var scalar = v.dot( this ) / v.lengthSq();

			return this.copy( v ).multiplyScalar( scalar );

		},

		projectOnPlane: function ( planeNormal ) {

			_vector.copy( this ).projectOnVector( planeNormal );

			return this.sub( _vector );

		},

		reflect: function ( normal ) {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		},

		angleTo: function ( v ) {

			var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) { console.error( 'THREE.Vector3: angleTo() can\'t handle zero length vectors.' ); }

			var theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( _Math.clamp( theta, - 1, 1 ) );

		},

		distanceTo: function ( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		},

		distanceToSquared: function ( v ) {

			var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		},

		manhattanDistanceTo: function ( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		},

		setFromSpherical: function ( s ) {

			return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

		},

		setFromSphericalCoords: function ( radius, phi, theta ) {

			var sinPhiRadius = Math.sin( phi ) * radius;

			this.x = sinPhiRadius * Math.sin( theta );
			this.y = Math.cos( phi ) * radius;
			this.z = sinPhiRadius * Math.cos( theta );

			return this;

		},

		setFromCylindrical: function ( c ) {

			return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

		},

		setFromCylindricalCoords: function ( radius, theta, y ) {

			this.x = radius * Math.sin( theta );
			this.y = y;
			this.z = radius * Math.cos( theta );

			return this;

		},

		setFromMatrixPosition: function ( m ) {

			var e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		},

		setFromMatrixScale: function ( m ) {

			var sx = this.setFromMatrixColumn( m, 0 ).length();
			var sy = this.setFromMatrixColumn( m, 1 ).length();
			var sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		},

		setFromMatrixColumn: function ( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 * @author tschw
	 */

	var _vector$1 = new Vector3();

	function Matrix3() {

		this.elements = [

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix3.prototype, {

		isMatrix3: true,

		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new this.constructor().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		},

		setFromMatrix4: function ( m ) {

			var me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		},

		applyToBufferAttribute: function ( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				_vector$1.x = attribute.getX( i );
				_vector$1.y = attribute.getY( i );
				_vector$1.z = attribute.getZ( i );

				_vector$1.applyMatrix3( this );

				attribute.setXYZ( i, _vector$1.x, _vector$1.y, _vector$1.z );

			}

			return attribute;

		},

		multiply: function ( m ) {

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		},

		determinant: function () {

			var te = this.elements;

			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		},

		getInverse: function ( matrix, throwOnDegenerate ) {

			if ( matrix && matrix.isMatrix4 ) {

				console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

			}

			var me = matrix.elements,
				te = this.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
				n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
				n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) {

				var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		},

		transpose: function () {

			var tmp, m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		},

		getNormalMatrix: function ( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

		},

		transposeIntoArray: function ( r ) {

			var m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		},

		setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

			var c = Math.cos( rotation );
			var s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

		},

		scale: function ( sx, sy ) {

			var te = this.elements;

			te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
			te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

			return this;

		},

		rotate: function ( theta ) {

			var c = Math.cos( theta );
			var s = Math.sin( theta );

			var te = this.elements;

			var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
			var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

			te[ 0 ] = c * a11 + s * a21;
			te[ 3 ] = c * a12 + s * a22;
			te[ 6 ] = c * a13 + s * a23;

			te[ 1 ] = - s * a11 + c * a21;
			te[ 4 ] = - s * a12 + c * a22;
			te[ 7 ] = - s * a13 + c * a23;

			return this;

		},

		translate: function ( tx, ty ) {

			var te = this.elements;

			te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
			te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) { return false; }

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			for ( var i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var _canvas;

	var ImageUtils = {

		getDataURL: function ( image ) {

			var canvas;

			if ( typeof HTMLCanvasElement == 'undefined' ) {

				return image.src;

			} else if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				if ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }

				_canvas.width = image.width;
				_canvas.height = image.height;

				var context = _canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

				canvas = _canvas;

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */

	var textureId = 0;

	function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		Object.defineProperty( this, 'id', { value: textureId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';

		this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
		this.mipmaps = [];

		this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;

		this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;

		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;

		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

		this.format = format !== undefined ? format : RGBAFormat;
		this.type = type !== undefined ? type : UnsignedByteType;

		this.offset = new Vector2( 0, 0 );
		this.repeat = new Vector2( 1, 1 );
		this.center = new Vector2( 0, 0 );
		this.rotation = 0;

		this.matrixAutoUpdate = true;
		this.matrix = new Matrix3();

		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

		// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
		//
		// Also changing the encoding after already used by a Material will not automatically make the Material
		// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
		this.encoding = encoding !== undefined ? encoding : LinearEncoding;

		this.version = 0;
		this.onUpdate = null;

	}

	Texture.DEFAULT_IMAGE = undefined;
	Texture.DEFAULT_MAPPING = UVMapping;

	Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Texture,

		isTexture: true,

		updateMatrix: function () {

			this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.encoding = source.encoding;

			return this;

		},

		toJSON: function ( meta ) {

			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			var output = {

				metadata: {
					version: 4.5,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				mapping: this.mapping,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,

				wrap: [ this.wrapS, this.wrapT ],

				format: this.format,
				type: this.type,
				encoding: this.encoding,

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY,

				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment

			};

			if ( this.image !== undefined ) {

				// TODO: Move to THREE.Image

				var image = this.image;

				if ( image.uuid === undefined ) {

					image.uuid = _Math.generateUUID(); // UGH

				}

				if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {

					var url;

					if ( Array.isArray( image ) ) {

						// process array of images e.g. CubeTexture

						url = [];

						for ( var i = 0, l = image.length; i < l; i ++ ) {

							url.push( ImageUtils.getDataURL( image[ i ] ) );

						}

					} else {

						// process single image

						url = ImageUtils.getDataURL( image );

					}

					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: url
					};

				}

				output.image = image.uuid;

			}

			if ( ! isRootObject ) {

				meta.textures[ this.uuid ] = output;

			}

			return output;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		},

		transformUv: function ( uv ) {

			if ( this.mapping !== UVMapping ) { return uv; }

			uv.applyMatrix3( this.matrix );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}
						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}
						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

			return uv;

		}

	} );

	Object.defineProperty( Texture.prototype, "needsUpdate", {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Vector4( x, y, z, w ) {

		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;

	}

	Object.defineProperties( Vector4.prototype, {

		"width": {

			get: function () {

				return this.z;

			},

			set: function ( value ) {

				this.z = value;

			}

		},

		"height": {

			get: function () {

				return this.w;

			},

			set: function ( value ) {

				this.w = value;

			}

		}

	} );

	Object.assign( Vector4.prototype, {

		isVector4: true,

		set: function ( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		},

		setScalar: function ( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		},

		setX: function ( x ) {

			this.x = x;

			return this;

		},

		setY: function ( y ) {

			this.y = y;

			return this;

		},

		setZ: function ( z ) {

			this.z = z;

			return this;

		},

		setW: function ( w ) {

			this.w = w;

			return this;

		},

		setComponent: function ( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		},

		getComponent: function ( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		},

		clone: function () {

			return new this.constructor( this.x, this.y, this.z, this.w );

		},

		copy: function ( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		},

		add: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );

			}

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		},

		addScalar: function ( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		},

		addVectors: function ( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		},

		addScaledVector: function ( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		},

		sub: function ( v, w ) {

			if ( w !== undefined ) {

				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );

			}

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		},

		subScalar: function ( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		},

		subVectors: function ( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		},

		multiplyScalar: function ( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		},

		applyMatrix4: function ( m ) {

			var x = this.x, y = this.y, z = this.z, w = this.w;
			var e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		},

		divideScalar: function ( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		},

		setAxisAngleFromQuaternion: function ( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			var s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		},

		setAxisAngleFromRotationMatrix: function ( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
			                   ( m13 - m31 ) * ( m13 - m31 ) +
			                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) { s = 1; }

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		},

		min: function ( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		},

		max: function ( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		},

		clamp: function ( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		},

		clampScalar: function ( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

			return this;

		},

		clampLength: function ( min, max ) {

			var length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		},

		floor: function () {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		},

		ceil: function () {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		},

		round: function () {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		},

		roundToZero: function () {

			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

			return this;

		},

		negate: function () {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		},

		dot: function ( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		},

		lengthSq: function () {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		},

		length: function () {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		},

		manhattanLength: function () {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		},

		normalize: function () {

			return this.divideScalar( this.length() || 1 );

		},

		setLength: function ( length ) {

			return this.normalize().multiplyScalar( length );

		},

		lerp: function ( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		},

		lerpVectors: function ( v1, v2, alpha ) {

			return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

		},

		equals: function ( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		},

		fromBufferAttribute: function ( attribute, index, offset ) {

			if ( offset !== undefined ) {

				console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );

			}

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		}

	} );

	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 * @author Marius Kintel / https://github.com/kintel
	 */

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	function WebGLRenderTarget( width, height, options ) {

		this.width = width;
		this.height = height;

		this.scissor = new Vector4( 0, 0, width, height );
		this.scissorTest = false;

		this.viewport = new Vector4( 0, 0, width, height );

		options = options || {};

		this.texture = new Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );

		this.texture.image = {};
		this.texture.image.width = width;
		this.texture.image.height = height;

		this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
		this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
		this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

	}

	WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: WebGLRenderTarget,

		isWebGLRenderTarget: true,

		setSize: function ( width, height ) {

			if ( this.width !== width || this.height !== height ) {

				this.width = width;
				this.height = height;

				this.texture.image.width = width;
				this.texture.image.height = height;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.width = source.width;
			this.height = source.height;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
			this.depthTexture = source.depthTexture;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author Matt DesLauriers / @mattdesl
	 */

	function WebGLMultisampleRenderTarget( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.samples = 4;

	}

	WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

		constructor: WebGLMultisampleRenderTarget,

		isWebGLMultisampleRenderTarget: true,

		copy: function ( source ) {

			WebGLRenderTarget.prototype.copy.call( this, source );

			this.samples = source.samples;

			return this;

		}

	} );

	var _v1 = new Vector3();
	var _m1 = new Matrix4();
	var _zero = new Vector3( 0, 0, 0 );
	var _one = new Vector3( 1, 1, 1 );
	var _x = new Vector3();
	var _y = new Vector3();
	var _z = new Vector3();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Matrix4() {

		this.elements = [

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		];

		if ( arguments.length > 0 ) {

			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

		}

	}

	Object.assign( Matrix4.prototype, {

		isMatrix4: true,

		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			var te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		},

		identity: function () {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		clone: function () {

			return new Matrix4().fromArray( this.elements );

		},

		copy: function ( m ) {

			var te = this.elements;
			var me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		},

		copyPosition: function ( m ) {

			var te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		},

		extractBasis: function ( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		},

		makeBasis: function ( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		},

		extractRotation: function ( m ) {

			// this method does not support reflection matrices

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
			var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
			var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;
			te[ 3 ] = 0;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;
			te[ 7 ] = 0;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;
			te[ 11 ] = 0;

			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromEuler: function ( euler ) {

			if ( ! ( euler && euler.isEuler ) ) {

				console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			var te = this.elements;

			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				var ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				var ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// bottom row
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// last column
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		},

		makeRotationFromQuaternion: function ( q ) {

			return this.compose( _zero, q, _one );

		},

		lookAt: function ( eye, target, up ) {

			var te = this.elements;

			_z.subVectors( eye, target );

			if ( _z.lengthSq() === 0 ) {

				// eye and target are in the same position

				_z.z = 1;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

			if ( _x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					_z.x += 0.0001;

				} else {

					_z.z += 0.0001;

				}

				_z.normalize();
				_x.crossVectors( up, _z );

			}

			_x.normalize();
			_y.crossVectors( _z, _x );

			te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
			te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
			te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

			return this;

		},

		multiply: function ( m, n ) {

			if ( n !== undefined ) {

				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );

			}

			return this.multiplyMatrices( this, m );

		},

		premultiply: function ( m ) {

			return this.multiplyMatrices( m, this );

		},

		multiplyMatrices: function ( a, b ) {

			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;

			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		},

		multiplyScalar: function ( s ) {

			var te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		},

		applyToBufferAttribute: function ( attribute ) {

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				_v1.x = attribute.getX( i );
				_v1.y = attribute.getY( i );
				_v1.z = attribute.getZ( i );

				_v1.applyMatrix4( this );

				attribute.setXYZ( i, _v1.x, _v1.y, _v1.z );

			}

			return attribute;

		},

		determinant: function () {

			var te = this.elements;

			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		},

		transpose: function () {

			var te = this.elements;
			var tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		},

		setPosition: function ( x, y, z ) {

			var te = this.elements;

			if ( x.isVector3 ) {

				te[ 12 ] = x.x;
				te[ 13 ] = x.y;
				te[ 14 ] = x.z;

			} else {

				te[ 12 ] = x;
				te[ 13 ] = y;
				te[ 14 ] = z;

			}

			return this;

		},

		getInverse: function ( m, throwOnDegenerate ) {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements,
				me = m.elements,

				n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
				n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
				n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
				n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) {

				var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

				if ( throwOnDegenerate === true ) {

					throw new Error( msg );

				} else {

					console.warn( msg );

				}

				return this.identity();

			}

			var detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		},

		scale: function ( v ) {

			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		},

		getMaxScaleOnAxis: function () {

			var te = this.elements;

			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		},

		makeTranslation: function ( x, y, z ) {

			this.set(

				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationX: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationY: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		},

		makeRotationZ: function ( theta ) {

			var c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeRotationAxis: function ( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			 return this;

		},

		makeScale: function ( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		},

		makeShear: function ( x, y, z ) {

			this.set(

				1, y, z, 0,
				x, 1, z, 0,
				x, y, 1, 0,
				0, 0, 0, 1

			);

			return this;

		},

		compose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			var x2 = x + x,	y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;

			var sx = scale.x, sy = scale.y, sz = scale.z;

			te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
			te[ 1 ] = ( xy + wz ) * sx;
			te[ 2 ] = ( xz - wy ) * sx;
			te[ 3 ] = 0;

			te[ 4 ] = ( xy - wz ) * sy;
			te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
			te[ 6 ] = ( yz + wx ) * sy;
			te[ 7 ] = 0;

			te[ 8 ] = ( xz + wy ) * sz;
			te[ 9 ] = ( yz - wx ) * sz;
			te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
			te[ 11 ] = 0;

			te[ 12 ] = position.x;
			te[ 13 ] = position.y;
			te[ 14 ] = position.z;
			te[ 15 ] = 1;

			return this;

		},

		decompose: function ( position, quaternion, scale ) {

			var te = this.elements;

			var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) { sx = - sx; }

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			_m1.copy( this );

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			_m1.elements[ 0 ] *= invSX;
			_m1.elements[ 1 ] *= invSX;
			_m1.elements[ 2 ] *= invSX;

			_m1.elements[ 4 ] *= invSY;
			_m1.elements[ 5 ] *= invSY;
			_m1.elements[ 6 ] *= invSY;

			_m1.elements[ 8 ] *= invSZ;
			_m1.elements[ 9 ] *= invSZ;
			_m1.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( _m1 );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		},

		makePerspective: function ( left, right, top, bottom, near, far ) {

			if ( far === undefined ) {

				console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

			}

			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );

			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		},

		makeOrthographic: function ( left, right, top, bottom, near, far ) {

			var te = this.elements;
			var w = 1.0 / ( right - left );
			var h = 1.0 / ( top - bottom );
			var p = 1.0 / ( far - near );

			var x = ( right + left ) * w;
			var y = ( top + bottom ) * h;
			var z = ( far + near ) * p;

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

			return this;

		},

		equals: function ( matrix ) {

			var te = this.elements;
			var me = matrix.elements;

			for ( var i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) { return false; }

			}

			return true;

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			for ( var i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			var te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */

	var _matrix = new Matrix4();
	var _quaternion$1 = new Quaternion();

	function Euler( x, y, z, order ) {

		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || Euler.DefaultOrder;

	}

	Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

	Euler.DefaultOrder = 'XYZ';

	Object.defineProperties( Euler.prototype, {

		x: {

			get: function () {

				return this._x;

			},

			set: function ( value ) {

				this._x = value;
				this._onChangeCallback();

			}

		},

		y: {

			get: function () {

				return this._y;

			},

			set: function ( value ) {

				this._y = value;
				this._onChangeCallback();

			}

		},

		z: {

			get: function () {

				return this._z;

			},

			set: function ( value ) {

				this._z = value;
				this._onChangeCallback();

			}

		},

		order: {

			get: function () {

				return this._order;

			},

			set: function ( value ) {

				this._order = value;
				this._onChangeCallback();

			}

		}

	} );

	Object.assign( Euler.prototype, {

		isEuler: true,

		set: function ( x, y, z, order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;

			this._onChangeCallback();

			return this;

		},

		clone: function () {

			return new this.constructor( this._x, this._y, this._z, this._order );

		},

		copy: function ( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;

		},

		setFromRotationMatrix: function ( m, order, update ) {

			var clamp = _Math.clamp;

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			order = order || this._order;

			if ( order === 'XYZ' ) {

				this._y = Math.asin( clamp( m13, - 1, 1 ) );

				if ( Math.abs( m13 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );

				} else {

					this._x = Math.atan2( m32, m22 );
					this._z = 0;

				}

			} else if ( order === 'YXZ' ) {

				this._x = Math.asin( - clamp( m23, - 1, 1 ) );

				if ( Math.abs( m23 ) < 0.9999999 ) {

					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );

				} else {

					this._y = Math.atan2( - m31, m11 );
					this._z = 0;

				}

			} else if ( order === 'ZXY' ) {

				this._x = Math.asin( clamp( m32, - 1, 1 ) );

				if ( Math.abs( m32 ) < 0.9999999 ) {

					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );

				} else {

					this._y = 0;
					this._z = Math.atan2( m21, m11 );

				}

			} else if ( order === 'ZYX' ) {

				this._y = Math.asin( - clamp( m31, - 1, 1 ) );

				if ( Math.abs( m31 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );

				} else {

					this._x = 0;
					this._z = Math.atan2( - m12, m22 );

				}

			} else if ( order === 'YZX' ) {

				this._z = Math.asin( clamp( m21, - 1, 1 ) );

				if ( Math.abs( m21 ) < 0.9999999 ) {

					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );

				} else {

					this._x = 0;
					this._y = Math.atan2( m13, m33 );

				}

			} else if ( order === 'XZY' ) {

				this._z = Math.asin( - clamp( m12, - 1, 1 ) );

				if ( Math.abs( m12 ) < 0.9999999 ) {

					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );

				} else {

					this._x = Math.atan2( - m23, m33 );
					this._y = 0;

				}

			} else {

				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

			}

			this._order = order;

			if ( update !== false ) { this._onChangeCallback(); }

			return this;

		},

		setFromQuaternion: function ( q, order, update ) {

			_matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( _matrix, order, update );

		},

		setFromVector3: function ( v, order ) {

			return this.set( v.x, v.y, v.z, order || this._order );

		},

		reorder: function ( newOrder ) {

			// WARNING: this discards revolution information -bhouston

			_quaternion$1.setFromEuler( this );

			return this.setFromQuaternion( _quaternion$1, newOrder );

		},

		equals: function ( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		},

		fromArray: function ( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }

			this._onChangeCallback();

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		},

		toVector3: function ( optionalResult ) {

			if ( optionalResult ) {

				return optionalResult.set( this._x, this._y, this._z );

			} else {

				return new Vector3( this._x, this._y, this._z );

			}

		},

		_onChange: function ( callback ) {

			this._onChangeCallback = callback;

			return this;

		},

		_onChangeCallback: function () {}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Layers() {

		this.mask = 1 | 0;

	}

	Object.assign( Layers.prototype, {

		set: function ( channel ) {

			this.mask = 1 << channel | 0;

		},

		enable: function ( channel ) {

			this.mask |= 1 << channel | 0;

		},

		enableAll: function () {

			this.mask = 0xffffffff | 0;

		},

		toggle: function ( channel ) {

			this.mask ^= 1 << channel | 0;

		},

		disable: function ( channel ) {

			this.mask &= ~ ( 1 << channel | 0 );

		},

		disableAll: function () {

			this.mask = 0;

		},

		test: function ( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

	} );

	var _object3DId = 0;

	var _v1$1 = new Vector3();
	var _q1 = new Quaternion();
	var _m1$1 = new Matrix4();
	var _target = new Vector3();

	var _position = new Vector3();
	var _scale = new Vector3();
	var _quaternion$2 = new Quaternion();

	var _xAxis = new Vector3( 1, 0, 0 );
	var _yAxis = new Vector3( 0, 1, 0 );
	var _zAxis = new Vector3( 0, 0, 1 );

	var _addedEvent = { type: 'added' };
	var _removedEvent = { type: 'removed' };

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */

	function Object3D() {

		Object.defineProperty( this, 'id', { value: _object3DId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Object3D';

		this.parent = null;
		this.children = [];

		this.up = Object3D.DefaultUp.clone();

		var position = new Vector3();
		var rotation = new Euler();
		var quaternion = new Quaternion();
		var scale = new Vector3( 1, 1, 1 );

		function onRotationChange() {

			quaternion.setFromEuler( rotation, false );

		}

		function onQuaternionChange() {

			rotation.setFromQuaternion( quaternion, undefined, false );

		}

		rotation._onChange( onRotationChange );
		quaternion._onChange( onQuaternionChange );

		Object.defineProperties( this, {
			position: {
				configurable: true,
				enumerable: true,
				value: position
			},
			rotation: {
				configurable: true,
				enumerable: true,
				value: rotation
			},
			quaternion: {
				configurable: true,
				enumerable: true,
				value: quaternion
			},
			scale: {
				configurable: true,
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new Matrix4()
			},
			normalMatrix: {
				value: new Matrix3()
			}
		} );

		this.matrix = new Matrix4();
		this.matrixWorld = new Matrix4();

		this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;

		this.layers = new Layers();
		this.visible = true;

		this.castShadow = false;
		this.receiveShadow = false;

		this.frustumCulled = true;
		this.renderOrder = 0;

		this.userData = {};

	}

	Object3D.DefaultUp = new Vector3( 0, 1, 0 );
	Object3D.DefaultMatrixAutoUpdate = true;

	Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Object3D,

		isObject3D: true,

		onBeforeRender: function () {},
		onAfterRender: function () {},

		applyMatrix: function ( matrix ) {

			if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

			this.matrix.premultiply( matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		},

		applyQuaternion: function ( q ) {

			this.quaternion.premultiply( q );

			return this;

		},

		setRotationFromAxisAngle: function ( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		},

		setRotationFromEuler: function ( euler ) {

			this.quaternion.setFromEuler( euler, true );

		},

		setRotationFromMatrix: function ( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		},

		setRotationFromQuaternion: function ( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		},

		rotateOnAxis: function ( axis, angle ) {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( _q1 );

			return this;

		},

		rotateOnWorldAxis: function ( axis, angle ) {

			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.premultiply( _q1 );

			return this;

		},

		rotateX: function ( angle ) {

			return this.rotateOnAxis( _xAxis, angle );

		},

		rotateY: function ( angle ) {

			return this.rotateOnAxis( _yAxis, angle );

		},

		rotateZ: function ( angle ) {

			return this.rotateOnAxis( _zAxis, angle );

		},

		translateOnAxis: function ( axis, distance ) {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			_v1$1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( _v1$1.multiplyScalar( distance ) );

			return this;

		},

		translateX: function ( distance ) {

			return this.translateOnAxis( _xAxis, distance );

		},

		translateY: function ( distance ) {

			return this.translateOnAxis( _yAxis, distance );

		},

		translateZ: function ( distance ) {

			return this.translateOnAxis( _zAxis, distance );

		},

		localToWorld: function ( vector ) {

			return vector.applyMatrix4( this.matrixWorld );

		},

		worldToLocal: function ( vector ) {

			return vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );

		},

		lookAt: function ( x, y, z ) {

			// This method does not support objects having non-uniformly-scaled parent(s)

			if ( x.isVector3 ) {

				_target.copy( x );

			} else {

				_target.set( x, y, z );

			}

			var parent = this.parent;

			this.updateWorldMatrix( true, false );

			_position.setFromMatrixPosition( this.matrixWorld );

			if ( this.isCamera || this.isLight ) {

				_m1$1.lookAt( _position, _target, this.up );

			} else {

				_m1$1.lookAt( _target, _position, this.up );

			}

			this.quaternion.setFromRotationMatrix( _m1$1 );

			if ( parent ) {

				_m1$1.extractRotation( parent.matrixWorld );
				_q1.setFromRotationMatrix( _m1$1 );
				this.quaternion.premultiply( _q1.inverse() );

			}

		},

		add: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;

			}

			if ( ( object && object.isObject3D ) ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				this.children.push( object );

				object.dispatchEvent( _addedEvent );

			} else {

				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

			}

			return this;

		},

		remove: function ( object ) {

			if ( arguments.length > 1 ) {

				for ( var i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

				return this;

			}

			var index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;
				this.children.splice( index, 1 );

				object.dispatchEvent( _removedEvent );

			}

			return this;

		},

		attach: function ( object ) {

			// adds object as a child of this, while maintaining the object's world transform

			this.updateWorldMatrix( true, false );

			_m1$1.getInverse( this.matrixWorld );

			if ( object.parent !== null ) {

				object.parent.updateWorldMatrix( true, false );

				_m1$1.multiply( object.parent.matrixWorld );

			}

			object.applyMatrix( _m1$1 );

			object.updateWorldMatrix( false, false );

			this.add( object );

			return this;

		},

		getObjectById: function ( id ) {

			return this.getObjectByProperty( 'id', id );

		},

		getObjectByName: function ( name ) {

			return this.getObjectByProperty( 'name', name );

		},

		getObjectByProperty: function ( name, value ) {

			if ( this[ name ] === value ) { return this; }

			for ( var i = 0, l = this.children.length; i < l; i ++ ) {

				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		},

		getWorldPosition: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			return target.setFromMatrixPosition( this.matrixWorld );

		},

		getWorldQuaternion: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
				target = new Quaternion();

			}

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( _position, target, _scale );

			return target;

		},

		getWorldScale: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( _position, _quaternion$2, target );

			return target;

		},

		getWorldDirection: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			var e = this.matrixWorld.elements;

			return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

		},

		raycast: function () {},

		traverse: function ( callback ) {

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		},

		traverseVisible: function ( callback ) {

			if ( this.visible === false ) { return; }

			callback( this );

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		},

		traverseAncestors: function ( callback ) {

			var parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		},

		updateMatrix: function () {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		},

		updateMatrixWorld: function ( force ) {

			if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

			if ( this.matrixWorldNeedsUpdate || force ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( force );

			}

		},

		updateWorldMatrix: function ( updateParents, updateChildren ) {

			var parent = this.parent;

			if ( updateParents === true && parent !== null ) {

				parent.updateWorldMatrix( true, false );

			}

			if ( this.matrixAutoUpdate ) { this.updateMatrix(); }

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			// update children

			if ( updateChildren === true ) {

				var children = this.children;

				for ( var i = 0, l = children.length; i < l; i ++ ) {

					children[ i ].updateWorldMatrix( false, true );

				}

			}

		},

		toJSON: function ( meta ) {

			// meta is a string when called from JSON.stringify
			var isRootObject = ( meta === undefined || typeof meta === 'string' );

			var output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {}
				};

				output.metadata = {
					version: 4.5,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			var object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) { object.name = this.name; }
			if ( this.castShadow === true ) { object.castShadow = true; }
			if ( this.receiveShadow === true ) { object.receiveShadow = true; }
			if ( this.visible === false ) { object.visible = false; }
			if ( this.frustumCulled === false ) { object.frustumCulled = false; }
			if ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }
			if ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }

			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();

			if ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }

			// object specific properties

			if ( this.isMesh && this.drawMode !== TrianglesDrawMode ) { object.drawMode = this.drawMode; }

			if ( this.isInstancedMesh ) {

				object.type = 'InstancedMesh';
				object.count = this.count;
				object.instanceMatrix = this.instanceMatrix.toJSON();

			}

			//

			function serialize( library, element ) {

				if ( library[ element.uuid ] === undefined ) {

					library[ element.uuid ] = element.toJSON( meta );

				}

				return element.uuid;

			}

			if ( this.isMesh || this.isLine || this.isPoints ) {

				object.geometry = serialize( meta.geometries, this.geometry );

				var parameters = this.geometry.parameters;

				if ( parameters !== undefined && parameters.shapes !== undefined ) {

					var shapes = parameters.shapes;

					if ( Array.isArray( shapes ) ) {

						for ( var i = 0, l = shapes.length; i < l; i ++ ) {

							var shape = shapes[ i ];

							serialize( meta.shapes, shape );

						}

					} else {

						serialize( meta.shapes, shapes );

					}

				}

			}

			if ( this.material !== undefined ) {

				if ( Array.isArray( this.material ) ) {

					var uuids = [];

					for ( var i = 0, l = this.material.length; i < l; i ++ ) {

						uuids.push( serialize( meta.materials, this.material[ i ] ) );

					}

					object.material = uuids;

				} else {

					object.material = serialize( meta.materials, this.material );

				}

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( var i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			if ( isRootObject ) {

				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
				var shapes = extractFromCache( meta.shapes );

				if ( geometries.length > 0 ) { output.geometries = geometries; }
				if ( materials.length > 0 ) { output.materials = materials; }
				if ( textures.length > 0 ) { output.textures = textures; }
				if ( images.length > 0 ) { output.images = images; }
				if ( shapes.length > 0 ) { output.shapes = shapes; }

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				var values = [];
				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}
				return values;

			}

		},

		clone: function ( recursive ) {

			return new this.constructor().copy( this, recursive );

		},

		copy: function ( source, recursive ) {

			if ( recursive === undefined ) { recursive = true; }

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.layers.mask = source.layers.mask;
			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( var i = 0; i < source.children.length; i ++ ) {

					var child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Scene() {

		Object3D.call( this );

		this.type = 'Scene';

		this.background = null;
		this.fog = null;
		this.overrideMaterial = null;

		this.autoUpdate = true; // checked by the renderer

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

		}

	}

	Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Scene,

		isScene: true,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			if ( source.background !== null ) { this.background = source.background.clone(); }
			if ( source.fog !== null ) { this.fog = source.fog.clone(); }
			if ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }

			this.autoUpdate = source.autoUpdate;
			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			if ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }
			if ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }

			return data;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	var _points = [
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3(),
		new Vector3()
	];

	var _vector$2 = new Vector3();

	var _box = new Box3();

	// triangle centered vertices

	var _v0 = new Vector3();
	var _v1$2 = new Vector3();
	var _v2 = new Vector3();

	// triangle edge vectors

	var _f0 = new Vector3();
	var _f1 = new Vector3();
	var _f2 = new Vector3();

	var _center = new Vector3();
	var _extents = new Vector3();
	var _triangleNormal = new Vector3();
	var _testAxis = new Vector3();

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );

	}


	Object.assign( Box3.prototype, {

		isBox3: true,

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromArray: function ( array ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = array.length; i < l; i += 3 ) {

				var x = array[ i ];
				var y = array[ i + 1 ];
				var z = array[ i + 2 ];

				if ( x < minX ) { minX = x; }
				if ( y < minY ) { minY = y; }
				if ( z < minZ ) { minZ = z; }

				if ( x > maxX ) { maxX = x; }
				if ( y > maxY ) { maxY = y; }
				if ( z > maxZ ) { maxZ = z; }

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromBufferAttribute: function ( attribute ) {

			var minX = + Infinity;
			var minY = + Infinity;
			var minZ = + Infinity;

			var maxX = - Infinity;
			var maxY = - Infinity;
			var maxZ = - Infinity;

			for ( var i = 0, l = attribute.count; i < l; i ++ ) {

				var x = attribute.getX( i );
				var y = attribute.getY( i );
				var z = attribute.getZ( i );

				if ( x < minX ) { minX = x; }
				if ( y < minY ) { minY = y; }
				if ( z < minZ ) { minZ = z; }

				if ( x > maxX ) { maxX = x; }
				if ( y > maxY ) { maxY = y; }
				if ( z > maxZ ) { maxZ = z; }

			}

			this.min.set( minX, minY, minZ );
			this.max.set( maxX, maxY, maxZ );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function ( center, size ) {

			var halfSize = _vector$2.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		},

		setFromObject: function ( object ) {

			this.makeEmpty();

			return this.expandByObject( object );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getCenter() target is now required' );
				target = new Vector3();

			}

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getSize() target is now required' );
				target = new Vector3();

			}

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		expandByObject: function ( object ) {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			object.updateWorldMatrix( false, false );

			var geometry = object.geometry;

			if ( geometry !== undefined ) {

				if ( geometry.boundingBox === null ) {

					geometry.computeBoundingBox();

				}

				_box.copy( geometry.boundingBox );
				_box.applyMatrix4( object.matrixWorld );

				this.expandByPoint( _box.min );
				this.expandByPoint( _box.max );

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				this.expandByObject( children[ i ] );

			}

			return this;

		},

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;

		},

		getParameter: function ( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .getParameter() target is now required' );
				target = new Vector3();

			}

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		},

		intersectsBox: function ( box ) {

			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

		},

		intersectsSphere: function ( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, _vector$2 );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return _vector$2.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		},

		intersectsPlane: function ( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			var min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= - plane.constant && max >= - plane.constant );

		},

		intersectsTriangle: function ( triangle ) {

			if ( this.isEmpty() ) {

				return false;

			}

			// compute box center and extents
			this.getCenter( _center );
			_extents.subVectors( this.max, _center );

			// translate triangle to aabb origin
			_v0.subVectors( triangle.a, _center );
			_v1$2.subVectors( triangle.b, _center );
			_v2.subVectors( triangle.c, _center );

			// compute edge vectors for triangle
			_f0.subVectors( _v1$2, _v0 );
			_f1.subVectors( _v2, _v1$2 );
			_f2.subVectors( _v0, _v2 );

			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
			var axes = [
				0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
				_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
				- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
			];
			if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

				return false;

			}

			// test 3 face normals from the aabb
			axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
			if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {

				return false;

			}

			// finally testing the face normal of the triangle
			// use already existing triangle edge vectors here
			_triangleNormal.crossVectors( _f0, _f1 );
			axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

			return satForAxes( axes, _v0, _v1$2, _v2, _extents );

		},

		clampPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box3: .clampPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function ( point ) {

			var clampedPoint = _vector$2.copy( point ).clamp( this.min, this.max );

			return clampedPoint.sub( point ).length();

		},

		getBoundingSphere: function ( target ) {

			if ( target === undefined ) {

				console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
				//target = new Sphere(); // removed to avoid cyclic dependency

			}

			this.getCenter( target.center );

			target.radius = this.getSize( _vector$2 ).length() * 0.5;

			return target;

		},

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if ( this.isEmpty() ) { this.makeEmpty(); }

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		applyMatrix4: function ( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) { return this; }

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

			this.setFromPoints( _points );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	function satForAxes( axes, v0, v1, v2, extents ) {

		var i, j;

		for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {

			_testAxis.fromArray( axes, i );
			// project the aabb onto the seperating axis
			var r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
			// project all 3 vertices of the triangle onto the seperating axis
			var p0 = v0.dot( _testAxis );
			var p1 = v1.dot( _testAxis );
			var p2 = v2.dot( _testAxis );
			// actual test, basically see if either of the most extreme of the triangle points intersects r
			if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

				// points of the projected triangle are outside the projected half-length of the aabb
				// the axis is seperating and we can exit
				return false;

			}

		}

		return true;

	}

	var _box$1 = new Box3();

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Sphere( center, radius ) {

		this.center = ( center !== undefined ) ? center : new Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;

	}

	Object.assign( Sphere.prototype, {

		set: function ( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		},

		setFromPoints: function ( points, optionalCenter ) {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				_box$1.setFromPoints( points ).getCenter( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		},

		empty: function () {

			return ( this.radius <= 0 );

		},

		containsPoint: function ( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		},

		distanceToPoint: function ( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		},

		intersectsSphere: function ( sphere ) {

			var radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		},

		intersectsBox: function ( box ) {

			return box.intersectsSphere( this );

		},

		intersectsPlane: function ( plane ) {

			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

		},

		clampPoint: function ( point, target ) {

			var deltaLengthSq = this.center.distanceToSquared( point );

			if ( target === undefined ) {

				console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
				target = new Vector3();

			}

			target.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				target.sub( this.center ).normalize();
				target.multiplyScalar( this.radius ).add( this.center );

			}

			return target;

		},

		getBoundingBox: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
				target = new Box3();

			}

			target.set( this.center, this.center );
			target.expandByScalar( this.radius );

			return target;

		},

		applyMatrix4: function ( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		},

		translate: function ( offset ) {

			this.center.add( offset );

			return this;

		},

		equals: function ( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

	} );

	var _vector$3 = new Vector3();
	var _segCenter = new Vector3();
	var _segDir = new Vector3();
	var _diff = new Vector3();

	var _edge1 = new Vector3();
	var _edge2 = new Vector3();
	var _normal = new Vector3();

	/**
	 * @author bhouston / http://clara.io
	 */

	function Ray( origin, direction ) {

		this.origin = ( origin !== undefined ) ? origin : new Vector3();
		this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );

	}

	Object.assign( Ray.prototype, {

		set: function ( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		},

		at: function ( t, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Ray: .at() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );

		},

		lookAt: function ( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		},

		recast: function ( t ) {

			this.origin.copy( this.at( t, _vector$3 ) );

			return this;

		},

		closestPointToPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			target.subVectors( point, this.origin );

			var directionDistance = target.dot( this.direction );

			if ( directionDistance < 0 ) {

				return target.copy( this.origin );

			}

			return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

		},

		distanceToPoint: function ( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		},

		distanceSqToPoint: function ( point ) {

			var directionDistance = _vector$3.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			_vector$3.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return _vector$3.distanceToSquared( point );

		},

		distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			_segDir.copy( v1 ).sub( v0 ).normalize();
			_diff.copy( this.origin ).sub( _segCenter );

			var segExtent = v0.distanceTo( v1 ) * 0.5;
			var a01 = - this.direction.dot( _segDir );
			var b0 = _diff.dot( this.direction );
			var b1 = - _diff.dot( _segDir );
			var c = _diff.lengthSq();
			var det = Math.abs( 1 - a01 * a01 );
			var s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							var invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );

			}

			return sqrDist;

		},

		intersectSphere: function ( sphere, target ) {

			_vector$3.subVectors( sphere.center, this.origin );
			var tca = _vector$3.dot( this.direction );
			var d2 = _vector$3.dot( _vector$3 ) - tca * tca;
			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) { return null; }

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) { return null; }

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) { return this.at( t1, target ); }

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, target );

		},

		intersectsSphere: function ( sphere ) {

			return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

		},

		distanceToPlane: function ( plane ) {

			var denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t : null;

		},

		intersectPlane: function ( plane, target ) {

			var t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, target );

		},

		intersectsPlane: function ( plane ) {

			// check if the ray lies on the plane first

			var distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			var denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		},

		intersectBox: function ( box, target ) {

			var tmin, tmax, tymin, tymax, tzmin, tzmax;

			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			var origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }

			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN

			if ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }

			if ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }

			if ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }

			if ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) { return null; }

			return this.at( tmin >= 0 ? tmin : tmax, target );

		},

		intersectsBox: function ( box ) {

			return this.intersectBox( box, _vector$3 ) !== null;

		},

		intersectTriangle: function ( a, b, c, backfaceCulling, target ) {

			// Compute the offset origin, edges, and normal.

			// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			_edge1.subVectors( b, a );
			_edge2.subVectors( c, a );
			_normal.crossVectors( _edge1, _edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( _normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) { return null; }
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			_diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * _diff.dot( _normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, target );

		},

		applyMatrix4: function ( matrix4 ) {

			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );

			return this;

		},

		equals: function ( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	var _vector1 = new Vector3();
	var _vector2 = new Vector3();
	var _normalMatrix = new Matrix3();

	function Plane( normal, constant ) {

		// normal is assumed to be normalized

		this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;

	}

	Object.assign( Plane.prototype, {

		isPlane: true,

		set: function ( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		},

		setComponents: function ( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		},

		setFromNormalAndCoplanarPoint: function ( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		},

		setFromCoplanarPoints: function ( a, b, c ) {

			var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		},

		normalize: function () {

			// Note: will lead to a divide by zero if the plane is invalid.

			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		},

		negate: function () {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		},

		distanceToPoint: function ( point ) {

			return this.normal.dot( point ) + this.constant;

		},

		distanceToSphere: function ( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		},

		projectPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .projectPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );

		},

		intersectLine: function ( line, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .intersectLine() target is now required' );
				target = new Vector3();

			}

			var direction = line.delta( _vector1 );

			var denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return target.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return target.copy( direction ).multiplyScalar( t ).add( line.start );

		},

		intersectsLine: function ( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		},

		intersectsBox: function ( box ) {

			return box.intersectsPlane( this );

		},

		intersectsSphere: function ( sphere ) {

			return sphere.intersectsPlane( this );

		},

		coplanarPoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
				target = new Vector3();

			}

			return target.copy( this.normal ).multiplyScalar( - this.constant );

		},

		applyMatrix4: function ( matrix, optionalNormalMatrix ) {

			var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

			var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

			var normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		},

		translate: function ( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		},

		equals: function ( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _v0$1 = new Vector3();
	var _v1$3 = new Vector3();
	var _v2$1 = new Vector3();
	var _v3 = new Vector3();

	var _vab = new Vector3();
	var _vac = new Vector3();
	var _vbc = new Vector3();
	var _vap = new Vector3();
	var _vbp = new Vector3();
	var _vcp = new Vector3();

	function Triangle( a, b, c ) {

		this.a = ( a !== undefined ) ? a : new Vector3();
		this.b = ( b !== undefined ) ? b : new Vector3();
		this.c = ( c !== undefined ) ? c : new Vector3();

	}

	Object.assign( Triangle, {

		getNormal: function ( a, b, c, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getNormal() target is now required' );
				target = new Vector3();

			}

			target.subVectors( c, b );
			_v0$1.subVectors( a, b );
			target.cross( _v0$1 );

			var targetLengthSq = target.lengthSq();
			if ( targetLengthSq > 0 ) {

				return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

			}

			return target.set( 0, 0, 0 );

		},

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		getBarycoord: function ( point, a, b, c, target ) {

			_v0$1.subVectors( c, a );
			_v1$3.subVectors( b, a );
			_v2$1.subVectors( point, a );

			var dot00 = _v0$1.dot( _v0$1 );
			var dot01 = _v0$1.dot( _v1$3 );
			var dot02 = _v0$1.dot( _v2$1 );
			var dot11 = _v1$3.dot( _v1$3 );
			var dot12 = _v1$3.dot( _v2$1 );

			var denom = ( dot00 * dot11 - dot01 * dot01 );

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
				target = new Vector3();

			}

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return target.set( - 2, - 1, - 1 );

			}

			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return target.set( 1 - u - v, v, u );

		},

		containsPoint: function ( point, a, b, c ) {

			Triangle.getBarycoord( point, a, b, c, _v3 );

			return ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );

		},

		getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {

			this.getBarycoord( point, p1, p2, p3, _v3 );

			target.set( 0, 0 );
			target.addScaledVector( uv1, _v3.x );
			target.addScaledVector( uv2, _v3.y );
			target.addScaledVector( uv3, _v3.z );

			return target;

		},

		isFrontFacing: function ( a, b, c, direction ) {

			_v0$1.subVectors( c, b );
			_v1$3.subVectors( a, b );

			// strictly front facing
			return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

		}

	} );

	Object.assign( Triangle.prototype, {

		set: function ( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		},

		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		},

		getArea: function () {

			_v0$1.subVectors( this.c, this.b );
			_v1$3.subVectors( this.a, this.b );

			return _v0$1.cross( _v1$3 ).length() * 0.5;

		},

		getMidpoint: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
				target = new Vector3();

			}

			return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		},

		getNormal: function ( target ) {

			return Triangle.getNormal( this.a, this.b, this.c, target );

		},

		getPlane: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .getPlane() target is now required' );
				target = new Plane();

			}

			return target.setFromCoplanarPoints( this.a, this.b, this.c );

		},

		getBarycoord: function ( point, target ) {

			return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

		},

		getUV: function ( point, uv1, uv2, uv3, target ) {

			return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

		},

		containsPoint: function ( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		},

		isFrontFacing: function ( direction ) {

			return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

		},

		intersectsBox: function ( box ) {

			return box.intersectsTriangle( this );

		},

		closestPointToPoint: function ( p, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			var a = this.a, b = this.b, c = this.c;
			var v, w;

			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			_vab.subVectors( b, a );
			_vac.subVectors( c, a );
			_vap.subVectors( p, a );
			var d1 = _vab.dot( _vap );
			var d2 = _vac.dot( _vap );
			if ( d1 <= 0 && d2 <= 0 ) {

				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy( a );

			}

			_vbp.subVectors( p, b );
			var d3 = _vab.dot( _vbp );
			var d4 = _vac.dot( _vbp );
			if ( d3 >= 0 && d4 <= d3 ) {

				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy( b );

			}

			var vc = d1 * d4 - d3 * d2;
			if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

				v = d1 / ( d1 - d3 );
				// edge region of AB; barycentric coords (1-v, v, 0)
				return target.copy( a ).addScaledVector( _vab, v );

			}

			_vcp.subVectors( p, c );
			var d5 = _vab.dot( _vcp );
			var d6 = _vac.dot( _vcp );
			if ( d6 >= 0 && d5 <= d6 ) {

				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy( c );

			}

			var vb = d5 * d2 - d1 * d6;
			if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

				w = d2 / ( d2 - d6 );
				// edge region of AC; barycentric coords (1-w, 0, w)
				return target.copy( a ).addScaledVector( _vac, w );

			}

			var va = d3 * d6 - d5 * d4;
			if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

				_vbc.subVectors( c, b );
				w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
				// edge region of BC; barycentric coords (0, 1-w, w)
				return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

			}

			// face region
			var denom = 1 / ( va + vb + vc );
			// u = va * denom
			v = vb * denom;
			w = vc * denom;

			return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

		},

		equals: function ( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	var _hslA = { h: 0, s: 0, l: 0 };
	var _hslB = { h: 0, s: 0, l: 0 };

	function Color( r, g, b ) {

		if ( g === undefined && b === undefined ) {

			// r is THREE.Color, hex or string
			return this.set( r );

		}

		return this.setRGB( r, g, b );

	}

	function hue2rgb( p, q, t ) {

		if ( t < 0 ) { t += 1; }
		if ( t > 1 ) { t -= 1; }
		if ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }
		if ( t < 1 / 2 ) { return q; }
		if ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }
		return p;

	}

	function SRGBToLinear( c ) {

		return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

	}

	function LinearToSRGB( c ) {

		return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

	}

	Object.assign( Color.prototype, {

		isColor: true,

		r: 1, g: 1, b: 1,

		set: function ( value ) {

			if ( value && value.isColor ) {

				this.copy( value );

			} else if ( typeof value === 'number' ) {

				this.setHex( value );

			} else if ( typeof value === 'string' ) {

				this.setStyle( value );

			}

			return this;

		},

		setScalar: function ( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		},

		setHex: function ( hex ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			return this;

		},

		setRGB: function ( r, g, b ) {

			this.r = r;
			this.g = g;
			this.b = b;

			return this;

		},

		setHSL: function ( h, s, l ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = _Math.euclideanModulo( h, 1 );
			s = _Math.clamp( s, 0, 1 );
			l = _Math.clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				var q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			return this;

		},

		setStyle: function ( style ) {

			function handleAlpha( string ) {

				if ( string === undefined ) { return; }

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			var m;

			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

							handleAlpha( color[ 5 ] );

							return this;

						}

						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

							handleAlpha( color[ 5 ] );

							return this;

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;

							handleAlpha( color[ 5 ] );

							return this.setHSL( h, s, l );

						}

						break;

				}

			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {

				// hex color

				var hex = m[ 1 ];
				var size = hex.length;

				if ( size === 3 ) {

					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;

					return this;

				} else if ( size === 6 ) {

					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;

					return this;

				}

			}

			if ( style && style.length > 0 ) {

				return this.setColorName( style );

			}

			return this;

		},

		setColorName: function ( style ) {

			// color keywords
			var hex = _colorKeywords[ style ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

			return this;

		},

		clone: function () {

			return new this.constructor( this.r, this.g, this.b );

		},

		copy: function ( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		},

		copyGammaToLinear: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );

			return this;

		},

		copyLinearToGamma: function ( color, gammaFactor ) {

			if ( gammaFactor === undefined ) { gammaFactor = 2.0; }

			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;

			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );

			return this;

		},

		convertGammaToLinear: function ( gammaFactor ) {

			this.copyGammaToLinear( this, gammaFactor );

			return this;

		},

		convertLinearToGamma: function ( gammaFactor ) {

			this.copyLinearToGamma( this, gammaFactor );

			return this;

		},

		copySRGBToLinear: function ( color ) {

			this.r = SRGBToLinear( color.r );
			this.g = SRGBToLinear( color.g );
			this.b = SRGBToLinear( color.b );

			return this;

		},

		copyLinearToSRGB: function ( color ) {

			this.r = LinearToSRGB( color.r );
			this.g = LinearToSRGB( color.g );
			this.b = LinearToSRGB( color.b );

			return this;

		},

		convertSRGBToLinear: function () {

			this.copySRGBToLinear( this );

			return this;

		},

		convertLinearToSRGB: function () {

			this.copyLinearToSRGB( this );

			return this;

		},

		getHex: function () {

			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

		},

		getHexString: function () {

			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

		},

		getHSL: function ( target ) {

			// h,s,l ranges are in 0.0 - 1.0

			if ( target === undefined ) {

				console.warn( 'THREE.Color: .getHSL() target is now required' );
				target = { h: 0, s: 0, l: 0 };

			}

			var r = this.r, g = this.g, b = this.b;

			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );

			var hue, saturation;
			var lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				var delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;

			return target;

		},

		getStyle: function () {

			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

		},

		offsetHSL: function ( h, s, l ) {

			this.getHSL( _hslA );

			_hslA.h += h; _hslA.s += s; _hslA.l += l;

			this.setHSL( _hslA.h, _hslA.s, _hslA.l );

			return this;

		},

		add: function ( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		},

		addColors: function ( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		},

		addScalar: function ( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		},

		sub: function ( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		},

		multiply: function ( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		},

		multiplyScalar: function ( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		},

		lerp: function ( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		},

		lerpHSL: function ( color, alpha ) {

			this.getHSL( _hslA );
			color.getHSL( _hslB );

			var h = _Math.lerp( _hslA.h, _hslB.h, alpha );
			var s = _Math.lerp( _hslA.s, _hslB.s, alpha );
			var l = _Math.lerp( _hslA.l, _hslB.l, alpha );

			this.setHSL( h, s, l );

			return this;

		},

		equals: function ( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		},

		toJSON: function () {

			return this.getHex();

		}

	} );

	Color.NAMES = _colorKeywords;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Face3( a, b, c, normal, color, materialIndex ) {

		this.a = a;
		this.b = b;
		this.c = c;

		this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];

		this.color = ( color && color.isColor ) ? color : new Color();
		this.vertexColors = Array.isArray( color ) ? color : [];

		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	}

	Object.assign( Face3.prototype, {

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.a = source.a;
			this.b = source.b;
			this.c = source.c;

			this.normal.copy( source.normal );
			this.color.copy( source.color );

			this.materialIndex = source.materialIndex;

			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {

				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();

			}

			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {

				this.vertexColors[ i ] = source.vertexColors[ i ].clone();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var materialId = 0;

	function Material() {

		Object.defineProperty( this, 'id', { value: materialId ++ } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Material';

		this.fog = true;

		this.blending = NormalBlending;
		this.side = FrontSide;
		this.flatShading = false;
		this.vertexTangents = false;
		this.vertexColors = NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors

		this.opacity = 1;
		this.transparent = false;

		this.blendSrc = SrcAlphaFactor;
		this.blendDst = OneMinusSrcAlphaFactor;
		this.blendEquation = AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;

		this.depthFunc = LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;

		this.stencilWriteMask = 0xff;
		this.stencilFunc = AlwaysStencilFunc;
		this.stencilRef = 0;
		this.stencilFuncMask = 0xff;
		this.stencilFail = KeepStencilOp;
		this.stencilZFail = KeepStencilOp;
		this.stencilZPass = KeepStencilOp;
		this.stencilWrite = false;

		this.clippingPlanes = null;
		this.clipIntersection = false;
		this.clipShadows = false;

		this.shadowSide = null;

		this.colorWrite = true;

		this.precision = null; // override the renderer's default precision for this material

		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;

		this.dithering = false;

		this.alphaTest = 0;
		this.premultipliedAlpha = false;

		this.visible = true;

		this.toneMapped = true;

		this.userData = {};

		this.version = 0;

	}

	Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Material,

		isMaterial: true,

		onBeforeCompile: function () {},

		setValues: function ( values ) {

			if ( values === undefined ) { return; }

			for ( var key in values ) {

				var newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;

				}

				// for backward compatability if shading is set in the constructor
				if ( key === 'shading' ) {

					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( newValue === FlatShading ) ? true : false;
					continue;

				}

				var currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;

				}

				if ( currentValue && currentValue.isColor ) {

					currentValue.set( newValue );

				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

					currentValue.copy( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		},

		toJSON: function ( meta ) {

			var isRoot = ( meta === undefined || typeof meta === 'string' );

			if ( isRoot ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			var data = {
				metadata: {
					version: 4.5,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) { data.name = this.name; }

			if ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }

			if ( this.roughness !== undefined ) { data.roughness = this.roughness; }
			if ( this.metalness !== undefined ) { data.metalness = this.metalness; }

			if ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }
			if ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }
			if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }

			if ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }
			if ( this.shininess !== undefined ) { data.shininess = this.shininess; }
			if ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }
			if ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }

			if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

			}

			if ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }
			if ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }
			if ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }
			if ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }

			if ( this.aoMap && this.aoMap.isTexture ) {

				data.aoMap = this.aoMap.toJSON( meta ).uuid;
				data.aoMapIntensity = this.aoMapIntensity;

			}

			if ( this.bumpMap && this.bumpMap.isTexture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}

			if ( this.normalMap && this.normalMap.isTexture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();

			}

			if ( this.displacementMap && this.displacementMap.isTexture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}

			if ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }
			if ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }

			if ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }
			if ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }

			if ( this.envMap && this.envMap.isTexture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap
				data.refractionRatio = this.refractionRatio;

				if ( this.combine !== undefined ) { data.combine = this.combine; }
				if ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }

			}

			if ( this.gradientMap && this.gradientMap.isTexture ) {

				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

			}

			if ( this.size !== undefined ) { data.size = this.size; }
			if ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }

			if ( this.blending !== NormalBlending ) { data.blending = this.blending; }
			if ( this.flatShading === true ) { data.flatShading = this.flatShading; }
			if ( this.side !== FrontSide ) { data.side = this.side; }
			if ( this.vertexColors !== NoColors ) { data.vertexColors = this.vertexColors; }

			if ( this.opacity < 1 ) { data.opacity = this.opacity; }
			if ( this.transparent === true ) { data.transparent = this.transparent; }

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;

			data.stencilWrite = this.stencilWrite;
			data.stencilWriteMask = this.stencilWriteMask;
			data.stencilFunc = this.stencilFunc;
			data.stencilRef = this.stencilRef;
			data.stencilFuncMask = this.stencilFuncMask;
			data.stencilFail = this.stencilFail;
			data.stencilZFail = this.stencilZFail;
			data.stencilZPass = this.stencilZPass;

			// rotation (SpriteMaterial)
			if ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }

			if ( this.polygonOffset === true ) { data.polygonOffset = true; }
			if ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }
			if ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }

			if ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }
			if ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }
			if ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }
			if ( this.scale !== undefined ) { data.scale = this.scale; }

			if ( this.dithering === true ) { data.dithering = true; }

			if ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }
			if ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }

			if ( this.wireframe === true ) { data.wireframe = this.wireframe; }
			if ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }
			if ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }
			if ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }

			if ( this.morphTargets === true ) { data.morphTargets = true; }
			if ( this.morphNormals === true ) { data.morphNormals = true; }
			if ( this.skinning === true ) { data.skinning = true; }

			if ( this.visible === false ) { data.visible = false; }

			if ( this.toneMapped === false ) { data.toneMapped = false; }

			if ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				var values = [];

				for ( var key in cache ) {

					var data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRoot ) {

				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );

				if ( textures.length > 0 ) { data.textures = textures; }
				if ( images.length > 0 ) { data.images = images; }

			}

			return data;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.name = source.name;

			this.fog = source.fog;

			this.blending = source.blending;
			this.side = source.side;
			this.flatShading = source.flatShading;
			this.vertexTangents = source.vertexTangents;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.stencilWriteMask = source.stencilWriteMask;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilFuncMask = source.stencilFuncMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.stencilWrite = source.stencilWrite;

			var srcPlanes = source.clippingPlanes,
				dstPlanes = null;

			if ( srcPlanes !== null ) {

				var n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( var i = 0; i !== n; ++ i )
					{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }

			}

			this.clippingPlanes = dstPlanes;
			this.clipIntersection = source.clipIntersection;
			this.clipShadows = source.clipShadows;

			this.shadowSide = source.shadowSide;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.dithering = source.dithering;

			this.alphaTest = source.alphaTest;
			this.premultipliedAlpha = source.premultipliedAlpha;

			this.visible = source.visible;

			this.toneMapped = source.toneMapped;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	Object.defineProperty( Material.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>
	 * }
	 */

	function MeshBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshBasicMaterial';

		this.color = new Color( 0xffffff ); // emissive

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;

		this.setValues( parameters );

	}

	MeshBasicMaterial.prototype = Object.create( Material.prototype );
	MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;

	MeshBasicMaterial.prototype.isMeshBasicMaterial = true;

	MeshBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferAttribute( array, itemSize, normalized ) {

		if ( Array.isArray( array ) ) {

			throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

		}

		this.name = '';

		this.array = array;
		this.itemSize = itemSize;
		this.count = array !== undefined ? array.length / itemSize : 0;
		this.normalized = normalized === true;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	Object.assign( BufferAttribute.prototype, {

		isBufferAttribute: true,

		onUploadCallback: function () {},

		setUsage: function ( value ) {

			this.usage = value;

			return this;

		},

		copy: function ( source ) {

			this.name = source.name;
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.usage = source.usage;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		copyArray: function ( array ) {

			this.array.set( array );

			return this;

		},

		copyColorsArray: function ( colors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = colors.length; i < l; i ++ ) {

				var color = colors[ i ];

				if ( color === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new Color();

				}

				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;

			}

			return this;

		},

		copyVector2sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new Vector2();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;

			}

			return this;

		},

		copyVector3sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new Vector3();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;

			}

			return this;

		},

		copyVector4sArray: function ( vectors ) {

			var array = this.array, offset = 0;

			for ( var i = 0, l = vectors.length; i < l; i ++ ) {

				var vector = vectors[ i ];

				if ( vector === undefined ) {

					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new Vector4();

				}

				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.array.set( value, offset );

			return this;

		},

		getX: function ( index ) {

			return this.array[ index * this.itemSize ];

		},

		setX: function ( index, x ) {

			this.array[ index * this.itemSize ] = x;

			return this;

		},

		getY: function ( index ) {

			return this.array[ index * this.itemSize + 1 ];

		},

		setY: function ( index, y ) {

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		},

		getZ: function ( index ) {

			return this.array[ index * this.itemSize + 2 ];

		},

		setZ: function ( index, z ) {

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		},

		getW: function ( index ) {

			return this.array[ index * this.itemSize + 3 ];

		},

		setW: function ( index, w ) {

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		},

		setXY: function ( index, x, y ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index *= this.itemSize;

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		},

		clone: function () {

			return new this.constructor( this.array, this.itemSize ).copy( this );

		},

		toJSON: function () {

			return {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.prototype.slice.call( this.array ),
				normalized: this.normalized
			};

		}

	} );

	//

	function Int8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );

	}

	Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;


	function Uint8BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );

	}

	Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;


	function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );

	}

	Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;


	function Int16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );

	}

	Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;


	function Uint16BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );

	}

	Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;


	function Int32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );

	}

	Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;


	function Uint32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );

	}

	Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;


	function Float32BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );

	}

	Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;


	function Float64BufferAttribute( array, itemSize, normalized ) {

		BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );

	}

	Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
	Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectGeometry() {

		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];

		this.groups = [];

		this.morphTargets = {};

		this.skinWeights = [];
		this.skinIndices = [];

		// this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Object.assign( DirectGeometry.prototype, {

		computeGroups: function ( geometry ) {

			var group;
			var groups = [];
			var materialIndex = undefined;

			var faces = geometry.faces;

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				// materials

				if ( face.materialIndex !== materialIndex ) {

					materialIndex = face.materialIndex;

					if ( group !== undefined ) {

						group.count = ( i * 3 ) - group.start;
						groups.push( group );

					}

					group = {
						start: i * 3,
						materialIndex: materialIndex
					};

				}

			}

			if ( group !== undefined ) {

				group.count = ( i * 3 ) - group.start;
				groups.push( group );

			}

			this.groups = groups;

		},

		fromGeometry: function ( geometry ) {

			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;

			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;

			// morphs

			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;

			var morphTargetsPosition;

			if ( morphTargetsLength > 0 ) {

				morphTargetsPosition = [];

				for ( var i = 0; i < morphTargetsLength; i ++ ) {

					morphTargetsPosition[ i ] = {
						name: morphTargets[ i ].name,
					 	data: []
					};

				}

				this.morphTargets.position = morphTargetsPosition;

			}

			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;

			var morphTargetsNormal;

			if ( morphNormalsLength > 0 ) {

				morphTargetsNormal = [];

				for ( var i = 0; i < morphNormalsLength; i ++ ) {

					morphTargetsNormal[ i ] = {
						name: morphNormals[ i ].name,
					 	data: []
					};

				}

				this.morphTargets.normal = morphTargetsNormal;

			}

			// skins

			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;

			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;

			//

			if ( vertices.length > 0 && faces.length === 0 ) {

				console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );

			}

			for ( var i = 0; i < faces.length; i ++ ) {

				var face = faces[ i ];

				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );

				} else {

					var normal = face.normal;

					this.normals.push( normal, normal, normal );

				}

				var vertexColors = face.vertexColors;

				if ( vertexColors.length === 3 ) {

					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );

				} else {

					var color = face.color;

					this.colors.push( color, color, color );

				}

				if ( hasFaceVertexUv === true ) {

					var vertexUvs = faceVertexUvs[ 0 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );

						this.uvs.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				if ( hasFaceVertexUv2 === true ) {

					var vertexUvs = faceVertexUvs[ 1 ][ i ];

					if ( vertexUvs !== undefined ) {

						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );

					} else {

						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );

						this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );

					}

				}

				// morphs

				for ( var j = 0; j < morphTargetsLength; j ++ ) {

					var morphTarget = morphTargets[ j ].vertices;

					morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );

				}

				for ( var j = 0; j < morphNormalsLength; j ++ ) {

					var morphNormal = morphNormals[ j ].vertexNormals[ i ];

					morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );

				}

				// skins

				if ( hasSkinIndices ) {

					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );

				}

				if ( hasSkinWeights ) {

					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );

				}

			}

			this.computeGroups( geometry );

			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function arrayMax( array ) {

		if ( array.length === 0 ) { return - Infinity; }

		var max = array[ 0 ];

		for ( var i = 1, l = array.length; i < l; ++ i ) {

			if ( array[ i ] > max ) { max = array[ i ]; }

		}

		return max;

	}

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id

	var _m1$2 = new Matrix4();
	var _obj = new Object3D();
	var _offset = new Vector3();
	var _box$2 = new Box3();
	var _boxMorphTargets = new Box3();
	var _vector$4 = new Vector3();

	function BufferGeometry() {

		Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'BufferGeometry';

		this.index = null;
		this.attributes = {};

		this.morphAttributes = {};
		this.morphTargetsRelative = false;

		this.groups = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		this.drawRange = { start: 0, count: Infinity };

		this.userData = {};

	}

	BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: BufferGeometry,

		isBufferGeometry: true,

		getIndex: function () {

			return this.index;

		},

		setIndex: function ( index ) {

			if ( Array.isArray( index ) ) {

				this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

			} else {

				this.index = index;

			}

		},

		getAttribute: function ( name ) {

			return this.attributes[ name ];

		},

		setAttribute: function ( name, attribute ) {

			this.attributes[ name ] = attribute;

			return this;

		},

		deleteAttribute: function ( name ) {

			delete this.attributes[ name ];

			return this;

		},

		addGroup: function ( start, count, materialIndex ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0

			} );

		},

		clearGroups: function () {

			this.groups = [];

		},

		setDrawRange: function ( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		},

		applyMatrix: function ( matrix ) {

			var position = this.attributes.position;

			if ( position !== undefined ) {

				matrix.applyToBufferAttribute( position );
				position.needsUpdate = true;

			}

			var normal = this.attributes.normal;

			if ( normal !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normalMatrix.applyToBufferAttribute( normal );
				normal.needsUpdate = true;

			}

			var tangent = this.attributes.tangent;

			if ( tangent !== undefined ) {

				var normalMatrix = new Matrix3().getNormalMatrix( matrix );

				// Tangent is vec4, but the '.w' component is a sign value (+1/-1).
				normalMatrix.applyToBufferAttribute( tangent );
				tangent.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		},

		rotateX: function ( angle ) {

			// rotate geometry around world x-axis

			_m1$2.makeRotationX( angle );

			this.applyMatrix( _m1$2 );

			return this;

		},

		rotateY: function ( angle ) {

			// rotate geometry around world y-axis

			_m1$2.makeRotationY( angle );

			this.applyMatrix( _m1$2 );

			return this;

		},

		rotateZ: function ( angle ) {

			// rotate geometry around world z-axis

			_m1$2.makeRotationZ( angle );

			this.applyMatrix( _m1$2 );

			return this;

		},

		translate: function ( x, y, z ) {

			// translate geometry

			_m1$2.makeTranslation( x, y, z );

			this.applyMatrix( _m1$2 );

			return this;

		},

		scale: function ( x, y, z ) {

			// scale geometry

			_m1$2.makeScale( x, y, z );

			this.applyMatrix( _m1$2 );

			return this;

		},

		lookAt: function ( vector ) {

			_obj.lookAt( vector );

			_obj.updateMatrix();

			this.applyMatrix( _obj.matrix );

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			this.boundingBox.getCenter( _offset ).negate();

			this.translate( _offset.x, _offset.y, _offset.z );

			return this;

		},

		setFromObject: function ( object ) {

			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );

			var geometry = object.geometry;

			if ( object.isPoints || object.isLine ) {

				var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
				var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );

				this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );

				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {

					var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );

					this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );

				}

				if ( geometry.boundingSphere !== null ) {

					this.boundingSphere = geometry.boundingSphere.clone();

				}

				if ( geometry.boundingBox !== null ) {

					this.boundingBox = geometry.boundingBox.clone();

				}

			} else if ( object.isMesh ) {

				if ( geometry && geometry.isGeometry ) {

					this.fromGeometry( geometry );

				}

			}

			return this;

		},

		setFromPoints: function ( points ) {

			var position = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );

			}

			this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

			return this;

		},

		updateFromObject: function ( object ) {

			var geometry = object.geometry;

			if ( object.isMesh ) {

				var direct = geometry.__directGeometry;

				if ( geometry.elementsNeedUpdate === true ) {

					direct = undefined;
					geometry.elementsNeedUpdate = false;

				}

				if ( direct === undefined ) {

					return this.fromGeometry( geometry );

				}

				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;

				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;

				geometry = direct;

			}

			var attribute;

			if ( geometry.verticesNeedUpdate === true ) {

				attribute = this.attributes.position;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;

				}

				geometry.verticesNeedUpdate = false;

			}

			if ( geometry.normalsNeedUpdate === true ) {

				attribute = this.attributes.normal;

				if ( attribute !== undefined ) {

					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;

				}

				geometry.normalsNeedUpdate = false;

			}

			if ( geometry.colorsNeedUpdate === true ) {

				attribute = this.attributes.color;

				if ( attribute !== undefined ) {

					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;

				}

				geometry.colorsNeedUpdate = false;

			}

			if ( geometry.uvsNeedUpdate ) {

				attribute = this.attributes.uv;

				if ( attribute !== undefined ) {

					attribute.copyVector2sArray( geometry.uvs );
					attribute.needsUpdate = true;

				}

				geometry.uvsNeedUpdate = false;

			}

			if ( geometry.lineDistancesNeedUpdate ) {

				attribute = this.attributes.lineDistance;

				if ( attribute !== undefined ) {

					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;

				}

				geometry.lineDistancesNeedUpdate = false;

			}

			if ( geometry.groupsNeedUpdate ) {

				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;

				geometry.groupsNeedUpdate = false;

			}

			return this;

		},

		fromGeometry: function ( geometry ) {

			geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );

			return this.fromDirectGeometry( geometry.__directGeometry );

		},

		fromDirectGeometry: function ( geometry ) {

			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );

			if ( geometry.normals.length > 0 ) {

				var normals = new Float32Array( geometry.normals.length * 3 );
				this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );

			}

			if ( geometry.colors.length > 0 ) {

				var colors = new Float32Array( geometry.colors.length * 3 );
				this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );

			}

			if ( geometry.uvs.length > 0 ) {

				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );

			}

			if ( geometry.uvs2.length > 0 ) {

				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );

			}

			// groups

			this.groups = geometry.groups;

			// morphs

			for ( var name in geometry.morphTargets ) {

				var array = [];
				var morphTargets = geometry.morphTargets[ name ];

				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {

					var morphTarget = morphTargets[ i ];

					var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
					attribute.name = morphTarget.name;

					array.push( attribute.copyVector3sArray( morphTarget.data ) );

				}

				this.morphAttributes[ name ] = array;

			}

			// skinning

			if ( geometry.skinIndices.length > 0 ) {

				var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
				this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );

			}

			if ( geometry.skinWeights.length > 0 ) {

				var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
				this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );

			}

			//

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			return this;

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			var position = this.attributes.position;
			var morphAttributesPosition = this.morphAttributes.position;

			if ( position !== undefined ) {

				this.boundingBox.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						var morphAttribute = morphAttributesPosition[ i ];
						_box$2.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$4.addVectors( this.boundingBox.min, _box$2.min );
							this.boundingBox.expandByPoint( _vector$4 );

							_vector$4.addVectors( this.boundingBox.max, _box$2.max );
							this.boundingBox.expandByPoint( _vector$4 );

						} else {

							this.boundingBox.expandByPoint( _box$2.min );
							this.boundingBox.expandByPoint( _box$2.max );

						}

					}

				}

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			var position = this.attributes.position;
			var morphAttributesPosition = this.morphAttributes.position;

			if ( position ) {

				// first, find the center of the bounding sphere

				var center = this.boundingSphere.center;

				_box$2.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						var morphAttribute = morphAttributesPosition[ i ];
						_boxMorphTargets.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );
							_box$2.expandByPoint( _vector$4 );

							_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );
							_box$2.expandByPoint( _vector$4 );

						} else {

							_box$2.expandByPoint( _boxMorphTargets.min );
							_box$2.expandByPoint( _boxMorphTargets.max );

						}

					}

				}

				_box$2.getCenter( center );

				// second, try to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = position.count; i < il; i ++ ) {

					_vector$4.fromBufferAttribute( position, i );

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

				}

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						var morphAttribute = morphAttributesPosition[ i ];
						var morphTargetsRelative = this.morphTargetsRelative;

						for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

							_vector$4.fromBufferAttribute( morphAttribute, j );

							if ( morphTargetsRelative ) {

								_offset.fromBufferAttribute( position, j );
								_vector$4.add( _offset );

							}

							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );

						}

					}

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		},

		computeFaceNormals: function () {

			// backwards compatibility

		},

		computeVertexNormals: function () {

			var index = this.index;
			var attributes = this.attributes;

			if ( attributes.position ) {

				var positions = attributes.position.array;

				if ( attributes.normal === undefined ) {

					this.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );

				} else {

					// reset existing normals to zero

					var array = attributes.normal.array;

					for ( var i = 0, il = array.length; i < il; i ++ ) {

						array[ i ] = 0;

					}

				}

				var normals = attributes.normal.array;

				var vA, vB, vC;
				var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				var cb = new Vector3(), ab = new Vector3();

				// indexed elements

				if ( index ) {

					var indices = index.array;

					for ( var i = 0, il = index.count; i < il; i += 3 ) {

						vA = indices[ i + 0 ] * 3;
						vB = indices[ i + 1 ] * 3;
						vC = indices[ i + 2 ] * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( var i = 0, il = positions.length; i < il; i += 9 ) {

						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;

						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;

						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;

					}

				}

				this.normalizeNormals();

				attributes.normal.needsUpdate = true;

			}

		},

		merge: function ( geometry, offset ) {

			if ( ! ( geometry && geometry.isBufferGeometry ) ) {

				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;

			}

			if ( offset === undefined ) {

				offset = 0;

				console.warn(
					'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
					+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
				);

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				if ( geometry.attributes[ key ] === undefined ) { continue; }

				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;

				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;

				var attributeOffset = attribute2.itemSize * offset;
				var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );

				for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {

					attributeArray1[ j ] = attributeArray2[ i ];

				}

			}

			return this;

		},

		normalizeNormals: function () {

			var normals = this.attributes.normal;

			for ( var i = 0, il = normals.count; i < il; i ++ ) {

				_vector$4.x = normals.getX( i );
				_vector$4.y = normals.getY( i );
				_vector$4.z = normals.getZ( i );

				_vector$4.normalize();

				normals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );

			}

		},

		toNonIndexed: function () {

			function convertBufferAttribute( attribute, indices ) {

				var array = attribute.array;
				var itemSize = attribute.itemSize;

				var array2 = new array.constructor( indices.length * itemSize );

				var index = 0, index2 = 0;

				for ( var i = 0, l = indices.length; i < l; i ++ ) {

					index = indices[ i ] * itemSize;

					for ( var j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				return new BufferAttribute( array2, itemSize );

			}

			//

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
				return this;

			}

			var geometry2 = new BufferGeometry();

			var indices = this.index.array;
			var attributes = this.attributes;

			// attributes

			for ( var name in attributes ) {

				var attribute = attributes[ name ];

				var newAttribute = convertBufferAttribute( attribute, indices );

				geometry2.setAttribute( name, newAttribute );

			}

			// morph attributes

			var morphAttributes = this.morphAttributes;

			for ( name in morphAttributes ) {

				var morphArray = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {

					var attribute = morphAttribute[ i ];

					var newAttribute = convertBufferAttribute( attribute, indices );

					morphArray.push( newAttribute );

				}

				geometry2.morphAttributes[ name ] = morphArray;

			}

			geometry2.morphTargetsRelative = this.morphTargetsRelative;

			// groups

			var groups = this.groups;

			for ( var i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				geometry2.addGroup( group.start, group.count, group.materialIndex );

			}

			return geometry2;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) { data.name = this.name; }
			if ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

				}

				return data;

			}

			data.data = { attributes: {} };

			var index = this.index;

			if ( index !== null ) {

				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call( index.array )
				};

			}

			var attributes = this.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];

				var attributeData = attribute.toJSON();

				if ( attribute.name !== '' ) { attributeData.name = attribute.name; }

				data.data.attributes[ key ] = attributeData;

			}

			var morphAttributes = {};
			var hasMorphAttributes = false;

			for ( var key in this.morphAttributes ) {

				var attributeArray = this.morphAttributes[ key ];

				var array = [];

				for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

					var attribute = attributeArray[ i ];

					var attributeData = attribute.toJSON();

					if ( attribute.name !== '' ) { attributeData.name = attribute.name; }

					array.push( attributeData );

				}

				if ( array.length > 0 ) {

					morphAttributes[ key ] = array;

					hasMorphAttributes = true;

				}

			}

			if ( hasMorphAttributes ) {

				data.data.morphAttributes = morphAttributes;
				data.data.morphTargetsRelative = this.morphTargetsRelative;

			}

			var groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			var boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new BufferGeometry().copy( this );

		},

		copy: function ( source ) {

			var name, i, l;

			// reset

			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// index

			var index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone() );

			}

			// attributes

			var attributes = source.attributes;

			for ( name in attributes ) {

				var attribute = attributes[ name ];
				this.setAttribute( name, attribute.clone() );

			}

			// morph attributes

			var morphAttributes = source.morphAttributes;

			for ( name in morphAttributes ) {

				var array = [];
				var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {

					array.push( morphAttribute[ i ].clone() );

				}

				this.morphAttributes[ name ] = array;

			}

			this.morphTargetsRelative = source.morphTargetsRelative;

			// groups

			var groups = source.groups;

			for ( i = 0, l = groups.length; i < l; i ++ ) {

				var group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// draw range

			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;

			// user data

			this.userData = source.userData;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */

	var _inverseMatrix = new Matrix4();
	var _ray = new Ray();
	var _sphere = new Sphere();

	var _vA = new Vector3();
	var _vB = new Vector3();
	var _vC = new Vector3();

	var _tempA = new Vector3();
	var _tempB = new Vector3();
	var _tempC = new Vector3();

	var _morphA = new Vector3();
	var _morphB = new Vector3();
	var _morphC = new Vector3();

	var _uvA = new Vector2();
	var _uvB = new Vector2();
	var _uvC = new Vector2();

	var _intersectionPoint = new Vector3();
	var _intersectionPointWorld = new Vector3();

	function Mesh( geometry, material ) {

		Object3D.call( this );

		this.type = 'Mesh';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new MeshBasicMaterial( { color: Math.random() * 0xffffff } );

		this.drawMode = TrianglesDrawMode;

		this.updateMorphTargets();

	}

	Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Mesh,

		isMesh: true,

		setDrawMode: function ( value ) {

			this.drawMode = value;

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.drawMode = source.drawMode;

			if ( source.morphTargetInfluences !== undefined ) {

				this.morphTargetInfluences = source.morphTargetInfluences.slice();

			}

			if ( source.morphTargetDictionary !== undefined ) {

				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

			}

			return this;

		},

		updateMorphTargets: function () {

			var geometry = this.geometry;
			var m, ml, name;

			if ( geometry.isBufferGeometry ) {

				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );

				if ( keys.length > 0 ) {

					var morphAttribute = morphAttributes[ keys[ 0 ] ];

					if ( morphAttribute !== undefined ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

							name = morphAttribute[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			} else {

				var morphTargets = geometry.morphTargets;

				if ( morphTargets !== undefined && morphTargets.length > 0 ) {

					console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

				}

			}

		},

		raycast: function ( raycaster, intersects ) {

			var geometry = this.geometry;
			var material = this.material;
			var matrixWorld = this.matrixWorld;

			if ( material === undefined ) { return; }

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere.copy( geometry.boundingSphere );
			_sphere.applyMatrix4( matrixWorld );

			if ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }

			//

			_inverseMatrix.getInverse( matrixWorld );
			_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );

			// Check boundingBox before continuing

			if ( geometry.boundingBox !== null ) {

				if ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }

			}

			// check unsupported draw modes

			if ( this.drawMode !== TrianglesDrawMode ) {

				console.warn( 'THREE.Mesh: TriangleStripDrawMode and TriangleFanDrawMode are not supported by .raycast().' );
				return;

			}

			var intersection;

			if ( geometry.isBufferGeometry ) {

				var a, b, c;
				var index = geometry.index;
				var position = geometry.attributes.position;
				var morphPosition = geometry.morphAttributes.position;
				var morphTargetsRelative = geometry.morphTargetsRelative;
				var uv = geometry.attributes.uv;
				var uv2 = geometry.attributes.uv2;
				var groups = geometry.groups;
				var drawRange = geometry.drawRange;
				var i, j, il, jl;
				var group, groupMaterial;
				var start, end;

				if ( index !== null ) {

					// indexed buffer geometry

					if ( Array.isArray( material ) ) {

						for ( i = 0, il = groups.length; i < il; i ++ ) {

							group = groups[ i ];
							groupMaterial = material[ group.materialIndex ];

							start = Math.max( group.start, drawRange.start );
							end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

							for ( j = start, jl = end; j < jl; j += 3 ) {

								a = index.getX( j );
								b = index.getX( j + 1 );
								c = index.getX( j + 2 );

								intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
									intersection.face.materialIndex = group.materialIndex;
									intersects.push( intersection );

								}

							}

						}

					} else {

						start = Math.max( 0, drawRange.start );
						end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

						for ( i = start, il = end; i < il; i += 3 ) {

							a = index.getX( i );
							b = index.getX( i + 1 );
							c = index.getX( i + 2 );

							intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
								intersects.push( intersection );

							}

						}

					}

				} else if ( position !== undefined ) {

					// non-indexed buffer geometry

					if ( Array.isArray( material ) ) {

						for ( i = 0, il = groups.length; i < il; i ++ ) {

							group = groups[ i ];
							groupMaterial = material[ group.materialIndex ];

							start = Math.max( group.start, drawRange.start );
							end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

							for ( j = start, jl = end; j < jl; j += 3 ) {

								a = j;
								b = j + 1;
								c = j + 2;

								intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

								if ( intersection ) {

									intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
									intersection.face.materialIndex = group.materialIndex;
									intersects.push( intersection );

								}

							}

						}

					} else {

						start = Math.max( 0, drawRange.start );
						end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

						for ( i = start, il = end; i < il; i += 3 ) {

							a = i;
							b = i + 1;
							c = i + 2;

							intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
								intersects.push( intersection );

							}

						}

					}

				}

			} else if ( geometry.isGeometry ) {

				var fvA, fvB, fvC;
				var isMultiMaterial = Array.isArray( material );

				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var uvs;

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }

				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {

					var face = faces[ f ];
					var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;

					if ( faceMaterial === undefined ) { continue; }

					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];

					intersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );

					if ( intersection ) {

						if ( uvs && uvs[ f ] ) {

							var uvs_f = uvs[ f ];
							_uvA.copy( uvs_f[ 0 ] );
							_uvB.copy( uvs_f[ 1 ] );
							_uvC.copy( uvs_f[ 2 ] );

							intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );

						}

						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );

					}

				}

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

		var intersect;

		if ( material.side === BackSide ) {

			intersect = ray.intersectTriangle( pC, pB, pA, true, point );

		} else {

			intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );

		}

		if ( intersect === null ) { return null; }

		_intersectionPointWorld.copy( point );
		_intersectionPointWorld.applyMatrix4( object.matrixWorld );

		var distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

		if ( distance < raycaster.near || distance > raycaster.far ) { return null; }

		return {
			distance: distance,
			point: _intersectionPointWorld.clone(),
			object: object
		};

	}

	function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {

		_vA.fromBufferAttribute( position, a );
		_vB.fromBufferAttribute( position, b );
		_vC.fromBufferAttribute( position, c );

		var morphInfluences = object.morphTargetInfluences;

		if ( material.morphTargets && morphPosition && morphInfluences ) {

			_morphA.set( 0, 0, 0 );
			_morphB.set( 0, 0, 0 );
			_morphC.set( 0, 0, 0 );

			for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {

				var influence = morphInfluences[ i ];
				var morphAttribute = morphPosition[ i ];

				if ( influence === 0 ) { continue; }

				_tempA.fromBufferAttribute( morphAttribute, a );
				_tempB.fromBufferAttribute( morphAttribute, b );
				_tempC.fromBufferAttribute( morphAttribute, c );

				if ( morphTargetsRelative ) {

					_morphA.addScaledVector( _tempA, influence );
					_morphB.addScaledVector( _tempB, influence );
					_morphC.addScaledVector( _tempC, influence );

				} else {

					_morphA.addScaledVector( _tempA.sub( _vA ), influence );
					_morphB.addScaledVector( _tempB.sub( _vB ), influence );
					_morphC.addScaledVector( _tempC.sub( _vC ), influence );

				}

			}

			_vA.add( _morphA );
			_vB.add( _morphB );
			_vC.add( _morphC );

		}

		var intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );

		if ( intersection ) {

			if ( uv ) {

				_uvA.fromBufferAttribute( uv, a );
				_uvB.fromBufferAttribute( uv, b );
				_uvC.fromBufferAttribute( uv, c );

				intersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

			}

			if ( uv2 ) {

				_uvA.fromBufferAttribute( uv2, a );
				_uvB.fromBufferAttribute( uv2, b );
				_uvC.fromBufferAttribute( uv2, c );

				intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );

			}

			var face = new Face3( a, b, c );
			Triangle.getNormal( _vA, _vB, _vC, face.normal );

			intersection.face = face;

		}

		return intersection;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */

	var _geometryId = 0; // Geometry uses even numbers as Id
	var _m1$3 = new Matrix4();
	var _obj$1 = new Object3D();
	var _offset$1 = new Vector3();

	function Geometry() {

		Object.defineProperty( this, 'id', { value: _geometryId += 2 } );

		this.uuid = _Math.generateUUID();

		this.name = '';
		this.type = 'Geometry';

		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [[]];

		this.morphTargets = [];
		this.morphNormals = [];

		this.skinWeights = [];
		this.skinIndices = [];

		this.lineDistances = [];

		this.boundingBox = null;
		this.boundingSphere = null;

		// update flags

		this.elementsNeedUpdate = false;
		this.verticesNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;

	}

	Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: Geometry,

		isGeometry: true,

		applyMatrix: function ( matrix ) {

			var normalMatrix = new Matrix3().getNormalMatrix( matrix );

			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );

			}

			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

				}

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;

			return this;

		},

		rotateX: function ( angle ) {

			// rotate geometry around world x-axis

			_m1$3.makeRotationX( angle );

			this.applyMatrix( _m1$3 );

			return this;

		},

		rotateY: function ( angle ) {

			// rotate geometry around world y-axis

			_m1$3.makeRotationY( angle );

			this.applyMatrix( _m1$3 );

			return this;

		},

		rotateZ: function ( angle ) {

			// rotate geometry around world z-axis

			_m1$3.makeRotationZ( angle );

			this.applyMatrix( _m1$3 );

			return this;

		},

		translate: function ( x, y, z ) {

			// translate geometry

			_m1$3.makeTranslation( x, y, z );

			this.applyMatrix( _m1$3 );

			return this;

		},

		scale: function ( x, y, z ) {

			// scale geometry

			_m1$3.makeScale( x, y, z );

			this.applyMatrix( _m1$3 );

			return this;

		},

		lookAt: function ( vector ) {

			_obj$1.lookAt( vector );

			_obj$1.updateMatrix();

			this.applyMatrix( _obj$1.matrix );

			return this;

		},

		fromBufferGeometry: function ( geometry ) {

			var scope = this;

			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;

			if ( attributes.position === undefined ) {

				console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
				return this;

			}

			var positions = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;

			if ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }

			for ( var i = 0; i < positions.length; i += 3 ) {

				scope.vertices.push( new Vector3().fromArray( positions, i ) );

				if ( colors !== undefined ) {

					scope.colors.push( new Color().fromArray( colors, i ) );

				}

			}

			function addFace( a, b, c, materialIndex ) {

				var vertexColors = ( colors === undefined ) ? [] : [
					scope.colors[ a ].clone(),
					scope.colors[ b ].clone(),
					scope.colors[ c ].clone() ];

				var vertexNormals = ( normals === undefined ) ? [] : [
					new Vector3().fromArray( normals, a * 3 ),
					new Vector3().fromArray( normals, b * 3 ),
					new Vector3().fromArray( normals, c * 3 )
				];

				var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );

				scope.faces.push( face );

				if ( uvs !== undefined ) {

					scope.faceVertexUvs[ 0 ].push( [
						new Vector2().fromArray( uvs, a * 2 ),
						new Vector2().fromArray( uvs, b * 2 ),
						new Vector2().fromArray( uvs, c * 2 )
					] );

				}

				if ( uvs2 !== undefined ) {

					scope.faceVertexUvs[ 1 ].push( [
						new Vector2().fromArray( uvs2, a * 2 ),
						new Vector2().fromArray( uvs2, b * 2 ),
						new Vector2().fromArray( uvs2, c * 2 )
					] );

				}

			}

			var groups = geometry.groups;

			if ( groups.length > 0 ) {

				for ( var i = 0; i < groups.length; i ++ ) {

					var group = groups[ i ];

					var start = group.start;
					var count = group.count;

					for ( var j = start, jl = start + count; j < jl; j += 3 ) {

						if ( indices !== undefined ) {

							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );

						} else {

							addFace( j, j + 1, j + 2, group.materialIndex );

						}

					}

				}

			} else {

				if ( indices !== undefined ) {

					for ( var i = 0; i < indices.length; i += 3 ) {

						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

					}

				} else {

					for ( var i = 0; i < positions.length / 3; i += 3 ) {

						addFace( i, i + 1, i + 2 );

					}

				}

			}

			this.computeFaceNormals();

			if ( geometry.boundingBox !== null ) {

				this.boundingBox = geometry.boundingBox.clone();

			}

			if ( geometry.boundingSphere !== null ) {

				this.boundingSphere = geometry.boundingSphere.clone();

			}

			return this;

		},

		center: function () {

			this.computeBoundingBox();

			this.boundingBox.getCenter( _offset$1 ).negate();

			this.translate( _offset$1.x, _offset$1.y, _offset$1.z );

			return this;

		},

		normalize: function () {

			this.computeBoundingSphere();

			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;

			var s = radius === 0 ? 1 : 1.0 / radius;

			var matrix = new Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);

			this.applyMatrix( matrix );

			return this;

		},

		computeFaceNormals: function () {

			var cb = new Vector3(), ab = new Vector3();

			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

				var face = this.faces[ f ];

				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				cb.normalize();

				face.normal.copy( cb );

			}

		},

		computeVertexNormals: function ( areaWeighted ) {

			if ( areaWeighted === undefined ) { areaWeighted = true; }

			var v, vl, f, fl, face, vertices;

			vertices = new Array( this.vertices.length );

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new Vector3();

			}

			if ( areaWeighted ) {

				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm

				var vA, vB, vC;
				var cb = new Vector3(), ab = new Vector3();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );

					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );

				}

			} else {

				this.computeFaceNormals();

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );

				}

			}

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].normalize();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );

				} else {

					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeFlatVertexNormals: function () {

			var f, fl, face;

			this.computeFaceNormals();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				var vertexNormals = face.vertexNormals;

				if ( vertexNormals.length === 3 ) {

					vertexNormals[ 0 ].copy( face.normal );
					vertexNormals[ 1 ].copy( face.normal );
					vertexNormals[ 2 ].copy( face.normal );

				} else {

					vertexNormals[ 0 ] = face.normal.clone();
					vertexNormals[ 1 ] = face.normal.clone();
					vertexNormals[ 2 ] = face.normal.clone();

				}

			}

			if ( this.faces.length > 0 ) {

				this.normalsNeedUpdate = true;

			}

		},

		computeMorphNormals: function () {

			var i, il, f, fl, face;

			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( ! face.__originalFaceNormal ) {

					face.__originalFaceNormal = face.normal.clone();

				} else {

					face.__originalFaceNormal.copy( face.normal );

				}

				if ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }

				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

					if ( ! face.__originalVertexNormals[ i ] ) {

						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

					} else {

						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

					}

				}

			}

			// use temp geometry to compute face and vertex normals for each morph

			var tmpGeo = new Geometry();
			tmpGeo.faces = this.faces;

			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

				// create on first access

				if ( ! this.morphNormals[ i ] ) {

					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];

					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

					var faceNormal, vertexNormals;

					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

						faceNormal = new Vector3();
						vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };

						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );

					}

				}

				var morphNormals = this.morphNormals[ i ];

				// set vertices to morph target

				tmpGeo.vertices = this.morphTargets[ i ].vertices;

				// compute morph normals

				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();

				// store morph normals

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];

					faceNormal.copy( face.normal );

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				}

			}

			// restore original normals

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;

			}

		},

		computeBoundingBox: function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			this.boundingBox.setFromPoints( this.vertices );

		},

		computeBoundingSphere: function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			this.boundingSphere.setFromPoints( this.vertices );

		},

		merge: function ( geometry, matrix, materialIndexOffset ) {

			if ( ! ( geometry && geometry.isGeometry ) ) {

				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;

			}

			var normalMatrix,
				vertexOffset = this.vertices.length,
				vertices1 = this.vertices,
				vertices2 = geometry.vertices,
				faces1 = this.faces,
				faces2 = geometry.faces,
				colors1 = this.colors,
				colors2 = geometry.colors;

			if ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }

			if ( matrix !== undefined ) {

				normalMatrix = new Matrix3().getNormalMatrix( matrix );

			}

			// vertices

			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

				var vertex = vertices2[ i ];

				var vertexCopy = vertex.clone();

				if ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }

				vertices1.push( vertexCopy );

			}

			// colors

			for ( var i = 0, il = colors2.length; i < il; i ++ ) {

				colors1.push( colors2[ i ].clone() );

			}

			// faces

			for ( i = 0, il = faces2.length; i < il; i ++ ) {

				var face = faces2[ i ], faceCopy, normal, color,
					faceVertexNormals = face.vertexNormals,
					faceVertexColors = face.vertexColors;

				faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );

				if ( normalMatrix !== undefined ) {

					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

				}

				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

					normal = faceVertexNormals[ j ].clone();

					if ( normalMatrix !== undefined ) {

						normal.applyMatrix3( normalMatrix ).normalize();

					}

					faceCopy.vertexNormals.push( normal );

				}

				faceCopy.color.copy( face.color );

				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );

				}

				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

				faces1.push( faceCopy );

			}

			// uvs

			for ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs2 = geometry.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }

				for ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {

					var uvs2 = faceVertexUvs2[ j ], uvsCopy = [];

					for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {

						uvsCopy.push( uvs2[ k ].clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

		},

		mergeMesh: function ( mesh ) {

			if ( ! ( mesh && mesh.isMesh ) ) {

				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;

			}

			if ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }

			this.merge( mesh.geometry, mesh.matrix );

		},

		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */

		mergeVertices: function () {

			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];

			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;

			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

				if ( verticesMap[ key ] === undefined ) {

					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;

				} else {

					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];

				}

			}


			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];

			for ( i = 0, il = this.faces.length; i < il; i ++ ) {

				face = this.faces[ i ];

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

				indices = [ face.a, face.b, face.c ];

				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {

					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {

						faceIndicesToRemove.push( i );
						break;

					}

				}

			}

			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {

				var idx = faceIndicesToRemove[ i ];

				this.faces.splice( idx, 1 );

				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

					this.faceVertexUvs[ j ].splice( idx, 1 );

				}

			}

			// Use unique set of vertices

			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;

		},

		setFromPoints: function ( points ) {

			this.vertices = [];

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return this;

		},

		sortFacesByMaterialIndex: function () {

			var faces = this.faces;
			var length = faces.length;

			// tag faces

			for ( var i = 0; i < length; i ++ ) {

				faces[ i ]._id = i;

			}

			// sort faces

			function materialIndexSort( a, b ) {

				return a.materialIndex - b.materialIndex;

			}

			faces.sort( materialIndexSort );

			// sort uvs

			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];

			var newUvs1, newUvs2;

			if ( uvs1 && uvs1.length === length ) { newUvs1 = []; }
			if ( uvs2 && uvs2.length === length ) { newUvs2 = []; }

			for ( var i = 0; i < length; i ++ ) {

				var id = faces[ i ]._id;

				if ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }
				if ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }

			}

			if ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }
			if ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};

			// standard Geometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) { data.name = this.name; }

			if ( this.parameters !== undefined ) {

				var parameters = this.parameters;

				for ( var key in parameters ) {

					if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }

				}

				return data;

			}

			var vertices = [];

			for ( var i = 0; i < this.vertices.length; i ++ ) {

				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};

			for ( var i = 0; i < this.faces.length; i ++ ) {

				var face = this.faces[ i ];

				var hasMaterial = true;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;

				var faceType = 0;

				faceType = setBit( faceType, 0, 0 ); // isQuad
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );

				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
				faces.push( face.materialIndex );

				if ( hasFaceVertexUv ) {

					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);

				}

				if ( hasFaceNormal ) {

					faces.push( getNormalIndex( face.normal ) );

				}

				if ( hasFaceVertexNormal ) {

					var vertexNormals = face.vertexNormals;

					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);

				}

				if ( hasFaceColor ) {

					faces.push( getColorIndex( face.color ) );

				}

				if ( hasFaceVertexColor ) {

					var vertexColors = face.vertexColors;

					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);

				}

			}

			function setBit( value, position, enabled ) {

				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );

			}

			function getNormalIndex( normal ) {

				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

				if ( normalsHash[ hash ] !== undefined ) {

					return normalsHash[ hash ];

				}

				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );

				return normalsHash[ hash ];

			}

			function getColorIndex( color ) {

				var hash = color.r.toString() + color.g.toString() + color.b.toString();

				if ( colorsHash[ hash ] !== undefined ) {

					return colorsHash[ hash ];

				}

				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );

				return colorsHash[ hash ];

			}

			function getUvIndex( uv ) {

				var hash = uv.x.toString() + uv.y.toString();

				if ( uvsHash[ hash ] !== undefined ) {

					return uvsHash[ hash ];

				}

				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );

				return uvsHash[ hash ];

			}

			data.data = {};

			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) { data.data.colors = colors; }
			if ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility
			data.data.faces = faces;

			return data;

		},

		clone: function () {

			/*
			 // Handle primitives

			 var parameters = this.parameters;

			 if ( parameters !== undefined ) {

			 var values = [];

			 for ( var key in parameters ) {

			 values.push( parameters[ key ] );

			 }

			 var geometry = Object.create( this.constructor.prototype );
			 this.constructor.apply( geometry, values );
			 return geometry;

			 }

			 return new this.constructor().copy( this );
			 */

			return new Geometry().copy( this );

		},

		copy: function ( source ) {

			var i, il, j, jl, k, kl;

			// reset

			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
			this.morphTargets = [];
			this.morphNormals = [];
			this.skinWeights = [];
			this.skinIndices = [];
			this.lineDistances = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// name

			this.name = source.name;

			// vertices

			var vertices = source.vertices;

			for ( i = 0, il = vertices.length; i < il; i ++ ) {

				this.vertices.push( vertices[ i ].clone() );

			}

			// colors

			var colors = source.colors;

			for ( i = 0, il = colors.length; i < il; i ++ ) {

				this.colors.push( colors[ i ].clone() );

			}

			// faces

			var faces = source.faces;

			for ( i = 0, il = faces.length; i < il; i ++ ) {

				this.faces.push( faces[ i ].clone() );

			}

			// face vertex uvs

			for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {

				var faceVertexUvs = source.faceVertexUvs[ i ];

				if ( this.faceVertexUvs[ i ] === undefined ) {

					this.faceVertexUvs[ i ] = [];

				}

				for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {

					var uvs = faceVertexUvs[ j ], uvsCopy = [];

					for ( k = 0, kl = uvs.length; k < kl; k ++ ) {

						var uv = uvs[ k ];

						uvsCopy.push( uv.clone() );

					}

					this.faceVertexUvs[ i ].push( uvsCopy );

				}

			}

			// morph targets

			var morphTargets = source.morphTargets;

			for ( i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = {};
				morphTarget.name = morphTargets[ i ].name;

				// vertices

				if ( morphTargets[ i ].vertices !== undefined ) {

					morphTarget.vertices = [];

					for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {

						morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );

					}

				}

				// normals

				if ( morphTargets[ i ].normals !== undefined ) {

					morphTarget.normals = [];

					for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {

						morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );

					}

				}

				this.morphTargets.push( morphTarget );

			}

			// morph normals

			var morphNormals = source.morphNormals;

			for ( i = 0, il = morphNormals.length; i < il; i ++ ) {

				var morphNormal = {};

				// vertex normals

				if ( morphNormals[ i ].vertexNormals !== undefined ) {

					morphNormal.vertexNormals = [];

					for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {

						var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
						var destVertexNormal = {};

						destVertexNormal.a = srcVertexNormal.a.clone();
						destVertexNormal.b = srcVertexNormal.b.clone();
						destVertexNormal.c = srcVertexNormal.c.clone();

						morphNormal.vertexNormals.push( destVertexNormal );

					}

				}

				// face normals

				if ( morphNormals[ i ].faceNormals !== undefined ) {

					morphNormal.faceNormals = [];

					for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {

						morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );

					}

				}

				this.morphNormals.push( morphNormal );

			}

			// skin weights

			var skinWeights = source.skinWeights;

			for ( i = 0, il = skinWeights.length; i < il; i ++ ) {

				this.skinWeights.push( skinWeights[ i ].clone() );

			}

			// skin indices

			var skinIndices = source.skinIndices;

			for ( i = 0, il = skinIndices.length; i < il; i ++ ) {

				this.skinIndices.push( skinIndices[ i ].clone() );

			}

			// line distances

			var lineDistances = source.lineDistances;

			for ( i = 0, il = lineDistances.length; i < il; i ++ ) {

				this.lineDistances.push( lineDistances[ i ] );

			}

			// bounding box

			var boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			var boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// update flags

			this.elementsNeedUpdate = source.elementsNeedUpdate;
			this.verticesNeedUpdate = source.verticesNeedUpdate;
			this.uvsNeedUpdate = source.uvsNeedUpdate;
			this.normalsNeedUpdate = source.normalsNeedUpdate;
			this.colorsNeedUpdate = source.colorsNeedUpdate;
			this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
			this.groupsNeedUpdate = source.groupsNeedUpdate;

			return this;

		},

		dispose: function () {

			this.dispatchEvent( { type: 'dispose' } );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// BoxGeometry

	var BoxGeometry = /*@__PURE__*/(function (Geometry) {
		function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			Geometry.call(this);

			this.type = 'BoxGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
			this.mergeVertices();

		}

		if ( Geometry ) BoxGeometry.__proto__ = Geometry;
		BoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );
		BoxGeometry.prototype.constructor = BoxGeometry;

		return BoxGeometry;
	}(Geometry));

	// BoxBufferGeometry

	var BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {
		function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {

			BufferGeometry.call(this);

			this.type = 'BoxBufferGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			var scope = this;

			width = width || 1;
			height = height || 1;
			depth = depth || 1;

			// segments

			widthSegments = Math.floor( widthSegments ) || 1;
			heightSegments = Math.floor( heightSegments ) || 1;
			depthSegments = Math.floor( depthSegments ) || 1;

			// buffers

			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];

			// helper variables

			var numberOfVertices = 0;
			var groupStart = 0;

			// build each side of the box geometry

			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
			buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
			buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

			// build geometry

			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

				var segmentWidth = width / gridX;
				var segmentHeight = height / gridY;

				var widthHalf = width / 2;
				var heightHalf = height / 2;
				var depthHalf = depth / 2;

				var gridX1 = gridX + 1;
				var gridY1 = gridY + 1;

				var vertexCounter = 0;
				var groupCount = 0;

				var ix, iy;

				var vector = new Vector3();

				// generate vertices, normals and uvs

				for ( iy = 0; iy < gridY1; iy ++ ) {

					var y = iy * segmentHeight - heightHalf;

					for ( ix = 0; ix < gridX1; ix ++ ) {

						var x = ix * segmentWidth - widthHalf;

						// set values to correct vector component

						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;

						// now apply vector to vertex buffer

						vertices.push( vector.x, vector.y, vector.z );

						// set values to correct vector component

						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;

						// now apply vector to normal buffer

						normals.push( vector.x, vector.y, vector.z );

						// uvs

						uvs.push( ix / gridX );
						uvs.push( 1 - ( iy / gridY ) );

						// counters

						vertexCounter += 1;

					}

				}

				// indices

				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment

				for ( iy = 0; iy < gridY; iy ++ ) {

					for ( ix = 0; ix < gridX; ix ++ ) {

						var a = numberOfVertices + ix + gridX1 * iy;
						var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

						// increase counter

						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, materialIndex );

				// calculate new start value for groups

				groupStart += groupCount;

				// update total number of vertices

				numberOfVertices += vertexCounter;

			}

		}

		if ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;
		BoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );
		BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;

		return BoxBufferGeometry;
	}(BufferGeometry));

	/**
	 * Uniform Utilities
	 */

	function cloneUniforms( src ) {

		var dst = {};

		for ( var u in src ) {

			dst[ u ] = {};

			for ( var p in src[ u ] ) {

				var property = src[ u ][ p ];

				if ( property && ( property.isColor ||
					property.isMatrix3 || property.isMatrix4 ||
					property.isVector2 || property.isVector3 || property.isVector4 ||
					property.isTexture ) ) {

					dst[ u ][ p ] = property.clone();

				} else if ( Array.isArray( property ) ) {

					dst[ u ][ p ] = property.slice();

				} else {

					dst[ u ][ p ] = property;

				}

			}

		}

		return dst;

	}

	function mergeUniforms( uniforms ) {

		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = cloneUniforms( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	}

	// Legacy

	var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function ShaderMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShaderMaterial';

		this.defines = {};
		this.uniforms = {};

		this.vertexShader = default_vertex;
		this.fragmentShader = default_fragment;

		this.linewidth = 1;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false; // set to use scene fog
		this.lights = false; // set to use scene lights
		this.clipping = false; // set to use user-defined clipping planes

		this.skinning = false; // set to use skinning attribute streams
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals

		this.extensions = {
			derivatives: false, // set to use derivatives
			fragDepth: false, // set to use fragment depth values
			drawBuffers: false, // set to use draw buffers
			shaderTextureLOD: false // set to use shader texture LOD
		};

		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};

		this.index0AttributeName = undefined;
		this.uniformsNeedUpdate = false;

		if ( parameters !== undefined ) {

			if ( parameters.attributes !== undefined ) {

				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );

			}

			this.setValues( parameters );

		}

	}

	ShaderMaterial.prototype = Object.create( Material.prototype );
	ShaderMaterial.prototype.constructor = ShaderMaterial;

	ShaderMaterial.prototype.isShaderMaterial = true;

	ShaderMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;

		this.uniforms = cloneUniforms( source.uniforms );

		this.defines = Object.assign( {}, source.defines );

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.lights = source.lights;
		this.clipping = source.clipping;

		this.skinning = source.skinning;

		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		this.extensions = source.extensions;

		return this;

	};

	ShaderMaterial.prototype.toJSON = function ( meta ) {

		var data = Material.prototype.toJSON.call( this, meta );

		data.uniforms = {};

		for ( var name in this.uniforms ) {

			var uniform = this.uniforms[ name ];
			var value = uniform.value;

			if ( value && value.isTexture ) {

				data.uniforms[ name ] = {
					type: 't',
					value: value.toJSON( meta ).uuid
				};

			} else if ( value && value.isColor ) {

				data.uniforms[ name ] = {
					type: 'c',
					value: value.getHex()
				};

			} else if ( value && value.isVector2 ) {

				data.uniforms[ name ] = {
					type: 'v2',
					value: value.toArray()
				};

			} else if ( value && value.isVector3 ) {

				data.uniforms[ name ] = {
					type: 'v3',
					value: value.toArray()
				};

			} else if ( value && value.isVector4 ) {

				data.uniforms[ name ] = {
					type: 'v4',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix3 ) {

				data.uniforms[ name ] = {
					type: 'm3',
					value: value.toArray()
				};

			} else if ( value && value.isMatrix4 ) {

				data.uniforms[ name ] = {
					type: 'm4',
					value: value.toArray()
				};

			} else {

				data.uniforms[ name ] = {
					value: value
				};

				// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

			}

		}

		if ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }

		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;

		var extensions = {};

		for ( var key in this.extensions ) {

			if ( this.extensions[ key ] === true ) { extensions[ key ] = true; }

		}

		if ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }

		return data;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/

	function Camera() {

		Object3D.call( this );

		this.type = 'Camera';

		this.matrixWorldInverse = new Matrix4();

		this.projectionMatrix = new Matrix4();
		this.projectionMatrixInverse = new Matrix4();

	}

	Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Camera,

		isCamera: true,

		copy: function ( source, recursive ) {

			Object3D.prototype.copy.call( this, source, recursive );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );

			this.projectionMatrix.copy( source.projectionMatrix );
			this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

			return this;

		},

		getWorldDirection: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
				target = new Vector3();

			}

			this.updateMatrixWorld( true );

			var e = this.matrixWorld.elements;

			return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

		},

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			this.matrixWorldInverse.getInverse( this.matrixWorld );

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author tschw
	 */

	function PerspectiveCamera( fov, aspect, near, far ) {

		Camera.call( this );

		this.type = 'PerspectiveCamera';

		this.fov = fov !== undefined ? fov : 50;
		this.zoom = 1;

		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
		this.focus = 10;

		this.aspect = aspect !== undefined ? aspect : 1;
		this.view = null;

		this.filmGauge = 35;	// width of the film (default in millimeters)
		this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

		this.updateProjectionMatrix();

	}

	PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: PerspectiveCamera,

		isPerspectiveCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		},

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength: function ( focalLength ) {

			// see http://www.bobatkins.com/photography/technical/field_of_view.html
			var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = _Math.RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		},

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength: function () {

			var vExtentSlope = Math.tan( _Math.DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		},

		getEffectiveFOV: function () {

			return _Math.RAD2DEG * 2 * Math.atan(
				Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );

		},

		getFilmWidth: function () {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		},

		getFilmHeight: function () {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		},

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   var w = 1920;
		 *   var h = 1080;
		 *   var fullWidth = w * 3;
		 *   var fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var near = this.near,
				top = near * Math.tan( _Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,
				height = 2 * top,
				width = this.aspect * height,
				left = - 0.5 * width,
				view = this.view;

			if ( this.view !== null && this.view.enabled ) {

				var fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			var skew = this.filmOffset;
			if ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }

			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );

			this.projectionMatrixInverse.getInverse( this.projectionMatrix );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	} );

	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */

	var fov = 90, aspect = 1;

	function CubeCamera( near, far, cubeResolution, options ) {

		Object3D.call( this );

		this.type = 'CubeCamera';

		var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
		this.add( cameraPX );

		var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );

		var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
		this.add( cameraPY );

		var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );

		var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );

		var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );

		options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };

		this.renderTarget = new WebGLRenderTargetCube( cubeResolution, cubeResolution, options );
		this.renderTarget.texture.name = "CubeCamera";

		this.update = function ( renderer, scene ) {

			if ( this.parent === null ) { this.updateMatrixWorld(); }

			var currentRenderTarget = renderer.getRenderTarget();

			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderer.setRenderTarget( renderTarget, 0 );
			renderer.render( scene, cameraPX );

			renderer.setRenderTarget( renderTarget, 1 );
			renderer.render( scene, cameraNX );

			renderer.setRenderTarget( renderTarget, 2 );
			renderer.render( scene, cameraPY );

			renderer.setRenderTarget( renderTarget, 3 );
			renderer.render( scene, cameraNY );

			renderer.setRenderTarget( renderTarget, 4 );
			renderer.render( scene, cameraPZ );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderer.setRenderTarget( renderTarget, 5 );
			renderer.render( scene, cameraNZ );

			renderer.setRenderTarget( currentRenderTarget );

		};

		this.clear = function ( renderer, color, depth, stencil ) {

			var currentRenderTarget = renderer.getRenderTarget();

			var renderTarget = this.renderTarget;

			for ( var i = 0; i < 6; i ++ ) {

				renderer.setRenderTarget( renderTarget, i );

				renderer.clear( color, depth, stencil );

			}

			renderer.setRenderTarget( currentRenderTarget );

		};

	}

	CubeCamera.prototype = Object.create( Object3D.prototype );
	CubeCamera.prototype.constructor = CubeCamera;

	/**
	 * @author alteredq / http://alteredqualia.com
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function WebGLRenderTargetCube( width, height, options ) {

		WebGLRenderTarget.call( this, width, height, options );

	}

	WebGLRenderTargetCube.prototype = Object.create( WebGLRenderTarget.prototype );
	WebGLRenderTargetCube.prototype.constructor = WebGLRenderTargetCube;

	WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube = true;

	WebGLRenderTargetCube.prototype.fromEquirectangularTexture = function ( renderer, texture ) {

		this.texture.type = texture.type;
		this.texture.format = texture.format;
		this.texture.encoding = texture.encoding;

		var scene = new Scene();

		var shader = {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: [

				"varying vec3 vWorldDirection;",

				"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",

				"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",

				"}",

				"void main() {",

				"	vWorldDirection = transformDirection( position, modelMatrix );",

				"	#include <begin_vertex>",
				"	#include <project_vertex>",

				"}"

			].join( '\n' ),

			fragmentShader: [

				"uniform sampler2D tEquirect;",

				"varying vec3 vWorldDirection;",

				"#define RECIPROCAL_PI 0.31830988618",
				"#define RECIPROCAL_PI2 0.15915494",

				"void main() {",

				"	vec3 direction = normalize( vWorldDirection );",

				"	vec2 sampleUV;",

				"	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",

				"	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",

				"	gl_FragColor = texture2D( tEquirect, sampleUV );",

				"}"

			].join( '\n' ),
		};

		var material = new ShaderMaterial( {

			type: 'CubemapFromEquirect',

			uniforms: cloneUniforms( shader.uniforms ),
			vertexShader: shader.vertexShader,
			fragmentShader: shader.fragmentShader,
			side: BackSide,
			blending: NoBlending

		} );

		material.uniforms.tEquirect.value = texture;

		var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );

		scene.add( mesh );

		var camera = new CubeCamera( 1, 10, 1 );

		camera.renderTarget = this;
		camera.renderTarget.texture.name = 'CubeCameraTexture';

		camera.update( renderer, scene );

		mesh.geometry.dispose();
		mesh.material.dispose();

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { data: data || null, width: width || 1, height: height || 1 };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.generateMipmaps = false;
		this.flipY = false;
		this.unpackAlignment = 1;

		this.needsUpdate = true;

	}

	DataTexture.prototype = Object.create( Texture.prototype );
	DataTexture.prototype.constructor = DataTexture;

	DataTexture.prototype.isDataTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */

	var _sphere$1 = new Sphere();
	var _vector$5 = new Vector3();

	function Frustum( p0, p1, p2, p3, p4, p5 ) {

		this.planes = [

			( p0 !== undefined ) ? p0 : new Plane(),
			( p1 !== undefined ) ? p1 : new Plane(),
			( p2 !== undefined ) ? p2 : new Plane(),
			( p3 !== undefined ) ? p3 : new Plane(),
			( p4 !== undefined ) ? p4 : new Plane(),
			( p5 !== undefined ) ? p5 : new Plane()

		];

	}

	Object.assign( Frustum.prototype, {

		set: function ( p0, p1, p2, p3, p4, p5 ) {

			var planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( frustum ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		},

		setFromMatrix: function ( m ) {

			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			return this;

		},

		intersectsObject: function ( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( _sphere$1 );

		},

		intersectsSprite: function ( sprite ) {

			_sphere$1.center.set( 0, 0, 0 );
			_sphere$1.radius = 0.7071067811865476;
			_sphere$1.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( _sphere$1 );

		},

		intersectsSphere: function ( sphere ) {

			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;

			for ( var i = 0; i < 6; i ++ ) {

				var distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		},

		intersectsBox: function ( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				var plane = planes[ i ];

				// corner at max distance

				_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				if ( plane.distanceToPoint( _vector$5 ) < 0 ) {

					return false;

				}

			}

			return true;

		},

		containsPoint: function ( point ) {

			var planes = this.planes;

			for ( var i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

	} );

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "vec3 transformed = vec3( position );";

	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

	var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvarying vec3 vViewPosition;\n#endif";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif";

	var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";

	var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV( sampler2D envMap, vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif";

	var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\ttransformedNormal = mat3( instanceMatrix ) * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = normalMatrix * objectTangent;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

	var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

	var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

	var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

	var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

	var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var gradientmap_pars_fragment = "#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";

	var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";

	var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, queryReflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = clamp( clearcoatRoughness, 0.04, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( pointLight.shadow, directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( spotLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectLight.color *= all( bvec3( directionalLight.shadow, directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

	var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

	var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";

	var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

	var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";

	var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

	var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";

	var clearcoat_normalmap_pars_fragment = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpack2HalfToRGBA( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

	var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

	var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

	var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpack2HalfToRGBA( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = ( floor( uv * size - 0.5 ) + 0.5 ) * texelSize;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

	var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

	var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLight directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= all( bvec2( directionalLight.shadow, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLight spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= all( bvec2( spotLight.shadow, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLight pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= all( bvec2( pointLight.shadow, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

	var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";

	var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";

	var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";

	var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";

	var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";

	var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif";

	var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

	var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

	var cube_frag = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}";

	var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}";

	var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

	var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

	var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";

	var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

	var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

	var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";

	var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

	var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

	var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}";

	var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";

	var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	var ShaderChunk = {
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		encodings_fragment: encodings_fragment,
		encodings_pars_fragment: encodings_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_common_pars_fragment: envmap_common_pars_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_vertex: lights_lambert_vertex,
		lights_pars_begin: lights_pars_begin,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normalmap_pars_fragment: normalmap_pars_fragment,
		clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
		clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
		clearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		uv2_pars_fragment: uv2_pars_fragment,
		uv2_pars_vertex: uv2_pars_vertex,
		uv2_vertex: uv2_vertex,
		worldpos_vertex: worldpos_vertex,

		background_frag: background_frag,
		background_vert: background_vert,
		cube_frag: cube_frag,
		cube_vert: cube_vert,
		depth_frag: depth_frag,
		depth_vert: depth_vert,
		distanceRGBA_frag: distanceRGBA_frag,
		distanceRGBA_vert: distanceRGBA_vert,
		equirect_frag: equirect_frag,
		equirect_vert: equirect_vert,
		linedashed_frag: linedashed_frag,
		linedashed_vert: linedashed_vert,
		meshbasic_frag: meshbasic_frag,
		meshbasic_vert: meshbasic_vert,
		meshlambert_frag: meshlambert_frag,
		meshlambert_vert: meshlambert_vert,
		meshmatcap_frag: meshmatcap_frag,
		meshmatcap_vert: meshmatcap_vert,
		meshphong_frag: meshphong_frag,
		meshphong_vert: meshphong_vert,
		meshphysical_frag: meshphysical_frag,
		meshphysical_vert: meshphysical_vert,
		normal_frag: normal_frag,
		normal_vert: normal_vert,
		points_frag: points_frag,
		points_vert: points_vert,
		shadow_frag: shadow_frag,
		shadow_vert: shadow_vert,
		sprite_frag: sprite_frag,
		sprite_vert: sprite_vert
	};

	/**
	 * Uniforms library for shared webgl shaders
	 */

	var UniformsLib = {

		common: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },

			map: { value: null },
			uvTransform: { value: new Matrix3() },

			alphaMap: { value: null },

		},

		specularmap: {

			specularMap: { value: null },

		},

		envmap: {

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 },
			refractionRatio: { value: 0.98 },
			maxMipLevel: { value: 0 }

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 }

		},

		emissivemap: {

			emissiveMap: { value: null }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalScale: { value: new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		roughnessmap: {

			roughnessMap: { value: null }

		},

		metalnessmap: {

			metalnessMap: { value: null }

		},

		gradientmap: {

			gradientMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			lightProbe: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotShadowMap: { value: [] },
			spotShadowMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {},

				shadow: {},
				shadowBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },

			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} }

		},

		points: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			alphaMap: { value: null },
			uvTransform: { value: new Matrix3() }

		},

		sprite: {

			diffuse: { value: new Color( 0xeeeeee ) },
			opacity: { value: 1.0 },
			center: { value: new Vector2( 0.5, 0.5 ) },
			rotation: { value: 0.0 },
			map: { value: null },
			alphaMap: { value: null },
			uvTransform: { value: new Matrix3() }

		}

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */

	var ShaderLib = {

		basic: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					specular: { value: new Color( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: new Color( 0x000000 ) },
					roughness: { value: 0.5 },
					metalness: { value: 0.5 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		matcap: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				{
					matcap: { value: null }
				}
			] ),

			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag

		},

		points: {

			uniforms: mergeUniforms( [
				UniformsLib.points,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),

			vertexShader: ShaderChunk.normal_vert,
			fragmentShader: ShaderChunk.normal_frag

		},

		sprite: {

			uniforms: mergeUniforms( [
				UniformsLib.sprite,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag

		},

		background: {

			uniforms: {
				uvTransform: { value: new Matrix3() },
				t2D: { value: null },
			},

			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag

		},
		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		equirect: {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		},

		shadow: {

			uniforms: mergeUniforms( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: new Color( 0x00000 ) },
					opacity: { value: 1.0 }
				} ] ),

			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag

		}

	};

	ShaderLib.physical = {

		uniforms: mergeUniforms( [
			ShaderLib.standard.uniforms,
			{
				transparency: { value: 0 },
				clearcoat: { value: 0 },
				clearcoatRoughness: { value: 0 },
				sheen: { value: new Color( 0x000000 ) },
				clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
				clearcoatNormalMap: { value: null },
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAnimation() {

		var context = null;
		var isAnimating = false;
		var animationLoop = null;

		function onAnimationFrame( time, frame ) {

			if ( isAnimating === false ) { return; }

			animationLoop( time, frame );

			context.requestAnimationFrame( onAnimationFrame );

		}

		return {

			start: function () {

				if ( isAnimating === true ) { return; }
				if ( animationLoop === null ) { return; }

				context.requestAnimationFrame( onAnimationFrame );

				isAnimating = true;

			},

			stop: function () {

				isAnimating = false;

			},

			setAnimationLoop: function ( callback ) {

				animationLoop = callback;

			},

			setContext: function ( value ) {

				context = value;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLAttributes( gl ) {

		var buffers = new WeakMap();

		function createBuffer( attribute, bufferType ) {

			var array = attribute.array;
			var usage = attribute.usage;

			var buffer = gl.createBuffer();

			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );

			attribute.onUploadCallback();

			var type = 5126;

			if ( array instanceof Float32Array ) {

				type = 5126;

			} else if ( array instanceof Float64Array ) {

				console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );

			} else if ( array instanceof Uint16Array ) {

				type = 5123;

			} else if ( array instanceof Int16Array ) {

				type = 5122;

			} else if ( array instanceof Uint32Array ) {

				type = 5125;

			} else if ( array instanceof Int32Array ) {

				type = 5124;

			} else if ( array instanceof Int8Array ) {

				type = 5120;

			} else if ( array instanceof Uint8Array ) {

				type = 5121;

			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};

		}

		function updateBuffer( buffer, attribute, bufferType ) {

			var array = attribute.array;
			var updateRange = attribute.updateRange;

			gl.bindBuffer( bufferType, buffer );

			if ( updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, array );

			} else {

				gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
					array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

				updateRange.count = - 1; // reset range

			}

		}

		//

		function get( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

			return buffers.get( attribute );

		}

		function remove( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

			var data = buffers.get( attribute );

			if ( data ) {

				gl.deleteBuffer( data.buffer );

				buffers.delete( attribute );

			}

		}

		function update( attribute, bufferType ) {

			if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }

			var data = buffers.get( attribute );

			if ( data === undefined ) {

				buffers.set( attribute, createBuffer( attribute, bufferType ) );

			} else if ( data.version < attribute.version ) {

				updateBuffer( data.buffer, attribute, bufferType );

				data.version = attribute.version;

			}

		}

		return {

			get: get,
			remove: remove,
			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PlaneGeometry

	function PlaneGeometry( width, height, widthSegments, heightSegments ) {

		Geometry.call( this );

		this.type = 'PlaneGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
		this.mergeVertices();

	}

	PlaneGeometry.prototype = Object.create( Geometry.prototype );
	PlaneGeometry.prototype.constructor = PlaneGeometry;

	// PlaneBufferGeometry

	function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {

		BufferGeometry.call( this );

		this.type = 'PlaneBufferGeometry';

		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};

		width = width || 1;
		height = height || 1;

		var width_half = width / 2;
		var height_half = height / 2;

		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;

		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;

		var segment_width = width / gridX;
		var segment_height = height / gridY;

		var ix, iy;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy < gridY1; iy ++ ) {

			var y = iy * segment_height - height_half;

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var x = ix * segment_width - width_half;

				vertices.push( x, - y, 0 );

				normals.push( 0, 0, 1 );

				uvs.push( ix / gridX );
				uvs.push( 1 - ( iy / gridY ) );

			}

		}

		// indices

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {

		var clearColor = new Color( 0x000000 );
		var clearAlpha = 0;

		var planeMesh;
		var boxMesh;
		// Store the current background texture and its `version`
		// so we can recompile the material accordingly.
		var currentBackground = null;
		var currentBackgroundVersion = 0;

		function render( renderList, scene, camera, forceClear ) {

			var background = scene.background;

			// Ignore background in AR
			// TODO: Reconsider this.

			var vr = renderer.vr;
			var session = vr.getSession && vr.getSession();

			if ( session && session.environmentBlendMode === 'additive' ) {

				background = null;

			}

			if ( background === null ) {

				setClear( clearColor, clearAlpha );
				currentBackground = null;
				currentBackgroundVersion = 0;

			} else if ( background && background.isColor ) {

				setClear( background, 1 );
				forceClear = true;
				currentBackground = null;
				currentBackgroundVersion = 0;

			}

			if ( renderer.autoClear || forceClear ) {

				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

			}

			if ( background && ( background.isCubeTexture || background.isWebGLRenderTargetCube ) ) {

				if ( boxMesh === undefined ) {

					boxMesh = new Mesh(
						new BoxBufferGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							type: 'BackgroundCubeMaterial',
							uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
							vertexShader: ShaderLib.cube.vertexShader,
							fragmentShader: ShaderLib.cube.fragmentShader,
							side: BackSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					boxMesh.geometry.deleteAttribute( 'normal' );
					boxMesh.geometry.deleteAttribute( 'uv' );

					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

						this.matrixWorld.copyPosition( camera.matrixWorld );

					};

					// enable code injection for non-built-in material
					Object.defineProperty( boxMesh.material, 'map', {

						get: function () {

							return this.uniforms.tCube.value;

						}

					} );

					objects.update( boxMesh );

				}

				var texture = background.isWebGLRenderTargetCube ? background.texture : background;
				boxMesh.material.uniforms.tCube.value = texture;
				boxMesh.material.uniforms.tFlip.value = ( background.isWebGLRenderTargetCube ) ? 1 : - 1;

				if ( currentBackground !== background ||
				     currentBackgroundVersion !== texture.version ) {

					boxMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = texture.version;

				}

				// push to the pre-sorted opaque render list
				renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

			} else if ( background && background.isTexture ) {

				if ( planeMesh === undefined ) {

					planeMesh = new Mesh(
						new PlaneBufferGeometry( 2, 2 ),
						new ShaderMaterial( {
							type: 'BackgroundMaterial',
							uniforms: cloneUniforms( ShaderLib.background.uniforms ),
							vertexShader: ShaderLib.background.vertexShader,
							fragmentShader: ShaderLib.background.fragmentShader,
							side: FrontSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					planeMesh.geometry.deleteAttribute( 'normal' );

					// enable code injection for non-built-in material
					Object.defineProperty( planeMesh.material, 'map', {

						get: function () {

							return this.uniforms.t2D.value;

						}

					} );

					objects.update( planeMesh );

				}

				planeMesh.material.uniforms.t2D.value = background;

				if ( background.matrixAutoUpdate === true ) {

					background.updateMatrix();

				}

				planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

				if ( currentBackground !== background ||
					   currentBackgroundVersion !== background.version ) {

					planeMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = background.version;

				}


				// push to the pre-sorted opaque render list
				renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

			}

		}

		function setClear( color, alpha ) {

			state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );

		}

		return {

			getClearColor: function () {

				return clearColor;

			},
			setClearColor: function ( color, alpha ) {

				clearColor.set( color );
				clearAlpha = alpha !== undefined ? alpha : 1;
				setClear( clearColor, clearAlpha );

			},
			getClearAlpha: function () {

				return clearAlpha;

			},
			setClearAlpha: function ( alpha ) {

				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			render: render

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		var mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			info.update( count, mode );

		}

		function renderInstances( geometry, start, count, primcount ) {

			if ( primcount === 0 ) { return; }

			var extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawArraysInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawArraysInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, start, count, primcount );

			info.update( count, mode, primcount );

		}

		//

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLCapabilities( gl, extensions, parameters ) {

		var maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) { return maxAnisotropy; }

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension !== null ) {

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
					gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
					gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		/* eslint-disable no-undef */
		var isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
			( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
		/* eslint-enable no-undef */

		var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		var maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

		var maxTextures = gl.getParameter( 34930 );
		var maxVertexTextures = gl.getParameter( 35660 );
		var maxTextureSize = gl.getParameter( 3379 );
		var maxCubemapSize = gl.getParameter( 34076 );

		var maxAttributes = gl.getParameter( 34921 );
		var maxVertexUniforms = gl.getParameter( 36347 );
		var maxVaryings = gl.getParameter( 36348 );
		var maxFragmentUniforms = gl.getParameter( 36349 );

		var vertexTextures = maxVertexTextures > 0;
		var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
		var floatVertexTextures = vertexTextures && floatFragmentTextures;

		var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;

		return {

			isWebGL2: isWebGL2,

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,

			maxSamples: maxSamples

		};

	}

	/**
	 * @author tschw
	 */

	function WebGLClipping() {

		var scope = this,

			globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false,

			plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function ( planes, enableLocalClipping, camera ) {

			var enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			globalState = projectPlanes( planes, camera, 0 );
			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function () {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function () {

			renderingShadows = false;
			resetGlobalState();

		};

		this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {

			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

				// there's no local clipping

				if ( renderingShadows ) {

					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();

				}

			} else {

				var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4,

					dstArray = cache.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, fromCache );

				for ( var i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				cache.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			var nPlanes = planes !== null ? planes.length : 0,
				dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					var flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;

			return dstArray;

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLExtensions( gl ) {

		var extensions = {};

		return {

			get: function ( name ) {

				if ( extensions[ name ] !== undefined ) {

					return extensions[ name ];

				}

				var extension;

				switch ( name ) {

					case 'WEBGL_depth_texture':
						extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
						break;

					case 'EXT_texture_filter_anisotropic':
						extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
						break;

					case 'WEBGL_compressed_texture_s3tc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
						break;

					case 'WEBGL_compressed_texture_pvrtc':
						extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
						break;

					default:
						extension = gl.getExtension( name );

				}

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				extensions[ name ] = extension;

				return extension;

			}

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLGeometries( gl, attributes, info ) {

		var geometries = new WeakMap();
		var wireframeAttributes = new WeakMap();

		function onGeometryDispose( event ) {

			var geometry = event.target;
			var buffergeometry = geometries.get( geometry );

			if ( buffergeometry.index !== null ) {

				attributes.remove( buffergeometry.index );

			}

			for ( var name in buffergeometry.attributes ) {

				attributes.remove( buffergeometry.attributes[ name ] );

			}

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			geometries.delete( geometry );

			var attribute = wireframeAttributes.get( buffergeometry );

			if ( attribute ) {

				attributes.remove( attribute );
				wireframeAttributes.delete( buffergeometry );

			}

			//

			info.memory.geometries --;

		}

		function get( object, geometry ) {

			var buffergeometry = geometries.get( geometry );

			if ( buffergeometry ) { return buffergeometry; }

			geometry.addEventListener( 'dispose', onGeometryDispose );

			if ( geometry.isBufferGeometry ) {

				buffergeometry = geometry;

			} else if ( geometry.isGeometry ) {

				if ( geometry._bufferGeometry === undefined ) {

					geometry._bufferGeometry = new BufferGeometry().setFromObject( object );

				}

				buffergeometry = geometry._bufferGeometry;

			}

			geometries.set( geometry, buffergeometry );

			info.memory.geometries ++;

			return buffergeometry;

		}

		function update( geometry ) {

			var index = geometry.index;
			var geometryAttributes = geometry.attributes;

			if ( index !== null ) {

				attributes.update( index, 34963 );

			}

			for ( var name in geometryAttributes ) {

				attributes.update( geometryAttributes[ name ], 34962 );

			}

			// morph targets

			var morphAttributes = geometry.morphAttributes;

			for ( var name in morphAttributes ) {

				var array = morphAttributes[ name ];

				for ( var i = 0, l = array.length; i < l; i ++ ) {

					attributes.update( array[ i ], 34962 );

				}

			}

		}

		function updateWireframeAttribute( geometry ) {

			var indices = [];

			var geometryIndex = geometry.index;
			var geometryPosition = geometry.attributes.position;
			var version = 0;

			if ( geometryIndex !== null ) {

				var array = geometryIndex.array;
				version = geometryIndex.version;

				for ( var i = 0, l = array.length; i < l; i += 3 ) {

					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else {

				var array = geometryPosition.array;
				version = geometryPosition.version;

				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					var a = i + 0;
					var b = i + 1;
					var c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			}

			var attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
			attribute.version = version;

			attributes.update( attribute, 34963 );

			//

			var previousAttribute = wireframeAttributes.get( geometry );

			if ( previousAttribute ) { attributes.remove( previousAttribute ); }

			//

			wireframeAttributes.set( geometry, attribute );

		}

		function getWireframeAttribute( geometry ) {

			var currentAttribute = wireframeAttributes.get( geometry );

			if ( currentAttribute ) {

				var geometryIndex = geometry.index;

				if ( geometryIndex !== null ) {

					// if the attribute is obsolete, create a new one

					if ( currentAttribute.version < geometryIndex.version ) {

						updateWireframeAttribute( geometry );

					}

				}

			} else {

				updateWireframeAttribute( geometry );

			}

			return wireframeAttributes.get( geometry );

		}

		return {

			get: get,
			update: update,

			getWireframeAttribute: getWireframeAttribute

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		var mode;

		function setMode( value ) {

			mode = value;

		}

		var type, bytesPerElement;

		function setIndex( value ) {

			type = value.type;
			bytesPerElement = value.bytesPerElement;

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * bytesPerElement );

			info.update( count, mode );

		}

		function renderInstances( geometry, start, count, primcount ) {

			if ( primcount === 0 ) { return; }

			var extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawElementsInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawElementsInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

			info.update( count, mode, primcount );

		}

		//

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WebGLInfo( gl ) {

		var memory = {
			geometries: 0,
			textures: 0
		};

		var render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update( count, mode, instanceCount ) {

			instanceCount = instanceCount || 1;

			render.calls ++;

			switch ( mode ) {

				case 4:
					render.triangles += instanceCount * ( count / 3 );
					break;

				case 5:
				case 6:
					render.triangles += instanceCount * ( count - 2 );
					break;

				case 1:
					render.lines += instanceCount * ( count / 2 );
					break;

				case 3:
					render.lines += instanceCount * ( count - 1 );
					break;

				case 2:
					render.lines += instanceCount * count;
					break;

				case 0:
					render.points += instanceCount * count;
					break;

				default:
					console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
					break;

			}

		}

		function reset() {

			render.frame ++;
			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;

		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

	}

	function WebGLMorphtargets( gl ) {

		var influencesList = {};
		var morphInfluences = new Float32Array( 8 );

		function update( object, geometry, material, program ) {

			var objectInfluences = object.morphTargetInfluences;

			var length = objectInfluences.length;

			var influences = influencesList[ geometry.id ];

			if ( influences === undefined ) {

				// initialise list

				influences = [];

				for ( var i = 0; i < length; i ++ ) {

					influences[ i ] = [ i, 0 ];

				}

				influencesList[ geometry.id ] = influences;

			}

			var morphTargets = material.morphTargets && geometry.morphAttributes.position;
			var morphNormals = material.morphNormals && geometry.morphAttributes.normal;

			// Remove current morphAttributes

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				if ( influence[ 1 ] !== 0 ) {

					if ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }
					if ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }

				}

			}

			// Collect influences

			for ( var i = 0; i < length; i ++ ) {

				var influence = influences[ i ];

				influence[ 0 ] = i;
				influence[ 1 ] = objectInfluences[ i ];

			}

			influences.sort( absNumericalSort );

			// Add morphAttributes

			var morphInfluencesSum = 0;

			for ( var i = 0; i < 8; i ++ ) {

				var influence = influences[ i ];

				if ( influence ) {

					var index = influence[ 0 ];
					var value = influence[ 1 ];

					if ( value ) {

						if ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }
						if ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }

						morphInfluences[ i ] = value;
						morphInfluencesSum += value;
						continue;

					}

				}

				morphInfluences[ i ] = 0;

			}

			// GLSL shader uses formula baseinfluence * base + sum(target * influence)
			// This allows us to switch between absolute morphs and relative morphs without changing shader code
			// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
			var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

			program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
			program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

		}

		return {

			update: update

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLObjects( gl, geometries, attributes, info ) {

		var updateList = {};

		function update( object ) {

			var frame = info.render.frame;

			var geometry = object.geometry;
			var buffergeometry = geometries.get( object, geometry );

			// Update once per frame

			if ( updateList[ buffergeometry.id ] !== frame ) {

				if ( geometry.isGeometry ) {

					buffergeometry.updateFromObject( object );

				}

				geometries.update( buffergeometry );

				updateList[ buffergeometry.id ] = frame;

			}

			if ( object.isInstancedMesh ) {

				attributes.update( object.instanceMatrix, 34962 );

			}

			return buffergeometry;

		}

		function dispose() {

			updateList = {};

		}

		return {

			update: update,
			dispose: dispose

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {

		images = images !== undefined ? images : [];
		mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
		format = format !== undefined ? format : RGBFormat;

		Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.flipY = false;

	}

	CubeTexture.prototype = Object.create( Texture.prototype );
	CubeTexture.prototype.constructor = CubeTexture;

	CubeTexture.prototype.isCubeTexture = true;

	Object.defineProperty( CubeTexture.prototype, 'images', {

		get: function () {

			return this.image;

		},

		set: function ( value ) {

			this.image = value;

		}

	} );

	/**
	 * @author Takahiro https://github.com/takahirox
	 */

	function DataTexture2DArray( data, width, height, depth ) {

		Texture.call( this, null );

		this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;

		this.needsUpdate = true;

	}

	DataTexture2DArray.prototype = Object.create( Texture.prototype );
	DataTexture2DArray.prototype.constructor = DataTexture2DArray;
	DataTexture2DArray.prototype.isDataTexture2DArray = true;

	/**
	 * @author Artur Trzesiok
	 */

	function DataTexture3D( data, width, height, depth ) {

		// We're going to add .setXXX() methods for setting properties later.
		// Users can still set in DataTexture3D directly.
		//
		//	var texture = new THREE.DataTexture3D( data, width, height, depth );
		// 	texture.anisotropy = 16;
		//
		// See #14839

		Texture.call( this, null );

		this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };

		this.magFilter = NearestFilter;
		this.minFilter = NearestFilter;

		this.wrapR = ClampToEdgeWrapping;

		this.generateMipmaps = false;
		this.flipY = false;

		this.needsUpdate = true;


	}

	DataTexture3D.prototype = Object.create( Texture.prototype );
	DataTexture3D.prototype.constructor = DataTexture3D;
	DataTexture3D.prototype.isDataTexture3D = true;

	/**
	 * @author tschw
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */

	var emptyTexture = new Texture();
	var emptyTexture2dArray = new DataTexture2DArray();
	var emptyTexture3d = new DataTexture3D();
	var emptyCubeTexture = new CubeTexture();

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	var arrayCacheF32 = [];
	var arrayCacheI32 = [];

	// Float32Array caches used for uploading Matrix uniforms

	var mat4array = new Float32Array( 16 );
	var mat3array = new Float32Array( 9 );
	var mat2array = new Float32Array( 4 );

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		var firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) { return array; }
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		var n = nBlocks * blockSize,
			r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	function arraysEqual( a, b ) {

		if ( a.length !== b.length ) { return false; }

		for ( var i = 0, l = a.length; i < l; i ++ ) {

			if ( a[ i ] !== b[ i ] ) { return false; }

		}

		return true;

	}

	function copyArray( a, b ) {

		for ( var i = 0, l = b.length; i < l; i ++ ) {

			a[ i ] = b[ i ];

		}

	}

	// Texture unit allocation

	function allocTexUnits( textures, n ) {

		var r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( var i = 0; i !== n; ++ i )
			{ r[ i ] = textures.allocateTextureUnit(); }

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValueV1f( gl, v ) {

		var cache = this.cache;

		if ( cache[ 0 ] === v ) { return; }

		gl.uniform1f( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single float vector (from flat array or THREE.VectorN)

	function setValueV2f( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2f( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniform2fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3f( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3f( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else if ( v.r !== undefined ) {

			if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

				gl.uniform3f( this.addr, v.r, v.g, v.b );

				cache[ 0 ] = v.r;
				cache[ 1 ] = v.g;
				cache[ 2 ] = v.b;

			}

		} else {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniform3fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4f( gl, v ) {

		var cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniform4fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single matrix (from flat array or MatrixN)

	function setValueM2( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniformMatrix2fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) { return; }

			mat2array.set( elements );

			gl.uniformMatrix2fv( this.addr, false, mat2array );

			copyArray( cache, elements );

		}

	}

	function setValueM3( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniformMatrix3fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) { return; }

			mat3array.set( elements );

			gl.uniformMatrix3fv( this.addr, false, mat3array );

			copyArray( cache, elements );

		}

	}

	function setValueM4( gl, v ) {

		var cache = this.cache;
		var elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) { return; }

			gl.uniformMatrix4fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) { return; }

			mat4array.set( elements );

			gl.uniformMatrix4fv( this.addr, false, mat4array );

			copyArray( cache, elements );

		}

	}

	// Single texture (2D / Cube)

	function setValueT1( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.safeSetTexture2D( v || emptyTexture, unit );

	}

	function setValueT2DArray1( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture2DArray( v || emptyTexture2dArray, unit );

	}

	function setValueT3D1( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture3D( v || emptyTexture3d, unit );

	}

	function setValueT6( gl, v, textures ) {

		var cache = this.cache;
		var unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.safeSetTextureCube( v || emptyCubeTexture, unit );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)

	function setValueV1i( gl, v ) {

		var cache = this.cache;

		if ( cache[ 0 ] === v ) { return; }

		gl.uniform1i( this.addr, v );

		cache[ 0 ] = v;

	}

	function setValueV2i( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) { return; }

		gl.uniform2iv( this.addr, v );

		copyArray( cache, v );

	}

	function setValueV3i( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) { return; }

		gl.uniform3iv( this.addr, v );

		copyArray( cache, v );

	}

	function setValueV4i( gl, v ) {

		var cache = this.cache;

		if ( arraysEqual( cache, v ) ) { return; }

		gl.uniform4iv( this.addr, v );

		copyArray( cache, v );

	}

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1f; // FLOAT
			case 0x8b50: return setValueV2f; // _VEC2
			case 0x8b51: return setValueV3f; // _VEC3
			case 0x8b52: return setValueV4f; // _VEC4

			case 0x8b5a: return setValueM2; // _MAT2
			case 0x8b5b: return setValueM3; // _MAT3
			case 0x8b5c: return setValueM4; // _MAT4

			case 0x8b5e: case 0x8d66: return setValueT1; // SAMPLER_2D, SAMPLER_EXTERNAL_OES
			case 0x8b5f: return setValueT3D1; // SAMPLER_3D
			case 0x8b60: return setValueT6; // SAMPLER_CUBE
			case 0x8DC1: return setValueT2DArray1; // SAMPLER_2D_ARRAY

			case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

		}

	}

	// Array of scalars
	function setValueV1fArray( gl, v ) {

		gl.uniform1fv( this.addr, v );

	}

	// Integer / Boolean vectors or arrays thereof (always flat arrays)
	function setValueV1iArray( gl, v ) {

		gl.uniform1iv( this.addr, v );

	}

	function setValueV2iArray( gl, v ) {

		gl.uniform2iv( this.addr, v );

	}

	function setValueV3iArray( gl, v ) {

		gl.uniform3iv( this.addr, v );

	}

	function setValueV4iArray( gl, v ) {

		gl.uniform4iv( this.addr, v );

	}


	// Array of vectors (flat or from THREE classes)

	function setValueV2fArray( gl, v ) {

		var data = flatten( v, this.size, 2 );

		gl.uniform2fv( this.addr, data );

	}

	function setValueV3fArray( gl, v ) {

		var data = flatten( v, this.size, 3 );

		gl.uniform3fv( this.addr, data );

	}

	function setValueV4fArray( gl, v ) {

		var data = flatten( v, this.size, 4 );

		gl.uniform4fv( this.addr, data );

	}

	// Array of matrices (flat or from THREE clases)

	function setValueM2Array( gl, v ) {

		var data = flatten( v, this.size, 4 );

		gl.uniformMatrix2fv( this.addr, false, data );

	}

	function setValueM3Array( gl, v ) {

		var data = flatten( v, this.size, 9 );

		gl.uniformMatrix3fv( this.addr, false, data );

	}

	function setValueM4Array( gl, v ) {

		var data = flatten( v, this.size, 16 );

		gl.uniformMatrix4fv( this.addr, false, data );

	}

	// Array of textures (2D / Cube)

	function setValueT1Array( gl, v, textures ) {

		var n = v.length;

		var units = allocTexUnits( textures, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT6Array( gl, v, textures ) {

		var n = v.length;

		var units = allocTexUnits( textures, n );

		gl.uniform1iv( this.addr, units );

		for ( var i = 0; i !== n; ++ i ) {

			textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1fArray; // FLOAT
			case 0x8b50: return setValueV2fArray; // _VEC2
			case 0x8b51: return setValueV3fArray; // _VEC3
			case 0x8b52: return setValueV4fArray; // _VEC4

			case 0x8b5a: return setValueM2Array; // _MAT2
			case 0x8b5b: return setValueM3Array; // _MAT3
			case 0x8b5c: return setValueM4Array; // _MAT4

			case 0x8b5e: return setValueT1Array; // SAMPLER_2D
			case 0x8b60: return setValueT6Array; // SAMPLER_CUBE

			case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

		}

	}

	// --- Uniform Classes ---

	function SingleUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.setValue = getSingularSetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	function PureArrayUniform( id, activeInfo, addr ) {

		this.id = id;
		this.addr = addr;
		this.cache = [];
		this.size = activeInfo.size;
		this.setValue = getPureArraySetter( activeInfo.type );

		// this.path = activeInfo.name; // DEBUG

	}

	PureArrayUniform.prototype.updateCache = function ( data ) {

		var cache = this.cache;

		if ( data instanceof Float32Array && cache.length !== data.length ) {

			this.cache = new Float32Array( data.length );

		}

		copyArray( cache, data );

	};

	function StructuredUniform( id ) {

		this.id = id;

		this.seq = [];
		this.map = {};

	}

	StructuredUniform.prototype.setValue = function ( gl, value, textures ) {

		var seq = this.seq;

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			u.setValue( gl, value[ u.id ], textures );

		}

	};

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		var path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		while ( true ) {

			var match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex,

				id = match[ 1 ],
				idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) { id = id | 0; } // convert to integer

			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {

				// step into inner node / create it in case it doesn't exist

				var map = container.map, next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	function WebGLUniforms( gl, program ) {

		this.seq = [];
		this.map = {};

		var n = gl.getProgramParameter( program, 35718 );

		for ( var i = 0; i < n; ++ i ) {

			var info = gl.getActiveUniform( program, i ),
				addr = gl.getUniformLocation( program, info.name );

			parseUniform( info, addr, this );

		}

	}

	WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {

		var u = this.map[ name ];

		if ( u !== undefined ) { u.setValue( gl, value, textures ); }

	};

	WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {

		var v = object[ name ];

		if ( v !== undefined ) { this.setValue( gl, name, v ); }

	};


	// Static interface

	WebGLUniforms.upload = function ( gl, seq, values, textures ) {

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ],
				v = values[ u.id ];

			if ( v.needsUpdate !== false ) {

				// note: always updating when .needsUpdate is undefined
				u.setValue( gl, v.value, textures );

			}

		}

	};

	WebGLUniforms.seqWithValue = function ( seq, values ) {

		var r = [];

		for ( var i = 0, n = seq.length; i !== n; ++ i ) {

			var u = seq[ i ];
			if ( u.id in values ) { r.push( u ); }

		}

		return r;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShader( gl, type, string ) {

		var shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		return shader;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var programIdCount = 0;

	function addLineNumbers( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	}

	function getEncodingComponents( encoding ) {

		switch ( encoding ) {

			case LinearEncoding:
				return [ 'Linear', '( value )' ];
			case sRGBEncoding:
				return [ 'sRGB', '( value )' ];
			case RGBEEncoding:
				return [ 'RGBE', '( value )' ];
			case RGBM7Encoding:
				return [ 'RGBM', '( value, 7.0 )' ];
			case RGBM16Encoding:
				return [ 'RGBM', '( value, 16.0 )' ];
			case RGBDEncoding:
				return [ 'RGBD', '( value, 256.0 )' ];
			case GammaEncoding:
				return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
			case LogLuvEncoding:
				return [ 'LogLuv', '( value )' ];
			default:
				throw new Error( 'unsupported encoding: ' + encoding );

		}

	}

	function getShaderErrors( gl, shader, type ) {

		var status = gl.getShaderParameter( shader, 35713 );
		var log = gl.getShaderInfoLog( shader ).trim();

		if ( status && log === '' ) { return ''; }

		// --enable-privileged-webgl-extension
		// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		var source = gl.getShaderSource( shader );

		return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );

	}

	function getTexelDecodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';

	}

	function getTexelEncodingFunction( functionName, encoding ) {

		var components = getEncodingComponents( encoding );
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		var toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case Uncharted2ToneMapping:
				toneMappingName = 'Uncharted2';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;

			default:
				throw new Error( 'unsupported toneMapping: ' + toneMapping );

		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

	}

	function generateExtensions( extensions, parameters, rendererExtensions ) {

		extensions = extensions || {};

		var chunks = [
			( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
			( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		var chunks = [];

		for ( var name in defines ) {

			var value = defines[ name ];

			if ( value === false ) { continue; }

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program ) {

		var attributes = {};

		var n = gl.getProgramParameter( program, 35721 );

		for ( var i = 0; i < n; i ++ ) {

			var info = gl.getActiveAttrib( program, i );
			var name = info.name;

			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[ name ] = gl.getAttribLocation( program, name );

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
			.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
			.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
			.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

	}

	function replaceClippingPlaneNums( string, parameters ) {

		return string
			.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
			.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

	}

	// Resolve Includes

	var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

	function resolveIncludes( string ) {

		return string.replace( includePattern, includeReplacer );

	}

	function includeReplacer( match, include ) {

		var string = ShaderChunk[ include ];

		if ( string === undefined ) {

			throw new Error( 'Can not resolve #include <' + include + '>' );

		}

		return resolveIncludes( string );

	}

	// Unroll Loops

	var loopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;

	function unrollLoops( string ) {

		return string.replace( loopPattern, loopReplacer );

	}

	function loopReplacer( match, start, end, snippet ) {

		var string = '';

		for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {

			string += snippet
				.replace( /\[ i \]/g, '[ ' + i + ' ]' )
				.replace( /UNROLLED_LOOP_INDEX/g, i );

		}

		return string;

	}

	//

	function generatePrecision( parameters ) {

		var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";

		if ( parameters.precision === "highp" ) {

			precisionstring += "\n#define HIGH_PRECISION";

		} else if ( parameters.precision === "mediump" ) {

			precisionstring += "\n#define MEDIUM_PRECISION";

		} else if ( parameters.precision === "lowp" ) {

			precisionstring += "\n#define LOW_PRECISION";

		}

		return precisionstring;

	}

	function generateShadowMapTypeDefine( parameters ) {

		var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		} else if ( parameters.shadowMapType === VSMShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

		}

		return shadowMapTypeDefine;

	}

	function generateEnvMapTypeDefine( parameters ) {

		var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
				case CubeUVRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

				case EquirectangularReflectionMapping:
				case EquirectangularRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
					break;

				case SphericalReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
					break;

			}

		}

		return envMapTypeDefine;

	}

	function generateEnvMapModeDefine( parameters ) {

		var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeRefractionMapping:
				case EquirectangularRefractionMapping:
					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

		}

		return envMapModeDefine;

	}

	function generateEnvMapBlendingDefine( parameters ) {

		var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';

		if ( parameters.envMap ) {

			switch ( parameters.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		return envMapBlendingDefine;

	}

	function WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters ) {

		var gl = renderer.getContext();

		var defines = material.defines;

		var vertexShader = shader.vertexShader;
		var fragmentShader = shader.fragmentShader;
		var shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
		var envMapTypeDefine = generateEnvMapTypeDefine( parameters );
		var envMapModeDefine = generateEnvMapModeDefine( parameters );
		var envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );


		var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;

		var customExtensions = parameters.isWebGL2 ? '' : generateExtensions( material.extensions, parameters, extensions );

		var customDefines = generateDefines( defines );

		var program = gl.createProgram();

		var prefixVertex, prefixFragment;

		var numMultiviewViews = parameters.numMultiviewViews;

		if ( material.isRawShaderMaterial ) {

			prefixVertex = [

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixVertex.length > 0 ) {

				prefixVertex += '\n';

			}

			prefixFragment = [

				customExtensions,
				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixFragment.length > 0 ) {

				prefixFragment += '\n';

			}

		} else {

			prefixVertex = [

				generatePrecision( parameters ),

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.instancing ? '#define USE_INSTANCING' : '',
				parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				'#define MAX_BONES ' + parameters.maxBones,
				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',

				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
				parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

				parameters.vertexTangents ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.vertexUvs ? '#define USE_UV' : '',
				parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',
				parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				'#ifdef USE_INSTANCING',

				' attribute mat4 instanceMatrix;',

				'#endif',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_TANGENT',

				'	attribute vec4 tangent;',

				'#endif',

				'#ifdef USE_COLOR',

				'	attribute vec3 color;',

				'#endif',

				'#ifdef USE_MORPHTARGETS',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				generatePrecision( parameters ),

				'#define SHADER_NAME ' + shader.name,

				customDefines,

				parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer

				'#define GAMMA_FACTOR ' + gammaFactorDefine,

				( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
				( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.matcap ? '#define USE_MATCAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
				( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',

				parameters.sheen ? '#define USE_SHEEN' : '',

				parameters.vertexTangents ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.vertexUvs ? '#define USE_UV' : '',
				parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',

				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

				parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				parameters.logarithmicDepthBuffer && ( parameters.isWebGL2 || extensions.get( 'EXT_frag_depth' ) ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				( ( material.extensions ? material.extensions.shaderTextureLOD : false ) || parameters.envMap ) && ( parameters.isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) ) ? '#define TEXTURE_LOD_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

				parameters.dithering ? '#define DITHERING' : '',

				( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ?
					ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
				parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
				parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
				parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
				parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
				parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',

				parameters.depthPacking ? '#define DEPTH_PACKING ' + material.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = resolveIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );
		vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

		fragmentShader = resolveIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );
		fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

		if ( parameters.isWebGL2 && ! material.isRawShaderMaterial ) {

			var isGLSL3ShaderMaterial = false;

			var versionRegex = /^\s*#version\s+300\s+es\s*\n/;

			if ( material.isShaderMaterial &&
				vertexShader.match( versionRegex ) !== null &&
				fragmentShader.match( versionRegex ) !== null ) {

				isGLSL3ShaderMaterial = true;

				vertexShader = vertexShader.replace( versionRegex, '' );
				fragmentShader = fragmentShader.replace( versionRegex, '' );

			}

			// GLSL 3.0 conversion

			prefixVertex = [
				'#version 300 es\n',
				'#define attribute in',
				'#define varying out',
				'#define texture2D texture'
			].join( '\n' ) + '\n' + prefixVertex;

			prefixFragment = [
				'#version 300 es\n',
				'#define varying in',
				isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
				isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
				'#define gl_FragDepthEXT gl_FragDepth',
				'#define texture2D texture',
				'#define textureCube texture',
				'#define texture2DProj textureProj',
				'#define texture2DLodEXT textureLod',
				'#define texture2DProjLodEXT textureProjLod',
				'#define textureCubeLodEXT textureLod',
				'#define texture2DGradEXT textureGrad',
				'#define texture2DProjGradEXT textureProjGrad',
				'#define textureCubeGradEXT textureGrad'
			].join( '\n' ) + '\n' + prefixFragment;

			// Multiview

			if ( numMultiviewViews > 0 ) {

				prefixVertex = prefixVertex.replace(
					'#version 300 es\n',
					[
						'#version 300 es\n',
						'#extension GL_OVR_multiview2 : require',
						'layout(num_views = ' + numMultiviewViews + ') in;',
						'#define VIEW_ID gl_ViewID_OVR'
					].join( '\n' )
				);

				prefixVertex = prefixVertex.replace(
					[
						'uniform mat4 modelViewMatrix;',
						'uniform mat4 projectionMatrix;',
						'uniform mat4 viewMatrix;',
						'uniform mat3 normalMatrix;'
					].join( '\n' ),
					[
						'uniform mat4 modelViewMatrices[' + numMultiviewViews + '];',
						'uniform mat4 projectionMatrices[' + numMultiviewViews + '];',
						'uniform mat4 viewMatrices[' + numMultiviewViews + '];',
						'uniform mat3 normalMatrices[' + numMultiviewViews + '];',

						'#define modelViewMatrix modelViewMatrices[VIEW_ID]',
						'#define projectionMatrix projectionMatrices[VIEW_ID]',
						'#define viewMatrix viewMatrices[VIEW_ID]',
						'#define normalMatrix normalMatrices[VIEW_ID]'
					].join( '\n' )
				);

				prefixFragment = prefixFragment.replace(
					'#version 300 es\n',
					[
						'#version 300 es\n',
						'#extension GL_OVR_multiview2 : require',
						'#define VIEW_ID gl_ViewID_OVR'
					].join( '\n' )
				);

				prefixFragment = prefixFragment.replace(
					'uniform mat4 viewMatrix;',
					[
						'uniform mat4 viewMatrices[' + numMultiviewViews + '];',
						'#define viewMatrix viewMatrices[VIEW_ID]'
					].join( '\n' )
				);

			}

		}

		var vertexGlsl = prefixVertex + vertexShader;
		var fragmentGlsl = prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
		var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( material.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, material.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		// check for link errors
		if ( renderer.debug.checkShaderErrors ) {

			var programLog = gl.getProgramInfoLog( program ).trim();
			var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

			var runnable = true;
			var haveDiagnostics = true;

			if ( gl.getProgramParameter( program, 35714 ) === false ) {

				runnable = false;

				var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
				var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,
					material: material,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

		}

		// clean up

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		var cachedUniforms;

		this.getUniforms = function () {

			if ( cachedUniforms === undefined ) {

				cachedUniforms = new WebGLUniforms( gl, program );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		var cachedAttributes;

		this.getAttributes = function () {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function () {

			gl.deleteProgram( program );
			this.program = undefined;

		};

		//

		this.name = shader.name;
		this.id = programIdCount ++;
		this.cacheKey = cacheKey;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;
		this.numMultiviewViews = numMultiviewViews;

		return this;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLPrograms( renderer, extensions, capabilities ) {

		var programs = [];

		var isWebGL2 = capabilities.isWebGL2;
		var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
		var floatVertexTextures = capabilities.floatVertexTextures;
		var precision = capabilities.precision;
		var maxVertexUniforms = capabilities.maxVertexUniforms;
		var vertexTextures = capabilities.vertexTextures;

		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'phong',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};

		var parameterNames = [
			"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "numMultiviewViews",
			"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
			"lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatNormalMap", "displacementMap", "specularMap",
			"roughnessMap", "metalnessMap", "gradientMap",
			"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
			"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
			"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
			"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
			"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
			"sheen"
		];


		function allocateBones( object ) {

			var skeleton = object.skeleton;
			var bones = skeleton.bones;

			if ( floatVertexTextures ) {

				return 1024;

			} else {

				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)

				var nVertexUniforms = maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

				var maxBones = Math.min( nVertexMatrices, bones.length );

				if ( maxBones < bones.length ) {

					console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
					return 0;

				}

				return maxBones;

			}

		}

		function getTextureEncodingFromMap( map, gammaOverrideLinear ) {

			var encoding;

			if ( ! map ) {

				encoding = LinearEncoding;

			} else if ( map.isTexture ) {

				encoding = map.encoding;

			} else if ( map.isWebGLRenderTarget ) {

				console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
				encoding = map.texture.encoding;

			}

			// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.
			if ( encoding === LinearEncoding && gammaOverrideLinear ) {

				encoding = GammaEncoding;

			}

			return encoding;

		}

		this.getParameters = function ( material, lights, shadows, fog, nClipPlanes, nClipIntersection, object ) {

			var shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			var currentRenderTarget = renderer.getRenderTarget();
			var numMultiviewViews = currentRenderTarget && currentRenderTarget.isWebGLMultiviewRenderTarget ? currentRenderTarget.numViews : 0;

			var parameters = {

				isWebGL2: isWebGL2,

				shaderID: shaderID,

				precision: precision,

				instancing: object.isInstancedMesh === true,

				supportsVertexTextures: vertexTextures,
				numMultiviewViews: numMultiviewViews,
				outputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),
				map: !! material.map,
				mapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),
				matcap: !! material.matcap,
				matcapEncoding: getTextureEncodingFromMap( material.matcap, renderer.gammaInput ),
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				envMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),
				envMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === CubeUVReflectionMapping ) || ( material.envMap.mapping === CubeUVRefractionMapping ) ),
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
				tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
				clearcoatNormalMap: !! material.clearcoatNormalMap,
				displacementMap: !! material.displacementMap,
				roughnessMap: !! material.roughnessMap,
				metalnessMap: !! material.metalnessMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,

				gradientMap: !! material.gradientMap,

				sheen: !! material.sheen,

				combine: material.combine,

				vertexTangents: ( material.normalMap && material.vertexTangents ),
				vertexColors: material.vertexColors,
				vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,
				uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,

				fog: !! fog,
				useFog: material.fog,
				fogExp2: ( fog && fog.isFogExp2 ),

				flatShading: material.flatShading,

				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: logarithmicDepthBuffer,

				skinning: material.skinning && maxBones > 0,
				maxBones: maxBones,
				useVertexTexture: floatVertexTextures,

				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,

				numDirLightShadows: lights.directionalShadowMap.length,
				numPointLightShadows: lights.pointShadowMap.length,
				numSpotLightShadows: lights.spotShadowMap.length,

				numClippingPlanes: nClipPlanes,
				numClipIntersection: nClipIntersection,

				dithering: material.dithering,

				shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
				physicallyCorrectLights: renderer.physicallyCorrectLights,

				premultipliedAlpha: material.premultipliedAlpha,

				alphaTest: material.alphaTest,
				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false

			};

			return parameters;

		};

		this.getProgramCacheKey = function ( material, parameters ) {

			var array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( material.fragmentShader );
				array.push( material.vertexShader );

			}

			if ( material.defines !== undefined ) {

				for ( var name in material.defines ) {

					array.push( name );
					array.push( material.defines[ name ] );

				}

			}

			for ( var i = 0; i < parameterNames.length; i ++ ) {

				array.push( parameters[ parameterNames[ i ] ] );

			}

			array.push( material.onBeforeCompile.toString() );

			array.push( renderer.gammaOutput );

			array.push( renderer.gammaFactor );

			return array.join();

		};

		this.acquireProgram = function ( material, shader, parameters, cacheKey ) {

			var program;

			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {

				var preexistingProgram = programs[ p ];

				if ( preexistingProgram.cacheKey === cacheKey ) {

					program = preexistingProgram;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, extensions, cacheKey, material, shader, parameters );
				programs.push( program );

			}

			return program;

		};

		this.releaseProgram = function ( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		};

		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;

	}

	/**
	 * @author fordacious / fordacious.github.io
	 */

	function WebGLProperties() {

		var properties = new WeakMap();

		function get( object ) {

			var map = properties.get( object );

			if ( map === undefined ) {

				map = {};
				properties.set( object, map );

			}

			return map;

		}

		function remove( object ) {

			properties.delete( object );

		}

		function update( object, key, value ) {

			properties.get( object )[ key ] = value;

		}

		function dispose() {

			properties = new WeakMap();

		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function painterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.program !== b.program ) {

			return a.program.id - b.program.id;

		} else if ( a.material.id !== b.material.id ) {

			return a.material.id - b.material.id;

		} else if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}


	function WebGLRenderList() {

		var renderItems = [];
		var renderItemsIndex = 0;

		var opaque = [];
		var transparent = [];

		var defaultProgram = { id: - 1 };

		function init() {

			renderItemsIndex = 0;

			opaque.length = 0;
			transparent.length = 0;

		}

		function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

			var renderItem = renderItems[ renderItemsIndex ];

			if ( renderItem === undefined ) {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					program: material.program || defaultProgram,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};

				renderItems[ renderItemsIndex ] = renderItem;

			} else {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.program = material.program || defaultProgram;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;

			}

			renderItemsIndex ++;

			return renderItem;

		}

		function push( object, geometry, material, groupOrder, z, group ) {

			var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			( material.transparent === true ? transparent : opaque ).push( renderItem );

		}

		function unshift( object, geometry, material, groupOrder, z, group ) {

			var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			( material.transparent === true ? transparent : opaque ).unshift( renderItem );

		}

		function sort() {

			if ( opaque.length > 1 ) { opaque.sort( painterSortStable ); }
			if ( transparent.length > 1 ) { transparent.sort( reversePainterSortStable ); }

		}

		return {
			opaque: opaque,
			transparent: transparent,

			init: init,
			push: push,
			unshift: unshift,

			sort: sort
		};

	}

	function WebGLRenderLists() {

		var lists = new WeakMap();

		function onSceneDispose( event ) {

			var scene = event.target;

			scene.removeEventListener( 'dispose', onSceneDispose );

			lists.delete( scene );

		}

		function get( scene, camera ) {

			var cameras = lists.get( scene );
			var list;
			if ( cameras === undefined ) {

				list = new WebGLRenderList();
				lists.set( scene, new WeakMap() );
				lists.get( scene ).set( camera, list );

				scene.addEventListener( 'dispose', onSceneDispose );

			} else {

				list = cameras.get( camera );
				if ( list === undefined ) {

					list = new WebGLRenderList();
					cameras.set( camera, list );

				}

			}

			return list;

		}

		function dispose() {

			lists = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function UniformsCache() {

		var lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				var uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color(),

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0,

							shadow: false,
							shadowBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
							// TODO (abelnation): set RectAreaLight shadow uniforms
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	var nextVersion = 0;

	function shadowCastingLightsFirst( lightA, lightB ) {

		return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );

	}

	function WebGLLights() {

		var cache = new UniformsCache();

		var state = {

			version: 0,

			hash: {
				directionalLength: - 1,
				pointLength: - 1,
				spotLength: - 1,
				rectAreaLength: - 1,
				hemiLength: - 1,

				numDirectionalShadows: - 1,
				numPointShadows: - 1,
				numSpotShadows: - 1,
			},

			ambient: [ 0, 0, 0 ],
			probe: [],
			directional: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotShadowMap: [],
			spotShadowMatrix: [],
			rectArea: [],
			point: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],

			numDirectionalShadows: - 1,
			numPointShadows: - 1,
			numSpotShadows: - 1

		};

		for ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }

		var vector3 = new Vector3();
		var matrix4 = new Matrix4();
		var matrix42 = new Matrix4();

		function setup( lights, shadows, camera ) {

			var r = 0, g = 0, b = 0;

			for ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }

			var directionalLength = 0;
			var pointLength = 0;
			var spotLength = 0;
			var rectAreaLength = 0;
			var hemiLength = 0;

			var numDirectionalShadows = 0;
			var numPointShadows = 0;
			var numSpotShadows = 0;

			var viewMatrix = camera.matrixWorldInverse;

			lights.sort( shadowCastingLightsFirst );

			for ( var i = 0, l = lights.length; i < l; i ++ ) {

				var light = lights[ i ];

				var color = light.color;
				var intensity = light.intensity;
				var distance = light.distance;

				var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity;
					g += color.g * intensity;
					b += color.b * intensity;

				} else if ( light.isLightProbe ) {

					for ( var j = 0; j < 9; j ++ ) {

						state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

					}

				} else if ( light.isDirectionalLight ) {

					var uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

						state.directionalShadowMap[ directionalLength ] = shadowMap;
						state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

						numDirectionalShadows ++;

					}

					state.directional[ directionalLength ] = uniforms;

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( color ).multiplyScalar( intensity );
					uniforms.distance = distance;

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;

						state.spotShadowMap[ spotLength ] = shadowMap;
						state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;

						numSpotShadows ++;

					}

					state.spot[ spotLength ] = uniforms;

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					var uniforms = cache.get( light );

					// (a) intensity is the total visible light emitted
					//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );

					// (b) intensity is the brightness of the light
					uniforms.color.copy( color ).multiplyScalar( intensity );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					// extract local rotation of light to derive width/height half vectors
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );

					// TODO (abelnation): RectAreaLight distance?
					// uniforms.distance = distance;

					state.rectArea[ rectAreaLength ] = uniforms;

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					var uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;

					uniforms.shadow = light.castShadow;

					if ( light.castShadow ) {

						var shadow = light.shadow;

						uniforms.shadowBias = shadow.bias;
						uniforms.shadowRadius = shadow.radius;
						uniforms.shadowMapSize = shadow.mapSize;
						uniforms.shadowCameraNear = shadow.camera.near;
						uniforms.shadowCameraFar = shadow.camera.far;

						state.pointShadowMap[ pointLength ] = shadowMap;
						state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

						numPointShadows ++;

					}

					state.point[ pointLength ] = uniforms;

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					var uniforms = cache.get( light );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );
					uniforms.direction.normalize();

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );

					state.hemi[ hemiLength ] = uniforms;

					hemiLength ++;

				}

			}

			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;

			var hash = state.hash;

			if ( hash.directionalLength !== directionalLength ||
				hash.pointLength !== pointLength ||
				hash.spotLength !== spotLength ||
				hash.rectAreaLength !== rectAreaLength ||
				hash.hemiLength !== hemiLength ||
				hash.numDirectionalShadows !== numDirectionalShadows ||
				hash.numPointShadows !== numPointShadows ||
				hash.numSpotShadows !== numSpotShadows ) {

				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;

				state.directionalShadowMap.length = numDirectionalShadows;
				state.pointShadowMap.length = numPointShadows;
				state.spotShadowMap.length = numSpotShadows;
				state.directionalShadowMatrix.length = numDirectionalShadows;
				state.pointShadowMatrix.length = numPointShadows;
				state.spotShadowMatrix.length = numSpotShadows;

				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;

				hash.numDirectionalShadows = numDirectionalShadows;
				hash.numPointShadows = numPointShadows;
				hash.numSpotShadows = numSpotShadows;

				state.version = nextVersion ++;

			}

		}

		return {
			setup: setup,
			state: state
		};

	}

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WebGLRenderState() {

		var lights = new WebGLLights();

		var lightsArray = [];
		var shadowsArray = [];

		function init() {

			lightsArray.length = 0;
			shadowsArray.length = 0;

		}

		function pushLight( light ) {

			lightsArray.push( light );

		}

		function pushShadow( shadowLight ) {

			shadowsArray.push( shadowLight );

		}

		function setupLights( camera ) {

			lights.setup( lightsArray, shadowsArray, camera );

		}

		var state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,

			lights: lights
		};

		return {
			init: init,
			state: state,
			setupLights: setupLights,

			pushLight: pushLight,
			pushShadow: pushShadow
		};

	}

	function WebGLRenderStates() {

		var renderStates = new WeakMap();

		function onSceneDispose( event ) {

			var scene = event.target;

			scene.removeEventListener( 'dispose', onSceneDispose );

			renderStates.delete( scene );

		}

		function get( scene, camera ) {

			var renderState;

			if ( renderStates.has( scene ) === false ) {

				renderState = new WebGLRenderState();
				renderStates.set( scene, new WeakMap() );
				renderStates.get( scene ).set( camera, renderState );

				scene.addEventListener( 'dispose', onSceneDispose );

			} else {

				if ( renderStates.get( scene ).has( camera ) === false ) {

					renderState = new WebGLRenderState();
					renderStates.get( scene ).set( camera, renderState );

				} else {

					renderState = renderStates.get( scene ).get( camera );

				}

			}

			return renderState;

		}

		function dispose() {

			renderStates = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / https://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */

	function MeshDepthMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDepthMaterial';

		this.depthPacking = BasicDepthPacking;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;

		this.setValues( parameters );

	}

	MeshDepthMaterial.prototype = Object.create( Material.prototype );
	MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;

	MeshDepthMaterial.prototype.isMeshDepthMaterial = true;

	MeshDepthMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.depthPacking = source.depthPacking;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *
	 *  referencePosition: <float>,
	 *  nearDistance: <float>,
	 *  farDistance: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>
	 *
	 * }
	 */

	function MeshDistanceMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshDistanceMaterial';

		this.referencePosition = new Vector3();
		this.nearDistance = 1;
		this.farDistance = 1000;

		this.skinning = false;
		this.morphTargets = false;

		this.map = null;

		this.alphaMap = null;

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.fog = false;

		this.setValues( parameters );

	}

	MeshDistanceMaterial.prototype = Object.create( Material.prototype );
	MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;

	MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;

	MeshDistanceMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.referencePosition.copy( source.referencePosition );
		this.nearDistance = source.nearDistance;
		this.farDistance = source.farDistance;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		return this;

	};

	var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpack2HalfToRGBA ( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

	var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {

		var _frustum = new Frustum(),

			_shadowMapSize = new Vector2(),
			_viewportSize = new Vector2(),

			_viewport = new Vector4(),

			_depthMaterials = [],
			_distanceMaterials = [],

			_materialCache = {};

		var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };

		var shadowMaterialVertical = new ShaderMaterial( {

			defines: {
				SAMPLE_RATE: 2.0 / 8.0,
				HALF_SAMPLE_RATE: 1.0 / 8.0
			},

			uniforms: {
				shadow_pass: { value: null },
				resolution: { value: new Vector2() },
				radius: { value: 4.0 }
			},

			vertexShader: vsm_vert,

			fragmentShader: vsm_frag

		} );

		var shadowMaterialHorizonal = shadowMaterialVertical.clone();
		shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;

		var fullScreenTri = new BufferGeometry();
		fullScreenTri.setAttribute(
			"position",
			new BufferAttribute(
				new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
				3
			)
		);

		var fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

		var scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;

		this.render = function ( lights, scene, camera ) {

			if ( scope.enabled === false ) { return; }
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }

			if ( lights.length === 0 ) { return; }

			var currentRenderTarget = _renderer.getRenderTarget();
			var activeCubeFace = _renderer.getActiveCubeFace();
			var activeMipmapLevel = _renderer.getActiveMipmapLevel();

			var _state = _renderer.state;

			// Set GL state for depth map.
			_state.setBlending( NoBlending );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );

			// render depth map

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];
				var shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				_shadowMapSize.copy( shadow.mapSize );

				var shadowFrameExtents = shadow.getFrameExtents();

				_shadowMapSize.multiply( shadowFrameExtents );

				_viewportSize.copy( shadow.mapSize );

				if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );

					if ( _shadowMapSize.x > maxTextureSize ) {

						_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
						shadow.mapSize.x = _viewportSize.x;

					}

					if ( _shadowMapSize.y > maxTextureSize ) {

						_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
						shadow.mapSize.y = _viewportSize.y;

					}

				}

				if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

					var pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";

					shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );

					shadow.camera.updateProjectionMatrix();

				}

				if ( shadow.map === null ) {

					var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + ".shadowMap";

					shadow.camera.updateProjectionMatrix();

				}

				_renderer.setRenderTarget( shadow.map );
				_renderer.clear();

				var viewportCount = shadow.getViewportCount();

				for ( var vp = 0; vp < viewportCount; vp ++ ) {

					var viewport = shadow.getViewport( vp );

					_viewport.set(
						_viewportSize.x * viewport.x,
						_viewportSize.y * viewport.y,
						_viewportSize.x * viewport.z,
						_viewportSize.y * viewport.w
					);

					_state.viewport( _viewport );

					shadow.updateMatrices( light, vp );

					_frustum = shadow.getFrustum();

					renderObject( scene, camera, shadow.camera, light, this.type );

				}

				// do blur pass for VSM

				if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {

					VSMPass( shadow, camera );

				}

			}

			scope.needsUpdate = false;

			_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

		};

		function VSMPass( shadow, camera ) {

			var geometry = _objects.update( fullScreenMesh );

			// vertical pass

			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialVertical.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.mapPass );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

			// horizonal pass

			shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
			shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.map );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );

		}

		function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {

			var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

			var material = _depthMaterials[ index ];

			if ( material === undefined ) {

				material = new MeshDepthMaterial( {

					depthPacking: RGBADepthPacking,

					morphTargets: useMorphing,
					skinning: useSkinning

				} );

				_depthMaterials[ index ] = material;

			}

			return material;

		}

		function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {

			var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;

			var material = _distanceMaterials[ index ];

			if ( material === undefined ) {

				material = new MeshDistanceMaterial( {

					morphTargets: useMorphing,
					skinning: useSkinning

				} );

				_distanceMaterials[ index ] = material;

			}

			return material;

		}

		function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {

			var geometry = object.geometry;

			var result = null;

			var getMaterialVariant = getDepthMaterialVariant;
			var customMaterial = object.customDepthMaterial;

			if ( light.isPointLight === true ) {

				getMaterialVariant = getDistanceMaterialVariant;
				customMaterial = object.customDistanceMaterial;

			}

			if ( customMaterial === undefined ) {

				var useMorphing = false;

				if ( material.morphTargets === true ) {

					if ( geometry.isBufferGeometry === true ) {

						useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;

					} else if ( geometry.isGeometry === true ) {

						useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;

					}

				}

				var useSkinning = false;

				if ( object.isSkinnedMesh === true ) {

					if ( material.skinning === true ) {

						useSkinning = true;

					} else {

						console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );

					}

				}

				var useInstancing = object.isInstancedMesh === true;

				result = getMaterialVariant( useMorphing, useSkinning, useInstancing );

			} else {

				result = customMaterial;

			}

			if ( _renderer.localClippingEnabled &&
					material.clipShadows === true &&
					material.clippingPlanes.length !== 0 ) {

				// in this case we need a unique material instance reflecting the
				// appropriate state

				var keyA = result.uuid, keyB = material.uuid;

				var materialsForVariant = _materialCache[ keyA ];

				if ( materialsForVariant === undefined ) {

					materialsForVariant = {};
					_materialCache[ keyA ] = materialsForVariant;

				}

				var cachedMaterial = materialsForVariant[ keyB ];

				if ( cachedMaterial === undefined ) {

					cachedMaterial = result.clone();
					materialsForVariant[ keyB ] = cachedMaterial;

				}

				result = cachedMaterial;

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			if ( type === VSMShadowMap ) {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

			} else {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

			}

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

				result.referencePosition.setFromMatrixPosition( light.matrixWorld );
				result.nearDistance = shadowCameraNear;
				result.farDistance = shadowCameraFar;

			}

			return result;

		}

		function renderObject( object, camera, shadowCamera, light, type ) {

			if ( object.visible === false ) { return; }

			var visible = object.layers.test( camera.layers );

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					var geometry = _objects.update( object );
					var material = object.material;

					if ( Array.isArray( material ) ) {

						var groups = geometry.groups;

						for ( var k = 0, kl = groups.length; k < kl; k ++ ) {

							var group = groups[ k ];
							var groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								var depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );

								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

							}

						}

					} else if ( material.visible ) {

						var depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );

						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				renderObject( children[ i ], camera, shadowCamera, light, type );

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLState( gl, extensions, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		function ColorBuffer() {

			var locked = false;

			var color = new Vector4();
			var currentColorMask = null;
			var currentColorClear = new Vector4( 0, 0, 0, 0 );

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a, premultipliedAlpha ) {

					if ( premultipliedAlpha === true ) {

						r *= a; g *= a; b *= a;

					}

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

				}

			};

		}

		function DepthBuffer() {

			var locked = false;

			var currentDepthMask = null;
			var currentDepthFunc = null;
			var currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( 2929 );

					} else {

						disable( 2929 );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						if ( depthFunc ) {

							switch ( depthFunc ) {

								case NeverDepth:

									gl.depthFunc( 512 );
									break;

								case AlwaysDepth:

									gl.depthFunc( 519 );
									break;

								case LessDepth:

									gl.depthFunc( 513 );
									break;

								case LessEqualDepth:

									gl.depthFunc( 515 );
									break;

								case EqualDepth:

									gl.depthFunc( 514 );
									break;

								case GreaterEqualDepth:

									gl.depthFunc( 518 );
									break;

								case GreaterDepth:

									gl.depthFunc( 516 );
									break;

								case NotEqualDepth:

									gl.depthFunc( 517 );
									break;

								default:

									gl.depthFunc( 515 );

							}

						} else {

							gl.depthFunc( 515 );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			var locked = false;

			var currentStencilMask = null;
			var currentStencilFunc = null;
			var currentStencilRef = null;
			var currentStencilFuncMask = null;
			var currentStencilFail = null;
			var currentStencilZFail = null;
			var currentStencilZPass = null;
			var currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( ! locked ) {

						if ( stencilTest ) {

							enable( 2960 );

						} else {

							disable( 2960 );

						}

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef 	!== stencilRef 	||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail	 !== stencilFail 	||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		var colorBuffer = new ColorBuffer();
		var depthBuffer = new DepthBuffer();
		var stencilBuffer = new StencilBuffer();

		var maxVertexAttributes = gl.getParameter( 34921 );
		var newAttributes = new Uint8Array( maxVertexAttributes );
		var enabledAttributes = new Uint8Array( maxVertexAttributes );
		var attributeDivisors = new Uint8Array( maxVertexAttributes );

		var enabledCapabilities = {};

		var currentProgram = null;

		var currentBlendingEnabled = null;
		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
		var currentPremultipledAlpha = false;

		var currentFlipSided = null;
		var currentCullFace = null;

		var currentLineWidth = null;

		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;

		var maxTextures = gl.getParameter( 35661 );

		var lineWidthAvailable = false;
		var version = 0;
		var glVersion = gl.getParameter( 7938 );

		if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

			version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 1.0 );

		} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

			version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 2.0 );

		}

		var currentTextureSlot = null;
		var currentBoundTextures = {};

		var currentScissor = new Vector4();
		var currentViewport = new Vector4();

		function createTexture( type, target, count ) {

			var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			var texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, 10241, 9728 );
			gl.texParameteri( type, 10240, 9728 );

			for ( var i = 0; i < count; i ++ ) {

				gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );

			}

			return texture;

		}

		var emptyTextures = {};
		emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
		emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );

		// init

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( 2929 );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( 2884 );

		setBlending( NoBlending );

		//

		function initAttributes() {

			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			enableAttributeAndDivisor( attribute, 0 );

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				var extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

				extension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function enable( id ) {

			if ( enabledCapabilities[ id ] !== true ) {

				gl.enable( id );
				enabledCapabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( enabledCapabilities[ id ] !== false ) {

				gl.disable( id );
				enabledCapabilities[ id ] = false;

			}

		}

		function useProgram( program ) {

			if ( currentProgram !== program ) {

				gl.useProgram( program );

				currentProgram = program;

				return true;

			}

			return false;

		}

		var equationToGL = {};
		equationToGL[ AddEquation ] = 32774;
		equationToGL[ SubtractEquation ] = 32778;
		equationToGL[ ReverseSubtractEquation ] = 32779;

		if ( isWebGL2 ) {

			equationToGL[ MinEquation ] = 32775;
			equationToGL[ MaxEquation ] = 32776;

		} else {

			var extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				equationToGL[ MinEquation ] = extension.MIN_EXT;
				equationToGL[ MaxEquation ] = extension.MAX_EXT;

			}

		}

		var factorToGL = {};
		factorToGL[ ZeroFactor ] = 0;
		factorToGL[ OneFactor ] = 1;
		factorToGL[ SrcColorFactor ] = 768;
		factorToGL[ SrcAlphaFactor ] = 770;
		factorToGL[ SrcAlphaSaturateFactor ] = 776;
		factorToGL[ DstColorFactor ] = 774;
		factorToGL[ DstAlphaFactor ] = 772;
		factorToGL[ OneMinusSrcColorFactor ] = 769;
		factorToGL[ OneMinusSrcAlphaFactor ] = 771;
		factorToGL[ OneMinusDstColorFactor ] = 775;
		factorToGL[ OneMinusDstAlphaFactor ] = 773;

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending === NoBlending ) {

				if ( currentBlendingEnabled ) {

					disable( 3042 );
					currentBlendingEnabled = false;

				}

				return;

			}

			if ( ! currentBlendingEnabled ) {

				enable( 3042 );
				currentBlendingEnabled = true;

			}

			if ( blending !== CustomBlending ) {

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

						gl.blendEquation( 32774 );

						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;

					}

					if ( premultipliedAlpha ) {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( 1, 771, 1, 771 );
								break;

							case AdditiveBlending:
								gl.blendFunc( 1, 1 );
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate( 0, 0, 769, 771 );
								break;

							case MultiplyBlending:
								gl.blendFuncSeparate( 0, 768, 0, 770 );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					} else {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( 770, 771, 1, 771 );
								break;

							case AdditiveBlending:
								gl.blendFunc( 770, 1 );
								break;

							case SubtractiveBlending:
								gl.blendFunc( 0, 769 );
								break;

							case MultiplyBlending:
								gl.blendFunc( 0, 768 );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					}

					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;

					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;

				}

				return;

			}

			// custom blending

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

			currentBlending = blending;
			currentPremultipledAlpha = null;

		}

		function setMaterial( material, frontFaceCW ) {

			material.side === DoubleSide
				? disable( 2884 )
				: enable( 2884 );

			var flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) { flipSided = ! flipSided; }

			setFlipSided( flipSided );

			( material.blending === NormalBlending && material.transparent === false )
				? setBlending( NoBlending )
				: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );

			var stencilWrite = material.stencilWrite;
			stencilBuffer.setTest( stencilWrite );
			if ( stencilWrite ) {

				stencilBuffer.setMask( material.stencilWriteMask );
				stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
				stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

			}

			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( 2304 );

				} else {

					gl.frontFace( 2305 );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( 2884 );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( 1029 );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( 1028 );

					} else {

						gl.cullFace( 1032 );

					}

				}

			} else {

				disable( 2884 );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				if ( lineWidthAvailable ) { gl.lineWidth( width ); }

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( 32823 );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( 32823 );

			}

		}

		function setScissorTest( scissorTest ) {

			if ( scissorTest ) {

				enable( 3089 );

			} else {

				disable( 3089 );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture ) {

			if ( currentTextureSlot === null ) {

				activeTexture();

			}

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function unbindTexture() {

			var boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

				gl.bindTexture( boundTexture.type, null );

				boundTexture.type = undefined;
				boundTexture.texture = undefined;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage3D() {

			try {

				gl.texImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		//

		function reset() {

			for ( var i = 0; i < enabledAttributes.length; i ++ ) {

				if ( enabledAttributes[ i ] === 1 ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

			enabledCapabilities = {};

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentProgram = null;

			currentBlending = null;

			currentFlipSided = null;
			currentCullFace = null;

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			enableAttributeAndDivisor: enableAttributeAndDivisor,
			disableUnusedAttributes: disableUnusedAttributes,
			enable: enable,
			disable: disable,

			useProgram: useProgram,

			setBlending: setBlending,
			setMaterial: setMaterial,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			unbindTexture: unbindTexture,
			compressedTexImage2D: compressedTexImage2D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

		var isWebGL2 = capabilities.isWebGL2;
		var maxTextures = capabilities.maxTextures;
		var maxCubemapSize = capabilities.maxCubemapSize;
		var maxTextureSize = capabilities.maxTextureSize;
		var maxSamples = capabilities.maxSamples;

		var _videoTextures = new WeakMap();
		var _canvas;

		// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!

		var useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
			&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;

		function createCanvas( width, height ) {

			// Use OffscreenCanvas when available. Specially needed in web workers

			return useOffscreenCanvas ?
				new OffscreenCanvas( width, height ) :
				document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );

		}

		function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

			var scale = 1;

			// handle case if texture exceeds max size

			if ( image.width > maxSize || image.height > maxSize ) {

				scale = maxSize / Math.max( image.width, image.height );

			}

			// only perform resize if necessary

			if ( scale < 1 || needsPowerOfTwo === true ) {

				// only perform resize for certain image types

				if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
					( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
					( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

					var floor = needsPowerOfTwo ? _Math.floorPowerOfTwo : Math.floor;

					var width = floor( scale * image.width );
					var height = floor( scale * image.height );

					if ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }

					// cube textures can't reuse the same canvas

					var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

					canvas.width = width;
					canvas.height = height;

					var context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, width, height );

					console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

					return canvas;

				} else {

					if ( 'data' in image ) {

						console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

					}

					return image;

				}

			}

			return image;

		}

		function isPowerOfTwo( image ) {

			return _Math.isPowerOfTwo( image.width ) && _Math.isPowerOfTwo( image.height );

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( isWebGL2 ) { return false; }

			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

		}

		function textureNeedsGenerateMipmaps( texture, supportsMips ) {

			return texture.generateMipmaps && supportsMips &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

		}

		function generateMipmap( target, texture, width, height ) {

			_gl.generateMipmap( target );

			var textureProperties = properties.get( texture );

			// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
			textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;

		}

		function getInternalFormat( glFormat, glType ) {

			if ( isWebGL2 === false ) { return glFormat; }

			var internalFormat = glFormat;

			if ( glFormat === 6403 ) {

				if ( glType === 5126 ) { internalFormat = 33326; }
				if ( glType === 5131 ) { internalFormat = 33325; }
				if ( glType === 5121 ) { internalFormat = 33321; }

			}

			if ( glFormat === 6407 ) {

				if ( glType === 5126 ) { internalFormat = 34837; }
				if ( glType === 5131 ) { internalFormat = 34843; }
				if ( glType === 5121 ) { internalFormat = 32849; }

			}

			if ( glFormat === 6408 ) {

				if ( glType === 5126 ) { internalFormat = 34836; }
				if ( glType === 5131 ) { internalFormat = 34842; }
				if ( glType === 5121 ) { internalFormat = 32856; }

			}

			if ( internalFormat === 33325 || internalFormat === 33326 ||
				internalFormat === 34842 || internalFormat === 34836 ) {

				extensions.get( 'EXT_color_buffer_float' );

			} else if ( internalFormat === 34843 || internalFormat === 34837 ) {

				console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );

			}

			return internalFormat;

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

				return 9728;

			}

			return 9729;

		}

		//

		function onTextureDispose( event ) {

			var texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			if ( texture.isVideoTexture ) {

				_videoTextures.delete( texture );

			}

			info.memory.textures --;

		}

		function onRenderTargetDispose( event ) {

			var renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

			info.memory.textures --;

		}

		//

		function deallocateTexture( texture ) {

			var textureProperties = properties.get( texture );

			if ( textureProperties.__webglInit === undefined ) { return; }

			_gl.deleteTexture( textureProperties.__webglTexture );

			properties.remove( texture );

		}

		function deallocateRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			if ( ! renderTarget ) { return; }

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget.isWebGLRenderTargetCube ) {

				for ( var i = 0; i < 6; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }

				}

			} else {

				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }

			}

			if ( renderTarget.isWebGLMultiviewRenderTarget ) {

				_gl.deleteTexture( renderTargetProperties.__webglColorTexture );
				_gl.deleteTexture( renderTargetProperties.__webglDepthStencilTexture );

				info.memory.textures -= 2;

				for ( var i = 0, il = renderTargetProperties.__webglViewFramebuffers.length; i < il; i ++ ) {

					_gl.deleteFramebuffer( renderTargetProperties.__webglViewFramebuffers[ i ] );

				}

			}

			properties.remove( renderTarget.texture );
			properties.remove( renderTarget );

		}

		//

		var textureUnits = 0;

		function resetTextureUnits() {

			textureUnits = 0;

		}

		function allocateTextureUnit() {

			var textureUnit = textureUnits;

			if ( textureUnit >= maxTextures ) {

				console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

			}

			textureUnits += 1;

			return textureUnit;

		}

		//

		function setTexture2D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.isVideoTexture ) { updateVideoTexture( texture ); }

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				var image = texture.image;

				if ( image === undefined ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.activeTexture( 33984 + slot );
			state.bindTexture( 3553, textureProperties.__webglTexture );

		}

		function setTexture2DArray( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.activeTexture( 33984 + slot );
			state.bindTexture( 35866, textureProperties.__webglTexture );

		}

		function setTexture3D( texture, slot ) {

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.activeTexture( 33984 + slot );
			state.bindTexture( 32879, textureProperties.__webglTexture );

		}

		function setTextureCube( texture, slot ) {

			if ( texture.image.length !== 6 ) { return; }

			var textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				initTexture( textureProperties, texture );

				state.activeTexture( 33984 + slot );
				state.bindTexture( 34067, textureProperties.__webglTexture );

				_gl.pixelStorei( 37440, texture.flipY );

				var isCompressed = ( texture && texture.isCompressedTexture );
				var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
					supportsMips = isPowerOfTwo( image ) || isWebGL2,
					glFormat = utils.convert( texture.format ),
					glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( glFormat, glType );

				setTextureParameters( 34067, texture, supportsMips );

				var mipmaps;

				if ( isCompressed ) {

					for ( var i = 0; i < 6; i ++ ) {

						mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0; j < mipmaps.length; j ++ ) {

							var mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

								if ( glFormat !== null ) {

									state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					mipmaps = texture.mipmaps;

					for ( var i = 0; i < 6; i ++ ) {

						if ( isDataTexture ) {

							state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							for ( var j = 0; j < mipmaps.length; j ++ ) {

								var mipmap = mipmaps[ j ];
								var mipmapImage = mipmap.image[ i ].image;

								state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

							}

						} else {

							state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

							for ( var j = 0; j < mipmaps.length; j ++ ) {

								var mipmap = mipmaps[ j ];

								state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

							}

						}

					}

					textureProperties.__maxMipLevel = mipmaps.length;

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					// We assume images for cube map have the same size.
					generateMipmap( 34067, texture, image.width, image.height );

				}

				textureProperties.__version = texture.version;

				if ( texture.onUpdate ) { texture.onUpdate( texture ); }

			} else {

				state.activeTexture( 33984 + slot );
				state.bindTexture( 34067, textureProperties.__webglTexture );

			}

		}

		function setTextureCubeDynamic( texture, slot ) {

			state.activeTexture( 33984 + slot );
			state.bindTexture( 34067, properties.get( texture ).__webglTexture );

		}

		var wrappingToGL = {};
		wrappingToGL[ RepeatWrapping ] = 10497;
		wrappingToGL[ ClampToEdgeWrapping ] = 33071;
		wrappingToGL[ MirroredRepeatWrapping ] = 33648;

		var filterToGL = {};
		filterToGL[ NearestFilter ] = 9728;
		filterToGL[ NearestMipmapNearestFilter ] = 9984;
		filterToGL[ NearestMipmapLinearFilter ] = 9986;
		filterToGL[ LinearFilter ] = 9729;
		filterToGL[ LinearMipmapNearestFilter ] = 9985;
		filterToGL[ LinearMipmapLinearFilter ] = 9987;

		function setTextureParameters( textureType, texture, supportsMips ) {

			if ( supportsMips ) {

				_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
				_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );

				if ( textureType === 32879 || textureType === 35866 ) {

					_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );

				}

				_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
				_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );

			} else {

				_gl.texParameteri( textureType, 10242, 33071 );
				_gl.texParameteri( textureType, 10243, 33071 );

				if ( textureType === 32879 || textureType === 35866 ) {

					_gl.texParameteri( textureType, 32882, 33071 );

				}

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

				}

				_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

				}

			}

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			if ( extension ) {

				if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }
				if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function initTexture( textureProperties, texture ) {

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				textureProperties.__webglTexture = _gl.createTexture();

				info.memory.textures ++;

			}

		}

		function uploadTexture( textureProperties, texture, slot ) {

			var textureType = 3553;

			if ( texture.isDataTexture2DArray ) { textureType = 35866; }
			if ( texture.isDataTexture3D ) { textureType = 32879; }

			initTexture( textureProperties, texture );

			state.activeTexture( 33984 + slot );
			state.bindTexture( textureType, textureProperties.__webglTexture );

			_gl.pixelStorei( 37440, texture.flipY );
			_gl.pixelStorei( 37441, texture.premultiplyAlpha );
			_gl.pixelStorei( 3317, texture.unpackAlignment );

			var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
			var image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );

			var supportsMips = isPowerOfTwo( image ) || isWebGL2,
				glFormat = utils.convert( texture.format ),
				glType = utils.convert( texture.type ),
				glInternalFormat = getInternalFormat( glFormat, glType );

			setTextureParameters( textureType, texture, supportsMips );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture.isDepthTexture ) {

				// populate depth texture with dummy data

				glInternalFormat = 6402;

				if ( texture.type === FloatType ) {

					if ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }
					glInternalFormat = 36012;

				} else if ( isWebGL2 ) {

					// WebGL 2.0 requires signed internalformat for glTexImage2D
					glInternalFormat = 33189;

				}

				if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

						texture.type = UnsignedShortType;
						glType = utils.convert( texture.type );

					}

				}

				// Depth stencil textures need the DEPTH_STENCIL internal format
				// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
				if ( texture.format === DepthStencilFormat ) {

					glInternalFormat = 34041;

					// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
					// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.type !== UnsignedInt248Type ) {

						console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

						texture.type = UnsignedInt248Type;
						glType = utils.convert( texture.type );

					}

				}

				state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

			} else if ( texture.isDataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && supportsMips ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
					textureProperties.__maxMipLevel = 0;

				}

			} else if ( texture.isCompressedTexture ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];

					if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {

						if ( glFormat !== null ) {

							state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						} else {

							console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

						}

					} else {

						state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

				}

				textureProperties.__maxMipLevel = mipmaps.length - 1;

			} else if ( texture.isDataTexture2DArray ) {

				state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;

			} else if ( texture.isDataTexture3D ) {

				state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
				textureProperties.__maxMipLevel = 0;

			} else {

				// regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && supportsMips ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;
					textureProperties.__maxMipLevel = mipmaps.length - 1;

				} else {

					state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
					textureProperties.__maxMipLevel = 0;

				}

			}

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				generateMipmap( 3553, texture, image.width, image.height );

			}

			textureProperties.__version = texture.version;

			if ( texture.onUpdate ) { texture.onUpdate( texture ); }

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {

			var glFormat = utils.convert( renderTarget.texture.format );
			var glType = utils.convert( renderTarget.texture.type );
			var glInternalFormat = getInternalFormat( glFormat, glType );
			state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
			_gl.bindFramebuffer( 36160, framebuffer );
			_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
			_gl.bindFramebuffer( 36160, null );

		}

		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

			_gl.bindRenderbuffer( 36161, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				if ( isMultisample ) {

					var samples = getRenderTargetSamples( renderTarget );

					_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );

				}

				_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				if ( isMultisample ) {

					var samples = getRenderTargetSamples( renderTarget );

					_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );

				}


				_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );

			} else {

				var glFormat = utils.convert( renderTarget.texture.format );
				var glType = utils.convert( renderTarget.texture.type );
				var glInternalFormat = getInternalFormat( glFormat, glType );

				if ( isMultisample ) {

					var samples = getRenderTargetSamples( renderTarget );

					_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );

				}

			}

			_gl.bindRenderbuffer( 36161, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			var isCube = ( renderTarget && renderTarget.isWebGLRenderTargetCube );
			if ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }

			_gl.bindFramebuffer( 36160, framebuffer );

			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

			}

			// upload an empty depth texture with framebuffer size
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {

				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;

			}

			setTexture2D( renderTarget.depthTexture, 0 );

			var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );

			} else {

				throw new Error( 'Unknown depthTexture format' );

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );

			if ( renderTarget.depthTexture ) {

				if ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( var i = 0; i < 6; i ++ ) {

						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );

					}

				} else {

					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );

				}

			}

			_gl.bindFramebuffer( 36160, null );

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			textureProperties.__webglTexture = _gl.createTexture();

			info.memory.textures ++;

			var isCube = ( renderTarget.isWebGLRenderTargetCube === true );
			var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
			var isMultiview = ( renderTarget.isWebGLMultiviewRenderTarget === true );
			var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( var i = 0; i < 6; i ++ ) {

					renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

				}

			} else {

				renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				if ( isMultisample ) {

					if ( isWebGL2 ) {

						renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
						renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();

						_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
						var glFormat = utils.convert( renderTarget.texture.format );
						var glType = utils.convert( renderTarget.texture.type );
						var glInternalFormat = getInternalFormat( glFormat, glType );
						var samples = getRenderTargetSamples( renderTarget );
						_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );

						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
						_gl.bindRenderbuffer( 36161, null );

						if ( renderTarget.depthBuffer ) {

							renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

						}

						_gl.bindFramebuffer( 36160, null );


					} else {

						console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

					}

				} else if ( isMultiview ) {

					var width = renderTarget.width;
					var height = renderTarget.height;
					var numViews = renderTarget.numViews;

					_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );

					var ext = extensions.get( 'OVR_multiview2' );

					info.memory.textures += 2;

					var colorTexture = _gl.createTexture();
					_gl.bindTexture( 35866, colorTexture );
					_gl.texParameteri( 35866, 10240, 9728 );
					_gl.texParameteri( 35866, 10241, 9728 );
					_gl.texImage3D( 35866, 0, 32856, width, height, numViews, 0, 6408, 5121, null );
					ext.framebufferTextureMultiviewOVR( 36160, 36064, colorTexture, 0, 0, numViews );

					var depthStencilTexture = _gl.createTexture();
					_gl.bindTexture( 35866, depthStencilTexture );
					_gl.texParameteri( 35866, 10240, 9728 );
					_gl.texParameteri( 35866, 10241, 9728 );
					_gl.texImage3D( 35866, 0, 35056, width, height, numViews, 0, 34041, 34042, null );
					ext.framebufferTextureMultiviewOVR( 36160, 33306, depthStencilTexture, 0, 0, numViews );

					var viewFramebuffers = new Array( numViews );
					for ( var i = 0; i < numViews; ++ i ) {

						viewFramebuffers[ i ] = _gl.createFramebuffer();
						_gl.bindFramebuffer( 36160, viewFramebuffers[ i ] );
						_gl.framebufferTextureLayer( 36160, 36064, colorTexture, 0, i );

					}

					renderTargetProperties.__webglColorTexture = colorTexture;
					renderTargetProperties.__webglDepthStencilTexture = depthStencilTexture;
					renderTargetProperties.__webglViewFramebuffers = viewFramebuffers;

					_gl.bindFramebuffer( 36160, null );
					_gl.bindTexture( 35866, null );

				}

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( 34067, textureProperties.__webglTexture );
				setTextureParameters( 34067, renderTarget.texture, supportsMips );

				for ( var i = 0; i < 6; i ++ ) {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );

				}

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

					generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );

				}

				state.bindTexture( 34067, null );

			} else if ( ! isMultiview ) {

				state.bindTexture( 3553, textureProperties.__webglTexture );
				setTextureParameters( 3553, renderTarget.texture, supportsMips );
				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );

				if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {

					generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );

				}

				state.bindTexture( 3553, null );

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			var texture = renderTarget.texture;
			var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

				var target = renderTarget.isWebGLRenderTargetCube ? 34067 : 3553;
				var webglTexture = properties.get( texture ).__webglTexture;

				state.bindTexture( target, webglTexture );
				generateMipmap( target, texture, renderTarget.width, renderTarget.height );
				state.bindTexture( target, null );

			}

		}

		function updateMultisampleRenderTarget( renderTarget ) {

			if ( renderTarget.isWebGLMultisampleRenderTarget ) {

				if ( isWebGL2 ) {

					var renderTargetProperties = properties.get( renderTarget );

					_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
					_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );

					var width = renderTarget.width;
					var height = renderTarget.height;
					var mask = 16384;

					if ( renderTarget.depthBuffer ) { mask |= 256; }
					if ( renderTarget.stencilBuffer ) { mask |= 1024; }

					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );

				} else {

					console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );

				}

			}

		}

		function getRenderTargetSamples( renderTarget ) {

			return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
				Math.min( maxSamples, renderTarget.samples ) : 0;

		}

		function updateVideoTexture( texture ) {

			var frame = info.render.frame;

			// Check the last frame we updated the VideoTexture

			if ( _videoTextures.get( texture ) !== frame ) {

				_videoTextures.set( texture, frame );
				texture.update();

			}

		}

		// backwards compatibility

		var warnedTexture2D = false;
		var warnedTextureCube = false;

		function safeSetTexture2D( texture, slot ) {

			if ( texture && texture.isWebGLRenderTarget ) {

				if ( warnedTexture2D === false ) {

					console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
					warnedTexture2D = true;

				}

				texture = texture.texture;

			}

			setTexture2D( texture, slot );

		}

		function safeSetTextureCube( texture, slot ) {

			if ( texture && texture.isWebGLRenderTargetCube ) {

				if ( warnedTextureCube === false ) {

					console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
					warnedTextureCube = true;

				}

				texture = texture.texture;

			}

			// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture
			// TODO: unify these code paths
			if ( ( texture && texture.isCubeTexture ) ||
				( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {

				// CompressedTexture can have Array in image :/

				// this function alone should take care of cube textures
				setTextureCube( texture, slot );

			} else {

				// assumed: texture property of THREE.WebGLRenderTargetCube
				setTextureCubeDynamic( texture, slot );

			}

		}

		//

		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;

		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.setTextureCubeDynamic = setTextureCubeDynamic;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;

		this.safeSetTexture2D = safeSetTexture2D;
		this.safeSetTextureCube = safeSetTextureCube;

	}

	/**
	 * @author thespite / http://www.twitter.com/thespite
	 */

	function WebGLUtils( gl, extensions, capabilities ) {

		var isWebGL2 = capabilities.isWebGL2;

		function convert( p ) {

			var extension;

			if ( p === UnsignedByteType ) { return 5121; }
			if ( p === UnsignedShort4444Type ) { return 32819; }
			if ( p === UnsignedShort5551Type ) { return 32820; }
			if ( p === UnsignedShort565Type ) { return 33635; }

			if ( p === ByteType ) { return 5120; }
			if ( p === ShortType ) { return 5122; }
			if ( p === UnsignedShortType ) { return 5123; }
			if ( p === IntType ) { return 5124; }
			if ( p === UnsignedIntType ) { return 5125; }
			if ( p === FloatType ) { return 5126; }

			if ( p === HalfFloatType ) {

				if ( isWebGL2 ) { return 5131; }

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) {

					return extension.HALF_FLOAT_OES;

				} else {

					return null;

				}

			}

			if ( p === AlphaFormat ) { return 6406; }
			if ( p === RGBFormat ) { return 6407; }
			if ( p === RGBAFormat ) { return 6408; }
			if ( p === LuminanceFormat ) { return 6409; }
			if ( p === LuminanceAlphaFormat ) { return 6410; }
			if ( p === DepthFormat ) { return 6402; }
			if ( p === DepthStencilFormat ) { return 34041; }
			if ( p === RedFormat ) { return 6403; }

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
				p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

				if ( extension !== null ) {

					if ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }
					if ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }
					if ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }
					if ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }

				} else {

					return null;

				}

			}

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
				p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }
					if ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }
					if ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }
					if ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }

				} else {

					return null;

				}

			}

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) {

					return extension.COMPRESSED_RGB_ETC1_WEBGL;

				} else {

					return null;

				}

			}

			if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
				p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
				p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
				p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
				p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_astc' );

				if ( extension !== null ) {

					// TODO Complete?

					return p;

				} else {

					return null;

				}

			}

			if ( p === UnsignedInt248Type ) {

				if ( isWebGL2 ) { return 34042; }

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) {

					return extension.UNSIGNED_INT_24_8_WEBGL;

				} else {

					return null;

				}

			}

		}

		return { convert: convert };

	}

	/**
	 * @author fernandojsg / http://fernandojsg.com
	 * @author Takahiro https://github.com/takahirox
	 */

	function WebGLMultiviewRenderTarget( width, height, numViews, options ) {

		WebGLRenderTarget.call( this, width, height, options );

		this.depthBuffer = false;
		this.stencilBuffer = false;

		this.numViews = numViews;

	}

	WebGLMultiviewRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {

		constructor: WebGLMultiviewRenderTarget,

		isWebGLMultiviewRenderTarget: true,

		copy: function ( source ) {

			WebGLRenderTarget.prototype.copy.call( this, source );

			this.numViews = source.numViews;

			return this;

		},

		setNumViews: function ( numViews ) {

			if ( this.numViews !== numViews ) {

				this.numViews = numViews;
				this.dispose();

			}

			return this;

		}

	} );

	/**
	 * @author fernandojsg / http://fernandojsg.com
	 * @author Takahiro https://github.com/takahirox
	 */

	function WebGLMultiview( renderer, gl ) {

		var DEFAULT_NUMVIEWS = 2;

		var extensions = renderer.extensions;
		var properties = renderer.properties;

		var renderTarget, currentRenderTarget;
		var mat3, mat4, cameraArray, renderSize;

		var available;
		var maxNumViews = 0;

		//

		function isAvailable() {

			if ( available === undefined ) {

				var extension = extensions.get( 'OVR_multiview2' );

				available = extension !== null && gl.getContextAttributes().antialias === false;

				if ( available ) {

					maxNumViews = gl.getParameter( extension.MAX_VIEWS_OVR );
					renderTarget = new WebGLMultiviewRenderTarget( 0, 0, DEFAULT_NUMVIEWS );

					renderSize = new Vector2();
					mat4 = [];
					mat3 = [];
					cameraArray = [];

					for ( var i = 0; i < maxNumViews; i ++ ) {

						mat4[ i ] = new Matrix4();
						mat3[ i ] = new Matrix3();

					}

				}

			}

			return available;

		}

		function getCameraArray( camera ) {

			if ( camera.isArrayCamera ) { return camera.cameras; }

			cameraArray[ 0 ] = camera;

			return cameraArray;

		}

		function updateCameraProjectionMatricesUniform( camera, uniforms ) {

			var cameras = getCameraArray( camera );

			for ( var i = 0; i < cameras.length; i ++ ) {

				mat4[ i ].copy( cameras[ i ].projectionMatrix );

			}

			uniforms.setValue( gl, 'projectionMatrices', mat4 );

		}

		function updateCameraViewMatricesUniform( camera, uniforms ) {

			var cameras = getCameraArray( camera );

			for ( var i = 0; i < cameras.length; i ++ ) {

				mat4[ i ].copy( cameras[ i ].matrixWorldInverse );

			}

			uniforms.setValue( gl, 'viewMatrices', mat4 );

		}

		function updateObjectMatricesUniforms( object, camera, uniforms ) {

			var cameras = getCameraArray( camera );

			for ( var i = 0; i < cameras.length; i ++ ) {

				mat4[ i ].multiplyMatrices( cameras[ i ].matrixWorldInverse, object.matrixWorld );
				mat3[ i ].getNormalMatrix( mat4[ i ] );

			}

			uniforms.setValue( gl, 'modelViewMatrices', mat4 );
			uniforms.setValue( gl, 'normalMatrices', mat3 );

		}

		function isMultiviewCompatible( camera ) {

			if ( camera.isArrayCamera === undefined ) { return true; }

			var cameras = camera.cameras;

			if ( cameras.length > maxNumViews ) { return false; }

			for ( var i = 1, il = cameras.length; i < il; i ++ ) {

				if ( cameras[ 0 ].viewport.z !== cameras[ i ].viewport.z ||
					cameras[ 0 ].viewport.w !== cameras[ i ].viewport.w ) { return false; }

			}

			return true;

		}

		function resizeRenderTarget( camera ) {

			if ( currentRenderTarget ) {

				renderSize.set( currentRenderTarget.width, currentRenderTarget.height );

			} else {

				renderer.getDrawingBufferSize( renderSize );

			}

			if ( camera.isArrayCamera ) {

				var viewport = camera.cameras[ 0 ].viewport;

				renderTarget.setSize( viewport.z, viewport.w );
				renderTarget.setNumViews( camera.cameras.length );

			} else {

				renderTarget.setSize( renderSize.x, renderSize.y );
				renderTarget.setNumViews( DEFAULT_NUMVIEWS );

			}

		}

		function attachCamera( camera ) {

			if ( isMultiviewCompatible( camera ) === false ) { return; }

			currentRenderTarget = renderer.getRenderTarget();
			resizeRenderTarget( camera );
			renderer.setRenderTarget( renderTarget );

		}

		function detachCamera( camera ) {

			if ( renderTarget !== renderer.getRenderTarget() ) { return; }

			renderer.setRenderTarget( currentRenderTarget );

			flush( camera );

		}

		function flush( camera ) {

			var srcRenderTarget = renderTarget;
			var numViews = srcRenderTarget.numViews;

			var srcFramebuffers = properties.get( srcRenderTarget ).__webglViewFramebuffers;

			var viewWidth = srcRenderTarget.width;
			var viewHeight = srcRenderTarget.height;

			if ( camera.isArrayCamera ) {

				for ( var i = 0; i < numViews; i ++ ) {

					var viewport = camera.cameras[ i ].viewport;

					var x1 = viewport.x;
					var y1 = viewport.y;
					var x2 = x1 + viewport.z;
					var y2 = y1 + viewport.w;

					gl.bindFramebuffer( 36008, srcFramebuffers[ i ] );
					gl.blitFramebuffer( 0, 0, viewWidth, viewHeight, x1, y1, x2, y2, 16384, 9728 );

				}

			} else {

				gl.bindFramebuffer( 36008, srcFramebuffers[ 0 ] );
				gl.blitFramebuffer( 0, 0, viewWidth, viewHeight, 0, 0, renderSize.x, renderSize.y, 16384, 9728 );

			}

		}

		this.isAvailable = isAvailable;
		this.attachCamera = attachCamera;
		this.detachCamera = detachCamera;
		this.updateCameraProjectionMatricesUniform = updateCameraProjectionMatricesUniform;
		this.updateCameraViewMatricesUniform = updateCameraViewMatricesUniform;
		this.updateObjectMatricesUniforms = updateObjectMatricesUniforms;

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Group() {

		Object3D.call( this );

		this.type = 'Group';

	}

	Group.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Group,

		isGroup: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ArrayCamera( array ) {

		PerspectiveCamera.call( this );

		this.cameras = array || [];

	}

	ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {

		constructor: ArrayCamera,

		isArrayCamera: true

	} );

	/**
	 * @author jsantell / https://www.jsantell.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var cameraLPos = new Vector3();
	var cameraRPos = new Vector3();

	/**
	 * Assumes 2 cameras that are parallel and share an X-axis, and that
	 * the cameras' projection and world matrices have already been set.
	 * And that near and far planes are identical for both cameras.
	 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
	 */
	function setProjectionFromUnion( camera, cameraL, cameraR ) {

		cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
		cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

		var ipd = cameraLPos.distanceTo( cameraRPos );

		var projL = cameraL.projectionMatrix.elements;
		var projR = cameraR.projectionMatrix.elements;

		// VR systems will have identical far and near planes, and
		// most likely identical top and bottom frustum extents.
		// Use the left camera for these values.
		var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
		var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
		var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
		var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

		var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
		var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
		var left = near * leftFov;
		var right = near * rightFov;

		// Calculate the new camera's position offset from the
		// left camera. xOffset should be roughly half `ipd`.
		var zOffset = ipd / ( - leftFov + rightFov );
		var xOffset = zOffset * - leftFov;

		// TODO: Better way to apply this offset?
		cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
		camera.translateX( xOffset );
		camera.translateZ( zOffset );
		camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		// Find the union of the frustum values of the cameras and scale
		// the values so that the near plane's position does not change in world space,
		// although must now be relative to the new union camera.
		var near2 = near + zOffset;
		var far2 = far + zOffset;
		var left2 = left - xOffset;
		var right2 = right + ( ipd - xOffset );
		var top2 = topFov * far / far2 * near2;
		var bottom2 = bottomFov * far / far2 * near2;

		camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebVRManager( renderer ) {

		var renderWidth, renderHeight;
		var scope = this;

		var device = null;
		var frameData = null;

		var controllers = [];
		var standingMatrix = new Matrix4();
		var standingMatrixInverse = new Matrix4();

		var framebufferScaleFactor = 1.0;

		var referenceSpaceType = 'local-floor';

		if ( typeof window !== 'undefined' && 'VRFrameData' in window ) {

			frameData = new window.VRFrameData();
			window.addEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange, false );

		}

		var matrixWorldInverse = new Matrix4();
		var tempQuaternion = new Quaternion();
		var tempPosition = new Vector3();

		var tempCamera = new PerspectiveCamera();

		var cameraL = new PerspectiveCamera();
		cameraL.viewport = new Vector4();
		cameraL.layers.enable( 1 );

		var cameraR = new PerspectiveCamera();
		cameraR.viewport = new Vector4();
		cameraR.layers.enable( 2 );

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		function isPresenting() {

			return device !== null && device.isPresenting === true;

		}

		var currentSize = new Vector2(), currentPixelRatio;

		function onVRDisplayPresentChange() {

			if ( isPresenting() ) {

				var eyeParameters = device.getEyeParameters( 'left' );
				renderWidth = 2 * eyeParameters.renderWidth * framebufferScaleFactor;
				renderHeight = eyeParameters.renderHeight * framebufferScaleFactor;

				currentPixelRatio = renderer.getPixelRatio();
				renderer.getSize( currentSize );

				renderer.setDrawingBufferSize( renderWidth, renderHeight, 1 );

				cameraL.viewport.set( 0, 0, renderWidth / 2, renderHeight );
				cameraR.viewport.set( renderWidth / 2, 0, renderWidth / 2, renderHeight );

				animation.start();

				scope.dispatchEvent( { type: 'sessionstart' } );

			} else {

				if ( scope.enabled ) {

					renderer.setDrawingBufferSize( currentSize.width, currentSize.height, currentPixelRatio );

				}

				animation.stop();

				scope.dispatchEvent( { type: 'sessionend' } );

			}

		}

		//

		var triggers = [];
		var grips = [];

		function findGamepad( id ) {

			var gamepads = navigator.getGamepads && navigator.getGamepads();

			for ( var i = 0, l = gamepads.length; i < l; i ++ ) {

				var gamepad = gamepads[ i ];

				if ( gamepad && ( gamepad.id === 'Daydream Controller' ||
					gamepad.id === 'Gear VR Controller' || gamepad.id === 'Oculus Go Controller' ||
					gamepad.id === 'OpenVR Gamepad' || gamepad.id.startsWith( 'Oculus Touch' ) ||
					gamepad.id.startsWith( 'HTC Vive Focus' ) ||
					gamepad.id.startsWith( 'Spatial Controller' ) ) ) {

					var hand = gamepad.hand;

					if ( id === 0 && ( hand === '' || hand === 'right' ) ) { return gamepad; }
					if ( id === 1 && ( hand === 'left' ) ) { return gamepad; }

				}

			}

		}

		function updateControllers() {

			for ( var i = 0; i < controllers.length; i ++ ) {

				var controller = controllers[ i ];

				var gamepad = findGamepad( i );

				if ( gamepad !== undefined && gamepad.pose !== undefined ) {

					if ( gamepad.pose === null ) { return; }

					// Pose

					var pose = gamepad.pose;

					if ( pose.hasPosition === false ) { controller.position.set( 0.2, - 0.6, - 0.05 ); }

					if ( pose.position !== null ) { controller.position.fromArray( pose.position ); }
					if ( pose.orientation !== null ) { controller.quaternion.fromArray( pose.orientation ); }
					controller.matrix.compose( controller.position, controller.quaternion, controller.scale );
					controller.matrix.premultiply( standingMatrix );
					controller.matrix.decompose( controller.position, controller.quaternion, controller.scale );
					controller.matrixWorldNeedsUpdate = true;
					controller.visible = true;

					// Trigger

					var buttonId = gamepad.id === 'Daydream Controller' ? 0 : 1;

					if ( triggers[ i ] === undefined ) { triggers[ i ] = false; }

					if ( triggers[ i ] !== gamepad.buttons[ buttonId ].pressed ) {

						triggers[ i ] = gamepad.buttons[ buttonId ].pressed;

						if ( triggers[ i ] === true ) {

							controller.dispatchEvent( { type: 'selectstart' } );

						} else {

							controller.dispatchEvent( { type: 'selectend' } );
							controller.dispatchEvent( { type: 'select' } );

						}

					}

					// Grip
					buttonId = 2;

					if ( grips[ i ] === undefined ) { grips[ i ] = false; }

					// Skip if the grip button doesn't exist on this controller
					if ( gamepad.buttons[ buttonId ] !== undefined ) {

						if ( grips[ i ] !== gamepad.buttons[ buttonId ].pressed ) {

							grips[ i ] = gamepad.buttons[ buttonId ].pressed;

							if ( grips[ i ] === true ) {

								controller.dispatchEvent( { type: 'squeezestart' } );

							} else {

								controller.dispatchEvent( { type: 'squeezeend' } );
								controller.dispatchEvent( { type: 'squeeze' } );

							}

						}

					}

				} else {

					controller.visible = false;

				}

			}

		}

		function updateViewportFromBounds( viewport, bounds ) {

			if ( bounds !== null && bounds.length === 4 ) {

				viewport.set( bounds[ 0 ] * renderWidth, bounds[ 1 ] * renderHeight, bounds[ 2 ] * renderWidth, bounds[ 3 ] * renderHeight );

			}

		}

		//

		this.enabled = false;

		this.getController = function ( id ) {

			var controller = controllers[ id ];

			if ( controller === undefined ) {

				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;

				controllers[ id ] = controller;

			}

			return controller;

		};

		this.getDevice = function () {

			return device;

		};

		this.setDevice = function ( value ) {

			if ( value !== undefined ) { device = value; }

			animation.setContext( value );

		};

		this.setFramebufferScaleFactor = function ( value ) {

			framebufferScaleFactor = value;

		};

		this.setReferenceSpaceType = function ( value ) {

			referenceSpaceType = value;

		};

		this.getCamera = function ( camera ) {

			var userHeight = referenceSpaceType === 'local-floor' ? 1.6 : 0;

			device.depthNear = camera.near;
			device.depthFar = camera.far;

			device.getFrameData( frameData );

			//

			if ( referenceSpaceType === 'local-floor' ) {

				var stageParameters = device.stageParameters;

				if ( stageParameters ) {

					standingMatrix.fromArray( stageParameters.sittingToStandingTransform );

				} else {

					standingMatrix.makeTranslation( 0, userHeight, 0 );

				}

			}


			var pose = frameData.pose;

			tempCamera.matrix.copy( standingMatrix );
			tempCamera.matrix.decompose( tempCamera.position, tempCamera.quaternion, tempCamera.scale );

			if ( pose.orientation !== null ) {

				tempQuaternion.fromArray( pose.orientation );
				tempCamera.quaternion.multiply( tempQuaternion );

			}

			if ( pose.position !== null ) {

				tempQuaternion.setFromRotationMatrix( standingMatrix );
				tempPosition.fromArray( pose.position );
				tempPosition.applyQuaternion( tempQuaternion );
				tempCamera.position.add( tempPosition );

			}

			tempCamera.updateMatrixWorld();

			//

			camera.matrixWorld.copy( tempCamera.matrixWorld );

			var children = camera.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( true );

			}

			//

			cameraL.near = camera.near;
			cameraR.near = camera.near;

			cameraL.far = camera.far;
			cameraR.far = camera.far;

			cameraL.matrixWorldInverse.fromArray( frameData.leftViewMatrix );
			cameraR.matrixWorldInverse.fromArray( frameData.rightViewMatrix );

			// TODO (mrdoob) Double check this code

			standingMatrixInverse.getInverse( standingMatrix );

			if ( referenceSpaceType === 'local-floor' ) {

				cameraL.matrixWorldInverse.multiply( standingMatrixInverse );
				cameraR.matrixWorldInverse.multiply( standingMatrixInverse );

			}

			var parent = camera.parent;

			if ( parent !== null ) {

				matrixWorldInverse.getInverse( parent.matrixWorld );

				cameraL.matrixWorldInverse.multiply( matrixWorldInverse );
				cameraR.matrixWorldInverse.multiply( matrixWorldInverse );

			}

			// envMap and Mirror needs camera.matrixWorld

			cameraL.matrixWorld.getInverse( cameraL.matrixWorldInverse );
			cameraR.matrixWorld.getInverse( cameraR.matrixWorldInverse );

			cameraL.projectionMatrix.fromArray( frameData.leftProjectionMatrix );
			cameraR.projectionMatrix.fromArray( frameData.rightProjectionMatrix );

			setProjectionFromUnion( cameraVR, cameraL, cameraR );

			//

			var layers = device.getLayers();

			if ( layers.length ) {

				var layer = layers[ 0 ];

				updateViewportFromBounds( cameraL.viewport, layer.leftBounds );
				updateViewportFromBounds( cameraR.viewport, layer.rightBounds );

			}

			updateControllers();

			return cameraVR;

		};

		this.getStandingMatrix = function () {

			return standingMatrix;

		};

		this.isPresenting = isPresenting;

		// Animation Loop

		var animation = new WebGLAnimation();

		this.setAnimationLoop = function ( callback ) {

			animation.setAnimationLoop( callback );

			if ( isPresenting() ) { animation.start(); }

		};

		this.submitFrame = function () {

			if ( isPresenting() ) { device.submitFrame(); }

		};

		this.dispose = function () {

			if ( typeof window !== 'undefined' ) {

				window.removeEventListener( 'vrdisplaypresentchange', onVRDisplayPresentChange );

			}

		};

		// DEPRECATED

		this.setFrameOfReferenceType = function () {

			console.warn( 'THREE.WebVRManager: setFrameOfReferenceType() has been deprecated.' );

		};

	}

	Object.assign( WebVRManager.prototype, EventDispatcher.prototype );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function WebXRManager( renderer, gl ) {

		var scope = this;

		var session = null;

		// var framebufferScaleFactor = 1.0;

		var referenceSpace = null;
		var referenceSpaceType = 'local-floor';

		var pose = null;

		var controllers = [];
		var sortedInputSources = [];

		function isPresenting() {

			return session !== null && referenceSpace !== null;

		}

		//

		var cameraL = new PerspectiveCamera();
		cameraL.layers.enable( 1 );
		cameraL.viewport = new Vector4();

		var cameraR = new PerspectiveCamera();
		cameraR.layers.enable( 2 );
		cameraR.viewport = new Vector4();

		var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
		cameraVR.layers.enable( 1 );
		cameraVR.layers.enable( 2 );

		//

		this.enabled = false;

		this.getController = function ( id ) {

			var controller = controllers[ id ];

			if ( controller === undefined ) {

				controller = new Group();
				controller.matrixAutoUpdate = false;
				controller.visible = false;

				controllers[ id ] = controller;

			}

			return controller;

		};

		//

		function onSessionEvent( event ) {

			for ( var i = 0; i < controllers.length; i ++ ) {

				if ( sortedInputSources[ i ] === event.inputSource ) {

					controllers[ i ].dispatchEvent( { type: event.type } );

				}

			}

		}

		function onSessionEnd() {

			renderer.setFramebuffer( null );
			renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
			animation.stop();

			scope.dispatchEvent( { type: 'sessionend' } );

		}

		function onRequestReferenceSpace( value ) {

			referenceSpace = value;

			animation.setContext( session );
			animation.start();

			scope.dispatchEvent( { type: 'sessionstart' } );

		}

		this.setFramebufferScaleFactor = function ( /* value */ ) {

			// framebufferScaleFactor = value;

		};

		this.setReferenceSpaceType = function ( value ) {

			referenceSpaceType = value;

		};

		this.getSession = function () {

			return session;

		};

		this.setSession = function ( value ) {

			session = value;

			if ( session !== null ) {

				session.addEventListener( 'select', onSessionEvent );
				session.addEventListener( 'selectstart', onSessionEvent );
				session.addEventListener( 'selectend', onSessionEvent );
				session.addEventListener( 'squeeze', onSessionEvent );
				session.addEventListener( 'squeezestart', onSessionEvent );
				session.addEventListener( 'squeezeend', onSessionEvent );
				session.addEventListener( 'end', onSessionEnd );

				// eslint-disable-next-line no-undef
				session.updateRenderState( { baseLayer: new XRWebGLLayer( session, gl ) } );

				session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );

				//

				session.addEventListener( 'inputsourceschange', updateInputSources );

				updateInputSources();

			}

		};

		function updateInputSources() {

			for ( var i = 0; i < controllers.length; i ++ ) {

				sortedInputSources[ i ] = findInputSource( i );

			}

		}

		function findInputSource( id ) {

			var inputSources = session.inputSources;

			for ( var i = 0; i < inputSources.length; i ++ ) {

				var inputSource = inputSources[ i ];
				var handedness = inputSource.handedness;

				if ( id === 0 && ( handedness === 'none' || handedness === 'right' ) ) { return inputSource; }
				if ( id === 1 && ( handedness === 'left' ) ) { return inputSource; }

			}

		}

		//

		function updateCamera( camera, parent ) {

			if ( parent === null ) {

				camera.matrixWorld.copy( camera.matrix );

			} else {

				camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

			}

			camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		}

		this.getCamera = function ( camera ) {

			var parent = camera.parent;
			var cameras = cameraVR.cameras;

			updateCamera( cameraVR, parent );

			for ( var i = 0; i < cameras.length; i ++ ) {

				updateCamera( cameras[ i ], parent );

			}

			// update camera and its children

			camera.matrixWorld.copy( cameraVR.matrixWorld );

			var children = camera.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateMatrixWorld( true );

			}

			setProjectionFromUnion( cameraVR, cameraL, cameraR );

			return cameraVR;

		};

		this.isPresenting = isPresenting;

		// Animation Loop

		var onAnimationFrameCallback = null;

		function onAnimationFrame( time, frame ) {

			pose = frame.getViewerPose( referenceSpace );

			if ( pose !== null ) {

				var views = pose.views;
				var baseLayer = session.renderState.baseLayer;

				renderer.setFramebuffer( baseLayer.framebuffer );

				for ( var i = 0; i < views.length; i ++ ) {

					var view = views[ i ];
					var viewport = baseLayer.getViewport( view );
					var viewMatrix = view.transform.inverse.matrix;

					var camera = cameraVR.cameras[ i ];
					camera.matrix.fromArray( viewMatrix ).getInverse( camera.matrix );
					camera.projectionMatrix.fromArray( view.projectionMatrix );
					camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

					if ( i === 0 ) {

						cameraVR.matrix.copy( camera.matrix );

					}

				}

			}

			//

			for ( var i = 0; i < controllers.length; i ++ ) {

				var controller = controllers[ i ];

				var inputSource = sortedInputSources[ i ];

				if ( inputSource ) {

					var inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

					if ( inputPose !== null ) {

						controller.matrix.fromArray( inputPose.transform.matrix );
						controller.matrix.decompose( controller.position, controller.rotation, controller.scale );
						controller.visible = true;

						continue;

					}

				}

				controller.visible = false;

			}

			if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }

		}

		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;

		};

		this.dispose = function () {};

		// DEPRECATED

		this.getStandingMatrix = function () {

			console.warn( 'THREE.WebXRManager: getStandingMatrix() is no longer needed.' );
			return new Matrix4();

		};

		this.getDevice = function () {

			console.warn( 'THREE.WebXRManager: getDevice() has been deprecated.' );

		};

		this.setDevice = function () {

			console.warn( 'THREE.WebXRManager: setDevice() has been deprecated.' );

		};

		this.setFrameOfReferenceType = function () {

			console.warn( 'THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.' );

		};

		this.submitFrame = function () {};

	}

	Object.assign( WebXRManager.prototype, EventDispatcher.prototype );

	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 * @author tschw
	 */

	function WebGLRenderer( parameters ) {

		parameters = parameters || {};

		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
			_context = parameters.context !== undefined ? parameters.context : null,

			_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
			_depth = parameters.depth !== undefined ? parameters.depth : true,
			_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
			_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
			_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
			_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
			_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
			_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;

		var currentRenderList = null;
		var currentRenderState = null;

		// public properties

		this.domElement = _canvas;

		// Debug configuration container
		this.debug = {

			/**
			 * Enables error checking and reporting when shader programs are being compiled
			 * @type {boolean}
			 */
			checkShaderErrors: true
		};

		// clearing

		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;

		// scene graph

		this.sortObjects = true;

		// user-defined clipping

		this.clippingPlanes = [];
		this.localClippingEnabled = false;

		// physically based shading

		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;

		// physical lights

		this.physicallyCorrectLights = false;

		// tone mapping

		this.toneMapping = LinearToneMapping;
		this.toneMappingExposure = 1.0;
		this.toneMappingWhitePoint = 1.0;

		// morphs

		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;

		// internal properties

		var _this = this,

			_isContextLost = false,

			// internal state cache

			_framebuffer = null,

			_currentActiveCubeFace = 0,
			_currentActiveMipmapLevel = 0,
			_currentRenderTarget = null,
			_currentFramebuffer = null,
			_currentMaterialId = - 1,

			// geometry and program caching

			_currentGeometryProgram = {
				geometry: null,
				program: null,
				wireframe: false
			},

			_currentCamera = null,
			_currentArrayCamera = null,

			_currentViewport = new Vector4(),
			_currentScissor = new Vector4(),
			_currentScissorTest = null,

			//

			_width = _canvas.width,
			_height = _canvas.height,

			_pixelRatio = 1,

			_viewport = new Vector4( 0, 0, _width, _height ),
			_scissor = new Vector4( 0, 0, _width, _height ),
			_scissorTest = false,

			// frustum

			_frustum = new Frustum(),

			// clipping

			_clipping = new WebGLClipping(),
			_clippingEnabled = false,
			_localClippingEnabled = false,

			// camera matrices cache

			_projScreenMatrix = new Matrix4(),

			_vector3 = new Vector3();

		function getTargetPixelRatio() {

			return _currentRenderTarget === null ? _pixelRatio : 1;

		}

		// initialize

		var _gl;

		try {

			var contextAttributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer,
				powerPreference: _powerPreference,
				failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,
				xrCompatible: true
			};

			// event listeners must be registered before WebGL context is created, see #12753

			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );

			_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );

			if ( _gl === null ) {

				if ( _canvas.getContext( 'webgl' ) !== null ) {

					throw new Error( 'Error creating WebGL context with your selected attributes.' );

				} else {

					throw new Error( 'Error creating WebGL context.' );

				}

			}

			// Some experimental-webgl implementations do not have getShaderPrecisionFormat

			if ( _gl.getShaderPrecisionFormat === undefined ) {

				_gl.getShaderPrecisionFormat = function () {

					return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

				};

			}

		} catch ( error ) {

			console.error( 'THREE.WebGLRenderer: ' + error.message );
			throw error;

		}

		var extensions, capabilities, state, info;
		var properties, textures, attributes, geometries, objects;
		var programCache, renderLists, renderStates;

		var background, morphtargets, bufferRenderer, indexedBufferRenderer;

		var utils;

		function initGLContext() {

			extensions = new WebGLExtensions( _gl );

			capabilities = new WebGLCapabilities( _gl, extensions, parameters );

			if ( capabilities.isWebGL2 === false ) {

				extensions.get( 'WEBGL_depth_texture' );
				extensions.get( 'OES_texture_float' );
				extensions.get( 'OES_texture_half_float' );
				extensions.get( 'OES_texture_half_float_linear' );
				extensions.get( 'OES_standard_derivatives' );
				extensions.get( 'OES_element_index_uint' );
				extensions.get( 'ANGLE_instanced_arrays' );

			}

			extensions.get( 'OES_texture_float_linear' );

			utils = new WebGLUtils( _gl, extensions, capabilities );

			state = new WebGLState( _gl, extensions, capabilities );
			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

			info = new WebGLInfo( _gl );
			properties = new WebGLProperties();
			textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
			attributes = new WebGLAttributes( _gl );
			geometries = new WebGLGeometries( _gl, attributes, info );
			objects = new WebGLObjects( _gl, geometries, attributes, info );
			morphtargets = new WebGLMorphtargets( _gl );
			programCache = new WebGLPrograms( _this, extensions, capabilities );
			renderLists = new WebGLRenderLists();
			renderStates = new WebGLRenderStates();

			background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );

			bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
			indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

			info.programs = programCache.programs;

			_this.capabilities = capabilities;
			_this.extensions = extensions;
			_this.properties = properties;
			_this.renderLists = renderLists;
			_this.state = state;
			_this.info = info;

		}

		initGLContext();

		// vr

		var vr = ( typeof navigator !== 'undefined' && 'xr' in navigator ) ? new WebXRManager( _this, _gl ) : new WebVRManager( _this );

		this.vr = vr;

		// Multiview

		var multiview = new WebGLMultiview( _this, _gl );

		// shadow map

		var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );

		this.shadowMap = shadowMap;

		// API

		this.getContext = function () {

			return _gl;

		};

		this.getContextAttributes = function () {

			return _gl.getContextAttributes();

		};

		this.forceContextLoss = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) { extension.loseContext(); }

		};

		this.forceContextRestore = function () {

			var extension = extensions.get( 'WEBGL_lose_context' );
			if ( extension ) { extension.restoreContext(); }

		};

		this.getPixelRatio = function () {

			return _pixelRatio;

		};

		this.setPixelRatio = function ( value ) {

			if ( value === undefined ) { return; }

			_pixelRatio = value;

			this.setSize( _width, _height, false );

		};

		this.getSize = function ( target ) {

			if ( target === undefined ) {

				console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );

				target = new Vector2();

			}

			return target.set( _width, _height );

		};

		this.setSize = function ( width, height, updateStyle ) {

			if ( vr.isPresenting() ) {

				console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
				return;

			}

			_width = width;
			_height = height;

			_canvas.width = Math.floor( width * _pixelRatio );
			_canvas.height = Math.floor( height * _pixelRatio );

			if ( updateStyle !== false ) {

				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';

			}

			this.setViewport( 0, 0, width, height );

		};

		this.getDrawingBufferSize = function ( target ) {

			if ( target === undefined ) {

				console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );

				target = new Vector2();

			}

			return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

		};

		this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

			_width = width;
			_height = height;

			_pixelRatio = pixelRatio;

			_canvas.width = Math.floor( width * pixelRatio );
			_canvas.height = Math.floor( height * pixelRatio );

			this.setViewport( 0, 0, width, height );

		};

		this.getCurrentViewport = function ( target ) {

			if ( target === undefined ) {

				console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );

				target = new Vector4();

			}

			return target.copy( _currentViewport );

		};

		this.getViewport = function ( target ) {

			return target.copy( _viewport );

		};

		this.setViewport = function ( x, y, width, height ) {

			if ( x.isVector4 ) {

				_viewport.set( x.x, x.y, x.z, x.w );

			} else {

				_viewport.set( x, y, width, height );

			}

			state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

		};

		this.getScissor = function ( target ) {

			return target.copy( _scissor );

		};

		this.setScissor = function ( x, y, width, height ) {

			if ( x.isVector4 ) {

				_scissor.set( x.x, x.y, x.z, x.w );

			} else {

				_scissor.set( x, y, width, height );

			}

			state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

		};

		this.getScissorTest = function () {

			return _scissorTest;

		};

		this.setScissorTest = function ( boolean ) {

			state.setScissorTest( _scissorTest = boolean );

		};

		// Clearing

		this.getClearColor = function () {

			return background.getClearColor();

		};

		this.setClearColor = function () {

			background.setClearColor.apply( background, arguments );

		};

		this.getClearAlpha = function () {

			return background.getClearAlpha();

		};

		this.setClearAlpha = function () {

			background.setClearAlpha.apply( background, arguments );

		};

		this.clear = function ( color, depth, stencil ) {

			var bits = 0;

			if ( color === undefined || color ) { bits |= 16384; }
			if ( depth === undefined || depth ) { bits |= 256; }
			if ( stencil === undefined || stencil ) { bits |= 1024; }

			_gl.clear( bits );

		};

		this.clearColor = function () {

			this.clear( true, false, false );

		};

		this.clearDepth = function () {

			this.clear( false, true, false );

		};

		this.clearStencil = function () {

			this.clear( false, false, true );

		};

		//

		this.dispose = function () {

			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
			_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );

			renderLists.dispose();
			renderStates.dispose();
			properties.dispose();
			objects.dispose();

			vr.dispose();

			animation.stop();

		};

		// Events

		function onContextLost( event ) {

			event.preventDefault();

			console.log( 'THREE.WebGLRenderer: Context Lost.' );

			_isContextLost = true;

		}

		function onContextRestore( /* event */ ) {

			console.log( 'THREE.WebGLRenderer: Context Restored.' );

			_isContextLost = false;

			initGLContext();

		}

		function onMaterialDispose( event ) {

			var material = event.target;

			material.removeEventListener( 'dispose', onMaterialDispose );

			deallocateMaterial( material );

		}

		// Buffer deallocation

		function deallocateMaterial( material ) {

			releaseMaterialProgramReference( material );

			properties.remove( material );

		}


		function releaseMaterialProgramReference( material ) {

			var programInfo = properties.get( material ).program;

			material.program = undefined;

			if ( programInfo !== undefined ) {

				programCache.releaseProgram( programInfo );

			}

		}

		// Buffer rendering

		function renderObjectImmediate( object, program ) {

			object.render( function ( object ) {

				_this.renderBufferImmediate( object, program );

			} );

		}

		this.renderBufferImmediate = function ( object, program ) {

			state.initAttributes();

			var buffers = properties.get( object );

			if ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }
			if ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }
			if ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }
			if ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }

			var programAttributes = program.getAttributes();

			if ( object.hasPositions ) {

				_gl.bindBuffer( 34962, buffers.position );
				_gl.bufferData( 34962, object.positionArray, 35048 );

				state.enableAttribute( programAttributes.position );
				_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );

			}

			if ( object.hasNormals ) {

				_gl.bindBuffer( 34962, buffers.normal );
				_gl.bufferData( 34962, object.normalArray, 35048 );

				state.enableAttribute( programAttributes.normal );
				_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );

			}

			if ( object.hasUvs ) {

				_gl.bindBuffer( 34962, buffers.uv );
				_gl.bufferData( 34962, object.uvArray, 35048 );

				state.enableAttribute( programAttributes.uv );
				_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );

			}

			if ( object.hasColors ) {

				_gl.bindBuffer( 34962, buffers.color );
				_gl.bufferData( 34962, object.colorArray, 35048 );

				state.enableAttribute( programAttributes.color );
				_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );

			}

			state.disableUnusedAttributes();

			_gl.drawArrays( 4, 0, object.count );

			object.count = 0;

		};

		this.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {

			var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

			state.setMaterial( material, frontFaceCW );

			var program = setProgram( camera, fog, material, object );

			var updateBuffers = false;

			if ( _currentGeometryProgram.geometry !== geometry.id ||
				_currentGeometryProgram.program !== program.id ||
				_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {

				_currentGeometryProgram.geometry = geometry.id;
				_currentGeometryProgram.program = program.id;
				_currentGeometryProgram.wireframe = material.wireframe === true;
				updateBuffers = true;

			}

			if ( object.morphTargetInfluences ) {

				morphtargets.update( object, geometry, material, program );

				updateBuffers = true;

			}

			//

			var index = geometry.index;
			var position = geometry.attributes.position;

			//

			if ( index !== null && index.count === 0 ) { return; }
			if ( position === undefined || position.count === 0 ) { return; }

			//

			var rangeFactor = 1;

			if ( material.wireframe === true ) {

				index = geometries.getWireframeAttribute( geometry );
				rangeFactor = 2;

			}

			var attribute;
			var renderer = bufferRenderer;

			if ( index !== null ) {

				attribute = attributes.get( index );

				renderer = indexedBufferRenderer;
				renderer.setIndex( attribute );

			}

			if ( updateBuffers ) {

				setupVertexAttributes( object, geometry, material, program );

				if ( index !== null ) {

					_gl.bindBuffer( 34963, attribute.buffer );

				}

			}

			//

			var dataCount = Infinity;

			if ( index !== null ) {

				dataCount = index.count;

			} else if ( position !== undefined ) {

				dataCount = position.count;

			}

			var rangeStart = geometry.drawRange.start * rangeFactor;
			var rangeCount = geometry.drawRange.count * rangeFactor;

			var groupStart = group !== null ? group.start * rangeFactor : 0;
			var groupCount = group !== null ? group.count * rangeFactor : Infinity;

			var drawStart = Math.max( rangeStart, groupStart );
			var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;

			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );

			if ( drawCount === 0 ) { return; }

			//

			if ( object.isMesh ) {

				if ( material.wireframe === true ) {

					state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
					renderer.setMode( 1 );

				} else {

					switch ( object.drawMode ) {

						case TrianglesDrawMode:
							renderer.setMode( 4 );
							break;

						case TriangleStripDrawMode:
							renderer.setMode( 5 );
							break;

						case TriangleFanDrawMode:
							renderer.setMode( 6 );
							break;

					}

				}

			} else if ( object.isLine ) {

				var lineWidth = material.linewidth;

				if ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material

				state.setLineWidth( lineWidth * getTargetPixelRatio() );

				if ( object.isLineSegments ) {

					renderer.setMode( 1 );

				} else if ( object.isLineLoop ) {

					renderer.setMode( 2 );

				} else {

					renderer.setMode( 3 );

				}

			} else if ( object.isPoints ) {

				renderer.setMode( 0 );

			} else if ( object.isSprite ) {

				renderer.setMode( 4 );

			}

			if ( object.isInstancedMesh ) {

				renderer.renderInstances( geometry, drawStart, drawCount, object.count );

			} else if ( geometry.isInstancedBufferGeometry ) {

				renderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );

			} else {

				renderer.render( drawStart, drawCount );

			}

		};

		function setupVertexAttributes( object, geometry, material, program ) {

			if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }

			}

			state.initAttributes();

			var geometryAttributes = geometry.attributes;

			var programAttributes = program.getAttributes();

			var materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( var name in programAttributes ) {

				var programAttribute = programAttributes[ name ];

				if ( programAttribute >= 0 ) {

					var geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute !== undefined ) {

						var normalized = geometryAttribute.normalized;
						var size = geometryAttribute.itemSize;

						var attribute = attributes.get( geometryAttribute );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) { continue; }

						var buffer = attribute.buffer;
						var type = attribute.type;
						var bytesPerElement = attribute.bytesPerElement;

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;

							if ( data && data.isInstancedInterleavedBuffer ) {

								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = data.meshPerAttribute * data.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( 34962, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );

								if ( geometry.maxInstancedCount === undefined ) {

									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								state.enableAttribute( programAttribute );

							}

							_gl.bindBuffer( 34962, buffer );
							_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );

						}

					} else if ( name === 'instanceMatrix' ) {

						var attribute = attributes.get( object.instanceMatrix );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) { continue; }

						var buffer = attribute.buffer;
						var type = attribute.type;

						state.enableAttributeAndDivisor( programAttribute + 0, 1 );
						state.enableAttributeAndDivisor( programAttribute + 1, 1 );
						state.enableAttributeAndDivisor( programAttribute + 2, 1 );
						state.enableAttributeAndDivisor( programAttribute + 3, 1 );

						_gl.bindBuffer( 34962, buffer );

						_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );
						_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );
						_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );
						_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );

					} else if ( materialDefaultAttributeValues !== undefined ) {

						var value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;

								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;

								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;

								default:
									_gl.vertexAttrib1fv( programAttribute, value );

							}

						}

					}

				}

			}

			state.disableUnusedAttributes();

		}

		// Compile

		this.compile = function ( scene, camera ) {

			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();

			scene.traverse( function ( object ) {

				if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				}

			} );

			currentRenderState.setupLights( camera );

			scene.traverse( function ( object ) {

				if ( object.material ) {

					if ( Array.isArray( object.material ) ) {

						for ( var i = 0; i < object.material.length; i ++ ) {

							initMaterial( object.material[ i ], scene.fog, object );

						}

					} else {

						initMaterial( object.material, scene.fog, object );

					}

				}

			} );

		};

		// Animation Loop

		var onAnimationFrameCallback = null;

		function onAnimationFrame( time ) {

			if ( vr.isPresenting() ) { return; }
			if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }

		}

		var animation = new WebGLAnimation();
		animation.setAnimationLoop( onAnimationFrame );

		if ( typeof window !== 'undefined' ) { animation.setContext( window ); }

		this.setAnimationLoop = function ( callback ) {

			onAnimationFrameCallback = callback;
			vr.setAnimationLoop( callback );

			animation.start();

		};

		// Rendering

		this.render = function ( scene, camera ) {

			var renderTarget, forceClear;

			if ( arguments[ 2 ] !== undefined ) {

				console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
				renderTarget = arguments[ 2 ];

			}

			if ( arguments[ 3 ] !== undefined ) {

				console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
				forceClear = arguments[ 3 ];

			}

			if ( ! ( camera && camera.isCamera ) ) {

				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;

			}

			if ( _isContextLost ) { return; }

			// reset caching for this frame

			_currentGeometryProgram.geometry = null;
			_currentGeometryProgram.program = null;
			_currentGeometryProgram.wireframe = false;
			_currentMaterialId = - 1;
			_currentCamera = null;

			// update scene graph

			if ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }

			// update camera matrices and frustum

			if ( camera.parent === null ) { camera.updateMatrixWorld(); }

			if ( vr.enabled && vr.isPresenting() ) {

				camera = vr.getCamera( camera );

			}

			//

			currentRenderState = renderStates.get( scene, camera );
			currentRenderState.init();

			scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );

			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			_localClippingEnabled = this.localClippingEnabled;
			_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );

			currentRenderList = renderLists.get( scene, camera );
			currentRenderList.init();

			projectObject( scene, camera, 0, _this.sortObjects );

			if ( _this.sortObjects === true ) {

				currentRenderList.sort();

			}

			//

			if ( _clippingEnabled ) { _clipping.beginShadows(); }

			var shadowsArray = currentRenderState.state.shadowsArray;

			shadowMap.render( shadowsArray, scene, camera );

			currentRenderState.setupLights( camera );

			if ( _clippingEnabled ) { _clipping.endShadows(); }

			//

			if ( this.info.autoReset ) { this.info.reset(); }

			if ( renderTarget !== undefined ) {

				this.setRenderTarget( renderTarget );

			}

			if ( vr.enabled && multiview.isAvailable() ) {

				multiview.attachCamera( camera );

			}

			//

			background.render( currentRenderList, scene, camera, forceClear );

			// render scene

			var opaqueObjects = currentRenderList.opaque;
			var transparentObjects = currentRenderList.transparent;

			if ( scene.overrideMaterial ) {

				var overrideMaterial = scene.overrideMaterial;

				if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }
				if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }

			} else {

				// opaque pass (front-to-back order)

				if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }

				// transparent pass (back-to-front order)

				if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }

			}

			//

			scene.onAfterRender( _this, scene, camera );

			//

			if ( _currentRenderTarget !== null ) {

				// Generate mipmap if we're using any kind of mipmap filtering

				textures.updateRenderTargetMipmap( _currentRenderTarget );

				// resolve multisample renderbuffers to a single-sample texture if necessary

				textures.updateMultisampleRenderTarget( _currentRenderTarget );

			}

			// Ensure depth buffer writing is enabled so it can be cleared on next render

			state.buffers.depth.setTest( true );
			state.buffers.depth.setMask( true );
			state.buffers.color.setMask( true );

			state.setPolygonOffset( false );

			if ( vr.enabled ) {

				if ( multiview.isAvailable() ) {

					multiview.detachCamera( camera );

				}

				vr.submitFrame();

			}

			// _gl.finish();

			currentRenderList = null;
			currentRenderState = null;

		};

		function projectObject( object, camera, groupOrder, sortObjects ) {

			if ( object.visible === false ) { return; }

			var visible = object.layers.test( camera.layers );

			if ( visible ) {

				if ( object.isGroup ) {

					groupOrder = object.renderOrder;

				} else if ( object.isLOD ) {

					if ( object.autoUpdate === true ) { object.update( camera ); }

				} else if ( object.isLight ) {

					currentRenderState.pushLight( object );

					if ( object.castShadow ) {

						currentRenderState.pushShadow( object );

					}

				} else if ( object.isSprite ) {

					if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						if ( material.visible ) {

							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

						}

					}

				} else if ( object.isImmediateRenderObject ) {

					if ( sortObjects ) {

						_vector3.setFromMatrixPosition( object.matrixWorld )
							.applyMatrix4( _projScreenMatrix );

					}

					currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );

				} else if ( object.isMesh || object.isLine || object.isPoints ) {

					if ( object.isSkinnedMesh ) {

						// update skeleton only once in a frame

						if ( object.skeleton.frame !== info.render.frame ) {

							object.skeleton.update();
							object.skeleton.frame = info.render.frame;

						}

					}

					if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

						if ( sortObjects ) {

							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );

						}

						var geometry = objects.update( object );
						var material = object.material;

						if ( Array.isArray( material ) ) {

							var groups = geometry.groups;

							for ( var i = 0, l = groups.length; i < l; i ++ ) {

								var group = groups[ i ];
								var groupMaterial = material[ group.materialIndex ];

								if ( groupMaterial && groupMaterial.visible ) {

									currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

								}

							}

						} else if ( material.visible ) {

							currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

						}

					}

				}

			}

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				projectObject( children[ i ], camera, groupOrder, sortObjects );

			}

		}

		function renderObjects( renderList, scene, camera, overrideMaterial ) {

			for ( var i = 0, l = renderList.length; i < l; i ++ ) {

				var renderItem = renderList[ i ];

				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;

				if ( camera.isArrayCamera ) {

					_currentArrayCamera = camera;

					if ( vr.enabled && multiview.isAvailable() ) {

						renderObject( object, scene, camera, geometry, material, group );

					} else {

						var cameras = camera.cameras;

						for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {

							var camera2 = cameras[ j ];

							if ( object.layers.test( camera2.layers ) ) {

								state.viewport( _currentViewport.copy( camera2.viewport ) );

								currentRenderState.setupLights( camera2 );

								renderObject( object, scene, camera2, geometry, material, group );

							}

						}

					}

				} else {

					_currentArrayCamera = null;

					renderObject( object, scene, camera, geometry, material, group );

				}

			}

		}

		function renderObject( object, scene, camera, geometry, material, group ) {

			object.onBeforeRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

			object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
			object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

			if ( object.isImmediateRenderObject ) {

				state.setMaterial( material );

				var program = setProgram( camera, scene.fog, material, object );

				_currentGeometryProgram.geometry = null;
				_currentGeometryProgram.program = null;
				_currentGeometryProgram.wireframe = false;

				renderObjectImmediate( object, program );

			} else {

				_this.renderBufferDirect( camera, scene.fog, geometry, material, object, group );

			}

			object.onAfterRender( _this, scene, camera, geometry, material, group );
			currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );

		}

		function initMaterial( material, fog, object ) {

			var materialProperties = properties.get( material );

			var lights = currentRenderState.state.lights;
			var shadowsArray = currentRenderState.state.shadowsArray;

			var lightsStateVersion = lights.state.version;

			var parameters = programCache.getParameters(
				material, lights.state, shadowsArray, fog, _clipping.numPlanes, _clipping.numIntersection, object );

			var programCacheKey = programCache.getProgramCacheKey( material, parameters );

			var program = materialProperties.program;
			var programChange = true;

			if ( program === undefined ) {

				// new material
				material.addEventListener( 'dispose', onMaterialDispose );

			} else if ( program.cacheKey !== programCacheKey ) {

				// changed glsl or parameters
				releaseMaterialProgramReference( material );

			} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {

				materialProperties.lightsStateVersion = lightsStateVersion;

				programChange = false;

			} else if ( parameters.shaderID !== undefined ) {

				// same glsl and uniform list
				return;

			} else {

				// only rebuild uniform list
				programChange = false;

			}

			if ( programChange ) {

				if ( parameters.shaderID ) {

					var shader = ShaderLib[ parameters.shaderID ];

					materialProperties.shader = {
						name: material.type,
						uniforms: cloneUniforms( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};

				} else {

					materialProperties.shader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};

				}

				material.onBeforeCompile( materialProperties.shader, _this );

				// Computing cache key again as onBeforeCompile may have changed the shaders
				programCacheKey = programCache.getProgramCacheKey( material, parameters );

				program = programCache.acquireProgram( material, materialProperties.shader, parameters, programCacheKey );

				materialProperties.program = program;
				material.program = program;

			}

			var programAttributes = program.getAttributes();

			if ( material.morphTargets ) {

				material.numSupportedMorphTargets = 0;

				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

					if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {

						material.numSupportedMorphTargets ++;

					}

				}

			}

			if ( material.morphNormals ) {

				material.numSupportedMorphNormals = 0;

				for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {

					if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {

						material.numSupportedMorphNormals ++;

					}

				}

			}

			var uniforms = materialProperties.shader.uniforms;

			if ( ! material.isShaderMaterial &&
				! material.isRawShaderMaterial ||
				material.clipping === true ) {

				materialProperties.numClippingPlanes = _clipping.numPlanes;
				materialProperties.numIntersection = _clipping.numIntersection;
				uniforms.clippingPlanes = _clipping.uniform;

			}

			materialProperties.fog = fog;

			// store the light setup it was created for

			materialProperties.needsLights = materialNeedsLights( material );
			materialProperties.lightsStateVersion = lightsStateVersion;

			if ( materialProperties.needsLights ) {

				// wire up the material to this renderer's lighting state

				uniforms.ambientLightColor.value = lights.state.ambient;
				uniforms.lightProbe.value = lights.state.probe;
				uniforms.directionalLights.value = lights.state.directional;
				uniforms.spotLights.value = lights.state.spot;
				uniforms.rectAreaLights.value = lights.state.rectArea;
				uniforms.pointLights.value = lights.state.point;
				uniforms.hemisphereLights.value = lights.state.hemi;

				uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
				uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
				uniforms.spotShadowMap.value = lights.state.spotShadowMap;
				uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
				uniforms.pointShadowMap.value = lights.state.pointShadowMap;
				uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
				// TODO (abelnation): add area lights shadow info to uniforms

			}

			var progUniforms = materialProperties.program.getUniforms(),
				uniformsList =
					WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

			materialProperties.uniformsList = uniformsList;

		}

		function setProgram( camera, fog, material, object ) {

			textures.resetTextureUnits();

			var materialProperties = properties.get( material );
			var lights = currentRenderState.state.lights;

			if ( _clippingEnabled ) {

				if ( _localClippingEnabled || camera !== _currentCamera ) {

					var useCache =
						camera === _currentCamera &&
						material.id === _currentMaterialId;

					// we might want to call this function with some ClippingGroup
					// object instead of the material, once it becomes feasible
					// (#8465, #8379)
					_clipping.setState(
						material.clippingPlanes, material.clipIntersection, material.clipShadows,
						camera, materialProperties, useCache );

				}

			}

			if ( material.version === materialProperties.__version ) {

				if ( materialProperties.program === undefined ) {

					material.needsUpdate = true;

				} else if ( material.fog && materialProperties.fog !== fog ) {

					material.needsUpdate = true;

				} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

					material.needsUpdate = true;

				} else if ( materialProperties.numClippingPlanes !== undefined &&
					( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
					materialProperties.numIntersection !== _clipping.numIntersection ) ) {

					material.needsUpdate = true;

				}

			}

			if ( material.version !== materialProperties.__version ) {

				initMaterial( material, fog, object );
				materialProperties.__version = material.version;

			}

			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;

			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.shader.uniforms;

			if ( state.useProgram( program.program ) ) {

				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;

			}

			if ( material.id !== _currentMaterialId ) {

				_currentMaterialId = material.id;

				refreshMaterial = true;

			}

			if ( refreshProgram || _currentCamera !== camera ) {

				if ( program.numMultiviewViews > 0 ) {

					multiview.updateCameraProjectionMatricesUniform( camera, p_uniforms );

				} else {

					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );

				}

				if ( capabilities.logarithmicDepthBuffer ) {

					p_uniforms.setValue( _gl, 'logDepthBufFC',
						2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

				}

				if ( _currentCamera !== camera ) {

					_currentCamera = camera;

					// lighting uniforms depend on the camera so enforce an update
					// now, in case this material supports lights - or later, when
					// the next material that does gets activated:

					refreshMaterial = true;		// set to true on material change
					refreshLights = true;		// remains set until update done

				}

				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)

				if ( material.isShaderMaterial ||
					material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial ||
					material.envMap ) {

					var uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl,
							_vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

				}

				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ) {

					p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

				}

				if ( material.isMeshPhongMaterial ||
					material.isMeshLambertMaterial ||
					material.isMeshBasicMaterial ||
					material.isMeshStandardMaterial ||
					material.isShaderMaterial ||
					material.skinning ) {

					if ( program.numMultiviewViews > 0 ) {

						multiview.updateCameraViewMatricesUniform( camera, p_uniforms );

					} else {

						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

					}

				}

			}

			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen

			if ( material.skinning ) {

				p_uniforms.setOptional( _gl, object, 'bindMatrix' );
				p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

				var skeleton = object.skeleton;

				if ( skeleton ) {

					var bones = skeleton.bones;

					if ( capabilities.floatVertexTextures ) {

						if ( skeleton.boneTexture === undefined ) {

							// layout (1 matrix = 4 pixels)
							//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
							//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
							//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
							//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
							//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)


							var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
							size = _Math.ceilPowerOfTwo( size );
							size = Math.max( size, 4 );

							var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
							boneMatrices.set( skeleton.boneMatrices ); // copy current values

							var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );

							skeleton.boneMatrices = boneMatrices;
							skeleton.boneTexture = boneTexture;
							skeleton.boneTextureSize = size;

						}

						p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
						p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

					} else {

						p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );

					}

				}

			}

			if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

				materialProperties.receiveShadow = object.receiveShadow;
				p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

			}

			if ( refreshMaterial ) {

				p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
				p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );

				if ( materialProperties.needsLights ) {

					// the current material requires lighting info

					// note: all lighting uniforms are always set correctly
					// they simply reference the renderer's state for their
					// values
					//
					// use the current material's .needsUpdate flags to set
					// the GL state when required

					markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

				}

				// refresh uniforms common to several materials

				if ( fog && material.fog ) {

					refreshUniformsFog( m_uniforms, fog );

				}

				if ( material.isMeshBasicMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

				} else if ( material.isMeshLambertMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsLambert( m_uniforms, material );

				} else if ( material.isMeshPhongMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshToonMaterial ) {

						refreshUniformsToon( m_uniforms, material );

					} else {

						refreshUniformsPhong( m_uniforms, material );

					}

				} else if ( material.isMeshStandardMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					if ( material.isMeshPhysicalMaterial ) {

						refreshUniformsPhysical( m_uniforms, material );

					} else {

						refreshUniformsStandard( m_uniforms, material );

					}

				} else if ( material.isMeshMatcapMaterial ) {

					refreshUniformsCommon( m_uniforms, material );

					refreshUniformsMatcap( m_uniforms, material );

				} else if ( material.isMeshDepthMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDepth( m_uniforms, material );

				} else if ( material.isMeshDistanceMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsDistance( m_uniforms, material );

				} else if ( material.isMeshNormalMaterial ) {

					refreshUniformsCommon( m_uniforms, material );
					refreshUniformsNormal( m_uniforms, material );

				} else if ( material.isLineBasicMaterial ) {

					refreshUniformsLine( m_uniforms, material );

					if ( material.isLineDashedMaterial ) {

						refreshUniformsDash( m_uniforms, material );

					}

				} else if ( material.isPointsMaterial ) {

					refreshUniformsPoints( m_uniforms, material );

				} else if ( material.isSpriteMaterial ) {

					refreshUniformsSprites( m_uniforms, material );

				} else if ( material.isShadowMaterial ) {

					m_uniforms.color.value.copy( material.color );
					m_uniforms.opacity.value = material.opacity;

				}

				// RectAreaLight Texture
				// TODO (mrdoob): Find a nicer implementation

				if ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }
				if ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

				if ( material.isShaderMaterial ) {

					material.uniformsNeedUpdate = false; // #15581

				}

			}

			if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

				WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
				material.uniformsNeedUpdate = false;

			}

			if ( material.isSpriteMaterial ) {

				p_uniforms.setValue( _gl, 'center', object.center );

			}

			// common matrices

			if ( program.numMultiviewViews > 0 ) {

				multiview.updateObjectMatricesUniforms( object, camera, p_uniforms );

			} else {

				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );

			}

			p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

			return program;

		}

		// Uniforms (refresh uniforms objects)

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			if ( material.color ) {

				uniforms.diffuse.value.copy( material.color );

			}

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			if ( material.specularMap ) {

				uniforms.specularMap.value = material.specularMap;

			}

			if ( material.envMap ) {

				uniforms.envMap.value = material.envMap;

				// don't flip CubeTexture envMaps, flip everything else:
				//  WebGLRenderTargetCube will be flipped for backwards compatibility
				//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture
				// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future
				uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.refractionRatio.value = material.refractionRatio;

				uniforms.maxMipLevel.value = properties.get( material.envMap ).__maxMipLevel;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;

			}

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.specularMap ) {

				uvScaleMap = material.specularMap;

			} else if ( material.displacementMap ) {

				uvScaleMap = material.displacementMap;

			} else if ( material.normalMap ) {

				uvScaleMap = material.normalMap;

			} else if ( material.bumpMap ) {

				uvScaleMap = material.bumpMap;

			} else if ( material.roughnessMap ) {

				uvScaleMap = material.roughnessMap;

			} else if ( material.metalnessMap ) {

				uvScaleMap = material.metalnessMap;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			} else if ( material.emissiveMap ) {

				uvScaleMap = material.emissiveMap;

			}

			if ( uvScaleMap !== undefined ) {

				// backwards compatibility
				if ( uvScaleMap.isWebGLRenderTarget ) {

					uvScaleMap = uvScaleMap.texture;

				}

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * _pixelRatio;
			uniforms.scale.value = _height * 0.5;

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			}

			if ( uvScaleMap !== undefined ) {

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsSprites( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;

			if ( material.map ) {

				uniforms.map.value = material.map;

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

			}

			// uv repeat and offset setting priorities
			// 1. color map
			// 2. alpha map

			var uvScaleMap;

			if ( material.map ) {

				uvScaleMap = material.map;

			} else if ( material.alphaMap ) {

				uvScaleMap = material.alphaMap;

			}

			if ( uvScaleMap !== undefined ) {

				if ( uvScaleMap.matrixAutoUpdate === true ) {

					uvScaleMap.updateMatrix();

				}

				uniforms.uvTransform.value.copy( uvScaleMap.matrix );

			}

		}

		function refreshUniformsFog( uniforms, fog ) {

			uniforms.fogColor.value.copy( fog.color );

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshUniformsLambert( uniforms, material ) {

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value.copy( material.specular );
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsToon( uniforms, material ) {

			refreshUniformsPhong( uniforms, material );

			if ( material.gradientMap ) {

				uniforms.gradientMap.value = material.gradientMap;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.roughness.value = material.roughness;
			uniforms.metalness.value = material.metalness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

			}

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material ) {

			refreshUniformsStandard( uniforms, material );

			uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common

			uniforms.clearcoat.value = material.clearcoat;
			uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
			if ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }

			if ( material.clearcoatNormalMap ) {

				uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
				uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

				if ( material.side === BackSide ) {

					uniforms.clearcoatNormalScale.value.negate();

				}

			}

			uniforms.transparency.value = material.transparency;

		}

		function refreshUniformsMatcap( uniforms, material ) {

			if ( material.matcap ) {

				uniforms.matcap.value = material.matcap;

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsDepth( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		function refreshUniformsDistance( uniforms, material ) {

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			uniforms.referencePosition.value.copy( material.referencePosition );
			uniforms.nearDistance.value = material.nearDistance;
			uniforms.farDistance.value = material.farDistance;

		}

		function refreshUniformsNormal( uniforms, material ) {

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
				if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
				if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

		}

		// If uniforms are marked as clean, they don't need to be loaded to the GPU.

		function markUniformsLightsNeedsUpdate( uniforms, value ) {

			uniforms.ambientLightColor.needsUpdate = value;
			uniforms.lightProbe.needsUpdate = value;

			uniforms.directionalLights.needsUpdate = value;
			uniforms.pointLights.needsUpdate = value;
			uniforms.spotLights.needsUpdate = value;
			uniforms.rectAreaLights.needsUpdate = value;
			uniforms.hemisphereLights.needsUpdate = value;

		}

		function materialNeedsLights( material ) {

			return material.isMeshLambertMaterial || material.isMeshPhongMaterial ||
				material.isMeshStandardMaterial || material.isShadowMaterial ||
				( material.isShaderMaterial && material.lights === true );

		}

		//
		this.setFramebuffer = function ( value ) {

			if ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }

			_framebuffer = value;

		};

		this.getActiveCubeFace = function () {

			return _currentActiveCubeFace;

		};

		this.getActiveMipmapLevel = function () {

			return _currentActiveMipmapLevel;

		};

		this.getRenderTarget = function () {

			return _currentRenderTarget;

		};

		this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {

			_currentRenderTarget = renderTarget;
			_currentActiveCubeFace = activeCubeFace;
			_currentActiveMipmapLevel = activeMipmapLevel;

			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {

				textures.setupRenderTarget( renderTarget );

			}

			var framebuffer = _framebuffer;
			var isCube = false;

			if ( renderTarget ) {

				var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLRenderTargetCube ) {

					framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
					isCube = true;

				} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {

					framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

				} else {

					framebuffer = __webglFramebuffer;

				}

				_currentViewport.copy( renderTarget.viewport );
				_currentScissor.copy( renderTarget.scissor );
				_currentScissorTest = renderTarget.scissorTest;

			} else {

				_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
				_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
				_currentScissorTest = _scissorTest;

			}

			if ( _currentFramebuffer !== framebuffer ) {

				_gl.bindFramebuffer( 36160, framebuffer );
				_currentFramebuffer = framebuffer;

			}

			state.viewport( _currentViewport );
			state.scissor( _currentScissor );
			state.setScissorTest( _currentScissorTest );

			if ( isCube ) {

				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );

			}

		};

		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

			if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;

			}

			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;

			if ( renderTarget.isWebGLRenderTargetCube && activeCubeFaceIndex !== undefined ) {

				framebuffer = framebuffer[ activeCubeFaceIndex ];

			}

			if ( framebuffer ) {

				var restore = false;

				if ( framebuffer !== _currentFramebuffer ) {

					_gl.bindFramebuffer( 36160, framebuffer );

					restore = true;

				}

				try {

					var texture = renderTarget.texture;
					var textureFormat = texture.format;
					var textureType = texture.type;

					if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;

					}

					if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
						! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
						! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;

					}

					if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

						}

					} else {

						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );

					}

				} finally {

					if ( restore ) {

						_gl.bindFramebuffer( 36160, _currentFramebuffer );

					}

				}

			}

		};

		this.copyFramebufferToTexture = function ( position, texture, level ) {

			if ( level === undefined ) { level = 0; }

			var levelScale = Math.pow( 2, - level );
			var width = Math.floor( texture.image.width * levelScale );
			var height = Math.floor( texture.image.height * levelScale );
			var glFormat = utils.convert( texture.format );

			textures.setTexture2D( texture, 0 );

			_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );

			state.unbindTexture();

		};

		this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {

			var width = srcTexture.image.width;
			var height = srcTexture.image.height;
			var glFormat = utils.convert( dstTexture.format );
			var glType = utils.convert( dstTexture.type );

			textures.setTexture2D( dstTexture, 0 );

			if ( srcTexture.isDataTexture ) {

				_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

			} else {

				_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );

			}

			state.unbindTexture();

		};

		this.initTexture = function ( texture ) {

			textures.setTexture2D( texture, 0 );

			state.unbindTexture();

		};

		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function FogExp2( color, density ) {

		this.name = '';

		this.color = new Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;

	}

	Object.assign( FogExp2.prototype, {

		isFogExp2: true,

		clone: function () {

			return new FogExp2( this.color, this.density );

		},

		toJSON: function ( /* meta */ ) {

			return {
				type: 'FogExp2',
				color: this.color.getHex(),
				density: this.density
			};

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Fog( color, near, far ) {

		this.name = '';

		this.color = new Color( color );

		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;

	}

	Object.assign( Fog.prototype, {

		isFog: true,

		clone: function () {

			return new Fog( this.color, this.near, this.far );

		},

		toJSON: function ( /* meta */ ) {

			return {
				type: 'Fog',
				color: this.color.getHex(),
				near: this.near,
				far: this.far
			};

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBuffer( array, stride ) {

		this.array = array;
		this.stride = stride;
		this.count = array !== undefined ? array.length / stride : 0;

		this.usage = StaticDrawUsage;
		this.updateRange = { offset: 0, count: - 1 };

		this.version = 0;

	}

	Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {

		set: function ( value ) {

			if ( value === true ) { this.version ++; }

		}

	} );

	Object.assign( InterleavedBuffer.prototype, {

		isInterleavedBuffer: true,

		onUploadCallback: function () {},

		setUsage: function ( value ) {

			this.usage = value;

			return this;

		},

		copy: function ( source ) {

			this.array = new source.array.constructor( source.array );
			this.count = source.count;
			this.stride = source.stride;
			this.usage = source.usage;

			return this;

		},

		copyAt: function ( index1, attribute, index2 ) {

			index1 *= this.stride;
			index2 *= attribute.stride;

			for ( var i = 0, l = this.stride; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		},

		set: function ( value, offset ) {

			if ( offset === undefined ) { offset = 0; }

			this.array.set( value, offset );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		onUpload: function ( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {

		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;

		this.normalized = normalized === true;

	}

	Object.defineProperties( InterleavedBufferAttribute.prototype, {

		count: {

			get: function () {

				return this.data.count;

			}

		},

		array: {

			get: function () {

				return this.data.array;

			}

		}

	} );

	Object.assign( InterleavedBufferAttribute.prototype, {

		isInterleavedBufferAttribute: true,

		setX: function ( index, x ) {

			this.data.array[ index * this.data.stride + this.offset ] = x;

			return this;

		},

		setY: function ( index, y ) {

			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;

			return this;

		},

		setZ: function ( index, z ) {

			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;

			return this;

		},

		setW: function ( index, w ) {

			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;

			return this;

		},

		getX: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset ];

		},

		getY: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 1 ];

		},

		getZ: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 2 ];

		},

		getW: function ( index ) {

			return this.data.array[ index * this.data.stride + this.offset + 3 ];

		},

		setXY: function ( index, x, y ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;

			return this;

		},

		setXYZ: function ( index, x, y, z ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;

			return this;

		},

		setXYZW: function ( index, x, y, z, w ) {

			index = index * this.data.stride + this.offset;

			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  map: new THREE.Texture( <Image> ),
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *  rotation: <float>,
	 *  sizeAttenuation: <bool>
	 * }
	 */

	function SpriteMaterial( parameters ) {

		Material.call( this );

		this.type = 'SpriteMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.alphaMap = null;

		this.rotation = 0;

		this.sizeAttenuation = true;

		this.transparent = true;

		this.setValues( parameters );

	}

	SpriteMaterial.prototype = Object.create( Material.prototype );
	SpriteMaterial.prototype.constructor = SpriteMaterial;
	SpriteMaterial.prototype.isSpriteMaterial = true;

	SpriteMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.rotation = source.rotation;

		this.sizeAttenuation = source.sizeAttenuation;

		return this;

	};

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */

	var _geometry;

	var _intersectPoint = new Vector3();
	var _worldScale = new Vector3();
	var _mvPosition = new Vector3();

	var _alignedPosition = new Vector2();
	var _rotatedPosition = new Vector2();
	var _viewWorldMatrix = new Matrix4();

	var _vA$1 = new Vector3();
	var _vB$1 = new Vector3();
	var _vC$1 = new Vector3();

	var _uvA$1 = new Vector2();
	var _uvB$1 = new Vector2();
	var _uvC$1 = new Vector2();

	function Sprite( material ) {

		Object3D.call( this );

		this.type = 'Sprite';

		if ( _geometry === undefined ) {

			_geometry = new BufferGeometry();

			var float32Array = new Float32Array( [
				- 0.5, - 0.5, 0, 0, 0,
				0.5, - 0.5, 0, 1, 0,
				0.5, 0.5, 0, 1, 1,
				- 0.5, 0.5, 0, 0, 1
			] );

			var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );

			_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
			_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
			_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );

		}

		this.geometry = _geometry;
		this.material = ( material !== undefined ) ? material : new SpriteMaterial();

		this.center = new Vector2( 0.5, 0.5 );

	}

	Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Sprite,

		isSprite: true,

		raycast: function ( raycaster, intersects ) {

			if ( raycaster.camera === null ) {

				console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );

			}

			_worldScale.setFromMatrixScale( this.matrixWorld );

			_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
			this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );

			_mvPosition.setFromMatrixPosition( this.modelViewMatrix );

			if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {

				_worldScale.multiplyScalar( - _mvPosition.z );

			}

			var rotation = this.material.rotation;
			var sin, cos;
			if ( rotation !== 0 ) {

				cos = Math.cos( rotation );
				sin = Math.sin( rotation );

			}

			var center = this.center;

			transformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
			transformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
			transformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );

			_uvA$1.set( 0, 0 );
			_uvB$1.set( 1, 0 );
			_uvC$1.set( 1, 1 );

			// check first triangle
			var intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );

			if ( intersect === null ) {

				// check second triangle
				transformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
				_uvB$1.set( 0, 1 );

				intersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );
				if ( intersect === null ) {

					return;

				}

			}

			var distance = raycaster.ray.origin.distanceTo( _intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) { return; }

			intersects.push( {

				distance: distance,
				point: _intersectPoint.clone(),
				uv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),
				face: null,
				object: this

			} );

		},

		clone: function () {

			return new this.constructor( this.material ).copy( this );

		},

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			if ( source.center !== undefined ) { this.center.copy( source.center ); }

			return this;

		}


	} );

	function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {

		// compute position in camera space
		_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );

		// to check if rotation is not zero
		if ( sin !== undefined ) {

			_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
			_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );

		} else {

			_rotatedPosition.copy( _alignedPosition );

		}


		vertexPosition.copy( mvPosition );
		vertexPosition.x += _rotatedPosition.x;
		vertexPosition.y += _rotatedPosition.y;

		// transform to world space
		vertexPosition.applyMatrix4( _viewWorldMatrix );

	}

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _v1$4 = new Vector3();
	var _v2$2 = new Vector3();

	function LOD() {

		Object3D.call( this );

		this.type = 'LOD';

		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			}
		} );

		this.autoUpdate = true;

	}

	LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: LOD,

		isLOD: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source, false );

			var levels = source.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				this.addLevel( level.object.clone(), level.distance );

			}

			this.autoUpdate = source.autoUpdate;

			return this;

		},

		addLevel: function ( object, distance ) {

			if ( distance === undefined ) { distance = 0; }

			distance = Math.abs( distance );

			var levels = this.levels;

			for ( var l = 0; l < levels.length; l ++ ) {

				if ( distance < levels[ l ].distance ) {

					break;

				}

			}

			levels.splice( l, 0, { distance: distance, object: object } );

			this.add( object );

			return this;

		},

		getObjectForDistance: function ( distance ) {

			var levels = this.levels;

			if ( levels.length > 0 ) {

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance < levels[ i ].distance ) {

						break;

					}

				}

				return levels[ i - 1 ].object;

			}

			return null;

		},

		raycast: function ( raycaster, intersects ) {

			var levels = this.levels;

			if ( levels.length > 0 ) {

				_v1$4.setFromMatrixPosition( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( _v1$4 );

				this.getObjectForDistance( distance ).raycast( raycaster, intersects );

			}

		},

		update: function ( camera ) {

			var levels = this.levels;

			if ( levels.length > 1 ) {

				_v1$4.setFromMatrixPosition( camera.matrixWorld );
				_v2$2.setFromMatrixPosition( this.matrixWorld );

				var distance = _v1$4.distanceTo( _v2$2 );

				levels[ 0 ].object.visible = true;

				for ( var i = 1, l = levels.length; i < l; i ++ ) {

					if ( distance >= levels[ i ].distance ) {

						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;

					} else {

						break;

					}

				}

				for ( ; i < l; i ++ ) {

					levels[ i ].object.visible = false;

				}

			}

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			if ( this.autoUpdate === false ) { data.object.autoUpdate = false; }

			data.object.levels = [];

			var levels = this.levels;

			for ( var i = 0, l = levels.length; i < l; i ++ ) {

				var level = levels[ i ];

				data.object.levels.push( {
					object: level.object.uuid,
					distance: level.distance
				} );

			}

			return data;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function SkinnedMesh( geometry, material ) {

		if ( geometry && geometry.isGeometry ) {

			console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );

		}

		Mesh.call( this, geometry, material );

		this.type = 'SkinnedMesh';

		this.bindMode = 'attached';
		this.bindMatrix = new Matrix4();
		this.bindMatrixInverse = new Matrix4();

	}

	SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: SkinnedMesh,

		isSkinnedMesh: true,

		bind: function ( skeleton, bindMatrix ) {

			this.skeleton = skeleton;

			if ( bindMatrix === undefined ) {

				this.updateMatrixWorld( true );

				this.skeleton.calculateInverses();

				bindMatrix = this.matrixWorld;

			}

			this.bindMatrix.copy( bindMatrix );
			this.bindMatrixInverse.getInverse( bindMatrix );

		},

		pose: function () {

			this.skeleton.pose();

		},

		normalizeSkinWeights: function () {

			var vector = new Vector4();

			var skinWeight = this.geometry.attributes.skinWeight;

			for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {

				vector.x = skinWeight.getX( i );
				vector.y = skinWeight.getY( i );
				vector.z = skinWeight.getZ( i );
				vector.w = skinWeight.getW( i );

				var scale = 1.0 / vector.manhattanLength();

				if ( scale !== Infinity ) {

					vector.multiplyScalar( scale );

				} else {

					vector.set( 1, 0, 0, 0 ); // do something reasonable

				}

				skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );

			}

		},

		updateMatrixWorld: function ( force ) {

			Mesh.prototype.updateMatrixWorld.call( this, force );

			if ( this.bindMode === 'attached' ) {

				this.bindMatrixInverse.getInverse( this.matrixWorld );

			} else if ( this.bindMode === 'detached' ) {

				this.bindMatrixInverse.getInverse( this.bindMatrix );

			} else {

				console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */

	var _offsetMatrix = new Matrix4();
	var _identityMatrix = new Matrix4();

	function Skeleton( bones, boneInverses ) {

		// copy the bone array

		bones = bones || [];

		this.bones = bones.slice( 0 );
		this.boneMatrices = new Float32Array( this.bones.length * 16 );

		this.frame = - 1;

		// use the supplied bone inverses or calculate the inverses

		if ( boneInverses === undefined ) {

			this.calculateInverses();

		} else {

			if ( this.bones.length === boneInverses.length ) {

				this.boneInverses = boneInverses.slice( 0 );

			} else {

				console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );

				this.boneInverses = [];

				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

					this.boneInverses.push( new Matrix4() );

				}

			}

		}

	}

	Object.assign( Skeleton.prototype, {

		calculateInverses: function () {

			this.boneInverses = [];

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var inverse = new Matrix4();

				if ( this.bones[ i ] ) {

					inverse.getInverse( this.bones[ i ].matrixWorld );

				}

				this.boneInverses.push( inverse );

			}

		},

		pose: function () {

			var bone, i, il;

			// recover the bind-time world matrices

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					bone.matrixWorld.getInverse( this.boneInverses[ i ] );

				}

			}

			// compute the local matrices, positions, rotations and scales

			for ( i = 0, il = this.bones.length; i < il; i ++ ) {

				bone = this.bones[ i ];

				if ( bone ) {

					if ( bone.parent && bone.parent.isBone ) {

						bone.matrix.getInverse( bone.parent.matrixWorld );
						bone.matrix.multiply( bone.matrixWorld );

					} else {

						bone.matrix.copy( bone.matrixWorld );

					}

					bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

				}

			}

		},

		update: function () {

			var bones = this.bones;
			var boneInverses = this.boneInverses;
			var boneMatrices = this.boneMatrices;
			var boneTexture = this.boneTexture;

			// flatten bone matrices to array

			for ( var i = 0, il = bones.length; i < il; i ++ ) {

				// compute the offset between the current and the original transform

				var matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;

				_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
				_offsetMatrix.toArray( boneMatrices, i * 16 );

			}

			if ( boneTexture !== undefined ) {

				boneTexture.needsUpdate = true;

			}

		},

		clone: function () {

			return new Skeleton( this.bones, this.boneInverses );

		},

		getBoneByName: function ( name ) {

			for ( var i = 0, il = this.bones.length; i < il; i ++ ) {

				var bone = this.bones[ i ];

				if ( bone.name === name ) {

					return bone;

				}

			}

			return undefined;

		}

	} );

	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */

	function Bone() {

		Object3D.call( this );

		this.type = 'Bone';

	}

	Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Bone,

		isBone: true

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _instanceLocalMatrix = new Matrix4();
	var _instanceWorldMatrix = new Matrix4();

	var _instanceIntersects = [];

	var _mesh = new Mesh();

	function InstancedMesh( geometry, material, count ) {

		Mesh.call( this, geometry, material );

		this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );

		this.count = count;

	}

	InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {

		constructor: InstancedMesh,

		isInstancedMesh: true,

		getMatrixAt: function ( index, matrix ) {

			matrix.fromArray( this.instanceMatrix.array, index * 16 );

		},

		raycast: function ( raycaster, intersects ) {

			var matrixWorld = this.matrixWorld;
			var raycastTimes = this.count;

			_mesh.geometry = this.geometry;
			_mesh.material = this.material;

			if ( _mesh.material === undefined ) { return; }

			for ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {

				// calculate the world matrix for each instance

				this.getMatrixAt( instanceId, _instanceLocalMatrix );

				_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );

				// the mesh represents this single instance

				_mesh.matrixWorld = _instanceWorldMatrix;

				_mesh.raycast( raycaster, _instanceIntersects );

				// process the result of raycast

				if ( _instanceIntersects.length > 0 ) {

					_instanceIntersects[ 0 ].instanceId = instanceId;
					_instanceIntersects[ 0 ].object = this;

					intersects.push( _instanceIntersects[ 0 ] );

					_instanceIntersects.length = 0;

				}

			}

		},

		setMatrixAt: function ( index, matrix ) {

			matrix.toArray( this.instanceMatrix.array, index * 16 );

		},

		updateMorphTargets: function () {

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round"
	 * }
	 */

	function LineBasicMaterial( parameters ) {

		Material.call( this );

		this.type = 'LineBasicMaterial';

		this.color = new Color( 0xffffff );

		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';

		this.setValues( parameters );

	}

	LineBasicMaterial.prototype = Object.create( Material.prototype );
	LineBasicMaterial.prototype.constructor = LineBasicMaterial;

	LineBasicMaterial.prototype.isLineBasicMaterial = true;

	LineBasicMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _start = new Vector3();
	var _end = new Vector3();
	var _inverseMatrix$1 = new Matrix4();
	var _ray$1 = new Ray();
	var _sphere$2 = new Sphere();

	function Line( geometry, material, mode ) {

		if ( mode === 1 ) {

			console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );

		}

		Object3D.call( this );

		this.type = 'Line';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new LineBasicMaterial( { color: Math.random() * 0xffffff } );

	}

	Line.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Line,

		isLine: true,

		computeLineDistances: function () {

			var geometry = this.geometry;

			if ( geometry.isBufferGeometry ) {

				// we assume non-indexed geometry

				if ( geometry.index === null ) {

					var positionAttribute = geometry.attributes.position;
					var lineDistances = [ 0 ];

					for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {

						_start.fromBufferAttribute( positionAttribute, i - 1 );
						_end.fromBufferAttribute( positionAttribute, i );

						lineDistances[ i ] = lineDistances[ i - 1 ];
						lineDistances[ i ] += _start.distanceTo( _end );

					}

					geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

				} else {

					console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var lineDistances = geometry.lineDistances;

				lineDistances[ 0 ] = 0;

				for ( var i = 1, l = vertices.length; i < l; i ++ ) {

					lineDistances[ i ] = lineDistances[ i - 1 ];
					lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );

				}

			}

			return this;

		},

		raycast: function ( raycaster, intersects ) {

			var precision = raycaster.linePrecision;

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere$2.copy( geometry.boundingSphere );
			_sphere$2.applyMatrix4( matrixWorld );
			_sphere$2.radius += precision;

			if ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }

			//

			_inverseMatrix$1.getInverse( matrixWorld );
			_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

			var localPrecision = precision / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localPrecisionSq = localPrecision * localPrecision;

			var vStart = new Vector3();
			var vEnd = new Vector3();
			var interSegment = new Vector3();
			var interRay = new Vector3();
			var step = ( this && this.isLineSegments ) ? 2 : 1;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {

						var a = indices[ i ];
						var b = indices[ i + 1 ];

						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );

						var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > localPrecisionSq ) { continue; }

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				} else {

					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {

						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );

						var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

						if ( distSq > localPrecisionSq ) { continue; }

						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

						var distance = raycaster.ray.origin.distanceTo( interRay );

						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

						intersects.push( {

							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this

						} );

					}

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var nbVertices = vertices.length;

				for ( var i = 0; i < nbVertices - 1; i += step ) {

					var distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

					if ( distSq > localPrecisionSq ) { continue; }

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					var distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) { continue; }

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _start$1 = new Vector3();
	var _end$1 = new Vector3();

	function LineSegments( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineSegments';

	}

	LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineSegments,

		isLineSegments: true,

		computeLineDistances: function () {

			var geometry = this.geometry;

			if ( geometry.isBufferGeometry ) {

				// we assume non-indexed geometry

				if ( geometry.index === null ) {

					var positionAttribute = geometry.attributes.position;
					var lineDistances = [];

					for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {

						_start$1.fromBufferAttribute( positionAttribute, i );
						_end$1.fromBufferAttribute( positionAttribute, i + 1 );

						lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
						lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

					}

					geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

				} else {

					console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

				}

			} else if ( geometry.isGeometry ) {

				var vertices = geometry.vertices;
				var lineDistances = geometry.lineDistances;

				for ( var i = 0, l = vertices.length; i < l; i += 2 ) {

					_start$1.copy( vertices[ i ] );
					_end$1.copy( vertices[ i + 1 ] );

					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
					lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );

				}

			}

			return this;

		}

	} );

	/**
	 * @author mgreter / http://github.com/mgreter
	 */

	function LineLoop( geometry, material ) {

		Line.call( this, geometry, material );

		this.type = 'LineLoop';

	}

	LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {

		constructor: LineLoop,

		isLineLoop: true,

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>
	 *
	 *  morphTargets: <bool>
	 * }
	 */

	function PointsMaterial( parameters ) {

		Material.call( this );

		this.type = 'PointsMaterial';

		this.color = new Color( 0xffffff );

		this.map = null;

		this.alphaMap = null;

		this.size = 1;
		this.sizeAttenuation = true;

		this.morphTargets = false;

		this.setValues( parameters );

	}

	PointsMaterial.prototype = Object.create( Material.prototype );
	PointsMaterial.prototype.constructor = PointsMaterial;

	PointsMaterial.prototype.isPointsMaterial = true;

	PointsMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.alphaMap = source.alphaMap;

		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;

		this.morphTargets = source.morphTargets;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	var _inverseMatrix$2 = new Matrix4();
	var _ray$2 = new Ray();
	var _sphere$3 = new Sphere();
	var _position$1 = new Vector3();

	function Points( geometry, material ) {

		Object3D.call( this );

		this.type = 'Points';

		this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
		this.material = material !== undefined ? material : new PointsMaterial( { color: Math.random() * 0xffffff } );

		this.updateMorphTargets();

	}

	Points.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Points,

		isPoints: true,

		raycast: function ( raycaster, intersects ) {

			var geometry = this.geometry;
			var matrixWorld = this.matrixWorld;
			var threshold = raycaster.params.Points.threshold;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }

			_sphere$3.copy( geometry.boundingSphere );
			_sphere$3.applyMatrix4( matrixWorld );
			_sphere$3.radius += threshold;

			if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }

			//

			_inverseMatrix$2.getInverse( matrixWorld );
			_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );

			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;

			if ( geometry.isBufferGeometry ) {

				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;

				if ( index !== null ) {

					var indices = index.array;

					for ( var i = 0, il = indices.length; i < il; i ++ ) {

						var a = indices[ i ];

						_position$1.fromArray( positions, a * 3 );

						testPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );

					}

				} else {

					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {

						_position$1.fromArray( positions, i * 3 );

						testPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );

					}

				}

			} else {

				var vertices = geometry.vertices;

				for ( var i = 0, l = vertices.length; i < l; i ++ ) {

					testPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );

				}

			}

		},

		updateMorphTargets: function () {

			var geometry = this.geometry;
			var m, ml, name;

			if ( geometry.isBufferGeometry ) {

				var morphAttributes = geometry.morphAttributes;
				var keys = Object.keys( morphAttributes );

				if ( keys.length > 0 ) {

					var morphAttribute = morphAttributes[ keys[ 0 ] ];

					if ( morphAttribute !== undefined ) {

						this.morphTargetInfluences = [];
						this.morphTargetDictionary = {};

						for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

							name = morphAttribute[ m ].name || String( m );

							this.morphTargetInfluences.push( 0 );
							this.morphTargetDictionary[ name ] = m;

						}

					}

				}

			} else {

				var morphTargets = geometry.morphTargets;

				if ( morphTargets !== undefined && morphTargets.length > 0 ) {

					console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );

				}

			}

		},

		clone: function () {

			return new this.constructor( this.geometry, this.material ).copy( this );

		}

	} );

	function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {

		var rayPointDistanceSq = _ray$2.distanceSqToPoint( point );

		if ( rayPointDistanceSq < localThresholdSq ) {

			var intersectPoint = new Vector3();

			_ray$2.closestPointToPoint( point, intersectPoint );
			intersectPoint.applyMatrix4( matrixWorld );

			var distance = raycaster.ray.origin.distanceTo( intersectPoint );

			if ( distance < raycaster.near || distance > raycaster.far ) { return; }

			intersects.push( {

				distance: distance,
				distanceToRay: Math.sqrt( rayPointDistanceSq ),
				point: intersectPoint,
				index: index,
				face: null,
				object: object

			} );

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.format = format !== undefined ? format : RGBFormat;

		this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
		this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;

		this.generateMipmaps = false;

	}

	VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {

		constructor: VideoTexture,

		isVideoTexture: true,

		update: function () {

			var video = this.image;

			if ( video.readyState >= video.HAVE_CURRENT_DATA ) {

				this.needsUpdate = true;

			}

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );

		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		this.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		this.generateMipmaps = false;

	}

	CompressedTexture.prototype = Object.create( Texture.prototype );
	CompressedTexture.prototype.constructor = CompressedTexture;

	CompressedTexture.prototype.isCompressedTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

		Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.needsUpdate = true;

	}

	CanvasTexture.prototype = Object.create( Texture.prototype );
	CanvasTexture.prototype.constructor = CanvasTexture;
	CanvasTexture.prototype.isCanvasTexture = true;

	/**
	 * @author Matt DesLauriers / @mattdesl
	 * @author atix / arthursilber.de
	 */

	function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

		format = format !== undefined ? format : DepthFormat;

		if ( format !== DepthFormat && format !== DepthStencilFormat ) {

			throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

		}

		if ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }
		if ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }

		Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

		this.image = { width: width, height: height };

		this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

		this.flipY = false;
		this.generateMipmaps	= false;

	}

	DepthTexture.prototype = Object.create( Texture.prototype );
	DepthTexture.prototype.constructor = DepthTexture;
	DepthTexture.prototype.isDepthTexture = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function WireframeGeometry( geometry ) {

		BufferGeometry.call( this );

		this.type = 'WireframeGeometry';

		// buffer

		var vertices = [];

		// helper variables

		var i, j, l, o, ol;
		var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];
		var vertex;

		// different logic for Geometry and BufferGeometry

		if ( geometry && geometry.isGeometry ) {

			// create a data structure that contains all edges without duplicates

			var faces = geometry.faces;

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( j = 0; j < 3; j ++ ) {

					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
					edge[ 1 ] = Math.max( edge1, edge2 );

					key = edge[ 0 ] + ',' + edge[ 1 ];

					if ( edges[ key ] === undefined ) {

						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

					}

				}

			}

			// generate vertices

			for ( key in edges ) {

				e = edges[ key ];

				vertex = geometry.vertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = geometry.vertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		} else if ( geometry && geometry.isBufferGeometry ) {

			var position, indices, groups;
			var group, start, count;
			var index1, index2;

			vertex = new Vector3();

			if ( geometry.index !== null ) {

				// indexed BufferGeometry

				position = geometry.attributes.position;
				indices = geometry.index;
				groups = geometry.groups;

				if ( groups.length === 0 ) {

					groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];

				}

				// create a data structure that contains all eges without duplicates

				for ( o = 0, ol = groups.length; o < ol; ++ o ) {

					group = groups[ o ];

					start = group.start;
					count = group.count;

					for ( i = start, l = ( start + count ); i < l; i += 3 ) {

						for ( j = 0; j < 3; j ++ ) {

							edge1 = indices.getX( i + j );
							edge2 = indices.getX( i + ( j + 1 ) % 3 );
							edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
							edge[ 1 ] = Math.max( edge1, edge2 );

							key = edge[ 0 ] + ',' + edge[ 1 ];

							if ( edges[ key ] === undefined ) {

								edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };

							}

						}

					}

				}

				// generate vertices

				for ( key in edges ) {

					e = edges[ key ];

					vertex.fromBufferAttribute( position, e.index1 );
					vertices.push( vertex.x, vertex.y, vertex.z );

					vertex.fromBufferAttribute( position, e.index2 );
					vertices.push( vertex.x, vertex.y, vertex.z );

				}

			} else {

				// non-indexed BufferGeometry

				position = geometry.attributes.position;

				for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {

					for ( j = 0; j < 3; j ++ ) {

						// three edges per triangle, an edge is represented as (index1, index2)
						// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)

						index1 = 3 * i + j;
						vertex.fromBufferAttribute( position, index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );

						index2 = 3 * i + ( ( j + 1 ) % 3 );
						vertex.fromBufferAttribute( position, index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );

					}

				}

			}

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
	WireframeGeometry.prototype.constructor = WireframeGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 */

	// ParametricGeometry

	function ParametricGeometry( func, slices, stacks ) {

		Geometry.call( this );

		this.type = 'ParametricGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
		this.mergeVertices();

	}

	ParametricGeometry.prototype = Object.create( Geometry.prototype );
	ParametricGeometry.prototype.constructor = ParametricGeometry;

	// ParametricBufferGeometry

	function ParametricBufferGeometry( func, slices, stacks ) {

		BufferGeometry.call( this );

		this.type = 'ParametricBufferGeometry';

		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		var EPS = 0.00001;

		var normal = new Vector3();

		var p0 = new Vector3(), p1 = new Vector3();
		var pu = new Vector3(), pv = new Vector3();

		var i, j;

		if ( func.length < 3 ) {

			console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );

		}

		// generate vertices, normals and uvs

		var sliceCount = slices + 1;

		for ( i = 0; i <= stacks; i ++ ) {

			var v = i / stacks;

			for ( j = 0; j <= slices; j ++ ) {

				var u = j / slices;

				// vertex

				func( u, v, p0 );
				vertices.push( p0.x, p0.y, p0.z );

				// normal

				// approximate tangent vectors via finite differences

				if ( u - EPS >= 0 ) {

					func( u - EPS, v, p1 );
					pu.subVectors( p0, p1 );

				} else {

					func( u + EPS, v, p1 );
					pu.subVectors( p1, p0 );

				}

				if ( v - EPS >= 0 ) {

					func( u, v - EPS, p1 );
					pv.subVectors( p0, p1 );

				} else {

					func( u, v + EPS, p1 );
					pv.subVectors( p1, p0 );

				}

				// cross product of tangent vectors returns surface normal

				normal.crossVectors( pu, pv ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u, v );

			}

		}

		// generate indices

		for ( i = 0; i < stacks; i ++ ) {

			for ( j = 0; j < slices; j ++ ) {

				var a = i * sliceCount + j;
				var b = i * sliceCount + j + 1;
				var c = ( i + 1 ) * sliceCount + j + 1;
				var d = ( i + 1 ) * sliceCount + j;

				// faces one and two

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;

	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// PolyhedronGeometry

	function PolyhedronGeometry( vertices, indices, radius, detail ) {

		Geometry.call( this );

		this.type = 'PolyhedronGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
		this.mergeVertices();

	}

	PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
	PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;

	// PolyhedronBufferGeometry

	function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {

		BufferGeometry.call( this );

		this.type = 'PolyhedronBufferGeometry';

		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};

		radius = radius || 1;
		detail = detail || 0;

		// default buffer data

		var vertexBuffer = [];
		var uvBuffer = [];

		// the subdivision creates the vertex buffer data

		subdivide( detail );

		// all vertices should lie on a conceptual sphere with a given radius

		applyRadius( radius );

		// finally, create the uv data

		generateUVs();

		// build non-indexed geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );

		if ( detail === 0 ) {

			this.computeVertexNormals(); // flat normals

		} else {

			this.normalizeNormals(); // smooth normals

		}

		// helper functions

		function subdivide( detail ) {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			// iterate over all faces and apply a subdivison with the given detail value

			for ( var i = 0; i < indices.length; i += 3 ) {

				// get the vertices of the face

				getVertexByIndex( indices[ i + 0 ], a );
				getVertexByIndex( indices[ i + 1 ], b );
				getVertexByIndex( indices[ i + 2 ], c );

				// perform subdivision

				subdivideFace( a, b, c, detail );

			}

		}

		function subdivideFace( a, b, c, detail ) {

			var cols = Math.pow( 2, detail );

			// we use this multidimensional array as a data structure for creating the subdivision

			var v = [];

			var i, j;

			// construct all of the vertices for this subdivision

			for ( i = 0; i <= cols; i ++ ) {

				v[ i ] = [];

				var aj = a.clone().lerp( c, i / cols );
				var bj = b.clone().lerp( c, i / cols );

				var rows = cols - i;

				for ( j = 0; j <= rows; j ++ ) {

					if ( j === 0 && i === cols ) {

						v[ i ][ j ] = aj;

					} else {

						v[ i ][ j ] = aj.clone().lerp( bj, j / rows );

					}

				}

			}

			// construct all of the faces

			for ( i = 0; i < cols; i ++ ) {

				for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {

					var k = Math.floor( j / 2 );

					if ( j % 2 === 0 ) {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );
						pushVertex( v[ i ][ k ] );

					} else {

						pushVertex( v[ i ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k + 1 ] );
						pushVertex( v[ i + 1 ][ k ] );

					}

				}

			}

		}

		function applyRadius( radius ) {

			var vertex = new Vector3();

			// iterate over the entire buffer and apply the radius to each vertex

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				vertex.normalize().multiplyScalar( radius );

				vertexBuffer[ i + 0 ] = vertex.x;
				vertexBuffer[ i + 1 ] = vertex.y;
				vertexBuffer[ i + 2 ] = vertex.z;

			}

		}

		function generateUVs() {

			var vertex = new Vector3();

			for ( var i = 0; i < vertexBuffer.length; i += 3 ) {

				vertex.x = vertexBuffer[ i + 0 ];
				vertex.y = vertexBuffer[ i + 1 ];
				vertex.z = vertexBuffer[ i + 2 ];

				var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
				var v = inclination( vertex ) / Math.PI + 0.5;
				uvBuffer.push( u, 1 - v );

			}

			correctUVs();

			correctSeam();

		}

		function correctSeam() {

			// handle case when face straddles the seam, see #3269

			for ( var i = 0; i < uvBuffer.length; i += 6 ) {

				// uv data of a single face

				var x0 = uvBuffer[ i + 0 ];
				var x1 = uvBuffer[ i + 2 ];
				var x2 = uvBuffer[ i + 4 ];

				var max = Math.max( x0, x1, x2 );
				var min = Math.min( x0, x1, x2 );

				// 0.9 is somewhat arbitrary

				if ( max > 0.9 && min < 0.1 ) {

					if ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }
					if ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }
					if ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }

				}

			}

		}

		function pushVertex( vertex ) {

			vertexBuffer.push( vertex.x, vertex.y, vertex.z );

		}

		function getVertexByIndex( index, vertex ) {

			var stride = index * 3;

			vertex.x = vertices[ stride + 0 ];
			vertex.y = vertices[ stride + 1 ];
			vertex.z = vertices[ stride + 2 ];

		}

		function correctUVs() {

			var a = new Vector3();
			var b = new Vector3();
			var c = new Vector3();

			var centroid = new Vector3();

			var uvA = new Vector2();
			var uvB = new Vector2();
			var uvC = new Vector2();

			for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {

				a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
				b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
				c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );

				uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
				uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
				uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );

				centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );

				var azi = azimuth( centroid );

				correctUV( uvA, j + 0, a, azi );
				correctUV( uvB, j + 2, b, azi );
				correctUV( uvC, j + 4, c, azi );

			}

		}

		function correctUV( uv, stride, vector, azimuth ) {

			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {

				uvBuffer[ stride ] = uv.x - 1;

			}

			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {

				uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;

			}

		}

		// Angle around the Y axis, counter-clockwise when looking from above.

		function azimuth( vector ) {

			return Math.atan2( vector.z, - vector.x );

		}


		// Angle above the XZ plane.

		function inclination( vector ) {

			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

		}

	}

	PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TetrahedronGeometry

	function TetrahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'TetrahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
	TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;

	// TetrahedronBufferGeometry

	function TetrahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
		];

		var indices = [
			2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'TetrahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// OctahedronGeometry

	function OctahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'OctahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	OctahedronGeometry.prototype = Object.create( Geometry.prototype );
	OctahedronGeometry.prototype.constructor = OctahedronGeometry;

	// OctahedronBufferGeometry

	function OctahedronBufferGeometry( radius, detail ) {

		var vertices = [
			1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
			0, - 1, 0, 	0, 0, 1,	0, 0, - 1
		];

		var indices = [
			0, 2, 4,	0, 4, 3,	0, 3, 5,
			0, 5, 2,	1, 2, 5,	1, 5, 3,
			1, 3, 4,	1, 4, 2
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'OctahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;

	/**
	 * @author timothypratley / https://github.com/timothypratley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// IcosahedronGeometry

	function IcosahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'IcosahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
	IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;

	// IcosahedronBufferGeometry

	function IcosahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;

		var vertices = [
			- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
			 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
			 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
		];

		var indices = [
			 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
			 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
			 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
			 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'IcosahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;

	/**
	 * @author Abe Pazos / https://hamoid.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// DodecahedronGeometry

	function DodecahedronGeometry( radius, detail ) {

		Geometry.call( this );

		this.type = 'DodecahedronGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

		this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
		this.mergeVertices();

	}

	DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
	DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;

	// DodecahedronBufferGeometry

	function DodecahedronBufferGeometry( radius, detail ) {

		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;

		var vertices = [

			// (±1, ±1, ±1)
			- 1, - 1, - 1,	- 1, - 1, 1,
			- 1, 1, - 1, - 1, 1, 1,
			1, - 1, - 1, 1, - 1, 1,
			1, 1, - 1, 1, 1, 1,

			// (0, ±1/φ, ±φ)
			 0, - r, - t, 0, - r, t,
			 0, r, - t, 0, r, t,

			// (±1/φ, ±φ, 0)
			- r, - t, 0, - r, t, 0,
			 r, - t, 0, r, t, 0,

			// (±φ, 0, ±1/φ)
			- t, 0, - r, t, 0, - r,
			- t, 0, r, t, 0, r
		];

		var indices = [
			3, 11, 7, 	3, 7, 15, 	3, 15, 13,
			7, 19, 17, 	7, 17, 6, 	7, 6, 15,
			17, 4, 8, 	17, 8, 10, 	17, 10, 6,
			8, 0, 16, 	8, 16, 2, 	8, 2, 10,
			0, 12, 1, 	0, 1, 18, 	0, 18, 16,
			6, 10, 2, 	6, 2, 13, 	6, 13, 15,
			2, 16, 18, 	2, 18, 3, 	2, 3, 13,
			18, 1, 9, 	18, 9, 11, 	18, 11, 3,
			4, 14, 12, 	4, 12, 0, 	4, 0, 8,
			11, 9, 5, 	11, 5, 19, 	11, 19, 7,
			19, 5, 14, 	19, 14, 4, 	19, 4, 17,
			1, 12, 14, 	1, 14, 5, 	1, 5, 9
		];

		PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );

		this.type = 'DodecahedronBufferGeometry';

		this.parameters = {
			radius: radius,
			detail: detail
		};

	}

	DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
	DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;

	/**
	 * @author oosmoxiecode / https://github.com/oosmoxiecode
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 */

	// TubeGeometry

	function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {

		Geometry.call( this );

		this.type = 'TubeGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		if ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }

		var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );

		// expose internals

		this.tangents = bufferGeometry.tangents;
		this.normals = bufferGeometry.normals;
		this.binormals = bufferGeometry.binormals;

		// create geometry

		this.fromBufferGeometry( bufferGeometry );
		this.mergeVertices();

	}

	TubeGeometry.prototype = Object.create( Geometry.prototype );
	TubeGeometry.prototype.constructor = TubeGeometry;

	// TubeBufferGeometry

	function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {

		BufferGeometry.call( this );

		this.type = 'TubeBufferGeometry';

		this.parameters = {
			path: path,
			tubularSegments: tubularSegments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed
		};

		tubularSegments = tubularSegments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;

		var frames = path.computeFrenetFrames( tubularSegments, closed );

		// expose internals

		this.tangents = frames.tangents;
		this.normals = frames.normals;
		this.binormals = frames.binormals;

		// helper variables

		var vertex = new Vector3();
		var normal = new Vector3();
		var uv = new Vector2();
		var P = new Vector3();

		var i, j;

		// buffer

		var vertices = [];
		var normals = [];
		var uvs = [];
		var indices = [];

		// create buffer data

		generateBufferData();

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// functions

		function generateBufferData() {

			for ( i = 0; i < tubularSegments; i ++ ) {

				generateSegment( i );

			}

			// if the geometry is not closed, generate the last row of vertices and normals
			// at the regular position on the given path
			//
			// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)

			generateSegment( ( closed === false ) ? tubularSegments : 0 );

			// uvs are generated in a separate function.
			// this makes it easy compute correct values for closed geometries

			generateUVs();

			// finally create faces

			generateIndices();

		}

		function generateSegment( i ) {

			// we use getPointAt to sample evenly distributed points from the given path

			P = path.getPointAt( i / tubularSegments, P );

			// retrieve corresponding normal and binormal

			var N = frames.normals[ i ];
			var B = frames.binormals[ i ];

			// generate normals and vertices for the current segment

			for ( j = 0; j <= radialSegments; j ++ ) {

				var v = j / radialSegments * Math.PI * 2;

				var sin = Math.sin( v );
				var cos = - Math.cos( v );

				// normal

				normal.x = ( cos * N.x + sin * B.x );
				normal.y = ( cos * N.y + sin * B.y );
				normal.z = ( cos * N.z + sin * B.z );
				normal.normalize();

				normals.push( normal.x, normal.y, normal.z );

				// vertex

				vertex.x = P.x + radius * normal.x;
				vertex.y = P.y + radius * normal.y;
				vertex.z = P.z + radius * normal.z;

				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		function generateIndices() {

			for ( j = 1; j <= tubularSegments; j ++ ) {

				for ( i = 1; i <= radialSegments; i ++ ) {

					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

		}

		function generateUVs() {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				for ( j = 0; j <= radialSegments; j ++ ) {

					uv.x = i / tubularSegments;
					uv.y = j / radialSegments;

					uvs.push( uv.x, uv.y );

				}

			}

		}

	}

	TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;

	TubeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		data.path = this.parameters.path.toJSON();

		return data;

	};

	/**
	 * @author oosmoxiecode
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * based on http://www.blackpawn.com/texts/pqtorus/
	 */

	// TorusKnotGeometry

	function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {

		Geometry.call( this );

		this.type = 'TorusKnotGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		if ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }

		this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
		this.mergeVertices();

	}

	TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
	TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;

	// TorusKnotBufferGeometry

	function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {

		BufferGeometry.call( this );

		this.type = 'TorusKnotBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			tubularSegments: tubularSegments,
			radialSegments: radialSegments,
			p: p,
			q: q
		};

		radius = radius || 1;
		tube = tube || 0.4;
		tubularSegments = Math.floor( tubularSegments ) || 64;
		radialSegments = Math.floor( radialSegments ) || 8;
		p = p || 2;
		q = q || 3;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, j;

		var vertex = new Vector3();
		var normal = new Vector3();

		var P1 = new Vector3();
		var P2 = new Vector3();

		var B = new Vector3();
		var T = new Vector3();
		var N = new Vector3();

		// generate vertices, normals and uvs

		for ( i = 0; i <= tubularSegments; ++ i ) {

			// the radian "u" is used to calculate the position on the torus curve of the current tubular segement

			var u = i / tubularSegments * p * Math.PI * 2;

			// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
			// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions

			calculatePositionOnCurve( u, p, q, radius, P1 );
			calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );

			// calculate orthonormal basis

			T.subVectors( P2, P1 );
			N.addVectors( P2, P1 );
			B.crossVectors( T, N );
			N.crossVectors( B, T );

			// normalize B, N. T can be ignored, we don't use it

			B.normalize();
			N.normalize();

			for ( j = 0; j <= radialSegments; ++ j ) {

				// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
				// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.

				var v = j / radialSegments * Math.PI * 2;
				var cx = - tube * Math.cos( v );
				var cy = tube * Math.sin( v );

				// now calculate the final vertex position.
				// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve

				vertex.x = P1.x + ( cx * N.x + cy * B.x );
				vertex.y = P1.y + ( cx * N.y + cy * B.y );
				vertex.z = P1.z + ( cx * N.z + cy * B.z );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)

				normal.subVectors( vertex, P1 ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= tubularSegments; j ++ ) {

			for ( i = 1; i <= radialSegments; i ++ ) {

				// indices

				var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
				var b = ( radialSegments + 1 ) * j + ( i - 1 );
				var c = ( radialSegments + 1 ) * j + i;
				var d = ( radialSegments + 1 ) * ( j - 1 ) + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// this function calculates the current position on the torus curve

		function calculatePositionOnCurve( u, p, q, radius, position ) {

			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = q / p * u;
			var cs = Math.cos( quOverP );

			position.x = radius * ( 2 + cs ) * 0.5 * cu;
			position.y = radius * ( 2 + cs ) * su * 0.5;
			position.z = radius * Math.sin( quOverP ) * 0.5;

		}

	}

	TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;

	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// TorusGeometry

	function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		Geometry.call( this );

		this.type = 'TorusGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
		this.mergeVertices();

	}

	TorusGeometry.prototype = Object.create( Geometry.prototype );
	TorusGeometry.prototype.constructor = TorusGeometry;

	// TorusBufferGeometry

	function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {

		BufferGeometry.call( this );

		this.type = 'TorusBufferGeometry';

		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};

		radius = radius || 1;
		tube = tube || 0.4;
		radialSegments = Math.floor( radialSegments ) || 8;
		tubularSegments = Math.floor( tubularSegments ) || 6;
		arc = arc || Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var center = new Vector3();
		var vertex = new Vector3();
		var normal = new Vector3();

		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= radialSegments; j ++ ) {

			for ( i = 0; i <= tubularSegments; i ++ ) {

				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;

				// vertex

				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
				normal.subVectors( vertex, center ).normalize();

				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( i / tubularSegments );
				uvs.push( j / radialSegments );

			}

		}

		// generate indices

		for ( j = 1; j <= radialSegments; j ++ ) {

			for ( i = 1; i <= tubularSegments; i ++ ) {

				// indices

				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 * Port from https://github.com/mapbox/earcut (v2.1.5)
	 */

	var Earcut = {

		triangulate: function ( data, holeIndices, dim ) {

			dim = dim || 2;

			var hasHoles = holeIndices && holeIndices.length,
				outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
				outerNode = linkedList( data, 0, outerLen, dim, true ),
				triangles = [];

			if ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }

			var minX, minY, maxX, maxY, x, y, invSize;

			if ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }

			// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
			if ( data.length > 80 * dim ) {

				minX = maxX = data[ 0 ];
				minY = maxY = data[ 1 ];

				for ( var i = dim; i < outerLen; i += dim ) {

					x = data[ i ];
					y = data[ i + 1 ];
					if ( x < minX ) { minX = x; }
					if ( y < minY ) { minY = y; }
					if ( x > maxX ) { maxX = x; }
					if ( y > maxY ) { maxY = y; }

				}

				// minX, minY and invSize are later used to transform coords into integers for z-order calculation
				invSize = Math.max( maxX - minX, maxY - minY );
				invSize = invSize !== 0 ? 1 / invSize : 0;

			}

			earcutLinked( outerNode, triangles, dim, minX, minY, invSize );

			return triangles;

		}

	};

	// create a circular doubly linked list from polygon points in the specified winding order
	function linkedList( data, start, end, dim, clockwise ) {

		var i, last;

		if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {

			for ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }

		} else {

			for ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }

		}

		if ( last && equals( last, last.next ) ) {

			removeNode( last );
			last = last.next;

		}

		return last;

	}

	// eliminate colinear or duplicate points
	function filterPoints( start, end ) {

		if ( ! start ) { return start; }
		if ( ! end ) { end = start; }

		var p = start,
			again;
		do {

			again = false;

			if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {

				removeNode( p );
				p = end = p.prev;
				if ( p === p.next ) { break; }
				again = true;

			} else {

				p = p.next;

			}

		} while ( again || p !== end );

		return end;

	}

	// main ear slicing loop which triangulates a polygon (given as a linked list)
	function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {

		if ( ! ear ) { return; }

		// interlink polygon nodes in z-order
		if ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }

		var stop = ear,
			prev, next;

		// iterate through ears, slicing them one by one
		while ( ear.prev !== ear.next ) {

			prev = ear.prev;
			next = ear.next;

			if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {

				// cut off the triangle
				triangles.push( prev.i / dim );
				triangles.push( ear.i / dim );
				triangles.push( next.i / dim );

				removeNode( ear );

				// skipping the next vertex leads to less sliver triangles
				ear = next.next;
				stop = next.next;

				continue;

			}

			ear = next;

			// if we looped through the whole remaining polygon and can't find any more ears
			if ( ear === stop ) {

				// try filtering points and slicing again
				if ( ! pass ) {

					earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );

					// if this didn't work, try curing all small self-intersections locally

				} else if ( pass === 1 ) {

					ear = cureLocalIntersections( ear, triangles, dim );
					earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );

					// as a last resort, try splitting the remaining polygon into two

				} else if ( pass === 2 ) {

					splitEarcut( ear, triangles, dim, minX, minY, invSize );

				}

				break;

			}

		}

	}

	// check whether a polygon node forms a valid ear with adjacent nodes
	function isEar( ear ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear

		// now make sure we don't have other points inside the potential ear
		var p = ear.next.next;

		while ( p !== ear.prev ) {

			if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) { return false; }
			p = p.next;

		}

		return true;

	}

	function isEarHashed( ear, minX, minY, invSize ) {

		var a = ear.prev,
			b = ear,
			c = ear.next;

		if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear

		// triangle bbox; min & max are calculated like this for speed
		var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
			minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
			maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
			maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );

		// z-order range for the current triangle bbox;
		var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
			maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );

		var p = ear.prevZ,
			n = ear.nextZ;

		// look for points inside the triangle in both directions
		while ( p && p.z >= minZ && n && n.z <= maxZ ) {

			if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) { return false; }
			p = p.prevZ;

			if ( n !== ear.prev && n !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
				area( n.prev, n, n.next ) >= 0 ) { return false; }
			n = n.nextZ;

		}

		// look for remaining points in decreasing z-order
		while ( p && p.z >= minZ ) {

			if ( p !== ear.prev && p !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
				area( p.prev, p, p.next ) >= 0 ) { return false; }
			p = p.prevZ;

		}

		// look for remaining points in increasing z-order
		while ( n && n.z <= maxZ ) {

			if ( n !== ear.prev && n !== ear.next &&
				pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
				area( n.prev, n, n.next ) >= 0 ) { return false; }
			n = n.nextZ;

		}

		return true;

	}

	// go through all polygon nodes and cure small local self-intersections
	function cureLocalIntersections( start, triangles, dim ) {

		var p = start;
		do {

			var a = p.prev,
				b = p.next.next;

			if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {

				triangles.push( a.i / dim );
				triangles.push( p.i / dim );
				triangles.push( b.i / dim );

				// remove two nodes involved
				removeNode( p );
				removeNode( p.next );

				p = start = b;

			}

			p = p.next;

		} while ( p !== start );

		return p;

	}

	// try splitting polygon into two and triangulate them independently
	function splitEarcut( start, triangles, dim, minX, minY, invSize ) {

		// look for a valid diagonal that divides the polygon into two
		var a = start;
		do {

			var b = a.next.next;
			while ( b !== a.prev ) {

				if ( a.i !== b.i && isValidDiagonal( a, b ) ) {

					// split the polygon in two by the diagonal
					var c = splitPolygon( a, b );

					// filter colinear points around the cuts
					a = filterPoints( a, a.next );
					c = filterPoints( c, c.next );

					// run earcut on each half
					earcutLinked( a, triangles, dim, minX, minY, invSize );
					earcutLinked( c, triangles, dim, minX, minY, invSize );
					return;

				}

				b = b.next;

			}

			a = a.next;

		} while ( a !== start );

	}

	// link every hole into the outer loop, producing a single-ring polygon without holes
	function eliminateHoles( data, holeIndices, outerNode, dim ) {

		var queue = [],
			i, len, start, end, list;

		for ( i = 0, len = holeIndices.length; i < len; i ++ ) {

			start = holeIndices[ i ] * dim;
			end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
			list = linkedList( data, start, end, dim, false );
			if ( list === list.next ) { list.steiner = true; }
			queue.push( getLeftmost( list ) );

		}

		queue.sort( compareX );

		// process holes from left to right
		for ( i = 0; i < queue.length; i ++ ) {

			eliminateHole( queue[ i ], outerNode );
			outerNode = filterPoints( outerNode, outerNode.next );

		}

		return outerNode;

	}

	function compareX( a, b ) {

		return a.x - b.x;

	}

	// find a bridge between vertices that connects hole with an outer ring and and link it
	function eliminateHole( hole, outerNode ) {

		outerNode = findHoleBridge( hole, outerNode );
		if ( outerNode ) {

			var b = splitPolygon( outerNode, hole );
			filterPoints( b, b.next );

		}

	}

	// David Eberly's algorithm for finding a bridge between hole and outer polygon
	function findHoleBridge( hole, outerNode ) {

		var p = outerNode,
			hx = hole.x,
			hy = hole.y,
			qx = - Infinity,
			m;

		// find a segment intersected by a ray from the hole's leftmost point to the left;
		// segment's endpoint with lesser x will be potential connection point
		do {

			if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {

				var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
				if ( x <= hx && x > qx ) {

					qx = x;
					if ( x === hx ) {

						if ( hy === p.y ) { return p; }
						if ( hy === p.next.y ) { return p.next; }

					}

					m = p.x < p.next.x ? p : p.next;

				}

			}

			p = p.next;

		} while ( p !== outerNode );

		if ( ! m ) { return null; }

		if ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint

		// look for points inside the triangle of hole point, segment intersection and endpoint;
		// if there are no points found, we have a valid connection;
		// otherwise choose the point of the minimum angle with the ray as connection point

		var stop = m,
			mx = m.x,
			my = m.y,
			tanMin = Infinity,
			tan;

		p = m.next;

		while ( p !== stop ) {

			if ( hx >= p.x && p.x >= mx && hx !== p.x &&
					pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {

				tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential

				if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {

					m = p;
					tanMin = tan;

				}

			}

			p = p.next;

		}

		return m;

	}

	// interlink polygon nodes in z-order
	function indexCurve( start, minX, minY, invSize ) {

		var p = start;
		do {

			if ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;

		} while ( p !== start );

		p.prevZ.nextZ = null;
		p.prevZ = null;

		sortLinked( p );

	}

	// Simon Tatham's linked list merge sort algorithm
	// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
	function sortLinked( list ) {

		var i, p, q, e, tail, numMerges, pSize, qSize,
			inSize = 1;

		do {

			p = list;
			list = null;
			tail = null;
			numMerges = 0;

			while ( p ) {

				numMerges ++;
				q = p;
				pSize = 0;
				for ( i = 0; i < inSize; i ++ ) {

					pSize ++;
					q = q.nextZ;
					if ( ! q ) { break; }

				}

				qSize = inSize;

				while ( pSize > 0 || ( qSize > 0 && q ) ) {

					if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {

						e = p;
						p = p.nextZ;
						pSize --;

					} else {

						e = q;
						q = q.nextZ;
						qSize --;

					}

					if ( tail ) { tail.nextZ = e; }
					else { list = e; }

					e.prevZ = tail;
					tail = e;

				}

				p = q;

			}

			tail.nextZ = null;
			inSize *= 2;

		} while ( numMerges > 1 );

		return list;

	}

	// z-order of a point given coords and inverse of the longer side of data bbox
	function zOrder( x, y, minX, minY, invSize ) {

		// coords are transformed into non-negative 15-bit integer range
		x = 32767 * ( x - minX ) * invSize;
		y = 32767 * ( y - minY ) * invSize;

		x = ( x | ( x << 8 ) ) & 0x00FF00FF;
		x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
		x = ( x | ( x << 2 ) ) & 0x33333333;
		x = ( x | ( x << 1 ) ) & 0x55555555;

		y = ( y | ( y << 8 ) ) & 0x00FF00FF;
		y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
		y = ( y | ( y << 2 ) ) & 0x33333333;
		y = ( y | ( y << 1 ) ) & 0x55555555;

		return x | ( y << 1 );

	}

	// find the leftmost node of a polygon ring
	function getLeftmost( start ) {

		var p = start,
			leftmost = start;
		do {

			if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }
			p = p.next;

		} while ( p !== start );

		return leftmost;

	}

	// check if a point lies within a convex triangle
	function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {

		return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
			   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
			   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;

	}

	// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
	function isValidDiagonal( a, b ) {

		return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
			   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );

	}

	// signed area of a triangle
	function area( p, q, r ) {

		return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );

	}

	// check if two points are equal
	function equals( p1, p2 ) {

		return p1.x === p2.x && p1.y === p2.y;

	}

	// check if two segments intersect
	function intersects( p1, q1, p2, q2 ) {

		if ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||
			( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }
		return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
			   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;

	}

	// check if a polygon diagonal intersects any polygon segments
	function intersectsPolygon( a, b ) {

		var p = a;
		do {

			if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
					intersects( p, p.next, a, b ) ) { return true; }
			p = p.next;

		} while ( p !== a );

		return false;

	}

	// check if a polygon diagonal is locally inside the polygon
	function locallyInside( a, b ) {

		return area( a.prev, a, a.next ) < 0 ?
			area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
			area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;

	}

	// check if the middle point of a polygon diagonal is inside the polygon
	function middleInside( a, b ) {

		var p = a,
			inside = false,
			px = ( a.x + b.x ) / 2,
			py = ( a.y + b.y ) / 2;
		do {

			if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
					( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
				{ inside = ! inside; }
			p = p.next;

		} while ( p !== a );

		return inside;

	}

	// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
	// if one belongs to the outer ring and another to a hole, it merges it into a single ring
	function splitPolygon( a, b ) {

		var a2 = new Node( a.i, a.x, a.y ),
			b2 = new Node( b.i, b.x, b.y ),
			an = a.next,
			bp = b.prev;

		a.next = b;
		b.prev = a;

		a2.next = an;
		an.prev = a2;

		b2.next = a2;
		a2.prev = b2;

		bp.next = b2;
		b2.prev = bp;

		return b2;

	}

	// create a node and optionally link it with previous one (in a circular doubly linked list)
	function insertNode( i, x, y, last ) {

		var p = new Node( i, x, y );

		if ( ! last ) {

			p.prev = p;
			p.next = p;

		} else {

			p.next = last.next;
			p.prev = last;
			last.next.prev = p;
			last.next = p;

		}

		return p;

	}

	function removeNode( p ) {

		p.next.prev = p.prev;
		p.prev.next = p.next;

		if ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }
		if ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }

	}

	function Node( i, x, y ) {

		// vertex index in coordinates array
		this.i = i;

		// vertex coordinates
		this.x = x;
		this.y = y;

		// previous and next vertex nodes in a polygon ring
		this.prev = null;
		this.next = null;

		// z-order curve value
		this.z = null;

		// previous and next nodes in z-order
		this.prevZ = null;
		this.nextZ = null;

		// indicates whether this is a steiner point
		this.steiner = false;

	}

	function signedArea( data, start, end, dim ) {

		var sum = 0;
		for ( var i = start, j = end - dim; i < end; i += dim ) {

			sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
			j = i;

		}

		return sum;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */

	var ShapeUtils = {

		// calculate area of the contour polygon

		area: function ( contour ) {

			var n = contour.length;
			var a = 0.0;

			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

			}

			return a * 0.5;

		},

		isClockWise: function ( pts ) {

			return ShapeUtils.area( pts ) < 0;

		},

		triangulateShape: function ( contour, holes ) {

			var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
			var holeIndices = []; // array of hole indices
			var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]

			removeDupEndPts( contour );
			addContour( vertices, contour );

			//

			var holeIndex = contour.length;

			holes.forEach( removeDupEndPts );

			for ( var i = 0; i < holes.length; i ++ ) {

				holeIndices.push( holeIndex );
				holeIndex += holes[ i ].length;
				addContour( vertices, holes[ i ] );

			}

			//

			var triangles = Earcut.triangulate( vertices, holeIndices );

			//

			for ( var i = 0; i < triangles.length; i += 3 ) {

				faces.push( triangles.slice( i, i + 3 ) );

			}

			return faces;

		}

	};

	function removeDupEndPts( points ) {

		var l = points.length;

		if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {

			points.pop();

		}

	}

	function addContour( vertices, contour ) {

		for ( var i = 0; i < contour.length; i ++ ) {

			vertices.push( contour[ i ].x );
			vertices.push( contour[ i ].y );

		}

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  depth: <float>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
	 *  bevelOffset: <float>, // how far from shape outline does bevel start
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.Curve> // curve to extrude shape along
	 *
	 *  UVGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 */

	// ExtrudeGeometry

	function ExtrudeGeometry( shapes, options ) {

		Geometry.call( this );

		this.type = 'ExtrudeGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
		this.mergeVertices();

	}

	ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
	ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;

	ExtrudeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;
		var options = this.parameters.options;

		return toJSON( shapes, options, data );

	};

	// ExtrudeBufferGeometry

	function ExtrudeBufferGeometry( shapes, options ) {

		BufferGeometry.call( this );

		this.type = 'ExtrudeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			options: options
		};

		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];

		var scope = this;

		var verticesArray = [];
		var uvArray = [];

		for ( var i = 0, l = shapes.length; i < l; i ++ ) {

			var shape = shapes[ i ];
			addShape( shape );

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );

		this.computeVertexNormals();

		// functions

		function addShape( shape ) {

			var placeholder = [];

			// options

			var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
			var steps = options.steps !== undefined ? options.steps : 1;
			var depth = options.depth !== undefined ? options.depth : 100;

			var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
			var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
			var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
			var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
			var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

			var extrudePath = options.extrudePath;

			var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;

			// deprecated options

			if ( options.amount !== undefined ) {

				console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
				depth = options.amount;

			}

			//

			var extrudePts, extrudeByPath = false;
			var splineTube, binormal, normal, position2;

			if ( extrudePath ) {

				extrudePts = extrudePath.getSpacedPoints( steps );

				extrudeByPath = true;
				bevelEnabled = false; // bevels not supported for path extrusion

				// SETUP TNB variables

				// TODO1 - have a .isClosed in spline?

				splineTube = extrudePath.computeFrenetFrames( steps, false );

				// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

				binormal = new Vector3();
				normal = new Vector3();
				position2 = new Vector3();

			}

			// Safeguards if bevels are not enabled

			if ( ! bevelEnabled ) {

				bevelSegments = 0;
				bevelThickness = 0;
				bevelSize = 0;
				bevelOffset = 0;

			}

			// Variables initialization

			var ahole, h, hl; // looping of holes

			var shapePoints = shape.extractPoints( curveSegments );

			var vertices = shapePoints.shape;
			var holes = shapePoints.holes;

			var reverse = ! ShapeUtils.isClockWise( vertices );

			if ( reverse ) {

				vertices = vertices.reverse();

				// Maybe we should also check if holes are in the opposite direction, just to be safe ...

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];

					if ( ShapeUtils.isClockWise( ahole ) ) {

						holes[ h ] = ahole.reverse();

					}

				}

			}


			var faces = ShapeUtils.triangulateShape( vertices, holes );

			/* Vertices */

			var contour = vertices; // vertices has all points but contour has only points of circumference

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				vertices = vertices.concat( ahole );

			}


			function scalePt2( pt, vec, size ) {

				if ( ! vec ) { console.error( "THREE.ExtrudeGeometry: vec does not exist" ); }

				return vec.clone().multiplyScalar( size ).add( pt );

			}

			var b, bs, t, z,
				vert, vlen = vertices.length,
				face, flen = faces.length;


			// Find directions for point movement


			function getBevelVec( inPt, inPrev, inNext ) {

				// computes for inPt the corresponding point inPt' on a new contour
				//   shifted by 1 unit (length of normalized vector) to the left
				// if we walk along contour clockwise, this new contour is outside the old one
				//
				// inPt' is the intersection of the two lines parallel to the two
				//  adjacent edges of inPt at a distance of 1 unit on the left side.

				var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt

				// good reading for geometry algorithms (here: line-line intersection)
				// http://geomalgorithms.com/a05-_intersect-1.html

				var v_prev_x = inPt.x - inPrev.x,
					v_prev_y = inPt.y - inPrev.y;
				var v_next_x = inNext.x - inPt.x,
					v_next_y = inNext.y - inPt.y;

				var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );

				// check for collinear edges
				var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );

				if ( Math.abs( collinear0 ) > Number.EPSILON ) {

					// not collinear

					// length of vectors for normalizing

					var v_prev_len = Math.sqrt( v_prev_lensq );
					var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );

					// shift adjacent points by unit vectors to the left

					var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
					var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );

					var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
					var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );

					// scaling factor for v_prev to intersection point

					var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
						( v_prev_x * v_next_y - v_prev_y * v_next_x );

					// vector from inPt to intersection point

					v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
					v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );

					// Don't normalize!, otherwise sharp corners become ugly
					//  but prevent crazy spikes
					var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
					if ( v_trans_lensq <= 2 ) {

						return new Vector2( v_trans_x, v_trans_y );

					} else {

						shrink_by = Math.sqrt( v_trans_lensq / 2 );

					}

				} else {

					// handle special case of collinear edges

					var direction_eq = false; // assumes: opposite
					if ( v_prev_x > Number.EPSILON ) {

						if ( v_next_x > Number.EPSILON ) {

							direction_eq = true;

						}

					} else {

						if ( v_prev_x < - Number.EPSILON ) {

							if ( v_next_x < - Number.EPSILON ) {

								direction_eq = true;

							}

						} else {

							if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {

								direction_eq = true;

							}

						}

					}

					if ( direction_eq ) {

						// console.log("Warning: lines are a straight sequence");
						v_trans_x = - v_prev_y;
						v_trans_y = v_prev_x;
						shrink_by = Math.sqrt( v_prev_lensq );

					} else {

						// console.log("Warning: lines are a straight spike");
						v_trans_x = v_prev_x;
						v_trans_y = v_prev_y;
						shrink_by = Math.sqrt( v_prev_lensq / 2 );

					}

				}

				return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

			}


			var contourMovements = [];

			for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

				if ( j === il ) { j = 0; }
				if ( k === il ) { k = 0; }

				//  (j)---(i)---(k)
				// console.log('i,j,k', i, j , k)

				contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

			}

			var holesMovements = [],
				oneHoleMovements, verticesMovements = contourMovements.concat();

			for ( h = 0, hl = holes.length; h < hl; h ++ ) {

				ahole = holes[ h ];

				oneHoleMovements = [];

				for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

					if ( j === il ) { j = 0; }
					if ( k === il ) { k = 0; }

					//  (j)---(i)---(k)
					oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

				}

				holesMovements.push( oneHoleMovements );
				verticesMovements = verticesMovements.concat( oneHoleMovements );

			}


			// Loop bevelSegments, 1 for the front, 1 for the back

			for ( b = 0; b < bevelSegments; b ++ ) {

				//for ( b = bevelSegments; b > 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

					v( vert.x, vert.y, - z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						v( vert.x, vert.y, - z );

					}

				}

			}

			bs = bevelSize + bevelOffset;

			// Back facing vertices

			for ( i = 0; i < vlen; i ++ ) {

				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y, 0 );

				} else {

					// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

					normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );

					position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );

					v( position2.x, position2.y, position2.z );

				}

			}

			// Add stepped vertices...
			// Including front facing vertices

			var s;

			for ( s = 1; s <= steps; s ++ ) {

				for ( i = 0; i < vlen; i ++ ) {

					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

					if ( ! extrudeByPath ) {

						v( vert.x, vert.y, depth / steps * s );

					} else {

						// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

						normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );

						position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );

						v( position2.x, position2.y, position2.z );

					}

				}

			}


			// Add bevel segments planes

			//for ( b = 1; b <= bevelSegments; b ++ ) {
			for ( b = bevelSegments - 1; b >= 0; b -- ) {

				t = b / bevelSegments;
				z = bevelThickness * Math.cos( t * Math.PI / 2 );
				bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;

				// contract shape

				for ( i = 0, il = contour.length; i < il; i ++ ) {

					vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
					v( vert.x, vert.y, depth + z );

				}

				// expand holes

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					oneHoleMovements = holesMovements[ h ];

					for ( i = 0, il = ahole.length; i < il; i ++ ) {

						vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

						if ( ! extrudeByPath ) {

							v( vert.x, vert.y, depth + z );

						} else {

							v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

						}

					}

				}

			}

			/* Faces */

			// Top and bottom faces

			buildLidFaces();

			// Sides faces

			buildSideFaces();


			/////  Internal functions

			function buildLidFaces() {

				var start = verticesArray.length / 3;

				if ( bevelEnabled ) {

					var layer = 0; // steps + 1
					var offset = vlen * layer;

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );

					}

					layer = steps + bevelSegments * 2;
					offset = vlen * layer;

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

					}

				} else {

					// Bottom faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 2 ], face[ 1 ], face[ 0 ] );

					}

					// Top faces

					for ( i = 0; i < flen; i ++ ) {

						face = faces[ i ];
						f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

					}

				}

				scope.addGroup( start, verticesArray.length / 3 - start, 0 );

			}

			// Create faces for the z-sides of the shape

			function buildSideFaces() {

				var start = verticesArray.length / 3;
				var layeroffset = 0;
				sidewalls( contour, layeroffset );
				layeroffset += contour.length;

				for ( h = 0, hl = holes.length; h < hl; h ++ ) {

					ahole = holes[ h ];
					sidewalls( ahole, layeroffset );

					//, true
					layeroffset += ahole.length;

				}


				scope.addGroup( start, verticesArray.length / 3 - start, 1 );


			}

			function sidewalls( contour, layeroffset ) {

				var j, k;
				i = contour.length;

				while ( -- i >= 0 ) {

					j = i;
					k = i - 1;
					if ( k < 0 ) { k = contour.length - 1; }

					//console.log('b', i,j, i-1, k,vertices.length);

					var s = 0,
						sl = steps + bevelSegments * 2;

					for ( s = 0; s < sl; s ++ ) {

						var slen1 = vlen * s;
						var slen2 = vlen * ( s + 1 );

						var a = layeroffset + j + slen1,
							b = layeroffset + k + slen1,
							c = layeroffset + k + slen2,
							d = layeroffset + j + slen2;

						f4( a, b, c, d );

					}

				}

			}

			function v( x, y, z ) {

				placeholder.push( x );
				placeholder.push( y );
				placeholder.push( z );

			}


			function f3( a, b, c ) {

				addVertex( a );
				addVertex( b );
				addVertex( c );

				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );

			}

			function f4( a, b, c, d ) {

				addVertex( a );
				addVertex( b );
				addVertex( d );

				addVertex( b );
				addVertex( c );
				addVertex( d );


				var nextIndex = verticesArray.length / 3;
				var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );

				addUV( uvs[ 0 ] );
				addUV( uvs[ 1 ] );
				addUV( uvs[ 3 ] );

				addUV( uvs[ 1 ] );
				addUV( uvs[ 2 ] );
				addUV( uvs[ 3 ] );

			}

			function addVertex( index ) {

				verticesArray.push( placeholder[ index * 3 + 0 ] );
				verticesArray.push( placeholder[ index * 3 + 1 ] );
				verticesArray.push( placeholder[ index * 3 + 2 ] );

			}


			function addUV( vector2 ) {

				uvArray.push( vector2.x );
				uvArray.push( vector2.y );

			}

		}

	}

	ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;

	ExtrudeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;
		var options = this.parameters.options;

		return toJSON( shapes, options, data );

	};

	//

	var WorldUVGenerator = {

		generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];

			return [
				new Vector2( a_x, a_y ),
				new Vector2( b_x, b_y ),
				new Vector2( c_x, c_y )
			];

		},

		generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {

			var a_x = vertices[ indexA * 3 ];
			var a_y = vertices[ indexA * 3 + 1 ];
			var a_z = vertices[ indexA * 3 + 2 ];
			var b_x = vertices[ indexB * 3 ];
			var b_y = vertices[ indexB * 3 + 1 ];
			var b_z = vertices[ indexB * 3 + 2 ];
			var c_x = vertices[ indexC * 3 ];
			var c_y = vertices[ indexC * 3 + 1 ];
			var c_z = vertices[ indexC * 3 + 2 ];
			var d_x = vertices[ indexD * 3 ];
			var d_y = vertices[ indexD * 3 + 1 ];
			var d_z = vertices[ indexD * 3 + 2 ];

			if ( Math.abs( a_y - b_y ) < 0.01 ) {

				return [
					new Vector2( a_x, 1 - a_z ),
					new Vector2( b_x, 1 - b_z ),
					new Vector2( c_x, 1 - c_z ),
					new Vector2( d_x, 1 - d_z )
				];

			} else {

				return [
					new Vector2( a_y, 1 - a_z ),
					new Vector2( b_y, 1 - b_z ),
					new Vector2( c_y, 1 - c_z ),
					new Vector2( d_y, 1 - d_z )
				];

			}

		}
	};

	function toJSON( shapes, options, data ) {

		//

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		//

		if ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }

		return data;

	}

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * Text = 3D Text
	 *
	 * parameters = {
	 *  font: <THREE.Font>, // font
	 *
	 *  size: <float>, // size of the text
	 *  height: <float>, // thickness to extrude text
	 *  curveSegments: <int>, // number of points on the curves
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into text bevel goes
	 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
	 *  bevelOffset: <float> // how far from text outline does bevel start
	 * }
	 */

	// TextGeometry

	function TextGeometry( text, parameters ) {

		Geometry.call( this );

		this.type = 'TextGeometry';

		this.parameters = {
			text: text,
			parameters: parameters
		};

		this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
		this.mergeVertices();

	}

	TextGeometry.prototype = Object.create( Geometry.prototype );
	TextGeometry.prototype.constructor = TextGeometry;

	// TextBufferGeometry

	function TextBufferGeometry( text, parameters ) {

		parameters = parameters || {};

		var font = parameters.font;

		if ( ! ( font && font.isFont ) ) {

			console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
			return new Geometry();

		}

		var shapes = font.generateShapes( text, parameters.size );

		// translate parameters to ExtrudeGeometry API

		parameters.depth = parameters.height !== undefined ? parameters.height : 50;

		// defaults

		if ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }
		if ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }
		if ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }

		ExtrudeBufferGeometry.call( this, shapes, parameters );

		this.type = 'TextBufferGeometry';

	}

	TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
	TextBufferGeometry.prototype.constructor = TextBufferGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// SphereGeometry

	function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'SphereGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	SphereGeometry.prototype = Object.create( Geometry.prototype );
	SphereGeometry.prototype.constructor = SphereGeometry;

	// SphereBufferGeometry

	function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'SphereBufferGeometry';

		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;

		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

		var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );

		var ix, iy;

		var index = 0;
		var grid = [];

		var vertex = new Vector3();
		var normal = new Vector3();

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// generate vertices, normals and uvs

		for ( iy = 0; iy <= heightSegments; iy ++ ) {

			var verticesRow = [];

			var v = iy / heightSegments;

			// special case for the poles

			var uOffset = 0;

			if ( iy == 0 && thetaStart == 0 ) {

				uOffset = 0.5 / widthSegments;

			} else if ( iy == heightSegments && thetaEnd == Math.PI ) {

				uOffset = - 0.5 / widthSegments;

			}

			for ( ix = 0; ix <= widthSegments; ix ++ ) {

				var u = ix / widthSegments;

				// vertex

				vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
				vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normal.copy( vertex ).normalize();
				normals.push( normal.x, normal.y, normal.z );

				// uv

				uvs.push( u + uOffset, 1 - v );

				verticesRow.push( index ++ );

			}

			grid.push( verticesRow );

		}

		// indices

		for ( iy = 0; iy < heightSegments; iy ++ ) {

			for ( ix = 0; ix < widthSegments; ix ++ ) {

				var a = grid[ iy ][ ix + 1 ];
				var b = grid[ iy ][ ix ];
				var c = grid[ iy + 1 ][ ix ];
				var d = grid[ iy + 1 ][ ix + 1 ];

				if ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }
				if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;

	/**
	 * @author Kaleb Murphy
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// RingGeometry

	function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'RingGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	RingGeometry.prototype = Object.create( Geometry.prototype );
	RingGeometry.prototype.constructor = RingGeometry;

	// RingBufferGeometry

	function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'RingBufferGeometry';

		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		innerRadius = innerRadius || 0.5;
		outerRadius = outerRadius || 1;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// some helper variables

		var segment;
		var radius = innerRadius;
		var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
		var vertex = new Vector3();
		var uv = new Vector2();
		var j, i;

		// generate vertices, normals and uvs

		for ( j = 0; j <= phiSegments; j ++ ) {

			for ( i = 0; i <= thetaSegments; i ++ ) {

				// values are generate from the inside of the ring to the outside

				segment = thetaStart + i / thetaSegments * thetaLength;

				// vertex

				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );

				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, 0, 1 );

				// uv

				uv.x = ( vertex.x / outerRadius + 1 ) / 2;
				uv.y = ( vertex.y / outerRadius + 1 ) / 2;

				uvs.push( uv.x, uv.y );

			}

			// increase the radius for next row of vertices

			radius += radiusStep;

		}

		// indices

		for ( j = 0; j < phiSegments; j ++ ) {

			var thetaSegmentLevel = j * ( thetaSegments + 1 );

			for ( i = 0; i < thetaSegments; i ++ ) {

				segment = i + thetaSegmentLevel;

				var a = segment;
				var b = segment + thetaSegments + 1;
				var c = segment + thetaSegments + 2;
				var d = segment + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	RingBufferGeometry.prototype.constructor = RingBufferGeometry;

	/**
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// LatheGeometry

	function LatheGeometry( points, segments, phiStart, phiLength ) {

		Geometry.call( this );

		this.type = 'LatheGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
		this.mergeVertices();

	}

	LatheGeometry.prototype = Object.create( Geometry.prototype );
	LatheGeometry.prototype.constructor = LatheGeometry;

	// LatheBufferGeometry

	function LatheBufferGeometry( points, segments, phiStart, phiLength ) {

		BufferGeometry.call( this );

		this.type = 'LatheBufferGeometry';

		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};

		segments = Math.floor( segments ) || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || Math.PI * 2;

		// clamp phiLength so it's in range of [ 0, 2PI ]

		phiLength = _Math.clamp( phiLength, 0, Math.PI * 2 );


		// buffers

		var indices = [];
		var vertices = [];
		var uvs = [];

		// helper variables

		var base;
		var inverseSegments = 1.0 / segments;
		var vertex = new Vector3();
		var uv = new Vector2();
		var i, j;

		// generate vertices and uvs

		for ( i = 0; i <= segments; i ++ ) {

			var phi = phiStart + i * inverseSegments * phiLength;

			var sin = Math.sin( phi );
			var cos = Math.cos( phi );

			for ( j = 0; j <= ( points.length - 1 ); j ++ ) {

				// vertex

				vertex.x = points[ j ].x * sin;
				vertex.y = points[ j ].y;
				vertex.z = points[ j ].x * cos;

				vertices.push( vertex.x, vertex.y, vertex.z );

				// uv

				uv.x = i / segments;
				uv.y = j / ( points.length - 1 );

				uvs.push( uv.x, uv.y );


			}

		}

		// indices

		for ( i = 0; i < segments; i ++ ) {

			for ( j = 0; j < ( points.length - 1 ); j ++ ) {

				base = j + i * points.length;

				var a = base;
				var b = base + points.length;
				var c = base + points.length + 1;
				var d = base + 1;

				// faces

				indices.push( a, b, d );
				indices.push( b, c, d );

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		// generate normals

		this.computeVertexNormals();

		// if the geometry is closed, we need to average the normals along the seam.
		// because the corresponding vertices are identical (but still have different UVs).

		if ( phiLength === Math.PI * 2 ) {

			var normals = this.attributes.normal.array;
			var n1 = new Vector3();
			var n2 = new Vector3();
			var n = new Vector3();

			// this is the buffer offset for the last line of vertices

			base = segments * points.length * 3;

			for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {

				// select the normal of the vertex in the first line

				n1.x = normals[ j + 0 ];
				n1.y = normals[ j + 1 ];
				n1.z = normals[ j + 2 ];

				// select the normal of the vertex in the last line

				n2.x = normals[ base + j + 0 ];
				n2.y = normals[ base + j + 1 ];
				n2.z = normals[ base + j + 2 ];

				// average normals

				n.addVectors( n1, n2 ).normalize();

				// assign the new values to both normals

				normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
				normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
				normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;

			}

		}

	}

	LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;

	/**
	 * @author jonobr1 / http://jonobr1.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// ShapeGeometry

	function ShapeGeometry( shapes, curveSegments ) {

		Geometry.call( this );

		this.type = 'ShapeGeometry';

		if ( typeof curveSegments === 'object' ) {

			console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );

			curveSegments = curveSegments.curveSegments;

		}

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
		this.mergeVertices();

	}

	ShapeGeometry.prototype = Object.create( Geometry.prototype );
	ShapeGeometry.prototype.constructor = ShapeGeometry;

	ShapeGeometry.prototype.toJSON = function () {

		var data = Geometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON$1( shapes, data );

	};

	// ShapeBufferGeometry

	function ShapeBufferGeometry( shapes, curveSegments ) {

		BufferGeometry.call( this );

		this.type = 'ShapeBufferGeometry';

		this.parameters = {
			shapes: shapes,
			curveSegments: curveSegments
		};

		curveSegments = curveSegments || 12;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var groupStart = 0;
		var groupCount = 0;

		// allow single and array values for "shapes" parameter

		if ( Array.isArray( shapes ) === false ) {

			addShape( shapes );

		} else {

			for ( var i = 0; i < shapes.length; i ++ ) {

				addShape( shapes[ i ] );

				this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support

				groupStart += groupCount;
				groupCount = 0;

			}

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );


		// helper functions

		function addShape( shape ) {

			var i, l, shapeHole;

			var indexOffset = vertices.length / 3;
			var points = shape.extractPoints( curveSegments );

			var shapeVertices = points.shape;
			var shapeHoles = points.holes;

			// check direction of vertices

			if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {

				shapeVertices = shapeVertices.reverse();

			}

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];

				if ( ShapeUtils.isClockWise( shapeHole ) === true ) {

					shapeHoles[ i ] = shapeHole.reverse();

				}

			}

			var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );

			// join vertices of inner and outer paths to a single array

			for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {

				shapeHole = shapeHoles[ i ];
				shapeVertices = shapeVertices.concat( shapeHole );

			}

			// vertices, normals, uvs

			for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {

				var vertex = shapeVertices[ i ];

				vertices.push( vertex.x, vertex.y, 0 );
				normals.push( 0, 0, 1 );
				uvs.push( vertex.x, vertex.y ); // world uvs

			}

			// incides

			for ( i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				var a = face[ 0 ] + indexOffset;
				var b = face[ 1 ] + indexOffset;
				var c = face[ 2 ] + indexOffset;

				indices.push( a, b, c );
				groupCount += 3;

			}

		}

	}

	ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;

	ShapeBufferGeometry.prototype.toJSON = function () {

		var data = BufferGeometry.prototype.toJSON.call( this );

		var shapes = this.parameters.shapes;

		return toJSON$1( shapes, data );

	};

	//

	function toJSON$1( shapes, data ) {

		data.shapes = [];

		if ( Array.isArray( shapes ) ) {

			for ( var i = 0, l = shapes.length; i < l; i ++ ) {

				var shape = shapes[ i ];

				data.shapes.push( shape.uuid );

			}

		} else {

			data.shapes.push( shapes.uuid );

		}

		return data;

	}

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	function EdgesGeometry( geometry, thresholdAngle ) {

		BufferGeometry.call( this );

		this.type = 'EdgesGeometry';

		this.parameters = {
			thresholdAngle: thresholdAngle
		};

		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;

		// buffer

		var vertices = [];

		// helper variables

		var thresholdDot = Math.cos( _Math.DEG2RAD * thresholdAngle );
		var edge = [ 0, 0 ], edges = {}, edge1, edge2;
		var key, keys = [ 'a', 'b', 'c' ];

		// prepare source geometry

		var geometry2;

		if ( geometry.isBufferGeometry ) {

			geometry2 = new Geometry();
			geometry2.fromBufferGeometry( geometry );

		} else {

			geometry2 = geometry.clone();

		}

		geometry2.mergeVertices();
		geometry2.computeFaceNormals();

		var sourceVertices = geometry2.vertices;
		var faces = geometry2.faces;

		// now create a data structure where each entry represents an edge with its adjoining faces

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge1 = face[ keys[ j ] ];
				edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
				edge[ 0 ] = Math.min( edge1, edge2 );
				edge[ 1 ] = Math.max( edge1, edge2 );

				key = edge[ 0 ] + ',' + edge[ 1 ];

				if ( edges[ key ] === undefined ) {

					edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };

				} else {

					edges[ key ].face2 = i;

				}

			}

		}

		// generate vertices

		for ( key in edges ) {

			var e = edges[ key ];

			// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.

			if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {

				var vertex = sourceVertices[ e.index1 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

				vertex = sourceVertices[ e.index2 ];
				vertices.push( vertex.x, vertex.y, vertex.z );

			}

		}

		// build geometry

		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );

	}

	EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
	EdgesGeometry.prototype.constructor = EdgesGeometry;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	// CylinderGeometry

	function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CylinderGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CylinderGeometry.prototype = Object.create( Geometry.prototype );
	CylinderGeometry.prototype.constructor = CylinderGeometry;

	// CylinderBufferGeometry

	function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CylinderBufferGeometry';

		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		var scope = this;

		radiusTop = radiusTop !== undefined ? radiusTop : 1;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
		height = height || 1;

		radialSegments = Math.floor( radialSegments ) || 8;
		heightSegments = Math.floor( heightSegments ) || 1;

		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var index = 0;
		var indexArray = [];
		var halfHeight = height / 2;
		var groupStart = 0;

		// generate geometry

		generateTorso();

		if ( openEnded === false ) {

			if ( radiusTop > 0 ) { generateCap( true ); }
			if ( radiusBottom > 0 ) { generateCap( false ); }

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		function generateTorso() {

			var x, y;
			var normal = new Vector3();
			var vertex = new Vector3();

			var groupCount = 0;

			// this will be used to calculate the normal
			var slope = ( radiusBottom - radiusTop ) / height;

			// generate vertices, normals and uvs

			for ( y = 0; y <= heightSegments; y ++ ) {

				var indexRow = [];

				var v = y / heightSegments;

				// calculate the radius of the current row

				var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

				for ( x = 0; x <= radialSegments; x ++ ) {

					var u = x / radialSegments;

					var theta = u * thetaLength + thetaStart;

					var sinTheta = Math.sin( theta );
					var cosTheta = Math.cos( theta );

					// vertex

					vertex.x = radius * sinTheta;
					vertex.y = - v * height + halfHeight;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );

					// normal

					normal.set( sinTheta, slope, cosTheta ).normalize();
					normals.push( normal.x, normal.y, normal.z );

					// uv

					uvs.push( u, 1 - v );

					// save index of vertex in respective row

					indexRow.push( index ++ );

				}

				// now save vertices of the row in our index array

				indexArray.push( indexRow );

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				for ( y = 0; y < heightSegments; y ++ ) {

					// we use the index array to access the correct indices

					var a = indexArray[ y ][ x ];
					var b = indexArray[ y + 1 ][ x ];
					var c = indexArray[ y + 1 ][ x + 1 ];
					var d = indexArray[ y ][ x + 1 ];

					// faces

					indices.push( a, b, d );
					indices.push( b, c, d );

					// update group counter

					groupCount += 6;

				}

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, 0 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

		function generateCap( top ) {

			var x, centerIndexStart, centerIndexEnd;

			var uv = new Vector2();
			var vertex = new Vector3();

			var groupCount = 0;

			var radius = ( top === true ) ? radiusTop : radiusBottom;
			var sign = ( top === true ) ? 1 : - 1;

			// save the index of the first center vertex
			centerIndexStart = index;

			// first we generate the center vertex data of the cap.
			// because the geometry needs one set of uvs per face,
			// we must generate a center vertex per face/segment

			for ( x = 1; x <= radialSegments; x ++ ) {

				// vertex

				vertices.push( 0, halfHeight * sign, 0 );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uvs.push( 0.5, 0.5 );

				// increase index

				index ++;

			}

			// save the index of the last center vertex

			centerIndexEnd = index;

			// now we generate the surrounding vertices, normals and uvs

			for ( x = 0; x <= radialSegments; x ++ ) {

				var u = x / radialSegments;
				var theta = u * thetaLength + thetaStart;

				var cosTheta = Math.cos( theta );
				var sinTheta = Math.sin( theta );

				// vertex

				vertex.x = radius * sinTheta;
				vertex.y = halfHeight * sign;
				vertex.z = radius * cosTheta;
				vertices.push( vertex.x, vertex.y, vertex.z );

				// normal

				normals.push( 0, sign, 0 );

				// uv

				uv.x = ( cosTheta * 0.5 ) + 0.5;
				uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
				uvs.push( uv.x, uv.y );

				// increase index

				index ++;

			}

			// generate indices

			for ( x = 0; x < radialSegments; x ++ ) {

				var c = centerIndexStart + x;
				var i = centerIndexEnd + x;

				if ( top === true ) {

					// face top

					indices.push( i, i + 1, c );

				} else {

					// face bottom

					indices.push( i + 1, i, c );

				}

				groupCount += 3;

			}

			// add a group to the geometry. this will ensure multi material support

			scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );

			// calculate new start value for groups

			groupStart += groupCount;

		}

	}

	CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	// ConeGeometry

	function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
	ConeGeometry.prototype.constructor = ConeGeometry;

	// ConeBufferGeometry

	function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {

		CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );

		this.type = 'ConeBufferGeometry';

		this.parameters = {
			radius: radius,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

	}

	ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
	ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * @author Mugen87 / https://github.com/Mugen87
	 * @author hughes
	 */

	// CircleGeometry

	function CircleGeometry( radius, segments, thetaStart, thetaLength ) {

		Geometry.call( this );

		this.type = 'CircleGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
		this.mergeVertices();

	}

	CircleGeometry.prototype = Object.create( Geometry.prototype );
	CircleGeometry.prototype.constructor = CircleGeometry;

	// CircleBufferGeometry

	function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {

		BufferGeometry.call( this );

		this.type = 'CircleBufferGeometry';

		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};

		radius = radius || 1;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;

		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

		// buffers

		var indices = [];
		var vertices = [];
		var normals = [];
		var uvs = [];

		// helper variables

		var i, s;
		var vertex = new Vector3();
		var uv = new Vector2();

		// center point

		vertices.push( 0, 0, 0 );
		normals.push( 0, 0, 1 );
		uvs.push( 0.5, 0.5 );

		for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {

			var segment = thetaStart + s / segments * thetaLength;

			// vertex

			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			vertices.push( vertex.x, vertex.y, vertex.z );

			// normal

			normals.push( 0, 0, 1 );

			// uvs

			uv.x = ( vertices[ i ] / radius + 1 ) / 2;
			uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;

			uvs.push( uv.x, uv.y );

		}

		// indices

		for ( i = 1; i <= segments; i ++ ) {

			indices.push( i, i + 1, 0 );

		}

		// build geometry

		this.setIndex( indices );
		this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
		this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

	}

	CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
	CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;



	var Geometries = /*#__PURE__*/Object.freeze({
		__proto__: null,
		WireframeGeometry: WireframeGeometry,
		ParametricGeometry: ParametricGeometry,
		ParametricBufferGeometry: ParametricBufferGeometry,
		TetrahedronGeometry: TetrahedronGeometry,
		TetrahedronBufferGeometry: TetrahedronBufferGeometry,
		OctahedronGeometry: OctahedronGeometry,
		OctahedronBufferGeometry: OctahedronBufferGeometry,
		IcosahedronGeometry: IcosahedronGeometry,
		IcosahedronBufferGeometry: IcosahedronBufferGeometry,
		DodecahedronGeometry: DodecahedronGeometry,
		DodecahedronBufferGeometry: DodecahedronBufferGeometry,
		PolyhedronGeometry: PolyhedronGeometry,
		PolyhedronBufferGeometry: PolyhedronBufferGeometry,
		TubeGeometry: TubeGeometry,
		TubeBufferGeometry: TubeBufferGeometry,
		TorusKnotGeometry: TorusKnotGeometry,
		TorusKnotBufferGeometry: TorusKnotBufferGeometry,
		TorusGeometry: TorusGeometry,
		TorusBufferGeometry: TorusBufferGeometry,
		TextGeometry: TextGeometry,
		TextBufferGeometry: TextBufferGeometry,
		SphereGeometry: SphereGeometry,
		SphereBufferGeometry: SphereBufferGeometry,
		RingGeometry: RingGeometry,
		RingBufferGeometry: RingBufferGeometry,
		PlaneGeometry: PlaneGeometry,
		PlaneBufferGeometry: PlaneBufferGeometry,
		LatheGeometry: LatheGeometry,
		LatheBufferGeometry: LatheBufferGeometry,
		ShapeGeometry: ShapeGeometry,
		ShapeBufferGeometry: ShapeBufferGeometry,
		ExtrudeGeometry: ExtrudeGeometry,
		ExtrudeBufferGeometry: ExtrudeBufferGeometry,
		EdgesGeometry: EdgesGeometry,
		ConeGeometry: ConeGeometry,
		ConeBufferGeometry: ConeBufferGeometry,
		CylinderGeometry: CylinderGeometry,
		CylinderBufferGeometry: CylinderBufferGeometry,
		CircleGeometry: CircleGeometry,
		CircleBufferGeometry: CircleBufferGeometry,
		BoxGeometry: BoxGeometry,
		BoxBufferGeometry: BoxBufferGeometry
	});

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  color: <THREE.Color>
	 * }
	 */

	function ShadowMaterial( parameters ) {

		Material.call( this );

		this.type = 'ShadowMaterial';

		this.color = new Color( 0x000000 );
		this.transparent = true;

		this.setValues( parameters );

	}

	ShadowMaterial.prototype = Object.create( Material.prototype );
	ShadowMaterial.prototype.constructor = ShadowMaterial;

	ShadowMaterial.prototype.isShadowMaterial = true;

	ShadowMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function RawShaderMaterial( parameters ) {

		ShaderMaterial.call( this, parameters );

		this.type = 'RawShaderMaterial';

	}

	RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
	RawShaderMaterial.prototype.constructor = RawShaderMaterial;

	RawShaderMaterial.prototype.isRawShaderMaterial = true;

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  roughness: <float>,
	 *  metalness: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  roughnessMap: new THREE.Texture( <Image> ),
	 *
	 *  metalnessMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  envMapIntensity: <float>
	 *
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshStandardMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'STANDARD': '' };

		this.type = 'MeshStandardMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.roughness = 0.5;
		this.metalness = 0.5;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.roughnessMap = null;

		this.metalnessMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.envMapIntensity = 1.0;

		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshStandardMaterial.prototype = Object.create( Material.prototype );
	MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;

	MeshStandardMaterial.prototype.isMeshStandardMaterial = true;

	MeshStandardMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'STANDARD': '' };

		this.color.copy( source.color );
		this.roughness = source.roughness;
		this.metalness = source.metalness;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.roughnessMap = source.roughnessMap;

		this.metalnessMap = source.metalnessMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.envMapIntensity = source.envMapIntensity;

		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  reflectivity: <float>
	 *  clearcoat: <float>
	 *  clearcoatRoughness: <float>
	 *
	 *  sheen: <Color>
	 *
	 *  clearcoatNormalScale: <Vector2>,
	 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
	 * }
	 */

	function MeshPhysicalMaterial( parameters ) {

		MeshStandardMaterial.call( this );

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.type = 'MeshPhysicalMaterial';

		this.reflectivity = 0.5; // maps to F0 = 0.04

		this.clearcoat = 0.0;
		this.clearcoatRoughness = 0.0;

		this.sheen = null; // null will disable sheen bsdf

		this.clearcoatNormalScale = new Vector2( 1, 1 );
		this.clearcoatNormalMap = null;

		this.transparency = 0.0;

		this.setValues( parameters );

	}

	MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
	MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;

	MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;

	MeshPhysicalMaterial.prototype.copy = function ( source ) {

		MeshStandardMaterial.prototype.copy.call( this, source );

		this.defines = {

			'STANDARD': '',
			'PHYSICAL': ''

		};

		this.reflectivity = source.reflectivity;

		this.clearcoat = source.clearcoat;
		this.clearcoatRoughness = source.clearcoatRoughness;

		if ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }
		else { this.sheen = null; }

		this.clearcoatNormalMap = source.clearcoatNormalMap;
		this.clearcoatNormalScale.copy( source.clearcoatNormalScale );

		this.transparency = source.transparency;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.MultiplyOperation,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshPhongMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshPhongMaterial';

		this.color = new Color( 0xffffff ); // diffuse
		this.specular = new Color( 0x111111 );
		this.shininess = 30;

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshPhongMaterial.prototype = Object.create( Material.prototype );
	MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;

	MeshPhongMaterial.prototype.isMeshPhongMaterial = true;

	MeshPhongMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author takahirox / http://github.com/takahirox
	 *
	 * parameters = {
	 *  gradientMap: new THREE.Texture( <Image> )
	 * }
	 */

	function MeshToonMaterial( parameters ) {

		MeshPhongMaterial.call( this );

		this.defines = { 'TOON': '' };

		this.type = 'MeshToonMaterial';

		this.gradientMap = null;

		this.setValues( parameters );

	}

	MeshToonMaterial.prototype = Object.create( MeshPhongMaterial.prototype );
	MeshToonMaterial.prototype.constructor = MeshToonMaterial;

	MeshToonMaterial.prototype.isMeshToonMaterial = true;

	MeshToonMaterial.prototype.copy = function ( source ) {

		MeshPhongMaterial.prototype.copy.call( this, source );

		this.gradientMap = source.gradientMap;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshNormalMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshNormalMaterial';

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.wireframe = false;
		this.wireframeLinewidth = 1;

		this.fog = false;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshNormalMaterial.prototype = Object.create( Material.prototype );
	MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;

	MeshNormalMaterial.prototype.isMeshNormalMaterial = true;

	MeshNormalMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissive: <hex>,
	 *  emissiveIntensity: <float>
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshLambertMaterial( parameters ) {

		Material.call( this );

		this.type = 'MeshLambertMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.map = null;

		this.lightMap = null;
		this.lightMapIntensity = 1.0;

		this.aoMap = null;
		this.aoMapIntensity = 1.0;

		this.emissive = new Color( 0x000000 );
		this.emissiveIntensity = 1.0;
		this.emissiveMap = null;

		this.specularMap = null;

		this.alphaMap = null;

		this.envMap = null;
		this.combine = MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;

		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshLambertMaterial.prototype = Object.create( Material.prototype );
	MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;

	MeshLambertMaterial.prototype.isMeshLambertMaterial = true;

	MeshLambertMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.color.copy( source.color );

		this.map = source.map;

		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;

		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;

		this.emissive.copy( source.emissive );
		this.emissiveMap = source.emissiveMap;
		this.emissiveIntensity = source.emissiveIntensity;

		this.specularMap = source.specularMap;

		this.alphaMap = source.alphaMap;

		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;

		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  matcap: new THREE.Texture( <Image> ),
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalMapType: THREE.TangentSpaceNormalMap,
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>
	 * }
	 */

	function MeshMatcapMaterial( parameters ) {

		Material.call( this );

		this.defines = { 'MATCAP': '' };

		this.type = 'MeshMatcapMaterial';

		this.color = new Color( 0xffffff ); // diffuse

		this.matcap = null;

		this.map = null;

		this.bumpMap = null;
		this.bumpScale = 1;

		this.normalMap = null;
		this.normalMapType = TangentSpaceNormalMap;
		this.normalScale = new Vector2( 1, 1 );

		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;

		this.alphaMap = null;

		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;

		this.setValues( parameters );

	}

	MeshMatcapMaterial.prototype = Object.create( Material.prototype );
	MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;

	MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;

	MeshMatcapMaterial.prototype.copy = function ( source ) {

		Material.prototype.copy.call( this, source );

		this.defines = { 'MATCAP': '' };

		this.color.copy( source.color );

		this.matcap = source.matcap;

		this.map = source.map;

		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;

		this.normalMap = source.normalMap;
		this.normalMapType = source.normalMapType;
		this.normalScale.copy( source.normalScale );

		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;

		this.alphaMap = source.alphaMap;

		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;

		return this;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>
	 * }
	 */

	function LineDashedMaterial( parameters ) {

		LineBasicMaterial.call( this );

		this.type = 'LineDashedMaterial';

		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;

		this.setValues( parameters );

	}

	LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
	LineDashedMaterial.prototype.constructor = LineDashedMaterial;

	LineDashedMaterial.prototype.isLineDashedMaterial = true;

	LineDashedMaterial.prototype.copy = function ( source ) {

		LineBasicMaterial.prototype.copy.call( this, source );

		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;

		return this;

	};



	var Materials = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ShadowMaterial: ShadowMaterial,
		SpriteMaterial: SpriteMaterial,
		RawShaderMaterial: RawShaderMaterial,
		ShaderMaterial: ShaderMaterial,
		PointsMaterial: PointsMaterial,
		MeshPhysicalMaterial: MeshPhysicalMaterial,
		MeshStandardMaterial: MeshStandardMaterial,
		MeshPhongMaterial: MeshPhongMaterial,
		MeshToonMaterial: MeshToonMaterial,
		MeshNormalMaterial: MeshNormalMaterial,
		MeshLambertMaterial: MeshLambertMaterial,
		MeshDepthMaterial: MeshDepthMaterial,
		MeshDistanceMaterial: MeshDistanceMaterial,
		MeshBasicMaterial: MeshBasicMaterial,
		MeshMatcapMaterial: MeshMatcapMaterial,
		LineDashedMaterial: LineDashedMaterial,
		LineBasicMaterial: LineBasicMaterial,
		Material: Material
	});

	/**
	 * @author tschw
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	var AnimationUtils = {

		// same as Array.prototype.slice, but also works on typed arrays
		arraySlice: function ( array, from, to ) {

			if ( AnimationUtils.isTypedArray( array ) ) {

				// in ios9 array.subarray(from, undefined) will return empty array
				// but array.subarray(from) or array.subarray(from, len) is correct
				return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );

			}

			return array.slice( from, to );

		},

		// converts an array to a specific type
		convertArray: function ( array, type, forceClone ) {

			if ( ! array || // let 'undefined' and 'null' pass
				! forceClone && array.constructor === type ) { return array; }

			if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {

				return new type( array ); // create typed array

			}

			return Array.prototype.slice.call( array ); // create Array

		},

		isTypedArray: function ( object ) {

			return ArrayBuffer.isView( object ) &&
				! ( object instanceof DataView );

		},

		// returns an array by which times and values can be sorted
		getKeyframeOrder: function ( times ) {

			function compareTime( i, j ) {

				return times[ i ] - times[ j ];

			}

			var n = times.length;
			var result = new Array( n );
			for ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }

			result.sort( compareTime );

			return result;

		},

		// uses the array previously returned by 'getKeyframeOrder' to sort data
		sortedArray: function ( values, stride, order ) {

			var nValues = values.length;
			var result = new values.constructor( nValues );

			for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {

				var srcOffset = order[ i ] * stride;

				for ( var j = 0; j !== stride; ++ j ) {

					result[ dstOffset ++ ] = values[ srcOffset + j ];

				}

			}

			return result;

		},

		// function for parsing AOS keyframe formats
		flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {

			var i = 1, key = jsonKeys[ 0 ];

			while ( key !== undefined && key[ valuePropertyName ] === undefined ) {

				key = jsonKeys[ i ++ ];

			}

			if ( key === undefined ) { return; } // no data

			var value = key[ valuePropertyName ];
			if ( value === undefined ) { return; } // no data

			if ( Array.isArray( value ) ) {

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push.apply( values, value ); // push all elements

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else if ( value.toArray !== undefined ) {

				// ...assume THREE.Math-ish

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						value.toArray( values, values.length );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			} else {

				// otherwise push as-is

				do {

					value = key[ valuePropertyName ];

					if ( value !== undefined ) {

						times.push( key.time );
						values.push( value );

					}

					key = jsonKeys[ i ++ ];

				} while ( key !== undefined );

			}

		},

		subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {

			fps = fps || 30;

			var clip = sourceClip.clone();

			clip.name = name;

			var tracks = [];

			for ( var i = 0; i < clip.tracks.length; ++ i ) {

				var track = clip.tracks[ i ];
				var valueSize = track.getValueSize();

				var times = [];
				var values = [];

				for ( var j = 0; j < track.times.length; ++ j ) {

					var frame = track.times[ j ] * fps;

					if ( frame < startFrame || frame >= endFrame ) { continue; }

					times.push( track.times[ j ] );

					for ( var k = 0; k < valueSize; ++ k ) {

						values.push( track.values[ j * valueSize + k ] );

					}

				}

				if ( times.length === 0 ) { continue; }

				track.times = AnimationUtils.convertArray( times, track.times.constructor );
				track.values = AnimationUtils.convertArray( values, track.values.constructor );

				tracks.push( track );

			}

			clip.tracks = tracks;

			// find minimum .times value across all tracks in the trimmed clip

			var minStartTime = Infinity;

			for ( var i = 0; i < clip.tracks.length; ++ i ) {

				if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {

					minStartTime = clip.tracks[ i ].times[ 0 ];

				}

			}

			// shift all tracks such that clip begins at t=0

			for ( var i = 0; i < clip.tracks.length; ++ i ) {

				clip.tracks[ i ].shift( - 1 * minStartTime );

			}

			clip.resetDuration();

			return clip;

		}

	};

	/**
	 * Abstract base class of interpolants over parametric samples.
	 *
	 * The parameter domain is one dimensional, typically the time or a path
	 * along a curve defined by the data.
	 *
	 * The sample values can have any dimensionality and derived classes may
	 * apply special interpretations to the data.
	 *
	 * This class provides the interval seek in a Template Method, deferring
	 * the actual interpolation to derived classes.
	 *
	 * Time complexity is O(1) for linear access crossing at most two points
	 * and O(log N) for random access, where N is the number of positions.
	 *
	 * References:
	 *
	 * 		http://www.oodesign.com/template-method-pattern.html
	 *
	 * @author tschw
	 */

	function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		this.parameterPositions = parameterPositions;
		this._cachedIndex = 0;

		this.resultBuffer = resultBuffer !== undefined ?
			resultBuffer : new sampleValues.constructor( sampleSize );
		this.sampleValues = sampleValues;
		this.valueSize = sampleSize;

	}

	Object.assign( Interpolant.prototype, {

		evaluate: function ( t ) {

			var pp = this.parameterPositions,
				i1 = this._cachedIndex,

				t1 = pp[ i1 ],
				t0 = pp[ i1 - 1 ];

			validate_interval: {

				seek: {

					var right;

					linear_scan: {

						//- See http://jsperf.com/comparison-to-undefined/3
						//- slower code:
						//-
						//- 				if ( t >= t1 || t1 === undefined ) {
						forward_scan: if ( ! ( t < t1 ) ) {

							for ( var giveUpAt = i1 + 2; ; ) {

								if ( t1 === undefined ) {

									if ( t < t0 ) { break forward_scan; }

									// after end

									i1 = pp.length;
									this._cachedIndex = i1;
									return this.afterEnd_( i1 - 1, t, t0 );

								}

								if ( i1 === giveUpAt ) { break; } // this loop

								t0 = t1;
								t1 = pp[ ++ i1 ];

								if ( t < t1 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the right side of the index
							right = pp.length;
							break linear_scan;

						}

						//- slower code:
						//-					if ( t < t0 || t0 === undefined ) {
						if ( ! ( t >= t0 ) ) {

							// looping?

							var t1global = pp[ 1 ];

							if ( t < t1global ) {

								i1 = 2; // + 1, using the scan for the details
								t0 = t1global;

							}

							// linear reverse scan

							for ( var giveUpAt = i1 - 2; ; ) {

								if ( t0 === undefined ) {

									// before start

									this._cachedIndex = 0;
									return this.beforeStart_( 0, t, t1 );

								}

								if ( i1 === giveUpAt ) { break; } // this loop

								t1 = t0;
								t0 = pp[ -- i1 - 1 ];

								if ( t >= t0 ) {

									// we have arrived at the sought interval
									break seek;

								}

							}

							// prepare binary search on the left side of the index
							right = i1;
							i1 = 0;
							break linear_scan;

						}

						// the interval is valid

						break validate_interval;

					} // linear scan

					// binary search

					while ( i1 < right ) {

						var mid = ( i1 + right ) >>> 1;

						if ( t < pp[ mid ] ) {

							right = mid;

						} else {

							i1 = mid + 1;

						}

					}

					t1 = pp[ i1 ];
					t0 = pp[ i1 - 1 ];

					// check boundary cases, again

					if ( t0 === undefined ) {

						this._cachedIndex = 0;
						return this.beforeStart_( 0, t, t1 );

					}

					if ( t1 === undefined ) {

						i1 = pp.length;
						this._cachedIndex = i1;
						return this.afterEnd_( i1 - 1, t0, t );

					}

				} // seek

				this._cachedIndex = i1;

				this.intervalChanged_( i1, t0, t1 );

			} // validate_interval

			return this.interpolate_( i1, t0, t, t1 );

		},

		settings: null, // optional, subclass-specific settings structure
		// Note: The indirection allows central control of many interpolants.

		// --- Protected interface

		DefaultSettings_: {},

		getSettings_: function () {

			return this.settings || this.DefaultSettings_;

		},

		copySampleValue_: function ( index ) {

			// copies a sample value to the result buffer

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,
				offset = index * stride;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] = values[ offset + i ];

			}

			return result;

		},

		// Template methods for derived classes:

		interpolate_: function ( /* i1, t0, t, t1 */ ) {

			throw new Error( 'call to abstract method' );
			// implementations shall return this.resultBuffer

		},

		intervalChanged_: function ( /* i1, t0, t1 */ ) {

			// empty

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( Interpolant.prototype, {

		//( 0, t, t0 ), returns this.resultBuffer
		beforeStart_: Interpolant.prototype.copySampleValue_,

		//( N-1, tN-1, t ), returns this.resultBuffer
		afterEnd_: Interpolant.prototype.copySampleValue_,

	} );

	/**
	 * Fast and simple cubic spline interpolant.
	 *
	 * It was derived from a Hermitian construction setting the first derivative
	 * at each sample position to the linear slope between neighboring positions
	 * over their parameter interval.
	 *
	 * @author tschw
	 */

	function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

		this._weightPrev = - 0;
		this._offsetPrev = - 0;
		this._weightNext = - 0;
		this._offsetNext = - 0;

	}

	CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: CubicInterpolant,

		DefaultSettings_: {

			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding

		},

		intervalChanged_: function ( i1, t0, t1 ) {

			var pp = this.parameterPositions,
				iPrev = i1 - 2,
				iNext = i1 + 1,

				tPrev = pp[ iPrev ],
				tNext = pp[ iNext ];

			if ( tPrev === undefined ) {

				switch ( this.getSettings_().endingStart ) {

					case ZeroSlopeEnding:

						// f'(t0) = 0
						iPrev = i1;
						tPrev = 2 * t0 - t1;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iPrev = pp.length - 2;
						tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(t0) = 0 a.k.a. Natural Spline
						iPrev = i1;
						tPrev = t1;

				}

			}

			if ( tNext === undefined ) {

				switch ( this.getSettings_().endingEnd ) {

					case ZeroSlopeEnding:

						// f'(tN) = 0
						iNext = i1;
						tNext = 2 * t1 - t0;

						break;

					case WrapAroundEnding:

						// use the other end of the curve
						iNext = 1;
						tNext = t1 + pp[ 1 ] - pp[ 0 ];

						break;

					default: // ZeroCurvatureEnding

						// f''(tN) = 0, a.k.a. Natural Spline
						iNext = i1 - 1;
						tNext = t0;

				}

			}

			var halfDt = ( t1 - t0 ) * 0.5,
				stride = this.valueSize;

			this._weightPrev = halfDt / ( t0 - tPrev );
			this._weightNext = halfDt / ( tNext - t1 );
			this._offsetPrev = iPrev * stride;
			this._offsetNext = iNext * stride;

		},

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				o1 = i1 * stride,		o0 = o1 - stride,
				oP = this._offsetPrev, 	oN = this._offsetNext,
				wP = this._weightPrev,	wN = this._weightNext,

				p = ( t - t0 ) / ( t1 - t0 ),
				pp = p * p,
				ppp = pp * p;

			// evaluate polynomials

			var sP = - wP * ppp + 2 * wP * pp - wP * p;
			var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
			var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
			var sN = wN * ppp - wN * pp;

			// combine data linearly

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						sP * values[ oP + i ] +
						s0 * values[ o0 + i ] +
						s1 * values[ o1 + i ] +
						sN * values[ oN + i ];

			}

			return result;

		}

	} );

	/**
	 * @author tschw
	 */

	function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: LinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset1 = i1 * stride,
				offset0 = offset1 - stride,

				weight1 = ( t - t0 ) / ( t1 - t0 ),
				weight0 = 1 - weight1;

			for ( var i = 0; i !== stride; ++ i ) {

				result[ i ] =
						values[ offset0 + i ] * weight0 +
						values[ offset1 + i ] * weight1;

			}

			return result;

		}

	} );

	/**
	 *
	 * Interpolant that evaluates to the sample value at the position preceeding
	 * the parameter.
	 *
	 * @author tschw
	 */

	function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: DiscreteInterpolant,

		interpolate_: function ( i1 /*, t0, t, t1 */ ) {

			return this.copySampleValue_( i1 - 1 );

		}

	} );

	/**
	 *
	 * A timed sequence of keyframes for a specific property.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function KeyframeTrack( name, times, values, interpolation ) {

		if ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }
		if ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }

		this.name = name;

		this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
		this.values = AnimationUtils.convertArray( values, this.ValueBufferType );

		this.setInterpolation( interpolation || this.DefaultInterpolation );

	}

	// Static methods

	Object.assign( KeyframeTrack, {

		// Serialization (in static context, because of constructor invocation
		// and automatic invocation of .toJSON):

		toJSON: function ( track ) {

			var trackType = track.constructor;

			var json;

			// derived classes can define a static toJSON method
			if ( trackType.toJSON !== undefined ) {

				json = trackType.toJSON( track );

			} else {

				// by default, we assume the data can be serialized as-is
				json = {

					'name': track.name,
					'times': AnimationUtils.convertArray( track.times, Array ),
					'values': AnimationUtils.convertArray( track.values, Array )

				};

				var interpolation = track.getInterpolation();

				if ( interpolation !== track.DefaultInterpolation ) {

					json.interpolation = interpolation;

				}

			}

			json.type = track.ValueTypeName; // mandatory

			return json;

		}

	} );

	Object.assign( KeyframeTrack.prototype, {

		constructor: KeyframeTrack,

		TimeBufferType: Float32Array,

		ValueBufferType: Float32Array,

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodDiscrete: function ( result ) {

			return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodLinear: function ( result ) {

			return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: function ( result ) {

			return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		setInterpolation: function ( interpolation ) {

			var factoryMethod;

			switch ( interpolation ) {

				case InterpolateDiscrete:

					factoryMethod = this.InterpolantFactoryMethodDiscrete;

					break;

				case InterpolateLinear:

					factoryMethod = this.InterpolantFactoryMethodLinear;

					break;

				case InterpolateSmooth:

					factoryMethod = this.InterpolantFactoryMethodSmooth;

					break;

			}

			if ( factoryMethod === undefined ) {

				var message = "unsupported interpolation for " +
					this.ValueTypeName + " keyframe track named " + this.name;

				if ( this.createInterpolant === undefined ) {

					// fall back to default, unless the default itself is messed up
					if ( interpolation !== this.DefaultInterpolation ) {

						this.setInterpolation( this.DefaultInterpolation );

					} else {

						throw new Error( message ); // fatal, in this case

					}

				}

				console.warn( 'THREE.KeyframeTrack:', message );
				return this;

			}

			this.createInterpolant = factoryMethod;

			return this;

		},

		getInterpolation: function () {

			switch ( this.createInterpolant ) {

				case this.InterpolantFactoryMethodDiscrete:

					return InterpolateDiscrete;

				case this.InterpolantFactoryMethodLinear:

					return InterpolateLinear;

				case this.InterpolantFactoryMethodSmooth:

					return InterpolateSmooth;

			}

		},

		getValueSize: function () {

			return this.values.length / this.times.length;

		},

		// move all keyframes either forwards or backwards in time
		shift: function ( timeOffset ) {

			if ( timeOffset !== 0.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] += timeOffset;

				}

			}

			return this;

		},

		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function ( timeScale ) {

			if ( timeScale !== 1.0 ) {

				var times = this.times;

				for ( var i = 0, n = times.length; i !== n; ++ i ) {

					times[ i ] *= timeScale;

				}

			}

			return this;

		},

		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
		trim: function ( startTime, endTime ) {

			var times = this.times,
				nKeys = times.length,
				from = 0,
				to = nKeys - 1;

			while ( from !== nKeys && times[ from ] < startTime ) {

				++ from;

			}

			while ( to !== - 1 && times[ to ] > endTime ) {

				-- to;

			}

			++ to; // inclusive -> exclusive bound

			if ( from !== 0 || to !== nKeys ) {

				// empty tracks are forbidden, so keep at least one keyframe
				if ( from >= to ) { to = Math.max( to, 1 ), from = to - 1; }

				var stride = this.getValueSize();
				this.times = AnimationUtils.arraySlice( times, from, to );
				this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );

			}

			return this;

		},

		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		validate: function () {

			var valid = true;

			var valueSize = this.getValueSize();
			if ( valueSize - Math.floor( valueSize ) !== 0 ) {

				console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
				valid = false;

			}

			var times = this.times,
				values = this.values,

				nKeys = times.length;

			if ( nKeys === 0 ) {

				console.error( 'THREE.KeyframeTrack: Track is empty.', this );
				valid = false;

			}

			var prevTime = null;

			for ( var i = 0; i !== nKeys; i ++ ) {

				var currTime = times[ i ];

				if ( typeof currTime === 'number' && isNaN( currTime ) ) {

					console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
					valid = false;
					break;

				}

				if ( prevTime !== null && prevTime > currTime ) {

					console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
					valid = false;
					break;

				}

				prevTime = currTime;

			}

			if ( values !== undefined ) {

				if ( AnimationUtils.isTypedArray( values ) ) {

					for ( var i = 0, n = values.length; i !== n; ++ i ) {

						var value = values[ i ];

						if ( isNaN( value ) ) {

							console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
							valid = false;
							break;

						}

					}

				}

			}

			return valid;

		},

		// removes equivalent sequential keys as common in morph target sequences
		// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
		optimize: function () {

			var times = this.times,
				values = this.values,
				stride = this.getValueSize(),

				smoothInterpolation = this.getInterpolation() === InterpolateSmooth,

				writeIndex = 1,
				lastIndex = times.length - 1;

			for ( var i = 1; i < lastIndex; ++ i ) {

				var keep = false;

				var time = times[ i ];
				var timeNext = times[ i + 1 ];

				// remove adjacent keyframes scheduled at the same time

				if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {

					if ( ! smoothInterpolation ) {

						// remove unnecessary keyframes same as their neighbors

						var offset = i * stride,
							offsetP = offset - stride,
							offsetN = offset + stride;

						for ( var j = 0; j !== stride; ++ j ) {

							var value = values[ offset + j ];

							if ( value !== values[ offsetP + j ] ||
								value !== values[ offsetN + j ] ) {

								keep = true;
								break;

							}

						}

					} else {

						keep = true;

					}

				}

				// in-place compaction

				if ( keep ) {

					if ( i !== writeIndex ) {

						times[ writeIndex ] = times[ i ];

						var readOffset = i * stride,
							writeOffset = writeIndex * stride;

						for ( var j = 0; j !== stride; ++ j ) {

							values[ writeOffset + j ] = values[ readOffset + j ];

						}

					}

					++ writeIndex;

				}

			}

			// flush last keyframe (compaction looks ahead)

			if ( lastIndex > 0 ) {

				times[ writeIndex ] = times[ lastIndex ];

				for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {

					values[ writeOffset + j ] = values[ readOffset + j ];

				}

				++ writeIndex;

			}

			if ( writeIndex !== times.length ) {

				this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
				this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );

			}

			return this;

		},

		clone: function () {

			var times = AnimationUtils.arraySlice( this.times, 0 );
			var values = AnimationUtils.arraySlice( this.values, 0 );

			var TypedKeyframeTrack = this.constructor;
			var track = new TypedKeyframeTrack( this.name, times, values );

			// Interpolant argument to constructor is not saved, so copy the factory method directly.
			track.createInterpolant = this.createInterpolant;

			return track;

		}

	} );

	/**
	 *
	 * A Track of Boolean keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function BooleanKeyframeTrack( name, times, values ) {

		KeyframeTrack.call( this, name, times, values );

	}

	BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: BooleanKeyframeTrack,

		ValueTypeName: 'bool',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,
		InterpolantFactoryMethodSmooth: undefined

		// Note: Actually this track could have a optimized / compressed
		// representation of a single value and a custom interpolant that
		// computes "firstValue ^ isOdd( index )".

	} );

	/**
	 *
	 * A Track of keyframe values that represent color.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function ColorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: ColorKeyframeTrack,

		ValueTypeName: 'color'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

		// Note: Very basic implementation and nothing special yet.
		// However, this is the place for color space parameterization.

	} );

	/**
	 *
	 * A Track of numeric keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function NumberKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: NumberKeyframeTrack,

		ValueTypeName: 'number'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 * Spherical linear unit quaternion interpolant.
	 *
	 * @author tschw
	 */

	function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {

		Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );

	}

	QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {

		constructor: QuaternionLinearInterpolant,

		interpolate_: function ( i1, t0, t, t1 ) {

			var result = this.resultBuffer,
				values = this.sampleValues,
				stride = this.valueSize,

				offset = i1 * stride,

				alpha = ( t - t0 ) / ( t1 - t0 );

			for ( var end = offset + stride; offset !== end; offset += 4 ) {

				Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );

			}

			return result;

		}

	} );

	/**
	 *
	 * A Track of quaternion keyframe values.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function QuaternionKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: QuaternionKeyframeTrack,

		ValueTypeName: 'quaternion',

		// ValueBufferType is inherited

		DefaultInterpolation: InterpolateLinear,

		InterpolantFactoryMethodLinear: function ( result ) {

			return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );

		},

		InterpolantFactoryMethodSmooth: undefined // not yet implemented

	} );

	/**
	 *
	 * A Track that interpolates Strings
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function StringKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: StringKeyframeTrack,

		ValueTypeName: 'string',
		ValueBufferType: Array,

		DefaultInterpolation: InterpolateDiscrete,

		InterpolantFactoryMethodLinear: undefined,

		InterpolantFactoryMethodSmooth: undefined

	} );

	/**
	 *
	 * A Track of vectored keyframe values.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function VectorKeyframeTrack( name, times, values, interpolation ) {

		KeyframeTrack.call( this, name, times, values, interpolation );

	}

	VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {

		constructor: VectorKeyframeTrack,

		ValueTypeName: 'vector'

		// ValueBufferType is inherited

		// DefaultInterpolation is inherited

	} );

	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */

	function AnimationClip( name, duration, tracks ) {

		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : - 1;

		this.uuid = _Math.generateUUID();

		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {

			this.resetDuration();

		}

	}

	function getTrackTypeForValueTypeName( typeName ) {

		switch ( typeName.toLowerCase() ) {

			case 'scalar':
			case 'double':
			case 'float':
			case 'number':
			case 'integer':

				return NumberKeyframeTrack;

			case 'vector':
			case 'vector2':
			case 'vector3':
			case 'vector4':

				return VectorKeyframeTrack;

			case 'color':

				return ColorKeyframeTrack;

			case 'quaternion':

				return QuaternionKeyframeTrack;

			case 'bool':
			case 'boolean':

				return BooleanKeyframeTrack;

			case 'string':

				return StringKeyframeTrack;

		}

		throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );

	}

	function parseKeyframeTrack( json ) {

		if ( json.type === undefined ) {

			throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );

		}

		var trackType = getTrackTypeForValueTypeName( json.type );

		if ( json.times === undefined ) {

			var times = [], values = [];

			AnimationUtils.flattenJSON( json.keys, times, values, 'value' );

			json.times = times;
			json.values = values;

		}

		// derived classes can define a static parse method
		if ( trackType.parse !== undefined ) {

			return trackType.parse( json );

		} else {

			// by default, we assume a constructor compatible with the base
			return new trackType( json.name, json.times, json.values, json.interpolation );

		}

	}

	Object.assign( AnimationClip, {

		parse: function ( json ) {

			var tracks = [],
				jsonTracks = json.tracks,
				frameTime = 1.0 / ( json.fps || 1.0 );

			for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {

				tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );

			}

			return new AnimationClip( json.name, json.duration, tracks );

		},

		toJSON: function ( clip ) {

			var tracks = [],
				clipTracks = clip.tracks;

			var json = {

				'name': clip.name,
				'duration': clip.duration,
				'tracks': tracks,
				'uuid': clip.uuid

			};

			for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {

				tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );

			}

			return json;

		},

		CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {

			var numMorphTargets = morphTargetSequence.length;
			var tracks = [];

			for ( var i = 0; i < numMorphTargets; i ++ ) {

				var times = [];
				var values = [];

				times.push(
					( i + numMorphTargets - 1 ) % numMorphTargets,
					i,
					( i + 1 ) % numMorphTargets );

				values.push( 0, 1, 0 );

				var order = AnimationUtils.getKeyframeOrder( times );
				times = AnimationUtils.sortedArray( times, 1, order );
				values = AnimationUtils.sortedArray( values, 1, order );

				// if there is a key at the first frame, duplicate it as the
				// last frame as well for perfect loop.
				if ( ! noLoop && times[ 0 ] === 0 ) {

					times.push( numMorphTargets );
					values.push( values[ 0 ] );

				}

				tracks.push(
					new NumberKeyframeTrack(
						'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
						times, values
					).scale( 1.0 / fps ) );

			}

			return new AnimationClip( name, - 1, tracks );

		},

		findByName: function ( objectOrClipArray, name ) {

			var clipArray = objectOrClipArray;

			if ( ! Array.isArray( objectOrClipArray ) ) {

				var o = objectOrClipArray;
				clipArray = o.geometry && o.geometry.animations || o.animations;

			}

			for ( var i = 0; i < clipArray.length; i ++ ) {

				if ( clipArray[ i ].name === name ) {

					return clipArray[ i ];

				}

			}

			return null;

		},

		CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {

			var animationToMorphTargets = {};

			// tested with https://regex101.com/ on trick sequences
			// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
			var pattern = /^([\w-]*?)([\d]+)$/;

			// sort morph target names into animation groups based
			// patterns like Walk_001, Walk_002, Run_001, Run_002
			for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {

				var morphTarget = morphTargets[ i ];
				var parts = morphTarget.name.match( pattern );

				if ( parts && parts.length > 1 ) {

					var name = parts[ 1 ];

					var animationMorphTargets = animationToMorphTargets[ name ];
					if ( ! animationMorphTargets ) {

						animationToMorphTargets[ name ] = animationMorphTargets = [];

					}

					animationMorphTargets.push( morphTarget );

				}

			}

			var clips = [];

			for ( var name in animationToMorphTargets ) {

				clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );

			}

			return clips;

		},

		// parse the animation.hierarchy format
		parseAnimation: function ( animation, bones ) {

			if ( ! animation ) {

				console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
				return null;

			}

			var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {

				// only return track if there are actually keys.
				if ( animationKeys.length !== 0 ) {

					var times = [];
					var values = [];

					AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );

					// empty keys are filtered out, so check again
					if ( times.length !== 0 ) {

						destTracks.push( new trackType( trackName, times, values ) );

					}

				}

			};

			var tracks = [];

			var clipName = animation.name || 'default';
			// automatic length determination in AnimationClip.
			var duration = animation.length || - 1;
			var fps = animation.fps || 30;

			var hierarchyTracks = animation.hierarchy || [];

			for ( var h = 0; h < hierarchyTracks.length; h ++ ) {

				var animationKeys = hierarchyTracks[ h ].keys;

				// skip empty tracks
				if ( ! animationKeys || animationKeys.length === 0 ) { continue; }

				// process morph targets
				if ( animationKeys[ 0 ].morphTargets ) {

					// figure out all morph targets used in this track
					var morphTargetNames = {};

					for ( var k = 0; k < animationKeys.length; k ++ ) {

						if ( animationKeys[ k ].morphTargets ) {

							for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {

								morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;

							}

						}

					}

					// create a track for each morph target with all zero
					// morphTargetInfluences except for the keys in which
					// the morphTarget is named.
					for ( var morphTargetName in morphTargetNames ) {

						var times = [];
						var values = [];

						for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {

							var animationKey = animationKeys[ k ];

							times.push( animationKey.time );
							values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );

						}

						tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );

					}

					duration = morphTargetNames.length * ( fps || 1.0 );

				} else {

					// ...assume skeletal animation

					var boneName = '.bones[' + bones[ h ].name + ']';

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.position',
						animationKeys, 'pos', tracks );

					addNonemptyTrack(
						QuaternionKeyframeTrack, boneName + '.quaternion',
						animationKeys, 'rot', tracks );

					addNonemptyTrack(
						VectorKeyframeTrack, boneName + '.scale',
						animationKeys, 'scl', tracks );

				}

			}

			if ( tracks.length === 0 ) {

				return null;

			}

			var clip = new AnimationClip( clipName, duration, tracks );

			return clip;

		}

	} );

	Object.assign( AnimationClip.prototype, {

		resetDuration: function () {

			var tracks = this.tracks, duration = 0;

			for ( var i = 0, n = tracks.length; i !== n; ++ i ) {

				var track = this.tracks[ i ];

				duration = Math.max( duration, track.times[ track.times.length - 1 ] );

			}

			this.duration = duration;

			return this;

		},

		trim: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].trim( 0, this.duration );

			}

			return this;

		},

		validate: function () {

			var valid = true;

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				valid = valid && this.tracks[ i ].validate();

			}

			return valid;

		},

		optimize: function () {

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				this.tracks[ i ].optimize();

			}

			return this;

		},

		clone: function () {

			var tracks = [];

			for ( var i = 0; i < this.tracks.length; i ++ ) {

				tracks.push( this.tracks[ i ].clone() );

			}

			return new AnimationClip( this.name, this.duration, tracks );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var Cache = {

		enabled: false,

		files: {},

		add: function ( key, file ) {

			if ( this.enabled === false ) { return; }

			// console.log( 'THREE.Cache', 'Adding key:', key );

			this.files[ key ] = file;

		},

		get: function ( key ) {

			if ( this.enabled === false ) { return; }

			// console.log( 'THREE.Cache', 'Checking key:', key );

			return this.files[ key ];

		},

		remove: function ( key ) {

			delete this.files[ key ];

		},

		clear: function () {

			this.files = {};

		}

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LoadingManager( onLoad, onProgress, onError ) {

		var scope = this;

		var isLoading = false;
		var itemsLoaded = 0;
		var itemsTotal = 0;
		var urlModifier = undefined;
		var handlers = [];

		// Refer to #5689 for the reason why we don't set .onStart
		// in the constructor

		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;

		this.itemStart = function ( url ) {

			itemsTotal ++;

			if ( isLoading === false ) {

				if ( scope.onStart !== undefined ) {

					scope.onStart( url, itemsLoaded, itemsTotal );

				}

			}

			isLoading = true;

		};

		this.itemEnd = function ( url ) {

			itemsLoaded ++;

			if ( scope.onProgress !== undefined ) {

				scope.onProgress( url, itemsLoaded, itemsTotal );

			}

			if ( itemsLoaded === itemsTotal ) {

				isLoading = false;

				if ( scope.onLoad !== undefined ) {

					scope.onLoad();

				}

			}

		};

		this.itemError = function ( url ) {

			if ( scope.onError !== undefined ) {

				scope.onError( url );

			}

		};

		this.resolveURL = function ( url ) {

			if ( urlModifier ) {

				return urlModifier( url );

			}

			return url;

		};

		this.setURLModifier = function ( transform ) {

			urlModifier = transform;

			return this;

		};

		this.addHandler = function ( regex, loader ) {

			handlers.push( regex, loader );

			return this;

		};

		this.removeHandler = function ( regex ) {

			var index = handlers.indexOf( regex );

			if ( index !== - 1 ) {

				handlers.splice( index, 2 );

			}

			return this;

		};

		this.getHandler = function ( file ) {

			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {

				var regex = handlers[ i ];
				var loader = handlers[ i + 1 ];

				if ( regex.global ) { regex.lastIndex = 0; } // see #17920

				if ( regex.test( file ) ) {

					return loader;

				}

			}

			return null;

		};

	}

	var DefaultLoadingManager = new LoadingManager();

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Loader( manager ) {

		this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;

		this.crossOrigin = 'anonymous';
		this.path = '';
		this.resourcePath = '';

	}

	Object.assign( Loader.prototype, {

		load: function ( /* url, onLoad, onProgress, onError */ ) {},

		parse: function ( /* data */ ) {},

		setCrossOrigin: function ( crossOrigin ) {

			this.crossOrigin = crossOrigin;
			return this;

		},

		setPath: function ( path ) {

			this.path = path;
			return this;

		},

		setResourcePath: function ( resourcePath ) {

			this.resourcePath = resourcePath;
			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var loading = {};

	function FileLoader( manager ) {

		Loader.call( this, manager );

	}

	FileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: FileLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) { url = ''; }

			if ( this.path !== undefined ) { url = this.path + url; }

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) { onLoad( cached ); }

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			// Check if request is duplicate

			if ( loading[ url ] !== undefined ) {

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				return;

			}

			// Check for data: URI
			var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
			var dataUriRegexResult = url.match( dataUriRegex );

			// Safari can not handle Data URIs through XMLHttpRequest so process manually
			if ( dataUriRegexResult ) {

				var mimeType = dataUriRegexResult[ 1 ];
				var isBase64 = !! dataUriRegexResult[ 2 ];
				var data = dataUriRegexResult[ 3 ];

				data = decodeURIComponent( data );

				if ( isBase64 ) { data = atob( data ); }

				try {

					var response;
					var responseType = ( this.responseType || '' ).toLowerCase();

					switch ( responseType ) {

						case 'arraybuffer':
						case 'blob':

							var view = new Uint8Array( data.length );

							for ( var i = 0; i < data.length; i ++ ) {

								view[ i ] = data.charCodeAt( i );

							}

							if ( responseType === 'blob' ) {

								response = new Blob( [ view.buffer ], { type: mimeType } );

							} else {

								response = view.buffer;

							}

							break;

						case 'document':

							var parser = new DOMParser();
							response = parser.parseFromString( data, mimeType );

							break;

						case 'json':

							response = JSON.parse( data );

							break;

						default: // 'text' or other

							response = data;

							break;

					}

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					setTimeout( function () {

						if ( onLoad ) { onLoad( response ); }

						scope.manager.itemEnd( url );

					}, 0 );

				} catch ( error ) {

					// Wait for next browser tick like standard XMLHttpRequest event dispatching does
					setTimeout( function () {

						if ( onError ) { onError( error ); }

						scope.manager.itemError( url );
						scope.manager.itemEnd( url );

					}, 0 );

				}

			} else {

				// Initialise array for duplicate requests

				loading[ url ] = [];

				loading[ url ].push( {

					onLoad: onLoad,
					onProgress: onProgress,
					onError: onError

				} );

				var request = new XMLHttpRequest();

				request.open( 'GET', url, true );

				request.addEventListener( 'load', function ( event ) {

					var response = this.response;

					var callbacks = loading[ url ];

					delete loading[ url ];

					if ( this.status === 200 || this.status === 0 ) {

						// Some browsers return HTTP Status 0 when using non-http protocol
						// e.g. 'file://' or 'data://'. Handle as success.

						if ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }

						// Add to cache only on HTTP success, so that we do not cache
						// error response bodies as proper responses to requests.
						Cache.add( url, response );

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onLoad ) { callback.onLoad( response ); }

						}

						scope.manager.itemEnd( url );

					} else {

						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

							var callback = callbacks[ i ];
							if ( callback.onError ) { callback.onError( event ); }

						}

						scope.manager.itemError( url );
						scope.manager.itemEnd( url );

					}

				}, false );

				request.addEventListener( 'progress', function ( event ) {

					var callbacks = loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onProgress ) { callback.onProgress( event ); }

					}

				}, false );

				request.addEventListener( 'error', function ( event ) {

					var callbacks = loading[ url ];

					delete loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) { callback.onError( event ); }

					}

					scope.manager.itemError( url );
					scope.manager.itemEnd( url );

				}, false );

				request.addEventListener( 'abort', function ( event ) {

					var callbacks = loading[ url ];

					delete loading[ url ];

					for ( var i = 0, il = callbacks.length; i < il; i ++ ) {

						var callback = callbacks[ i ];
						if ( callback.onError ) { callback.onError( event ); }

					}

					scope.manager.itemError( url );
					scope.manager.itemEnd( url );

				}, false );

				if ( this.responseType !== undefined ) { request.responseType = this.responseType; }
				if ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }

				if ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }

				for ( var header in this.requestHeader ) {

					request.setRequestHeader( header, this.requestHeader[ header ] );

				}

				request.send( null );

			}

			scope.manager.itemStart( url );

			return request;

		},

		setResponseType: function ( value ) {

			this.responseType = value;
			return this;

		},

		setWithCredentials: function ( value ) {

			this.withCredentials = value;
			return this;

		},

		setMimeType: function ( value ) {

			this.mimeType = value;
			return this;

		},

		setRequestHeader: function ( value ) {

			this.requestHeader = value;
			return this;

		}

	} );

	/**
	 * @author bhouston / http://clara.io/
	 */

	function AnimationLoader( manager ) {

		Loader.call( this, manager );

	}

	AnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: AnimationLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var clip = AnimationClip.parse( json[ i ] );

				animations.push( clip );

			}

			return animations;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	function CompressedTextureLoader( manager ) {

		Loader.call( this, manager );

	}

	CompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: CompressedTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var images = [];

			var texture = new CompressedTexture();
			texture.image = images;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.setResponseType( 'arraybuffer' );

			function loadTexture( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope.parse( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

						if ( texDatas.mipmapCount === 1 )
							{ texture.minFilter = LinearFilter; }

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) { onLoad( texture ); }

					}

				}, onProgress, onError );

			}

			if ( Array.isArray( url ) ) {

				var loaded = 0;

				for ( var i = 0, il = url.length; i < il; ++ i ) {

					loadTexture( i );

				}

			} else {

				// compressed cubemap texture stored in a single DDS file

				loader.load( url, function ( buffer ) {

					var texDatas = scope.parse( buffer, true );

					if ( texDatas.isCubemap ) {

						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

						for ( var f = 0; f < faces; f ++ ) {

							images[ f ] = { mipmaps: [] };

							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;

							}

						}

					} else {

						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;

					}

					if ( texDatas.mipmapCount === 1 ) {

						texture.minFilter = LinearFilter;

					}

					texture.format = texDatas.format;
					texture.needsUpdate = true;

					if ( onLoad ) { onLoad( texture ); }

				}, onProgress, onError );

			}

			return texture;

		}

	} );

	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 *
	 * Sub classes have to implement the parse() method which will be used in load().
	 */

	function DataTextureLoader( manager ) {

		Loader.call( this, manager );

	}

	DataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: DataTextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var texture = new DataTexture();

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.setPath( this.path );
			loader.load( url, function ( buffer ) {

				var texData = scope.parse( buffer );

				if ( ! texData ) { return; }

				if ( texData.image !== undefined ) {

					texture.image = texData.image;

				} else if ( texData.data !== undefined ) {

					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;

				}

				texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
				texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;

				texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
				texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;

				texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;

				if ( texData.format !== undefined ) {

					texture.format = texData.format;

				}
				if ( texData.type !== undefined ) {

					texture.type = texData.type;

				}

				if ( texData.mipmaps !== undefined ) {

					texture.mipmaps = texData.mipmaps;
					texture.minFilter = LinearMipmapLinearFilter; // presumably...

				}

				if ( texData.mipmapCount === 1 ) {

					texture.minFilter = LinearFilter;

				}

				texture.needsUpdate = true;

				if ( onLoad ) { onLoad( texture, texData ); }

			}, onProgress, onError );


			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ImageLoader( manager ) {

		Loader.call( this, manager );

	}

	ImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: ImageLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			if ( this.path !== undefined ) { url = this.path + url; }

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) { onLoad( cached ); }

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );

			function onImageLoad() {

				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );

				Cache.add( url, this );

				if ( onLoad ) { onLoad( this ); }

				scope.manager.itemEnd( url );

			}

			function onImageError( event ) {

				image.removeEventListener( 'load', onImageLoad, false );
				image.removeEventListener( 'error', onImageError, false );

				if ( onError ) { onError( event ); }

				scope.manager.itemError( url );
				scope.manager.itemEnd( url );

			}

			image.addEventListener( 'load', onImageLoad, false );
			image.addEventListener( 'error', onImageError, false );

			if ( url.substr( 0, 5 ) !== 'data:' ) {

				if ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }

			}

			scope.manager.itemStart( url );

			image.src = url;

			return image;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function CubeTextureLoader( manager ) {

		Loader.call( this, manager );

	}

	CubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: CubeTextureLoader,

		load: function ( urls, onLoad, onProgress, onError ) {

			var texture = new CubeTexture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			var loaded = 0;

			function loadTexture( i ) {

				loader.load( urls[ i ], function ( image ) {

					texture.images[ i ] = image;

					loaded ++;

					if ( loaded === 6 ) {

						texture.needsUpdate = true;

						if ( onLoad ) { onLoad( texture ); }

					}

				}, undefined, onError );

			}

			for ( var i = 0; i < urls.length; ++ i ) {

				loadTexture( i );

			}

			return texture;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function TextureLoader( manager ) {

		Loader.call( this, manager );

	}

	TextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: TextureLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var texture = new Texture();

			var loader = new ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setPath( this.path );

			loader.load( url, function ( image ) {

				texture.image = image;

				// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
				var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;

				texture.format = isJPEG ? RGBFormat : RGBAFormat;
				texture.needsUpdate = true;

				if ( onLoad !== undefined ) {

					onLoad( texture );

				}

			}, onProgress, onError );

			return texture;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of curve methods:
	 * .getPoint( t, optionalTarget ), .getTangent( t )
	 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following curves inherit from THREE.Curve:
	 *
	 * -- 2D curves --
	 * THREE.ArcCurve
	 * THREE.CubicBezierCurve
	 * THREE.EllipseCurve
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.SplineCurve
	 *
	 * -- 3D curves --
	 * THREE.CatmullRomCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath.
	 *
	 **/

	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/

	function Curve() {

		this.type = 'Curve';

		this.arcLengthDivisions = 200;

	}

	Object.assign( Curve.prototype, {

		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]

		getPoint: function ( /* t, optionalTarget */ ) {

			console.warn( 'THREE.Curve: .getPoint() not implemented.' );
			return null;

		},

		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]

		getPointAt: function ( u, optionalTarget ) {

			var t = this.getUtoTmapping( u );
			return this.getPoint( t, optionalTarget );

		},

		// Get sequence of points using getPoint( t )

		getPoints: function ( divisions ) {

			if ( divisions === undefined ) { divisions = 5; }

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPoint( d / divisions ) );

			}

			return points;

		},

		// Get sequence of points using getPointAt( u )

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) { divisions = 5; }

			var points = [];

			for ( var d = 0; d <= divisions; d ++ ) {

				points.push( this.getPointAt( d / divisions ) );

			}

			return points;

		},

		// Get total curve arc length

		getLength: function () {

			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];

		},

		// Get list of cumulative segment lengths

		getLengths: function ( divisions ) {

			if ( divisions === undefined ) { divisions = this.arcLengthDivisions; }

			if ( this.cacheArcLengths &&
				( this.cacheArcLengths.length === divisions + 1 ) &&
				! this.needsUpdate ) {

				return this.cacheArcLengths;

			}

			this.needsUpdate = false;

			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;

			cache.push( 0 );

			for ( p = 1; p <= divisions; p ++ ) {

				current = this.getPoint( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;

			}

			this.cacheArcLengths = cache;

			return cache; // { sums: cache, sum: sum }; Sum is in the last element.

		},

		updateArcLengths: function () {

			this.needsUpdate = true;
			this.getLengths();

		},

		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant

		getUtoTmapping: function ( u, distance ) {

			var arcLengths = this.getLengths();

			var i = 0, il = arcLengths.length;

			var targetArcLength; // The targeted u distance value to get

			if ( distance ) {

				targetArcLength = distance;

			} else {

				targetArcLength = u * arcLengths[ il - 1 ];

			}

			// binary search for the index with largest value smaller than target u distance

			var low = 0, high = il - 1, comparison;

			while ( low <= high ) {

				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

				comparison = arcLengths[ i ] - targetArcLength;

				if ( comparison < 0 ) {

					low = i + 1;

				} else if ( comparison > 0 ) {

					high = i - 1;

				} else {

					high = i;
					break;

					// DONE

				}

			}

			i = high;

			if ( arcLengths[ i ] === targetArcLength ) {

				return i / ( il - 1 );

			}

			// we could get finer grain at lengths, or use simple interpolation between two points

			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];

			var segmentLength = lengthAfter - lengthBefore;

			// determine where we are between the 'before' and 'after' points

			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

			// add that fractional amount to t

			var t = ( i + segmentFraction ) / ( il - 1 );

			return t;

		},

		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation

		getTangent: function ( t ) {

			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;

			// Capping in case of danger

			if ( t1 < 0 ) { t1 = 0; }
			if ( t2 > 1 ) { t2 = 1; }

			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );

			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();

		},

		getTangentAt: function ( u ) {

			var t = this.getUtoTmapping( u );
			return this.getTangent( t );

		},

		computeFrenetFrames: function ( segments, closed ) {

			// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf

			var normal = new Vector3();

			var tangents = [];
			var normals = [];
			var binormals = [];

			var vec = new Vector3();
			var mat = new Matrix4();

			var i, u, theta;

			// compute the tangent vectors for each segment on the curve

			for ( i = 0; i <= segments; i ++ ) {

				u = i / segments;

				tangents[ i ] = this.getTangentAt( u );
				tangents[ i ].normalize();

			}

			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the minimum tangent xyz component

			normals[ 0 ] = new Vector3();
			binormals[ 0 ] = new Vector3();
			var min = Number.MAX_VALUE;
			var tx = Math.abs( tangents[ 0 ].x );
			var ty = Math.abs( tangents[ 0 ].y );
			var tz = Math.abs( tangents[ 0 ].z );

			if ( tx <= min ) {

				min = tx;
				normal.set( 1, 0, 0 );

			}

			if ( ty <= min ) {

				min = ty;
				normal.set( 0, 1, 0 );

			}

			if ( tz <= min ) {

				normal.set( 0, 0, 1 );

			}

			vec.crossVectors( tangents[ 0 ], normal ).normalize();

			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );


			// compute the slowly-varying normal and binormal vectors for each segment on the curve

			for ( i = 1; i <= segments; i ++ ) {

				normals[ i ] = normals[ i - 1 ].clone();

				binormals[ i ] = binormals[ i - 1 ].clone();

				vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );

				if ( vec.length() > Number.EPSILON ) {

					vec.normalize();

					theta = Math.acos( _Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

					normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

				}

				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

			}

			// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

			if ( closed === true ) {

				theta = Math.acos( _Math.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
				theta /= segments;

				if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {

					theta = - theta;

				}

				for ( i = 1; i <= segments; i ++ ) {

					// twist a little...
					normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

				}

			}

			return {
				tangents: tangents,
				normals: normals,
				binormals: binormals
			};

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( source ) {

			this.arcLengthDivisions = source.arcLengthDivisions;

			return this;

		},

		toJSON: function () {

			var data = {
				metadata: {
					version: 4.5,
					type: 'Curve',
					generator: 'Curve.toJSON'
				}
			};

			data.arcLengthDivisions = this.arcLengthDivisions;
			data.type = this.type;

			return data;

		},

		fromJSON: function ( json ) {

			this.arcLengthDivisions = json.arcLengthDivisions;

			return this;

		}

	} );

	function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

		Curve.call( this );

		this.type = 'EllipseCurve';

		this.aX = aX || 0;
		this.aY = aY || 0;

		this.xRadius = xRadius || 1;
		this.yRadius = yRadius || 1;

		this.aStartAngle = aStartAngle || 0;
		this.aEndAngle = aEndAngle || 2 * Math.PI;

		this.aClockwise = aClockwise || false;

		this.aRotation = aRotation || 0;

	}

	EllipseCurve.prototype = Object.create( Curve.prototype );
	EllipseCurve.prototype.constructor = EllipseCurve;

	EllipseCurve.prototype.isEllipseCurve = true;

	EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var twoPi = Math.PI * 2;
		var deltaAngle = this.aEndAngle - this.aStartAngle;
		var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;

		// ensures that deltaAngle is 0 .. 2 PI
		while ( deltaAngle < 0 ) { deltaAngle += twoPi; }
		while ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }

		if ( deltaAngle < Number.EPSILON ) {

			if ( samePoints ) {

				deltaAngle = 0;

			} else {

				deltaAngle = twoPi;

			}

		}

		if ( this.aClockwise === true && ! samePoints ) {

			if ( deltaAngle === twoPi ) {

				deltaAngle = - twoPi;

			} else {

				deltaAngle = deltaAngle - twoPi;

			}

		}

		var angle = this.aStartAngle + t * deltaAngle;
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );

		if ( this.aRotation !== 0 ) {

			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );

			var tx = x - this.aX;
			var ty = y - this.aY;

			// Rotate the point about the center of the ellipse.
			x = tx * cos - ty * sin + this.aX;
			y = tx * sin + ty * cos + this.aY;

		}

		return point.set( x, y );

	};

	EllipseCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.aX = source.aX;
		this.aY = source.aY;

		this.xRadius = source.xRadius;
		this.yRadius = source.yRadius;

		this.aStartAngle = source.aStartAngle;
		this.aEndAngle = source.aEndAngle;

		this.aClockwise = source.aClockwise;

		this.aRotation = source.aRotation;

		return this;

	};


	EllipseCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.aX = this.aX;
		data.aY = this.aY;

		data.xRadius = this.xRadius;
		data.yRadius = this.yRadius;

		data.aStartAngle = this.aStartAngle;
		data.aEndAngle = this.aEndAngle;

		data.aClockwise = this.aClockwise;

		data.aRotation = this.aRotation;

		return data;

	};

	EllipseCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.aX = json.aX;
		this.aY = json.aY;

		this.xRadius = json.xRadius;
		this.yRadius = json.yRadius;

		this.aStartAngle = json.aStartAngle;
		this.aEndAngle = json.aEndAngle;

		this.aClockwise = json.aClockwise;

		this.aRotation = json.aRotation;

		return this;

	};

	function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

		EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

		this.type = 'ArcCurve';

	}

	ArcCurve.prototype = Object.create( EllipseCurve.prototype );
	ArcCurve.prototype.constructor = ArcCurve;

	ArcCurve.prototype.isArcCurve = true;

	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */


	/*
	Based on an optimized c++ solution in
	 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
	 - http://ideone.com/NoEbVM

	This CubicPoly class could be used for reusing some variables and calculations,
	but for three.js curve use, it could be possible inlined and flatten into a single function call
	which can be placed in CurveUtils.
	*/

	function CubicPoly() {

		var c0 = 0, c1 = 0, c2 = 0, c3 = 0;

		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		function init( x0, x1, t0, t1 ) {

			c0 = x0;
			c1 = t0;
			c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			c3 = 2 * x0 - 2 * x1 + t0 + t1;

		}

		return {

			initCatmullRom: function ( x0, x1, x2, x3, tension ) {

				init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );

			},

			initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {

				// compute tangents when parameterized in [t1,t2]
				var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
				var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;

				// rescale tangents for parametrization in [0,1]
				t1 *= dt1;
				t2 *= dt1;

				init( x1, x2, t1, t2 );

			},

			calc: function ( t ) {

				var t2 = t * t;
				var t3 = t2 * t;
				return c0 + c1 * t + c2 * t2 + c3 * t3;

			}

		};

	}

	//

	var tmp = new Vector3();
	var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();

	function CatmullRomCurve3( points, closed, curveType, tension ) {

		Curve.call( this );

		this.type = 'CatmullRomCurve3';

		this.points = points || [];
		this.closed = closed || false;
		this.curveType = curveType || 'centripetal';
		this.tension = tension || 0.5;

	}

	CatmullRomCurve3.prototype = Object.create( Curve.prototype );
	CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;

	CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;

	CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var points = this.points;
		var l = points.length;

		var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		if ( this.closed ) {

			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;

		} else if ( weight === 0 && intPoint === l - 1 ) {

			intPoint = l - 2;
			weight = 1;

		}

		var p0, p1, p2, p3; // 4 points

		if ( this.closed || intPoint > 0 ) {

			p0 = points[ ( intPoint - 1 ) % l ];

		} else {

			// extrapolate first point
			tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
			p0 = tmp;

		}

		p1 = points[ intPoint % l ];
		p2 = points[ ( intPoint + 1 ) % l ];

		if ( this.closed || intPoint + 2 < l ) {

			p3 = points[ ( intPoint + 2 ) % l ];

		} else {

			// extrapolate last point
			tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
			p3 = tmp;

		}

		if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {

			// init Centripetal / Chordal Catmull-Rom
			var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
			var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
			var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
			var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );

			// safety check for repeated points
			if ( dt1 < 1e-4 ) { dt1 = 1.0; }
			if ( dt0 < 1e-4 ) { dt0 = dt1; }
			if ( dt2 < 1e-4 ) { dt2 = dt1; }

			px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
			py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
			pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );

		} else if ( this.curveType === 'catmullrom' ) {

			px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
			py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
			pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );

		}

		point.set(
			px.calc( weight ),
			py.calc( weight ),
			pz.calc( weight )
		);

		return point;

	};

	CatmullRomCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		this.closed = source.closed;
		this.curveType = source.curveType;
		this.tension = source.tension;

		return this;

	};

	CatmullRomCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		data.closed = this.closed;
		data.curveType = this.curveType;
		data.tension = this.tension;

		return data;

	};

	CatmullRomCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector3().fromArray( point ) );

		}

		this.closed = json.closed;
		this.curveType = json.curveType;
		this.tension = json.tension;

		return this;

	};

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Bezier Curves formulas obtained from
	 * http://en.wikipedia.org/wiki/Bézier_curve
	 */

	function CatmullRom( t, p0, p1, p2, p3 ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

	//

	function QuadraticBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * p;

	}

	function QuadraticBezierP1( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	}

	function QuadraticBezierP2( t, p ) {

		return t * t * p;

	}

	function QuadraticBezier( t, p0, p1, p2 ) {

		return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
			QuadraticBezierP2( t, p2 );

	}

	//

	function CubicBezierP0( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	}

	function CubicBezierP1( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	}

	function CubicBezierP2( t, p ) {

		return 3 * ( 1 - t ) * t * t * p;

	}

	function CubicBezierP3( t, p ) {

		return t * t * t * p;

	}

	function CubicBezier( t, p0, p1, p2, p3 ) {

		return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
			CubicBezierP3( t, p3 );

	}

	function CubicBezierCurve( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();
		this.v3 = v3 || new Vector2();

	}

	CubicBezierCurve.prototype = Object.create( Curve.prototype );
	CubicBezierCurve.prototype.constructor = CubicBezierCurve;

	CubicBezierCurve.prototype.isCubicBezierCurve = true;

	CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
		);

		return point;

	};

	CubicBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function CubicBezierCurve3( v0, v1, v2, v3 ) {

		Curve.call( this );

		this.type = 'CubicBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();
		this.v3 = v3 || new Vector3();

	}

	CubicBezierCurve3.prototype = Object.create( Curve.prototype );
	CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;

	CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;

	CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;

		point.set(
			CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
			CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
			CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
		);

		return point;

	};

	CubicBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );
		this.v3.copy( source.v3 );

		return this;

	};

	CubicBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();
		data.v3 = this.v3.toArray();

		return data;

	};

	CubicBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );
		this.v3.fromArray( json.v3 );

		return this;

	};

	function LineCurve( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve';

		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	LineCurve.prototype = Object.create( Curve.prototype );
	LineCurve.prototype.constructor = LineCurve;

	LineCurve.prototype.isLineCurve = true;

	LineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve.prototype.getTangent = function ( /* t */ ) {

		var tangent = this.v2.clone().sub( this.v1 );

		return tangent.normalize();

	};

	LineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function LineCurve3( v1, v2 ) {

		Curve.call( this );

		this.type = 'LineCurve3';

		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	LineCurve3.prototype = Object.create( Curve.prototype );
	LineCurve3.prototype.constructor = LineCurve3;

	LineCurve3.prototype.isLineCurve3 = true;

	LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		if ( t === 1 ) {

			point.copy( this.v2 );

		} else {

			point.copy( this.v2 ).sub( this.v1 );
			point.multiplyScalar( t ).add( this.v1 );

		}

		return point;

	};

	// Line curve is linear, so we can overwrite default getPointAt

	LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {

		return this.getPoint( u, optionalTarget );

	};

	LineCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	LineCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	LineCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve';

		this.v0 = v0 || new Vector2();
		this.v1 = v1 || new Vector2();
		this.v2 = v2 || new Vector2();

	}

	QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;

	QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;

	QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y )
		);

		return point;

	};

	QuadraticBezierCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function QuadraticBezierCurve3( v0, v1, v2 ) {

		Curve.call( this );

		this.type = 'QuadraticBezierCurve3';

		this.v0 = v0 || new Vector3();
		this.v1 = v1 || new Vector3();
		this.v2 = v2 || new Vector3();

	}

	QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
	QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;

	QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;

	QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector3();

		var v0 = this.v0, v1 = this.v1, v2 = this.v2;

		point.set(
			QuadraticBezier( t, v0.x, v1.x, v2.x ),
			QuadraticBezier( t, v0.y, v1.y, v2.y ),
			QuadraticBezier( t, v0.z, v1.z, v2.z )
		);

		return point;

	};

	QuadraticBezierCurve3.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.v0.copy( source.v0 );
		this.v1.copy( source.v1 );
		this.v2.copy( source.v2 );

		return this;

	};

	QuadraticBezierCurve3.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.v0 = this.v0.toArray();
		data.v1 = this.v1.toArray();
		data.v2 = this.v2.toArray();

		return data;

	};

	QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.v0.fromArray( json.v0 );
		this.v1.fromArray( json.v1 );
		this.v2.fromArray( json.v2 );

		return this;

	};

	function SplineCurve( points /* array of Vector2 */ ) {

		Curve.call( this );

		this.type = 'SplineCurve';

		this.points = points || [];

	}

	SplineCurve.prototype = Object.create( Curve.prototype );
	SplineCurve.prototype.constructor = SplineCurve;

	SplineCurve.prototype.isSplineCurve = true;

	SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {

		var point = optionalTarget || new Vector2();

		var points = this.points;
		var p = ( points.length - 1 ) * t;

		var intPoint = Math.floor( p );
		var weight = p - intPoint;

		var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var p1 = points[ intPoint ];
		var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		point.set(
			CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
			CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
		);

		return point;

	};

	SplineCurve.prototype.copy = function ( source ) {

		Curve.prototype.copy.call( this, source );

		this.points = [];

		for ( var i = 0, l = source.points.length; i < l; i ++ ) {

			var point = source.points[ i ];

			this.points.push( point.clone() );

		}

		return this;

	};

	SplineCurve.prototype.toJSON = function () {

		var data = Curve.prototype.toJSON.call( this );

		data.points = [];

		for ( var i = 0, l = this.points.length; i < l; i ++ ) {

			var point = this.points[ i ];
			data.points.push( point.toArray() );

		}

		return data;

	};

	SplineCurve.prototype.fromJSON = function ( json ) {

		Curve.prototype.fromJSON.call( this, json );

		this.points = [];

		for ( var i = 0, l = json.points.length; i < l; i ++ ) {

			var point = json.points[ i ];
			this.points.push( new Vector2().fromArray( point ) );

		}

		return this;

	};



	var Curves = /*#__PURE__*/Object.freeze({
		__proto__: null,
		ArcCurve: ArcCurve,
		CatmullRomCurve3: CatmullRomCurve3,
		CubicBezierCurve: CubicBezierCurve,
		CubicBezierCurve3: CubicBezierCurve3,
		EllipseCurve: EllipseCurve,
		LineCurve: LineCurve,
		LineCurve3: LineCurve3,
		QuadraticBezierCurve: QuadraticBezierCurve,
		QuadraticBezierCurve3: QuadraticBezierCurve3,
		SplineCurve: SplineCurve
	});

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/

	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/

	function CurvePath() {

		Curve.call( this );

		this.type = 'CurvePath';

		this.curves = [];
		this.autoClose = false; // Automatically closes the path

	}

	CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {

		constructor: CurvePath,

		add: function ( curve ) {

			this.curves.push( curve );

		},

		closePath: function () {

			// Add a line curve if start and end of lines are not connected
			var startPoint = this.curves[ 0 ].getPoint( 0 );
			var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );

			if ( ! startPoint.equals( endPoint ) ) {

				this.curves.push( new LineCurve( endPoint, startPoint ) );

			}

		},

		// To get accurate point with reference to
		// entire path distance at time t,
		// following has to be done:

		// 1. Length of each sub path have to be known
		// 2. Locate and identify type of curve
		// 3. Get t for the curve
		// 4. Return curve.getPointAt(t')

		getPoint: function ( t ) {

			var d = t * this.getLength();
			var curveLengths = this.getCurveLengths();
			var i = 0;

			// To think about boundaries points.

			while ( i < curveLengths.length ) {

				if ( curveLengths[ i ] >= d ) {

					var diff = curveLengths[ i ] - d;
					var curve = this.curves[ i ];

					var segmentLength = curve.getLength();
					var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;

					return curve.getPointAt( u );

				}

				i ++;

			}

			return null;

			// loop where sum != 0, sum > d , sum+1 <d

		},

		// We cannot use the default THREE.Curve getPoint() with getLength() because in
		// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
		// getPoint() depends on getLength

		getLength: function () {

			var lens = this.getCurveLengths();
			return lens[ lens.length - 1 ];

		},

		// cacheLengths must be recalculated.
		updateArcLengths: function () {

			this.needsUpdate = true;
			this.cacheLengths = null;
			this.getCurveLengths();

		},

		// Compute lengths and cache them
		// We cannot overwrite getLengths() because UtoT mapping uses it.

		getCurveLengths: function () {

			// We use cache values if curves and cache array are same length

			if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {

				return this.cacheLengths;

			}

			// Get length of sub-curve
			// Push sums into cached array

			var lengths = [], sums = 0;

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				sums += this.curves[ i ].getLength();
				lengths.push( sums );

			}

			this.cacheLengths = lengths;

			return lengths;

		},

		getSpacedPoints: function ( divisions ) {

			if ( divisions === undefined ) { divisions = 40; }

			var points = [];

			for ( var i = 0; i <= divisions; i ++ ) {

				points.push( this.getPoint( i / divisions ) );

			}

			if ( this.autoClose ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		getPoints: function ( divisions ) {

			divisions = divisions || 12;

			var points = [], last;

			for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {

				var curve = curves[ i ];
				var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
					: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
						: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
							: divisions;

				var pts = curve.getPoints( resolution );

				for ( var j = 0; j < pts.length; j ++ ) {

					var point = pts[ j ];

					if ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates

					points.push( point );
					last = point;

				}

			}

			if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {

				points.push( points[ 0 ] );

			}

			return points;

		},

		copy: function ( source ) {

			Curve.prototype.copy.call( this, source );

			this.curves = [];

			for ( var i = 0, l = source.curves.length; i < l; i ++ ) {

				var curve = source.curves[ i ];

				this.curves.push( curve.clone() );

			}

			this.autoClose = source.autoClose;

			return this;

		},

		toJSON: function () {

			var data = Curve.prototype.toJSON.call( this );

			data.autoClose = this.autoClose;
			data.curves = [];

			for ( var i = 0, l = this.curves.length; i < l; i ++ ) {

				var curve = this.curves[ i ];
				data.curves.push( curve.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Curve.prototype.fromJSON.call( this, json );

			this.autoClose = json.autoClose;
			this.curves = [];

			for ( var i = 0, l = json.curves.length; i < l; i ++ ) {

				var curve = json.curves[ i ];
				this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );

			}

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 **/

	function Path( points ) {

		CurvePath.call( this );

		this.type = 'Path';

		this.currentPoint = new Vector2();

		if ( points ) {

			this.setFromPoints( points );

		}

	}

	Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {

		constructor: Path,

		setFromPoints: function ( points ) {

			this.moveTo( points[ 0 ].x, points[ 0 ].y );

			for ( var i = 1, l = points.length; i < l; i ++ ) {

				this.lineTo( points[ i ].x, points[ i ].y );

			}

			return this;

		},

		moveTo: function ( x, y ) {

			this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?

			return this;

		},

		lineTo: function ( x, y ) {

			var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
			this.curves.push( curve );

			this.currentPoint.set( x, y );

			return this;

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			var curve = new QuadraticBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCPx, aCPy ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

			return this;

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			var curve = new CubicBezierCurve(
				this.currentPoint.clone(),
				new Vector2( aCP1x, aCP1y ),
				new Vector2( aCP2x, aCP2y ),
				new Vector2( aX, aY )
			);

			this.curves.push( curve );

			this.currentPoint.set( aX, aY );

			return this;

		},

		splineThru: function ( pts /*Array of Vector*/ ) {

			var npts = [ this.currentPoint.clone() ].concat( pts );

			var curve = new SplineCurve( npts );
			this.curves.push( curve );

			this.currentPoint.copy( pts[ pts.length - 1 ] );

			return this;

		},

		arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absarc( aX + x0, aY + y0, aRadius,
				aStartAngle, aEndAngle, aClockwise );

			return this;

		},

		absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

			this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );

			return this;

		},

		ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var x0 = this.currentPoint.x;
			var y0 = this.currentPoint.y;

			this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			return this;

		},

		absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {

			var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );

			if ( this.curves.length > 0 ) {

				// if a previous curve is present, attempt to join
				var firstPoint = curve.getPoint( 0 );

				if ( ! firstPoint.equals( this.currentPoint ) ) {

					this.lineTo( firstPoint.x, firstPoint.y );

				}

			}

			this.curves.push( curve );

			var lastPoint = curve.getPoint( 1 );
			this.currentPoint.copy( lastPoint );

			return this;

		},

		copy: function ( source ) {

			CurvePath.prototype.copy.call( this, source );

			this.currentPoint.copy( source.currentPoint );

			return this;

		},

		toJSON: function () {

			var data = CurvePath.prototype.toJSON.call( this );

			data.currentPoint = this.currentPoint.toArray();

			return data;

		},

		fromJSON: function ( json ) {

			CurvePath.prototype.fromJSON.call( this, json );

			this.currentPoint.fromArray( json.currentPoint );

			return this;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/

	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.

	function Shape( points ) {

		Path.call( this, points );

		this.uuid = _Math.generateUUID();

		this.type = 'Shape';

		this.holes = [];

	}

	Shape.prototype = Object.assign( Object.create( Path.prototype ), {

		constructor: Shape,

		getPointsHoles: function ( divisions ) {

			var holesPts = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				holesPts[ i ] = this.holes[ i ].getPoints( divisions );

			}

			return holesPts;

		},

		// get points of shape and holes (keypoints based on segments parameter)

		extractPoints: function ( divisions ) {

			return {

				shape: this.getPoints( divisions ),
				holes: this.getPointsHoles( divisions )

			};

		},

		copy: function ( source ) {

			Path.prototype.copy.call( this, source );

			this.holes = [];

			for ( var i = 0, l = source.holes.length; i < l; i ++ ) {

				var hole = source.holes[ i ];

				this.holes.push( hole.clone() );

			}

			return this;

		},

		toJSON: function () {

			var data = Path.prototype.toJSON.call( this );

			data.uuid = this.uuid;
			data.holes = [];

			for ( var i = 0, l = this.holes.length; i < l; i ++ ) {

				var hole = this.holes[ i ];
				data.holes.push( hole.toJSON() );

			}

			return data;

		},

		fromJSON: function ( json ) {

			Path.prototype.fromJSON.call( this, json );

			this.uuid = json.uuid;
			this.holes = [];

			for ( var i = 0, l = json.holes.length; i < l; i ++ ) {

				var hole = json.holes[ i ];
				this.holes.push( new Path().fromJSON( hole ) );

			}

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Light( color, intensity ) {

		Object3D.call( this );

		this.type = 'Light';

		this.color = new Color( color );
		this.intensity = intensity !== undefined ? intensity : 1;

		this.receiveShadow = undefined;

	}

	Light.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Light,

		isLight: true,

		copy: function ( source ) {

			Object3D.prototype.copy.call( this, source );

			this.color.copy( source.color );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.color = this.color.getHex();
			data.object.intensity = this.intensity;

			if ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }

			if ( this.distance !== undefined ) { data.object.distance = this.distance; }
			if ( this.angle !== undefined ) { data.object.angle = this.angle; }
			if ( this.decay !== undefined ) { data.object.decay = this.decay; }
			if ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }

			if ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }

			return data;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function HemisphereLight( skyColor, groundColor, intensity ) {

		Light.call( this, skyColor, intensity );

		this.type = 'HemisphereLight';

		this.castShadow = undefined;

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.groundColor = new Color( groundColor );

	}

	HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: HemisphereLight,

		isHemisphereLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.groundColor.copy( source.groundColor );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function LightShadow( camera ) {

		this.camera = camera;

		this.bias = 0;
		this.radius = 1;

		this.mapSize = new Vector2( 512, 512 );

		this.map = null;
		this.mapPass = null;
		this.matrix = new Matrix4();

		this._frustum = new Frustum();
		this._frameExtents = new Vector2( 1, 1 );

		this._viewportCount = 1;

		this._viewports = [

			new Vector4( 0, 0, 1, 1 )

		];

	}

	Object.assign( LightShadow.prototype, {

		_projScreenMatrix: new Matrix4(),

		_lightPositionWorld: new Vector3(),

		_lookTarget: new Vector3(),

		getViewportCount: function () {

			return this._viewportCount;

		},

		getFrustum: function () {

			return this._frustum;

		},

		updateMatrices: function ( light ) {

			var shadowCamera = this.camera,
				shadowMatrix = this.matrix,
				projScreenMatrix = this._projScreenMatrix,
				lookTarget = this._lookTarget,
				lightPositionWorld = this._lightPositionWorld;

			lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			shadowCamera.position.copy( lightPositionWorld );

			lookTarget.setFromMatrixPosition( light.target.matrixWorld );
			shadowCamera.lookAt( lookTarget );
			shadowCamera.updateMatrixWorld();

			projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
			this._frustum.setFromMatrix( projScreenMatrix );

			shadowMatrix.set(
				0.5, 0.0, 0.0, 0.5,
				0.0, 0.5, 0.0, 0.5,
				0.0, 0.0, 0.5, 0.5,
				0.0, 0.0, 0.0, 1.0
			);

			shadowMatrix.multiply( shadowCamera.projectionMatrix );
			shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

		},

		getViewport: function ( viewportIndex ) {

			return this._viewports[ viewportIndex ];

		},

		getFrameExtents: function () {

			return this._frameExtents;

		},

		copy: function ( source ) {

			this.camera = source.camera.clone();

			this.bias = source.bias;
			this.radius = source.radius;

			this.mapSize.copy( source.mapSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var object = {};

			if ( this.bias !== 0 ) { object.bias = this.bias; }
			if ( this.radius !== 1 ) { object.radius = this.radius; }
			if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }

			object.camera = this.camera.toJSON( false ).object;
			delete object.camera.matrix;

			return object;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function SpotLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );

	}

	SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: SpotLightShadow,

		isSpotLightShadow: true,

		updateMatrices: function ( light ) {

			var camera = this.camera;

			var fov = _Math.RAD2DEG * 2 * light.angle;
			var aspect = this.mapSize.width / this.mapSize.height;
			var far = light.distance || camera.far;

			if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {

				camera.fov = fov;
				camera.aspect = aspect;
				camera.far = far;
				camera.updateProjectionMatrix();

			}

			LightShadow.prototype.updateMatrices.call( this, light );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function SpotLight( color, intensity, distance, angle, penumbra, decay ) {

		Light.call( this, color, intensity );

		this.type = 'SpotLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				return this.intensity * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				this.intensity = power / Math.PI;

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new SpotLightShadow();

	}

	SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: SpotLight,

		isSpotLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.angle = source.angle;
			this.penumbra = source.penumbra;
			this.decay = source.decay;

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	function PointLightShadow() {

		LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );

		this._frameExtents = new Vector2( 4, 2 );

		this._viewportCount = 6;

		this._viewports = [
			// These viewports map a cube-map onto a 2D texture with the
			// following orientation:
			//
			//  xzXZ
			//   y Y
			//
			// X - Positive x direction
			// x - Negative x direction
			// Y - Positive y direction
			// y - Negative y direction
			// Z - Positive z direction
			// z - Negative z direction

			// positive X
			new Vector4( 2, 1, 1, 1 ),
			// negative X
			new Vector4( 0, 1, 1, 1 ),
			// positive Z
			new Vector4( 3, 1, 1, 1 ),
			// negative Z
			new Vector4( 1, 1, 1, 1 ),
			// positive Y
			new Vector4( 3, 0, 1, 1 ),
			// negative Y
			new Vector4( 1, 0, 1, 1 )
		];

		this._cubeDirections = [
			new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
			new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
		];

		this._cubeUps = [
			new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
			new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
		];

	}

	PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: PointLightShadow,

		isPointLightShadow: true,

		updateMatrices: function ( light, viewportIndex ) {

			if ( viewportIndex === undefined ) { viewportIndex = 0; }

			var camera = this.camera,
				shadowMatrix = this.matrix,
				lightPositionWorld = this._lightPositionWorld,
				lookTarget = this._lookTarget,
				projScreenMatrix = this._projScreenMatrix;

			lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
			camera.position.copy( lightPositionWorld );

			lookTarget.copy( camera.position );
			lookTarget.add( this._cubeDirections[ viewportIndex ] );
			camera.up.copy( this._cubeUps[ viewportIndex ] );
			camera.lookAt( lookTarget );
			camera.updateMatrixWorld();

			shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );

			projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			this._frustum.setFromMatrix( projScreenMatrix );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */


	function PointLight( color, intensity, distance, decay ) {

		Light.call( this, color, intensity );

		this.type = 'PointLight';

		Object.defineProperty( this, 'power', {
			get: function () {

				// intensity = power per solid angle.
				// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				return this.intensity * 4 * Math.PI;

			},
			set: function ( power ) {

				// intensity = power per solid angle.
				// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
				this.intensity = power / ( 4 * Math.PI );

			}
		} );

		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.

		this.shadow = new PointLightShadow();

	}

	PointLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: PointLight,

		isPointLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.distance = source.distance;
			this.decay = source.decay;

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author arose / http://github.com/arose
	 */

	function OrthographicCamera( left, right, top, bottom, near, far ) {

		Camera.call( this );

		this.type = 'OrthographicCamera';

		this.zoom = 1;
		this.view = null;

		this.left = ( left !== undefined ) ? left : - 1;
		this.right = ( right !== undefined ) ? right : 1;
		this.top = ( top !== undefined ) ? top : 1;
		this.bottom = ( bottom !== undefined ) ? bottom : - 1;

		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;

		this.updateProjectionMatrix();

	}

	OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {

		constructor: OrthographicCamera,

		isOrthographicCamera: true,

		copy: function ( source, recursive ) {

			Camera.prototype.copy.call( this, source, recursive );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		},

		setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		},

		clearViewOffset: function () {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		},

		updateProjectionMatrix: function () {

			var dx = ( this.right - this.left ) / ( 2 * this.zoom );
			var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			var cx = ( this.right + this.left ) / 2;
			var cy = ( this.top + this.bottom ) / 2;

			var left = cx - dx;
			var right = cx + dx;
			var top = cy + dy;
			var bottom = cy - dy;

			if ( this.view !== null && this.view.enabled ) {

				var zoomW = this.zoom / ( this.view.width / this.view.fullWidth );
				var zoomH = this.zoom / ( this.view.height / this.view.fullHeight );
				var scaleW = ( this.right - this.left ) / this.view.width;
				var scaleH = ( this.top - this.bottom ) / this.view.height;

				left += scaleW * ( this.view.offsetX / zoomW );
				right = left + scaleW * ( this.view.width / zoomW );
				top -= scaleH * ( this.view.offsetY / zoomH );
				bottom = top - scaleH * ( this.view.height / zoomH );

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );

			this.projectionMatrixInverse.getInverse( this.projectionMatrix );

		},

		toJSON: function ( meta ) {

			var data = Object3D.prototype.toJSON.call( this, meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function DirectionalLightShadow() {

		LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );

	}

	DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {

		constructor: DirectionalLightShadow,

		isDirectionalLightShadow: true,

		updateMatrices: function ( light ) {

			LightShadow.prototype.updateMatrices.call( this, light );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */

	function DirectionalLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'DirectionalLight';

		this.position.copy( Object3D.DefaultUp );
		this.updateMatrix();

		this.target = new Object3D();

		this.shadow = new DirectionalLightShadow();

	}

	DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: DirectionalLight,

		isDirectionalLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.target = source.target.clone();

			this.shadow = source.shadow.clone();

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AmbientLight( color, intensity ) {

		Light.call( this, color, intensity );

		this.type = 'AmbientLight';

		this.castShadow = undefined;

	}

	AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: AmbientLight,

		isAmbientLight: true

	} );

	/**
	 * @author abelnation / http://github.com/abelnation
	 */

	function RectAreaLight( color, intensity, width, height ) {

		Light.call( this, color, intensity );

		this.type = 'RectAreaLight';

		this.width = ( width !== undefined ) ? width : 10;
		this.height = ( height !== undefined ) ? height : 10;

	}

	RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: RectAreaLight,

		isRectAreaLight: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.width = source.width;
			this.height = source.height;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Light.prototype.toJSON.call( this, meta );

			data.object.width = this.width;
			data.object.height = this.height;

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function MaterialLoader( manager ) {

		Loader.call( this, manager );

		this.textures = {};

	}

	MaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: MaterialLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var textures = this.textures;

			function getTexture( name ) {

				if ( textures[ name ] === undefined ) {

					console.warn( 'THREE.MaterialLoader: Undefined texture', name );

				}

				return textures[ name ];

			}

			var material = new Materials[ json.type ]();

			if ( json.uuid !== undefined ) { material.uuid = json.uuid; }
			if ( json.name !== undefined ) { material.name = json.name; }
			if ( json.color !== undefined ) { material.color.setHex( json.color ); }
			if ( json.roughness !== undefined ) { material.roughness = json.roughness; }
			if ( json.metalness !== undefined ) { material.metalness = json.metalness; }
			if ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }
			if ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }
			if ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }
			if ( json.shininess !== undefined ) { material.shininess = json.shininess; }
			if ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }
			if ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }
			if ( json.vertexColors !== undefined ) { material.vertexColors = json.vertexColors; }
			if ( json.fog !== undefined ) { material.fog = json.fog; }
			if ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }
			if ( json.blending !== undefined ) { material.blending = json.blending; }
			if ( json.combine !== undefined ) { material.combine = json.combine; }
			if ( json.side !== undefined ) { material.side = json.side; }
			if ( json.opacity !== undefined ) { material.opacity = json.opacity; }
			if ( json.transparent !== undefined ) { material.transparent = json.transparent; }
			if ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }
			if ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }
			if ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }
			if ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }

			if ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }
			if ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }
			if ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }
			if ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }
			if ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }
			if ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }
			if ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }
			if ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }

			if ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }
			if ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }
			if ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }
			if ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }

			if ( json.rotation !== undefined ) { material.rotation = json.rotation; }

			if ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }
			if ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }
			if ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }
			if ( json.scale !== undefined ) { material.scale = json.scale; }

			if ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }
			if ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }
			if ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }

			if ( json.skinning !== undefined ) { material.skinning = json.skinning; }
			if ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }
			if ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }
			if ( json.dithering !== undefined ) { material.dithering = json.dithering; }

			if ( json.visible !== undefined ) { material.visible = json.visible; }

			if ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }

			if ( json.userData !== undefined ) { material.userData = json.userData; }

			// Shader Material

			if ( json.uniforms !== undefined ) {

				for ( var name in json.uniforms ) {

					var uniform = json.uniforms[ name ];

					material.uniforms[ name ] = {};

					switch ( uniform.type ) {

						case 't':
							material.uniforms[ name ].value = getTexture( uniform.value );
							break;

						case 'c':
							material.uniforms[ name ].value = new Color().setHex( uniform.value );
							break;

						case 'v2':
							material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
							break;

						case 'v3':
							material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
							break;

						case 'v4':
							material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
							break;

						case 'm3':
							material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );

						case 'm4':
							material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
							break;

						default:
							material.uniforms[ name ].value = uniform.value;

					}

				}

			}

			if ( json.defines !== undefined ) { material.defines = json.defines; }
			if ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }
			if ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }

			if ( json.extensions !== undefined ) {

				for ( var key in json.extensions ) {

					material.extensions[ key ] = json.extensions[ key ];

				}

			}

			// Deprecated

			if ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading

			// for PointsMaterial

			if ( json.size !== undefined ) { material.size = json.size; }
			if ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }

			// maps

			if ( json.map !== undefined ) { material.map = getTexture( json.map ); }
			if ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }

			if ( json.alphaMap !== undefined ) {

				material.alphaMap = getTexture( json.alphaMap );
				material.transparent = true;

			}

			if ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }
			if ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }

			if ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }
			if ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }
			if ( json.normalScale !== undefined ) {

				var normalScale = json.normalScale;

				if ( Array.isArray( normalScale ) === false ) {

					// Blender exporter used to export a scalar. See #7459

					normalScale = [ normalScale, normalScale ];

				}

				material.normalScale = new Vector2().fromArray( normalScale );

			}

			if ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }
			if ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }
			if ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }

			if ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }
			if ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }

			if ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }
			if ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }

			if ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }

			if ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }
			if ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }

			if ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }
			if ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }

			if ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }
			if ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }

			if ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }
			if ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }

			if ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }

			if ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }
			if ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }

			return material;

		},

		setTextures: function ( value ) {

			this.textures = value;
			return this;

		}

	} );

	/**
	 * @author Don McCurdy / https://www.donmccurdy.com
	 */

	var LoaderUtils = {

		decodeText: function ( array ) {

			if ( typeof TextDecoder !== 'undefined' ) {

				return new TextDecoder().decode( array );

			}

			// Avoid the String.fromCharCode.apply(null, array) shortcut, which
			// throws a "maximum call stack size exceeded" error for large arrays.

			var s = '';

			for ( var i = 0, il = array.length; i < il; i ++ ) {

				// Implicitly assumes little-endian.
				s += String.fromCharCode( array[ i ] );

			}

			try {

				// merges multi-byte utf-8 characters.

				return decodeURIComponent( escape( s ) );

			} catch ( e ) { // see #16358

				return s;

			}

		},

		extractUrlBase: function ( url ) {

			var index = url.lastIndexOf( '/' );

			if ( index === - 1 ) { return './'; }

			return url.substr( 0, index + 1 );

		}

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferGeometry() {

		BufferGeometry.call( this );

		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;

	}

	InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {

		constructor: InstancedBufferGeometry,

		isInstancedBufferGeometry: true,

		copy: function ( source ) {

			BufferGeometry.prototype.copy.call( this, source );

			this.maxInstancedCount = source.maxInstancedCount;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		toJSON: function () {

			var data = BufferGeometry.prototype.toJSON.call( this );

			data.maxInstancedCount = this.maxInstancedCount;

			data.isInstancedBufferGeometry = true;

			return data;

		}

	} );

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {

		if ( typeof ( normalized ) === 'number' ) {

			meshPerAttribute = normalized;

			normalized = false;

			console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );

		}

		BufferAttribute.call( this, array, itemSize, normalized );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {

		constructor: InstancedBufferAttribute,

		isInstancedBufferAttribute: true,

		copy: function ( source ) {

			BufferAttribute.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		},

		toJSON: function ()	{

			var data = BufferAttribute.prototype.toJSON.call( this );

			data.meshPerAttribute = this.meshPerAttribute;

			data.isInstancedBufferAttribute = true;

			return data;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function BufferGeometryLoader( manager ) {

		Loader.call( this, manager );

	}

	BufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: BufferGeometryLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( scope.manager );
			loader.setPath( scope.path );
			loader.load( url, function ( text ) {

				onLoad( scope.parse( JSON.parse( text ) ) );

			}, onProgress, onError );

		},

		parse: function ( json ) {

			var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();

			var index = json.data.index;

			if ( index !== undefined ) {

				var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
				geometry.setIndex( new BufferAttribute( typedArray, 1 ) );

			}

			var attributes = json.data.attributes;

			for ( var key in attributes ) {

				var attribute = attributes[ key ];
				var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
				var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
				var bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
				if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
				geometry.setAttribute( key, bufferAttribute );

			}

			var morphAttributes = json.data.morphAttributes;

			if ( morphAttributes ) {

				for ( var key in morphAttributes ) {

					var attributeArray = morphAttributes[ key ];

					var array = [];

					for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {

						var attribute = attributeArray[ i ];
						var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );

						var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
						if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
						array.push( bufferAttribute );

					}

					geometry.morphAttributes[ key ] = array;

				}

			}

			var morphTargetsRelative = json.data.morphTargetsRelative;

			if ( morphTargetsRelative ) {

				geometry.morphTargetsRelative = true;

			}

			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;

			if ( groups !== undefined ) {

				for ( var i = 0, n = groups.length; i !== n; ++ i ) {

					var group = groups[ i ];

					geometry.addGroup( group.start, group.count, group.materialIndex );

				}

			}

			var boundingSphere = json.data.boundingSphere;

			if ( boundingSphere !== undefined ) {

				var center = new Vector3();

				if ( boundingSphere.center !== undefined ) {

					center.fromArray( boundingSphere.center );

				}

				geometry.boundingSphere = new Sphere( center, boundingSphere.radius );

			}

			if ( json.name ) { geometry.name = json.name; }
			if ( json.userData ) { geometry.userData = json.userData; }

			return geometry;

		}

	} );

	var TYPED_ARRAYS = {
		Int8Array: Int8Array,
		Uint8Array: Uint8Array,
		// Workaround for IE11 pre KB2929437. See #11440
		Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
		Int16Array: Int16Array,
		Uint16Array: Uint16Array,
		Int32Array: Int32Array,
		Uint32Array: Uint32Array,
		Float32Array: Float32Array,
		Float64Array: Float64Array
	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function ObjectLoader( manager ) {

		Loader.call( this, manager );

	}

	ObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: ObjectLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
			this.resourcePath = this.resourcePath || path;

			var loader = new FileLoader( scope.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				var json = null;

				try {

					json = JSON.parse( text );

				} catch ( error ) {

					if ( onError !== undefined ) { onError( error ); }

					console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );

					return;

				}

				var metadata = json.metadata;

				if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {

					console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
					return;

				}

				scope.parse( json, onLoad );

			}, onProgress, onError );

		},

		parse: function ( json, onLoad ) {

			var shapes = this.parseShape( json.shapes );
			var geometries = this.parseGeometries( json.geometries, shapes );

			var images = this.parseImages( json.images, function () {

				if ( onLoad !== undefined ) { onLoad( object ); }

			} );

			var textures = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );

			var object = this.parseObject( json.object, geometries, materials );

			if ( json.animations ) {

				object.animations = this.parseAnimations( json.animations );

			}

			if ( json.images === undefined || json.images.length === 0 ) {

				if ( onLoad !== undefined ) { onLoad( object ); }

			}

			return object;

		},

		parseShape: function ( json ) {

			var shapes = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var shape = new Shape().fromJSON( json[ i ] );

					shapes[ shape.uuid ] = shape;

				}

			}

			return shapes;

		},

		parseGeometries: function ( json, shapes ) {

			var geometries = {};

			if ( json !== undefined ) {

				var bufferGeometryLoader = new BufferGeometryLoader();

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var geometry;
					var data = json[ i ];

					switch ( data.type ) {

						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);

							break;

						case 'BoxGeometry':
						case 'BoxBufferGeometry':
						case 'CubeGeometry': // backwards compatible

							geometry = new Geometries[ data.type ](
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);

							break;

						case 'CircleGeometry':
						case 'CircleBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'CylinderGeometry':
						case 'CylinderBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'ConeGeometry':
						case 'ConeBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'SphereGeometry':
						case 'SphereBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'DodecahedronGeometry':
						case 'DodecahedronBufferGeometry':
						case 'IcosahedronGeometry':
						case 'IcosahedronBufferGeometry':
						case 'OctahedronGeometry':
						case 'OctahedronBufferGeometry':
						case 'TetrahedronGeometry':
						case 'TetrahedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.detail
							);

							break;

						case 'RingGeometry':
						case 'RingBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);

							break;

						case 'TorusGeometry':
						case 'TorusBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);

							break;

						case 'TorusKnotGeometry':
						case 'TorusKnotBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.radius,
								data.tube,
								data.tubularSegments,
								data.radialSegments,
								data.p,
								data.q
							);

							break;

						case 'TubeGeometry':
						case 'TubeBufferGeometry':

							// This only works for built-in curves (e.g. CatmullRomCurve3).
							// User defined curves or instances of CurvePath will not be deserialized.
							geometry = new Geometries[ data.type ](
								new Curves[ data.path.type ]().fromJSON( data.path ),
								data.tubularSegments,
								data.radius,
								data.radialSegments,
								data.closed
							);

							break;

						case 'LatheGeometry':
						case 'LatheBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.points,
								data.segments,
								data.phiStart,
								data.phiLength
							);

							break;

						case 'PolyhedronGeometry':
						case 'PolyhedronBufferGeometry':

							geometry = new Geometries[ data.type ](
								data.vertices,
								data.indices,
								data.radius,
								data.details
							);

							break;

						case 'ShapeGeometry':
						case 'ShapeBufferGeometry':

							var geometryShapes = [];

							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

								var shape = shapes[ data.shapes[ j ] ];

								geometryShapes.push( shape );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.curveSegments
							);

							break;


						case 'ExtrudeGeometry':
						case 'ExtrudeBufferGeometry':

							var geometryShapes = [];

							for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {

								var shape = shapes[ data.shapes[ j ] ];

								geometryShapes.push( shape );

							}

							var extrudePath = data.options.extrudePath;

							if ( extrudePath !== undefined ) {

								data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );

							}

							geometry = new Geometries[ data.type ](
								geometryShapes,
								data.options
							);

							break;

						case 'BufferGeometry':
						case 'InstancedBufferGeometry':

							geometry = bufferGeometryLoader.parse( data );

							break;

						case 'Geometry':

							if ( 'THREE' in window && 'LegacyJSONLoader' in THREE ) {

								var geometryLoader = new THREE.LegacyJSONLoader();
								geometry = geometryLoader.parse( data, this.resourcePath ).geometry;


							} else {

								console.error( 'THREE.ObjectLoader: You have to import LegacyJSONLoader in order load geometry data of type "Geometry".' );

							}

							break;

						default:

							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );

							continue;

					}

					geometry.uuid = data.uuid;

					if ( data.name !== undefined ) { geometry.name = data.name; }
					if ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }

					geometries[ data.uuid ] = geometry;

				}

			}

			return geometries;

		},

		parseMaterials: function ( json, textures ) {

			var cache = {}; // MultiMaterial
			var materials = {};

			if ( json !== undefined ) {

				var loader = new MaterialLoader();
				loader.setTextures( textures );

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.type === 'MultiMaterial' ) {

						// Deprecated

						var array = [];

						for ( var j = 0; j < data.materials.length; j ++ ) {

							var material = data.materials[ j ];

							if ( cache[ material.uuid ] === undefined ) {

								cache[ material.uuid ] = loader.parse( material );

							}

							array.push( cache[ material.uuid ] );

						}

						materials[ data.uuid ] = array;

					} else {

						if ( cache[ data.uuid ] === undefined ) {

							cache[ data.uuid ] = loader.parse( data );

						}

						materials[ data.uuid ] = cache[ data.uuid ];

					}

				}

			}

			return materials;

		},

		parseAnimations: function ( json ) {

			var animations = [];

			for ( var i = 0; i < json.length; i ++ ) {

				var data = json[ i ];

				var clip = AnimationClip.parse( data );

				if ( data.uuid !== undefined ) { clip.uuid = data.uuid; }

				animations.push( clip );

			}

			return animations;

		},

		parseImages: function ( json, onLoad ) {

			var scope = this;
			var images = {};

			function loadImage( url ) {

				scope.manager.itemStart( url );

				return loader.load( url, function () {

					scope.manager.itemEnd( url );

				}, undefined, function () {

					scope.manager.itemError( url );
					scope.manager.itemEnd( url );

				} );

			}

			if ( json !== undefined && json.length > 0 ) {

				var manager = new LoadingManager( onLoad );

				var loader = new ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );

				for ( var i = 0, il = json.length; i < il; i ++ ) {

					var image = json[ i ];
					var url = image.url;

					if ( Array.isArray( url ) ) {

						// load array of images e.g CubeTexture

						images[ image.uuid ] = [];

						for ( var j = 0, jl = url.length; j < jl; j ++ ) {

							var currentUrl = url[ j ];

							var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;

							images[ image.uuid ].push( loadImage( path ) );

						}

					} else {

						// load single image

						var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;

						images[ image.uuid ] = loadImage( path );

					}

				}

			}

			return images;

		},

		parseTextures: function ( json, images ) {

			function parseConstant( value, type ) {

				if ( typeof value === 'number' ) { return value; }

				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );

				return type[ value ];

			}

			var textures = {};

			if ( json !== undefined ) {

				for ( var i = 0, l = json.length; i < l; i ++ ) {

					var data = json[ i ];

					if ( data.image === undefined ) {

						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );

					}

					if ( images[ data.image ] === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );

					}

					var texture;

					if ( Array.isArray( images[ data.image ] ) ) {

						texture = new CubeTexture( images[ data.image ] );

					} else {

						texture = new Texture( images[ data.image ] );

					}

					texture.needsUpdate = true;

					texture.uuid = data.uuid;

					if ( data.name !== undefined ) { texture.name = data.name; }

					if ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }

					if ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }
					if ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }
					if ( data.center !== undefined ) { texture.center.fromArray( data.center ); }
					if ( data.rotation !== undefined ) { texture.rotation = data.rotation; }

					if ( data.wrap !== undefined ) {

						texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
						texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );

					}

					if ( data.format !== undefined ) { texture.format = data.format; }
					if ( data.type !== undefined ) { texture.type = data.type; }
					if ( data.encoding !== undefined ) { texture.encoding = data.encoding; }

					if ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }
					if ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }
					if ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }

					if ( data.flipY !== undefined ) { texture.flipY = data.flipY; }

					if ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }
					if ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }

					textures[ data.uuid ] = texture;

				}

			}

			return textures;

		},

		parseObject: function ( data, geometries, materials ) {

			var object;

			function getGeometry( name ) {

				if ( geometries[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined geometry', name );

				}

				return geometries[ name ];

			}

			function getMaterial( name ) {

				if ( name === undefined ) { return undefined; }

				if ( Array.isArray( name ) ) {

					var array = [];

					for ( var i = 0, l = name.length; i < l; i ++ ) {

						var uuid = name[ i ];

						if ( materials[ uuid ] === undefined ) {

							console.warn( 'THREE.ObjectLoader: Undefined material', uuid );

						}

						array.push( materials[ uuid ] );

					}

					return array;

				}

				if ( materials[ name ] === undefined ) {

					console.warn( 'THREE.ObjectLoader: Undefined material', name );

				}

				return materials[ name ];

			}

			switch ( data.type ) {

				case 'Scene':

					object = new Scene();

					if ( data.background !== undefined ) {

						if ( Number.isInteger( data.background ) ) {

							object.background = new Color( data.background );

						}

					}

					if ( data.fog !== undefined ) {

						if ( data.fog.type === 'Fog' ) {

							object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );

						} else if ( data.fog.type === 'FogExp2' ) {

							object.fog = new FogExp2( data.fog.color, data.fog.density );

						}

					}

					break;

				case 'PerspectiveCamera':

					object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					if ( data.focus !== undefined ) { object.focus = data.focus; }
					if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
					if ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }
					if ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }
					if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

					break;

				case 'OrthographicCamera':

					object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
					if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }

					break;

				case 'AmbientLight':

					object = new AmbientLight( data.color, data.intensity );

					break;

				case 'DirectionalLight':

					object = new DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new PointLight( data.color, data.intensity, data.distance, data.decay );

					break;

				case 'RectAreaLight':

					object = new RectAreaLight( data.color, data.intensity, data.width, data.height );

					break;

				case 'SpotLight':

					object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );

					break;

				case 'HemisphereLight':

					object = new HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'SkinnedMesh':

					console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );

				case 'Mesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );

					if ( geometry.bones && geometry.bones.length > 0 ) {

						object = new SkinnedMesh( geometry, material );

					} else {

						object = new Mesh( geometry, material );

					}

					break;

				case 'InstancedMesh':

					var geometry = getGeometry( data.geometry );
					var material = getMaterial( data.material );
					var count = data.count;
					var instanceMatrix = data.instanceMatrix;

					object = new InstancedMesh( geometry, material, count );
					object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );

					break;

				case 'LOD':

					object = new LOD();

					break;

				case 'Line':

					object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );

					break;

				case 'LineLoop':

					object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'LineSegments':

					object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'PointCloud':
				case 'Points':

					object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );

					break;

				case 'Sprite':

					object = new Sprite( getMaterial( data.material ) );

					break;

				case 'Group':

					object = new Group();

					break;

				default:

					object = new Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) { object.name = data.name; }

			if ( data.matrix !== undefined ) {

				object.matrix.fromArray( data.matrix );

				if ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }
				if ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }

			} else {

				if ( data.position !== undefined ) { object.position.fromArray( data.position ); }
				if ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }
				if ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }
				if ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }

			}

			if ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }
			if ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }

			if ( data.shadow ) {

				if ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }
				if ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }
				if ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }
				if ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }

			}

			if ( data.visible !== undefined ) { object.visible = data.visible; }
			if ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }
			if ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }
			if ( data.userData !== undefined ) { object.userData = data.userData; }
			if ( data.layers !== undefined ) { object.layers.mask = data.layers; }

			if ( data.drawMode !== undefined ) { object.setDrawMode( data.drawMode ); }

			if ( data.children !== undefined ) {

				var children = data.children;

				for ( var i = 0; i < children.length; i ++ ) {

					object.add( this.parseObject( children[ i ], geometries, materials ) );

				}

			}

			if ( data.type === 'LOD' ) {

				if ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }

				var levels = data.levels;

				for ( var l = 0; l < levels.length; l ++ ) {

					var level = levels[ l ];
					var child = object.getObjectByProperty( 'uuid', level.object );

					if ( child !== undefined ) {

						object.addLevel( child, level.distance );

					}

				}

			}

			return object;

		}

	} );

	var TEXTURE_MAPPING = {
		UVMapping: UVMapping,
		CubeReflectionMapping: CubeReflectionMapping,
		CubeRefractionMapping: CubeRefractionMapping,
		EquirectangularReflectionMapping: EquirectangularReflectionMapping,
		EquirectangularRefractionMapping: EquirectangularRefractionMapping,
		SphericalReflectionMapping: SphericalReflectionMapping,
		CubeUVReflectionMapping: CubeUVReflectionMapping,
		CubeUVRefractionMapping: CubeUVRefractionMapping
	};

	var TEXTURE_WRAPPING = {
		RepeatWrapping: RepeatWrapping,
		ClampToEdgeWrapping: ClampToEdgeWrapping,
		MirroredRepeatWrapping: MirroredRepeatWrapping
	};

	var TEXTURE_FILTER = {
		NearestFilter: NearestFilter,
		NearestMipmapNearestFilter: NearestMipmapNearestFilter,
		NearestMipmapLinearFilter: NearestMipmapLinearFilter,
		LinearFilter: LinearFilter,
		LinearMipmapNearestFilter: LinearMipmapNearestFilter,
		LinearMipmapLinearFilter: LinearMipmapLinearFilter
	};

	/**
	 * @author thespite / http://clicktorelease.com/
	 */


	function ImageBitmapLoader( manager ) {

		if ( typeof createImageBitmap === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );

		}

		if ( typeof fetch === 'undefined' ) {

			console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );

		}

		Loader.call( this, manager );

		this.options = undefined;

	}

	ImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: ImageBitmapLoader,

		setOptions: function setOptions( options ) {

			this.options = options;

			return this;

		},

		load: function ( url, onLoad, onProgress, onError ) {

			if ( url === undefined ) { url = ''; }

			if ( this.path !== undefined ) { url = this.path + url; }

			url = this.manager.resolveURL( url );

			var scope = this;

			var cached = Cache.get( url );

			if ( cached !== undefined ) {

				scope.manager.itemStart( url );

				setTimeout( function () {

					if ( onLoad ) { onLoad( cached ); }

					scope.manager.itemEnd( url );

				}, 0 );

				return cached;

			}

			fetch( url ).then( function ( res ) {

				return res.blob();

			} ).then( function ( blob ) {

				if ( scope.options === undefined ) {

					// Workaround for FireFox. It causes an error if you pass options.
					return createImageBitmap( blob );

				} else {

					return createImageBitmap( blob, scope.options );

				}

			} ).then( function ( imageBitmap ) {

				Cache.add( url, imageBitmap );

				if ( onLoad ) { onLoad( imageBitmap ); }

				scope.manager.itemEnd( url );

			} ).catch( function ( e ) {

				if ( onError ) { onError( e ); }

				scope.manager.itemError( url );
				scope.manager.itemEnd( url );

			} );

			scope.manager.itemStart( url );

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
	 **/

	function ShapePath() {

		this.type = 'ShapePath';

		this.color = new Color();

		this.subPaths = [];
		this.currentPath = null;

	}

	Object.assign( ShapePath.prototype, {

		moveTo: function ( x, y ) {

			this.currentPath = new Path();
			this.subPaths.push( this.currentPath );
			this.currentPath.moveTo( x, y );

			return this;

		},

		lineTo: function ( x, y ) {

			this.currentPath.lineTo( x, y );

			return this;

		},

		quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {

			this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );

			return this;

		},

		bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {

			this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );

			return this;

		},

		splineThru: function ( pts ) {

			this.currentPath.splineThru( pts );

			return this;

		},

		toShapes: function ( isCCW, noHoles ) {

			function toShapesNoHoles( inSubpaths ) {

				var shapes = [];

				for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {

					var tmpPath = inSubpaths[ i ];

					var tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;

					shapes.push( tmpShape );

				}

				return shapes;

			}

			function isPointInsidePolygon( inPt, inPolygon ) {

				var polyLen = inPolygon.length;

				// inPt on polygon contour => immediate success    or
				// toggling of inside/outside at every single! intersection point of an edge
				//  with the horizontal line through inPt, left of inPt
				//  not counting lowerY endpoints of edges and whole edges on that line
				var inside = false;
				for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {

					var edgeLowPt = inPolygon[ p ];
					var edgeHighPt = inPolygon[ q ];

					var edgeDx = edgeHighPt.x - edgeLowPt.x;
					var edgeDy = edgeHighPt.y - edgeLowPt.y;

					if ( Math.abs( edgeDy ) > Number.EPSILON ) {

						// not parallel
						if ( edgeDy < 0 ) {

							edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
							edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;

						}
						if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		{ continue; }

						if ( inPt.y === edgeLowPt.y ) {

							if ( inPt.x === edgeLowPt.x )		{ return	true; }		// inPt is on contour ?
							// continue;				// no intersection or edgeLowPt => doesn't count !!!

						} else {

							var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
							if ( perpEdge === 0 )				{ return	true; }		// inPt is on contour ?
							if ( perpEdge < 0 ) 				{ continue; }
							inside = ! inside;		// true intersection left of inPt

						}

					} else {

						// parallel or collinear
						if ( inPt.y !== edgeLowPt.y ) 		{ continue; }			// parallel
						// edge lies on the same horizontal line as inPt
						if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
							 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		{ return	true; }	// inPt: Point on contour !
						// continue;

					}

				}

				return	inside;

			}

			var isClockWise = ShapeUtils.isClockWise;

			var subPaths = this.subPaths;
			if ( subPaths.length === 0 ) { return []; }

			if ( noHoles === true )	{ return	toShapesNoHoles( subPaths ); }


			var solid, tmpPath, tmpShape, shapes = [];

			if ( subPaths.length === 1 ) {

				tmpPath = subPaths[ 0 ];
				tmpShape = new Shape();
				tmpShape.curves = tmpPath.curves;
				shapes.push( tmpShape );
				return shapes;

			}

			var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
			holesFirst = isCCW ? ! holesFirst : holesFirst;

			// console.log("Holes first", holesFirst);

			var betterShapeHoles = [];
			var newShapes = [];
			var newShapeHoles = [];
			var mainIdx = 0;
			var tmpPoints;

			newShapes[ mainIdx ] = undefined;
			newShapeHoles[ mainIdx ] = [];

			for ( var i = 0, l = subPaths.length; i < l; i ++ ) {

				tmpPath = subPaths[ i ];
				tmpPoints = tmpPath.getPoints();
				solid = isClockWise( tmpPoints );
				solid = isCCW ? ! solid : solid;

				if ( solid ) {

					if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	{ mainIdx ++; }

					newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
					newShapes[ mainIdx ].s.curves = tmpPath.curves;

					if ( holesFirst )	{ mainIdx ++; }
					newShapeHoles[ mainIdx ] = [];

					//console.log('cw', i);

				} else {

					newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );

					//console.log('ccw', i);

				}

			}

			// only Holes? -> probably all Shapes with wrong orientation
			if ( ! newShapes[ 0 ] )	{ return	toShapesNoHoles( subPaths ); }


			if ( newShapes.length > 1 ) {

				var ambiguous = false;
				var toChange = [];

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					betterShapeHoles[ sIdx ] = [];

				}

				for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {

					var sho = newShapeHoles[ sIdx ];

					for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {

						var ho = sho[ hIdx ];
						var hole_unassigned = true;

						for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {

							if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {

								if ( sIdx !== s2Idx )	{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }
								if ( hole_unassigned ) {

									hole_unassigned = false;
									betterShapeHoles[ s2Idx ].push( ho );

								} else {

									ambiguous = true;

								}

							}

						}
						if ( hole_unassigned ) {

							betterShapeHoles[ sIdx ].push( ho );

						}

					}

				}
				// console.log("ambiguous: ", ambiguous);
				if ( toChange.length > 0 ) {

					// console.log("to change: ", toChange);
					if ( ! ambiguous )	{ newShapeHoles = betterShapeHoles; }

				}

			}

			var tmpHoles;

			for ( var i = 0, il = newShapes.length; i < il; i ++ ) {

				tmpShape = newShapes[ i ].s;
				shapes.push( tmpShape );
				tmpHoles = newShapeHoles[ i ];

				for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {

					tmpShape.holes.push( tmpHoles[ j ].h );

				}

			}

			//console.log("shape", shapes);

			return shapes;

		}

	} );

	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author mrdoob / http://mrdoob.com/
	 */


	function Font( data ) {

		this.type = 'Font';

		this.data = data;

	}

	Object.assign( Font.prototype, {

		isFont: true,

		generateShapes: function ( text, size ) {

			if ( size === undefined ) { size = 100; }

			var shapes = [];
			var paths = createPaths( text, size, this.data );

			for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

				Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

			}

			return shapes;

		}

	} );

	function createPaths( text, size, data ) {

		var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // see #13988
		var scale = size / data.resolution;
		var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;

		var paths = [];

		var offsetX = 0, offsetY = 0;

		for ( var i = 0; i < chars.length; i ++ ) {

			var char = chars[ i ];

			if ( char === '\n' ) {

				offsetX = 0;
				offsetY -= line_height;

			} else {

				var ret = createPath( char, scale, offsetX, offsetY, data );
				offsetX += ret.offsetX;
				paths.push( ret.path );

			}

		}

		return paths;

	}

	function createPath( char, scale, offsetX, offsetY, data ) {

		var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];

		if ( ! glyph ) {

			console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );

			return;

		}

		var path = new ShapePath();

		var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;

		if ( glyph.o ) {

			var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );

			for ( var i = 0, l = outline.length; i < l; ) {

				var action = outline[ i ++ ];

				switch ( action ) {

					case 'm': // moveTo

						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;

						path.moveTo( x, y );

						break;

					case 'l': // lineTo

						x = outline[ i ++ ] * scale + offsetX;
						y = outline[ i ++ ] * scale + offsetY;

						path.lineTo( x, y );

						break;

					case 'q': // quadraticCurveTo

						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;

						path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

						break;

					case 'b': // bezierCurveTo

						cpx = outline[ i ++ ] * scale + offsetX;
						cpy = outline[ i ++ ] * scale + offsetY;
						cpx1 = outline[ i ++ ] * scale + offsetX;
						cpy1 = outline[ i ++ ] * scale + offsetY;
						cpx2 = outline[ i ++ ] * scale + offsetX;
						cpy2 = outline[ i ++ ] * scale + offsetY;

						path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

						break;

				}

			}

		}

		return { offsetX: glyph.ha * scale, path: path };

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function FontLoader( manager ) {

		Loader.call( this, manager );

	}

	FontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: FontLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var scope = this;

			var loader = new FileLoader( this.manager );
			loader.setPath( this.path );
			loader.load( url, function ( text ) {

				var json;

				try {

					json = JSON.parse( text );

				} catch ( e ) {

					console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
					json = JSON.parse( text.substring( 65, text.length - 2 ) );

				}

				var font = scope.parse( json );

				if ( onLoad ) { onLoad( font ); }

			}, onProgress, onError );

		},

		parse: function ( json ) {

			return new Font( json );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _context;

	var AudioContext = {

		getContext: function () {

			if ( _context === undefined ) {

				_context = new ( window.AudioContext || window.webkitAudioContext )();

			}

			return _context;

		},

		setContext: function ( value ) {

			_context = value;

		}

	};

	/**
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function AudioLoader( manager ) {

		Loader.call( this, manager );

	}

	AudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {

		constructor: AudioLoader,

		load: function ( url, onLoad, onProgress, onError ) {

			var loader = new FileLoader( this.manager );
			loader.setResponseType( 'arraybuffer' );
			loader.setPath( this.path );
			loader.load( url, function ( buffer ) {

				// Create a copy of the buffer. The `decodeAudioData` method
				// detaches the buffer when complete, preventing reuse.
				var bufferCopy = buffer.slice( 0 );

				var context = AudioContext.getContext();
				context.decodeAudioData( bufferCopy, function ( audioBuffer ) {

					onLoad( audioBuffer );

				} );

			}, onProgress, onError );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Primary reference:
	 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
	 *
	 * Secondary reference:
	 *   https://www.ppsloan.org/publications/StupidSH36.pdf
	 */

	// 3-band SH defined by 9 coefficients

	function SphericalHarmonics3() {

		this.coefficients = [];

		for ( var i = 0; i < 9; i ++ ) {

			this.coefficients.push( new Vector3() );

		}

	}

	Object.assign( SphericalHarmonics3.prototype, {

		isSphericalHarmonics3: true,

		set: function ( coefficients ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].copy( coefficients[ i ] );

			}

			return this;

		},

		zero: function () {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].set( 0, 0, 0 );

			}

			return this;

		},

		// get the radiance in the direction of the normal
		// target is a Vector3
		getAt: function ( normal, target ) {

			// normal is assumed to be unit length

			var x = normal.x, y = normal.y, z = normal.z;

			var coeff = this.coefficients;

			// band 0
			target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );

			// band 1
			target.addScale( coeff[ 1 ], 0.488603 * y );
			target.addScale( coeff[ 2 ], 0.488603 * z );
			target.addScale( coeff[ 3 ], 0.488603 * x );

			// band 2
			target.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );
			target.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );
			target.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
			target.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );
			target.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );

			return target;

		},

		// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
		// target is a Vector3
		// https://graphics.stanford.edu/papers/envmap/envmap.pdf
		getIrradianceAt: function ( normal, target ) {

			// normal is assumed to be unit length

			var x = normal.x, y = normal.y, z = normal.z;

			var coeff = this.coefficients;

			// band 0
			target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095

			// band 1
			target.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
			target.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );
			target.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );

			// band 2
			target.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
			target.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );
			target.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
			target.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );
			target.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274

			return target;

		},

		add: function ( sh ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].add( sh.coefficients[ i ] );

			}

			return this;

		},


		scale: function ( s ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].multiplyScalar( s );

			}

			return this;

		},

		lerp: function ( sh, alpha ) {

			for ( var i = 0; i < 9; i ++ ) {

				this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );

			}

			return this;

		},

		equals: function ( sh ) {

			for ( var i = 0; i < 9; i ++ ) {

				if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {

					return false;

				}

			}

			return true;

		},

		copy: function ( sh ) {

			return this.set( sh.coefficients );

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		fromArray: function ( array, offset ) {

			if ( offset === undefined ) { offset = 0; }

			var coefficients = this.coefficients;

			for ( var i = 0; i < 9; i ++ ) {

				coefficients[ i ].fromArray( array, offset + ( i * 3 ) );

			}

			return this;

		},

		toArray: function ( array, offset ) {

			if ( array === undefined ) { array = []; }
			if ( offset === undefined ) { offset = 0; }

			var coefficients = this.coefficients;

			for ( var i = 0; i < 9; i ++ ) {

				coefficients[ i ].toArray( array, offset + ( i * 3 ) );

			}

			return array;

		}

	} );

	Object.assign( SphericalHarmonics3, {

		// evaluate the basis functions
		// shBasis is an Array[ 9 ]
		getBasisAt: function ( normal, shBasis ) {

			// normal is assumed to be unit length

			var x = normal.x, y = normal.y, z = normal.z;

			// band 0
			shBasis[ 0 ] = 0.282095;

			// band 1
			shBasis[ 1 ] = 0.488603 * y;
			shBasis[ 2 ] = 0.488603 * z;
			shBasis[ 3 ] = 0.488603 * x;

			// band 2
			shBasis[ 4 ] = 1.092548 * x * y;
			shBasis[ 5 ] = 1.092548 * y * z;
			shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
			shBasis[ 7 ] = 1.092548 * x * z;
			shBasis[ 8 ] = 0.546274 * ( x * x - y * y );

		}

	} );

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * A LightProbe is a source of indirect-diffuse light
	 */

	function LightProbe( sh, intensity ) {

		Light.call( this, undefined, intensity );

		this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();

	}

	LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {

		constructor: LightProbe,

		isLightProbe: true,

		copy: function ( source ) {

			Light.prototype.copy.call( this, source );

			this.sh.copy( source.sh );
			this.intensity = source.intensity;

			return this;

		},

		toJSON: function ( meta ) {

			var data = Light.prototype.toJSON.call( this, meta );

			// data.sh = this.sh.toArray(); // todo

			return data;

		}

	} );

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function HemisphereLightProbe( skyColor, groundColor, intensity ) {

		LightProbe.call( this, undefined, intensity );

		var color1 = new Color().set( skyColor );
		var color2 = new Color().set( groundColor );

		var sky = new Vector3( color1.r, color1.g, color1.b );
		var ground = new Vector3( color2.r, color2.g, color2.b );

		// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
		var c0 = Math.sqrt( Math.PI );
		var c1 = c0 * Math.sqrt( 0.75 );

		this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
		this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );

	}

	HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

		constructor: HemisphereLightProbe,

		isHemisphereLightProbe: true,

		copy: function ( source ) { // modifying colors not currently supported

			LightProbe.prototype.copy.call( this, source );

			return this;

		},

		toJSON: function ( meta ) {

			var data = LightProbe.prototype.toJSON.call( this, meta );

			// data.sh = this.sh.toArray(); // todo

			return data;

		}

	} );

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function AmbientLightProbe( color, intensity ) {

		LightProbe.call( this, undefined, intensity );

		var color1 = new Color().set( color );

		// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
		this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );

	}

	AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {

		constructor: AmbientLightProbe,

		isAmbientLightProbe: true,

		copy: function ( source ) { // modifying color not currently supported

			LightProbe.prototype.copy.call( this, source );

			return this;

		},

		toJSON: function ( meta ) {

			var data = LightProbe.prototype.toJSON.call( this, meta );

			// data.sh = this.sh.toArray(); // todo

			return data;

		}

	} );

	var _eyeRight = new Matrix4();
	var _eyeLeft = new Matrix4();

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function StereoCamera() {

		this.type = 'StereoCamera';

		this.aspect = 1;

		this.eyeSep = 0.064;

		this.cameraL = new PerspectiveCamera();
		this.cameraL.layers.enable( 1 );
		this.cameraL.matrixAutoUpdate = false;

		this.cameraR = new PerspectiveCamera();
		this.cameraR.layers.enable( 2 );
		this.cameraR.matrixAutoUpdate = false;

		this._cache = {
			focus: null,
			fov: null,
			aspect: null,
			near: null,
			far: null,
			zoom: null,
			eyeSep: null
		};

	}

	Object.assign( StereoCamera.prototype, {

		update: function ( camera ) {

			var cache = this._cache;

			var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
				cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
				cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;

			if ( needsUpdate ) {

				cache.focus = camera.focus;
				cache.fov = camera.fov;
				cache.aspect = camera.aspect * this.aspect;
				cache.near = camera.near;
				cache.far = camera.far;
				cache.zoom = camera.zoom;
				cache.eyeSep = this.eyeSep;

				// Off-axis stereoscopic effect based on
				// http://paulbourke.net/stereographics/stereorender/

				var projectionMatrix = camera.projectionMatrix.clone();
				var eyeSepHalf = cache.eyeSep / 2;
				var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
				var ymax = ( cache.near * Math.tan( _Math.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
				var xmin, xmax;

				// translate xOffset

				_eyeLeft.elements[ 12 ] = - eyeSepHalf;
				_eyeRight.elements[ 12 ] = eyeSepHalf;

				// for left eye

				xmin = - ymax * cache.aspect + eyeSepOnProjection;
				xmax = ymax * cache.aspect + eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraL.projectionMatrix.copy( projectionMatrix );

				// for right eye

				xmin = - ymax * cache.aspect - eyeSepOnProjection;
				xmax = ymax * cache.aspect - eyeSepOnProjection;

				projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
				projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );

				this.cameraR.projectionMatrix.copy( projectionMatrix );

			}

			this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
			this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function Clock( autoStart ) {

		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;

		this.running = false;

	}

	Object.assign( Clock.prototype, {

		start: function () {

			this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732

			this.oldTime = this.startTime;
			this.elapsedTime = 0;
			this.running = true;

		},

		stop: function () {

			this.getElapsedTime();
			this.running = false;
			this.autoStart = false;

		},

		getElapsedTime: function () {

			this.getDelta();
			return this.elapsedTime;

		},

		getDelta: function () {

			var diff = 0;

			if ( this.autoStart && ! this.running ) {

				this.start();
				return 0;

			}

			if ( this.running ) {

				var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();

				diff = ( newTime - this.oldTime ) / 1000;
				this.oldTime = newTime;

				this.elapsedTime += diff;

			}

			return diff;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _position$2 = new Vector3();
	var _quaternion$3 = new Quaternion();
	var _scale$1 = new Vector3();
	var _orientation = new Vector3();

	function AudioListener() {

		Object3D.call( this );

		this.type = 'AudioListener';

		this.context = AudioContext.getContext();

		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );

		this.filter = null;

		this.timeDelta = 0;

		// private

		this._clock = new Clock();

	}

	AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: AudioListener,

		getInput: function () {

			return this.gain;

		},

		removeFilter: function ( ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );
				this.gain.connect( this.context.destination );
				this.filter = null;

			}

			return this;

		},

		getFilter: function () {

			return this.filter;

		},

		setFilter: function ( value ) {

			if ( this.filter !== null ) {

				this.gain.disconnect( this.filter );
				this.filter.disconnect( this.context.destination );

			} else {

				this.gain.disconnect( this.context.destination );

			}

			this.filter = value;
			this.gain.connect( this.filter );
			this.filter.connect( this.context.destination );

			return this;

		},

		getMasterVolume: function () {

			return this.gain.gain.value;

		},

		setMasterVolume: function ( value ) {

			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

			return this;

		},

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			var listener = this.context.listener;
			var up = this.up;

			this.timeDelta = this._clock.getDelta();

			this.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );

			_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );

			if ( listener.positionX ) {

				// code path for Chrome (see #14393)

				var endTime = this.context.currentTime + this.timeDelta;

				listener.positionX.linearRampToValueAtTime( _position$2.x, endTime );
				listener.positionY.linearRampToValueAtTime( _position$2.y, endTime );
				listener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );
				listener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );
				listener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );
				listener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );
				listener.upX.linearRampToValueAtTime( up.x, endTime );
				listener.upY.linearRampToValueAtTime( up.y, endTime );
				listener.upZ.linearRampToValueAtTime( up.z, endTime );

			} else {

				listener.setPosition( _position$2.x, _position$2.y, _position$2.z );
				listener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Reece Aaron Lecrivain / http://reecenotes.com/
	 */

	function Audio( listener ) {

		Object3D.call( this );

		this.type = 'Audio';

		this.listener = listener;
		this.context = listener.context;

		this.gain = this.context.createGain();
		this.gain.connect( listener.getInput() );

		this.autoplay = false;

		this.buffer = null;
		this.detune = 0;
		this.loop = false;
		this.loopStart = 0;
		this.loopEnd = 0;
		this.offset = 0;
		this.duration = undefined;
		this.playbackRate = 1;
		this.isPlaying = false;
		this.hasPlaybackControl = true;
		this.sourceType = 'empty';

		this._startedAt = 0;
		this._pausedAt = 0;

		this.filters = [];

	}

	Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {

		constructor: Audio,

		getOutput: function () {

			return this.gain;

		},

		setNodeSource: function ( audioNode ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'audioNode';
			this.source = audioNode;
			this.connect();

			return this;

		},

		setMediaElementSource: function ( mediaElement ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'mediaNode';
			this.source = this.context.createMediaElementSource( mediaElement );
			this.connect();

			return this;

		},

		setMediaStreamSource: function ( mediaStream ) {

			this.hasPlaybackControl = false;
			this.sourceType = 'mediaStreamNode';
			this.source = this.context.createMediaStreamSource( mediaStream );
			this.connect();

			return this;

		},

		setBuffer: function ( audioBuffer ) {

			this.buffer = audioBuffer;
			this.sourceType = 'buffer';

			if ( this.autoplay ) { this.play(); }

			return this;

		},

		play: function ( delay ) {

			if ( delay === undefined ) { delay = 0; }

			if ( this.isPlaying === true ) {

				console.warn( 'THREE.Audio: Audio is already playing.' );
				return;

			}

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this._startedAt = this.context.currentTime + delay;

			var source = this.context.createBufferSource();
			source.buffer = this.buffer;
			source.loop = this.loop;
			source.loopStart = this.loopStart;
			source.loopEnd = this.loopEnd;
			source.onended = this.onEnded.bind( this );
			source.start( this._startedAt, this._pausedAt + this.offset, this.duration );

			this.isPlaying = true;

			this.source = source;

			this.setDetune( this.detune );
			this.setPlaybackRate( this.playbackRate );

			return this.connect();

		},

		pause: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			if ( this.isPlaying === true ) {

				this._pausedAt = ( this.context.currentTime - this._startedAt ) * this.playbackRate;

				this.source.stop();
				this.source.onended = null;

				this.isPlaying = false;

			}

			return this;

		},

		stop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this._pausedAt = 0;

			this.source.stop();
			this.source.onended = null;
			this.isPlaying = false;

			return this;

		},

		connect: function () {

			if ( this.filters.length > 0 ) {

				this.source.connect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].connect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].connect( this.getOutput() );

			} else {

				this.source.connect( this.getOutput() );

			}

			return this;

		},

		disconnect: function () {

			if ( this.filters.length > 0 ) {

				this.source.disconnect( this.filters[ 0 ] );

				for ( var i = 1, l = this.filters.length; i < l; i ++ ) {

					this.filters[ i - 1 ].disconnect( this.filters[ i ] );

				}

				this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );

			} else {

				this.source.disconnect( this.getOutput() );

			}

			return this;

		},

		getFilters: function () {

			return this.filters;

		},

		setFilters: function ( value ) {

			if ( ! value ) { value = []; }

			if ( this.isPlaying === true ) {

				this.disconnect();
				this.filters = value;
				this.connect();

			} else {

				this.filters = value;

			}

			return this;

		},

		setDetune: function ( value ) {

			this.detune = value;

			if ( this.source.detune === undefined ) { return; } // only set detune when available

			if ( this.isPlaying === true ) {

				this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );

			}

			return this;

		},

		getDetune: function () {

			return this.detune;

		},

		getFilter: function () {

			return this.getFilters()[ 0 ];

		},

		setFilter: function ( filter ) {

			return this.setFilters( filter ? [ filter ] : [] );

		},

		setPlaybackRate: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.playbackRate = value;

			if ( this.isPlaying === true ) {

				this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );

			}

			return this;

		},

		getPlaybackRate: function () {

			return this.playbackRate;

		},

		onEnded: function () {

			this.isPlaying = false;

		},

		getLoop: function () {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return false;

			}

			return this.loop;

		},

		setLoop: function ( value ) {

			if ( this.hasPlaybackControl === false ) {

				console.warn( 'THREE.Audio: this Audio has no playback control.' );
				return;

			}

			this.loop = value;

			if ( this.isPlaying === true ) {

				this.source.loop = this.loop;

			}

			return this;

		},

		setLoopStart: function ( value ) {

			this.loopStart = value;

			return this;

		},

		setLoopEnd: function ( value ) {

			this.loopEnd = value;

			return this;

		},

		getVolume: function () {

			return this.gain.gain.value;

		},

		setVolume: function ( value ) {

			this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	var _position$3 = new Vector3();
	var _quaternion$4 = new Quaternion();
	var _scale$2 = new Vector3();
	var _orientation$1 = new Vector3();

	function PositionalAudio( listener ) {

		Audio.call( this, listener );

		this.panner = this.context.createPanner();
		this.panner.panningModel = 'HRTF';
		this.panner.connect( this.gain );

	}

	PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {

		constructor: PositionalAudio,

		getOutput: function () {

			return this.panner;

		},

		getRefDistance: function () {

			return this.panner.refDistance;

		},

		setRefDistance: function ( value ) {

			this.panner.refDistance = value;

			return this;

		},

		getRolloffFactor: function () {

			return this.panner.rolloffFactor;

		},

		setRolloffFactor: function ( value ) {

			this.panner.rolloffFactor = value;

			return this;

		},

		getDistanceModel: function () {

			return this.panner.distanceModel;

		},

		setDistanceModel: function ( value ) {

			this.panner.distanceModel = value;

			return this;

		},

		getMaxDistance: function () {

			return this.panner.maxDistance;

		},

		setMaxDistance: function ( value ) {

			this.panner.maxDistance = value;

			return this;

		},

		setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {

			this.panner.coneInnerAngle = coneInnerAngle;
			this.panner.coneOuterAngle = coneOuterAngle;
			this.panner.coneOuterGain = coneOuterGain;

			return this;

		},

		updateMatrixWorld: function ( force ) {

			Object3D.prototype.updateMatrixWorld.call( this, force );

			if ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }

			this.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );

			_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );

			var panner = this.panner;

			if ( panner.positionX ) {

				// code path for Chrome and Firefox (see #14393)

				var endTime = this.context.currentTime + this.listener.timeDelta;

				panner.positionX.linearRampToValueAtTime( _position$3.x, endTime );
				panner.positionY.linearRampToValueAtTime( _position$3.y, endTime );
				panner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );
				panner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );
				panner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );
				panner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );

			} else {

				panner.setPosition( _position$3.x, _position$3.y, _position$3.z );
				panner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AudioAnalyser( audio, fftSize ) {

		this.analyser = audio.context.createAnalyser();
		this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;

		this.data = new Uint8Array( this.analyser.frequencyBinCount );

		audio.getOutput().connect( this.analyser );

	}

	Object.assign( AudioAnalyser.prototype, {

		getFrequencyData: function () {

			this.analyser.getByteFrequencyData( this.data );

			return this.data;

		},

		getAverageFrequency: function () {

			var value = 0, data = this.getFrequencyData();

			for ( var i = 0; i < data.length; i ++ ) {

				value += data[ i ];

			}

			return value / data.length;

		}

	} );

	/**
	 *
	 * Buffered scene graph property that allows weighted accumulation.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function PropertyMixer( binding, typeName, valueSize ) {

		this.binding = binding;
		this.valueSize = valueSize;

		var bufferType = Float64Array,
			mixFunction;

		switch ( typeName ) {

			case 'quaternion':
				mixFunction = this._slerp;
				break;

			case 'string':
			case 'bool':
				bufferType = Array;
				mixFunction = this._select;
				break;

			default:
				mixFunction = this._lerp;

		}

		this.buffer = new bufferType( valueSize * 4 );
		// layout: [ incoming | accu0 | accu1 | orig ]
		//
		// interpolators can use .buffer as their .result
		// the data then goes to 'incoming'
		//
		// 'accu0' and 'accu1' are used frame-interleaved for
		// the cumulative result and are compared to detect
		// changes
		//
		// 'orig' stores the original state of the property

		this._mixBufferRegion = mixFunction;

		this.cumulativeWeight = 0;

		this.useCount = 0;
		this.referenceCount = 0;

	}

	Object.assign( PropertyMixer.prototype, {

		// accumulate data in the 'incoming' region into 'accu<i>'
		accumulate: function ( accuIndex, weight ) {

			// note: happily accumulating nothing when weight = 0, the caller knows
			// the weight and shouldn't have made the call in the first place

			var buffer = this.buffer,
				stride = this.valueSize,
				offset = accuIndex * stride + stride,

				currentWeight = this.cumulativeWeight;

			if ( currentWeight === 0 ) {

				// accuN := incoming * weight

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ offset + i ] = buffer[ i ];

				}

				currentWeight = weight;

			} else {

				// accuN := accuN + incoming * weight

				currentWeight += weight;
				var mix = weight / currentWeight;
				this._mixBufferRegion( buffer, offset, 0, mix, stride );

			}

			this.cumulativeWeight = currentWeight;

		},

		// apply the state of 'accu<i>' to the binding when accus differ
		apply: function ( accuIndex ) {

			var stride = this.valueSize,
				buffer = this.buffer,
				offset = accuIndex * stride + stride,

				weight = this.cumulativeWeight,

				binding = this.binding;

			this.cumulativeWeight = 0;

			if ( weight < 1 ) {

				// accuN := accuN + original * ( 1 - cumulativeWeight )

				var originalValueOffset = stride * 3;

				this._mixBufferRegion(
					buffer, offset, originalValueOffset, 1 - weight, stride );

			}

			for ( var i = stride, e = stride + stride; i !== e; ++ i ) {

				if ( buffer[ i ] !== buffer[ i + stride ] ) {

					// value has changed -> update scene graph

					binding.setValue( buffer, offset );
					break;

				}

			}

		},

		// remember the state of the bound property and copy it to both accus
		saveOriginalState: function () {

			var binding = this.binding;

			var buffer = this.buffer,
				stride = this.valueSize,

				originalValueOffset = stride * 3;

			binding.getValue( buffer, originalValueOffset );

			// accu[0..1] := orig -- initially detect changes against the original
			for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {

				buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];

			}

			this.cumulativeWeight = 0;

		},

		// apply the state previously taken via 'saveOriginalState' to the binding
		restoreOriginalState: function () {

			var originalValueOffset = this.valueSize * 3;
			this.binding.setValue( this.buffer, originalValueOffset );

		},


		// mix functions

		_select: function ( buffer, dstOffset, srcOffset, t, stride ) {

			if ( t >= 0.5 ) {

				for ( var i = 0; i !== stride; ++ i ) {

					buffer[ dstOffset + i ] = buffer[ srcOffset + i ];

				}

			}

		},

		_slerp: function ( buffer, dstOffset, srcOffset, t ) {

			Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );

		},

		_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {

			var s = 1 - t;

			for ( var i = 0; i !== stride; ++ i ) {

				var j = dstOffset + i;

				buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;

			}

		}

	} );

	/**
	 *
	 * A reference to a real property in the scene graph.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	// Characters [].:/ are reserved for track binding syntax.
	var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
	var _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );

	// Attempts to allow node names from any language. ES5's `\w` regexp matches
	// only latin characters, and the unicode \p{L} is not yet supported. So
	// instead, we exclude reserved characters and match everything else.
	var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
	var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';

	// Parent directories, delimited by '/' or ':'. Currently unused, but must
	// be matched to parse the rest of the track name.
	var _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );

	// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
	var _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );

	// Object on target node, and accessor. May not contain reserved
	// characters. Accessor may contain any character except closing bracket.
	var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );

	// Property and accessor. May not contain reserved characters. Accessor may
	// contain any non-bracket characters.
	var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );

	var _trackRe = new RegExp( ''
		+ '^'
		+ _directoryRe
		+ _nodeRe
		+ _objectRe
		+ _propertyRe
		+ '$'
	);

	var _supportedObjectNames = [ 'material', 'materials', 'bones' ];

	function Composite( targetGroup, path, optionalParsedPath ) {

		var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );

		this._targetGroup = targetGroup;
		this._bindings = targetGroup.subscribe_( path, parsedPath );

	}

	Object.assign( Composite.prototype, {

		getValue: function ( array, offset ) {

			this.bind(); // bind all binding

			var firstValidIndex = this._targetGroup.nCachedObjects_,
				binding = this._bindings[ firstValidIndex ];

			// and only call .getValue on the first
			if ( binding !== undefined ) { binding.getValue( array, offset ); }

		},

		setValue: function ( array, offset ) {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].setValue( array, offset );

			}

		},

		bind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].bind();

			}

		},

		unbind: function () {

			var bindings = this._bindings;

			for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {

				bindings[ i ].unbind();

			}

		}

	} );


	function PropertyBinding( rootNode, path, parsedPath ) {

		this.path = path;
		this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );

		this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;

		this.rootNode = rootNode;

	}

	Object.assign( PropertyBinding, {

		Composite: Composite,

		create: function ( root, path, parsedPath ) {

			if ( ! ( root && root.isAnimationObjectGroup ) ) {

				return new PropertyBinding( root, path, parsedPath );

			} else {

				return new PropertyBinding.Composite( root, path, parsedPath );

			}

		},

		/**
		 * Replaces spaces with underscores and removes unsupported characters from
		 * node names, to ensure compatibility with parseTrackName().
		 *
		 * @param {string} name Node name to be sanitized.
		 * @return {string}
		 */
		sanitizeNodeName: function ( name ) {

			return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );

		},

		parseTrackName: function ( trackName ) {

			var matches = _trackRe.exec( trackName );

			if ( ! matches ) {

				throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );

			}

			var results = {
				// directoryName: matches[ 1 ], // (tschw) currently unused
				nodeName: matches[ 2 ],
				objectName: matches[ 3 ],
				objectIndex: matches[ 4 ],
				propertyName: matches[ 5 ], // required
				propertyIndex: matches[ 6 ]
			};

			var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );

			if ( lastDot !== undefined && lastDot !== - 1 ) {

				var objectName = results.nodeName.substring( lastDot + 1 );

				// Object names must be checked against a whitelist. Otherwise, there
				// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
				// 'bar' could be the objectName, or part of a nodeName (which can
				// include '.' characters).
				if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {

					results.nodeName = results.nodeName.substring( 0, lastDot );
					results.objectName = objectName;

				}

			}

			if ( results.propertyName === null || results.propertyName.length === 0 ) {

				throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );

			}

			return results;

		},

		findNode: function ( root, nodeName ) {

			if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {

				return root;

			}

			// search into skeleton bones.
			if ( root.skeleton ) {

				var bone = root.skeleton.getBoneByName( nodeName );

				if ( bone !== undefined ) {

					return bone;

				}

			}

			// search into node subtree.
			if ( root.children ) {

				var searchNodeSubtree = function ( children ) {

					for ( var i = 0; i < children.length; i ++ ) {

						var childNode = children[ i ];

						if ( childNode.name === nodeName || childNode.uuid === nodeName ) {

							return childNode;

						}

						var result = searchNodeSubtree( childNode.children );

						if ( result ) { return result; }

					}

					return null;

				};

				var subTreeNode = searchNodeSubtree( root.children );

				if ( subTreeNode ) {

					return subTreeNode;

				}

			}

			return null;

		}

	} );

	Object.assign( PropertyBinding.prototype, { // prototype, continued

		// these are used to "bind" a nonexistent property
		_getValue_unavailable: function () {},
		_setValue_unavailable: function () {},

		BindingType: {
			Direct: 0,
			EntireArray: 1,
			ArrayElement: 2,
			HasFromToArray: 3
		},

		Versioning: {
			None: 0,
			NeedsUpdate: 1,
			MatrixWorldNeedsUpdate: 2
		},

		GetterByBindingType: [

			function getValue_direct( buffer, offset ) {

				buffer[ offset ] = this.node[ this.propertyName ];

			},

			function getValue_array( buffer, offset ) {

				var source = this.resolvedProperty;

				for ( var i = 0, n = source.length; i !== n; ++ i ) {

					buffer[ offset ++ ] = source[ i ];

				}

			},

			function getValue_arrayElement( buffer, offset ) {

				buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];

			},

			function getValue_toArray( buffer, offset ) {

				this.resolvedProperty.toArray( buffer, offset );

			}

		],

		SetterByBindingTypeAndVersioning: [

			[
				// Direct

				function setValue_direct( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];

				},

				function setValue_direct_setNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.targetObject[ this.propertyName ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// EntireArray

				function setValue_array( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

				},

				function setValue_array_setNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.needsUpdate = true;

				},

				function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {

					var dest = this.resolvedProperty;

					for ( var i = 0, n = dest.length; i !== n; ++ i ) {

						dest[ i ] = buffer[ offset ++ ];

					}

					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// ArrayElement

				function setValue_arrayElement( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];

				},

				function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.needsUpdate = true;

				},

				function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			], [

				// HasToFromArray

				function setValue_fromArray( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );

				},

				function setValue_fromArray_setNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.needsUpdate = true;

				},

				function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {

					this.resolvedProperty.fromArray( buffer, offset );
					this.targetObject.matrixWorldNeedsUpdate = true;

				}

			]

		],

		getValue: function getValue_unbound( targetArray, offset ) {

			this.bind();
			this.getValue( targetArray, offset );

			// Note: This class uses a State pattern on a per-method basis:
			// 'bind' sets 'this.getValue' / 'setValue' and shadows the
			// prototype version of these methods with one that represents
			// the bound state. When the property is not found, the methods
			// become no-ops.

		},

		setValue: function getValue_unbound( sourceArray, offset ) {

			this.bind();
			this.setValue( sourceArray, offset );

		},

		// create getter / setter pair for a property in the scene graph
		bind: function () {

			var targetObject = this.node,
				parsedPath = this.parsedPath,

				objectName = parsedPath.objectName,
				propertyName = parsedPath.propertyName,
				propertyIndex = parsedPath.propertyIndex;

			if ( ! targetObject ) {

				targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;

				this.node = targetObject;

			}

			// set fail state so we can just 'return' on error
			this.getValue = this._getValue_unavailable;
			this.setValue = this._setValue_unavailable;

			// ensure there is a value node
			if ( ! targetObject ) {

				console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
				return;

			}

			if ( objectName ) {

				var objectIndex = parsedPath.objectIndex;

				// special cases were we need to reach deeper into the hierarchy to get the face materials....
				switch ( objectName ) {

					case 'materials':

						if ( ! targetObject.material ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
							return;

						}

						if ( ! targetObject.material.materials ) {

							console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
							return;

						}

						targetObject = targetObject.material.materials;

						break;

					case 'bones':

						if ( ! targetObject.skeleton ) {

							console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
							return;

						}

						// potential future optimization: skip this if propertyIndex is already an integer
						// and convert the integer string to a true integer.

						targetObject = targetObject.skeleton.bones;

						// support resolving morphTarget names into indices.
						for ( var i = 0; i < targetObject.length; i ++ ) {

							if ( targetObject[ i ].name === objectIndex ) {

								objectIndex = i;
								break;

							}

						}

						break;

					default:

						if ( targetObject[ objectName ] === undefined ) {

							console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
							return;

						}

						targetObject = targetObject[ objectName ];

				}


				if ( objectIndex !== undefined ) {

					if ( targetObject[ objectIndex ] === undefined ) {

						console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
						return;

					}

					targetObject = targetObject[ objectIndex ];

				}

			}

			// resolve property
			var nodeProperty = targetObject[ propertyName ];

			if ( nodeProperty === undefined ) {

				var nodeName = parsedPath.nodeName;

				console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
					'.' + propertyName + ' but it wasn\'t found.', targetObject );
				return;

			}

			// determine versioning scheme
			var versioning = this.Versioning.None;

			this.targetObject = targetObject;

			if ( targetObject.needsUpdate !== undefined ) { // material

				versioning = this.Versioning.NeedsUpdate;

			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform

				versioning = this.Versioning.MatrixWorldNeedsUpdate;

			}

			// determine how the property gets bound
			var bindingType = this.BindingType.Direct;

			if ( propertyIndex !== undefined ) {

				// access a sub element of the property array (only primitives are supported right now)

				if ( propertyName === "morphTargetInfluences" ) {

					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.

					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {

						console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
						return;

					}

					if ( targetObject.geometry.isBufferGeometry ) {

						if ( ! targetObject.geometry.morphAttributes ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {

							if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}


					} else {

						if ( ! targetObject.geometry.morphTargets ) {

							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
							return;

						}

						for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {

							if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {

								propertyIndex = i;
								break;

							}

						}

					}

				}

				bindingType = this.BindingType.ArrayElement;

				this.resolvedProperty = nodeProperty;
				this.propertyIndex = propertyIndex;

			} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {

				// must use copy for Object3D.Euler/Quaternion

				bindingType = this.BindingType.HasFromToArray;

				this.resolvedProperty = nodeProperty;

			} else if ( Array.isArray( nodeProperty ) ) {

				bindingType = this.BindingType.EntireArray;

				this.resolvedProperty = nodeProperty;

			} else {

				this.propertyName = propertyName;

			}

			// select getter / setter
			this.getValue = this.GetterByBindingType[ bindingType ];
			this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];

		},

		unbind: function () {

			this.node = null;

			// back to the prototype version of getValue / setValue
			// note: avoiding to mutate the shape of 'this' via 'delete'
			this.getValue = this._getValue_unbound;
			this.setValue = this._setValue_unbound;

		}

	} );

	//!\ DECLARE ALIAS AFTER assign prototype !
	Object.assign( PropertyBinding.prototype, {

		// initial state of these methods that calls 'bind'
		_getValue_unbound: PropertyBinding.prototype.getValue,
		_setValue_unbound: PropertyBinding.prototype.setValue,

	} );

	/**
	 *
	 * A group of objects that receives a shared animation state.
	 *
	 * Usage:
	 *
	 *  - Add objects you would otherwise pass as 'root' to the
	 *    constructor or the .clipAction method of AnimationMixer.
	 *
	 *  - Instead pass this object as 'root'.
	 *
	 *  - You can also add and remove objects later when the mixer
	 *    is running.
	 *
	 * Note:
	 *
	 *    Objects of this class appear as one object to the mixer,
	 *    so cache control of the individual objects must be done
	 *    on the group.
	 *
	 * Limitation:
	 *
	 *  - The animated properties must be compatible among the
	 *    all objects in the group.
	 *
	 *  - A single property can either be controlled through a
	 *    target group or directly, but not both.
	 *
	 * @author tschw
	 */

	function AnimationObjectGroup() {

		this.uuid = _Math.generateUUID();

		// cached objects followed by the active ones
		this._objects = Array.prototype.slice.call( arguments );

		this.nCachedObjects_ = 0; // threshold
		// note: read by PropertyBinding.Composite

		var indices = {};
		this._indicesByUUID = indices; // for bookkeeping

		for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

			indices[ arguments[ i ].uuid ] = i;

		}

		this._paths = []; // inside: string
		this._parsedPaths = []; // inside: { we don't care, here }
		this._bindings = []; // inside: Array< PropertyBinding >
		this._bindingsIndicesByPath = {}; // inside: indices in these arrays

		var scope = this;

		this.stats = {

			objects: {
				get total() {

					return scope._objects.length;

				},
				get inUse() {

					return this.total - scope.nCachedObjects_;

				}
			},
			get bindingsPerObject() {

				return scope._bindings.length;

			}

		};

	}

	Object.assign( AnimationObjectGroup.prototype, {

		isAnimationObjectGroup: true,

		add: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				paths = this._paths,
				parsedPaths = this._parsedPaths,
				bindings = this._bindings,
				nBindings = bindings.length,
				knownObject = undefined;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index === undefined ) {

					// unknown object -> add it to the ACTIVE region

					index = nObjects ++;
					indicesByUUID[ uuid ] = index;
					objects.push( object );

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );

					}

				} else if ( index < nCachedObjects ) {

					knownObject = objects[ index ];

					// move existing object to the ACTIVE region

					var firstActiveIndex = -- nCachedObjects,
						lastCachedObject = objects[ firstActiveIndex ];

					indicesByUUID[ lastCachedObject.uuid ] = index;
					objects[ index ] = lastCachedObject;

					indicesByUUID[ uuid ] = firstActiveIndex;
					objects[ firstActiveIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							lastCached = bindingsForPath[ firstActiveIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = lastCached;

						if ( binding === undefined ) {

							// since we do not bother to create new bindings
							// for objects that are cached, the binding may
							// or may not exist

							binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );

						}

						bindingsForPath[ firstActiveIndex ] = binding;

					}

				} else if ( objects[ index ] !== knownObject ) {

					console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
						'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );

				} // else the object is already where we want it to be

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		remove: function () {

			var objects = this._objects,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined && index >= nCachedObjects ) {

					// move existing object into the CACHED region

					var lastCachedIndex = nCachedObjects ++,
						firstActiveObject = objects[ lastCachedIndex ];

					indicesByUUID[ firstActiveObject.uuid ] = index;
					objects[ index ] = firstActiveObject;

					indicesByUUID[ uuid ] = lastCachedIndex;
					objects[ lastCachedIndex ] = object;

					// accounting is done, now do the same for all bindings

					for ( var j = 0, m = nBindings; j !== m; ++ j ) {

						var bindingsForPath = bindings[ j ],
							firstActive = bindingsForPath[ lastCachedIndex ],
							binding = bindingsForPath[ index ];

						bindingsForPath[ index ] = firstActive;
						bindingsForPath[ lastCachedIndex ] = binding;

					}

				}

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// remove & forget
		uncache: function () {

			var objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				indicesByUUID = this._indicesByUUID,
				bindings = this._bindings,
				nBindings = bindings.length;

			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {

				var object = arguments[ i ],
					uuid = object.uuid,
					index = indicesByUUID[ uuid ];

				if ( index !== undefined ) {

					delete indicesByUUID[ uuid ];

					if ( index < nCachedObjects ) {

						// object is cached, shrink the CACHED region

						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ],
							lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						// last cached object takes this object's place
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;

						// last object goes to the activated slot and pop
						indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								last = bindingsForPath[ lastIndex ];

							bindingsForPath[ index ] = lastCached;
							bindingsForPath[ firstActiveIndex ] = last;
							bindingsForPath.pop();

						}

					} else {

						// object is active, just swap with the last and pop

						var lastIndex = -- nObjects,
							lastObject = objects[ lastIndex ];

						indicesByUUID[ lastObject.uuid ] = index;
						objects[ index ] = lastObject;
						objects.pop();

						// accounting is done, now do the same for all bindings

						for ( var j = 0, m = nBindings; j !== m; ++ j ) {

							var bindingsForPath = bindings[ j ];

							bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
							bindingsForPath.pop();

						}

					} // cached or active

				} // if object is known

			} // for arguments

			this.nCachedObjects_ = nCachedObjects;

		},

		// Internal interface used by befriended PropertyBinding.Composite:

		subscribe_: function ( path, parsedPath ) {

			// returns an array of bindings for the given path that is changed
			// according to the contained objects in the group

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ],
				bindings = this._bindings;

			if ( index !== undefined ) { return bindings[ index ]; }

			var paths = this._paths,
				parsedPaths = this._parsedPaths,
				objects = this._objects,
				nObjects = objects.length,
				nCachedObjects = this.nCachedObjects_,
				bindingsForPath = new Array( nObjects );

			index = bindings.length;

			indicesByPath[ path ] = index;

			paths.push( path );
			parsedPaths.push( parsedPath );
			bindings.push( bindingsForPath );

			for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {

				var object = objects[ i ];
				bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );

			}

			return bindingsForPath;

		},

		unsubscribe_: function ( path ) {

			// tells the group to forget about a property path and no longer
			// update the array previously obtained with 'subscribe_'

			var indicesByPath = this._bindingsIndicesByPath,
				index = indicesByPath[ path ];

			if ( index !== undefined ) {

				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					lastBindingsIndex = bindings.length - 1,
					lastBindings = bindings[ lastBindingsIndex ],
					lastBindingsPath = path[ lastBindingsIndex ];

				indicesByPath[ lastBindingsPath ] = index;

				bindings[ index ] = lastBindings;
				bindings.pop();

				parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
				parsedPaths.pop();

				paths[ index ] = paths[ lastBindingsIndex ];
				paths.pop();

			}

		}

	} );

	/**
	 *
	 * Action provided by AnimationMixer for scheduling clip playback on specific
	 * objects.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 *
	 */

	function AnimationAction( mixer, clip, localRoot ) {

		this._mixer = mixer;
		this._clip = clip;
		this._localRoot = localRoot || null;

		var tracks = clip.tracks,
			nTracks = tracks.length,
			interpolants = new Array( nTracks );

		var interpolantSettings = {
			endingStart: ZeroCurvatureEnding,
			endingEnd: ZeroCurvatureEnding
		};

		for ( var i = 0; i !== nTracks; ++ i ) {

			var interpolant = tracks[ i ].createInterpolant( null );
			interpolants[ i ] = interpolant;
			interpolant.settings = interpolantSettings;

		}

		this._interpolantSettings = interpolantSettings;

		this._interpolants = interpolants; // bound by the mixer

		// inside: PropertyMixer (managed by the mixer)
		this._propertyBindings = new Array( nTracks );

		this._cacheIndex = null; // for the memory manager
		this._byClipCacheIndex = null; // for the memory manager

		this._timeScaleInterpolant = null;
		this._weightInterpolant = null;

		this.loop = LoopRepeat;
		this._loopCount = - 1;

		// global mixer time when the action is to be started
		// it's set back to 'null' upon start of the action
		this._startTime = null;

		// scaled local time of the action
		// gets clamped or wrapped to 0..clip.duration according to loop
		this.time = 0;

		this.timeScale = 1;
		this._effectiveTimeScale = 1;

		this.weight = 1;
		this._effectiveWeight = 1;

		this.repetitions = Infinity; // no. of repetitions when looping

		this.paused = false; // true -> zero effective time scale
		this.enabled = true; // false -> zero effective weight

		this.clampWhenFinished = false;// keep feeding the last frame?

		this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
		this.zeroSlopeAtEnd = true;// clips for start, loop and end

	}

	Object.assign( AnimationAction.prototype, {

		// State & Scheduling

		play: function () {

			this._mixer._activateAction( this );

			return this;

		},

		stop: function () {

			this._mixer._deactivateAction( this );

			return this.reset();

		},

		reset: function () {

			this.paused = false;
			this.enabled = true;

			this.time = 0; // restart clip
			this._loopCount = - 1;// forget previous loops
			this._startTime = null;// forget scheduling

			return this.stopFading().stopWarping();

		},

		isRunning: function () {

			return this.enabled && ! this.paused && this.timeScale !== 0 &&
				this._startTime === null && this._mixer._isActiveAction( this );

		},

		// return true when play has been called
		isScheduled: function () {

			return this._mixer._isActiveAction( this );

		},

		startAt: function ( time ) {

			this._startTime = time;

			return this;

		},

		setLoop: function ( mode, repetitions ) {

			this.loop = mode;
			this.repetitions = repetitions;

			return this;

		},

		// Weight

		// set the weight stopping any scheduled fading
		// although .enabled = false yields an effective weight of zero, this
		// method does *not* change .enabled, because it would be confusing
		setEffectiveWeight: function ( weight ) {

			this.weight = weight;

			// note: same logic as when updated at runtime
			this._effectiveWeight = this.enabled ? weight : 0;

			return this.stopFading();

		},

		// return the weight considering fading and .enabled
		getEffectiveWeight: function () {

			return this._effectiveWeight;

		},

		fadeIn: function ( duration ) {

			return this._scheduleFading( duration, 0, 1 );

		},

		fadeOut: function ( duration ) {

			return this._scheduleFading( duration, 1, 0 );

		},

		crossFadeFrom: function ( fadeOutAction, duration, warp ) {

			fadeOutAction.fadeOut( duration );
			this.fadeIn( duration );

			if ( warp ) {

				var fadeInDuration = this._clip.duration,
					fadeOutDuration = fadeOutAction._clip.duration,

					startEndRatio = fadeOutDuration / fadeInDuration,
					endStartRatio = fadeInDuration / fadeOutDuration;

				fadeOutAction.warp( 1.0, startEndRatio, duration );
				this.warp( endStartRatio, 1.0, duration );

			}

			return this;

		},

		crossFadeTo: function ( fadeInAction, duration, warp ) {

			return fadeInAction.crossFadeFrom( this, duration, warp );

		},

		stopFading: function () {

			var weightInterpolant = this._weightInterpolant;

			if ( weightInterpolant !== null ) {

				this._weightInterpolant = null;
				this._mixer._takeBackControlInterpolant( weightInterpolant );

			}

			return this;

		},

		// Time Scale Control

		// set the time scale stopping any scheduled warping
		// although .paused = true yields an effective time scale of zero, this
		// method does *not* change .paused, because it would be confusing
		setEffectiveTimeScale: function ( timeScale ) {

			this.timeScale = timeScale;
			this._effectiveTimeScale = this.paused ? 0 : timeScale;

			return this.stopWarping();

		},

		// return the time scale considering warping and .paused
		getEffectiveTimeScale: function () {

			return this._effectiveTimeScale;

		},

		setDuration: function ( duration ) {

			this.timeScale = this._clip.duration / duration;

			return this.stopWarping();

		},

		syncWith: function ( action ) {

			this.time = action.time;
			this.timeScale = action.timeScale;

			return this.stopWarping();

		},

		halt: function ( duration ) {

			return this.warp( this._effectiveTimeScale, 0, duration );

		},

		warp: function ( startTimeScale, endTimeScale, duration ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._timeScaleInterpolant,

				timeScale = this.timeScale;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._timeScaleInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			times[ 1 ] = now + duration;

			values[ 0 ] = startTimeScale / timeScale;
			values[ 1 ] = endTimeScale / timeScale;

			return this;

		},

		stopWarping: function () {

			var timeScaleInterpolant = this._timeScaleInterpolant;

			if ( timeScaleInterpolant !== null ) {

				this._timeScaleInterpolant = null;
				this._mixer._takeBackControlInterpolant( timeScaleInterpolant );

			}

			return this;

		},

		// Object Accessors

		getMixer: function () {

			return this._mixer;

		},

		getClip: function () {

			return this._clip;

		},

		getRoot: function () {

			return this._localRoot || this._mixer._root;

		},

		// Interna

		_update: function ( time, deltaTime, timeDirection, accuIndex ) {

			// called by the mixer

			if ( ! this.enabled ) {

				// call ._updateWeight() to update ._effectiveWeight

				this._updateWeight( time );
				return;

			}

			var startTime = this._startTime;

			if ( startTime !== null ) {

				// check for scheduled start of action

				var timeRunning = ( time - startTime ) * timeDirection;
				if ( timeRunning < 0 || timeDirection === 0 ) {

					return; // yet to come / don't decide when delta = 0

				}

				// start

				this._startTime = null; // unschedule
				deltaTime = timeDirection * timeRunning;

			}

			// apply time scale and advance time

			deltaTime *= this._updateTimeScale( time );
			var clipTime = this._updateTime( deltaTime );

			// note: _updateTime may disable the action resulting in
			// an effective weight of 0

			var weight = this._updateWeight( time );

			if ( weight > 0 ) {

				var interpolants = this._interpolants;
				var propertyMixers = this._propertyBindings;

				for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {

					interpolants[ j ].evaluate( clipTime );
					propertyMixers[ j ].accumulate( accuIndex, weight );

				}

			}

		},

		_updateWeight: function ( time ) {

			var weight = 0;

			if ( this.enabled ) {

				weight = this.weight;
				var interpolant = this._weightInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					weight *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopFading();

						if ( interpolantValue === 0 ) {

							// faded out, disable
							this.enabled = false;

						}

					}

				}

			}

			this._effectiveWeight = weight;
			return weight;

		},

		_updateTimeScale: function ( time ) {

			var timeScale = 0;

			if ( ! this.paused ) {

				timeScale = this.timeScale;

				var interpolant = this._timeScaleInterpolant;

				if ( interpolant !== null ) {

					var interpolantValue = interpolant.evaluate( time )[ 0 ];

					timeScale *= interpolantValue;

					if ( time > interpolant.parameterPositions[ 1 ] ) {

						this.stopWarping();

						if ( timeScale === 0 ) {

							// motion has halted, pause
							this.paused = true;

						} else {

							// warp done - apply final time scale
							this.timeScale = timeScale;

						}

					}

				}

			}

			this._effectiveTimeScale = timeScale;
			return timeScale;

		},

		_updateTime: function ( deltaTime ) {

			var time = this.time + deltaTime;
			var duration = this._clip.duration;
			var loop = this.loop;
			var loopCount = this._loopCount;

			var pingPong = ( loop === LoopPingPong );

			if ( deltaTime === 0 ) {

				if ( loopCount === - 1 ) { return time; }

				return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;

			}

			if ( loop === LoopOnce ) {

				if ( loopCount === - 1 ) {

					// just started

					this._loopCount = 0;
					this._setEndings( true, true, false );

				}

				handle_stop: {

					if ( time >= duration ) {

						time = duration;

					} else if ( time < 0 ) {

						time = 0;

					} else {

						this.time = time;

						break handle_stop;

					}

					if ( this.clampWhenFinished ) { this.paused = true; }
					else { this.enabled = false; }

					this.time = time;

					this._mixer.dispatchEvent( {
						type: 'finished', action: this,
						direction: deltaTime < 0 ? - 1 : 1
					} );

				}

			} else { // repetitive Repeat or PingPong

				if ( loopCount === - 1 ) {

					// just started

					if ( deltaTime >= 0 ) {

						loopCount = 0;

						this._setEndings( true, this.repetitions === 0, pingPong );

					} else {

						// when looping in reverse direction, the initial
						// transition through zero counts as a repetition,
						// so leave loopCount at -1

						this._setEndings( this.repetitions === 0, true, pingPong );

					}

				}

				if ( time >= duration || time < 0 ) {

					// wrap around

					var loopDelta = Math.floor( time / duration ); // signed
					time -= duration * loopDelta;

					loopCount += Math.abs( loopDelta );

					var pending = this.repetitions - loopCount;

					if ( pending <= 0 ) {

						// have to stop (switch state, clamp time, fire event)

						if ( this.clampWhenFinished ) { this.paused = true; }
						else { this.enabled = false; }

						time = deltaTime > 0 ? duration : 0;

						this.time = time;

						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime > 0 ? 1 : - 1
						} );

					} else {

						// keep running

						if ( pending === 1 ) {

							// entering the last round

							var atStart = deltaTime < 0;
							this._setEndings( atStart, ! atStart, pingPong );

						} else {

							this._setEndings( false, false, pingPong );

						}

						this._loopCount = loopCount;

						this.time = time;

						this._mixer.dispatchEvent( {
							type: 'loop', action: this, loopDelta: loopDelta
						} );

					}

				} else {

					this.time = time;

				}

				if ( pingPong && ( loopCount & 1 ) === 1 ) {

					// invert time for the "pong round"

					return duration - time;

				}

			}

			return time;

		},

		_setEndings: function ( atStart, atEnd, pingPong ) {

			var settings = this._interpolantSettings;

			if ( pingPong ) {

				settings.endingStart = ZeroSlopeEnding;
				settings.endingEnd = ZeroSlopeEnding;

			} else {

				// assuming for LoopOnce atStart == atEnd == true

				if ( atStart ) {

					settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingStart = WrapAroundEnding;

				}

				if ( atEnd ) {

					settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;

				} else {

					settings.endingEnd 	 = WrapAroundEnding;

				}

			}

		},

		_scheduleFading: function ( duration, weightNow, weightThen ) {

			var mixer = this._mixer, now = mixer.time,
				interpolant = this._weightInterpolant;

			if ( interpolant === null ) {

				interpolant = mixer._lendControlInterpolant();
				this._weightInterpolant = interpolant;

			}

			var times = interpolant.parameterPositions,
				values = interpolant.sampleValues;

			times[ 0 ] = now;
			values[ 0 ] = weightNow;
			times[ 1 ] = now + duration;
			values[ 1 ] = weightThen;

			return this;

		}

	} );

	/**
	 *
	 * Player for AnimationClips.
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 * @author tschw
	 */

	function AnimationMixer( root ) {

		this._root = root;
		this._initMemoryManager();
		this._accuIndex = 0;

		this.time = 0;

		this.timeScale = 1.0;

	}

	AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {

		constructor: AnimationMixer,

		_bindAction: function ( action, prototypeAction ) {

			var root = action._localRoot || this._root,
				tracks = action._clip.tracks,
				nTracks = tracks.length,
				bindings = action._propertyBindings,
				interpolants = action._interpolants,
				rootUuid = root.uuid,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingsByName = bindingsByRoot[ rootUuid ];

			if ( bindingsByName === undefined ) {

				bindingsByName = {};
				bindingsByRoot[ rootUuid ] = bindingsByName;

			}

			for ( var i = 0; i !== nTracks; ++ i ) {

				var track = tracks[ i ],
					trackName = track.name,
					binding = bindingsByName[ trackName ];

				if ( binding !== undefined ) {

					bindings[ i ] = binding;

				} else {

					binding = bindings[ i ];

					if ( binding !== undefined ) {

						// existing binding, make sure the cache knows

						if ( binding._cacheIndex === null ) {

							++ binding.referenceCount;
							this._addInactiveBinding( binding, rootUuid, trackName );

						}

						continue;

					}

					var path = prototypeAction && prototypeAction.
						_propertyBindings[ i ].binding.parsedPath;

					binding = new PropertyMixer(
						PropertyBinding.create( root, trackName, path ),
						track.ValueTypeName, track.getValueSize() );

					++ binding.referenceCount;
					this._addInactiveBinding( binding, rootUuid, trackName );

					bindings[ i ] = binding;

				}

				interpolants[ i ].resultBuffer = binding.buffer;

			}

		},

		_activateAction: function ( action ) {

			if ( ! this._isActiveAction( action ) ) {

				if ( action._cacheIndex === null ) {

					// this action has been forgotten by the cache, but the user
					// appears to be still using it -> rebind

					var rootUuid = ( action._localRoot || this._root ).uuid,
						clipUuid = action._clip.uuid,
						actionsForClip = this._actionsByClip[ clipUuid ];

					this._bindAction( action,
						actionsForClip && actionsForClip.knownActions[ 0 ] );

					this._addInactiveAction( action, clipUuid, rootUuid );

				}

				var bindings = action._propertyBindings;

				// increment reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( binding.useCount ++ === 0 ) {

						this._lendBinding( binding );
						binding.saveOriginalState();

					}

				}

				this._lendAction( action );

			}

		},

		_deactivateAction: function ( action ) {

			if ( this._isActiveAction( action ) ) {

				var bindings = action._propertyBindings;

				// decrement reference counts / sort out state
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

					var binding = bindings[ i ];

					if ( -- binding.useCount === 0 ) {

						binding.restoreOriginalState();
						this._takeBackBinding( binding );

					}

				}

				this._takeBackAction( action );

			}

		},

		// Memory manager

		_initMemoryManager: function () {

			this._actions = []; // 'nActiveActions' followed by inactive ones
			this._nActiveActions = 0;

			this._actionsByClip = {};
			// inside:
			// {
			// 	knownActions: Array< AnimationAction > - used as prototypes
			// 	actionByRoot: AnimationAction - lookup
			// }


			this._bindings = []; // 'nActiveBindings' followed by inactive ones
			this._nActiveBindings = 0;

			this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >


			this._controlInterpolants = []; // same game as above
			this._nActiveControlInterpolants = 0;

			var scope = this;

			this.stats = {

				actions: {
					get total() {

						return scope._actions.length;

					},
					get inUse() {

						return scope._nActiveActions;

					}
				},
				bindings: {
					get total() {

						return scope._bindings.length;

					},
					get inUse() {

						return scope._nActiveBindings;

					}
				},
				controlInterpolants: {
					get total() {

						return scope._controlInterpolants.length;

					},
					get inUse() {

						return scope._nActiveControlInterpolants;

					}
				}

			};

		},

		// Memory management for AnimationAction objects

		_isActiveAction: function ( action ) {

			var index = action._cacheIndex;
			return index !== null && index < this._nActiveActions;

		},

		_addInactiveAction: function ( action, clipUuid, rootUuid ) {

			var actions = this._actions,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip === undefined ) {

				actionsForClip = {

					knownActions: [ action ],
					actionByRoot: {}

				};

				action._byClipCacheIndex = 0;

				actionsByClip[ clipUuid ] = actionsForClip;

			} else {

				var knownActions = actionsForClip.knownActions;

				action._byClipCacheIndex = knownActions.length;
				knownActions.push( action );

			}

			action._cacheIndex = actions.length;
			actions.push( action );

			actionsForClip.actionByRoot[ rootUuid ] = action;

		},

		_removeInactiveAction: function ( action ) {

			var actions = this._actions,
				lastInactiveAction = actions[ actions.length - 1 ],
				cacheIndex = action._cacheIndex;

			lastInactiveAction._cacheIndex = cacheIndex;
			actions[ cacheIndex ] = lastInactiveAction;
			actions.pop();

			action._cacheIndex = null;


			var clipUuid = action._clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ],
				knownActionsForClip = actionsForClip.knownActions,

				lastKnownAction =
					knownActionsForClip[ knownActionsForClip.length - 1 ],

				byClipCacheIndex = action._byClipCacheIndex;

			lastKnownAction._byClipCacheIndex = byClipCacheIndex;
			knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
			knownActionsForClip.pop();

			action._byClipCacheIndex = null;


			var actionByRoot = actionsForClip.actionByRoot,
				rootUuid = ( action._localRoot || this._root ).uuid;

			delete actionByRoot[ rootUuid ];

			if ( knownActionsForClip.length === 0 ) {

				delete actionsByClip[ clipUuid ];

			}

			this._removeInactiveBindingsForAction( action );

		},

		_removeInactiveBindingsForAction: function ( action ) {

			var bindings = action._propertyBindings;
			for ( var i = 0, n = bindings.length; i !== n; ++ i ) {

				var binding = bindings[ i ];

				if ( -- binding.referenceCount === 0 ) {

					this._removeInactiveBinding( binding );

				}

			}

		},

		_lendAction: function ( action ) {

			// [ active actions |  inactive actions  ]
			// [  active actions >| inactive actions ]
			//                 s        a
			//                  <-swap->
			//                 a        s

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				lastActiveIndex = this._nActiveActions ++,

				firstInactiveAction = actions[ lastActiveIndex ];

			action._cacheIndex = lastActiveIndex;
			actions[ lastActiveIndex ] = action;

			firstInactiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = firstInactiveAction;

		},

		_takeBackAction: function ( action ) {

			// [  active actions  | inactive actions ]
			// [ active actions |< inactive actions  ]
			//        a        s
			//         <-swap->
			//        s        a

			var actions = this._actions,
				prevIndex = action._cacheIndex,

				firstInactiveIndex = -- this._nActiveActions,

				lastActiveAction = actions[ firstInactiveIndex ];

			action._cacheIndex = firstInactiveIndex;
			actions[ firstInactiveIndex ] = action;

			lastActiveAction._cacheIndex = prevIndex;
			actions[ prevIndex ] = lastActiveAction;

		},

		// Memory management for PropertyMixer objects

		_addInactiveBinding: function ( binding, rootUuid, trackName ) {

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				bindings = this._bindings;

			if ( bindingByName === undefined ) {

				bindingByName = {};
				bindingsByRoot[ rootUuid ] = bindingByName;

			}

			bindingByName[ trackName ] = binding;

			binding._cacheIndex = bindings.length;
			bindings.push( binding );

		},

		_removeInactiveBinding: function ( binding ) {

			var bindings = this._bindings,
				propBinding = binding.binding,
				rootUuid = propBinding.rootNode.uuid,
				trackName = propBinding.path,
				bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ],

				lastInactiveBinding = bindings[ bindings.length - 1 ],
				cacheIndex = binding._cacheIndex;

			lastInactiveBinding._cacheIndex = cacheIndex;
			bindings[ cacheIndex ] = lastInactiveBinding;
			bindings.pop();

			delete bindingByName[ trackName ];

			if ( Object.keys( bindingByName ).length === 0 ) {

				delete bindingsByRoot[ rootUuid ];

			}

		},

		_lendBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				lastActiveIndex = this._nActiveBindings ++,

				firstInactiveBinding = bindings[ lastActiveIndex ];

			binding._cacheIndex = lastActiveIndex;
			bindings[ lastActiveIndex ] = binding;

			firstInactiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = firstInactiveBinding;

		},

		_takeBackBinding: function ( binding ) {

			var bindings = this._bindings,
				prevIndex = binding._cacheIndex,

				firstInactiveIndex = -- this._nActiveBindings,

				lastActiveBinding = bindings[ firstInactiveIndex ];

			binding._cacheIndex = firstInactiveIndex;
			bindings[ firstInactiveIndex ] = binding;

			lastActiveBinding._cacheIndex = prevIndex;
			bindings[ prevIndex ] = lastActiveBinding;

		},


		// Memory management of Interpolants for weight and time scale

		_lendControlInterpolant: function () {

			var interpolants = this._controlInterpolants,
				lastActiveIndex = this._nActiveControlInterpolants ++,
				interpolant = interpolants[ lastActiveIndex ];

			if ( interpolant === undefined ) {

				interpolant = new LinearInterpolant(
					new Float32Array( 2 ), new Float32Array( 2 ),
					1, this._controlInterpolantsResultBuffer );

				interpolant.__cacheIndex = lastActiveIndex;
				interpolants[ lastActiveIndex ] = interpolant;

			}

			return interpolant;

		},

		_takeBackControlInterpolant: function ( interpolant ) {

			var interpolants = this._controlInterpolants,
				prevIndex = interpolant.__cacheIndex,

				firstInactiveIndex = -- this._nActiveControlInterpolants,

				lastActiveInterpolant = interpolants[ firstInactiveIndex ];

			interpolant.__cacheIndex = firstInactiveIndex;
			interpolants[ firstInactiveIndex ] = interpolant;

			lastActiveInterpolant.__cacheIndex = prevIndex;
			interpolants[ prevIndex ] = lastActiveInterpolant;

		},

		_controlInterpolantsResultBuffer: new Float32Array( 1 ),

		// return an action for a clip optionally using a custom root target
		// object (this method allocates a lot of dynamic memory in case a
		// previously unknown clip/root combination is specified)
		clipAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject !== null ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ],
				prototypeAction = null;

			if ( actionsForClip !== undefined ) {

				var existingAction =
						actionsForClip.actionByRoot[ rootUuid ];

				if ( existingAction !== undefined ) {

					return existingAction;

				}

				// we know the clip, so we don't have to parse all
				// the bindings again but can just copy
				prototypeAction = actionsForClip.knownActions[ 0 ];

				// also, take the clip from the prototype action
				if ( clipObject === null )
					{ clipObject = prototypeAction._clip; }

			}

			// clip must be known when specified via string
			if ( clipObject === null ) { return null; }

			// allocate all resources required to run it
			var newAction = new AnimationAction( this, clipObject, optionalRoot );

			this._bindAction( newAction, prototypeAction );

			// and make the action known to the memory manager
			this._addInactiveAction( newAction, clipUuid, rootUuid );

			return newAction;

		},

		// get an existing action
		existingAction: function ( clip, optionalRoot ) {

			var root = optionalRoot || this._root,
				rootUuid = root.uuid,

				clipObject = typeof clip === 'string' ?
					AnimationClip.findByName( root, clip ) : clip,

				clipUuid = clipObject ? clipObject.uuid : clip,

				actionsForClip = this._actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				return actionsForClip.actionByRoot[ rootUuid ] || null;

			}

			return null;

		},

		// deactivates all previously scheduled actions
		stopAllAction: function () {

			var actions = this._actions,
				nActions = this._nActiveActions,
				bindings = this._bindings,
				nBindings = this._nActiveBindings;

			this._nActiveActions = 0;
			this._nActiveBindings = 0;

			for ( var i = 0; i !== nActions; ++ i ) {

				actions[ i ].reset();

			}

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].useCount = 0;

			}

			return this;

		},

		// advance the time and update apply the animation
		update: function ( deltaTime ) {

			deltaTime *= this.timeScale;

			var actions = this._actions,
				nActions = this._nActiveActions,

				time = this.time += deltaTime,
				timeDirection = Math.sign( deltaTime ),

				accuIndex = this._accuIndex ^= 1;

			// run active actions

			for ( var i = 0; i !== nActions; ++ i ) {

				var action = actions[ i ];

				action._update( time, deltaTime, timeDirection, accuIndex );

			}

			// update scene graph

			var bindings = this._bindings,
				nBindings = this._nActiveBindings;

			for ( var i = 0; i !== nBindings; ++ i ) {

				bindings[ i ].apply( accuIndex );

			}

			return this;

		},

		// Allows you to seek to a specific time in an animation.
		setTime: function ( timeInSeconds ) {

			this.time = 0; // Zero out time attribute for AnimationMixer object;
			for ( var i = 0; i < this._actions.length; i ++ ) {

				this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.

			}

			return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.

		},

		// return this mixer's root target object
		getRoot: function () {

			return this._root;

		},

		// free all resources specific to a particular clip
		uncacheClip: function ( clip ) {

			var actions = this._actions,
				clipUuid = clip.uuid,
				actionsByClip = this._actionsByClip,
				actionsForClip = actionsByClip[ clipUuid ];

			if ( actionsForClip !== undefined ) {

				// note: just calling _removeInactiveAction would mess up the
				// iteration state and also require updating the state we can
				// just throw away

				var actionsToRemove = actionsForClip.knownActions;

				for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {

					var action = actionsToRemove[ i ];

					this._deactivateAction( action );

					var cacheIndex = action._cacheIndex,
						lastInactiveAction = actions[ actions.length - 1 ];

					action._cacheIndex = null;
					action._byClipCacheIndex = null;

					lastInactiveAction._cacheIndex = cacheIndex;
					actions[ cacheIndex ] = lastInactiveAction;
					actions.pop();

					this._removeInactiveBindingsForAction( action );

				}

				delete actionsByClip[ clipUuid ];

			}

		},

		// free all resources specific to a particular root target object
		uncacheRoot: function ( root ) {

			var rootUuid = root.uuid,
				actionsByClip = this._actionsByClip;

			for ( var clipUuid in actionsByClip ) {

				var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
					action = actionByRoot[ rootUuid ];

				if ( action !== undefined ) {

					this._deactivateAction( action );
					this._removeInactiveAction( action );

				}

			}

			var bindingsByRoot = this._bindingsByRootAndName,
				bindingByName = bindingsByRoot[ rootUuid ];

			if ( bindingByName !== undefined ) {

				for ( var trackName in bindingByName ) {

					var binding = bindingByName[ trackName ];
					binding.restoreOriginalState();
					this._removeInactiveBinding( binding );

				}

			}

		},

		// remove a targeted clip from the cache
		uncacheAction: function ( clip, optionalRoot ) {

			var action = this.existingAction( clip, optionalRoot );

			if ( action !== null ) {

				this._deactivateAction( action );
				this._removeInactiveAction( action );

			}

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Uniform( value ) {

		if ( typeof value === 'string' ) {

			console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
			value = arguments[ 1 ];

		}

		this.value = value;

	}

	Uniform.prototype.clone = function () {

		return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );

	};

	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */

	function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {

		InterleavedBuffer.call( this, array, stride );

		this.meshPerAttribute = meshPerAttribute || 1;

	}

	InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {

		constructor: InstancedInterleavedBuffer,

		isInstancedInterleavedBuffer: true,

		copy: function ( source ) {

			InterleavedBuffer.prototype.copy.call( this, source );

			this.meshPerAttribute = source.meshPerAttribute;

			return this;

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */

	function Raycaster( origin, direction, near, far ) {

		this.ray = new Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;
		this.camera = null;

		this.params = {
			Mesh: {},
			Line: {},
			LOD: {},
			Points: { threshold: 1 },
			Sprite: {}
		};

		Object.defineProperties( this.params, {
			PointCloud: {
				get: function () {

					console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
					return this.Points;

				}
			}
		} );

	}

	function ascSort( a, b ) {

		return a.distance - b.distance;

	}

	function intersectObject( object, raycaster, intersects, recursive ) {

		if ( object.visible === false ) { return; }

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	}

	Object.assign( Raycaster.prototype, {

		linePrecision: 1,

		set: function ( origin, direction ) {

			// direction is assumed to be normalized (for accurate distance calculations)

			this.ray.set( origin, direction );

		},

		setFromCamera: function ( coords, camera ) {

			if ( ( camera && camera.isPerspectiveCamera ) ) {

				this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
				this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
				this.camera = camera;

			} else if ( ( camera && camera.isOrthographicCamera ) ) {

				this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
				this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
				this.camera = camera;

			} else {

				console.error( 'THREE.Raycaster: Unsupported camera type.' );

			}

		},

		intersectObject: function ( object, recursive, optionalTarget ) {

			var intersects = optionalTarget || [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( ascSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive, optionalTarget ) {

			var intersects = optionalTarget || [];

			if ( Array.isArray( objects ) === false ) {

				console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( ascSort );

			return intersects;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axis.
	 */

	function Spherical( radius, phi, theta ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0;
		this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
		this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle

		return this;

	}

	Object.assign( Spherical.prototype, {

		set: function ( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		},

		// restrict phi to be betwee EPS and PI-EPS
		makeSafe: function () {

			var EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		},

		setFromVector3: function ( v ) {

			return this.setFromCartesianCoords( v.x, v.y, v.z );

		},

		setFromCartesianCoords: function ( x, y, z ) {

			this.radius = Math.sqrt( x * x + y * y + z * z );

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( x, z );
				this.phi = Math.acos( _Math.clamp( y / this.radius, - 1, 1 ) );

			}

			return this;

		}

	} );

	/**
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
	 *
	 */

	function Cylindrical( radius, theta, y ) {

		this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
		this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
		this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane

		return this;

	}

	Object.assign( Cylindrical.prototype, {

		set: function ( radius, theta, y ) {

			this.radius = radius;
			this.theta = theta;
			this.y = y;

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( other ) {

			this.radius = other.radius;
			this.theta = other.theta;
			this.y = other.y;

			return this;

		},

		setFromVector3: function ( v ) {

			return this.setFromCartesianCoords( v.x, v.y, v.z );

		},

		setFromCartesianCoords: function ( x, y, z ) {

			this.radius = Math.sqrt( x * x + z * z );
			this.theta = Math.atan2( x, z );
			this.y = y;

			return this;

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	var _vector$6 = new Vector2();

	function Box2( min, max ) {

		this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
		this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );

	}

	Object.assign( Box2.prototype, {

		set: function ( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		},

		setFromPoints: function ( points ) {

			this.makeEmpty();

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		},

		setFromCenterAndSize: function ( center, size ) {

			var halfSize = _vector$6.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		},

		makeEmpty: function () {

			this.min.x = this.min.y = + Infinity;
			this.max.x = this.max.y = - Infinity;

			return this;

		},

		isEmpty: function () {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getCenter() target is now required' );
				target = new Vector2();

			}

			return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		},

		getSize: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getSize() target is now required' );
				target = new Vector2();

			}

			return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );

		},

		expandByPoint: function ( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		},

		expandByVector: function ( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		},

		expandByScalar: function ( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		},

		containsPoint: function ( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ? false : true;

		},

		containsBox: function ( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y;

		},

		getParameter: function ( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .getParameter() target is now required' );
				target = new Vector2();

			}

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);

		},

		intersectsBox: function ( box ) {

			// using 4 splitting planes to rule out intersections

			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ? false : true;

		},

		clampPoint: function ( point, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Box2: .clampPoint() target is now required' );
				target = new Vector2();

			}

			return target.copy( point ).clamp( this.min, this.max );

		},

		distanceToPoint: function ( point ) {

			var clampedPoint = _vector$6.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		},

		intersect: function ( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			return this;

		},

		union: function ( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		},

		translate: function ( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		},

		equals: function ( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	} );

	/**
	 * @author bhouston / http://clara.io
	 */

	var _startP = new Vector3();
	var _startEnd = new Vector3();

	function Line3( start, end ) {

		this.start = ( start !== undefined ) ? start : new Vector3();
		this.end = ( end !== undefined ) ? end : new Vector3();

	}

	Object.assign( Line3.prototype, {

		set: function ( start, end ) {

			this.start.copy( start );
			this.end.copy( end );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		},

		copy: function ( line ) {

			this.start.copy( line.start );
			this.end.copy( line.end );

			return this;

		},

		getCenter: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .getCenter() target is now required' );
				target = new Vector3();

			}

			return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

		},

		delta: function ( target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .delta() target is now required' );
				target = new Vector3();

			}

			return target.subVectors( this.end, this.start );

		},

		distanceSq: function () {

			return this.start.distanceToSquared( this.end );

		},

		distance: function () {

			return this.start.distanceTo( this.end );

		},

		at: function ( t, target ) {

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .at() target is now required' );
				target = new Vector3();

			}

			return this.delta( target ).multiplyScalar( t ).add( this.start );

		},

		closestPointToPointParameter: function ( point, clampToLine ) {

			_startP.subVectors( point, this.start );
			_startEnd.subVectors( this.end, this.start );

			var startEnd2 = _startEnd.dot( _startEnd );
			var startEnd_startP = _startEnd.dot( _startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = _Math.clamp( t, 0, 1 );

			}

			return t;

		},

		closestPointToPoint: function ( point, clampToLine, target ) {

			var t = this.closestPointToPointParameter( point, clampToLine );

			if ( target === undefined ) {

				console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
				target = new Vector3();

			}

			return this.delta( target ).multiplyScalar( t ).add( this.start );

		},

		applyMatrix4: function ( matrix ) {

			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );

			return this;

		},

		equals: function ( line ) {

			return line.start.equals( this.start ) && line.end.equals( this.end );

		}

	} );

	/**
	 * @author alteredq / http://alteredqualia.com/
	 */

	function ImmediateRenderObject( material ) {

		Object3D.call( this );

		this.material = material;
		this.render = function ( /* renderCallback */ ) {};

	}

	ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
	ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;

	ImmediateRenderObject.prototype.isImmediateRenderObject = true;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _v1$5 = new Vector3();
	var _v2$3 = new Vector3();
	var _normalMatrix$1 = new Matrix3();
	var _keys = [ 'a', 'b', 'c' ];

	function VertexNormalsHelper( object, size, hex, linewidth ) {

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xff0000;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length * 3;

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			nNormals = objGeometry.attributes.normal.count;

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.setAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;

		this.update();

	}

	VertexNormalsHelper.prototype = Object.create( LineSegments.prototype );
	VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;

	VertexNormalsHelper.prototype.update = function () {

		this.object.updateMatrixWorld( true );

		_normalMatrix$1.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			var vertices = objGeometry.vertices;

			var faces = objGeometry.faces;

			var idx = 0;

			for ( var i = 0, l = faces.length; i < l; i ++ ) {

				var face = faces[ i ];

				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

					var vertex = vertices[ face[ _keys[ j ] ] ];

					var normal = face.vertexNormals[ j ];

					_v1$5.copy( vertex ).applyMatrix4( matrixWorld );

					_v2$3.copy( normal ).applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );

					position.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );

					idx = idx + 1;

					position.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );

					idx = idx + 1;

				}

			}

		} else if ( objGeometry && objGeometry.isBufferGeometry ) {

			var objPos = objGeometry.attributes.position;

			var objNorm = objGeometry.attributes.normal;

			var idx = 0;

			// for simplicity, ignore index and drawcalls, and render every normal

			for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {

				_v1$5.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );

				_v2$3.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );

				_v2$3.applyMatrix3( _normalMatrix$1 ).normalize().multiplyScalar( this.size ).add( _v1$5 );

				position.setXYZ( idx, _v1$5.x, _v1$5.y, _v1$5.z );

				idx = idx + 1;

				position.setXYZ( idx, _v2$3.x, _v2$3.y, _v2$3.z );

				idx = idx + 1;

			}

		}

		position.needsUpdate = true;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _vector$7 = new Vector3();

	function SpotLightHelper( light, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new BufferGeometry();

		var positions = [
			0, 0, 0, 	0, 0, 1,
			0, 0, 0, 	1, 0, 1,
			0, 0, 0,	- 1, 0, 1,
			0, 0, 0, 	0, 1, 1,
			0, 0, 0, 	0, - 1, 1
		];

		for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {

			var p1 = ( i / l ) * Math.PI * 2;
			var p2 = ( j / l ) * Math.PI * 2;

			positions.push(
				Math.cos( p1 ), Math.sin( p1 ), 1,
				Math.cos( p2 ), Math.sin( p2 ), 1
			);

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.cone = new LineSegments( geometry, material );
		this.add( this.cone );

		this.update();

	}

	SpotLightHelper.prototype = Object.create( Object3D.prototype );
	SpotLightHelper.prototype.constructor = SpotLightHelper;

	SpotLightHelper.prototype.dispose = function () {

		this.cone.geometry.dispose();
		this.cone.material.dispose();

	};

	SpotLightHelper.prototype.update = function () {

		this.light.updateMatrixWorld();

		var coneLength = this.light.distance ? this.light.distance : 1000;
		var coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		_vector$7.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( _vector$7 );

		if ( this.color !== undefined ) {

			this.cone.material.color.set( this.color );

		} else {

			this.cone.material.color.copy( this.light.color );

		}

	};

	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	var _vector$8 = new Vector3();
	var _boneMatrix = new Matrix4();
	var _matrixWorldInv = new Matrix4();

	function getBoneList( object ) {

		var boneList = [];

		if ( object && object.isBone ) {

			boneList.push( object );

		}

		for ( var i = 0; i < object.children.length; i ++ ) {

			boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );

		}

		return boneList;

	}

	function SkeletonHelper( object ) {

		var bones = getBoneList( object );

		var geometry = new BufferGeometry();

		var vertices = [];
		var colors = [];

		var color1 = new Color( 0, 0, 1 );
		var color2 = new Color( 0, 1, 0 );

		for ( var i = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				vertices.push( 0, 0, 0 );
				vertices.push( 0, 0, 0 );
				colors.push( color1.r, color1.g, color1.b );
				colors.push( color2.r, color2.g, color2.b );

			}

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors, depthTest: false, depthWrite: false, transparent: true } );

		LineSegments.call( this, geometry, material );

		this.root = object;
		this.bones = bones;

		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;

	}

	SkeletonHelper.prototype = Object.create( LineSegments.prototype );
	SkeletonHelper.prototype.constructor = SkeletonHelper;

	SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {

		var bones = this.bones;

		var geometry = this.geometry;
		var position = geometry.getAttribute( 'position' );

		_matrixWorldInv.getInverse( this.root.matrixWorld );

		for ( var i = 0, j = 0; i < bones.length; i ++ ) {

			var bone = bones[ i ];

			if ( bone.parent && bone.parent.isBone ) {

				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
				_vector$8.setFromMatrixPosition( _boneMatrix );
				position.setXYZ( j, _vector$8.x, _vector$8.y, _vector$8.z );

				_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
				_vector$8.setFromMatrixPosition( _boneMatrix );
				position.setXYZ( j + 1, _vector$8.x, _vector$8.y, _vector$8.z );

				j += 2;

			}

		}

		geometry.getAttribute( 'position' ).needsUpdate = true;

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function PointLightHelper( light, sphereSize, color ) {

		this.light = light;
		this.light.updateMatrixWorld();

		this.color = color;

		var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
		var material = new MeshBasicMaterial( { wireframe: true, fog: false } );

		Mesh.call( this, geometry, material );

		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.update();


		/*
		var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

		var d = light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.scale.set( d, d, d );

		}

		this.add( this.lightDistance );
		*/

	}

	PointLightHelper.prototype = Object.create( Mesh.prototype );
	PointLightHelper.prototype.constructor = PointLightHelper;

	PointLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	PointLightHelper.prototype.update = function () {

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color );

		}

		/*
		var d = this.light.distance;

		if ( d === 0.0 ) {

			this.lightDistance.visible = false;

		} else {

			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );

		}
		*/

	};

	/**
	 * @author abelnation / http://github.com/abelnation
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author WestLangley / http://github.com/WestLangley
	 *
	 *  This helper must be added as a child of the light
	 */

	function RectAreaLightHelper( light, color ) {

		this.type = 'RectAreaLightHelper';

		this.light = light;

		this.color = color; // optional hardwired color for the helper

		var positions = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		var material = new LineBasicMaterial( { fog: false } );

		Line.call( this, geometry, material );

		//

		var positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];

		var geometry2 = new BufferGeometry();
		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { side: BackSide, fog: false } ) ) );

		this.update();

	}

	RectAreaLightHelper.prototype = Object.create( Line.prototype );
	RectAreaLightHelper.prototype.constructor = RectAreaLightHelper;

	RectAreaLightHelper.prototype.update = function () {

		this.scale.set( 0.5 * this.light.width, 0.5 * this.light.height, 1 );

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );
			this.children[ 0 ].material.color.set( this.color );

		} else {

			this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

			// prevent hue shift
			var c = this.material.color;
			var max = Math.max( c.r, c.g, c.b );
			if ( max > 1 ) { c.multiplyScalar( 1 / max ); }

			this.children[ 0 ].material.color.copy( this.material.color );

		}

	};

	RectAreaLightHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();
		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 */

	var _vector$9 = new Vector3();
	var _color1 = new Color();
	var _color2 = new Color();

	function HemisphereLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		var geometry = new OctahedronBufferGeometry( size );
		geometry.rotateY( Math.PI * 0.5 );

		this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
		if ( this.color === undefined ) { this.material.vertexColors = VertexColors; }

		var position = geometry.getAttribute( 'position' );
		var colors = new Float32Array( position.count * 3 );

		geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );

		this.add( new Mesh( geometry, this.material ) );

		this.update();

	}

	HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
	HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;

	HemisphereLightHelper.prototype.dispose = function () {

		this.children[ 0 ].geometry.dispose();
		this.children[ 0 ].material.dispose();

	};

	HemisphereLightHelper.prototype.update = function () {

		var mesh = this.children[ 0 ];

		if ( this.color !== undefined ) {

			this.material.color.set( this.color );

		} else {

			var colors = mesh.geometry.getAttribute( 'color' );

			_color1.copy( this.light.color );
			_color2.copy( this.light.groundColor );

			for ( var i = 0, l = colors.count; i < l; i ++ ) {

				var color = ( i < ( l / 2 ) ) ? _color1 : _color2;

				colors.setXYZ( i, color.r, color.g, color.b );

			}

			colors.needsUpdate = true;

		}

		mesh.lookAt( _vector$9.setFromMatrixPosition( this.light.matrixWorld ).negate() );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function LightProbeHelper( lightProbe, size ) {

		this.lightProbe = lightProbe;

		this.size = size;

		var defines = {};
		defines[ 'GAMMA_OUTPUT' ] = "";

		// material
		var material = new ShaderMaterial( {

			defines: defines,

			uniforms: {

				sh: { value: this.lightProbe.sh.coefficients }, // by reference

				intensity: { value: this.lightProbe.intensity }

			},

			vertexShader: [

				'varying vec3 vNormal;',

				'void main() {',

				'	vNormal = normalize( normalMatrix * normal );',

				'	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',

				'}' ].join( '\n' ),

			fragmentShader: [

				'#define RECIPROCAL_PI 0.318309886',

				'vec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {',

				'	// matrix is assumed to be orthogonal',

				'	return normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );',

				'}',

				'vec3 linearToOutput( in vec3 a ) {',

				'	#ifdef GAMMA_OUTPUT',

				'		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );',

				'	#else',

				'		return a;',

				'	#endif',

				'}',

				'// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf',
				'vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {',

				'	// normal is assumed to have unit length',

				'	float x = normal.x, y = normal.y, z = normal.z;',

				'	// band 0',
				'	vec3 result = shCoefficients[ 0 ] * 0.886227;',

				'	// band 1',
				'	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;',
				'	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;',
				'	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;',

				'	// band 2',
				'	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;',
				'	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;',
				'	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );',
				'	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;',
				'	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );',

				'	return result;',

				'}',

				'uniform vec3 sh[ 9 ]; // sh coefficients',

				'uniform float intensity; // light probe intensity',

				'varying vec3 vNormal;',

				'void main() {',

				'	vec3 normal = normalize( vNormal );',

				'	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );',

				'	vec3 irradiance = shGetIrradianceAt( worldNormal, sh );',

				'	vec3 outgoingLight = RECIPROCAL_PI * irradiance * intensity;',

				'	outgoingLight = linearToOutput( outgoingLight );',

				'	gl_FragColor = vec4( outgoingLight, 1.0 );',

				'}'

			].join( '\n' )

		} );

		var geometry = new SphereBufferGeometry( 1, 32, 16 );

		Mesh.call( this, geometry, material );

		this.onBeforeRender();

	}

	LightProbeHelper.prototype = Object.create( Mesh.prototype );
	LightProbeHelper.prototype.constructor = LightProbeHelper;

	LightProbeHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material.dispose();

	};

	LightProbeHelper.prototype.onBeforeRender = function () {

		this.position.copy( this.lightProbe.position );

		this.scale.set( 1, 1, 1 ).multiplyScalar( this.size );

		this.material.uniforms.intensity.value = this.lightProbe.intensity;

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function GridHelper( size, divisions, color1, color2 ) {

		size = size || 10;
		divisions = divisions || 10;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var center = divisions / 2;
		var step = size / divisions;
		var halfSize = size / 2;

		var vertices = [], colors = [];

		for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {

			vertices.push( - halfSize, 0, k, halfSize, 0, k );
			vertices.push( k, 0, - halfSize, k, 0, halfSize );

			var color = i === center ? color1 : color2;

			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;
			color.toArray( colors, j ); j += 3;

		}

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {

		constructor: GridHelper,

		copy: function ( source ) {

			LineSegments.prototype.copy.call( this, source );

			this.geometry.copy( source.geometry );
			this.material.copy( source.material );

			return this;

		},

		clone: function () {

			return new this.constructor().copy( this );

		}

	} );

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 * @author Hectate / http://www.github.com/Hectate
	 */

	function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {

		radius = radius || 10;
		radials = radials || 16;
		circles = circles || 8;
		divisions = divisions || 64;
		color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
		color2 = new Color( color2 !== undefined ? color2 : 0x888888 );

		var vertices = [];
		var colors = [];

		var x, z;
		var v, i, j, r, color;

		// create the radials

		for ( i = 0; i <= radials; i ++ ) {

			v = ( i / radials ) * ( Math.PI * 2 );

			x = Math.sin( v ) * radius;
			z = Math.cos( v ) * radius;

			vertices.push( 0, 0, 0 );
			vertices.push( x, 0, z );

			color = ( i & 1 ) ? color1 : color2;

			colors.push( color.r, color.g, color.b );
			colors.push( color.r, color.g, color.b );

		}

		// create the circles

		for ( i = 0; i <= circles; i ++ ) {

			color = ( i & 1 ) ? color1 : color2;

			r = radius - ( radius / circles * i );

			for ( j = 0; j < divisions; j ++ ) {

				// first vertex

				v = ( j / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

				// second vertex

				v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );

				x = Math.sin( v ) * r;
				z = Math.cos( v ) * r;

				vertices.push( x, 0, z );
				colors.push( color.r, color.g, color.b );

			}

		}

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	PolarGridHelper.prototype = Object.create( LineSegments.prototype );
	PolarGridHelper.prototype.constructor = PolarGridHelper;

	/**
	 * @author Mugen87 / http://github.com/Mugen87
	 */

	function PositionalAudioHelper( audio, range, divisionsInnerAngle, divisionsOuterAngle ) {

		this.audio = audio;
		this.range = range || 1;
		this.divisionsInnerAngle = divisionsInnerAngle || 16;
		this.divisionsOuterAngle = divisionsOuterAngle || 2;

		var geometry = new BufferGeometry();
		var divisions = this.divisionsInnerAngle + this.divisionsOuterAngle * 2;
		var positions = new Float32Array( ( divisions * 3 + 3 ) * 3 );
		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

		var materialInnerAngle = new LineBasicMaterial( { color: 0x00ff00 } );
		var materialOuterAngle = new LineBasicMaterial( { color: 0xffff00 } );

		Line.call( this, geometry, [ materialOuterAngle, materialInnerAngle ] );

		this.update();

	}

	PositionalAudioHelper.prototype = Object.create( Line.prototype );
	PositionalAudioHelper.prototype.constructor = PositionalAudioHelper;

	PositionalAudioHelper.prototype.update = function () {

		var audio = this.audio;
		var range = this.range;
		var divisionsInnerAngle = this.divisionsInnerAngle;
		var divisionsOuterAngle = this.divisionsOuterAngle;

		var coneInnerAngle = _Math.degToRad( audio.panner.coneInnerAngle );
		var coneOuterAngle = _Math.degToRad( audio.panner.coneOuterAngle );

		var halfConeInnerAngle = coneInnerAngle / 2;
		var halfConeOuterAngle = coneOuterAngle / 2;

		var start = 0;
		var count = 0;
		var i, stride;

		var geometry = this.geometry;
		var positionAttribute = geometry.attributes.position;

		geometry.clearGroups();

		//

		function generateSegment( from, to, divisions, materialIndex ) {

			var step = ( to - from ) / divisions;

			positionAttribute.setXYZ( start, 0, 0, 0 );
			count ++;

			for ( i = from; i < to; i += step ) {

				stride = start + count;

				positionAttribute.setXYZ( stride, Math.sin( i ) * range, 0, Math.cos( i ) * range );
				positionAttribute.setXYZ( stride + 1, Math.sin( Math.min( i + step, to ) ) * range, 0, Math.cos( Math.min( i + step, to ) ) * range );
				positionAttribute.setXYZ( stride + 2, 0, 0, 0 );

				count += 3;

			}

			geometry.addGroup( start, count, materialIndex );

			start += count;
			count = 0;

		}

		//

		generateSegment( - halfConeOuterAngle, - halfConeInnerAngle, divisionsOuterAngle, 0 );
		generateSegment( - halfConeInnerAngle, halfConeInnerAngle, divisionsInnerAngle, 1 );
		generateSegment( halfConeInnerAngle, halfConeOuterAngle, divisionsOuterAngle, 0 );

		//

		positionAttribute.needsUpdate = true;

		if ( coneInnerAngle === coneOuterAngle ) { this.material[ 0 ].visible = false; }

	};

	PositionalAudioHelper.prototype.dispose = function () {

		this.geometry.dispose();
		this.material[ 0 ].dispose();
		this.material[ 1 ].dispose();

	};

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _v1$6 = new Vector3();
	var _v2$4 = new Vector3();
	var _normalMatrix$2 = new Matrix3();

	function FaceNormalsHelper( object, size, hex, linewidth ) {

		// FaceNormalsHelper only supports THREE.Geometry

		this.object = object;

		this.size = ( size !== undefined ) ? size : 1;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var width = ( linewidth !== undefined ) ? linewidth : 1;

		//

		var nNormals = 0;

		var objGeometry = this.object.geometry;

		if ( objGeometry && objGeometry.isGeometry ) {

			nNormals = objGeometry.faces.length;

		} else {

			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );

		}

		//

		var geometry = new BufferGeometry();

		var positions = new Float32BufferAttribute( nNormals * 2 * 3, 3 );

		geometry.setAttribute( 'position', positions );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color, linewidth: width } ) );

		//

		this.matrixAutoUpdate = false;
		this.update();

	}

	FaceNormalsHelper.prototype = Object.create( LineSegments.prototype );
	FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;

	FaceNormalsHelper.prototype.update = function () {

		this.object.updateMatrixWorld( true );

		_normalMatrix$2.getNormalMatrix( this.object.matrixWorld );

		var matrixWorld = this.object.matrixWorld;

		var position = this.geometry.attributes.position;

		//

		var objGeometry = this.object.geometry;

		var vertices = objGeometry.vertices;

		var faces = objGeometry.faces;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			var normal = face.normal;

			_v1$6.copy( vertices[ face.a ] )
				.add( vertices[ face.b ] )
				.add( vertices[ face.c ] )
				.divideScalar( 3 )
				.applyMatrix4( matrixWorld );

			_v2$4.copy( normal ).applyMatrix3( _normalMatrix$2 ).normalize().multiplyScalar( this.size ).add( _v1$6 );

			position.setXYZ( idx, _v1$6.x, _v1$6.y, _v1$6.z );

			idx = idx + 1;

			position.setXYZ( idx, _v2$4.x, _v2$4.y, _v2$4.z );

			idx = idx + 1;

		}

		position.needsUpdate = true;

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */

	var _v1$7 = new Vector3();
	var _v2$5 = new Vector3();
	var _v3$1 = new Vector3();

	function DirectionalLightHelper( light, size, color ) {

		Object3D.call( this );

		this.light = light;
		this.light.updateMatrixWorld();

		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;

		this.color = color;

		if ( size === undefined ) { size = 1; }

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( [
			- size, size, 0,
			size, size, 0,
			size, - size, 0,
			- size, - size, 0,
			- size, size, 0
		], 3 ) );

		var material = new LineBasicMaterial( { fog: false } );

		this.lightPlane = new Line( geometry, material );
		this.add( this.lightPlane );

		geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );

		this.targetLine = new Line( geometry, material );
		this.add( this.targetLine );

		this.update();

	}

	DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
	DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;

	DirectionalLightHelper.prototype.dispose = function () {

		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();

	};

	DirectionalLightHelper.prototype.update = function () {

		_v1$7.setFromMatrixPosition( this.light.matrixWorld );
		_v2$5.setFromMatrixPosition( this.light.target.matrixWorld );
		_v3$1.subVectors( _v2$5, _v1$7 );

		this.lightPlane.lookAt( _v2$5 );

		if ( this.color !== undefined ) {

			this.lightPlane.material.color.set( this.color );
			this.targetLine.material.color.set( this.color );

		} else {

			this.lightPlane.material.color.copy( this.light.color );
			this.targetLine.material.color.copy( this.light.color );

		}

		this.targetLine.lookAt( _v2$5 );
		this.targetLine.scale.z = _v3$1.length();

	};

	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author Mugen87 / https://github.com/Mugen87
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */

	var _vector$a = new Vector3();
	var _camera = new Camera();

	function CameraHelper( camera ) {

		var geometry = new BufferGeometry();
		var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: FaceColors } );

		var vertices = [];
		var colors = [];

		var pointMap = {};

		// colors

		var colorFrustum = new Color( 0xffaa00 );
		var colorCone = new Color( 0xff0000 );
		var colorUp = new Color( 0x00aaff );
		var colorTarget = new Color( 0xffffff );
		var colorCross = new Color( 0x333333 );

		// near

		addLine( 'n1', 'n2', colorFrustum );
		addLine( 'n2', 'n4', colorFrustum );
		addLine( 'n4', 'n3', colorFrustum );
		addLine( 'n3', 'n1', colorFrustum );

		// far

		addLine( 'f1', 'f2', colorFrustum );
		addLine( 'f2', 'f4', colorFrustum );
		addLine( 'f4', 'f3', colorFrustum );
		addLine( 'f3', 'f1', colorFrustum );

		// sides

		addLine( 'n1', 'f1', colorFrustum );
		addLine( 'n2', 'f2', colorFrustum );
		addLine( 'n3', 'f3', colorFrustum );
		addLine( 'n4', 'f4', colorFrustum );

		// cone

		addLine( 'p', 'n1', colorCone );
		addLine( 'p', 'n2', colorCone );
		addLine( 'p', 'n3', colorCone );
		addLine( 'p', 'n4', colorCone );

		// up

		addLine( 'u1', 'u2', colorUp );
		addLine( 'u2', 'u3', colorUp );
		addLine( 'u3', 'u1', colorUp );

		// target

		addLine( 'c', 't', colorTarget );
		addLine( 'p', 'c', colorCross );

		// cross

		addLine( 'cn1', 'cn2', colorCross );
		addLine( 'cn3', 'cn4', colorCross );

		addLine( 'cf1', 'cf2', colorCross );
		addLine( 'cf3', 'cf4', colorCross );

		function addLine( a, b, color ) {

			addPoint( a, color );
			addPoint( b, color );

		}

		function addPoint( id, color ) {

			vertices.push( 0, 0, 0 );
			colors.push( color.r, color.g, color.b );

			if ( pointMap[ id ] === undefined ) {

				pointMap[ id ] = [];

			}

			pointMap[ id ].push( ( vertices.length / 3 ) - 1 );

		}

		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		LineSegments.call( this, geometry, material );

		this.camera = camera;
		if ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }

		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;

		this.pointMap = pointMap;

		this.update();

	}

	CameraHelper.prototype = Object.create( LineSegments.prototype );
	CameraHelper.prototype.constructor = CameraHelper;

	CameraHelper.prototype.update = function () {

		var geometry = this.geometry;
		var pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix inverse
		// world matrix must be identity

		_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );

		// center / target

		setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
		setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );

		// near

		setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
		setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
		setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
		setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );

		// far

		setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
		setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
		setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
		setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );

		// up

		setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
		setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
		setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );

		// cross

		setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
		setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
		setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
		setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );

		setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
		setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
		setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
		setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );

		geometry.getAttribute( 'position' ).needsUpdate = true;

	};

	function setPoint( point, pointMap, geometry, camera, x, y, z ) {

		_vector$a.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			var position = geometry.getAttribute( 'position' );

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				position.setXYZ( points[ i ], _vector$a.x, _vector$a.y, _vector$a.z );

			}

		}

	}

	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author Mugen87 / http://github.com/Mugen87
	 */

	var _box$3 = new Box3();

	function BoxHelper( object, color ) {

		this.object = object;

		if ( color === undefined ) { color = 0xffff00; }

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );

		var geometry = new BufferGeometry();
		geometry.setIndex( new BufferAttribute( indices, 1 ) );
		geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.matrixAutoUpdate = false;

		this.update();

	}

	BoxHelper.prototype = Object.create( LineSegments.prototype );
	BoxHelper.prototype.constructor = BoxHelper;

	BoxHelper.prototype.update = function ( object ) {

		if ( object !== undefined ) {

			console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );

		}

		if ( this.object !== undefined ) {

			_box$3.setFromObject( this.object );

		}

		if ( _box$3.isEmpty() ) { return; }

		var min = _box$3.min;
		var max = _box$3.max;

		/*
		  5____4
		1/___0/|
		| 6__|_7
		2/___3/

		0: max.x, max.y, max.z
		1: min.x, max.y, max.z
		2: min.x, min.y, max.z
		3: max.x, min.y, max.z
		4: max.x, max.y, min.z
		5: min.x, max.y, min.z
		6: min.x, min.y, min.z
		7: max.x, min.y, min.z
		*/

		var position = this.geometry.attributes.position;
		var array = position.array;

		array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
		array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
		array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
		array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
		array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
		array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
		array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
		array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;

		position.needsUpdate = true;

		this.geometry.computeBoundingSphere();


	};

	BoxHelper.prototype.setFromObject = function ( object ) {

		this.object = object;
		this.update();

		return this;

	};

	BoxHelper.prototype.copy = function ( source ) {

		LineSegments.prototype.copy.call( this, source );

		this.object = source.object;

		return this;

	};

	BoxHelper.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function Box3Helper( box, color ) {

		this.type = 'Box3Helper';

		this.box = box;

		color = color || 0xffff00;

		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );

		var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];

		var geometry = new BufferGeometry();

		geometry.setIndex( new BufferAttribute( indices, 1 ) );

		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );

		LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		this.geometry.computeBoundingSphere();

	}

	Box3Helper.prototype = Object.create( LineSegments.prototype );
	Box3Helper.prototype.constructor = Box3Helper;

	Box3Helper.prototype.updateMatrixWorld = function ( force ) {

		var box = this.box;

		if ( box.isEmpty() ) { return; }

		box.getCenter( this.position );

		box.getSize( this.scale );

		this.scale.multiplyScalar( 0.5 );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */

	function PlaneHelper( plane, size, hex ) {

		this.type = 'PlaneHelper';

		this.plane = plane;

		this.size = ( size === undefined ) ? 1 : size;

		var color = ( hex !== undefined ) ? hex : 0xffff00;

		var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
		geometry.computeBoundingSphere();

		Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );

		//

		var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];

		var geometry2 = new BufferGeometry();
		geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
		geometry2.computeBoundingSphere();

		this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );

	}

	PlaneHelper.prototype = Object.create( Line.prototype );
	PlaneHelper.prototype.constructor = PlaneHelper;

	PlaneHelper.prototype.updateMatrixWorld = function ( force ) {

		var scale = - this.plane.constant;

		if ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter

		this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );

		this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here

		this.lookAt( this.plane.normal );

		Object3D.prototype.updateMatrixWorld.call( this, force );

	};

	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */

	var _axis = new Vector3();
	var _lineGeometry, _coneGeometry;

	function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		Object3D.call( this );

		if ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }
		if ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }
		if ( length === undefined ) { length = 1; }
		if ( color === undefined ) { color = 0xffff00; }
		if ( headLength === undefined ) { headLength = 0.2 * length; }
		if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }

		if ( _lineGeometry === undefined ) {

			_lineGeometry = new BufferGeometry();
			_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );

			_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
			_coneGeometry.translate( 0, - 0.5, 0 );

		}

		this.position.copy( origin );

		this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

	ArrowHelper.prototype = Object.create( Object3D.prototype );
	ArrowHelper.prototype.constructor = ArrowHelper;

	ArrowHelper.prototype.setDirection = function ( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			_axis.set( dir.z, 0, - dir.x ).normalize();

			var radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( _axis, radians );

		}

	};

	ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

		if ( headLength === undefined ) { headLength = 0.2 * length; }
		if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }

		this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
		this.line.updateMatrix();

		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();

	};

	ArrowHelper.prototype.setColor = function ( color ) {

		this.line.material.color.set( color );
		this.cone.material.color.set( color );

	};

	ArrowHelper.prototype.copy = function ( source ) {

		Object3D.prototype.copy.call( this, source, false );

		this.line.copy( source.line );
		this.cone.copy( source.cone );

		return this;

	};

	ArrowHelper.prototype.clone = function () {

		return new this.constructor().copy( this );

	};

	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */

	function AxesHelper( size ) {

		size = size || 1;

		var vertices = [
			0, 0, 0,	size, 0, 0,
			0, 0, 0,	0, size, 0,
			0, 0, 0,	0, 0, size
		];

		var colors = [
			1, 0, 0,	1, 0.6, 0,
			0, 1, 0,	0.6, 1, 0,
			0, 0, 1,	0, 0.6, 1
		];

		var geometry = new BufferGeometry();
		geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
		geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );

		var material = new LineBasicMaterial( { vertexColors: VertexColors } );

		LineSegments.call( this, geometry, material );

	}

	AxesHelper.prototype = Object.create( LineSegments.prototype );
	AxesHelper.prototype.constructor = AxesHelper;

	/**
	 * @author mrdoob / http://mrdoob.com/
	 */

	function Face4( a, b, c, d, normal, color, materialIndex ) {

		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new Face3( a, b, c, normal, color, materialIndex );

	}

	var LineStrip = 0;

	var LinePieces = 1;

	function MeshFaceMaterial( materials ) {

		console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
		return materials;

	}

	function MultiMaterial( materials ) {

		if ( materials === undefined ) { materials = []; }

		console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
		materials.isMultiMaterial = true;
		materials.materials = materials;
		materials.clone = function () {

			return materials.slice();

		};
		return materials;

	}

	function PointCloud( geometry, material ) {

		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new Points( geometry, material );

	}

	function Particle( material ) {

		console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
		return new Sprite( material );

	}

	function ParticleSystem( geometry, material ) {

		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new Points( geometry, material );

	}

	function PointCloudMaterial( parameters ) {

		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function ParticleBasicMaterial( parameters ) {

		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function ParticleSystemMaterial( parameters ) {

		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new PointsMaterial( parameters );

	}

	function Vertex( x, y, z ) {

		console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
		return new Vector3( x, y, z );

	}

	//

	function DynamicBufferAttribute( array, itemSize ) {

		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new BufferAttribute( array, itemSize ).setDynamic( true );

	}

	function Int8Attribute( array, itemSize ) {

		console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
		return new Int8BufferAttribute( array, itemSize );

	}

	function Uint8Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
		return new Uint8BufferAttribute( array, itemSize );

	}

	function Uint8ClampedAttribute( array, itemSize ) {

		console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
		return new Uint8ClampedBufferAttribute( array, itemSize );

	}

	function Int16Attribute( array, itemSize ) {

		console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
		return new Int16BufferAttribute( array, itemSize );

	}

	function Uint16Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
		return new Uint16BufferAttribute( array, itemSize );

	}

	function Int32Attribute( array, itemSize ) {

		console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
		return new Int32BufferAttribute( array, itemSize );

	}

	function Uint32Attribute( array, itemSize ) {

		console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
		return new Uint32BufferAttribute( array, itemSize );

	}

	function Float32Attribute( array, itemSize ) {

		console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
		return new Float32BufferAttribute( array, itemSize );

	}

	function Float64Attribute( array, itemSize ) {

		console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
		return new Float64BufferAttribute( array, itemSize );

	}

	//

	Curve.create = function ( construct, getPoint ) {

		console.log( 'THREE.Curve.create() has been deprecated' );

		construct.prototype = Object.create( Curve.prototype );
		construct.prototype.constructor = construct;
		construct.prototype.getPoint = getPoint;

		return construct;

	};

	//

	Object.assign( CurvePath.prototype, {

		createPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from path points (for Line or Points objects)

			var pts = this.getPoints( divisions );
			return this.createGeometry( pts );

		},

		createSpacedPointsGeometry: function ( divisions ) {

			console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			// generate geometry from equidistant sampling along the path

			var pts = this.getSpacedPoints( divisions );
			return this.createGeometry( pts );

		},

		createGeometry: function ( points ) {

			console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );

			var geometry = new Geometry();

			for ( var i = 0, l = points.length; i < l; i ++ ) {

				var point = points[ i ];
				geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );

			}

			return geometry;

		}

	} );

	//

	Object.assign( Path.prototype, {

		fromPoints: function ( points ) {

			console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
			return this.setFromPoints( points );

		}

	} );

	//

	function ClosedSplineCurve3( points ) {

		console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';
		this.closed = true;

	}

	ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	//

	function SplineCurve3( points ) {

		console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );

	//

	function Spline( points ) {

		console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );

		CatmullRomCurve3.call( this, points );
		this.type = 'catmullrom';

	}

	Spline.prototype = Object.create( CatmullRomCurve3.prototype );

	Object.assign( Spline.prototype, {

		initFromArray: function ( /* a */ ) {

			console.error( 'THREE.Spline: .initFromArray() has been removed.' );

		},
		getControlPointsArray: function ( /* optionalTarget */ ) {

			console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );

		},
		reparametrizeByArcLength: function ( /* samplingCoef */ ) {

			console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );

		}

	} );

	//

	function AxisHelper( size ) {

		console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
		return new AxesHelper( size );

	}

	function BoundingBoxHelper( object, color ) {

		console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
		return new BoxHelper( object, color );

	}

	function EdgesHelper( object, hex ) {

		console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
		return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

	}

	GridHelper.prototype.setColors = function () {

		console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );

	};

	SkeletonHelper.prototype.update = function () {

		console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );

	};

	function WireframeHelper( object, hex ) {

		console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
		return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );

	}

	//

	Object.assign( Loader.prototype, {

		extractUrlBase: function ( url ) {

			console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
			return LoaderUtils.extractUrlBase( url );

		}

	} );

	Loader.Handlers = {

		add: function ( /* regex, loader */ ) {

			console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );

		},

		get: function ( /* file */ ) {

			console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );

		}

	};

	function XHRLoader( manager ) {

		console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
		return new FileLoader( manager );

	}

	function BinaryTextureLoader( manager ) {

		console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
		return new DataTextureLoader( manager );

	}

	Object.assign( ObjectLoader.prototype, {

		setTexturePath: function ( value ) {

			console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
			return this.setResourcePath( value );

		}

	} );

	//

	Object.assign( Box2.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Object.assign( Box3.prototype, {

		center: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );

		},
		empty: function () {

			console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
			return this.isEmpty();

		},
		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		},
		size: function ( optionalTarget ) {

			console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
			return this.getSize( optionalTarget );

		}
	} );

	Line3.prototype.center = function ( optionalTarget ) {

		console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
		return this.getCenter( optionalTarget );

	};

	Object.assign( _Math, {

		random16: function () {

			console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
			return Math.random();

		},

		nearestPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
			return _Math.floorPowerOfTwo( value );

		},

		nextPowerOfTwo: function ( value ) {

			console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
			return _Math.ceilPowerOfTwo( value );

		}

	} );

	Object.assign( Matrix3.prototype, {

		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );

		}

	} );

	Object.assign( Matrix4.prototype, {

		extractPosition: function ( m ) {

			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );

		},
		flattenToArrayOffset: function ( array, offset ) {

			console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
			return this.toArray( array, offset );

		},
		getPosition: function () {

			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
			return new Vector3().setFromMatrixColumn( this, 3 );

		},
		setRotationFromQuaternion: function ( q ) {

			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
			return this.makeRotationFromQuaternion( q );

		},
		multiplyToArray: function () {

			console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );

		},
		multiplyVector3: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector4: function ( vector ) {

			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		multiplyVector3Array: function ( /* a */ ) {

			console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );

		},
		rotateAxis: function ( v ) {

			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
			v.transformDirection( this );

		},
		crossVector: function ( vector ) {

			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );

		},
		translate: function () {

			console.error( 'THREE.Matrix4: .translate() has been removed.' );

		},
		rotateX: function () {

			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );

		},
		rotateY: function () {

			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );

		},
		rotateZ: function () {

			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );

		},
		rotateByAxis: function () {

			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

		},
		applyToBuffer: function ( buffer /*, offset, length */ ) {

			console.warn( 'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.' );
			return this.applyToBufferAttribute( buffer );

		},
		applyToVector3Array: function ( /* array, offset, length */ ) {

			console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );

		},
		makeFrustum: function ( left, right, bottom, top, near, far ) {

			console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
			return this.makePerspective( left, right, top, bottom, near, far );

		}

	} );

	Plane.prototype.isIntersectionLine = function ( line ) {

		console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
		return this.intersectsLine( line );

	};

	Quaternion.prototype.multiplyVector3 = function ( vector ) {

		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );

	};

	Object.assign( Ray.prototype, {

		isIntersectionBox: function ( box ) {

			console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
			return this.intersectsBox( box );

		},
		isIntersectionPlane: function ( plane ) {

			console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
			return this.intersectsPlane( plane );

		},
		isIntersectionSphere: function ( sphere ) {

			console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
			return this.intersectsSphere( sphere );

		}

	} );

	Object.assign( Triangle.prototype, {

		area: function () {

			console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
			return this.getArea();

		},
		barycoordFromPoint: function ( point, target ) {

			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return this.getBarycoord( point, target );

		},
		midpoint: function ( target ) {

			console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
			return this.getMidpoint( target );

		},
		normal: function ( target ) {

			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return this.getNormal( target );

		},
		plane: function ( target ) {

			console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
			return this.getPlane( target );

		}

	} );

	Object.assign( Triangle, {

		barycoordFromPoint: function ( point, a, b, c, target ) {

			console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
			return Triangle.getBarycoord( point, a, b, c, target );

		},
		normal: function ( a, b, c, target ) {

			console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
			return Triangle.getNormal( a, b, c, target );

		}

	} );

	Object.assign( Shape.prototype, {

		extractAllPoints: function ( divisions ) {

			console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
			return this.extractPoints( divisions );

		},
		extrude: function ( options ) {

			console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
			return new ExtrudeGeometry( this, options );

		},
		makeGeometry: function ( options ) {

			console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
			return new ShapeGeometry( this, options );

		}

	} );

	Object.assign( Vector2.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector3.prototype, {

		setEulerFromRotationMatrix: function () {

			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

		},
		setEulerFromQuaternion: function () {

			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

		},
		getPositionFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
			return this.setFromMatrixPosition( m );

		},
		getScaleFromMatrix: function ( m ) {

			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
			return this.setFromMatrixScale( m );

		},
		getColumnFromMatrix: function ( index, matrix ) {

			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
			return this.setFromMatrixColumn( matrix, index );

		},
		applyProjection: function ( m ) {

			console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
			return this.applyMatrix4( m );

		},
		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		distanceToManhattan: function ( v ) {

			console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
			return this.manhattanDistanceTo( v );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	Object.assign( Vector4.prototype, {

		fromAttribute: function ( attribute, index, offset ) {

			console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
			return this.fromBufferAttribute( attribute, index, offset );

		},
		lengthManhattan: function () {

			console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
			return this.manhattanLength();

		}

	} );

	//

	Object.assign( Geometry.prototype, {

		computeTangents: function () {

			console.error( 'THREE.Geometry: .computeTangents() has been removed.' );

		},
		computeLineDistances: function () {

			console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );

		}

	} );

	Object.assign( Object3D.prototype, {

		getChildByName: function ( name ) {

			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );

		},
		renderDepth: function () {

			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );

		},
		translate: function ( distance, axis ) {

			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );

		},
		getWorldRotation: function () {

			console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );

		}

	} );

	Object.defineProperties( Object3D.prototype, {

		eulerOrder: {
			get: function () {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				return this.rotation.order;

			},
			set: function ( value ) {

				console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
				this.rotation.order = value;

			}
		},
		useQuaternion: {
			get: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			},
			set: function () {

				console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

			}
		}

	} );

	Object.defineProperties( LOD.prototype, {

		objects: {
			get: function () {

				console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
				return this.levels;

			}
		}

	} );

	Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {

		get: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		},
		set: function () {

			console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );

		}

	} );

	SkinnedMesh.prototype.initBones = function () {

		console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );

	};

	Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {

		get: function () {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			return this.arcLengthDivisions;

		},
		set: function ( value ) {

			console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
			this.arcLengthDivisions = value;

		}

	} );

	//

	PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {

		console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
				"Use .setFocalLength and .filmGauge for a photographic setup." );

		if ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }
		this.setFocalLength( focalLength );

	};

	//

	Object.defineProperties( Light.prototype, {
		onlyShadow: {
			set: function () {

				console.warn( 'THREE.Light: .onlyShadow has been removed.' );

			}
		},
		shadowCameraFov: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
				this.shadow.camera.fov = value;

			}
		},
		shadowCameraLeft: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
				this.shadow.camera.left = value;

			}
		},
		shadowCameraRight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
				this.shadow.camera.right = value;

			}
		},
		shadowCameraTop: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
				this.shadow.camera.top = value;

			}
		},
		shadowCameraBottom: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
				this.shadow.camera.bottom = value;

			}
		},
		shadowCameraNear: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
				this.shadow.camera.near = value;

			}
		},
		shadowCameraFar: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
				this.shadow.camera.far = value;

			}
		},
		shadowCameraVisible: {
			set: function () {

				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );

			}
		},
		shadowBias: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
				this.shadow.bias = value;

			}
		},
		shadowDarkness: {
			set: function () {

				console.warn( 'THREE.Light: .shadowDarkness has been removed.' );

			}
		},
		shadowMapWidth: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
				this.shadow.mapSize.width = value;

			}
		},
		shadowMapHeight: {
			set: function ( value ) {

				console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
				this.shadow.mapSize.height = value;

			}
		}
	} );

	//

	Object.defineProperties( BufferAttribute.prototype, {

		length: {
			get: function () {

				console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
				return this.array.length;

			}
		},
		dynamic: {
			get: function () {

				console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
				return this.usage === DynamicDrawUsage;

			},
			set: function ( /* value */ ) {

				console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
				this.setUsage( DynamicDrawUsage );

			}
		}

	} );

	Object.assign( BufferAttribute.prototype, {
		setDynamic: function ( value ) {

			console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
			this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
			return this;

		},
		copyIndicesArray: function ( /* indices */ ) {

			console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );

		},
		setArray: function ( /* array */ ) {

			console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

		}
	} );

	Object.assign( BufferGeometry.prototype, {

		addIndex: function ( index ) {

			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );

		},
		addAttribute: function ( name, attribute ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );

			if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {

				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

				return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );

			}

			if ( name === 'index' ) {

				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );

				return this;

			}

			return this.setAttribute( name, attribute );

		},
		addDrawCall: function ( start, count, indexOffset ) {

			if ( indexOffset !== undefined ) {

				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );

			}
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );

		},
		clearDrawCalls: function () {

			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();

		},
		computeTangents: function () {

			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );

		},
		computeOffsets: function () {

			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );

		},
		removeAttribute: function ( name ) {

			console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );

			return this.deleteAttribute( name );

		}
	} );

	Object.defineProperties( BufferGeometry.prototype, {

		drawcalls: {
			get: function () {

				console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
				return this.groups;

			}
		},
		offsets: {
			get: function () {

				console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
				return this.groups;

			}
		}

	} );

	Object.defineProperties( InterleavedBuffer.prototype, {

		dynamic: {
			get: function () {

				console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
				return this.usage === DynamicDrawUsage;

			},
			set: function ( value ) {

				console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
				this.setUsage( value );

			}
		}

	} );

	Object.assign( InterleavedBuffer.prototype, {
		setDynamic: function ( value ) {

			console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
			this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
			return this;

		},
		setArray: function ( /* array */ ) {

			console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );

		}
	} );

	//

	Object.assign( ExtrudeBufferGeometry.prototype, {

		getArrays: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );

		},

		addShapeList: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );

		},

		addShape: function () {

			console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );

		}

	} );

	//

	Object.defineProperties( Uniform.prototype, {

		dynamic: {
			set: function () {

				console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );

			}
		},
		onUpdate: {
			value: function () {

				console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
				return this;

			}
		}

	} );

	//

	Object.defineProperties( Material.prototype, {

		wrapAround: {
			get: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Material: .wrapAround has been removed.' );

			}
		},

		overdraw: {
			get: function () {

				console.warn( 'THREE.Material: .overdraw has been removed.' );

			},
			set: function () {

				console.warn( 'THREE.Material: .overdraw has been removed.' );

			}
		},

		wrapRGB: {
			get: function () {

				console.warn( 'THREE.Material: .wrapRGB has been removed.' );
				return new Color();

			}
		},

		shading: {
			get: function () {

				console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );

			},
			set: function ( value ) {

				console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
				this.flatShading = ( value === FlatShading );

			}
		},

		stencilMask: {
			get: function () {

				console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
				return this.stencilFuncMask;

			},
			set: function ( value ) {

				console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
				this.stencilFuncMask = value;

			}
		}

	} );

	Object.defineProperties( MeshPhongMaterial.prototype, {

		metal: {
			get: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
				return false;

			},
			set: function () {

				console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );

			}
		}

	} );

	Object.defineProperties( ShaderMaterial.prototype, {

		derivatives: {
			get: function () {

				console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				return this.extensions.derivatives;

			},
			set: function ( value ) {

				console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
				this.extensions.derivatives = value;

			}
		}

	} );

	//

	Object.assign( WebGLRenderer.prototype, {

		clearTarget: function ( renderTarget, color, depth, stencil ) {

			console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );

		},
		animate: function ( callback ) {

			console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
			this.setAnimationLoop( callback );

		},
		getCurrentRenderTarget: function () {

			console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
			return this.getRenderTarget();

		},
		getMaxAnisotropy: function () {

			console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
			return this.capabilities.getMaxAnisotropy();

		},
		getPrecision: function () {

			console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
			return this.capabilities.precision;

		},
		resetGLState: function () {

			console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
			return this.state.reset();

		},
		supportsFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return this.extensions.get( 'OES_texture_float' );

		},
		supportsHalfFloatTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return this.extensions.get( 'OES_texture_half_float' );

		},
		supportsStandardDerivatives: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return this.extensions.get( 'OES_standard_derivatives' );

		},
		supportsCompressedTextureS3TC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );

		},
		supportsCompressedTexturePVRTC: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );

		},
		supportsBlendMinMax: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return this.extensions.get( 'EXT_blend_minmax' );

		},
		supportsVertexTextures: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
			return this.capabilities.vertexTextures;

		},
		supportsInstancedArrays: function () {

			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return this.extensions.get( 'ANGLE_instanced_arrays' );

		},
		enableScissorTest: function ( boolean ) {

			console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
			this.setScissorTest( boolean );

		},
		initMaterial: function () {

			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

		},
		addPrePlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

		},
		addPostPlugin: function () {

			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

		},
		updateShadowMap: function () {

			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

		},
		setFaceCulling: function () {

			console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );

		},
		allocTextureUnit: function () {

			console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );

		},
		setTexture: function () {

			console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );

		},
		setTexture2D: function () {

			console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );

		},
		setTextureCube: function () {

			console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );

		},
		getActiveMipMapLevel: function () {

			console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
			return this.getActiveMipmapLevel();

		}

	} );

	Object.defineProperties( WebGLRenderer.prototype, {

		shadowMapEnabled: {
			get: function () {

				return this.shadowMap.enabled;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
				this.shadowMap.enabled = value;

			}
		},
		shadowMapType: {
			get: function () {

				return this.shadowMap.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
				this.shadowMap.type = value;

			}
		},
		shadowMapCullFace: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );

			}
		},
		context: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
				return this.getContext();

			}
		}

	} );

	Object.defineProperties( WebGLShadowMap.prototype, {

		cullFace: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function ( /* cullFace */ ) {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );

			}
		},
		renderReverseSided: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );

			}
		},
		renderSingleSided: {
			get: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
				return undefined;

			},
			set: function () {

				console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );

			}
		}

	} );

	//

	Object.defineProperties( WebGLRenderTargetCube.prototype, {

		activeCubeFace: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderTargetCube: .activeCubeFace has been removed. It is now the second parameter of WebGLRenderer.setRenderTarget().' );

			}
		},
		activeMipMapLevel: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebGLRenderTargetCube: .activeMipMapLevel has been removed. It is now the third parameter of WebGLRenderer.setRenderTarget().' );

			}
		}

	} );

	//

	Object.defineProperties( WebGLRenderTarget.prototype, {

		wrapS: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				return this.texture.wrapS;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
				this.texture.wrapS = value;

			}
		},
		wrapT: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				return this.texture.wrapT;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
				this.texture.wrapT = value;

			}
		},
		magFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				return this.texture.magFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
				this.texture.magFilter = value;

			}
		},
		minFilter: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				return this.texture.minFilter;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
				this.texture.minFilter = value;

			}
		},
		anisotropy: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				return this.texture.anisotropy;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
				this.texture.anisotropy = value;

			}
		},
		offset: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				return this.texture.offset;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
				this.texture.offset = value;

			}
		},
		repeat: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				return this.texture.repeat;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
				this.texture.repeat = value;

			}
		},
		format: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				return this.texture.format;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
				this.texture.format = value;

			}
		},
		type: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				return this.texture.type;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
				this.texture.type = value;

			}
		},
		generateMipmaps: {
			get: function () {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				return this.texture.generateMipmaps;

			},
			set: function ( value ) {

				console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
				this.texture.generateMipmaps = value;

			}
		}

	} );

	//

	Object.defineProperties( WebVRManager.prototype, {

		standing: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebVRManager: .standing has been removed.' );

			}
		},
		userHeight: {
			set: function ( /* value */ ) {

				console.warn( 'THREE.WebVRManager: .userHeight has been removed.' );

			}
		}

	} );

	//

	Object.defineProperties( Audio.prototype, {

		load: {
			value: function ( file ) {

				console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
				var scope = this;
				var audioLoader = new AudioLoader();
				audioLoader.load( file, function ( buffer ) {

					scope.setBuffer( buffer );

				} );
				return this;

			}
		},
		startTime: {
			set: function () {

				console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );

			}
		}

	} );

	AudioAnalyser.prototype.getData = function () {

		console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
		return this.getFrequencyData();

	};

	//

	CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {

		console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
		return this.update( renderer, scene );

	};

	//

	var GeometryUtils = {

		merge: function ( geometry1, geometry2, materialIndexOffset ) {

			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
			var matrix;

			if ( geometry2.isMesh ) {

				geometry2.matrixAutoUpdate && geometry2.updateMatrix();

				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;

			}

			geometry1.merge( geometry2, matrix, materialIndexOffset );

		},

		center: function ( geometry ) {

			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();

		}

	};

	ImageUtils.crossOrigin = undefined;

	ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );

		var loader = new TextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( url, onLoad, undefined, onError );

		if ( mapping ) { texture.mapping = mapping; }

		return texture;

	};

	ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {

		console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );

		var loader = new CubeTextureLoader();
		loader.setCrossOrigin( this.crossOrigin );

		var texture = loader.load( urls, onLoad, undefined, onError );

		if ( mapping ) { texture.mapping = mapping; }

		return texture;

	};

	ImageUtils.loadCompressedTexture = function () {

		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );

	};

	ImageUtils.loadCompressedTextureCube = function () {

		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );

	};

	//

	function CanvasRenderer() {

		console.error( 'THREE.CanvasRenderer has been removed' );

	}

	//

	function JSONLoader() {

		console.error( 'THREE.JSONLoader has been removed.' );

	}

	//

	var SceneUtils = {

		createMultiMaterialObject: function ( /* geometry, materials */ ) {

			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

		},

		detach: function ( /* child, parent, scene */ ) {

			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

		},

		attach: function ( /* child, scene, parent */ ) {

			console.error( 'THREE.SceneUtils has been moved to /examples/js/utils/SceneUtils.js' );

		}

	};

	//

	function LensFlare() {

		console.error( 'THREE.LensFlare has been moved to /examples/js/objects/Lensflare.js' );

	}

	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

		/* eslint-disable no-undef */
		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
			revision: REVISION,
		} } ) );
		/* eslint-enable no-undef */

	}

	exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
	exports.AddEquation = AddEquation;
	exports.AddOperation = AddOperation;
	exports.AdditiveBlending = AdditiveBlending;
	exports.AlphaFormat = AlphaFormat;
	exports.AlwaysDepth = AlwaysDepth;
	exports.AlwaysStencilFunc = AlwaysStencilFunc;
	exports.AmbientLight = AmbientLight;
	exports.AmbientLightProbe = AmbientLightProbe;
	exports.AnimationClip = AnimationClip;
	exports.AnimationLoader = AnimationLoader;
	exports.AnimationMixer = AnimationMixer;
	exports.AnimationObjectGroup = AnimationObjectGroup;
	exports.AnimationUtils = AnimationUtils;
	exports.ArcCurve = ArcCurve;
	exports.ArrayCamera = ArrayCamera;
	exports.ArrowHelper = ArrowHelper;
	exports.Audio = Audio;
	exports.AudioAnalyser = AudioAnalyser;
	exports.AudioContext = AudioContext;
	exports.AudioListener = AudioListener;
	exports.AudioLoader = AudioLoader;
	exports.AxesHelper = AxesHelper;
	exports.AxisHelper = AxisHelper;
	exports.BackSide = BackSide;
	exports.BasicDepthPacking = BasicDepthPacking;
	exports.BasicShadowMap = BasicShadowMap;
	exports.BinaryTextureLoader = BinaryTextureLoader;
	exports.Bone = Bone;
	exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
	exports.BoundingBoxHelper = BoundingBoxHelper;
	exports.Box2 = Box2;
	exports.Box3 = Box3;
	exports.Box3Helper = Box3Helper;
	exports.BoxBufferGeometry = BoxBufferGeometry;
	exports.BoxGeometry = BoxGeometry;
	exports.BoxHelper = BoxHelper;
	exports.BufferAttribute = BufferAttribute;
	exports.BufferGeometry = BufferGeometry;
	exports.BufferGeometryLoader = BufferGeometryLoader;
	exports.ByteType = ByteType;
	exports.Cache = Cache;
	exports.Camera = Camera;
	exports.CameraHelper = CameraHelper;
	exports.CanvasRenderer = CanvasRenderer;
	exports.CanvasTexture = CanvasTexture;
	exports.CatmullRomCurve3 = CatmullRomCurve3;
	exports.CineonToneMapping = CineonToneMapping;
	exports.CircleBufferGeometry = CircleBufferGeometry;
	exports.CircleGeometry = CircleGeometry;
	exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
	exports.Clock = Clock;
	exports.ClosedSplineCurve3 = ClosedSplineCurve3;
	exports.Color = Color;
	exports.ColorKeyframeTrack = ColorKeyframeTrack;
	exports.CompressedTexture = CompressedTexture;
	exports.CompressedTextureLoader = CompressedTextureLoader;
	exports.ConeBufferGeometry = ConeBufferGeometry;
	exports.ConeGeometry = ConeGeometry;
	exports.CubeCamera = CubeCamera;
	exports.CubeGeometry = BoxGeometry;
	exports.CubeReflectionMapping = CubeReflectionMapping;
	exports.CubeRefractionMapping = CubeRefractionMapping;
	exports.CubeTexture = CubeTexture;
	exports.CubeTextureLoader = CubeTextureLoader;
	exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
	exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
	exports.CubicBezierCurve = CubicBezierCurve;
	exports.CubicBezierCurve3 = CubicBezierCurve3;
	exports.CubicInterpolant = CubicInterpolant;
	exports.CullFaceBack = CullFaceBack;
	exports.CullFaceFront = CullFaceFront;
	exports.CullFaceFrontBack = CullFaceFrontBack;
	exports.CullFaceNone = CullFaceNone;
	exports.Curve = Curve;
	exports.CurvePath = CurvePath;
	exports.CustomBlending = CustomBlending;
	exports.CylinderBufferGeometry = CylinderBufferGeometry;
	exports.CylinderGeometry = CylinderGeometry;
	exports.Cylindrical = Cylindrical;
	exports.DataTexture = DataTexture;
	exports.DataTexture2DArray = DataTexture2DArray;
	exports.DataTexture3D = DataTexture3D;
	exports.DataTextureLoader = DataTextureLoader;
	exports.DecrementStencilOp = DecrementStencilOp;
	exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
	exports.DefaultLoadingManager = DefaultLoadingManager;
	exports.DepthFormat = DepthFormat;
	exports.DepthStencilFormat = DepthStencilFormat;
	exports.DepthTexture = DepthTexture;
	exports.DirectionalLight = DirectionalLight;
	exports.DirectionalLightHelper = DirectionalLightHelper;
	exports.DirectionalLightShadow = DirectionalLightShadow;
	exports.DiscreteInterpolant = DiscreteInterpolant;
	exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
	exports.DodecahedronGeometry = DodecahedronGeometry;
	exports.DoubleSide = DoubleSide;
	exports.DstAlphaFactor = DstAlphaFactor;
	exports.DstColorFactor = DstColorFactor;
	exports.DynamicBufferAttribute = DynamicBufferAttribute;
	exports.DynamicCopyUsage = DynamicCopyUsage;
	exports.DynamicDrawUsage = DynamicDrawUsage;
	exports.DynamicReadUsage = DynamicReadUsage;
	exports.EdgesGeometry = EdgesGeometry;
	exports.EdgesHelper = EdgesHelper;
	exports.EllipseCurve = EllipseCurve;
	exports.EqualDepth = EqualDepth;
	exports.EqualStencilFunc = EqualStencilFunc;
	exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
	exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
	exports.Euler = Euler;
	exports.EventDispatcher = EventDispatcher;
	exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
	exports.ExtrudeGeometry = ExtrudeGeometry;
	exports.Face3 = Face3;
	exports.Face4 = Face4;
	exports.FaceColors = FaceColors;
	exports.FaceNormalsHelper = FaceNormalsHelper;
	exports.FileLoader = FileLoader;
	exports.FlatShading = FlatShading;
	exports.Float32Attribute = Float32Attribute;
	exports.Float32BufferAttribute = Float32BufferAttribute;
	exports.Float64Attribute = Float64Attribute;
	exports.Float64BufferAttribute = Float64BufferAttribute;
	exports.FloatType = FloatType;
	exports.Fog = Fog;
	exports.FogExp2 = FogExp2;
	exports.Font = Font;
	exports.FontLoader = FontLoader;
	exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
	exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
	exports.FrontSide = FrontSide;
	exports.Frustum = Frustum;
	exports.GammaEncoding = GammaEncoding;
	exports.Geometry = Geometry;
	exports.GeometryUtils = GeometryUtils;
	exports.GreaterDepth = GreaterDepth;
	exports.GreaterEqualDepth = GreaterEqualDepth;
	exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
	exports.GreaterStencilFunc = GreaterStencilFunc;
	exports.GridHelper = GridHelper;
	exports.Group = Group;
	exports.HalfFloatType = HalfFloatType;
	exports.HemisphereLight = HemisphereLight;
	exports.HemisphereLightHelper = HemisphereLightHelper;
	exports.HemisphereLightProbe = HemisphereLightProbe;
	exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
	exports.IcosahedronGeometry = IcosahedronGeometry;
	exports.ImageBitmapLoader = ImageBitmapLoader;
	exports.ImageLoader = ImageLoader;
	exports.ImageUtils = ImageUtils;
	exports.ImmediateRenderObject = ImmediateRenderObject;
	exports.IncrementStencilOp = IncrementStencilOp;
	exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
	exports.InstancedBufferAttribute = InstancedBufferAttribute;
	exports.InstancedBufferGeometry = InstancedBufferGeometry;
	exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
	exports.InstancedMesh = InstancedMesh;
	exports.Int16Attribute = Int16Attribute;
	exports.Int16BufferAttribute = Int16BufferAttribute;
	exports.Int32Attribute = Int32Attribute;
	exports.Int32BufferAttribute = Int32BufferAttribute;
	exports.Int8Attribute = Int8Attribute;
	exports.Int8BufferAttribute = Int8BufferAttribute;
	exports.IntType = IntType;
	exports.InterleavedBuffer = InterleavedBuffer;
	exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
	exports.Interpolant = Interpolant;
	exports.InterpolateDiscrete = InterpolateDiscrete;
	exports.InterpolateLinear = InterpolateLinear;
	exports.InterpolateSmooth = InterpolateSmooth;
	exports.InvertStencilOp = InvertStencilOp;
	exports.JSONLoader = JSONLoader;
	exports.KeepStencilOp = KeepStencilOp;
	exports.KeyframeTrack = KeyframeTrack;
	exports.LOD = LOD;
	exports.LatheBufferGeometry = LatheBufferGeometry;
	exports.LatheGeometry = LatheGeometry;
	exports.Layers = Layers;
	exports.LensFlare = LensFlare;
	exports.LessDepth = LessDepth;
	exports.LessEqualDepth = LessEqualDepth;
	exports.LessEqualStencilFunc = LessEqualStencilFunc;
	exports.LessStencilFunc = LessStencilFunc;
	exports.Light = Light;
	exports.LightProbe = LightProbe;
	exports.LightProbeHelper = LightProbeHelper;
	exports.LightShadow = LightShadow;
	exports.Line = Line;
	exports.Line3 = Line3;
	exports.LineBasicMaterial = LineBasicMaterial;
	exports.LineCurve = LineCurve;
	exports.LineCurve3 = LineCurve3;
	exports.LineDashedMaterial = LineDashedMaterial;
	exports.LineLoop = LineLoop;
	exports.LinePieces = LinePieces;
	exports.LineSegments = LineSegments;
	exports.LineStrip = LineStrip;
	exports.LinearEncoding = LinearEncoding;
	exports.LinearFilter = LinearFilter;
	exports.LinearInterpolant = LinearInterpolant;
	exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
	exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
	exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
	exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
	exports.LinearToneMapping = LinearToneMapping;
	exports.Loader = Loader;
	exports.LoaderUtils = LoaderUtils;
	exports.LoadingManager = LoadingManager;
	exports.LogLuvEncoding = LogLuvEncoding;
	exports.LoopOnce = LoopOnce;
	exports.LoopPingPong = LoopPingPong;
	exports.LoopRepeat = LoopRepeat;
	exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
	exports.LuminanceFormat = LuminanceFormat;
	exports.MOUSE = MOUSE;
	exports.Material = Material;
	exports.MaterialLoader = MaterialLoader;
	exports.Math = _Math;
	exports.Matrix3 = Matrix3;
	exports.Matrix4 = Matrix4;
	exports.MaxEquation = MaxEquation;
	exports.Mesh = Mesh;
	exports.MeshBasicMaterial = MeshBasicMaterial;
	exports.MeshDepthMaterial = MeshDepthMaterial;
	exports.MeshDistanceMaterial = MeshDistanceMaterial;
	exports.MeshFaceMaterial = MeshFaceMaterial;
	exports.MeshLambertMaterial = MeshLambertMaterial;
	exports.MeshMatcapMaterial = MeshMatcapMaterial;
	exports.MeshNormalMaterial = MeshNormalMaterial;
	exports.MeshPhongMaterial = MeshPhongMaterial;
	exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
	exports.MeshStandardMaterial = MeshStandardMaterial;
	exports.MeshToonMaterial = MeshToonMaterial;
	exports.MinEquation = MinEquation;
	exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
	exports.MixOperation = MixOperation;
	exports.MultiMaterial = MultiMaterial;
	exports.MultiplyBlending = MultiplyBlending;
	exports.MultiplyOperation = MultiplyOperation;
	exports.NearestFilter = NearestFilter;
	exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
	exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
	exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
	exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
	exports.NeverDepth = NeverDepth;
	exports.NeverStencilFunc = NeverStencilFunc;
	exports.NoBlending = NoBlending;
	exports.NoColors = NoColors;
	exports.NoToneMapping = NoToneMapping;
	exports.NormalBlending = NormalBlending;
	exports.NotEqualDepth = NotEqualDepth;
	exports.NotEqualStencilFunc = NotEqualStencilFunc;
	exports.NumberKeyframeTrack = NumberKeyframeTrack;
	exports.Object3D = Object3D;
	exports.ObjectLoader = ObjectLoader;
	exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
	exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
	exports.OctahedronGeometry = OctahedronGeometry;
	exports.OneFactor = OneFactor;
	exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
	exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
	exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
	exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
	exports.OrthographicCamera = OrthographicCamera;
	exports.PCFShadowMap = PCFShadowMap;
	exports.PCFSoftShadowMap = PCFSoftShadowMap;
	exports.ParametricBufferGeometry = ParametricBufferGeometry;
	exports.ParametricGeometry = ParametricGeometry;
	exports.Particle = Particle;
	exports.ParticleBasicMaterial = ParticleBasicMaterial;
	exports.ParticleSystem = ParticleSystem;
	exports.ParticleSystemMaterial = ParticleSystemMaterial;
	exports.Path = Path;
	exports.PerspectiveCamera = PerspectiveCamera;
	exports.Plane = Plane;
	exports.PlaneBufferGeometry = PlaneBufferGeometry;
	exports.PlaneGeometry = PlaneGeometry;
	exports.PlaneHelper = PlaneHelper;
	exports.PointCloud = PointCloud;
	exports.PointCloudMaterial = PointCloudMaterial;
	exports.PointLight = PointLight;
	exports.PointLightHelper = PointLightHelper;
	exports.Points = Points;
	exports.PointsMaterial = PointsMaterial;
	exports.PolarGridHelper = PolarGridHelper;
	exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
	exports.PolyhedronGeometry = PolyhedronGeometry;
	exports.PositionalAudio = PositionalAudio;
	exports.PositionalAudioHelper = PositionalAudioHelper;
	exports.PropertyBinding = PropertyBinding;
	exports.PropertyMixer = PropertyMixer;
	exports.QuadraticBezierCurve = QuadraticBezierCurve;
	exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
	exports.Quaternion = Quaternion;
	exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
	exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
	exports.REVISION = REVISION;
	exports.RGBADepthPacking = RGBADepthPacking;
	exports.RGBAFormat = RGBAFormat;
	exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
	exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
	exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
	exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
	exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
	exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
	exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
	exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
	exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
	exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
	exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
	exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
	exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
	exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
	exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
	exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
	exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
	exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
	exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
	exports.RGBDEncoding = RGBDEncoding;
	exports.RGBEEncoding = RGBEEncoding;
	exports.RGBEFormat = RGBEFormat;
	exports.RGBFormat = RGBFormat;
	exports.RGBM16Encoding = RGBM16Encoding;
	exports.RGBM7Encoding = RGBM7Encoding;
	exports.RGB_ETC1_Format = RGB_ETC1_Format;
	exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
	exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
	exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
	exports.RawShaderMaterial = RawShaderMaterial;
	exports.Ray = Ray;
	exports.Raycaster = Raycaster;
	exports.RectAreaLight = RectAreaLight;
	exports.RectAreaLightHelper = RectAreaLightHelper;
	exports.RedFormat = RedFormat;
	exports.ReinhardToneMapping = ReinhardToneMapping;
	exports.RepeatWrapping = RepeatWrapping;
	exports.ReplaceStencilOp = ReplaceStencilOp;
	exports.ReverseSubtractEquation = ReverseSubtractEquation;
	exports.RingBufferGeometry = RingBufferGeometry;
	exports.RingGeometry = RingGeometry;
	exports.Scene = Scene;
	exports.SceneUtils = SceneUtils;
	exports.ShaderChunk = ShaderChunk;
	exports.ShaderLib = ShaderLib;
	exports.ShaderMaterial = ShaderMaterial;
	exports.ShadowMaterial = ShadowMaterial;
	exports.Shape = Shape;
	exports.ShapeBufferGeometry = ShapeBufferGeometry;
	exports.ShapeGeometry = ShapeGeometry;
	exports.ShapePath = ShapePath;
	exports.ShapeUtils = ShapeUtils;
	exports.ShortType = ShortType;
	exports.Skeleton = Skeleton;
	exports.SkeletonHelper = SkeletonHelper;
	exports.SkinnedMesh = SkinnedMesh;
	exports.SmoothShading = SmoothShading;
	exports.Sphere = Sphere;
	exports.SphereBufferGeometry = SphereBufferGeometry;
	exports.SphereGeometry = SphereGeometry;
	exports.Spherical = Spherical;
	exports.SphericalHarmonics3 = SphericalHarmonics3;
	exports.SphericalReflectionMapping = SphericalReflectionMapping;
	exports.Spline = Spline;
	exports.SplineCurve = SplineCurve;
	exports.SplineCurve3 = SplineCurve3;
	exports.SpotLight = SpotLight;
	exports.SpotLightHelper = SpotLightHelper;
	exports.SpotLightShadow = SpotLightShadow;
	exports.Sprite = Sprite;
	exports.SpriteMaterial = SpriteMaterial;
	exports.SrcAlphaFactor = SrcAlphaFactor;
	exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
	exports.SrcColorFactor = SrcColorFactor;
	exports.StaticCopyUsage = StaticCopyUsage;
	exports.StaticDrawUsage = StaticDrawUsage;
	exports.StaticReadUsage = StaticReadUsage;
	exports.StereoCamera = StereoCamera;
	exports.StreamCopyUsage = StreamCopyUsage;
	exports.StreamDrawUsage = StreamDrawUsage;
	exports.StreamReadUsage = StreamReadUsage;
	exports.StringKeyframeTrack = StringKeyframeTrack;
	exports.SubtractEquation = SubtractEquation;
	exports.SubtractiveBlending = SubtractiveBlending;
	exports.TOUCH = TOUCH;
	exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
	exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
	exports.TetrahedronGeometry = TetrahedronGeometry;
	exports.TextBufferGeometry = TextBufferGeometry;
	exports.TextGeometry = TextGeometry;
	exports.Texture = Texture;
	exports.TextureLoader = TextureLoader;
	exports.TorusBufferGeometry = TorusBufferGeometry;
	exports.TorusGeometry = TorusGeometry;
	exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
	exports.TorusKnotGeometry = TorusKnotGeometry;
	exports.Triangle = Triangle;
	exports.TriangleFanDrawMode = TriangleFanDrawMode;
	exports.TriangleStripDrawMode = TriangleStripDrawMode;
	exports.TrianglesDrawMode = TrianglesDrawMode;
	exports.TubeBufferGeometry = TubeBufferGeometry;
	exports.TubeGeometry = TubeGeometry;
	exports.UVMapping = UVMapping;
	exports.Uint16Attribute = Uint16Attribute;
	exports.Uint16BufferAttribute = Uint16BufferAttribute;
	exports.Uint32Attribute = Uint32Attribute;
	exports.Uint32BufferAttribute = Uint32BufferAttribute;
	exports.Uint8Attribute = Uint8Attribute;
	exports.Uint8BufferAttribute = Uint8BufferAttribute;
	exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
	exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
	exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
	exports.Uniform = Uniform;
	exports.UniformsLib = UniformsLib;
	exports.UniformsUtils = UniformsUtils;
	exports.UnsignedByteType = UnsignedByteType;
	exports.UnsignedInt248Type = UnsignedInt248Type;
	exports.UnsignedIntType = UnsignedIntType;
	exports.UnsignedShort4444Type = UnsignedShort4444Type;
	exports.UnsignedShort5551Type = UnsignedShort5551Type;
	exports.UnsignedShort565Type = UnsignedShort565Type;
	exports.UnsignedShortType = UnsignedShortType;
	exports.VSMShadowMap = VSMShadowMap;
	exports.Vector2 = Vector2;
	exports.Vector3 = Vector3;
	exports.Vector4 = Vector4;
	exports.VectorKeyframeTrack = VectorKeyframeTrack;
	exports.Vertex = Vertex;
	exports.VertexColors = VertexColors;
	exports.VertexNormalsHelper = VertexNormalsHelper;
	exports.VideoTexture = VideoTexture;
	exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
	exports.WebGLRenderTarget = WebGLRenderTarget;
	exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
	exports.WebGLRenderer = WebGLRenderer;
	exports.WebGLUtils = WebGLUtils;
	exports.WireframeGeometry = WireframeGeometry;
	exports.WireframeHelper = WireframeHelper;
	exports.WrapAroundEnding = WrapAroundEnding;
	exports.XHRLoader = XHRLoader;
	exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
	exports.ZeroFactor = ZeroFactor;
	exports.ZeroSlopeEnding = ZeroSlopeEnding;
	exports.ZeroStencilOp = ZeroStencilOp;
	exports.sRGBEncoding = sRGBEncoding;

    return exports;
});

define('skylark-threejs/main',[
	"skylark-langx/skylark",
    "./three"
], function(skylark,threejs) {
    return skylark.attach("intg.threejs",threejs);
});

define('skylark-threejs', ['skylark-threejs/main'], function (main) { return main; });

define('skylark-online3dviewer/ImporterViewer',[
	"skylark-threejs",
	"skylark-jsmodeler"
],function(THREE,JSM){
	JSM.THREE = THREE;
	
	var ImporterViewer = function ()
	{
		this.viewer = null;
		this.jsonData = null;
	};

	ImporterViewer.prototype.Init = function (canvasName)
	{
		var viewerSettings = {
			cameraEyePosition : [8.0, -6.0, 4.0],
			cameraCenterPosition : [0.0, 0.0, 0.0],
			cameraUpVector : [0, 0, 1]
		};

		this.viewer = new JSM.ThreeViewer ();
		var canvas = document.getElementById (canvasName);
		if (!this.viewer.Start (canvas, viewerSettings)) {
			return false;
		}
		this.viewer.navigation.SetNearDistanceLimit (0.1);
		this.viewer.navigation.SetFarDistanceLimit (100000.0);
		this.viewer.SetClearColor (0xdddddd);
		this.viewer.Draw ();
		
		return true;
	};

	ImporterViewer.prototype.GetJsonData = function ()
	{
		return this.jsonData;
	};

	ImporterViewer.prototype.SetJsonData = function (jsonData)
	{
		this.jsonData = jsonData;
	};

	ImporterViewer.prototype.RemoveMeshes = function ()
	{
		this.viewer.RemoveMeshes ();
	};

	ImporterViewer.prototype.ShowAllMeshes = function (inEnvironment)
	{
		this.RemoveMeshes ();
		
		var myThis = this;
		var currentMeshIndex = 0;
		var environment = {
			onStart : function (taskCount/*, meshes*/) {
				inEnvironment.onStart (taskCount);
				myThis.viewer.EnableDraw (false);
			},
			onProgress : function (currentTask, meshes) {
				while (currentMeshIndex < meshes.length) {
					myThis.viewer.AddMesh (meshes[currentMeshIndex]);
					currentMeshIndex = currentMeshIndex + 1;
				}
				inEnvironment.onProgress (currentTask);
			},
			onFinish : function (meshes) {
				myThis.AdjustClippingPlanes (50.0);
				myThis.FitInWindow ();
				myThis.viewer.EnableDraw (true);
				myThis.viewer.Draw ();
				inEnvironment.onFinish (meshes);
			}
		};
		
		JSM.ConvertJSONDataToThreeMeshes (this.jsonData, this.Draw.bind (this), environment);
	};

	ImporterViewer.prototype.GetMeshesUnderPosition = function (x, y)
	{
		var objects = this.viewer.GetObjectsUnderPosition (x, y);
		var meshes = [];
		var i;
		for (i = 0; i < objects.length; i++) {
			if (objects[i].object instanceof THREE.Mesh) {
				meshes.push (objects[i].object);
			}
		}
		return meshes;
	};

	ImporterViewer.prototype.ShowMesh = function (index, show)
	{
		this.viewer.scene.traverse (function (current) {
			if (current instanceof THREE.Mesh) {
				if (current.originalJsonMeshIndex == index) {
					if (show) {
						current.visible = true;
					} else {
						current.visible = false;
					}
				}
			}
		});
	};

	ImporterViewer.prototype.GetMeshesByMaterial = function (materialIndex)
	{
		var meshIndices = [];
		this.viewer.scene.traverse (function (current) {
			if (current instanceof THREE.Mesh) {
				if (current.originalJsonMaterialIndex == materialIndex) {
					if (meshIndices.length === 0 || meshIndices[meshIndices.length - 1] != current.originalJsonMeshIndex) {
						meshIndices.push (current.originalJsonMeshIndex);
					}
				}
			}
		});
		return meshIndices;
	};

	ImporterViewer.prototype.HighlightMesh = function (index, highlight)
	{
		this.viewer.scene.traverse (function (current) {
			if (current instanceof THREE.Mesh) {
				if (current.originalJsonMeshIndex == index) {
					if (highlight) {
						current.material.emissive.setHex (0x555555);
					} else {
						current.material.emissive.setHex (0);
					}
				}
			}
		});
	};

	ImporterViewer.prototype.FitInWindow = function ()
	{
		this.viewer.FitInWindow ();
	};

	ImporterViewer.prototype.FitMeshInWindow = function (index)
	{
		var meshes = [];
		this.viewer.scene.traverse (function (current) {
			if (current instanceof THREE.Mesh) {
				if (current.originalJsonMeshIndex == index) {
					meshes.push (current);
				}
			}
		});
		this.viewer.FitMeshesInWindow (meshes);
	};

	ImporterViewer.prototype.FitMeshesInWindow = function (meshIndices)
	{
		var meshes = [];
		this.viewer.scene.traverse (function (current) {
			if (current instanceof THREE.Mesh) {
				if (meshIndices.indexOf (current.originalJsonMeshIndex) != -1) {
					meshes.push (current);
				}
			}
		});
		this.viewer.FitMeshesInWindow (meshes);
	};

	ImporterViewer.prototype.AdjustClippingPlanes = function ()
	{
		if (this.viewer.MeshCount () > 0) {
			this.viewer.AdjustClippingPlanes (50.0);
		}
	};

	ImporterViewer.prototype.SetFixUp = function ()
	{
		this.viewer.navigation.EnableFixUp (!this.viewer.navigation.cameraFixUp);
	};

	ImporterViewer.prototype.SetNamedView = function (viewName)
	{
		var eye, center, up;
		if (viewName == 'z') {
			eye = new JSM.Coord (1.0, 0.0, 0.0);
			center = new JSM.Coord (0.0, 0.0, 0.0);
			up = new JSM.Coord (0.0, 0.0, 1.0);
		} else if (viewName == '-z') {
			eye = new JSM.Coord (-1.0, 0.0, 0.0);
			center = new JSM.Coord (0.0, 0.0, 0.0);
			up = new JSM.Coord (0.0, 0.0, -1.0);
		} else if (viewName == 'y') {
			eye = new JSM.Coord (1.0, 0.0, 0.0);
			center = new JSM.Coord (0.0, 0.0, 0.0);
			up = new JSM.Coord (0.0, 1.0, 0.0);
		} else if (viewName == '-y') {
			eye = new JSM.Coord (-1.0, 0.0, 0.0);
			center = new JSM.Coord (0.0, 0.0, 0.0);
			up = new JSM.Coord (0.0, -1.0, 0.0);
		} else if (viewName == 'x') {
			eye = new JSM.Coord (0.0, 1.0, 0.0);
			center = new JSM.Coord (0.0, 0.0, 0.0);
			up = new JSM.Coord (1.0, 0.0, 0.0);
		} else if (viewName == '-x') {
			eye = new JSM.Coord (0.0, -1.0, 0.0);
			center = new JSM.Coord (0.0, 0.0, 0.0);
			up = new JSM.Coord (-1.0, 0.0, 0.0);
		} else {
			return;
		}

		this.viewer.cameraMove.Set (eye, center, up);
		this.viewer.FitInWindow ();
	};

	ImporterViewer.prototype.Draw = function ()
	{
		this.viewer.Draw ();
	};

	return ImporterViewer;
});

define('skylark-online3dviewer/ImporterApp',[
	"skylark-jquery",
	"skylark-jsmodeler",
	"./InfoTable",
	"./FloatingControl",
	"./FloatingDialog",
	"./ExtensionInterface",
	"./ExtensionButtons",
	"./ImporterProgressBar",
	"./ImporterButtons",
	"./ImporterMenu",
	"./ImporterViewer"
],function($,JSM,InfoTable,FloatingControl,FloatingDialog,ExtensionInterface,ExtensionButtons, ImporterProgressBar,ImporterButtons, ImporterMenu,ImporterViewer){
	var ImporterApp = function ()
	{
		this.canvas = null;
		this.viewer = null;
		this.fileNames = null;
		this.inGenerate = false;
		this.meshesGroup = null;
		this.materialMenuItems = null;
		this.meshMenuItems = null;
		this.extensions = [];
		this.importerButtons = null;
		this.extensionButtons = null;
		this.introControl = null;
		this.floatingDialog = null;
		this.isMobile = null;
		this.readyForTest = null;
	};

	ImporterApp.prototype.Init = function ()
	{
		if (!JSM.IsWebGLEnabled () || !JSM.IsFileApiEnabled ()) {
			while (document.body.lastChild) {
				document.body.removeChild (document.body.lastChild);
			}

			var div = $('<div>').addClass ('nosupport').appendTo ($('body'));
			div.html ([
				'<div id="nosupport">',
				this.GetWelcomeText (),
				'<div class="nosupporterror">You need a browser which supports the following technologies: WebGL, WebGLRenderingContext, File, FileReader, FileList, Blob, URL.</div>',
				'</div>'
			].join (''));
			return;
		}
		
		var myThis = this;
		var top = $('#top');
		this.importerButtons = new ImporterButtons (top);
		this.importerButtons.AddLogo ('Online 3D Viewer <span class="version">v 0.6.6</span>');
		this.importerButtons.AddButton ('images/openfile.png', 'Open File', function () { myThis.OpenFile (); });
		this.importerButtons.AddButton ('images/fitinwindow.png', 'Fit In Window', function () { myThis.FitInWindow (); });
		this.importerButtons.AddToggleButton ('images/fixup.png', 'images/fixupgray.png', 'Enable/Disable Fixed Up Vector', function () { myThis.SetFixUp (); });
		this.importerButtons.AddButton ('images/top.png', 'Set Up Vector (Z)', function () { myThis.SetNamedView ('z'); });
		this.importerButtons.AddButton ('images/bottom.png', 'Set Up Vector (-Z)', function () { myThis.SetNamedView ('-z'); });
		this.importerButtons.AddButton ('images/front.png', 'Set Up Vector (Y)', function () { myThis.SetNamedView ('y'); });
		this.importerButtons.AddButton ('images/back.png', 'Set Up Vector (-Y)', function () { myThis.SetNamedView ('-y'); });
		this.importerButtons.AddButton ('images/left.png', 'Set Up Vector (X)', function () { myThis.SetNamedView ('x'); });
		this.importerButtons.AddButton ('images/right.png', 'Set Up Vector (-X)', function () { myThis.SetNamedView ('-x'); });
		
		this.extensionButtons = new ExtensionButtons (top);
		this.introControl = new FloatingControl ();
		this.floatingDialog = new FloatingDialog ();
		
		var match = window.matchMedia ('(max-device-width : 600px)');
		this.isMobile = match.matches;

		window.addEventListener ('resize', this.Resize.bind (this), false);
		this.Resize ();

		var canvasName = 'modelcanvas';
		this.canvas = $('#' + canvasName);
		this.RegisterCanvasClick ();
		this.viewer = new ImporterViewer ();
		this.viewer.Init (canvasName);

		window.addEventListener ('dragover', this.DragOver.bind (this), false);
		window.addEventListener ('drop', this.Drop.bind (this), false);
		
		var fileInput = document.getElementById ('file');
		fileInput.addEventListener ('change', this.FileSelected.bind (this), false);
		
		window.onhashchange = this.LoadFilesFromHash.bind (this);
		var hasHashModel = this.LoadFilesFromHash ();
		if (!hasHashModel && !this.isMobile) {
			this.ShowIntroControl ();
		}
	};

	ImporterApp.prototype.ClearReadyForTest = function ()
	{
		if (this.readyForTest !== null) {
			this.readyForTest.remove ();
			this.readyForTest = null;
		}
	};

	ImporterApp.prototype.SetReadyForTest = function ()
	{
		this.readyForTest = $('<div>').attr ('id', 'readyfortest').hide ().appendTo ($('body'));
	};

	ImporterApp.prototype.AddExtension = function (extension)
	{
		if (!extension.IsEnabled ()) {
			return;
		}
		
		var extInterface = new ExtensionInterface (this);
		extension.Init (extInterface);
	};

	ImporterApp.prototype.ShowIntroControl = function ()
	{
		var dialogText = [
			'<div class="importerdialog">',
			this.GetWelcomeText (),
			'</div>',
		].join ('');
		this.introControl.Open ({
			parent : this.canvas,
			text : dialogText
		});
		this.Resize ();
	};

	ImporterApp.prototype.HideIntroControl = function ()
	{
		this.introControl.Close ();
		this.Resize ();
	};

	ImporterApp.prototype.GetWelcomeText = function ()
	{
		var welcomeText = [
			'<div class="welcometitle">Welcome to Online 3D Viewer!</div>',
			'<div class="welcometext">Here you can view your local 3D models online. You have three ways to open a file. Use the open button above to select files, simply drag and drop files to this browser window, or define the url of the files as location hash.</div>',
			'<div class="welcometextformats">Supported formats: 3ds, obj, stl, off.</div>',
			'<div class="welcometext">Powered by <a target="_blank" href="https://github.com/mrdoob/three.js/">Three.js</a> and <a target="_blank" href="https://github.com/kovacsv/JSModeler">JSModeler</a>.</div>',
			'<div class="welcometext"><a target="_blank" href="https://github.com/kovacsv/Online3DViewer"><img src="images/githublogo.png"/></a></div>',
		].join ('');
		return welcomeText;
	};

	ImporterApp.prototype.Resize = function ()
	{
		function SetWidth (elem, value)
		{
			elem.width = value;
			elem.style.width = value + 'px';
		}

		function SetHeight (elem, value)
		{
			elem.height = value;
			elem.style.height = value + 'px';
		}

		var top = document.getElementById ('top');
		var left = document.getElementById ('left');
		var canvas = document.getElementById ('modelcanvas');
		var height = document.body.clientHeight - top.offsetHeight;

		SetHeight (left, height);
		SetHeight (canvas, height);
		SetWidth (canvas, document.body.clientWidth - left.offsetWidth);
		
		this.introControl.Resize ();
		this.floatingDialog.Resize ();
	};

	ImporterApp.prototype.JsonLoaded = function (progressBar)
	{
		this.Generate (progressBar);
	};

	ImporterApp.prototype.GenerateMenu = function ()
	{
		function AddDefaultGroup (menu, name, id)
		{
			var group = menu.AddGroup (name, {
				id : id,
				openCloseButton : {
					title : 'Show/Hide ' + name
				}
			});
			return group;
		}

		function AddInformation (infoGroup, jsonData)
		{
			var infoTable = new InfoTable (infoGroup.GetContentDiv ());

			var materialCount = jsonData.materials.length;
			var vertexCount = 0;
			var triangleCount = 0;
			
			var i, j, mesh, triangles;
			for (i = 0; i < jsonData.meshes.length; i++) {
				mesh = jsonData.meshes[i];
				vertexCount += mesh.vertices.length / 3;
				for (j = 0; j < mesh.triangles.length; j++) {
					triangles = mesh.triangles[j];
					triangleCount += triangles.parameters.length / 9;
				}
			}
		
			infoTable.AddRow ('Material count', materialCount);	
			infoTable.AddRow ('Vertex count', vertexCount);	
			infoTable.AddRow ('Triangle count', triangleCount);	
		}
		
		function AddMaterial (importerApp, importerMenu, materialsGroup, materialIndex, material)
		{
			var materialMenuItem = materialsGroup.AddSubItem (material.name, {
				openCloseButton : {
					title : 'Show/Hide Information',
					onOpen : function (contentDiv, material) {
						contentDiv.empty ();
						var materialButtons = $('<div>').addClass ('submenubuttons').appendTo (contentDiv);
						var highlightButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/highlightmesh.png').attr ('title', 'Highlight Meshes By Material').appendTo (materialButtons);
						highlightButton.click (function () {
							importerApp.HighlightMeshesByMaterial (materialIndex);
						});
						var fitInWindowButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/fitinwindowsmall.png').attr ('title', 'Fit Meshes In Window By Material').appendTo (materialButtons);
						fitInWindowButton.click (function () {
							importerApp.FitMeshesByMaterialInWindow (materialIndex);
						});
						var table = new InfoTable (contentDiv);
						table.AddColorRow ('Ambient', material.ambient);
						table.AddColorRow ('Diffuse', material.diffuse);
						table.AddColorRow ('Specular', material.specular);
						table.AddRow ('Shininess', material.shininess.toFixed (2));
						table.AddRow ('Opacity', material.opacity.toFixed (2));
					},
					userData : material
				}
			});
			return materialMenuItem;
		}

		function AddMesh (importerApp, importerMenu, meshesGroup, mesh, meshIndex)
		{
			function AddMeshButtons (importerApp, contentDiv, meshName, meshIndex)
			{
				function CopyToClipboard (text) {
					var input = document.createElement ('input');
					input.style.position = 'absolute';
					input.style.left = '0';
					input.style.top = '0';
					input.setAttribute ('value', text);
					document.body.appendChild (input);
					input.select ();
					document.execCommand ('copy');
					document.body.removeChild(input);
				}
				
				var meshButtons = $('<div>').addClass ('submenubuttons').appendTo (contentDiv);
				var fitInWindowButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/fitinwindowsmall.png').attr ('title', 'Fit Mesh In Window').appendTo (meshButtons);
				fitInWindowButton.click (function () {
					importerApp.FitMeshInWindow (meshIndex);
				});
				var highlightButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/highlightmesh.png').attr ('title', 'Highlight Mesh').appendTo (meshButtons);
				highlightButton.click (function () {
					importerApp.HighlightMesh (meshIndex);
				});
				var copyNameToClipboardButton = $('<img>').addClass ('submenubutton').attr ('src', 'images/copytoclipboard.png').attr ('title', 'Copy Mesh Name To Clipboard').appendTo (meshButtons);
				copyNameToClipboardButton.click (function () {
					CopyToClipboard (meshName);
				});
			}
			
			var visibleImage = null;
			var meshMenuItem = meshesGroup.AddSubItem (mesh.name, {
				id : 'meshmenuitem-' + meshIndex.toString (),
				openCloseButton : {
					title : 'Show/Hide Details',
					onOpen : function (contentDiv, mesh) {
						contentDiv.empty ();

						AddMeshButtons (importerApp, contentDiv, mesh.name, meshIndex);
						var table = new InfoTable (contentDiv);
						
						var min = new JSM.Coord (JSM.Inf, JSM.Inf, JSM.Inf);
						var max = new JSM.Coord (-JSM.Inf, -JSM.Inf, -JSM.Inf);
						var i, vertex;
						for (i = 0; i < mesh.vertices.length; i =  i + 3) {
							vertex = new JSM.Coord (mesh.vertices[i], mesh.vertices[i + 1], mesh.vertices[i + 2]);
							min.x = JSM.Minimum (min.x, vertex.x);
							min.y = JSM.Minimum (min.y, vertex.y);
							min.z = JSM.Minimum (min.z, vertex.z);
							max.x = JSM.Maximum (max.x, vertex.x);
							max.y = JSM.Maximum (max.y, vertex.y);
							max.z = JSM.Maximum (max.z, vertex.z);
						}
						table.AddRow ('X Size', (max.x - min.x).toFixed (2));
						table.AddRow ('Y Size', (max.y - min.y).toFixed (2));
						table.AddRow ('Z Size', (max.z - min.z).toFixed (2));
						
						var triangleCount = 0;
						var triangles;
						for (i = 0; i < mesh.triangles.length; i++) {
							triangles = mesh.triangles[i];
							triangleCount += triangles.parameters.length / 9;
						}
					
						table.AddRow ('Vertex count', mesh.vertices.length / 3);
						table.AddRow ('Triangle count', triangleCount);
					},
					userData : mesh
				},
				userButtons : [
					{
						id : 'showhidemesh-' + meshIndex,
						title : 'Show/Hide Mesh',
						onCreate : function (image) {
							image.attr ('src', 'images/visible.png');
							visibleImage = image;
						},
						onClick : function (image, meshIndex) {
							importerApp.ShowHideMesh (meshIndex);
						},
						onCtrlClick : function (image, meshIndex) {
							importerApp.IsolateMesh (meshIndex);
						},
						userData : meshIndex
					}
				]
			});
			
			meshMenuItem.isVisible = true;
			meshMenuItem.visibleImage = visibleImage;
			return meshMenuItem;
		}		
		
		var jsonData = this.viewer.GetJsonData ();
		var menu = $('#menu');
		var importerMenu = new ImporterMenu (menu);

		var filesGroup = AddDefaultGroup (importerMenu, 'Files', 'filesmenuitem');
		filesGroup.AddSubItem (this.fileNames.main);
		var i;
		for (i = 0; i < this.fileNames.requested.length; i++) {
			filesGroup.AddSubItem (this.fileNames.requested[i]);
		}
		
		if (this.fileNames.missing.length > 0) {
			var missingFilesGroup = AddDefaultGroup (importerMenu, 'Missing Files', 'missingfilesmenuitem');
			for (i = 0; i < this.fileNames.missing.length; i++) {
				missingFilesGroup.AddSubItem (this.fileNames.missing[i]);
			}
		}
		
		var infoGroup = AddDefaultGroup (importerMenu, 'Information', 'informationmenuitem');
		AddInformation (infoGroup, jsonData);
		
		this.materialMenuItems = [];
		var materialsGroup = AddDefaultGroup (importerMenu, 'Materials', 'materialsmenuitem');
		var material, materialMenuItem;
		for (i = 0; i < jsonData.materials.length; i++) {
			material = jsonData.materials[i];
			materialMenuItem = AddMaterial (this, importerMenu, materialsGroup, i, material);
			this.materialMenuItems.push (materialMenuItem);
		}
		
		this.meshesGroup = AddDefaultGroup (importerMenu, 'Meshes', 'meshesmenuitem');
		this.meshMenuItems = [];
		var mesh, meshMenuItem;
		for (i = 0; i < jsonData.meshes.length; i++) {
			mesh = jsonData.meshes[i];
			meshMenuItem = AddMesh (this, importerMenu, this.meshesGroup, mesh, i);
			this.meshMenuItems.push (meshMenuItem);
		}
		
		this.Resize ();
	};

	ImporterApp.prototype.GenerateError = function (errorMessage)
	{
		this.viewer.RemoveMeshes ();
		var menu = $('#menu');
		menu.empty ();
		
		this.floatingDialog.Open ({
			title : 'Error',
			text : '<div class="importerdialog">' + errorMessage + '</div>',
			buttons : [
				{
					text : 'ok',
					callback : function (dialog) {
						dialog.Close ();
					}
				}
			]
		});	
	};

	ImporterApp.prototype.Generate = function (progressBar)
	{
		function ShowMeshes (importerApp, progressBar, merge)
		{
			importerApp.inGenerate = true;
			var environment = {
				onStart : function (taskCount) {
					progressBar.Init (taskCount);
				},
				onProgress : function (currentTask) {
					progressBar.Step (currentTask + 1);
				},
				onFinish : function () {
					importerApp.GenerateMenu ();
					importerApp.inGenerate = false;
					importerApp.SetReadyForTest ();
				}
			};
			
			if (merge) {
				var jsonData = importerApp.viewer.GetJsonData ();
				importerApp.viewer.SetJsonData (JSM.MergeJsonDataMeshes (jsonData));
			}
			importerApp.viewer.ShowAllMeshes (environment);
		}

		var jsonData = this.viewer.GetJsonData ();
		if (jsonData.materials.length === 0 || jsonData.meshes.length === 0) {
			this.GenerateError ('Failed to open file. Maybe something is wrong with your file.');
			this.SetReadyForTest ();
			return;
		}
		
		var myThis = this;
		if (jsonData.meshes.length > 250) {
			this.floatingDialog.Open ({
				title : 'Information',
				text : '<div class="importerdialog">The model contains a large number of meshes. It can cause performance problems. Would you like to merge meshes?</div>',
				buttons : [
					{
						text : 'yes',
						callback : function (dialog) {
							ShowMeshes (myThis, progressBar, true);
							dialog.Close ();
						}
					},
					{
						text : 'no',
						callback : function (dialog) {
							ShowMeshes (myThis, progressBar, false);
							dialog.Close ();
						}
					}				
				]
			});
		} else {
			ShowMeshes (myThis, progressBar, false);
		}
	};

	ImporterApp.prototype.FitInWindow = function ()
	{
		this.viewer.FitInWindow ();
	};

	ImporterApp.prototype.FitMeshInWindow = function (meshIndex)
	{
		this.viewer.FitMeshInWindow (meshIndex);
	};

	ImporterApp.prototype.FitMeshesByMaterialInWindow = function (materialIndex)
	{
		var meshIndices = this.viewer.GetMeshesByMaterial (materialIndex);
		if (meshIndices.length === 0) {
			return;
		}
		this.viewer.FitMeshesInWindow (meshIndices);
	};

	ImporterApp.prototype.SetFixUp = function ()
	{
		this.viewer.SetFixUp ();
	};

	ImporterApp.prototype.SetNamedView = function (viewName)
	{
		this.viewer.SetNamedView (viewName);
	};

	ImporterApp.prototype.SetView = function (viewType)
	{
		this.viewer.SetView (viewType);
	};

	ImporterApp.prototype.ShowHideMesh = function (meshIndex)
	{
		var meshMenuItem = this.meshMenuItems[meshIndex];
		this.ShowHideMeshInternal (meshIndex, !meshMenuItem.isVisible);
		this.viewer.Draw ();
	};

	ImporterApp.prototype.IsolateMesh = function (meshIndex)
	{
		var i, meshMenuItem;
		
		var onlyThisVisible = true;
		if (!this.meshMenuItems[meshIndex].isVisible) {
			onlyThisVisible = false;
		} else {
			for (i = 0; i < this.meshMenuItems.length; i++) {
				meshMenuItem = this.meshMenuItems[i];
				if (meshMenuItem.isVisible && i !== meshIndex) {
					onlyThisVisible = false;
					break;
				}
			}
		}
		
		var i;
		for (i = 0; i < this.meshMenuItems.length; i++) {
			if (onlyThisVisible) {
				this.ShowHideMeshInternal (i, true);
			} else {
				if (i == meshIndex) {
					this.ShowHideMeshInternal (i, true);
				} else {
					this.ShowHideMeshInternal (i, false);
				}
			}
		}
		
		this.viewer.Draw ();
	};

	ImporterApp.prototype.ShowHideMeshInternal = function (meshIndex, isVisible)
	{
		var meshMenuItem = this.meshMenuItems[meshIndex];
		meshMenuItem.isVisible = isVisible;
		meshMenuItem.visibleImage.attr ('src', meshMenuItem.isVisible ? 'images/visible.png' : 'images/hidden.png');
		this.viewer.ShowMesh (meshIndex, meshMenuItem.isVisible);
	};

	ImporterApp.prototype.HighlightMeshInternal = function (meshIndex, highlight)
	{
		var meshMenuItem = this.meshMenuItems[meshIndex];
		meshMenuItem.Highlight (highlight);
		this.viewer.HighlightMesh (meshIndex, highlight);
	};

	ImporterApp.prototype.ProcessFiles = function (fileList, isUrl)
	{
		this.ClearReadyForTest ();
		this.HideIntroControl ();
		this.floatingDialog.Close ();
		if (this.inGenerate) {
			return;
		}

		var userFiles = fileList;
		if (userFiles.length === 0) {
			return;
		}
		
		this.fileNames = null;
		
		var myThis = this;
		var processorFunc = JSM.ConvertFileListToJsonData;
		if (isUrl) {
			processorFunc = JSM.ConvertURLListToJsonData;
		}

		var menu = $('#menu');
		menu.empty ();
		if (isUrl) {
			menu.html ('Downloading files...');
		} else {
			menu.html ('Loading files...');
		}
		
		processorFunc (userFiles, {
			onError : function () {
				myThis.GenerateError ('No readable file found. You can open 3ds, obj, stl, and off files.');
				myThis.SetReadyForTest ();
				return;
			},
			onReady : function (fileNames, jsonData) {
				myThis.fileNames = fileNames;
				myThis.viewer.SetJsonData (jsonData);
				menu.empty ();
				var progressBar = new ImporterProgressBar (menu);
				myThis.JsonLoaded (progressBar);
			}
		});
	};

	ImporterApp.prototype.RegisterCanvasClick = function ()
	{
		var myThis = this;
		var mousePosition = null;
		this.canvas.mousedown (function () {
			mousePosition = [event.pageX, event.pageY];
		});
		this.canvas.mouseup (function (event) {
			var mouseMoved = (mousePosition == null || event.pageX != mousePosition[0] || event.pageY != mousePosition[1]);
			if (!mouseMoved) {
				var x = event.pageX - $(this).offset ().left;
				var y = event.pageY - $(this).offset ().top;
				myThis.OnCanvasClick (x, y);
			}
			mousePosition = null;
		});
	};

	ImporterApp.prototype.ScrollMeshIntoView = function (meshIndex)
	{
		if (meshIndex == -1) {
			return;
		}
		var menuItem = this.meshMenuItems[meshIndex];
		menuItem.menuItemDiv.get (0).scrollIntoView ();
	};

	ImporterApp.prototype.HighlightMesh = function (meshIndex)
	{
		var i, menuItem, highlight;
		if (meshIndex != -1) {
			for (i = 0; i < this.meshMenuItems.length; i++) {
				menuItem = this.meshMenuItems[i];
				highlight = false;
				if (i == meshIndex) {
					if (!menuItem.IsHighlighted ()) {
						this.HighlightMeshInternal (i, true);
					} else {
						this.HighlightMeshInternal (i, false);
					}
				}
			}
		} else {
			for (i = 0; i < this.meshMenuItems.length; i++) {
				menuItem = this.meshMenuItems[i];
				if (menuItem.IsHighlighted ()) {
					this.HighlightMeshInternal (i, false);
				}
			}
		}
		
		this.viewer.Draw ();
	};

	ImporterApp.prototype.HighlightMeshesByMaterial = function (materialIndex)
	{
		var meshIndices = this.viewer.GetMeshesByMaterial (materialIndex);
		if (meshIndices.length === 0) {
			return;
		}
		
		var i, meshIndex, meshMenuItem;
		this.HighlightMesh (-1);
		for (i = 0; i < meshIndices.length; i++) {
			meshIndex = meshIndices[i];
			meshMenuItem = this.meshMenuItems[meshIndex];
			this.HighlightMeshInternal (meshIndex, true);
		}

		this.meshesGroup.SetOpen (true);
		this.ScrollMeshIntoView (meshIndices[0]);
		this.viewer.Draw ();
	};

	ImporterApp.prototype.OnCanvasClick = function (x, y)
	{
		if (this.meshMenuItems == null) {
			return;
		}
		var objects = this.viewer.GetMeshesUnderPosition (x, y);
		var meshIndex = -1;
		if (objects.length > 0) {
			meshIndex = objects[0].originalJsonMeshIndex;
			this.meshesGroup.SetOpen (true);
		}
		
		this.HighlightMesh (meshIndex);
		this.ScrollMeshIntoView (meshIndex);
	};

	ImporterApp.prototype.DragOver = function (event)
	{
		event.stopPropagation ();
		event.preventDefault ();
		event.dataTransfer.dropEffect = 'copy';
	};

	ImporterApp.prototype.Drop = function (event)
	{
		event.stopPropagation ();
		event.preventDefault ();
		this.ResetHash ();
		this.ProcessFiles (event.dataTransfer.files, false);
	};

	ImporterApp.prototype.FileSelected = function (event)
	{
		event.stopPropagation ();
		event.preventDefault ();
		this.ResetHash ();
		this.ProcessFiles (event.target.files, false);
	};

	ImporterApp.prototype.OpenFile = function ()
	{
		var fileInput = document.getElementById ('file');
		fileInput.click ();
	};

	ImporterApp.prototype.ResetHash = function ()
	{
		if (window.location.hash.length > 1) {
			window.location.hash = '';
		}
	};

	ImporterApp.prototype.LoadFilesFromHash = function ()
	{
		if (window.location.hash.length < 2) {
			return false;
		}
		
		var fileInput = $('#file');
		var hash = window.location.hash;
		if (hash == '#testmode') {
			fileInput.css ('display', '');
			fileInput.css ('position', 'absolute');
			fileInput.css ('right', '10px');
			fileInput.css ('bottom', '10px');
			return false;	
		}
		
		fileInput.css ('display', 'none');
		var hash = hash.substr (1, hash.length - 1);
		var fileList = hash.split (',');
		this.ProcessFiles (fileList, true);
		return true;
	};

	return ImporterApp;
});
define('skylark-online3dviewer/main',[
	"skylark-langx/skylark",
	"./ImporterApp"
],function(skylark,ImporterApp) {
	return skylark.attach("intg.jsmodeler.Online3dViewer",ImporterApp);
});
define('skylark-online3dviewer', ['skylark-online3dviewer/main'], function (main) { return main; });


},this);